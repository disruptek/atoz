
import
  json, options, hashes, uri, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Relational Database Service
## version: 2014-10-31
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Relational Database Service</fullname> <p> </p> <p>Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier to set up, operate, and scale a relational database in the cloud. It provides cost-efficient, resizeable capacity for an industry-standard relational database and manages common database administration tasks, freeing up developers to focus on what makes their applications and businesses unique.</p> <p>Amazon RDS gives you access to the capabilities of a MySQL, MariaDB, PostgreSQL, Microsoft SQL Server, Oracle, or Amazon Aurora database server. These capabilities mean that the code, applications, and tools you already use today with your existing databases work with Amazon RDS without modification. Amazon RDS automatically backs up your database and maintains the database software that powers your DB instance. Amazon RDS is flexible: you can scale your DB instance's compute resources and storage capacity to meet your application's demand. As with all Amazon Web Services, there are no up-front investments, and you pay only for the resources you use.</p> <p>This interface reference for Amazon RDS contains documentation for a programming or command line interface you can use to manage Amazon RDS. Note that Amazon RDS is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p> <p> <b>Amazon RDS API Reference</b> </p> <ul> <li> <p>For the alphabetical list of API actions, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Operations.html">API Actions</a>.</p> </li> <li> <p>For the alphabetical list of data types, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Types.html">Data Types</a>.</p> </li> <li> <p>For a list of common query parameters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonParameters.html">Common Parameters</a>.</p> </li> <li> <p>For descriptions of the error codes, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonErrors.html">Common Errors</a>.</p> </li> </ul> <p> <b>Amazon RDS User Guide</b> </p> <ul> <li> <p>For a summary of the Amazon RDS interfaces, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html#Welcome.Interfaces">Available RDS Interfaces</a>.</p> </li> <li> <p>For more information about how to use the Query API, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Using_the_Query_API.html">Using the Query API</a>.</p> </li> </ul>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/rds/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_590348 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_590348](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_590348): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "rds.ap-northeast-1.amazonaws.com", "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
                           "us-west-2": "rds.us-west-2.amazonaws.com",
                           "eu-west-2": "rds.eu-west-2.amazonaws.com", "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "rds.eu-central-1.amazonaws.com",
                           "us-east-2": "rds.us-east-2.amazonaws.com",
                           "us-east-1": "rds.us-east-1.amazonaws.com", "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "rds.ap-south-1.amazonaws.com",
                           "eu-north-1": "rds.eu-north-1.amazonaws.com", "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
                           "us-west-1": "rds.us-west-1.amazonaws.com",
                           "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "rds.eu-west-3.amazonaws.com",
                           "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "rds.sa-east-1.amazonaws.com",
                           "eu-west-1": "rds.eu-west-1.amazonaws.com",
                           "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com", "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "rds.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
      "us-west-2": "rds.us-west-2.amazonaws.com",
      "eu-west-2": "rds.eu-west-2.amazonaws.com",
      "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
      "eu-central-1": "rds.eu-central-1.amazonaws.com",
      "us-east-2": "rds.us-east-2.amazonaws.com",
      "us-east-1": "rds.us-east-1.amazonaws.com",
      "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "rds.ap-south-1.amazonaws.com",
      "eu-north-1": "rds.eu-north-1.amazonaws.com",
      "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
      "us-west-1": "rds.us-west-1.amazonaws.com",
      "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
      "eu-west-3": "rds.eu-west-3.amazonaws.com",
      "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "rds.sa-east-1.amazonaws.com",
      "eu-west-1": "rds.eu-west-1.amazonaws.com",
      "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
      "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "rds"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddRoleToDBCluster_590960 = ref object of OpenApiRestCall_590348
proc url_PostAddRoleToDBCluster_590962(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddRoleToDBCluster_590961(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_590963 = query.getOrDefault("Action")
  valid_590963 = validateParameter(valid_590963, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_590963 != nil:
    section.add "Action", valid_590963
  var valid_590964 = query.getOrDefault("Version")
  valid_590964 = validateParameter(valid_590964, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_590964 != nil:
    section.add "Version", valid_590964
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_590965 = header.getOrDefault("X-Amz-Signature")
  valid_590965 = validateParameter(valid_590965, JString, required = false,
                                 default = nil)
  if valid_590965 != nil:
    section.add "X-Amz-Signature", valid_590965
  var valid_590966 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_590966 = validateParameter(valid_590966, JString, required = false,
                                 default = nil)
  if valid_590966 != nil:
    section.add "X-Amz-Content-Sha256", valid_590966
  var valid_590967 = header.getOrDefault("X-Amz-Date")
  valid_590967 = validateParameter(valid_590967, JString, required = false,
                                 default = nil)
  if valid_590967 != nil:
    section.add "X-Amz-Date", valid_590967
  var valid_590968 = header.getOrDefault("X-Amz-Credential")
  valid_590968 = validateParameter(valid_590968, JString, required = false,
                                 default = nil)
  if valid_590968 != nil:
    section.add "X-Amz-Credential", valid_590968
  var valid_590969 = header.getOrDefault("X-Amz-Security-Token")
  valid_590969 = validateParameter(valid_590969, JString, required = false,
                                 default = nil)
  if valid_590969 != nil:
    section.add "X-Amz-Security-Token", valid_590969
  var valid_590970 = header.getOrDefault("X-Amz-Algorithm")
  valid_590970 = validateParameter(valid_590970, JString, required = false,
                                 default = nil)
  if valid_590970 != nil:
    section.add "X-Amz-Algorithm", valid_590970
  var valid_590971 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_590971 = validateParameter(valid_590971, JString, required = false,
                                 default = nil)
  if valid_590971 != nil:
    section.add "X-Amz-SignedHeaders", valid_590971
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  section = newJObject()
  var valid_590972 = formData.getOrDefault("FeatureName")
  valid_590972 = validateParameter(valid_590972, JString, required = false,
                                 default = nil)
  if valid_590972 != nil:
    section.add "FeatureName", valid_590972
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_590973 = formData.getOrDefault("RoleArn")
  valid_590973 = validateParameter(valid_590973, JString, required = true,
                                 default = nil)
  if valid_590973 != nil:
    section.add "RoleArn", valid_590973
  var valid_590974 = formData.getOrDefault("DBClusterIdentifier")
  valid_590974 = validateParameter(valid_590974, JString, required = true,
                                 default = nil)
  if valid_590974 != nil:
    section.add "DBClusterIdentifier", valid_590974
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590975: Call_PostAddRoleToDBCluster_590960; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_590975.validator(path, query, header, formData, body)
  let scheme = call_590975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590975.url(scheme.get, call_590975.host, call_590975.base,
                         call_590975.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590975, url, valid)

proc call*(call_590976: Call_PostAddRoleToDBCluster_590960; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "AddRoleToDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  var query_590977 = newJObject()
  var formData_590978 = newJObject()
  add(formData_590978, "FeatureName", newJString(FeatureName))
  add(formData_590978, "RoleArn", newJString(RoleArn))
  add(query_590977, "Action", newJString(Action))
  add(query_590977, "Version", newJString(Version))
  add(formData_590978, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_590976.call(nil, query_590977, nil, formData_590978, nil)

var postAddRoleToDBCluster* = Call_PostAddRoleToDBCluster_590960(
    name: "postAddRoleToDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_PostAddRoleToDBCluster_590961, base: "/",
    url: url_PostAddRoleToDBCluster_590962, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBCluster_590687 = ref object of OpenApiRestCall_590348
proc url_GetAddRoleToDBCluster_590689(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddRoleToDBCluster_590688(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_590801 = query.getOrDefault("RoleArn")
  valid_590801 = validateParameter(valid_590801, JString, required = true,
                                 default = nil)
  if valid_590801 != nil:
    section.add "RoleArn", valid_590801
  var valid_590802 = query.getOrDefault("DBClusterIdentifier")
  valid_590802 = validateParameter(valid_590802, JString, required = true,
                                 default = nil)
  if valid_590802 != nil:
    section.add "DBClusterIdentifier", valid_590802
  var valid_590803 = query.getOrDefault("FeatureName")
  valid_590803 = validateParameter(valid_590803, JString, required = false,
                                 default = nil)
  if valid_590803 != nil:
    section.add "FeatureName", valid_590803
  var valid_590817 = query.getOrDefault("Action")
  valid_590817 = validateParameter(valid_590817, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_590817 != nil:
    section.add "Action", valid_590817
  var valid_590818 = query.getOrDefault("Version")
  valid_590818 = validateParameter(valid_590818, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_590818 != nil:
    section.add "Version", valid_590818
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_590819 = header.getOrDefault("X-Amz-Signature")
  valid_590819 = validateParameter(valid_590819, JString, required = false,
                                 default = nil)
  if valid_590819 != nil:
    section.add "X-Amz-Signature", valid_590819
  var valid_590820 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_590820 = validateParameter(valid_590820, JString, required = false,
                                 default = nil)
  if valid_590820 != nil:
    section.add "X-Amz-Content-Sha256", valid_590820
  var valid_590821 = header.getOrDefault("X-Amz-Date")
  valid_590821 = validateParameter(valid_590821, JString, required = false,
                                 default = nil)
  if valid_590821 != nil:
    section.add "X-Amz-Date", valid_590821
  var valid_590822 = header.getOrDefault("X-Amz-Credential")
  valid_590822 = validateParameter(valid_590822, JString, required = false,
                                 default = nil)
  if valid_590822 != nil:
    section.add "X-Amz-Credential", valid_590822
  var valid_590823 = header.getOrDefault("X-Amz-Security-Token")
  valid_590823 = validateParameter(valid_590823, JString, required = false,
                                 default = nil)
  if valid_590823 != nil:
    section.add "X-Amz-Security-Token", valid_590823
  var valid_590824 = header.getOrDefault("X-Amz-Algorithm")
  valid_590824 = validateParameter(valid_590824, JString, required = false,
                                 default = nil)
  if valid_590824 != nil:
    section.add "X-Amz-Algorithm", valid_590824
  var valid_590825 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_590825 = validateParameter(valid_590825, JString, required = false,
                                 default = nil)
  if valid_590825 != nil:
    section.add "X-Amz-SignedHeaders", valid_590825
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590848: Call_GetAddRoleToDBCluster_590687; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_590848.validator(path, query, header, formData, body)
  let scheme = call_590848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590848.url(scheme.get, call_590848.host, call_590848.base,
                         call_590848.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590848, url, valid)

proc call*(call_590919: Call_GetAddRoleToDBCluster_590687; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "AddRoleToDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_590920 = newJObject()
  add(query_590920, "RoleArn", newJString(RoleArn))
  add(query_590920, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_590920, "FeatureName", newJString(FeatureName))
  add(query_590920, "Action", newJString(Action))
  add(query_590920, "Version", newJString(Version))
  result = call_590919.call(nil, query_590920, nil, nil, nil)

var getAddRoleToDBCluster* = Call_GetAddRoleToDBCluster_590687(
    name: "getAddRoleToDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_GetAddRoleToDBCluster_590688, base: "/",
    url: url_GetAddRoleToDBCluster_590689, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddRoleToDBInstance_590997 = ref object of OpenApiRestCall_590348
proc url_PostAddRoleToDBInstance_590999(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddRoleToDBInstance_590998(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591000 = query.getOrDefault("Action")
  valid_591000 = validateParameter(valid_591000, JString, required = true,
                                 default = newJString("AddRoleToDBInstance"))
  if valid_591000 != nil:
    section.add "Action", valid_591000
  var valid_591001 = query.getOrDefault("Version")
  valid_591001 = validateParameter(valid_591001, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591001 != nil:
    section.add "Version", valid_591001
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591002 = header.getOrDefault("X-Amz-Signature")
  valid_591002 = validateParameter(valid_591002, JString, required = false,
                                 default = nil)
  if valid_591002 != nil:
    section.add "X-Amz-Signature", valid_591002
  var valid_591003 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591003 = validateParameter(valid_591003, JString, required = false,
                                 default = nil)
  if valid_591003 != nil:
    section.add "X-Amz-Content-Sha256", valid_591003
  var valid_591004 = header.getOrDefault("X-Amz-Date")
  valid_591004 = validateParameter(valid_591004, JString, required = false,
                                 default = nil)
  if valid_591004 != nil:
    section.add "X-Amz-Date", valid_591004
  var valid_591005 = header.getOrDefault("X-Amz-Credential")
  valid_591005 = validateParameter(valid_591005, JString, required = false,
                                 default = nil)
  if valid_591005 != nil:
    section.add "X-Amz-Credential", valid_591005
  var valid_591006 = header.getOrDefault("X-Amz-Security-Token")
  valid_591006 = validateParameter(valid_591006, JString, required = false,
                                 default = nil)
  if valid_591006 != nil:
    section.add "X-Amz-Security-Token", valid_591006
  var valid_591007 = header.getOrDefault("X-Amz-Algorithm")
  valid_591007 = validateParameter(valid_591007, JString, required = false,
                                 default = nil)
  if valid_591007 != nil:
    section.add "X-Amz-Algorithm", valid_591007
  var valid_591008 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591008 = validateParameter(valid_591008, JString, required = false,
                                 default = nil)
  if valid_591008 != nil:
    section.add "X-Amz-SignedHeaders", valid_591008
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FeatureName` field"
  var valid_591009 = formData.getOrDefault("FeatureName")
  valid_591009 = validateParameter(valid_591009, JString, required = true,
                                 default = nil)
  if valid_591009 != nil:
    section.add "FeatureName", valid_591009
  var valid_591010 = formData.getOrDefault("RoleArn")
  valid_591010 = validateParameter(valid_591010, JString, required = true,
                                 default = nil)
  if valid_591010 != nil:
    section.add "RoleArn", valid_591010
  var valid_591011 = formData.getOrDefault("DBInstanceIdentifier")
  valid_591011 = validateParameter(valid_591011, JString, required = true,
                                 default = nil)
  if valid_591011 != nil:
    section.add "DBInstanceIdentifier", valid_591011
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591012: Call_PostAddRoleToDBInstance_590997; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_591012.validator(path, query, header, formData, body)
  let scheme = call_591012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591012.url(scheme.get, call_591012.host, call_591012.base,
                         call_591012.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591012, url, valid)

proc call*(call_591013: Call_PostAddRoleToDBInstance_590997; FeatureName: string;
          RoleArn: string; DBInstanceIdentifier: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591014 = newJObject()
  var formData_591015 = newJObject()
  add(formData_591015, "FeatureName", newJString(FeatureName))
  add(formData_591015, "RoleArn", newJString(RoleArn))
  add(formData_591015, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_591014, "Action", newJString(Action))
  add(query_591014, "Version", newJString(Version))
  result = call_591013.call(nil, query_591014, nil, formData_591015, nil)

var postAddRoleToDBInstance* = Call_PostAddRoleToDBInstance_590997(
    name: "postAddRoleToDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_PostAddRoleToDBInstance_590998, base: "/",
    url: url_PostAddRoleToDBInstance_590999, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBInstance_590979 = ref object of OpenApiRestCall_590348
proc url_GetAddRoleToDBInstance_590981(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddRoleToDBInstance_590980(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_590982 = query.getOrDefault("RoleArn")
  valid_590982 = validateParameter(valid_590982, JString, required = true,
                                 default = nil)
  if valid_590982 != nil:
    section.add "RoleArn", valid_590982
  var valid_590983 = query.getOrDefault("FeatureName")
  valid_590983 = validateParameter(valid_590983, JString, required = true,
                                 default = nil)
  if valid_590983 != nil:
    section.add "FeatureName", valid_590983
  var valid_590984 = query.getOrDefault("DBInstanceIdentifier")
  valid_590984 = validateParameter(valid_590984, JString, required = true,
                                 default = nil)
  if valid_590984 != nil:
    section.add "DBInstanceIdentifier", valid_590984
  var valid_590985 = query.getOrDefault("Action")
  valid_590985 = validateParameter(valid_590985, JString, required = true,
                                 default = newJString("AddRoleToDBInstance"))
  if valid_590985 != nil:
    section.add "Action", valid_590985
  var valid_590986 = query.getOrDefault("Version")
  valid_590986 = validateParameter(valid_590986, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_590986 != nil:
    section.add "Version", valid_590986
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_590987 = header.getOrDefault("X-Amz-Signature")
  valid_590987 = validateParameter(valid_590987, JString, required = false,
                                 default = nil)
  if valid_590987 != nil:
    section.add "X-Amz-Signature", valid_590987
  var valid_590988 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_590988 = validateParameter(valid_590988, JString, required = false,
                                 default = nil)
  if valid_590988 != nil:
    section.add "X-Amz-Content-Sha256", valid_590988
  var valid_590989 = header.getOrDefault("X-Amz-Date")
  valid_590989 = validateParameter(valid_590989, JString, required = false,
                                 default = nil)
  if valid_590989 != nil:
    section.add "X-Amz-Date", valid_590989
  var valid_590990 = header.getOrDefault("X-Amz-Credential")
  valid_590990 = validateParameter(valid_590990, JString, required = false,
                                 default = nil)
  if valid_590990 != nil:
    section.add "X-Amz-Credential", valid_590990
  var valid_590991 = header.getOrDefault("X-Amz-Security-Token")
  valid_590991 = validateParameter(valid_590991, JString, required = false,
                                 default = nil)
  if valid_590991 != nil:
    section.add "X-Amz-Security-Token", valid_590991
  var valid_590992 = header.getOrDefault("X-Amz-Algorithm")
  valid_590992 = validateParameter(valid_590992, JString, required = false,
                                 default = nil)
  if valid_590992 != nil:
    section.add "X-Amz-Algorithm", valid_590992
  var valid_590993 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_590993 = validateParameter(valid_590993, JString, required = false,
                                 default = nil)
  if valid_590993 != nil:
    section.add "X-Amz-SignedHeaders", valid_590993
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590994: Call_GetAddRoleToDBInstance_590979; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_590994.validator(path, query, header, formData, body)
  let scheme = call_590994.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590994.url(scheme.get, call_590994.host, call_590994.base,
                         call_590994.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590994, url, valid)

proc call*(call_590995: Call_GetAddRoleToDBInstance_590979; RoleArn: string;
          FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_590996 = newJObject()
  add(query_590996, "RoleArn", newJString(RoleArn))
  add(query_590996, "FeatureName", newJString(FeatureName))
  add(query_590996, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_590996, "Action", newJString(Action))
  add(query_590996, "Version", newJString(Version))
  result = call_590995.call(nil, query_590996, nil, nil, nil)

var getAddRoleToDBInstance* = Call_GetAddRoleToDBInstance_590979(
    name: "getAddRoleToDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_GetAddRoleToDBInstance_590980, base: "/",
    url: url_GetAddRoleToDBInstance_590981, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddSourceIdentifierToSubscription_591033 = ref object of OpenApiRestCall_590348
proc url_PostAddSourceIdentifierToSubscription_591035(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddSourceIdentifierToSubscription_591034(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591036 = query.getOrDefault("Action")
  valid_591036 = validateParameter(valid_591036, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_591036 != nil:
    section.add "Action", valid_591036
  var valid_591037 = query.getOrDefault("Version")
  valid_591037 = validateParameter(valid_591037, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591037 != nil:
    section.add "Version", valid_591037
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591038 = header.getOrDefault("X-Amz-Signature")
  valid_591038 = validateParameter(valid_591038, JString, required = false,
                                 default = nil)
  if valid_591038 != nil:
    section.add "X-Amz-Signature", valid_591038
  var valid_591039 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591039 = validateParameter(valid_591039, JString, required = false,
                                 default = nil)
  if valid_591039 != nil:
    section.add "X-Amz-Content-Sha256", valid_591039
  var valid_591040 = header.getOrDefault("X-Amz-Date")
  valid_591040 = validateParameter(valid_591040, JString, required = false,
                                 default = nil)
  if valid_591040 != nil:
    section.add "X-Amz-Date", valid_591040
  var valid_591041 = header.getOrDefault("X-Amz-Credential")
  valid_591041 = validateParameter(valid_591041, JString, required = false,
                                 default = nil)
  if valid_591041 != nil:
    section.add "X-Amz-Credential", valid_591041
  var valid_591042 = header.getOrDefault("X-Amz-Security-Token")
  valid_591042 = validateParameter(valid_591042, JString, required = false,
                                 default = nil)
  if valid_591042 != nil:
    section.add "X-Amz-Security-Token", valid_591042
  var valid_591043 = header.getOrDefault("X-Amz-Algorithm")
  valid_591043 = validateParameter(valid_591043, JString, required = false,
                                 default = nil)
  if valid_591043 != nil:
    section.add "X-Amz-Algorithm", valid_591043
  var valid_591044 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591044 = validateParameter(valid_591044, JString, required = false,
                                 default = nil)
  if valid_591044 != nil:
    section.add "X-Amz-SignedHeaders", valid_591044
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_591045 = formData.getOrDefault("SubscriptionName")
  valid_591045 = validateParameter(valid_591045, JString, required = true,
                                 default = nil)
  if valid_591045 != nil:
    section.add "SubscriptionName", valid_591045
  var valid_591046 = formData.getOrDefault("SourceIdentifier")
  valid_591046 = validateParameter(valid_591046, JString, required = true,
                                 default = nil)
  if valid_591046 != nil:
    section.add "SourceIdentifier", valid_591046
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591047: Call_PostAddSourceIdentifierToSubscription_591033;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_591047.validator(path, query, header, formData, body)
  let scheme = call_591047.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591047.url(scheme.get, call_591047.host, call_591047.base,
                         call_591047.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591047, url, valid)

proc call*(call_591048: Call_PostAddSourceIdentifierToSubscription_591033;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591049 = newJObject()
  var formData_591050 = newJObject()
  add(formData_591050, "SubscriptionName", newJString(SubscriptionName))
  add(formData_591050, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_591049, "Action", newJString(Action))
  add(query_591049, "Version", newJString(Version))
  result = call_591048.call(nil, query_591049, nil, formData_591050, nil)

var postAddSourceIdentifierToSubscription* = Call_PostAddSourceIdentifierToSubscription_591033(
    name: "postAddSourceIdentifierToSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_PostAddSourceIdentifierToSubscription_591034, base: "/",
    url: url_PostAddSourceIdentifierToSubscription_591035,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddSourceIdentifierToSubscription_591016 = ref object of OpenApiRestCall_590348
proc url_GetAddSourceIdentifierToSubscription_591018(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddSourceIdentifierToSubscription_591017(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_591019 = query.getOrDefault("SourceIdentifier")
  valid_591019 = validateParameter(valid_591019, JString, required = true,
                                 default = nil)
  if valid_591019 != nil:
    section.add "SourceIdentifier", valid_591019
  var valid_591020 = query.getOrDefault("SubscriptionName")
  valid_591020 = validateParameter(valid_591020, JString, required = true,
                                 default = nil)
  if valid_591020 != nil:
    section.add "SubscriptionName", valid_591020
  var valid_591021 = query.getOrDefault("Action")
  valid_591021 = validateParameter(valid_591021, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_591021 != nil:
    section.add "Action", valid_591021
  var valid_591022 = query.getOrDefault("Version")
  valid_591022 = validateParameter(valid_591022, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591022 != nil:
    section.add "Version", valid_591022
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591023 = header.getOrDefault("X-Amz-Signature")
  valid_591023 = validateParameter(valid_591023, JString, required = false,
                                 default = nil)
  if valid_591023 != nil:
    section.add "X-Amz-Signature", valid_591023
  var valid_591024 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591024 = validateParameter(valid_591024, JString, required = false,
                                 default = nil)
  if valid_591024 != nil:
    section.add "X-Amz-Content-Sha256", valid_591024
  var valid_591025 = header.getOrDefault("X-Amz-Date")
  valid_591025 = validateParameter(valid_591025, JString, required = false,
                                 default = nil)
  if valid_591025 != nil:
    section.add "X-Amz-Date", valid_591025
  var valid_591026 = header.getOrDefault("X-Amz-Credential")
  valid_591026 = validateParameter(valid_591026, JString, required = false,
                                 default = nil)
  if valid_591026 != nil:
    section.add "X-Amz-Credential", valid_591026
  var valid_591027 = header.getOrDefault("X-Amz-Security-Token")
  valid_591027 = validateParameter(valid_591027, JString, required = false,
                                 default = nil)
  if valid_591027 != nil:
    section.add "X-Amz-Security-Token", valid_591027
  var valid_591028 = header.getOrDefault("X-Amz-Algorithm")
  valid_591028 = validateParameter(valid_591028, JString, required = false,
                                 default = nil)
  if valid_591028 != nil:
    section.add "X-Amz-Algorithm", valid_591028
  var valid_591029 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591029 = validateParameter(valid_591029, JString, required = false,
                                 default = nil)
  if valid_591029 != nil:
    section.add "X-Amz-SignedHeaders", valid_591029
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591030: Call_GetAddSourceIdentifierToSubscription_591016;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_591030.validator(path, query, header, formData, body)
  let scheme = call_591030.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591030.url(scheme.get, call_591030.host, call_591030.base,
                         call_591030.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591030, url, valid)

proc call*(call_591031: Call_GetAddSourceIdentifierToSubscription_591016;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591032 = newJObject()
  add(query_591032, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_591032, "SubscriptionName", newJString(SubscriptionName))
  add(query_591032, "Action", newJString(Action))
  add(query_591032, "Version", newJString(Version))
  result = call_591031.call(nil, query_591032, nil, nil, nil)

var getAddSourceIdentifierToSubscription* = Call_GetAddSourceIdentifierToSubscription_591016(
    name: "getAddSourceIdentifierToSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_GetAddSourceIdentifierToSubscription_591017, base: "/",
    url: url_GetAddSourceIdentifierToSubscription_591018,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddTagsToResource_591068 = ref object of OpenApiRestCall_590348
proc url_PostAddTagsToResource_591070(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddTagsToResource_591069(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591071 = query.getOrDefault("Action")
  valid_591071 = validateParameter(valid_591071, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_591071 != nil:
    section.add "Action", valid_591071
  var valid_591072 = query.getOrDefault("Version")
  valid_591072 = validateParameter(valid_591072, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591072 != nil:
    section.add "Version", valid_591072
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591073 = header.getOrDefault("X-Amz-Signature")
  valid_591073 = validateParameter(valid_591073, JString, required = false,
                                 default = nil)
  if valid_591073 != nil:
    section.add "X-Amz-Signature", valid_591073
  var valid_591074 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591074 = validateParameter(valid_591074, JString, required = false,
                                 default = nil)
  if valid_591074 != nil:
    section.add "X-Amz-Content-Sha256", valid_591074
  var valid_591075 = header.getOrDefault("X-Amz-Date")
  valid_591075 = validateParameter(valid_591075, JString, required = false,
                                 default = nil)
  if valid_591075 != nil:
    section.add "X-Amz-Date", valid_591075
  var valid_591076 = header.getOrDefault("X-Amz-Credential")
  valid_591076 = validateParameter(valid_591076, JString, required = false,
                                 default = nil)
  if valid_591076 != nil:
    section.add "X-Amz-Credential", valid_591076
  var valid_591077 = header.getOrDefault("X-Amz-Security-Token")
  valid_591077 = validateParameter(valid_591077, JString, required = false,
                                 default = nil)
  if valid_591077 != nil:
    section.add "X-Amz-Security-Token", valid_591077
  var valid_591078 = header.getOrDefault("X-Amz-Algorithm")
  valid_591078 = validateParameter(valid_591078, JString, required = false,
                                 default = nil)
  if valid_591078 != nil:
    section.add "X-Amz-Algorithm", valid_591078
  var valid_591079 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591079 = validateParameter(valid_591079, JString, required = false,
                                 default = nil)
  if valid_591079 != nil:
    section.add "X-Amz-SignedHeaders", valid_591079
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_591080 = formData.getOrDefault("Tags")
  valid_591080 = validateParameter(valid_591080, JArray, required = true, default = nil)
  if valid_591080 != nil:
    section.add "Tags", valid_591080
  var valid_591081 = formData.getOrDefault("ResourceName")
  valid_591081 = validateParameter(valid_591081, JString, required = true,
                                 default = nil)
  if valid_591081 != nil:
    section.add "ResourceName", valid_591081
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591082: Call_PostAddTagsToResource_591068; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_591082.validator(path, query, header, formData, body)
  let scheme = call_591082.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591082.url(scheme.get, call_591082.host, call_591082.base,
                         call_591082.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591082, url, valid)

proc call*(call_591083: Call_PostAddTagsToResource_591068; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## postAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  var query_591084 = newJObject()
  var formData_591085 = newJObject()
  add(query_591084, "Action", newJString(Action))
  if Tags != nil:
    formData_591085.add "Tags", Tags
  add(query_591084, "Version", newJString(Version))
  add(formData_591085, "ResourceName", newJString(ResourceName))
  result = call_591083.call(nil, query_591084, nil, formData_591085, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_591068(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_591069, base: "/",
    url: url_PostAddTagsToResource_591070, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_591051 = ref object of OpenApiRestCall_590348
proc url_GetAddTagsToResource_591053(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddTagsToResource_591052(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_591054 = query.getOrDefault("Tags")
  valid_591054 = validateParameter(valid_591054, JArray, required = true, default = nil)
  if valid_591054 != nil:
    section.add "Tags", valid_591054
  var valid_591055 = query.getOrDefault("ResourceName")
  valid_591055 = validateParameter(valid_591055, JString, required = true,
                                 default = nil)
  if valid_591055 != nil:
    section.add "ResourceName", valid_591055
  var valid_591056 = query.getOrDefault("Action")
  valid_591056 = validateParameter(valid_591056, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_591056 != nil:
    section.add "Action", valid_591056
  var valid_591057 = query.getOrDefault("Version")
  valid_591057 = validateParameter(valid_591057, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591057 != nil:
    section.add "Version", valid_591057
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591058 = header.getOrDefault("X-Amz-Signature")
  valid_591058 = validateParameter(valid_591058, JString, required = false,
                                 default = nil)
  if valid_591058 != nil:
    section.add "X-Amz-Signature", valid_591058
  var valid_591059 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591059 = validateParameter(valid_591059, JString, required = false,
                                 default = nil)
  if valid_591059 != nil:
    section.add "X-Amz-Content-Sha256", valid_591059
  var valid_591060 = header.getOrDefault("X-Amz-Date")
  valid_591060 = validateParameter(valid_591060, JString, required = false,
                                 default = nil)
  if valid_591060 != nil:
    section.add "X-Amz-Date", valid_591060
  var valid_591061 = header.getOrDefault("X-Amz-Credential")
  valid_591061 = validateParameter(valid_591061, JString, required = false,
                                 default = nil)
  if valid_591061 != nil:
    section.add "X-Amz-Credential", valid_591061
  var valid_591062 = header.getOrDefault("X-Amz-Security-Token")
  valid_591062 = validateParameter(valid_591062, JString, required = false,
                                 default = nil)
  if valid_591062 != nil:
    section.add "X-Amz-Security-Token", valid_591062
  var valid_591063 = header.getOrDefault("X-Amz-Algorithm")
  valid_591063 = validateParameter(valid_591063, JString, required = false,
                                 default = nil)
  if valid_591063 != nil:
    section.add "X-Amz-Algorithm", valid_591063
  var valid_591064 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591064 = validateParameter(valid_591064, JString, required = false,
                                 default = nil)
  if valid_591064 != nil:
    section.add "X-Amz-SignedHeaders", valid_591064
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591065: Call_GetAddTagsToResource_591051; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_591065.validator(path, query, header, formData, body)
  let scheme = call_591065.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591065.url(scheme.get, call_591065.host, call_591065.base,
                         call_591065.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591065, url, valid)

proc call*(call_591066: Call_GetAddTagsToResource_591051; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## getAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591067 = newJObject()
  if Tags != nil:
    query_591067.add "Tags", Tags
  add(query_591067, "ResourceName", newJString(ResourceName))
  add(query_591067, "Action", newJString(Action))
  add(query_591067, "Version", newJString(Version))
  result = call_591066.call(nil, query_591067, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_591051(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_591052, base: "/",
    url: url_GetAddTagsToResource_591053, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostApplyPendingMaintenanceAction_591104 = ref object of OpenApiRestCall_590348
proc url_PostApplyPendingMaintenanceAction_591106(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostApplyPendingMaintenanceAction_591105(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591107 = query.getOrDefault("Action")
  valid_591107 = validateParameter(valid_591107, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_591107 != nil:
    section.add "Action", valid_591107
  var valid_591108 = query.getOrDefault("Version")
  valid_591108 = validateParameter(valid_591108, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591108 != nil:
    section.add "Version", valid_591108
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591109 = header.getOrDefault("X-Amz-Signature")
  valid_591109 = validateParameter(valid_591109, JString, required = false,
                                 default = nil)
  if valid_591109 != nil:
    section.add "X-Amz-Signature", valid_591109
  var valid_591110 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591110 = validateParameter(valid_591110, JString, required = false,
                                 default = nil)
  if valid_591110 != nil:
    section.add "X-Amz-Content-Sha256", valid_591110
  var valid_591111 = header.getOrDefault("X-Amz-Date")
  valid_591111 = validateParameter(valid_591111, JString, required = false,
                                 default = nil)
  if valid_591111 != nil:
    section.add "X-Amz-Date", valid_591111
  var valid_591112 = header.getOrDefault("X-Amz-Credential")
  valid_591112 = validateParameter(valid_591112, JString, required = false,
                                 default = nil)
  if valid_591112 != nil:
    section.add "X-Amz-Credential", valid_591112
  var valid_591113 = header.getOrDefault("X-Amz-Security-Token")
  valid_591113 = validateParameter(valid_591113, JString, required = false,
                                 default = nil)
  if valid_591113 != nil:
    section.add "X-Amz-Security-Token", valid_591113
  var valid_591114 = header.getOrDefault("X-Amz-Algorithm")
  valid_591114 = validateParameter(valid_591114, JString, required = false,
                                 default = nil)
  if valid_591114 != nil:
    section.add "X-Amz-Algorithm", valid_591114
  var valid_591115 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591115 = validateParameter(valid_591115, JString, required = false,
                                 default = nil)
  if valid_591115 != nil:
    section.add "X-Amz-SignedHeaders", valid_591115
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code> </p>
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ResourceIdentifier` field"
  var valid_591116 = formData.getOrDefault("ResourceIdentifier")
  valid_591116 = validateParameter(valid_591116, JString, required = true,
                                 default = nil)
  if valid_591116 != nil:
    section.add "ResourceIdentifier", valid_591116
  var valid_591117 = formData.getOrDefault("ApplyAction")
  valid_591117 = validateParameter(valid_591117, JString, required = true,
                                 default = nil)
  if valid_591117 != nil:
    section.add "ApplyAction", valid_591117
  var valid_591118 = formData.getOrDefault("OptInType")
  valid_591118 = validateParameter(valid_591118, JString, required = true,
                                 default = nil)
  if valid_591118 != nil:
    section.add "OptInType", valid_591118
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591119: Call_PostApplyPendingMaintenanceAction_591104;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_591119.validator(path, query, header, formData, body)
  let scheme = call_591119.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591119.url(scheme.get, call_591119.host, call_591119.base,
                         call_591119.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591119, url, valid)

proc call*(call_591120: Call_PostApplyPendingMaintenanceAction_591104;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## postApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_591121 = newJObject()
  var formData_591122 = newJObject()
  add(formData_591122, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(formData_591122, "ApplyAction", newJString(ApplyAction))
  add(query_591121, "Action", newJString(Action))
  add(formData_591122, "OptInType", newJString(OptInType))
  add(query_591121, "Version", newJString(Version))
  result = call_591120.call(nil, query_591121, nil, formData_591122, nil)

var postApplyPendingMaintenanceAction* = Call_PostApplyPendingMaintenanceAction_591104(
    name: "postApplyPendingMaintenanceAction", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_PostApplyPendingMaintenanceAction_591105, base: "/",
    url: url_PostApplyPendingMaintenanceAction_591106,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplyPendingMaintenanceAction_591086 = ref object of OpenApiRestCall_590348
proc url_GetApplyPendingMaintenanceAction_591088(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetApplyPendingMaintenanceAction_591087(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code> </p>
  ##   Action: JString (required)
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ResourceIdentifier` field"
  var valid_591089 = query.getOrDefault("ResourceIdentifier")
  valid_591089 = validateParameter(valid_591089, JString, required = true,
                                 default = nil)
  if valid_591089 != nil:
    section.add "ResourceIdentifier", valid_591089
  var valid_591090 = query.getOrDefault("ApplyAction")
  valid_591090 = validateParameter(valid_591090, JString, required = true,
                                 default = nil)
  if valid_591090 != nil:
    section.add "ApplyAction", valid_591090
  var valid_591091 = query.getOrDefault("Action")
  valid_591091 = validateParameter(valid_591091, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_591091 != nil:
    section.add "Action", valid_591091
  var valid_591092 = query.getOrDefault("OptInType")
  valid_591092 = validateParameter(valid_591092, JString, required = true,
                                 default = nil)
  if valid_591092 != nil:
    section.add "OptInType", valid_591092
  var valid_591093 = query.getOrDefault("Version")
  valid_591093 = validateParameter(valid_591093, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591093 != nil:
    section.add "Version", valid_591093
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591094 = header.getOrDefault("X-Amz-Signature")
  valid_591094 = validateParameter(valid_591094, JString, required = false,
                                 default = nil)
  if valid_591094 != nil:
    section.add "X-Amz-Signature", valid_591094
  var valid_591095 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591095 = validateParameter(valid_591095, JString, required = false,
                                 default = nil)
  if valid_591095 != nil:
    section.add "X-Amz-Content-Sha256", valid_591095
  var valid_591096 = header.getOrDefault("X-Amz-Date")
  valid_591096 = validateParameter(valid_591096, JString, required = false,
                                 default = nil)
  if valid_591096 != nil:
    section.add "X-Amz-Date", valid_591096
  var valid_591097 = header.getOrDefault("X-Amz-Credential")
  valid_591097 = validateParameter(valid_591097, JString, required = false,
                                 default = nil)
  if valid_591097 != nil:
    section.add "X-Amz-Credential", valid_591097
  var valid_591098 = header.getOrDefault("X-Amz-Security-Token")
  valid_591098 = validateParameter(valid_591098, JString, required = false,
                                 default = nil)
  if valid_591098 != nil:
    section.add "X-Amz-Security-Token", valid_591098
  var valid_591099 = header.getOrDefault("X-Amz-Algorithm")
  valid_591099 = validateParameter(valid_591099, JString, required = false,
                                 default = nil)
  if valid_591099 != nil:
    section.add "X-Amz-Algorithm", valid_591099
  var valid_591100 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591100 = validateParameter(valid_591100, JString, required = false,
                                 default = nil)
  if valid_591100 != nil:
    section.add "X-Amz-SignedHeaders", valid_591100
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591101: Call_GetApplyPendingMaintenanceAction_591086;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_591101.validator(path, query, header, formData, body)
  let scheme = call_591101.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591101.url(scheme.get, call_591101.host, call_591101.base,
                         call_591101.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591101, url, valid)

proc call*(call_591102: Call_GetApplyPendingMaintenanceAction_591086;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## getApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_591103 = newJObject()
  add(query_591103, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_591103, "ApplyAction", newJString(ApplyAction))
  add(query_591103, "Action", newJString(Action))
  add(query_591103, "OptInType", newJString(OptInType))
  add(query_591103, "Version", newJString(Version))
  result = call_591102.call(nil, query_591103, nil, nil, nil)

var getApplyPendingMaintenanceAction* = Call_GetApplyPendingMaintenanceAction_591086(
    name: "getApplyPendingMaintenanceAction", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_GetApplyPendingMaintenanceAction_591087, base: "/",
    url: url_GetApplyPendingMaintenanceAction_591088,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeDBSecurityGroupIngress_591143 = ref object of OpenApiRestCall_590348
proc url_PostAuthorizeDBSecurityGroupIngress_591145(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAuthorizeDBSecurityGroupIngress_591144(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591146 = query.getOrDefault("Action")
  valid_591146 = validateParameter(valid_591146, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_591146 != nil:
    section.add "Action", valid_591146
  var valid_591147 = query.getOrDefault("Version")
  valid_591147 = validateParameter(valid_591147, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591147 != nil:
    section.add "Version", valid_591147
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591148 = header.getOrDefault("X-Amz-Signature")
  valid_591148 = validateParameter(valid_591148, JString, required = false,
                                 default = nil)
  if valid_591148 != nil:
    section.add "X-Amz-Signature", valid_591148
  var valid_591149 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591149 = validateParameter(valid_591149, JString, required = false,
                                 default = nil)
  if valid_591149 != nil:
    section.add "X-Amz-Content-Sha256", valid_591149
  var valid_591150 = header.getOrDefault("X-Amz-Date")
  valid_591150 = validateParameter(valid_591150, JString, required = false,
                                 default = nil)
  if valid_591150 != nil:
    section.add "X-Amz-Date", valid_591150
  var valid_591151 = header.getOrDefault("X-Amz-Credential")
  valid_591151 = validateParameter(valid_591151, JString, required = false,
                                 default = nil)
  if valid_591151 != nil:
    section.add "X-Amz-Credential", valid_591151
  var valid_591152 = header.getOrDefault("X-Amz-Security-Token")
  valid_591152 = validateParameter(valid_591152, JString, required = false,
                                 default = nil)
  if valid_591152 != nil:
    section.add "X-Amz-Security-Token", valid_591152
  var valid_591153 = header.getOrDefault("X-Amz-Algorithm")
  valid_591153 = validateParameter(valid_591153, JString, required = false,
                                 default = nil)
  if valid_591153 != nil:
    section.add "X-Amz-Algorithm", valid_591153
  var valid_591154 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591154 = validateParameter(valid_591154, JString, required = false,
                                 default = nil)
  if valid_591154 != nil:
    section.add "X-Amz-SignedHeaders", valid_591154
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_591155 = formData.getOrDefault("DBSecurityGroupName")
  valid_591155 = validateParameter(valid_591155, JString, required = true,
                                 default = nil)
  if valid_591155 != nil:
    section.add "DBSecurityGroupName", valid_591155
  var valid_591156 = formData.getOrDefault("EC2SecurityGroupName")
  valid_591156 = validateParameter(valid_591156, JString, required = false,
                                 default = nil)
  if valid_591156 != nil:
    section.add "EC2SecurityGroupName", valid_591156
  var valid_591157 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_591157 = validateParameter(valid_591157, JString, required = false,
                                 default = nil)
  if valid_591157 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_591157
  var valid_591158 = formData.getOrDefault("EC2SecurityGroupId")
  valid_591158 = validateParameter(valid_591158, JString, required = false,
                                 default = nil)
  if valid_591158 != nil:
    section.add "EC2SecurityGroupId", valid_591158
  var valid_591159 = formData.getOrDefault("CIDRIP")
  valid_591159 = validateParameter(valid_591159, JString, required = false,
                                 default = nil)
  if valid_591159 != nil:
    section.add "CIDRIP", valid_591159
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591160: Call_PostAuthorizeDBSecurityGroupIngress_591143;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_591160.validator(path, query, header, formData, body)
  let scheme = call_591160.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591160.url(scheme.get, call_591160.host, call_591160.base,
                         call_591160.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591160, url, valid)

proc call*(call_591161: Call_PostAuthorizeDBSecurityGroupIngress_591143;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupOwnerId: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Action: string = "AuthorizeDBSecurityGroupIngress";
          Version: string = "2014-10-31"): Recallable =
  ## postAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591162 = newJObject()
  var formData_591163 = newJObject()
  add(formData_591163, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_591163, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_591163, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(formData_591163, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_591163, "CIDRIP", newJString(CIDRIP))
  add(query_591162, "Action", newJString(Action))
  add(query_591162, "Version", newJString(Version))
  result = call_591161.call(nil, query_591162, nil, formData_591163, nil)

var postAuthorizeDBSecurityGroupIngress* = Call_PostAuthorizeDBSecurityGroupIngress_591143(
    name: "postAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_PostAuthorizeDBSecurityGroupIngress_591144, base: "/",
    url: url_PostAuthorizeDBSecurityGroupIngress_591145,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeDBSecurityGroupIngress_591123 = ref object of OpenApiRestCall_590348
proc url_GetAuthorizeDBSecurityGroupIngress_591125(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAuthorizeDBSecurityGroupIngress_591124(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  section = newJObject()
  var valid_591126 = query.getOrDefault("EC2SecurityGroupName")
  valid_591126 = validateParameter(valid_591126, JString, required = false,
                                 default = nil)
  if valid_591126 != nil:
    section.add "EC2SecurityGroupName", valid_591126
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_591127 = query.getOrDefault("DBSecurityGroupName")
  valid_591127 = validateParameter(valid_591127, JString, required = true,
                                 default = nil)
  if valid_591127 != nil:
    section.add "DBSecurityGroupName", valid_591127
  var valid_591128 = query.getOrDefault("EC2SecurityGroupId")
  valid_591128 = validateParameter(valid_591128, JString, required = false,
                                 default = nil)
  if valid_591128 != nil:
    section.add "EC2SecurityGroupId", valid_591128
  var valid_591129 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_591129 = validateParameter(valid_591129, JString, required = false,
                                 default = nil)
  if valid_591129 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_591129
  var valid_591130 = query.getOrDefault("Action")
  valid_591130 = validateParameter(valid_591130, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_591130 != nil:
    section.add "Action", valid_591130
  var valid_591131 = query.getOrDefault("Version")
  valid_591131 = validateParameter(valid_591131, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591131 != nil:
    section.add "Version", valid_591131
  var valid_591132 = query.getOrDefault("CIDRIP")
  valid_591132 = validateParameter(valid_591132, JString, required = false,
                                 default = nil)
  if valid_591132 != nil:
    section.add "CIDRIP", valid_591132
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591133 = header.getOrDefault("X-Amz-Signature")
  valid_591133 = validateParameter(valid_591133, JString, required = false,
                                 default = nil)
  if valid_591133 != nil:
    section.add "X-Amz-Signature", valid_591133
  var valid_591134 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591134 = validateParameter(valid_591134, JString, required = false,
                                 default = nil)
  if valid_591134 != nil:
    section.add "X-Amz-Content-Sha256", valid_591134
  var valid_591135 = header.getOrDefault("X-Amz-Date")
  valid_591135 = validateParameter(valid_591135, JString, required = false,
                                 default = nil)
  if valid_591135 != nil:
    section.add "X-Amz-Date", valid_591135
  var valid_591136 = header.getOrDefault("X-Amz-Credential")
  valid_591136 = validateParameter(valid_591136, JString, required = false,
                                 default = nil)
  if valid_591136 != nil:
    section.add "X-Amz-Credential", valid_591136
  var valid_591137 = header.getOrDefault("X-Amz-Security-Token")
  valid_591137 = validateParameter(valid_591137, JString, required = false,
                                 default = nil)
  if valid_591137 != nil:
    section.add "X-Amz-Security-Token", valid_591137
  var valid_591138 = header.getOrDefault("X-Amz-Algorithm")
  valid_591138 = validateParameter(valid_591138, JString, required = false,
                                 default = nil)
  if valid_591138 != nil:
    section.add "X-Amz-Algorithm", valid_591138
  var valid_591139 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591139 = validateParameter(valid_591139, JString, required = false,
                                 default = nil)
  if valid_591139 != nil:
    section.add "X-Amz-SignedHeaders", valid_591139
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591140: Call_GetAuthorizeDBSecurityGroupIngress_591123;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_591140.validator(path, query, header, formData, body)
  let scheme = call_591140.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591140.url(scheme.get, call_591140.host, call_591140.base,
                         call_591140.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591140, url, valid)

proc call*(call_591141: Call_GetAuthorizeDBSecurityGroupIngress_591123;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupId: string = ""; EC2SecurityGroupOwnerId: string = "";
          Action: string = "AuthorizeDBSecurityGroupIngress";
          Version: string = "2014-10-31"; CIDRIP: string = ""): Recallable =
  ## getAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  var query_591142 = newJObject()
  add(query_591142, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_591142, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_591142, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_591142, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_591142, "Action", newJString(Action))
  add(query_591142, "Version", newJString(Version))
  add(query_591142, "CIDRIP", newJString(CIDRIP))
  result = call_591141.call(nil, query_591142, nil, nil, nil)

var getAuthorizeDBSecurityGroupIngress* = Call_GetAuthorizeDBSecurityGroupIngress_591123(
    name: "getAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_GetAuthorizeDBSecurityGroupIngress_591124, base: "/",
    url: url_GetAuthorizeDBSecurityGroupIngress_591125,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBacktrackDBCluster_591183 = ref object of OpenApiRestCall_590348
proc url_PostBacktrackDBCluster_591185(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostBacktrackDBCluster_591184(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591186 = query.getOrDefault("Action")
  valid_591186 = validateParameter(valid_591186, JString, required = true,
                                 default = newJString("BacktrackDBCluster"))
  if valid_591186 != nil:
    section.add "Action", valid_591186
  var valid_591187 = query.getOrDefault("Version")
  valid_591187 = validateParameter(valid_591187, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591187 != nil:
    section.add "Version", valid_591187
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591188 = header.getOrDefault("X-Amz-Signature")
  valid_591188 = validateParameter(valid_591188, JString, required = false,
                                 default = nil)
  if valid_591188 != nil:
    section.add "X-Amz-Signature", valid_591188
  var valid_591189 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591189 = validateParameter(valid_591189, JString, required = false,
                                 default = nil)
  if valid_591189 != nil:
    section.add "X-Amz-Content-Sha256", valid_591189
  var valid_591190 = header.getOrDefault("X-Amz-Date")
  valid_591190 = validateParameter(valid_591190, JString, required = false,
                                 default = nil)
  if valid_591190 != nil:
    section.add "X-Amz-Date", valid_591190
  var valid_591191 = header.getOrDefault("X-Amz-Credential")
  valid_591191 = validateParameter(valid_591191, JString, required = false,
                                 default = nil)
  if valid_591191 != nil:
    section.add "X-Amz-Credential", valid_591191
  var valid_591192 = header.getOrDefault("X-Amz-Security-Token")
  valid_591192 = validateParameter(valid_591192, JString, required = false,
                                 default = nil)
  if valid_591192 != nil:
    section.add "X-Amz-Security-Token", valid_591192
  var valid_591193 = header.getOrDefault("X-Amz-Algorithm")
  valid_591193 = validateParameter(valid_591193, JString, required = false,
                                 default = nil)
  if valid_591193 != nil:
    section.add "X-Amz-Algorithm", valid_591193
  var valid_591194 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591194 = validateParameter(valid_591194, JString, required = false,
                                 default = nil)
  if valid_591194 != nil:
    section.add "X-Amz-SignedHeaders", valid_591194
  result.add "header", section
  ## parameters in `formData` object:
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time is not a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  section = newJObject()
  var valid_591195 = formData.getOrDefault("Force")
  valid_591195 = validateParameter(valid_591195, JBool, required = false, default = nil)
  if valid_591195 != nil:
    section.add "Force", valid_591195
  var valid_591196 = formData.getOrDefault("UseEarliestTimeOnPointInTimeUnavailable")
  valid_591196 = validateParameter(valid_591196, JBool, required = false, default = nil)
  if valid_591196 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_591196
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_591197 = formData.getOrDefault("DBClusterIdentifier")
  valid_591197 = validateParameter(valid_591197, JString, required = true,
                                 default = nil)
  if valid_591197 != nil:
    section.add "DBClusterIdentifier", valid_591197
  var valid_591198 = formData.getOrDefault("BacktrackTo")
  valid_591198 = validateParameter(valid_591198, JString, required = true,
                                 default = nil)
  if valid_591198 != nil:
    section.add "BacktrackTo", valid_591198
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591199: Call_PostBacktrackDBCluster_591183; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_591199.validator(path, query, header, formData, body)
  let scheme = call_591199.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591199.url(scheme.get, call_591199.host, call_591199.base,
                         call_591199.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591199, url, valid)

proc call*(call_591200: Call_PostBacktrackDBCluster_591183;
          DBClusterIdentifier: string; BacktrackTo: string; Force: bool = false;
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Action: string = "BacktrackDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time is not a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  var query_591201 = newJObject()
  var formData_591202 = newJObject()
  add(formData_591202, "Force", newJBool(Force))
  add(formData_591202, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(query_591201, "Action", newJString(Action))
  add(query_591201, "Version", newJString(Version))
  add(formData_591202, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_591202, "BacktrackTo", newJString(BacktrackTo))
  result = call_591200.call(nil, query_591201, nil, formData_591202, nil)

var postBacktrackDBCluster* = Call_PostBacktrackDBCluster_591183(
    name: "postBacktrackDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_PostBacktrackDBCluster_591184, base: "/",
    url: url_PostBacktrackDBCluster_591185, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBacktrackDBCluster_591164 = ref object of OpenApiRestCall_590348
proc url_GetBacktrackDBCluster_591166(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBacktrackDBCluster_591165(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time is not a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   Action: JString (required)
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_591167 = query.getOrDefault("DBClusterIdentifier")
  valid_591167 = validateParameter(valid_591167, JString, required = true,
                                 default = nil)
  if valid_591167 != nil:
    section.add "DBClusterIdentifier", valid_591167
  var valid_591168 = query.getOrDefault("BacktrackTo")
  valid_591168 = validateParameter(valid_591168, JString, required = true,
                                 default = nil)
  if valid_591168 != nil:
    section.add "BacktrackTo", valid_591168
  var valid_591169 = query.getOrDefault("Force")
  valid_591169 = validateParameter(valid_591169, JBool, required = false, default = nil)
  if valid_591169 != nil:
    section.add "Force", valid_591169
  var valid_591170 = query.getOrDefault("Action")
  valid_591170 = validateParameter(valid_591170, JString, required = true,
                                 default = newJString("BacktrackDBCluster"))
  if valid_591170 != nil:
    section.add "Action", valid_591170
  var valid_591171 = query.getOrDefault("UseEarliestTimeOnPointInTimeUnavailable")
  valid_591171 = validateParameter(valid_591171, JBool, required = false, default = nil)
  if valid_591171 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_591171
  var valid_591172 = query.getOrDefault("Version")
  valid_591172 = validateParameter(valid_591172, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591172 != nil:
    section.add "Version", valid_591172
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591173 = header.getOrDefault("X-Amz-Signature")
  valid_591173 = validateParameter(valid_591173, JString, required = false,
                                 default = nil)
  if valid_591173 != nil:
    section.add "X-Amz-Signature", valid_591173
  var valid_591174 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591174 = validateParameter(valid_591174, JString, required = false,
                                 default = nil)
  if valid_591174 != nil:
    section.add "X-Amz-Content-Sha256", valid_591174
  var valid_591175 = header.getOrDefault("X-Amz-Date")
  valid_591175 = validateParameter(valid_591175, JString, required = false,
                                 default = nil)
  if valid_591175 != nil:
    section.add "X-Amz-Date", valid_591175
  var valid_591176 = header.getOrDefault("X-Amz-Credential")
  valid_591176 = validateParameter(valid_591176, JString, required = false,
                                 default = nil)
  if valid_591176 != nil:
    section.add "X-Amz-Credential", valid_591176
  var valid_591177 = header.getOrDefault("X-Amz-Security-Token")
  valid_591177 = validateParameter(valid_591177, JString, required = false,
                                 default = nil)
  if valid_591177 != nil:
    section.add "X-Amz-Security-Token", valid_591177
  var valid_591178 = header.getOrDefault("X-Amz-Algorithm")
  valid_591178 = validateParameter(valid_591178, JString, required = false,
                                 default = nil)
  if valid_591178 != nil:
    section.add "X-Amz-Algorithm", valid_591178
  var valid_591179 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591179 = validateParameter(valid_591179, JString, required = false,
                                 default = nil)
  if valid_591179 != nil:
    section.add "X-Amz-SignedHeaders", valid_591179
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591180: Call_GetBacktrackDBCluster_591164; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_591180.validator(path, query, header, formData, body)
  let scheme = call_591180.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591180.url(scheme.get, call_591180.host, call_591180.base,
                         call_591180.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591180, url, valid)

proc call*(call_591181: Call_GetBacktrackDBCluster_591164;
          DBClusterIdentifier: string; BacktrackTo: string; Force: bool = false;
          Action: string = "BacktrackDBCluster";
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time is not a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   Action: string (required)
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Version: string (required)
  var query_591182 = newJObject()
  add(query_591182, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_591182, "BacktrackTo", newJString(BacktrackTo))
  add(query_591182, "Force", newJBool(Force))
  add(query_591182, "Action", newJString(Action))
  add(query_591182, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(query_591182, "Version", newJString(Version))
  result = call_591181.call(nil, query_591182, nil, nil, nil)

var getBacktrackDBCluster* = Call_GetBacktrackDBCluster_591164(
    name: "getBacktrackDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_GetBacktrackDBCluster_591165, base: "/",
    url: url_GetBacktrackDBCluster_591166, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterParameterGroup_591222 = ref object of OpenApiRestCall_590348
proc url_PostCopyDBClusterParameterGroup_591224(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopyDBClusterParameterGroup_591223(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591225 = query.getOrDefault("Action")
  valid_591225 = validateParameter(valid_591225, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_591225 != nil:
    section.add "Action", valid_591225
  var valid_591226 = query.getOrDefault("Version")
  valid_591226 = validateParameter(valid_591226, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591226 != nil:
    section.add "Version", valid_591226
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591227 = header.getOrDefault("X-Amz-Signature")
  valid_591227 = validateParameter(valid_591227, JString, required = false,
                                 default = nil)
  if valid_591227 != nil:
    section.add "X-Amz-Signature", valid_591227
  var valid_591228 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591228 = validateParameter(valid_591228, JString, required = false,
                                 default = nil)
  if valid_591228 != nil:
    section.add "X-Amz-Content-Sha256", valid_591228
  var valid_591229 = header.getOrDefault("X-Amz-Date")
  valid_591229 = validateParameter(valid_591229, JString, required = false,
                                 default = nil)
  if valid_591229 != nil:
    section.add "X-Amz-Date", valid_591229
  var valid_591230 = header.getOrDefault("X-Amz-Credential")
  valid_591230 = validateParameter(valid_591230, JString, required = false,
                                 default = nil)
  if valid_591230 != nil:
    section.add "X-Amz-Credential", valid_591230
  var valid_591231 = header.getOrDefault("X-Amz-Security-Token")
  valid_591231 = validateParameter(valid_591231, JString, required = false,
                                 default = nil)
  if valid_591231 != nil:
    section.add "X-Amz-Security-Token", valid_591231
  var valid_591232 = header.getOrDefault("X-Amz-Algorithm")
  valid_591232 = validateParameter(valid_591232, JString, required = false,
                                 default = nil)
  if valid_591232 != nil:
    section.add "X-Amz-Algorithm", valid_591232
  var valid_591233 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591233 = validateParameter(valid_591233, JString, required = false,
                                 default = nil)
  if valid_591233 != nil:
    section.add "X-Amz-SignedHeaders", valid_591233
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBClusterParameterGroupIdentifier` field"
  var valid_591234 = formData.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_591234 = validateParameter(valid_591234, JString, required = true,
                                 default = nil)
  if valid_591234 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_591234
  var valid_591235 = formData.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_591235 = validateParameter(valid_591235, JString, required = true,
                                 default = nil)
  if valid_591235 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_591235
  var valid_591236 = formData.getOrDefault("Tags")
  valid_591236 = validateParameter(valid_591236, JArray, required = false,
                                 default = nil)
  if valid_591236 != nil:
    section.add "Tags", valid_591236
  var valid_591237 = formData.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_591237 = validateParameter(valid_591237, JString, required = true,
                                 default = nil)
  if valid_591237 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_591237
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591238: Call_PostCopyDBClusterParameterGroup_591222;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_591238.validator(path, query, header, formData, body)
  let scheme = call_591238.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591238.url(scheme.get, call_591238.host, call_591238.base,
                         call_591238.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591238, url, valid)

proc call*(call_591239: Call_PostCopyDBClusterParameterGroup_591222;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupDescription: string;
          Action: string = "CopyDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  var query_591240 = newJObject()
  var formData_591241 = newJObject()
  add(formData_591241, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(formData_591241, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_591240, "Action", newJString(Action))
  if Tags != nil:
    formData_591241.add "Tags", Tags
  add(query_591240, "Version", newJString(Version))
  add(formData_591241, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  result = call_591239.call(nil, query_591240, nil, formData_591241, nil)

var postCopyDBClusterParameterGroup* = Call_PostCopyDBClusterParameterGroup_591222(
    name: "postCopyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_PostCopyDBClusterParameterGroup_591223, base: "/",
    url: url_PostCopyDBClusterParameterGroup_591224,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterParameterGroup_591203 = ref object of OpenApiRestCall_590348
proc url_GetCopyDBClusterParameterGroup_591205(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopyDBClusterParameterGroup_591204(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: JString (required)
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `TargetDBClusterParameterGroupDescription` field"
  var valid_591206 = query.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_591206 = validateParameter(valid_591206, JString, required = true,
                                 default = nil)
  if valid_591206 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_591206
  var valid_591207 = query.getOrDefault("Tags")
  valid_591207 = validateParameter(valid_591207, JArray, required = false,
                                 default = nil)
  if valid_591207 != nil:
    section.add "Tags", valid_591207
  var valid_591208 = query.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_591208 = validateParameter(valid_591208, JString, required = true,
                                 default = nil)
  if valid_591208 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_591208
  var valid_591209 = query.getOrDefault("Action")
  valid_591209 = validateParameter(valid_591209, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_591209 != nil:
    section.add "Action", valid_591209
  var valid_591210 = query.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_591210 = validateParameter(valid_591210, JString, required = true,
                                 default = nil)
  if valid_591210 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_591210
  var valid_591211 = query.getOrDefault("Version")
  valid_591211 = validateParameter(valid_591211, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591211 != nil:
    section.add "Version", valid_591211
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591212 = header.getOrDefault("X-Amz-Signature")
  valid_591212 = validateParameter(valid_591212, JString, required = false,
                                 default = nil)
  if valid_591212 != nil:
    section.add "X-Amz-Signature", valid_591212
  var valid_591213 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591213 = validateParameter(valid_591213, JString, required = false,
                                 default = nil)
  if valid_591213 != nil:
    section.add "X-Amz-Content-Sha256", valid_591213
  var valid_591214 = header.getOrDefault("X-Amz-Date")
  valid_591214 = validateParameter(valid_591214, JString, required = false,
                                 default = nil)
  if valid_591214 != nil:
    section.add "X-Amz-Date", valid_591214
  var valid_591215 = header.getOrDefault("X-Amz-Credential")
  valid_591215 = validateParameter(valid_591215, JString, required = false,
                                 default = nil)
  if valid_591215 != nil:
    section.add "X-Amz-Credential", valid_591215
  var valid_591216 = header.getOrDefault("X-Amz-Security-Token")
  valid_591216 = validateParameter(valid_591216, JString, required = false,
                                 default = nil)
  if valid_591216 != nil:
    section.add "X-Amz-Security-Token", valid_591216
  var valid_591217 = header.getOrDefault("X-Amz-Algorithm")
  valid_591217 = validateParameter(valid_591217, JString, required = false,
                                 default = nil)
  if valid_591217 != nil:
    section.add "X-Amz-Algorithm", valid_591217
  var valid_591218 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591218 = validateParameter(valid_591218, JString, required = false,
                                 default = nil)
  if valid_591218 != nil:
    section.add "X-Amz-SignedHeaders", valid_591218
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591219: Call_GetCopyDBClusterParameterGroup_591203; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_591219.validator(path, query, header, formData, body)
  let scheme = call_591219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591219.url(scheme.get, call_591219.host, call_591219.base,
                         call_591219.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591219, url, valid)

proc call*(call_591220: Call_GetCopyDBClusterParameterGroup_591203;
          TargetDBClusterParameterGroupDescription: string;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: string (required)
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: string (required)
  var query_591221 = newJObject()
  add(query_591221, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  if Tags != nil:
    query_591221.add "Tags", Tags
  add(query_591221, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_591221, "Action", newJString(Action))
  add(query_591221, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_591221, "Version", newJString(Version))
  result = call_591220.call(nil, query_591221, nil, nil, nil)

var getCopyDBClusterParameterGroup* = Call_GetCopyDBClusterParameterGroup_591203(
    name: "getCopyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_GetCopyDBClusterParameterGroup_591204, base: "/",
    url: url_GetCopyDBClusterParameterGroup_591205,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterSnapshot_591264 = ref object of OpenApiRestCall_590348
proc url_PostCopyDBClusterSnapshot_591266(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopyDBClusterSnapshot_591265(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591267 = query.getOrDefault("Action")
  valid_591267 = validateParameter(valid_591267, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_591267 != nil:
    section.add "Action", valid_591267
  var valid_591268 = query.getOrDefault("Version")
  valid_591268 = validateParameter(valid_591268, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591268 != nil:
    section.add "Version", valid_591268
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591269 = header.getOrDefault("X-Amz-Signature")
  valid_591269 = validateParameter(valid_591269, JString, required = false,
                                 default = nil)
  if valid_591269 != nil:
    section.add "X-Amz-Signature", valid_591269
  var valid_591270 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591270 = validateParameter(valid_591270, JString, required = false,
                                 default = nil)
  if valid_591270 != nil:
    section.add "X-Amz-Content-Sha256", valid_591270
  var valid_591271 = header.getOrDefault("X-Amz-Date")
  valid_591271 = validateParameter(valid_591271, JString, required = false,
                                 default = nil)
  if valid_591271 != nil:
    section.add "X-Amz-Date", valid_591271
  var valid_591272 = header.getOrDefault("X-Amz-Credential")
  valid_591272 = validateParameter(valid_591272, JString, required = false,
                                 default = nil)
  if valid_591272 != nil:
    section.add "X-Amz-Credential", valid_591272
  var valid_591273 = header.getOrDefault("X-Amz-Security-Token")
  valid_591273 = validateParameter(valid_591273, JString, required = false,
                                 default = nil)
  if valid_591273 != nil:
    section.add "X-Amz-Security-Token", valid_591273
  var valid_591274 = header.getOrDefault("X-Amz-Algorithm")
  valid_591274 = validateParameter(valid_591274, JString, required = false,
                                 default = nil)
  if valid_591274 != nil:
    section.add "X-Amz-Algorithm", valid_591274
  var valid_591275 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591275 = validateParameter(valid_591275, JString, required = false,
                                 default = nil)
  if valid_591275 != nil:
    section.add "X-Amz-SignedHeaders", valid_591275
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_591276 = formData.getOrDefault("SourceRegion")
  valid_591276 = validateParameter(valid_591276, JString, required = false,
                                 default = nil)
  if valid_591276 != nil:
    section.add "SourceRegion", valid_591276
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterSnapshotIdentifier` field"
  var valid_591277 = formData.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_591277 = validateParameter(valid_591277, JString, required = true,
                                 default = nil)
  if valid_591277 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_591277
  var valid_591278 = formData.getOrDefault("KmsKeyId")
  valid_591278 = validateParameter(valid_591278, JString, required = false,
                                 default = nil)
  if valid_591278 != nil:
    section.add "KmsKeyId", valid_591278
  var valid_591279 = formData.getOrDefault("PreSignedUrl")
  valid_591279 = validateParameter(valid_591279, JString, required = false,
                                 default = nil)
  if valid_591279 != nil:
    section.add "PreSignedUrl", valid_591279
  var valid_591280 = formData.getOrDefault("CopyTags")
  valid_591280 = validateParameter(valid_591280, JBool, required = false, default = nil)
  if valid_591280 != nil:
    section.add "CopyTags", valid_591280
  var valid_591281 = formData.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_591281 = validateParameter(valid_591281, JString, required = true,
                                 default = nil)
  if valid_591281 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_591281
  var valid_591282 = formData.getOrDefault("Tags")
  valid_591282 = validateParameter(valid_591282, JArray, required = false,
                                 default = nil)
  if valid_591282 != nil:
    section.add "Tags", valid_591282
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591283: Call_PostCopyDBClusterSnapshot_591264; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_591283.validator(path, query, header, formData, body)
  let scheme = call_591283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591283.url(scheme.get, call_591283.host, call_591283.base,
                         call_591283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591283, url, valid)

proc call*(call_591284: Call_PostCopyDBClusterSnapshot_591264;
          SourceDBClusterSnapshotIdentifier: string;
          TargetDBClusterSnapshotIdentifier: string; SourceRegion: string = "";
          KmsKeyId: string = ""; PreSignedUrl: string = ""; CopyTags: bool = false;
          Action: string = "CopyDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_591285 = newJObject()
  var formData_591286 = newJObject()
  add(formData_591286, "SourceRegion", newJString(SourceRegion))
  add(formData_591286, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(formData_591286, "KmsKeyId", newJString(KmsKeyId))
  add(formData_591286, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_591286, "CopyTags", newJBool(CopyTags))
  add(formData_591286, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_591285, "Action", newJString(Action))
  if Tags != nil:
    formData_591286.add "Tags", Tags
  add(query_591285, "Version", newJString(Version))
  result = call_591284.call(nil, query_591285, nil, formData_591286, nil)

var postCopyDBClusterSnapshot* = Call_PostCopyDBClusterSnapshot_591264(
    name: "postCopyDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_PostCopyDBClusterSnapshot_591265, base: "/",
    url: url_PostCopyDBClusterSnapshot_591266,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterSnapshot_591242 = ref object of OpenApiRestCall_590348
proc url_GetCopyDBClusterSnapshot_591244(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopyDBClusterSnapshot_591243(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: JString (required)
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   Version: JString (required)
  section = newJObject()
  var valid_591245 = query.getOrDefault("Tags")
  valid_591245 = validateParameter(valid_591245, JArray, required = false,
                                 default = nil)
  if valid_591245 != nil:
    section.add "Tags", valid_591245
  var valid_591246 = query.getOrDefault("KmsKeyId")
  valid_591246 = validateParameter(valid_591246, JString, required = false,
                                 default = nil)
  if valid_591246 != nil:
    section.add "KmsKeyId", valid_591246
  var valid_591247 = query.getOrDefault("PreSignedUrl")
  valid_591247 = validateParameter(valid_591247, JString, required = false,
                                 default = nil)
  if valid_591247 != nil:
    section.add "PreSignedUrl", valid_591247
  assert query != nil, "query argument is necessary due to required `TargetDBClusterSnapshotIdentifier` field"
  var valid_591248 = query.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_591248 = validateParameter(valid_591248, JString, required = true,
                                 default = nil)
  if valid_591248 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_591248
  var valid_591249 = query.getOrDefault("SourceRegion")
  valid_591249 = validateParameter(valid_591249, JString, required = false,
                                 default = nil)
  if valid_591249 != nil:
    section.add "SourceRegion", valid_591249
  var valid_591250 = query.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_591250 = validateParameter(valid_591250, JString, required = true,
                                 default = nil)
  if valid_591250 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_591250
  var valid_591251 = query.getOrDefault("Action")
  valid_591251 = validateParameter(valid_591251, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_591251 != nil:
    section.add "Action", valid_591251
  var valid_591252 = query.getOrDefault("CopyTags")
  valid_591252 = validateParameter(valid_591252, JBool, required = false, default = nil)
  if valid_591252 != nil:
    section.add "CopyTags", valid_591252
  var valid_591253 = query.getOrDefault("Version")
  valid_591253 = validateParameter(valid_591253, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591253 != nil:
    section.add "Version", valid_591253
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591254 = header.getOrDefault("X-Amz-Signature")
  valid_591254 = validateParameter(valid_591254, JString, required = false,
                                 default = nil)
  if valid_591254 != nil:
    section.add "X-Amz-Signature", valid_591254
  var valid_591255 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591255 = validateParameter(valid_591255, JString, required = false,
                                 default = nil)
  if valid_591255 != nil:
    section.add "X-Amz-Content-Sha256", valid_591255
  var valid_591256 = header.getOrDefault("X-Amz-Date")
  valid_591256 = validateParameter(valid_591256, JString, required = false,
                                 default = nil)
  if valid_591256 != nil:
    section.add "X-Amz-Date", valid_591256
  var valid_591257 = header.getOrDefault("X-Amz-Credential")
  valid_591257 = validateParameter(valid_591257, JString, required = false,
                                 default = nil)
  if valid_591257 != nil:
    section.add "X-Amz-Credential", valid_591257
  var valid_591258 = header.getOrDefault("X-Amz-Security-Token")
  valid_591258 = validateParameter(valid_591258, JString, required = false,
                                 default = nil)
  if valid_591258 != nil:
    section.add "X-Amz-Security-Token", valid_591258
  var valid_591259 = header.getOrDefault("X-Amz-Algorithm")
  valid_591259 = validateParameter(valid_591259, JString, required = false,
                                 default = nil)
  if valid_591259 != nil:
    section.add "X-Amz-Algorithm", valid_591259
  var valid_591260 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591260 = validateParameter(valid_591260, JString, required = false,
                                 default = nil)
  if valid_591260 != nil:
    section.add "X-Amz-SignedHeaders", valid_591260
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591261: Call_GetCopyDBClusterSnapshot_591242; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_591261.validator(path, query, header, formData, body)
  let scheme = call_591261.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591261.url(scheme.get, call_591261.host, call_591261.base,
                         call_591261.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591261, url, valid)

proc call*(call_591262: Call_GetCopyDBClusterSnapshot_591242;
          TargetDBClusterSnapshotIdentifier: string;
          SourceDBClusterSnapshotIdentifier: string; Tags: JsonNode = nil;
          KmsKeyId: string = ""; PreSignedUrl: string = ""; SourceRegion: string = "";
          Action: string = "CopyDBClusterSnapshot"; CopyTags: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: string (required)
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   Version: string (required)
  var query_591263 = newJObject()
  if Tags != nil:
    query_591263.add "Tags", Tags
  add(query_591263, "KmsKeyId", newJString(KmsKeyId))
  add(query_591263, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_591263, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_591263, "SourceRegion", newJString(SourceRegion))
  add(query_591263, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(query_591263, "Action", newJString(Action))
  add(query_591263, "CopyTags", newJBool(CopyTags))
  add(query_591263, "Version", newJString(Version))
  result = call_591262.call(nil, query_591263, nil, nil, nil)

var getCopyDBClusterSnapshot* = Call_GetCopyDBClusterSnapshot_591242(
    name: "getCopyDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_GetCopyDBClusterSnapshot_591243, base: "/",
    url: url_GetCopyDBClusterSnapshot_591244, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBParameterGroup_591306 = ref object of OpenApiRestCall_590348
proc url_PostCopyDBParameterGroup_591308(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopyDBParameterGroup_591307(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591309 = query.getOrDefault("Action")
  valid_591309 = validateParameter(valid_591309, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_591309 != nil:
    section.add "Action", valid_591309
  var valid_591310 = query.getOrDefault("Version")
  valid_591310 = validateParameter(valid_591310, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591310 != nil:
    section.add "Version", valid_591310
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591311 = header.getOrDefault("X-Amz-Signature")
  valid_591311 = validateParameter(valid_591311, JString, required = false,
                                 default = nil)
  if valid_591311 != nil:
    section.add "X-Amz-Signature", valid_591311
  var valid_591312 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591312 = validateParameter(valid_591312, JString, required = false,
                                 default = nil)
  if valid_591312 != nil:
    section.add "X-Amz-Content-Sha256", valid_591312
  var valid_591313 = header.getOrDefault("X-Amz-Date")
  valid_591313 = validateParameter(valid_591313, JString, required = false,
                                 default = nil)
  if valid_591313 != nil:
    section.add "X-Amz-Date", valid_591313
  var valid_591314 = header.getOrDefault("X-Amz-Credential")
  valid_591314 = validateParameter(valid_591314, JString, required = false,
                                 default = nil)
  if valid_591314 != nil:
    section.add "X-Amz-Credential", valid_591314
  var valid_591315 = header.getOrDefault("X-Amz-Security-Token")
  valid_591315 = validateParameter(valid_591315, JString, required = false,
                                 default = nil)
  if valid_591315 != nil:
    section.add "X-Amz-Security-Token", valid_591315
  var valid_591316 = header.getOrDefault("X-Amz-Algorithm")
  valid_591316 = validateParameter(valid_591316, JString, required = false,
                                 default = nil)
  if valid_591316 != nil:
    section.add "X-Amz-Algorithm", valid_591316
  var valid_591317 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591317 = validateParameter(valid_591317, JString, required = false,
                                 default = nil)
  if valid_591317 != nil:
    section.add "X-Amz-SignedHeaders", valid_591317
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_591318 = formData.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_591318 = validateParameter(valid_591318, JString, required = true,
                                 default = nil)
  if valid_591318 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_591318
  var valid_591319 = formData.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_591319 = validateParameter(valid_591319, JString, required = true,
                                 default = nil)
  if valid_591319 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_591319
  var valid_591320 = formData.getOrDefault("TargetDBParameterGroupDescription")
  valid_591320 = validateParameter(valid_591320, JString, required = true,
                                 default = nil)
  if valid_591320 != nil:
    section.add "TargetDBParameterGroupDescription", valid_591320
  var valid_591321 = formData.getOrDefault("Tags")
  valid_591321 = validateParameter(valid_591321, JArray, required = false,
                                 default = nil)
  if valid_591321 != nil:
    section.add "Tags", valid_591321
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591322: Call_PostCopyDBParameterGroup_591306; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_591322.validator(path, query, header, formData, body)
  let scheme = call_591322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591322.url(scheme.get, call_591322.host, call_591322.base,
                         call_591322.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591322, url, valid)

proc call*(call_591323: Call_PostCopyDBParameterGroup_591306;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          Action: string = "CopyDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_591324 = newJObject()
  var formData_591325 = newJObject()
  add(formData_591325, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(formData_591325, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(formData_591325, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_591324, "Action", newJString(Action))
  if Tags != nil:
    formData_591325.add "Tags", Tags
  add(query_591324, "Version", newJString(Version))
  result = call_591323.call(nil, query_591324, nil, formData_591325, nil)

var postCopyDBParameterGroup* = Call_PostCopyDBParameterGroup_591306(
    name: "postCopyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_PostCopyDBParameterGroup_591307, base: "/",
    url: url_PostCopyDBParameterGroup_591308, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBParameterGroup_591287 = ref object of OpenApiRestCall_590348
proc url_GetCopyDBParameterGroup_591289(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopyDBParameterGroup_591288(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_591290 = query.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_591290 = validateParameter(valid_591290, JString, required = true,
                                 default = nil)
  if valid_591290 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_591290
  var valid_591291 = query.getOrDefault("Tags")
  valid_591291 = validateParameter(valid_591291, JArray, required = false,
                                 default = nil)
  if valid_591291 != nil:
    section.add "Tags", valid_591291
  var valid_591292 = query.getOrDefault("TargetDBParameterGroupDescription")
  valid_591292 = validateParameter(valid_591292, JString, required = true,
                                 default = nil)
  if valid_591292 != nil:
    section.add "TargetDBParameterGroupDescription", valid_591292
  var valid_591293 = query.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_591293 = validateParameter(valid_591293, JString, required = true,
                                 default = nil)
  if valid_591293 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_591293
  var valid_591294 = query.getOrDefault("Action")
  valid_591294 = validateParameter(valid_591294, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_591294 != nil:
    section.add "Action", valid_591294
  var valid_591295 = query.getOrDefault("Version")
  valid_591295 = validateParameter(valid_591295, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591295 != nil:
    section.add "Version", valid_591295
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591296 = header.getOrDefault("X-Amz-Signature")
  valid_591296 = validateParameter(valid_591296, JString, required = false,
                                 default = nil)
  if valid_591296 != nil:
    section.add "X-Amz-Signature", valid_591296
  var valid_591297 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591297 = validateParameter(valid_591297, JString, required = false,
                                 default = nil)
  if valid_591297 != nil:
    section.add "X-Amz-Content-Sha256", valid_591297
  var valid_591298 = header.getOrDefault("X-Amz-Date")
  valid_591298 = validateParameter(valid_591298, JString, required = false,
                                 default = nil)
  if valid_591298 != nil:
    section.add "X-Amz-Date", valid_591298
  var valid_591299 = header.getOrDefault("X-Amz-Credential")
  valid_591299 = validateParameter(valid_591299, JString, required = false,
                                 default = nil)
  if valid_591299 != nil:
    section.add "X-Amz-Credential", valid_591299
  var valid_591300 = header.getOrDefault("X-Amz-Security-Token")
  valid_591300 = validateParameter(valid_591300, JString, required = false,
                                 default = nil)
  if valid_591300 != nil:
    section.add "X-Amz-Security-Token", valid_591300
  var valid_591301 = header.getOrDefault("X-Amz-Algorithm")
  valid_591301 = validateParameter(valid_591301, JString, required = false,
                                 default = nil)
  if valid_591301 != nil:
    section.add "X-Amz-Algorithm", valid_591301
  var valid_591302 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591302 = validateParameter(valid_591302, JString, required = false,
                                 default = nil)
  if valid_591302 != nil:
    section.add "X-Amz-SignedHeaders", valid_591302
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591303: Call_GetCopyDBParameterGroup_591287; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_591303.validator(path, query, header, formData, body)
  let scheme = call_591303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591303.url(scheme.get, call_591303.host, call_591303.base,
                         call_591303.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591303, url, valid)

proc call*(call_591304: Call_GetCopyDBParameterGroup_591287;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          TargetDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591305 = newJObject()
  add(query_591305, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  if Tags != nil:
    query_591305.add "Tags", Tags
  add(query_591305, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_591305, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(query_591305, "Action", newJString(Action))
  add(query_591305, "Version", newJString(Version))
  result = call_591304.call(nil, query_591305, nil, nil, nil)

var getCopyDBParameterGroup* = Call_GetCopyDBParameterGroup_591287(
    name: "getCopyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_GetCopyDBParameterGroup_591288, base: "/",
    url: url_GetCopyDBParameterGroup_591289, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBSnapshot_591349 = ref object of OpenApiRestCall_590348
proc url_PostCopyDBSnapshot_591351(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopyDBSnapshot_591350(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591352 = query.getOrDefault("Action")
  valid_591352 = validateParameter(valid_591352, JString, required = true,
                                 default = newJString("CopyDBSnapshot"))
  if valid_591352 != nil:
    section.add "Action", valid_591352
  var valid_591353 = query.getOrDefault("Version")
  valid_591353 = validateParameter(valid_591353, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591353 != nil:
    section.add "Version", valid_591353
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591354 = header.getOrDefault("X-Amz-Signature")
  valid_591354 = validateParameter(valid_591354, JString, required = false,
                                 default = nil)
  if valid_591354 != nil:
    section.add "X-Amz-Signature", valid_591354
  var valid_591355 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591355 = validateParameter(valid_591355, JString, required = false,
                                 default = nil)
  if valid_591355 != nil:
    section.add "X-Amz-Content-Sha256", valid_591355
  var valid_591356 = header.getOrDefault("X-Amz-Date")
  valid_591356 = validateParameter(valid_591356, JString, required = false,
                                 default = nil)
  if valid_591356 != nil:
    section.add "X-Amz-Date", valid_591356
  var valid_591357 = header.getOrDefault("X-Amz-Credential")
  valid_591357 = validateParameter(valid_591357, JString, required = false,
                                 default = nil)
  if valid_591357 != nil:
    section.add "X-Amz-Credential", valid_591357
  var valid_591358 = header.getOrDefault("X-Amz-Security-Token")
  valid_591358 = validateParameter(valid_591358, JString, required = false,
                                 default = nil)
  if valid_591358 != nil:
    section.add "X-Amz-Security-Token", valid_591358
  var valid_591359 = header.getOrDefault("X-Amz-Algorithm")
  valid_591359 = validateParameter(valid_591359, JString, required = false,
                                 default = nil)
  if valid_591359 != nil:
    section.add "X-Amz-Algorithm", valid_591359
  var valid_591360 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591360 = validateParameter(valid_591360, JString, required = false,
                                 default = nil)
  if valid_591360 != nil:
    section.add "X-Amz-SignedHeaders", valid_591360
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you copy an encrypted DB snapshot from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  section = newJObject()
  var valid_591361 = formData.getOrDefault("SourceRegion")
  valid_591361 = validateParameter(valid_591361, JString, required = false,
                                 default = nil)
  if valid_591361 != nil:
    section.add "SourceRegion", valid_591361
  var valid_591362 = formData.getOrDefault("KmsKeyId")
  valid_591362 = validateParameter(valid_591362, JString, required = false,
                                 default = nil)
  if valid_591362 != nil:
    section.add "KmsKeyId", valid_591362
  assert formData != nil, "formData argument is necessary due to required `SourceDBSnapshotIdentifier` field"
  var valid_591363 = formData.getOrDefault("SourceDBSnapshotIdentifier")
  valid_591363 = validateParameter(valid_591363, JString, required = true,
                                 default = nil)
  if valid_591363 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_591363
  var valid_591364 = formData.getOrDefault("CopyTags")
  valid_591364 = validateParameter(valid_591364, JBool, required = false, default = nil)
  if valid_591364 != nil:
    section.add "CopyTags", valid_591364
  var valid_591365 = formData.getOrDefault("PreSignedUrl")
  valid_591365 = validateParameter(valid_591365, JString, required = false,
                                 default = nil)
  if valid_591365 != nil:
    section.add "PreSignedUrl", valid_591365
  var valid_591366 = formData.getOrDefault("Tags")
  valid_591366 = validateParameter(valid_591366, JArray, required = false,
                                 default = nil)
  if valid_591366 != nil:
    section.add "Tags", valid_591366
  var valid_591367 = formData.getOrDefault("TargetDBSnapshotIdentifier")
  valid_591367 = validateParameter(valid_591367, JString, required = true,
                                 default = nil)
  if valid_591367 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_591367
  var valid_591368 = formData.getOrDefault("OptionGroupName")
  valid_591368 = validateParameter(valid_591368, JString, required = false,
                                 default = nil)
  if valid_591368 != nil:
    section.add "OptionGroupName", valid_591368
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591369: Call_PostCopyDBSnapshot_591349; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_591369.validator(path, query, header, formData, body)
  let scheme = call_591369.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591369.url(scheme.get, call_591369.host, call_591369.base,
                         call_591369.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591369, url, valid)

proc call*(call_591370: Call_PostCopyDBSnapshot_591349;
          SourceDBSnapshotIdentifier: string; TargetDBSnapshotIdentifier: string;
          SourceRegion: string = ""; KmsKeyId: string = ""; CopyTags: bool = false;
          PreSignedUrl: string = ""; Action: string = "CopyDBSnapshot";
          Tags: JsonNode = nil; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you copy an encrypted DB snapshot from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_591371 = newJObject()
  var formData_591372 = newJObject()
  add(formData_591372, "SourceRegion", newJString(SourceRegion))
  add(formData_591372, "KmsKeyId", newJString(KmsKeyId))
  add(formData_591372, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  add(formData_591372, "CopyTags", newJBool(CopyTags))
  add(formData_591372, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_591371, "Action", newJString(Action))
  if Tags != nil:
    formData_591372.add "Tags", Tags
  add(formData_591372, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(formData_591372, "OptionGroupName", newJString(OptionGroupName))
  add(query_591371, "Version", newJString(Version))
  result = call_591370.call(nil, query_591371, nil, formData_591372, nil)

var postCopyDBSnapshot* = Call_PostCopyDBSnapshot_591349(
    name: "postCopyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBSnapshot",
    validator: validate_PostCopyDBSnapshot_591350, base: "/",
    url: url_PostCopyDBSnapshot_591351, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBSnapshot_591326 = ref object of OpenApiRestCall_590348
proc url_GetCopyDBSnapshot_591328(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopyDBSnapshot_591327(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you copy an encrypted DB snapshot from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBSnapshotIdentifier` field"
  var valid_591329 = query.getOrDefault("SourceDBSnapshotIdentifier")
  valid_591329 = validateParameter(valid_591329, JString, required = true,
                                 default = nil)
  if valid_591329 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_591329
  var valid_591330 = query.getOrDefault("Tags")
  valid_591330 = validateParameter(valid_591330, JArray, required = false,
                                 default = nil)
  if valid_591330 != nil:
    section.add "Tags", valid_591330
  var valid_591331 = query.getOrDefault("KmsKeyId")
  valid_591331 = validateParameter(valid_591331, JString, required = false,
                                 default = nil)
  if valid_591331 != nil:
    section.add "KmsKeyId", valid_591331
  var valid_591332 = query.getOrDefault("PreSignedUrl")
  valid_591332 = validateParameter(valid_591332, JString, required = false,
                                 default = nil)
  if valid_591332 != nil:
    section.add "PreSignedUrl", valid_591332
  var valid_591333 = query.getOrDefault("SourceRegion")
  valid_591333 = validateParameter(valid_591333, JString, required = false,
                                 default = nil)
  if valid_591333 != nil:
    section.add "SourceRegion", valid_591333
  var valid_591334 = query.getOrDefault("Action")
  valid_591334 = validateParameter(valid_591334, JString, required = true,
                                 default = newJString("CopyDBSnapshot"))
  if valid_591334 != nil:
    section.add "Action", valid_591334
  var valid_591335 = query.getOrDefault("OptionGroupName")
  valid_591335 = validateParameter(valid_591335, JString, required = false,
                                 default = nil)
  if valid_591335 != nil:
    section.add "OptionGroupName", valid_591335
  var valid_591336 = query.getOrDefault("CopyTags")
  valid_591336 = validateParameter(valid_591336, JBool, required = false, default = nil)
  if valid_591336 != nil:
    section.add "CopyTags", valid_591336
  var valid_591337 = query.getOrDefault("TargetDBSnapshotIdentifier")
  valid_591337 = validateParameter(valid_591337, JString, required = true,
                                 default = nil)
  if valid_591337 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_591337
  var valid_591338 = query.getOrDefault("Version")
  valid_591338 = validateParameter(valid_591338, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591338 != nil:
    section.add "Version", valid_591338
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591339 = header.getOrDefault("X-Amz-Signature")
  valid_591339 = validateParameter(valid_591339, JString, required = false,
                                 default = nil)
  if valid_591339 != nil:
    section.add "X-Amz-Signature", valid_591339
  var valid_591340 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591340 = validateParameter(valid_591340, JString, required = false,
                                 default = nil)
  if valid_591340 != nil:
    section.add "X-Amz-Content-Sha256", valid_591340
  var valid_591341 = header.getOrDefault("X-Amz-Date")
  valid_591341 = validateParameter(valid_591341, JString, required = false,
                                 default = nil)
  if valid_591341 != nil:
    section.add "X-Amz-Date", valid_591341
  var valid_591342 = header.getOrDefault("X-Amz-Credential")
  valid_591342 = validateParameter(valid_591342, JString, required = false,
                                 default = nil)
  if valid_591342 != nil:
    section.add "X-Amz-Credential", valid_591342
  var valid_591343 = header.getOrDefault("X-Amz-Security-Token")
  valid_591343 = validateParameter(valid_591343, JString, required = false,
                                 default = nil)
  if valid_591343 != nil:
    section.add "X-Amz-Security-Token", valid_591343
  var valid_591344 = header.getOrDefault("X-Amz-Algorithm")
  valid_591344 = validateParameter(valid_591344, JString, required = false,
                                 default = nil)
  if valid_591344 != nil:
    section.add "X-Amz-Algorithm", valid_591344
  var valid_591345 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591345 = validateParameter(valid_591345, JString, required = false,
                                 default = nil)
  if valid_591345 != nil:
    section.add "X-Amz-SignedHeaders", valid_591345
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591346: Call_GetCopyDBSnapshot_591326; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_591346.validator(path, query, header, formData, body)
  let scheme = call_591346.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591346.url(scheme.get, call_591346.host, call_591346.base,
                         call_591346.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591346, url, valid)

proc call*(call_591347: Call_GetCopyDBSnapshot_591326;
          SourceDBSnapshotIdentifier: string; TargetDBSnapshotIdentifier: string;
          Tags: JsonNode = nil; KmsKeyId: string = ""; PreSignedUrl: string = "";
          SourceRegion: string = ""; Action: string = "CopyDBSnapshot";
          OptionGroupName: string = ""; CopyTags: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you copy an encrypted DB snapshot from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Version: string (required)
  var query_591348 = newJObject()
  add(query_591348, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  if Tags != nil:
    query_591348.add "Tags", Tags
  add(query_591348, "KmsKeyId", newJString(KmsKeyId))
  add(query_591348, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_591348, "SourceRegion", newJString(SourceRegion))
  add(query_591348, "Action", newJString(Action))
  add(query_591348, "OptionGroupName", newJString(OptionGroupName))
  add(query_591348, "CopyTags", newJBool(CopyTags))
  add(query_591348, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(query_591348, "Version", newJString(Version))
  result = call_591347.call(nil, query_591348, nil, nil, nil)

var getCopyDBSnapshot* = Call_GetCopyDBSnapshot_591326(name: "getCopyDBSnapshot",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyDBSnapshot", validator: validate_GetCopyDBSnapshot_591327,
    base: "/", url: url_GetCopyDBSnapshot_591328,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyOptionGroup_591392 = ref object of OpenApiRestCall_590348
proc url_PostCopyOptionGroup_591394(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopyOptionGroup_591393(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591395 = query.getOrDefault("Action")
  valid_591395 = validateParameter(valid_591395, JString, required = true,
                                 default = newJString("CopyOptionGroup"))
  if valid_591395 != nil:
    section.add "Action", valid_591395
  var valid_591396 = query.getOrDefault("Version")
  valid_591396 = validateParameter(valid_591396, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591396 != nil:
    section.add "Version", valid_591396
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591397 = header.getOrDefault("X-Amz-Signature")
  valid_591397 = validateParameter(valid_591397, JString, required = false,
                                 default = nil)
  if valid_591397 != nil:
    section.add "X-Amz-Signature", valid_591397
  var valid_591398 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591398 = validateParameter(valid_591398, JString, required = false,
                                 default = nil)
  if valid_591398 != nil:
    section.add "X-Amz-Content-Sha256", valid_591398
  var valid_591399 = header.getOrDefault("X-Amz-Date")
  valid_591399 = validateParameter(valid_591399, JString, required = false,
                                 default = nil)
  if valid_591399 != nil:
    section.add "X-Amz-Date", valid_591399
  var valid_591400 = header.getOrDefault("X-Amz-Credential")
  valid_591400 = validateParameter(valid_591400, JString, required = false,
                                 default = nil)
  if valid_591400 != nil:
    section.add "X-Amz-Credential", valid_591400
  var valid_591401 = header.getOrDefault("X-Amz-Security-Token")
  valid_591401 = validateParameter(valid_591401, JString, required = false,
                                 default = nil)
  if valid_591401 != nil:
    section.add "X-Amz-Security-Token", valid_591401
  var valid_591402 = header.getOrDefault("X-Amz-Algorithm")
  valid_591402 = validateParameter(valid_591402, JString, required = false,
                                 default = nil)
  if valid_591402 != nil:
    section.add "X-Amz-Algorithm", valid_591402
  var valid_591403 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591403 = validateParameter(valid_591403, JString, required = false,
                                 default = nil)
  if valid_591403 != nil:
    section.add "X-Amz-SignedHeaders", valid_591403
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetOptionGroupIdentifier` field"
  var valid_591404 = formData.getOrDefault("TargetOptionGroupIdentifier")
  valid_591404 = validateParameter(valid_591404, JString, required = true,
                                 default = nil)
  if valid_591404 != nil:
    section.add "TargetOptionGroupIdentifier", valid_591404
  var valid_591405 = formData.getOrDefault("TargetOptionGroupDescription")
  valid_591405 = validateParameter(valid_591405, JString, required = true,
                                 default = nil)
  if valid_591405 != nil:
    section.add "TargetOptionGroupDescription", valid_591405
  var valid_591406 = formData.getOrDefault("SourceOptionGroupIdentifier")
  valid_591406 = validateParameter(valid_591406, JString, required = true,
                                 default = nil)
  if valid_591406 != nil:
    section.add "SourceOptionGroupIdentifier", valid_591406
  var valid_591407 = formData.getOrDefault("Tags")
  valid_591407 = validateParameter(valid_591407, JArray, required = false,
                                 default = nil)
  if valid_591407 != nil:
    section.add "Tags", valid_591407
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591408: Call_PostCopyOptionGroup_591392; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_591408.validator(path, query, header, formData, body)
  let scheme = call_591408.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591408.url(scheme.get, call_591408.host, call_591408.base,
                         call_591408.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591408, url, valid)

proc call*(call_591409: Call_PostCopyOptionGroup_591392;
          TargetOptionGroupIdentifier: string;
          TargetOptionGroupDescription: string;
          SourceOptionGroupIdentifier: string; Action: string = "CopyOptionGroup";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCopyOptionGroup
  ## Copies the specified option group.
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_591410 = newJObject()
  var formData_591411 = newJObject()
  add(formData_591411, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  add(formData_591411, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  add(formData_591411, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  add(query_591410, "Action", newJString(Action))
  if Tags != nil:
    formData_591411.add "Tags", Tags
  add(query_591410, "Version", newJString(Version))
  result = call_591409.call(nil, query_591410, nil, formData_591411, nil)

var postCopyOptionGroup* = Call_PostCopyOptionGroup_591392(
    name: "postCopyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyOptionGroup",
    validator: validate_PostCopyOptionGroup_591393, base: "/",
    url: url_PostCopyOptionGroup_591394, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyOptionGroup_591373 = ref object of OpenApiRestCall_590348
proc url_GetCopyOptionGroup_591375(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopyOptionGroup_591374(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   Action: JString (required)
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   Version: JString (required)
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  section = newJObject()
  var valid_591376 = query.getOrDefault("Tags")
  valid_591376 = validateParameter(valid_591376, JArray, required = false,
                                 default = nil)
  if valid_591376 != nil:
    section.add "Tags", valid_591376
  assert query != nil, "query argument is necessary due to required `TargetOptionGroupDescription` field"
  var valid_591377 = query.getOrDefault("TargetOptionGroupDescription")
  valid_591377 = validateParameter(valid_591377, JString, required = true,
                                 default = nil)
  if valid_591377 != nil:
    section.add "TargetOptionGroupDescription", valid_591377
  var valid_591378 = query.getOrDefault("Action")
  valid_591378 = validateParameter(valid_591378, JString, required = true,
                                 default = newJString("CopyOptionGroup"))
  if valid_591378 != nil:
    section.add "Action", valid_591378
  var valid_591379 = query.getOrDefault("TargetOptionGroupIdentifier")
  valid_591379 = validateParameter(valid_591379, JString, required = true,
                                 default = nil)
  if valid_591379 != nil:
    section.add "TargetOptionGroupIdentifier", valid_591379
  var valid_591380 = query.getOrDefault("Version")
  valid_591380 = validateParameter(valid_591380, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591380 != nil:
    section.add "Version", valid_591380
  var valid_591381 = query.getOrDefault("SourceOptionGroupIdentifier")
  valid_591381 = validateParameter(valid_591381, JString, required = true,
                                 default = nil)
  if valid_591381 != nil:
    section.add "SourceOptionGroupIdentifier", valid_591381
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591382 = header.getOrDefault("X-Amz-Signature")
  valid_591382 = validateParameter(valid_591382, JString, required = false,
                                 default = nil)
  if valid_591382 != nil:
    section.add "X-Amz-Signature", valid_591382
  var valid_591383 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591383 = validateParameter(valid_591383, JString, required = false,
                                 default = nil)
  if valid_591383 != nil:
    section.add "X-Amz-Content-Sha256", valid_591383
  var valid_591384 = header.getOrDefault("X-Amz-Date")
  valid_591384 = validateParameter(valid_591384, JString, required = false,
                                 default = nil)
  if valid_591384 != nil:
    section.add "X-Amz-Date", valid_591384
  var valid_591385 = header.getOrDefault("X-Amz-Credential")
  valid_591385 = validateParameter(valid_591385, JString, required = false,
                                 default = nil)
  if valid_591385 != nil:
    section.add "X-Amz-Credential", valid_591385
  var valid_591386 = header.getOrDefault("X-Amz-Security-Token")
  valid_591386 = validateParameter(valid_591386, JString, required = false,
                                 default = nil)
  if valid_591386 != nil:
    section.add "X-Amz-Security-Token", valid_591386
  var valid_591387 = header.getOrDefault("X-Amz-Algorithm")
  valid_591387 = validateParameter(valid_591387, JString, required = false,
                                 default = nil)
  if valid_591387 != nil:
    section.add "X-Amz-Algorithm", valid_591387
  var valid_591388 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591388 = validateParameter(valid_591388, JString, required = false,
                                 default = nil)
  if valid_591388 != nil:
    section.add "X-Amz-SignedHeaders", valid_591388
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591389: Call_GetCopyOptionGroup_591373; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_591389.validator(path, query, header, formData, body)
  let scheme = call_591389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591389.url(scheme.get, call_591389.host, call_591389.base,
                         call_591389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591389, url, valid)

proc call*(call_591390: Call_GetCopyOptionGroup_591373;
          TargetOptionGroupDescription: string;
          TargetOptionGroupIdentifier: string;
          SourceOptionGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyOptionGroup
  ## Copies the specified option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   Action: string (required)
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   Version: string (required)
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  var query_591391 = newJObject()
  if Tags != nil:
    query_591391.add "Tags", Tags
  add(query_591391, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  add(query_591391, "Action", newJString(Action))
  add(query_591391, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  add(query_591391, "Version", newJString(Version))
  add(query_591391, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  result = call_591390.call(nil, query_591391, nil, nil, nil)

var getCopyOptionGroup* = Call_GetCopyOptionGroup_591373(
    name: "getCopyOptionGroup", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyOptionGroup", validator: validate_GetCopyOptionGroup_591374,
    base: "/", url: url_GetCopyOptionGroup_591375,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCustomAvailabilityZone_591431 = ref object of OpenApiRestCall_590348
proc url_PostCreateCustomAvailabilityZone_591433(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateCustomAvailabilityZone_591432(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591434 = query.getOrDefault("Action")
  valid_591434 = validateParameter(valid_591434, JString, required = true, default = newJString(
      "CreateCustomAvailabilityZone"))
  if valid_591434 != nil:
    section.add "Action", valid_591434
  var valid_591435 = query.getOrDefault("Version")
  valid_591435 = validateParameter(valid_591435, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591435 != nil:
    section.add "Version", valid_591435
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591436 = header.getOrDefault("X-Amz-Signature")
  valid_591436 = validateParameter(valid_591436, JString, required = false,
                                 default = nil)
  if valid_591436 != nil:
    section.add "X-Amz-Signature", valid_591436
  var valid_591437 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591437 = validateParameter(valid_591437, JString, required = false,
                                 default = nil)
  if valid_591437 != nil:
    section.add "X-Amz-Content-Sha256", valid_591437
  var valid_591438 = header.getOrDefault("X-Amz-Date")
  valid_591438 = validateParameter(valid_591438, JString, required = false,
                                 default = nil)
  if valid_591438 != nil:
    section.add "X-Amz-Date", valid_591438
  var valid_591439 = header.getOrDefault("X-Amz-Credential")
  valid_591439 = validateParameter(valid_591439, JString, required = false,
                                 default = nil)
  if valid_591439 != nil:
    section.add "X-Amz-Credential", valid_591439
  var valid_591440 = header.getOrDefault("X-Amz-Security-Token")
  valid_591440 = validateParameter(valid_591440, JString, required = false,
                                 default = nil)
  if valid_591440 != nil:
    section.add "X-Amz-Security-Token", valid_591440
  var valid_591441 = header.getOrDefault("X-Amz-Algorithm")
  valid_591441 = validateParameter(valid_591441, JString, required = false,
                                 default = nil)
  if valid_591441 != nil:
    section.add "X-Amz-Algorithm", valid_591441
  var valid_591442 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591442 = validateParameter(valid_591442, JString, required = false,
                                 default = nil)
  if valid_591442 != nil:
    section.add "X-Amz-SignedHeaders", valid_591442
  result.add "header", section
  ## parameters in `formData` object:
  ##   VpnTunnelOriginatorIP: JString
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> is not specified.</p>
  ##   ExistingVpnId: JString
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   NewVpnTunnelName: JString
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> is not specified.</p>
  ##   CustomAvailabilityZoneName: JString (required)
  ##                             : The name of the custom Availability Zone (AZ).
  section = newJObject()
  var valid_591443 = formData.getOrDefault("VpnTunnelOriginatorIP")
  valid_591443 = validateParameter(valid_591443, JString, required = false,
                                 default = nil)
  if valid_591443 != nil:
    section.add "VpnTunnelOriginatorIP", valid_591443
  var valid_591444 = formData.getOrDefault("ExistingVpnId")
  valid_591444 = validateParameter(valid_591444, JString, required = false,
                                 default = nil)
  if valid_591444 != nil:
    section.add "ExistingVpnId", valid_591444
  var valid_591445 = formData.getOrDefault("NewVpnTunnelName")
  valid_591445 = validateParameter(valid_591445, JString, required = false,
                                 default = nil)
  if valid_591445 != nil:
    section.add "NewVpnTunnelName", valid_591445
  assert formData != nil, "formData argument is necessary due to required `CustomAvailabilityZoneName` field"
  var valid_591446 = formData.getOrDefault("CustomAvailabilityZoneName")
  valid_591446 = validateParameter(valid_591446, JString, required = true,
                                 default = nil)
  if valid_591446 != nil:
    section.add "CustomAvailabilityZoneName", valid_591446
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591447: Call_PostCreateCustomAvailabilityZone_591431;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_591447.validator(path, query, header, formData, body)
  let scheme = call_591447.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591447.url(scheme.get, call_591447.host, call_591447.base,
                         call_591447.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591447, url, valid)

proc call*(call_591448: Call_PostCreateCustomAvailabilityZone_591431;
          CustomAvailabilityZoneName: string; VpnTunnelOriginatorIP: string = "";
          ExistingVpnId: string = ""; NewVpnTunnelName: string = "";
          Action: string = "CreateCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateCustomAvailabilityZone
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   VpnTunnelOriginatorIP: string
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> is not specified.</p>
  ##   ExistingVpnId: string
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   NewVpnTunnelName: string
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> is not specified.</p>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneName: string (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   Version: string (required)
  var query_591449 = newJObject()
  var formData_591450 = newJObject()
  add(formData_591450, "VpnTunnelOriginatorIP", newJString(VpnTunnelOriginatorIP))
  add(formData_591450, "ExistingVpnId", newJString(ExistingVpnId))
  add(formData_591450, "NewVpnTunnelName", newJString(NewVpnTunnelName))
  add(query_591449, "Action", newJString(Action))
  add(formData_591450, "CustomAvailabilityZoneName",
      newJString(CustomAvailabilityZoneName))
  add(query_591449, "Version", newJString(Version))
  result = call_591448.call(nil, query_591449, nil, formData_591450, nil)

var postCreateCustomAvailabilityZone* = Call_PostCreateCustomAvailabilityZone_591431(
    name: "postCreateCustomAvailabilityZone", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateCustomAvailabilityZone",
    validator: validate_PostCreateCustomAvailabilityZone_591432, base: "/",
    url: url_PostCreateCustomAvailabilityZone_591433,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCustomAvailabilityZone_591412 = ref object of OpenApiRestCall_590348
proc url_GetCreateCustomAvailabilityZone_591414(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateCustomAvailabilityZone_591413(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VpnTunnelOriginatorIP: JString
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> is not specified.</p>
  ##   ExistingVpnId: JString
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   Action: JString (required)
  ##   CustomAvailabilityZoneName: JString (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   Version: JString (required)
  ##   NewVpnTunnelName: JString
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> is not specified.</p>
  section = newJObject()
  var valid_591415 = query.getOrDefault("VpnTunnelOriginatorIP")
  valid_591415 = validateParameter(valid_591415, JString, required = false,
                                 default = nil)
  if valid_591415 != nil:
    section.add "VpnTunnelOriginatorIP", valid_591415
  var valid_591416 = query.getOrDefault("ExistingVpnId")
  valid_591416 = validateParameter(valid_591416, JString, required = false,
                                 default = nil)
  if valid_591416 != nil:
    section.add "ExistingVpnId", valid_591416
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591417 = query.getOrDefault("Action")
  valid_591417 = validateParameter(valid_591417, JString, required = true, default = newJString(
      "CreateCustomAvailabilityZone"))
  if valid_591417 != nil:
    section.add "Action", valid_591417
  var valid_591418 = query.getOrDefault("CustomAvailabilityZoneName")
  valid_591418 = validateParameter(valid_591418, JString, required = true,
                                 default = nil)
  if valid_591418 != nil:
    section.add "CustomAvailabilityZoneName", valid_591418
  var valid_591419 = query.getOrDefault("Version")
  valid_591419 = validateParameter(valid_591419, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591419 != nil:
    section.add "Version", valid_591419
  var valid_591420 = query.getOrDefault("NewVpnTunnelName")
  valid_591420 = validateParameter(valid_591420, JString, required = false,
                                 default = nil)
  if valid_591420 != nil:
    section.add "NewVpnTunnelName", valid_591420
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591421 = header.getOrDefault("X-Amz-Signature")
  valid_591421 = validateParameter(valid_591421, JString, required = false,
                                 default = nil)
  if valid_591421 != nil:
    section.add "X-Amz-Signature", valid_591421
  var valid_591422 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591422 = validateParameter(valid_591422, JString, required = false,
                                 default = nil)
  if valid_591422 != nil:
    section.add "X-Amz-Content-Sha256", valid_591422
  var valid_591423 = header.getOrDefault("X-Amz-Date")
  valid_591423 = validateParameter(valid_591423, JString, required = false,
                                 default = nil)
  if valid_591423 != nil:
    section.add "X-Amz-Date", valid_591423
  var valid_591424 = header.getOrDefault("X-Amz-Credential")
  valid_591424 = validateParameter(valid_591424, JString, required = false,
                                 default = nil)
  if valid_591424 != nil:
    section.add "X-Amz-Credential", valid_591424
  var valid_591425 = header.getOrDefault("X-Amz-Security-Token")
  valid_591425 = validateParameter(valid_591425, JString, required = false,
                                 default = nil)
  if valid_591425 != nil:
    section.add "X-Amz-Security-Token", valid_591425
  var valid_591426 = header.getOrDefault("X-Amz-Algorithm")
  valid_591426 = validateParameter(valid_591426, JString, required = false,
                                 default = nil)
  if valid_591426 != nil:
    section.add "X-Amz-Algorithm", valid_591426
  var valid_591427 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591427 = validateParameter(valid_591427, JString, required = false,
                                 default = nil)
  if valid_591427 != nil:
    section.add "X-Amz-SignedHeaders", valid_591427
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591428: Call_GetCreateCustomAvailabilityZone_591412;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_591428.validator(path, query, header, formData, body)
  let scheme = call_591428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591428.url(scheme.get, call_591428.host, call_591428.base,
                         call_591428.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591428, url, valid)

proc call*(call_591429: Call_GetCreateCustomAvailabilityZone_591412;
          CustomAvailabilityZoneName: string; VpnTunnelOriginatorIP: string = "";
          ExistingVpnId: string = "";
          Action: string = "CreateCustomAvailabilityZone";
          Version: string = "2014-10-31"; NewVpnTunnelName: string = ""): Recallable =
  ## getCreateCustomAvailabilityZone
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   VpnTunnelOriginatorIP: string
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> is not specified.</p>
  ##   ExistingVpnId: string
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   Action: string (required)
  ##   CustomAvailabilityZoneName: string (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   Version: string (required)
  ##   NewVpnTunnelName: string
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> is not specified.</p>
  var query_591430 = newJObject()
  add(query_591430, "VpnTunnelOriginatorIP", newJString(VpnTunnelOriginatorIP))
  add(query_591430, "ExistingVpnId", newJString(ExistingVpnId))
  add(query_591430, "Action", newJString(Action))
  add(query_591430, "CustomAvailabilityZoneName",
      newJString(CustomAvailabilityZoneName))
  add(query_591430, "Version", newJString(Version))
  add(query_591430, "NewVpnTunnelName", newJString(NewVpnTunnelName))
  result = call_591429.call(nil, query_591430, nil, nil, nil)

var getCreateCustomAvailabilityZone* = Call_GetCreateCustomAvailabilityZone_591412(
    name: "getCreateCustomAvailabilityZone", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateCustomAvailabilityZone",
    validator: validate_GetCreateCustomAvailabilityZone_591413, base: "/",
    url: url_GetCreateCustomAvailabilityZone_591414,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBCluster_591519 = ref object of OpenApiRestCall_590348
proc url_PostCreateDBCluster_591521(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBCluster_591520(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591522 = query.getOrDefault("Action")
  valid_591522 = validateParameter(valid_591522, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_591522 != nil:
    section.add "Action", valid_591522
  var valid_591523 = query.getOrDefault("Version")
  valid_591523 = validateParameter(valid_591523, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591523 != nil:
    section.add "Version", valid_591523
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_591524 = header.getOrDefault("X-Amz-Security-Token")
  valid_591524 = validateParameter(valid_591524, JString, required = false,
                                 default = nil)
  if valid_591524 != nil:
    section.add "X-Amz-Security-Token", valid_591524
  var valid_591525 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591525 = validateParameter(valid_591525, JString, required = false,
                                 default = nil)
  if valid_591525 != nil:
    section.add "X-Amz-SignedHeaders", valid_591525
  var valid_591526 = header.getOrDefault("X-Amz-Signature")
  valid_591526 = validateParameter(valid_591526, JString, required = false,
                                 default = nil)
  if valid_591526 != nil:
    section.add "X-Amz-Signature", valid_591526
  var valid_591527 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591527 = validateParameter(valid_591527, JString, required = false,
                                 default = nil)
  if valid_591527 != nil:
    section.add "X-Amz-Content-Sha256", valid_591527
  var valid_591528 = header.getOrDefault("X-Amz-Date")
  valid_591528 = validateParameter(valid_591528, JString, required = false,
                                 default = nil)
  if valid_591528 != nil:
    section.add "X-Amz-Date", valid_591528
  var valid_591529 = header.getOrDefault("X-Amz-Credential")
  valid_591529 = validateParameter(valid_591529, JString, required = false,
                                 default = nil)
  if valid_591529 != nil:
    section.add "X-Amz-Credential", valid_591529
  var valid_591530 = header.getOrDefault("X-Amz-Algorithm")
  valid_591530 = validateParameter(valid_591530, JString, required = false,
                                 default = nil)
  if valid_591530 != nil:
    section.add "X-Amz-Algorithm", valid_591530
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  section = newJObject()
  var valid_591531 = formData.getOrDefault("Port")
  valid_591531 = validateParameter(valid_591531, JInt, required = false, default = nil)
  if valid_591531 != nil:
    section.add "Port", valid_591531
  var valid_591532 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_591532 = validateParameter(valid_591532, JString, required = false,
                                 default = nil)
  if valid_591532 != nil:
    section.add "GlobalClusterIdentifier", valid_591532
  var valid_591533 = formData.getOrDefault("MasterUsername")
  valid_591533 = validateParameter(valid_591533, JString, required = false,
                                 default = nil)
  if valid_591533 != nil:
    section.add "MasterUsername", valid_591533
  var valid_591534 = formData.getOrDefault("DatabaseName")
  valid_591534 = validateParameter(valid_591534, JString, required = false,
                                 default = nil)
  if valid_591534 != nil:
    section.add "DatabaseName", valid_591534
  var valid_591535 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_591535 = validateParameter(valid_591535, JArray, required = false,
                                 default = nil)
  if valid_591535 != nil:
    section.add "VpcSecurityGroupIds", valid_591535
  var valid_591536 = formData.getOrDefault("AvailabilityZones")
  valid_591536 = validateParameter(valid_591536, JArray, required = false,
                                 default = nil)
  if valid_591536 != nil:
    section.add "AvailabilityZones", valid_591536
  var valid_591537 = formData.getOrDefault("EngineMode")
  valid_591537 = validateParameter(valid_591537, JString, required = false,
                                 default = nil)
  if valid_591537 != nil:
    section.add "EngineMode", valid_591537
  var valid_591538 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_591538 = validateParameter(valid_591538, JArray, required = false,
                                 default = nil)
  if valid_591538 != nil:
    section.add "EnableCloudwatchLogsExports", valid_591538
  var valid_591539 = formData.getOrDefault("DBSubnetGroupName")
  valid_591539 = validateParameter(valid_591539, JString, required = false,
                                 default = nil)
  if valid_591539 != nil:
    section.add "DBSubnetGroupName", valid_591539
  var valid_591540 = formData.getOrDefault("CharacterSetName")
  valid_591540 = validateParameter(valid_591540, JString, required = false,
                                 default = nil)
  if valid_591540 != nil:
    section.add "CharacterSetName", valid_591540
  var valid_591541 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_591541 = validateParameter(valid_591541, JString, required = false,
                                 default = nil)
  if valid_591541 != nil:
    section.add "DBClusterParameterGroupName", valid_591541
  var valid_591542 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_591542 = validateParameter(valid_591542, JBool, required = false, default = nil)
  if valid_591542 != nil:
    section.add "CopyTagsToSnapshot", valid_591542
  var valid_591543 = formData.getOrDefault("DeletionProtection")
  valid_591543 = validateParameter(valid_591543, JBool, required = false, default = nil)
  if valid_591543 != nil:
    section.add "DeletionProtection", valid_591543
  var valid_591544 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_591544 = validateParameter(valid_591544, JString, required = false,
                                 default = nil)
  if valid_591544 != nil:
    section.add "PreferredMaintenanceWindow", valid_591544
  var valid_591545 = formData.getOrDefault("PreferredBackupWindow")
  valid_591545 = validateParameter(valid_591545, JString, required = false,
                                 default = nil)
  if valid_591545 != nil:
    section.add "PreferredBackupWindow", valid_591545
  var valid_591546 = formData.getOrDefault("MasterUserPassword")
  valid_591546 = validateParameter(valid_591546, JString, required = false,
                                 default = nil)
  if valid_591546 != nil:
    section.add "MasterUserPassword", valid_591546
  var valid_591547 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_591547 = validateParameter(valid_591547, JString, required = false,
                                 default = nil)
  if valid_591547 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_591547
  var valid_591548 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_591548 = validateParameter(valid_591548, JString, required = false,
                                 default = nil)
  if valid_591548 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_591548
  var valid_591549 = formData.getOrDefault("SourceRegion")
  valid_591549 = validateParameter(valid_591549, JString, required = false,
                                 default = nil)
  if valid_591549 != nil:
    section.add "SourceRegion", valid_591549
  var valid_591550 = formData.getOrDefault("EngineVersion")
  valid_591550 = validateParameter(valid_591550, JString, required = false,
                                 default = nil)
  if valid_591550 != nil:
    section.add "EngineVersion", valid_591550
  var valid_591551 = formData.getOrDefault("BacktrackWindow")
  valid_591551 = validateParameter(valid_591551, JInt, required = false, default = nil)
  if valid_591551 != nil:
    section.add "BacktrackWindow", valid_591551
  var valid_591552 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_591552 = validateParameter(valid_591552, JBool, required = false, default = nil)
  if valid_591552 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_591552
  var valid_591553 = formData.getOrDefault("BackupRetentionPeriod")
  valid_591553 = validateParameter(valid_591553, JInt, required = false, default = nil)
  if valid_591553 != nil:
    section.add "BackupRetentionPeriod", valid_591553
  var valid_591554 = formData.getOrDefault("KmsKeyId")
  valid_591554 = validateParameter(valid_591554, JString, required = false,
                                 default = nil)
  if valid_591554 != nil:
    section.add "KmsKeyId", valid_591554
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_591555 = formData.getOrDefault("Engine")
  valid_591555 = validateParameter(valid_591555, JString, required = true,
                                 default = nil)
  if valid_591555 != nil:
    section.add "Engine", valid_591555
  var valid_591556 = formData.getOrDefault("PreSignedUrl")
  valid_591556 = validateParameter(valid_591556, JString, required = false,
                                 default = nil)
  if valid_591556 != nil:
    section.add "PreSignedUrl", valid_591556
  var valid_591557 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_591557 = validateParameter(valid_591557, JString, required = false,
                                 default = nil)
  if valid_591557 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_591557
  var valid_591558 = formData.getOrDefault("Tags")
  valid_591558 = validateParameter(valid_591558, JArray, required = false,
                                 default = nil)
  if valid_591558 != nil:
    section.add "Tags", valid_591558
  var valid_591559 = formData.getOrDefault("EnableHttpEndpoint")
  valid_591559 = validateParameter(valid_591559, JBool, required = false, default = nil)
  if valid_591559 != nil:
    section.add "EnableHttpEndpoint", valid_591559
  var valid_591560 = formData.getOrDefault("OptionGroupName")
  valid_591560 = validateParameter(valid_591560, JString, required = false,
                                 default = nil)
  if valid_591560 != nil:
    section.add "OptionGroupName", valid_591560
  var valid_591561 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_591561 = validateParameter(valid_591561, JString, required = false,
                                 default = nil)
  if valid_591561 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_591561
  var valid_591562 = formData.getOrDefault("ReplicationSourceIdentifier")
  valid_591562 = validateParameter(valid_591562, JString, required = false,
                                 default = nil)
  if valid_591562 != nil:
    section.add "ReplicationSourceIdentifier", valid_591562
  var valid_591563 = formData.getOrDefault("StorageEncrypted")
  valid_591563 = validateParameter(valid_591563, JBool, required = false, default = nil)
  if valid_591563 != nil:
    section.add "StorageEncrypted", valid_591563
  var valid_591564 = formData.getOrDefault("DBClusterIdentifier")
  valid_591564 = validateParameter(valid_591564, JString, required = true,
                                 default = nil)
  if valid_591564 != nil:
    section.add "DBClusterIdentifier", valid_591564
  var valid_591565 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_591565 = validateParameter(valid_591565, JString, required = false,
                                 default = nil)
  if valid_591565 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_591565
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591566: Call_PostCreateDBCluster_591519; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_591566.validator(path, query, header, formData, body)
  let scheme = call_591566.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591566.url(scheme.get, call_591566.host, call_591566.base,
                         call_591566.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591566, url, valid)

proc call*(call_591567: Call_PostCreateDBCluster_591519; Engine: string;
          DBClusterIdentifier: string; Port: int = 0;
          GlobalClusterIdentifier: string = ""; MasterUsername: string = "";
          DatabaseName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZones: JsonNode = nil; EngineMode: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBCluster"; DBSubnetGroupName: string = "";
          CharacterSetName: string = ""; DBClusterParameterGroupName: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationTimeoutAction: string = ""; SourceRegion: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          PreSignedUrl: string = ""; ScalingConfigurationMaxCapacity: string = "";
          Tags: JsonNode = nil; EnableHttpEndpoint: bool = false;
          OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          ReplicationSourceIdentifier: string = ""; Version: string = "2014-10-31";
          StorageEncrypted: bool = false; ScalingConfigurationAutoPause: string = ""): Recallable =
  ## postCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  var query_591568 = newJObject()
  var formData_591569 = newJObject()
  add(formData_591569, "Port", newJInt(Port))
  add(formData_591569, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_591569, "MasterUsername", newJString(MasterUsername))
  add(formData_591569, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_591569.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if AvailabilityZones != nil:
    formData_591569.add "AvailabilityZones", AvailabilityZones
  add(formData_591569, "EngineMode", newJString(EngineMode))
  if EnableCloudwatchLogsExports != nil:
    formData_591569.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_591568, "Action", newJString(Action))
  add(formData_591569, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_591569, "CharacterSetName", newJString(CharacterSetName))
  add(formData_591569, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_591569, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_591569, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_591569, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_591569, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_591569, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_591569, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_591569, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_591569, "SourceRegion", newJString(SourceRegion))
  add(formData_591569, "EngineVersion", newJString(EngineVersion))
  add(formData_591569, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_591569, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_591569, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_591569, "KmsKeyId", newJString(KmsKeyId))
  add(formData_591569, "Engine", newJString(Engine))
  add(formData_591569, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_591569, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  if Tags != nil:
    formData_591569.add "Tags", Tags
  add(formData_591569, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(formData_591569, "OptionGroupName", newJString(OptionGroupName))
  add(formData_591569, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_591569, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_591568, "Version", newJString(Version))
  add(formData_591569, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_591569, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_591569, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  result = call_591567.call(nil, query_591568, nil, formData_591569, nil)

var postCreateDBCluster* = Call_PostCreateDBCluster_591519(
    name: "postCreateDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBCluster",
    validator: validate_PostCreateDBCluster_591520, base: "/",
    url: url_PostCreateDBCluster_591521, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBCluster_591451 = ref object of OpenApiRestCall_590348
proc url_GetCreateDBCluster_591453(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBCluster_591452(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: JString (required)
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_591472 = query.getOrDefault("GlobalClusterIdentifier")
  valid_591472 = validateParameter(valid_591472, JString, required = false,
                                 default = nil)
  if valid_591472 != nil:
    section.add "GlobalClusterIdentifier", valid_591472
  var valid_591473 = query.getOrDefault("DatabaseName")
  valid_591473 = validateParameter(valid_591473, JString, required = false,
                                 default = nil)
  if valid_591473 != nil:
    section.add "DatabaseName", valid_591473
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_591474 = query.getOrDefault("Engine")
  valid_591474 = validateParameter(valid_591474, JString, required = true,
                                 default = nil)
  if valid_591474 != nil:
    section.add "Engine", valid_591474
  var valid_591475 = query.getOrDefault("CopyTagsToSnapshot")
  valid_591475 = validateParameter(valid_591475, JBool, required = false, default = nil)
  if valid_591475 != nil:
    section.add "CopyTagsToSnapshot", valid_591475
  var valid_591476 = query.getOrDefault("EnableHttpEndpoint")
  valid_591476 = validateParameter(valid_591476, JBool, required = false, default = nil)
  if valid_591476 != nil:
    section.add "EnableHttpEndpoint", valid_591476
  var valid_591477 = query.getOrDefault("KmsKeyId")
  valid_591477 = validateParameter(valid_591477, JString, required = false,
                                 default = nil)
  if valid_591477 != nil:
    section.add "KmsKeyId", valid_591477
  var valid_591478 = query.getOrDefault("PreSignedUrl")
  valid_591478 = validateParameter(valid_591478, JString, required = false,
                                 default = nil)
  if valid_591478 != nil:
    section.add "PreSignedUrl", valid_591478
  var valid_591479 = query.getOrDefault("EngineMode")
  valid_591479 = validateParameter(valid_591479, JString, required = false,
                                 default = nil)
  if valid_591479 != nil:
    section.add "EngineMode", valid_591479
  var valid_591480 = query.getOrDefault("MasterUsername")
  valid_591480 = validateParameter(valid_591480, JString, required = false,
                                 default = nil)
  if valid_591480 != nil:
    section.add "MasterUsername", valid_591480
  var valid_591481 = query.getOrDefault("BackupRetentionPeriod")
  valid_591481 = validateParameter(valid_591481, JInt, required = false, default = nil)
  if valid_591481 != nil:
    section.add "BackupRetentionPeriod", valid_591481
  var valid_591482 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_591482 = validateParameter(valid_591482, JString, required = false,
                                 default = nil)
  if valid_591482 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_591482
  var valid_591483 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_591483 = validateParameter(valid_591483, JArray, required = false,
                                 default = nil)
  if valid_591483 != nil:
    section.add "EnableCloudwatchLogsExports", valid_591483
  var valid_591484 = query.getOrDefault("EngineVersion")
  valid_591484 = validateParameter(valid_591484, JString, required = false,
                                 default = nil)
  if valid_591484 != nil:
    section.add "EngineVersion", valid_591484
  var valid_591485 = query.getOrDefault("Action")
  valid_591485 = validateParameter(valid_591485, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_591485 != nil:
    section.add "Action", valid_591485
  var valid_591486 = query.getOrDefault("VpcSecurityGroupIds")
  valid_591486 = validateParameter(valid_591486, JArray, required = false,
                                 default = nil)
  if valid_591486 != nil:
    section.add "VpcSecurityGroupIds", valid_591486
  var valid_591487 = query.getOrDefault("StorageEncrypted")
  valid_591487 = validateParameter(valid_591487, JBool, required = false, default = nil)
  if valid_591487 != nil:
    section.add "StorageEncrypted", valid_591487
  var valid_591488 = query.getOrDefault("DeletionProtection")
  valid_591488 = validateParameter(valid_591488, JBool, required = false, default = nil)
  if valid_591488 != nil:
    section.add "DeletionProtection", valid_591488
  var valid_591489 = query.getOrDefault("CharacterSetName")
  valid_591489 = validateParameter(valid_591489, JString, required = false,
                                 default = nil)
  if valid_591489 != nil:
    section.add "CharacterSetName", valid_591489
  var valid_591490 = query.getOrDefault("Tags")
  valid_591490 = validateParameter(valid_591490, JArray, required = false,
                                 default = nil)
  if valid_591490 != nil:
    section.add "Tags", valid_591490
  var valid_591491 = query.getOrDefault("DBClusterIdentifier")
  valid_591491 = validateParameter(valid_591491, JString, required = true,
                                 default = nil)
  if valid_591491 != nil:
    section.add "DBClusterIdentifier", valid_591491
  var valid_591492 = query.getOrDefault("BacktrackWindow")
  valid_591492 = validateParameter(valid_591492, JInt, required = false, default = nil)
  if valid_591492 != nil:
    section.add "BacktrackWindow", valid_591492
  var valid_591493 = query.getOrDefault("DBClusterParameterGroupName")
  valid_591493 = validateParameter(valid_591493, JString, required = false,
                                 default = nil)
  if valid_591493 != nil:
    section.add "DBClusterParameterGroupName", valid_591493
  var valid_591494 = query.getOrDefault("AvailabilityZones")
  valid_591494 = validateParameter(valid_591494, JArray, required = false,
                                 default = nil)
  if valid_591494 != nil:
    section.add "AvailabilityZones", valid_591494
  var valid_591495 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_591495 = validateParameter(valid_591495, JString, required = false,
                                 default = nil)
  if valid_591495 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_591495
  var valid_591496 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_591496 = validateParameter(valid_591496, JString, required = false,
                                 default = nil)
  if valid_591496 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_591496
  var valid_591497 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_591497 = validateParameter(valid_591497, JBool, required = false, default = nil)
  if valid_591497 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_591497
  var valid_591498 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_591498 = validateParameter(valid_591498, JString, required = false,
                                 default = nil)
  if valid_591498 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_591498
  var valid_591499 = query.getOrDefault("SourceRegion")
  valid_591499 = validateParameter(valid_591499, JString, required = false,
                                 default = nil)
  if valid_591499 != nil:
    section.add "SourceRegion", valid_591499
  var valid_591500 = query.getOrDefault("Port")
  valid_591500 = validateParameter(valid_591500, JInt, required = false, default = nil)
  if valid_591500 != nil:
    section.add "Port", valid_591500
  var valid_591501 = query.getOrDefault("ReplicationSourceIdentifier")
  valid_591501 = validateParameter(valid_591501, JString, required = false,
                                 default = nil)
  if valid_591501 != nil:
    section.add "ReplicationSourceIdentifier", valid_591501
  var valid_591502 = query.getOrDefault("MasterUserPassword")
  valid_591502 = validateParameter(valid_591502, JString, required = false,
                                 default = nil)
  if valid_591502 != nil:
    section.add "MasterUserPassword", valid_591502
  var valid_591503 = query.getOrDefault("OptionGroupName")
  valid_591503 = validateParameter(valid_591503, JString, required = false,
                                 default = nil)
  if valid_591503 != nil:
    section.add "OptionGroupName", valid_591503
  var valid_591504 = query.getOrDefault("DBSubnetGroupName")
  valid_591504 = validateParameter(valid_591504, JString, required = false,
                                 default = nil)
  if valid_591504 != nil:
    section.add "DBSubnetGroupName", valid_591504
  var valid_591505 = query.getOrDefault("PreferredBackupWindow")
  valid_591505 = validateParameter(valid_591505, JString, required = false,
                                 default = nil)
  if valid_591505 != nil:
    section.add "PreferredBackupWindow", valid_591505
  var valid_591506 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_591506 = validateParameter(valid_591506, JString, required = false,
                                 default = nil)
  if valid_591506 != nil:
    section.add "PreferredMaintenanceWindow", valid_591506
  var valid_591507 = query.getOrDefault("Version")
  valid_591507 = validateParameter(valid_591507, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591507 != nil:
    section.add "Version", valid_591507
  var valid_591508 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_591508 = validateParameter(valid_591508, JString, required = false,
                                 default = nil)
  if valid_591508 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_591508
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_591509 = header.getOrDefault("X-Amz-Security-Token")
  valid_591509 = validateParameter(valid_591509, JString, required = false,
                                 default = nil)
  if valid_591509 != nil:
    section.add "X-Amz-Security-Token", valid_591509
  var valid_591510 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591510 = validateParameter(valid_591510, JString, required = false,
                                 default = nil)
  if valid_591510 != nil:
    section.add "X-Amz-SignedHeaders", valid_591510
  var valid_591511 = header.getOrDefault("X-Amz-Signature")
  valid_591511 = validateParameter(valid_591511, JString, required = false,
                                 default = nil)
  if valid_591511 != nil:
    section.add "X-Amz-Signature", valid_591511
  var valid_591512 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591512 = validateParameter(valid_591512, JString, required = false,
                                 default = nil)
  if valid_591512 != nil:
    section.add "X-Amz-Content-Sha256", valid_591512
  var valid_591513 = header.getOrDefault("X-Amz-Date")
  valid_591513 = validateParameter(valid_591513, JString, required = false,
                                 default = nil)
  if valid_591513 != nil:
    section.add "X-Amz-Date", valid_591513
  var valid_591514 = header.getOrDefault("X-Amz-Credential")
  valid_591514 = validateParameter(valid_591514, JString, required = false,
                                 default = nil)
  if valid_591514 != nil:
    section.add "X-Amz-Credential", valid_591514
  var valid_591515 = header.getOrDefault("X-Amz-Algorithm")
  valid_591515 = validateParameter(valid_591515, JString, required = false,
                                 default = nil)
  if valid_591515 != nil:
    section.add "X-Amz-Algorithm", valid_591515
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591516: Call_GetCreateDBCluster_591451; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_591516.validator(path, query, header, formData, body)
  let scheme = call_591516.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591516.url(scheme.get, call_591516.host, call_591516.base,
                         call_591516.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591516, url, valid)

proc call*(call_591517: Call_GetCreateDBCluster_591451; Engine: string;
          DBClusterIdentifier: string; GlobalClusterIdentifier: string = "";
          DatabaseName: string = ""; CopyTagsToSnapshot: bool = false;
          EnableHttpEndpoint: bool = false; KmsKeyId: string = "";
          PreSignedUrl: string = ""; EngineMode: string = "";
          MasterUsername: string = ""; BackupRetentionPeriod: int = 0;
          ScalingConfigurationMinCapacity: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBCluster"; VpcSecurityGroupIds: JsonNode = nil;
          StorageEncrypted: bool = false; DeletionProtection: bool = false;
          CharacterSetName: string = ""; Tags: JsonNode = nil; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          SourceRegion: string = ""; Port: int = 0;
          ReplicationSourceIdentifier: string = ""; MasterUserPassword: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: string (required)
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_591518 = newJObject()
  add(query_591518, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_591518, "DatabaseName", newJString(DatabaseName))
  add(query_591518, "Engine", newJString(Engine))
  add(query_591518, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_591518, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_591518, "KmsKeyId", newJString(KmsKeyId))
  add(query_591518, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_591518, "EngineMode", newJString(EngineMode))
  add(query_591518, "MasterUsername", newJString(MasterUsername))
  add(query_591518, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_591518, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  if EnableCloudwatchLogsExports != nil:
    query_591518.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_591518, "EngineVersion", newJString(EngineVersion))
  add(query_591518, "Action", newJString(Action))
  if VpcSecurityGroupIds != nil:
    query_591518.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_591518, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_591518, "DeletionProtection", newJBool(DeletionProtection))
  add(query_591518, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_591518.add "Tags", Tags
  add(query_591518, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_591518, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_591518, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_591518.add "AvailabilityZones", AvailabilityZones
  add(query_591518, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_591518, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_591518, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_591518, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_591518, "SourceRegion", newJString(SourceRegion))
  add(query_591518, "Port", newJInt(Port))
  add(query_591518, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_591518, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_591518, "OptionGroupName", newJString(OptionGroupName))
  add(query_591518, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_591518, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_591518, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_591518, "Version", newJString(Version))
  add(query_591518, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_591517.call(nil, query_591518, nil, nil, nil)

var getCreateDBCluster* = Call_GetCreateDBCluster_591451(
    name: "getCreateDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBCluster", validator: validate_GetCreateDBCluster_591452,
    base: "/", url: url_GetCreateDBCluster_591453,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterEndpoint_591590 = ref object of OpenApiRestCall_590348
proc url_PostCreateDBClusterEndpoint_591592(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBClusterEndpoint_591591(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591593 = query.getOrDefault("Action")
  valid_591593 = validateParameter(valid_591593, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_591593 != nil:
    section.add "Action", valid_591593
  var valid_591594 = query.getOrDefault("Version")
  valid_591594 = validateParameter(valid_591594, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591594 != nil:
    section.add "Version", valid_591594
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591595 = header.getOrDefault("X-Amz-Signature")
  valid_591595 = validateParameter(valid_591595, JString, required = false,
                                 default = nil)
  if valid_591595 != nil:
    section.add "X-Amz-Signature", valid_591595
  var valid_591596 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591596 = validateParameter(valid_591596, JString, required = false,
                                 default = nil)
  if valid_591596 != nil:
    section.add "X-Amz-Content-Sha256", valid_591596
  var valid_591597 = header.getOrDefault("X-Amz-Date")
  valid_591597 = validateParameter(valid_591597, JString, required = false,
                                 default = nil)
  if valid_591597 != nil:
    section.add "X-Amz-Date", valid_591597
  var valid_591598 = header.getOrDefault("X-Amz-Credential")
  valid_591598 = validateParameter(valid_591598, JString, required = false,
                                 default = nil)
  if valid_591598 != nil:
    section.add "X-Amz-Credential", valid_591598
  var valid_591599 = header.getOrDefault("X-Amz-Security-Token")
  valid_591599 = validateParameter(valid_591599, JString, required = false,
                                 default = nil)
  if valid_591599 != nil:
    section.add "X-Amz-Security-Token", valid_591599
  var valid_591600 = header.getOrDefault("X-Amz-Algorithm")
  valid_591600 = validateParameter(valid_591600, JString, required = false,
                                 default = nil)
  if valid_591600 != nil:
    section.add "X-Amz-Algorithm", valid_591600
  var valid_591601 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591601 = validateParameter(valid_591601, JString, required = false,
                                 default = nil)
  if valid_591601 != nil:
    section.add "X-Amz-SignedHeaders", valid_591601
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_591602 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_591602 = validateParameter(valid_591602, JString, required = true,
                                 default = nil)
  if valid_591602 != nil:
    section.add "DBClusterEndpointIdentifier", valid_591602
  var valid_591603 = formData.getOrDefault("StaticMembers")
  valid_591603 = validateParameter(valid_591603, JArray, required = false,
                                 default = nil)
  if valid_591603 != nil:
    section.add "StaticMembers", valid_591603
  var valid_591604 = formData.getOrDefault("EndpointType")
  valid_591604 = validateParameter(valid_591604, JString, required = true,
                                 default = nil)
  if valid_591604 != nil:
    section.add "EndpointType", valid_591604
  var valid_591605 = formData.getOrDefault("ExcludedMembers")
  valid_591605 = validateParameter(valid_591605, JArray, required = false,
                                 default = nil)
  if valid_591605 != nil:
    section.add "ExcludedMembers", valid_591605
  var valid_591606 = formData.getOrDefault("DBClusterIdentifier")
  valid_591606 = validateParameter(valid_591606, JString, required = true,
                                 default = nil)
  if valid_591606 != nil:
    section.add "DBClusterIdentifier", valid_591606
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591607: Call_PostCreateDBClusterEndpoint_591590; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_591607.validator(path, query, header, formData, body)
  let scheme = call_591607.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591607.url(scheme.get, call_591607.host, call_591607.base,
                         call_591607.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591607, url, valid)

proc call*(call_591608: Call_PostCreateDBClusterEndpoint_591590;
          DBClusterEndpointIdentifier: string; EndpointType: string;
          DBClusterIdentifier: string; StaticMembers: JsonNode = nil;
          Action: string = "CreateDBClusterEndpoint";
          ExcludedMembers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: string (required)
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  var query_591609 = newJObject()
  var formData_591610 = newJObject()
  add(formData_591610, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_591610.add "StaticMembers", StaticMembers
  add(query_591609, "Action", newJString(Action))
  add(formData_591610, "EndpointType", newJString(EndpointType))
  if ExcludedMembers != nil:
    formData_591610.add "ExcludedMembers", ExcludedMembers
  add(query_591609, "Version", newJString(Version))
  add(formData_591610, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_591608.call(nil, query_591609, nil, formData_591610, nil)

var postCreateDBClusterEndpoint* = Call_PostCreateDBClusterEndpoint_591590(
    name: "postCreateDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_PostCreateDBClusterEndpoint_591591, base: "/",
    url: url_PostCreateDBClusterEndpoint_591592,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterEndpoint_591570 = ref object of OpenApiRestCall_590348
proc url_GetCreateDBClusterEndpoint_591572(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBClusterEndpoint_591571(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_591573 = query.getOrDefault("ExcludedMembers")
  valid_591573 = validateParameter(valid_591573, JArray, required = false,
                                 default = nil)
  if valid_591573 != nil:
    section.add "ExcludedMembers", valid_591573
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_591574 = query.getOrDefault("DBClusterIdentifier")
  valid_591574 = validateParameter(valid_591574, JString, required = true,
                                 default = nil)
  if valid_591574 != nil:
    section.add "DBClusterIdentifier", valid_591574
  var valid_591575 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_591575 = validateParameter(valid_591575, JString, required = true,
                                 default = nil)
  if valid_591575 != nil:
    section.add "DBClusterEndpointIdentifier", valid_591575
  var valid_591576 = query.getOrDefault("StaticMembers")
  valid_591576 = validateParameter(valid_591576, JArray, required = false,
                                 default = nil)
  if valid_591576 != nil:
    section.add "StaticMembers", valid_591576
  var valid_591577 = query.getOrDefault("EndpointType")
  valid_591577 = validateParameter(valid_591577, JString, required = true,
                                 default = nil)
  if valid_591577 != nil:
    section.add "EndpointType", valid_591577
  var valid_591578 = query.getOrDefault("Action")
  valid_591578 = validateParameter(valid_591578, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_591578 != nil:
    section.add "Action", valid_591578
  var valid_591579 = query.getOrDefault("Version")
  valid_591579 = validateParameter(valid_591579, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591579 != nil:
    section.add "Version", valid_591579
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591580 = header.getOrDefault("X-Amz-Signature")
  valid_591580 = validateParameter(valid_591580, JString, required = false,
                                 default = nil)
  if valid_591580 != nil:
    section.add "X-Amz-Signature", valid_591580
  var valid_591581 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591581 = validateParameter(valid_591581, JString, required = false,
                                 default = nil)
  if valid_591581 != nil:
    section.add "X-Amz-Content-Sha256", valid_591581
  var valid_591582 = header.getOrDefault("X-Amz-Date")
  valid_591582 = validateParameter(valid_591582, JString, required = false,
                                 default = nil)
  if valid_591582 != nil:
    section.add "X-Amz-Date", valid_591582
  var valid_591583 = header.getOrDefault("X-Amz-Credential")
  valid_591583 = validateParameter(valid_591583, JString, required = false,
                                 default = nil)
  if valid_591583 != nil:
    section.add "X-Amz-Credential", valid_591583
  var valid_591584 = header.getOrDefault("X-Amz-Security-Token")
  valid_591584 = validateParameter(valid_591584, JString, required = false,
                                 default = nil)
  if valid_591584 != nil:
    section.add "X-Amz-Security-Token", valid_591584
  var valid_591585 = header.getOrDefault("X-Amz-Algorithm")
  valid_591585 = validateParameter(valid_591585, JString, required = false,
                                 default = nil)
  if valid_591585 != nil:
    section.add "X-Amz-Algorithm", valid_591585
  var valid_591586 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591586 = validateParameter(valid_591586, JString, required = false,
                                 default = nil)
  if valid_591586 != nil:
    section.add "X-Amz-SignedHeaders", valid_591586
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591587: Call_GetCreateDBClusterEndpoint_591570; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_591587.validator(path, query, header, formData, body)
  let scheme = call_591587.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591587.url(scheme.get, call_591587.host, call_591587.base,
                         call_591587.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591587, url, valid)

proc call*(call_591588: Call_GetCreateDBClusterEndpoint_591570;
          DBClusterIdentifier: string; DBClusterEndpointIdentifier: string;
          EndpointType: string; ExcludedMembers: JsonNode = nil;
          StaticMembers: JsonNode = nil; Action: string = "CreateDBClusterEndpoint";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591589 = newJObject()
  if ExcludedMembers != nil:
    query_591589.add "ExcludedMembers", ExcludedMembers
  add(query_591589, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_591589, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    query_591589.add "StaticMembers", StaticMembers
  add(query_591589, "EndpointType", newJString(EndpointType))
  add(query_591589, "Action", newJString(Action))
  add(query_591589, "Version", newJString(Version))
  result = call_591588.call(nil, query_591589, nil, nil, nil)

var getCreateDBClusterEndpoint* = Call_GetCreateDBClusterEndpoint_591570(
    name: "getCreateDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_GetCreateDBClusterEndpoint_591571, base: "/",
    url: url_GetCreateDBClusterEndpoint_591572,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterParameterGroup_591630 = ref object of OpenApiRestCall_590348
proc url_PostCreateDBClusterParameterGroup_591632(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBClusterParameterGroup_591631(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591633 = query.getOrDefault("Action")
  valid_591633 = validateParameter(valid_591633, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_591633 != nil:
    section.add "Action", valid_591633
  var valid_591634 = query.getOrDefault("Version")
  valid_591634 = validateParameter(valid_591634, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591634 != nil:
    section.add "Version", valid_591634
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591635 = header.getOrDefault("X-Amz-Signature")
  valid_591635 = validateParameter(valid_591635, JString, required = false,
                                 default = nil)
  if valid_591635 != nil:
    section.add "X-Amz-Signature", valid_591635
  var valid_591636 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591636 = validateParameter(valid_591636, JString, required = false,
                                 default = nil)
  if valid_591636 != nil:
    section.add "X-Amz-Content-Sha256", valid_591636
  var valid_591637 = header.getOrDefault("X-Amz-Date")
  valid_591637 = validateParameter(valid_591637, JString, required = false,
                                 default = nil)
  if valid_591637 != nil:
    section.add "X-Amz-Date", valid_591637
  var valid_591638 = header.getOrDefault("X-Amz-Credential")
  valid_591638 = validateParameter(valid_591638, JString, required = false,
                                 default = nil)
  if valid_591638 != nil:
    section.add "X-Amz-Credential", valid_591638
  var valid_591639 = header.getOrDefault("X-Amz-Security-Token")
  valid_591639 = validateParameter(valid_591639, JString, required = false,
                                 default = nil)
  if valid_591639 != nil:
    section.add "X-Amz-Security-Token", valid_591639
  var valid_591640 = header.getOrDefault("X-Amz-Algorithm")
  valid_591640 = validateParameter(valid_591640, JString, required = false,
                                 default = nil)
  if valid_591640 != nil:
    section.add "X-Amz-Algorithm", valid_591640
  var valid_591641 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591641 = validateParameter(valid_591641, JString, required = false,
                                 default = nil)
  if valid_591641 != nil:
    section.add "X-Amz-SignedHeaders", valid_591641
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_591642 = formData.getOrDefault("Description")
  valid_591642 = validateParameter(valid_591642, JString, required = true,
                                 default = nil)
  if valid_591642 != nil:
    section.add "Description", valid_591642
  var valid_591643 = formData.getOrDefault("Tags")
  valid_591643 = validateParameter(valid_591643, JArray, required = false,
                                 default = nil)
  if valid_591643 != nil:
    section.add "Tags", valid_591643
  var valid_591644 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_591644 = validateParameter(valid_591644, JString, required = true,
                                 default = nil)
  if valid_591644 != nil:
    section.add "DBClusterParameterGroupName", valid_591644
  var valid_591645 = formData.getOrDefault("DBParameterGroupFamily")
  valid_591645 = validateParameter(valid_591645, JString, required = true,
                                 default = nil)
  if valid_591645 != nil:
    section.add "DBParameterGroupFamily", valid_591645
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591646: Call_PostCreateDBClusterParameterGroup_591630;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_591646.validator(path, query, header, formData, body)
  let scheme = call_591646.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591646.url(scheme.get, call_591646.host, call_591646.base,
                         call_591646.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591646, url, valid)

proc call*(call_591647: Call_PostCreateDBClusterParameterGroup_591630;
          Description: string; DBClusterParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  var query_591648 = newJObject()
  var formData_591649 = newJObject()
  add(formData_591649, "Description", newJString(Description))
  add(query_591648, "Action", newJString(Action))
  if Tags != nil:
    formData_591649.add "Tags", Tags
  add(formData_591649, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_591648, "Version", newJString(Version))
  add(formData_591649, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_591647.call(nil, query_591648, nil, formData_591649, nil)

var postCreateDBClusterParameterGroup* = Call_PostCreateDBClusterParameterGroup_591630(
    name: "postCreateDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_PostCreateDBClusterParameterGroup_591631, base: "/",
    url: url_PostCreateDBClusterParameterGroup_591632,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterParameterGroup_591611 = ref object of OpenApiRestCall_590348
proc url_GetCreateDBClusterParameterGroup_591613(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBClusterParameterGroup_591612(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_591614 = query.getOrDefault("DBParameterGroupFamily")
  valid_591614 = validateParameter(valid_591614, JString, required = true,
                                 default = nil)
  if valid_591614 != nil:
    section.add "DBParameterGroupFamily", valid_591614
  var valid_591615 = query.getOrDefault("Tags")
  valid_591615 = validateParameter(valid_591615, JArray, required = false,
                                 default = nil)
  if valid_591615 != nil:
    section.add "Tags", valid_591615
  var valid_591616 = query.getOrDefault("DBClusterParameterGroupName")
  valid_591616 = validateParameter(valid_591616, JString, required = true,
                                 default = nil)
  if valid_591616 != nil:
    section.add "DBClusterParameterGroupName", valid_591616
  var valid_591617 = query.getOrDefault("Action")
  valid_591617 = validateParameter(valid_591617, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_591617 != nil:
    section.add "Action", valid_591617
  var valid_591618 = query.getOrDefault("Description")
  valid_591618 = validateParameter(valid_591618, JString, required = true,
                                 default = nil)
  if valid_591618 != nil:
    section.add "Description", valid_591618
  var valid_591619 = query.getOrDefault("Version")
  valid_591619 = validateParameter(valid_591619, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591619 != nil:
    section.add "Version", valid_591619
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591620 = header.getOrDefault("X-Amz-Signature")
  valid_591620 = validateParameter(valid_591620, JString, required = false,
                                 default = nil)
  if valid_591620 != nil:
    section.add "X-Amz-Signature", valid_591620
  var valid_591621 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591621 = validateParameter(valid_591621, JString, required = false,
                                 default = nil)
  if valid_591621 != nil:
    section.add "X-Amz-Content-Sha256", valid_591621
  var valid_591622 = header.getOrDefault("X-Amz-Date")
  valid_591622 = validateParameter(valid_591622, JString, required = false,
                                 default = nil)
  if valid_591622 != nil:
    section.add "X-Amz-Date", valid_591622
  var valid_591623 = header.getOrDefault("X-Amz-Credential")
  valid_591623 = validateParameter(valid_591623, JString, required = false,
                                 default = nil)
  if valid_591623 != nil:
    section.add "X-Amz-Credential", valid_591623
  var valid_591624 = header.getOrDefault("X-Amz-Security-Token")
  valid_591624 = validateParameter(valid_591624, JString, required = false,
                                 default = nil)
  if valid_591624 != nil:
    section.add "X-Amz-Security-Token", valid_591624
  var valid_591625 = header.getOrDefault("X-Amz-Algorithm")
  valid_591625 = validateParameter(valid_591625, JString, required = false,
                                 default = nil)
  if valid_591625 != nil:
    section.add "X-Amz-Algorithm", valid_591625
  var valid_591626 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591626 = validateParameter(valid_591626, JString, required = false,
                                 default = nil)
  if valid_591626 != nil:
    section.add "X-Amz-SignedHeaders", valid_591626
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591627: Call_GetCreateDBClusterParameterGroup_591611;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_591627.validator(path, query, header, formData, body)
  let scheme = call_591627.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591627.url(scheme.get, call_591627.host, call_591627.base,
                         call_591627.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591627, url, valid)

proc call*(call_591628: Call_GetCreateDBClusterParameterGroup_591611;
          DBParameterGroupFamily: string; DBClusterParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: string (required)
  var query_591629 = newJObject()
  add(query_591629, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_591629.add "Tags", Tags
  add(query_591629, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_591629, "Action", newJString(Action))
  add(query_591629, "Description", newJString(Description))
  add(query_591629, "Version", newJString(Version))
  result = call_591628.call(nil, query_591629, nil, nil, nil)

var getCreateDBClusterParameterGroup* = Call_GetCreateDBClusterParameterGroup_591611(
    name: "getCreateDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_GetCreateDBClusterParameterGroup_591612, base: "/",
    url: url_GetCreateDBClusterParameterGroup_591613,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterSnapshot_591668 = ref object of OpenApiRestCall_590348
proc url_PostCreateDBClusterSnapshot_591670(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBClusterSnapshot_591669(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591671 = query.getOrDefault("Action")
  valid_591671 = validateParameter(valid_591671, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_591671 != nil:
    section.add "Action", valid_591671
  var valid_591672 = query.getOrDefault("Version")
  valid_591672 = validateParameter(valid_591672, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591672 != nil:
    section.add "Version", valid_591672
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591673 = header.getOrDefault("X-Amz-Signature")
  valid_591673 = validateParameter(valid_591673, JString, required = false,
                                 default = nil)
  if valid_591673 != nil:
    section.add "X-Amz-Signature", valid_591673
  var valid_591674 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591674 = validateParameter(valid_591674, JString, required = false,
                                 default = nil)
  if valid_591674 != nil:
    section.add "X-Amz-Content-Sha256", valid_591674
  var valid_591675 = header.getOrDefault("X-Amz-Date")
  valid_591675 = validateParameter(valid_591675, JString, required = false,
                                 default = nil)
  if valid_591675 != nil:
    section.add "X-Amz-Date", valid_591675
  var valid_591676 = header.getOrDefault("X-Amz-Credential")
  valid_591676 = validateParameter(valid_591676, JString, required = false,
                                 default = nil)
  if valid_591676 != nil:
    section.add "X-Amz-Credential", valid_591676
  var valid_591677 = header.getOrDefault("X-Amz-Security-Token")
  valid_591677 = validateParameter(valid_591677, JString, required = false,
                                 default = nil)
  if valid_591677 != nil:
    section.add "X-Amz-Security-Token", valid_591677
  var valid_591678 = header.getOrDefault("X-Amz-Algorithm")
  valid_591678 = validateParameter(valid_591678, JString, required = false,
                                 default = nil)
  if valid_591678 != nil:
    section.add "X-Amz-Algorithm", valid_591678
  var valid_591679 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591679 = validateParameter(valid_591679, JString, required = false,
                                 default = nil)
  if valid_591679 != nil:
    section.add "X-Amz-SignedHeaders", valid_591679
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_591680 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_591680 = validateParameter(valid_591680, JString, required = true,
                                 default = nil)
  if valid_591680 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_591680
  var valid_591681 = formData.getOrDefault("Tags")
  valid_591681 = validateParameter(valid_591681, JArray, required = false,
                                 default = nil)
  if valid_591681 != nil:
    section.add "Tags", valid_591681
  var valid_591682 = formData.getOrDefault("DBClusterIdentifier")
  valid_591682 = validateParameter(valid_591682, JString, required = true,
                                 default = nil)
  if valid_591682 != nil:
    section.add "DBClusterIdentifier", valid_591682
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591683: Call_PostCreateDBClusterSnapshot_591668; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_591683.validator(path, query, header, formData, body)
  let scheme = call_591683.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591683.url(scheme.get, call_591683.host, call_591683.base,
                         call_591683.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591683, url, valid)

proc call*(call_591684: Call_PostCreateDBClusterSnapshot_591668;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Action: string = "CreateDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  var query_591685 = newJObject()
  var formData_591686 = newJObject()
  add(formData_591686, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_591685, "Action", newJString(Action))
  if Tags != nil:
    formData_591686.add "Tags", Tags
  add(query_591685, "Version", newJString(Version))
  add(formData_591686, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_591684.call(nil, query_591685, nil, formData_591686, nil)

var postCreateDBClusterSnapshot* = Call_PostCreateDBClusterSnapshot_591668(
    name: "postCreateDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_PostCreateDBClusterSnapshot_591669, base: "/",
    url: url_PostCreateDBClusterSnapshot_591670,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterSnapshot_591650 = ref object of OpenApiRestCall_590348
proc url_GetCreateDBClusterSnapshot_591652(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBClusterSnapshot_591651(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_591653 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_591653 = validateParameter(valid_591653, JString, required = true,
                                 default = nil)
  if valid_591653 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_591653
  var valid_591654 = query.getOrDefault("Tags")
  valid_591654 = validateParameter(valid_591654, JArray, required = false,
                                 default = nil)
  if valid_591654 != nil:
    section.add "Tags", valid_591654
  var valid_591655 = query.getOrDefault("DBClusterIdentifier")
  valid_591655 = validateParameter(valid_591655, JString, required = true,
                                 default = nil)
  if valid_591655 != nil:
    section.add "DBClusterIdentifier", valid_591655
  var valid_591656 = query.getOrDefault("Action")
  valid_591656 = validateParameter(valid_591656, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_591656 != nil:
    section.add "Action", valid_591656
  var valid_591657 = query.getOrDefault("Version")
  valid_591657 = validateParameter(valid_591657, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591657 != nil:
    section.add "Version", valid_591657
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591658 = header.getOrDefault("X-Amz-Signature")
  valid_591658 = validateParameter(valid_591658, JString, required = false,
                                 default = nil)
  if valid_591658 != nil:
    section.add "X-Amz-Signature", valid_591658
  var valid_591659 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591659 = validateParameter(valid_591659, JString, required = false,
                                 default = nil)
  if valid_591659 != nil:
    section.add "X-Amz-Content-Sha256", valid_591659
  var valid_591660 = header.getOrDefault("X-Amz-Date")
  valid_591660 = validateParameter(valid_591660, JString, required = false,
                                 default = nil)
  if valid_591660 != nil:
    section.add "X-Amz-Date", valid_591660
  var valid_591661 = header.getOrDefault("X-Amz-Credential")
  valid_591661 = validateParameter(valid_591661, JString, required = false,
                                 default = nil)
  if valid_591661 != nil:
    section.add "X-Amz-Credential", valid_591661
  var valid_591662 = header.getOrDefault("X-Amz-Security-Token")
  valid_591662 = validateParameter(valid_591662, JString, required = false,
                                 default = nil)
  if valid_591662 != nil:
    section.add "X-Amz-Security-Token", valid_591662
  var valid_591663 = header.getOrDefault("X-Amz-Algorithm")
  valid_591663 = validateParameter(valid_591663, JString, required = false,
                                 default = nil)
  if valid_591663 != nil:
    section.add "X-Amz-Algorithm", valid_591663
  var valid_591664 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591664 = validateParameter(valid_591664, JString, required = false,
                                 default = nil)
  if valid_591664 != nil:
    section.add "X-Amz-SignedHeaders", valid_591664
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591665: Call_GetCreateDBClusterSnapshot_591650; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_591665.validator(path, query, header, formData, body)
  let scheme = call_591665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591665.url(scheme.get, call_591665.host, call_591665.base,
                         call_591665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591665, url, valid)

proc call*(call_591666: Call_GetCreateDBClusterSnapshot_591650;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591667 = newJObject()
  add(query_591667, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    query_591667.add "Tags", Tags
  add(query_591667, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_591667, "Action", newJString(Action))
  add(query_591667, "Version", newJString(Version))
  result = call_591666.call(nil, query_591667, nil, nil, nil)

var getCreateDBClusterSnapshot* = Call_GetCreateDBClusterSnapshot_591650(
    name: "getCreateDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_GetCreateDBClusterSnapshot_591651, base: "/",
    url: url_GetCreateDBClusterSnapshot_591652,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstance_591748 = ref object of OpenApiRestCall_590348
proc url_PostCreateDBInstance_591750(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBInstance_591749(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591751 = query.getOrDefault("Action")
  valid_591751 = validateParameter(valid_591751, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_591751 != nil:
    section.add "Action", valid_591751
  var valid_591752 = query.getOrDefault("Version")
  valid_591752 = validateParameter(valid_591752, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591752 != nil:
    section.add "Version", valid_591752
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_591753 = header.getOrDefault("X-Amz-Security-Token")
  valid_591753 = validateParameter(valid_591753, JString, required = false,
                                 default = nil)
  if valid_591753 != nil:
    section.add "X-Amz-Security-Token", valid_591753
  var valid_591754 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591754 = validateParameter(valid_591754, JString, required = false,
                                 default = nil)
  if valid_591754 != nil:
    section.add "X-Amz-SignedHeaders", valid_591754
  var valid_591755 = header.getOrDefault("X-Amz-Signature")
  valid_591755 = validateParameter(valid_591755, JString, required = false,
                                 default = nil)
  if valid_591755 != nil:
    section.add "X-Amz-Signature", valid_591755
  var valid_591756 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591756 = validateParameter(valid_591756, JString, required = false,
                                 default = nil)
  if valid_591756 != nil:
    section.add "X-Amz-Content-Sha256", valid_591756
  var valid_591757 = header.getOrDefault("X-Amz-Date")
  valid_591757 = validateParameter(valid_591757, JString, required = false,
                                 default = nil)
  if valid_591757 != nil:
    section.add "X-Amz-Date", valid_591757
  var valid_591758 = header.getOrDefault("X-Amz-Credential")
  valid_591758 = validateParameter(valid_591758, JString, required = false,
                                 default = nil)
  if valid_591758 != nil:
    section.add "X-Amz-Credential", valid_591758
  var valid_591759 = header.getOrDefault("X-Amz-Algorithm")
  valid_591759 = validateParameter(valid_591759, JString, required = false,
                                 default = nil)
  if valid_591759 != nil:
    section.add "X-Amz-Algorithm", valid_591759
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: Must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> is not specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it is not encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  section = newJObject()
  var valid_591760 = formData.getOrDefault("PromotionTier")
  valid_591760 = validateParameter(valid_591760, JInt, required = false, default = nil)
  if valid_591760 != nil:
    section.add "PromotionTier", valid_591760
  var valid_591761 = formData.getOrDefault("Port")
  valid_591761 = validateParameter(valid_591761, JInt, required = false, default = nil)
  if valid_591761 != nil:
    section.add "Port", valid_591761
  var valid_591762 = formData.getOrDefault("MultiAZ")
  valid_591762 = validateParameter(valid_591762, JBool, required = false, default = nil)
  if valid_591762 != nil:
    section.add "MultiAZ", valid_591762
  var valid_591763 = formData.getOrDefault("MasterUsername")
  valid_591763 = validateParameter(valid_591763, JString, required = false,
                                 default = nil)
  if valid_591763 != nil:
    section.add "MasterUsername", valid_591763
  var valid_591764 = formData.getOrDefault("MonitoringRoleArn")
  valid_591764 = validateParameter(valid_591764, JString, required = false,
                                 default = nil)
  if valid_591764 != nil:
    section.add "MonitoringRoleArn", valid_591764
  var valid_591765 = formData.getOrDefault("MonitoringInterval")
  valid_591765 = validateParameter(valid_591765, JInt, required = false, default = nil)
  if valid_591765 != nil:
    section.add "MonitoringInterval", valid_591765
  var valid_591766 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_591766 = validateParameter(valid_591766, JArray, required = false,
                                 default = nil)
  if valid_591766 != nil:
    section.add "VpcSecurityGroupIds", valid_591766
  var valid_591767 = formData.getOrDefault("AvailabilityZone")
  valid_591767 = validateParameter(valid_591767, JString, required = false,
                                 default = nil)
  if valid_591767 != nil:
    section.add "AvailabilityZone", valid_591767
  var valid_591768 = formData.getOrDefault("EnablePerformanceInsights")
  valid_591768 = validateParameter(valid_591768, JBool, required = false, default = nil)
  if valid_591768 != nil:
    section.add "EnablePerformanceInsights", valid_591768
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_591769 = formData.getOrDefault("DBInstanceIdentifier")
  valid_591769 = validateParameter(valid_591769, JString, required = true,
                                 default = nil)
  if valid_591769 != nil:
    section.add "DBInstanceIdentifier", valid_591769
  var valid_591770 = formData.getOrDefault("TdeCredentialArn")
  valid_591770 = validateParameter(valid_591770, JString, required = false,
                                 default = nil)
  if valid_591770 != nil:
    section.add "TdeCredentialArn", valid_591770
  var valid_591771 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_591771 = validateParameter(valid_591771, JArray, required = false,
                                 default = nil)
  if valid_591771 != nil:
    section.add "EnableCloudwatchLogsExports", valid_591771
  var valid_591772 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_591772 = validateParameter(valid_591772, JInt, required = false, default = nil)
  if valid_591772 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_591772
  var valid_591773 = formData.getOrDefault("DBSubnetGroupName")
  valid_591773 = validateParameter(valid_591773, JString, required = false,
                                 default = nil)
  if valid_591773 != nil:
    section.add "DBSubnetGroupName", valid_591773
  var valid_591774 = formData.getOrDefault("CharacterSetName")
  valid_591774 = validateParameter(valid_591774, JString, required = false,
                                 default = nil)
  if valid_591774 != nil:
    section.add "CharacterSetName", valid_591774
  var valid_591775 = formData.getOrDefault("StorageType")
  valid_591775 = validateParameter(valid_591775, JString, required = false,
                                 default = nil)
  if valid_591775 != nil:
    section.add "StorageType", valid_591775
  var valid_591776 = formData.getOrDefault("MaxAllocatedStorage")
  valid_591776 = validateParameter(valid_591776, JInt, required = false, default = nil)
  if valid_591776 != nil:
    section.add "MaxAllocatedStorage", valid_591776
  var valid_591777 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_591777 = validateParameter(valid_591777, JBool, required = false, default = nil)
  if valid_591777 != nil:
    section.add "CopyTagsToSnapshot", valid_591777
  var valid_591778 = formData.getOrDefault("DeletionProtection")
  valid_591778 = validateParameter(valid_591778, JBool, required = false, default = nil)
  if valid_591778 != nil:
    section.add "DeletionProtection", valid_591778
  var valid_591779 = formData.getOrDefault("ProcessorFeatures")
  valid_591779 = validateParameter(valid_591779, JArray, required = false,
                                 default = nil)
  if valid_591779 != nil:
    section.add "ProcessorFeatures", valid_591779
  var valid_591780 = formData.getOrDefault("AllocatedStorage")
  valid_591780 = validateParameter(valid_591780, JInt, required = false, default = nil)
  if valid_591780 != nil:
    section.add "AllocatedStorage", valid_591780
  var valid_591781 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_591781 = validateParameter(valid_591781, JString, required = false,
                                 default = nil)
  if valid_591781 != nil:
    section.add "PreferredMaintenanceWindow", valid_591781
  var valid_591782 = formData.getOrDefault("DBInstanceClass")
  valid_591782 = validateParameter(valid_591782, JString, required = true,
                                 default = nil)
  if valid_591782 != nil:
    section.add "DBInstanceClass", valid_591782
  var valid_591783 = formData.getOrDefault("PreferredBackupWindow")
  valid_591783 = validateParameter(valid_591783, JString, required = false,
                                 default = nil)
  if valid_591783 != nil:
    section.add "PreferredBackupWindow", valid_591783
  var valid_591784 = formData.getOrDefault("MasterUserPassword")
  valid_591784 = validateParameter(valid_591784, JString, required = false,
                                 default = nil)
  if valid_591784 != nil:
    section.add "MasterUserPassword", valid_591784
  var valid_591785 = formData.getOrDefault("Domain")
  valid_591785 = validateParameter(valid_591785, JString, required = false,
                                 default = nil)
  if valid_591785 != nil:
    section.add "Domain", valid_591785
  var valid_591786 = formData.getOrDefault("Timezone")
  valid_591786 = validateParameter(valid_591786, JString, required = false,
                                 default = nil)
  if valid_591786 != nil:
    section.add "Timezone", valid_591786
  var valid_591787 = formData.getOrDefault("DBParameterGroupName")
  valid_591787 = validateParameter(valid_591787, JString, required = false,
                                 default = nil)
  if valid_591787 != nil:
    section.add "DBParameterGroupName", valid_591787
  var valid_591788 = formData.getOrDefault("EngineVersion")
  valid_591788 = validateParameter(valid_591788, JString, required = false,
                                 default = nil)
  if valid_591788 != nil:
    section.add "EngineVersion", valid_591788
  var valid_591789 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_591789 = validateParameter(valid_591789, JBool, required = false, default = nil)
  if valid_591789 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_591789
  var valid_591790 = formData.getOrDefault("BackupRetentionPeriod")
  valid_591790 = validateParameter(valid_591790, JInt, required = false, default = nil)
  if valid_591790 != nil:
    section.add "BackupRetentionPeriod", valid_591790
  var valid_591791 = formData.getOrDefault("KmsKeyId")
  valid_591791 = validateParameter(valid_591791, JString, required = false,
                                 default = nil)
  if valid_591791 != nil:
    section.add "KmsKeyId", valid_591791
  var valid_591792 = formData.getOrDefault("Engine")
  valid_591792 = validateParameter(valid_591792, JString, required = true,
                                 default = nil)
  if valid_591792 != nil:
    section.add "Engine", valid_591792
  var valid_591793 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_591793 = validateParameter(valid_591793, JBool, required = false, default = nil)
  if valid_591793 != nil:
    section.add "AutoMinorVersionUpgrade", valid_591793
  var valid_591794 = formData.getOrDefault("TdeCredentialPassword")
  valid_591794 = validateParameter(valid_591794, JString, required = false,
                                 default = nil)
  if valid_591794 != nil:
    section.add "TdeCredentialPassword", valid_591794
  var valid_591795 = formData.getOrDefault("DBName")
  valid_591795 = validateParameter(valid_591795, JString, required = false,
                                 default = nil)
  if valid_591795 != nil:
    section.add "DBName", valid_591795
  var valid_591796 = formData.getOrDefault("Iops")
  valid_591796 = validateParameter(valid_591796, JInt, required = false, default = nil)
  if valid_591796 != nil:
    section.add "Iops", valid_591796
  var valid_591797 = formData.getOrDefault("PubliclyAccessible")
  valid_591797 = validateParameter(valid_591797, JBool, required = false, default = nil)
  if valid_591797 != nil:
    section.add "PubliclyAccessible", valid_591797
  var valid_591798 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_591798 = validateParameter(valid_591798, JString, required = false,
                                 default = nil)
  if valid_591798 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_591798
  var valid_591799 = formData.getOrDefault("LicenseModel")
  valid_591799 = validateParameter(valid_591799, JString, required = false,
                                 default = nil)
  if valid_591799 != nil:
    section.add "LicenseModel", valid_591799
  var valid_591800 = formData.getOrDefault("Tags")
  valid_591800 = validateParameter(valid_591800, JArray, required = false,
                                 default = nil)
  if valid_591800 != nil:
    section.add "Tags", valid_591800
  var valid_591801 = formData.getOrDefault("DomainIAMRoleName")
  valid_591801 = validateParameter(valid_591801, JString, required = false,
                                 default = nil)
  if valid_591801 != nil:
    section.add "DomainIAMRoleName", valid_591801
  var valid_591802 = formData.getOrDefault("OptionGroupName")
  valid_591802 = validateParameter(valid_591802, JString, required = false,
                                 default = nil)
  if valid_591802 != nil:
    section.add "OptionGroupName", valid_591802
  var valid_591803 = formData.getOrDefault("DBSecurityGroups")
  valid_591803 = validateParameter(valid_591803, JArray, required = false,
                                 default = nil)
  if valid_591803 != nil:
    section.add "DBSecurityGroups", valid_591803
  var valid_591804 = formData.getOrDefault("StorageEncrypted")
  valid_591804 = validateParameter(valid_591804, JBool, required = false, default = nil)
  if valid_591804 != nil:
    section.add "StorageEncrypted", valid_591804
  var valid_591805 = formData.getOrDefault("DBClusterIdentifier")
  valid_591805 = validateParameter(valid_591805, JString, required = false,
                                 default = nil)
  if valid_591805 != nil:
    section.add "DBClusterIdentifier", valid_591805
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591806: Call_PostCreateDBInstance_591748; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_591806.validator(path, query, header, formData, body)
  let scheme = call_591806.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591806.url(scheme.get, call_591806.host, call_591806.base,
                         call_591806.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591806, url, valid)

proc call*(call_591807: Call_PostCreateDBInstance_591748;
          DBInstanceIdentifier: string; DBInstanceClass: string; Engine: string;
          PromotionTier: int = 0; Port: int = 0; MultiAZ: bool = false;
          MasterUsername: string = ""; MonitoringRoleArn: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = ""; EnablePerformanceInsights: bool = false;
          TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBInstance";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; CharacterSetName: string = "";
          StorageType: string = ""; MaxAllocatedStorage: int = 0;
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          ProcessorFeatures: JsonNode = nil; AllocatedStorage: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          Domain: string = ""; Timezone: string = ""; DBParameterGroupName: string = "";
          EngineVersion: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          DBName: string = ""; Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; StorageEncrypted: bool = false;
          DBClusterIdentifier: string = ""): Recallable =
  ## postCreateDBInstance
  ## Creates a new DB instance.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: Must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> is not specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it is not encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  var query_591808 = newJObject()
  var formData_591809 = newJObject()
  add(formData_591809, "PromotionTier", newJInt(PromotionTier))
  add(formData_591809, "Port", newJInt(Port))
  add(formData_591809, "MultiAZ", newJBool(MultiAZ))
  add(formData_591809, "MasterUsername", newJString(MasterUsername))
  add(formData_591809, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_591809, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_591809.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_591809, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_591809, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_591809, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_591809, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_591809.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_591808, "Action", newJString(Action))
  add(formData_591809, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_591809, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_591809, "CharacterSetName", newJString(CharacterSetName))
  add(formData_591809, "StorageType", newJString(StorageType))
  add(formData_591809, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(formData_591809, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_591809, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_591809.add "ProcessorFeatures", ProcessorFeatures
  add(formData_591809, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_591809, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_591809, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_591809, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_591809, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_591809, "Domain", newJString(Domain))
  add(formData_591809, "Timezone", newJString(Timezone))
  add(formData_591809, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_591809, "EngineVersion", newJString(EngineVersion))
  add(formData_591809, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_591809, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_591809, "KmsKeyId", newJString(KmsKeyId))
  add(formData_591809, "Engine", newJString(Engine))
  add(formData_591809, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_591809, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_591809, "DBName", newJString(DBName))
  add(formData_591809, "Iops", newJInt(Iops))
  add(formData_591809, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_591809, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_591809, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_591809.add "Tags", Tags
  add(formData_591809, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_591809, "OptionGroupName", newJString(OptionGroupName))
  add(query_591808, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_591809.add "DBSecurityGroups", DBSecurityGroups
  add(formData_591809, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_591809, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_591807.call(nil, query_591808, nil, formData_591809, nil)

var postCreateDBInstance* = Call_PostCreateDBInstance_591748(
    name: "postCreateDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_PostCreateDBInstance_591749, base: "/",
    url: url_PostCreateDBInstance_591750, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstance_591687 = ref object of OpenApiRestCall_590348
proc url_GetCreateDBInstance_591689(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBInstance_591688(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> is not specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it is not encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: Must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   Version: JString (required)
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_591690 = query.getOrDefault("Engine")
  valid_591690 = validateParameter(valid_591690, JString, required = true,
                                 default = nil)
  if valid_591690 != nil:
    section.add "Engine", valid_591690
  var valid_591691 = query.getOrDefault("CopyTagsToSnapshot")
  valid_591691 = validateParameter(valid_591691, JBool, required = false, default = nil)
  if valid_591691 != nil:
    section.add "CopyTagsToSnapshot", valid_591691
  var valid_591692 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_591692 = validateParameter(valid_591692, JInt, required = false, default = nil)
  if valid_591692 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_591692
  var valid_591693 = query.getOrDefault("MonitoringInterval")
  valid_591693 = validateParameter(valid_591693, JInt, required = false, default = nil)
  if valid_591693 != nil:
    section.add "MonitoringInterval", valid_591693
  var valid_591694 = query.getOrDefault("KmsKeyId")
  valid_591694 = validateParameter(valid_591694, JString, required = false,
                                 default = nil)
  if valid_591694 != nil:
    section.add "KmsKeyId", valid_591694
  var valid_591695 = query.getOrDefault("MonitoringRoleArn")
  valid_591695 = validateParameter(valid_591695, JString, required = false,
                                 default = nil)
  if valid_591695 != nil:
    section.add "MonitoringRoleArn", valid_591695
  var valid_591696 = query.getOrDefault("ProcessorFeatures")
  valid_591696 = validateParameter(valid_591696, JArray, required = false,
                                 default = nil)
  if valid_591696 != nil:
    section.add "ProcessorFeatures", valid_591696
  var valid_591697 = query.getOrDefault("MasterUsername")
  valid_591697 = validateParameter(valid_591697, JString, required = false,
                                 default = nil)
  if valid_591697 != nil:
    section.add "MasterUsername", valid_591697
  var valid_591698 = query.getOrDefault("BackupRetentionPeriod")
  valid_591698 = validateParameter(valid_591698, JInt, required = false, default = nil)
  if valid_591698 != nil:
    section.add "BackupRetentionPeriod", valid_591698
  var valid_591699 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_591699 = validateParameter(valid_591699, JArray, required = false,
                                 default = nil)
  if valid_591699 != nil:
    section.add "EnableCloudwatchLogsExports", valid_591699
  var valid_591700 = query.getOrDefault("EngineVersion")
  valid_591700 = validateParameter(valid_591700, JString, required = false,
                                 default = nil)
  if valid_591700 != nil:
    section.add "EngineVersion", valid_591700
  var valid_591701 = query.getOrDefault("Action")
  valid_591701 = validateParameter(valid_591701, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_591701 != nil:
    section.add "Action", valid_591701
  var valid_591702 = query.getOrDefault("Domain")
  valid_591702 = validateParameter(valid_591702, JString, required = false,
                                 default = nil)
  if valid_591702 != nil:
    section.add "Domain", valid_591702
  var valid_591703 = query.getOrDefault("VpcSecurityGroupIds")
  valid_591703 = validateParameter(valid_591703, JArray, required = false,
                                 default = nil)
  if valid_591703 != nil:
    section.add "VpcSecurityGroupIds", valid_591703
  var valid_591704 = query.getOrDefault("AllocatedStorage")
  valid_591704 = validateParameter(valid_591704, JInt, required = false, default = nil)
  if valid_591704 != nil:
    section.add "AllocatedStorage", valid_591704
  var valid_591705 = query.getOrDefault("EnablePerformanceInsights")
  valid_591705 = validateParameter(valid_591705, JBool, required = false, default = nil)
  if valid_591705 != nil:
    section.add "EnablePerformanceInsights", valid_591705
  var valid_591706 = query.getOrDefault("PubliclyAccessible")
  valid_591706 = validateParameter(valid_591706, JBool, required = false, default = nil)
  if valid_591706 != nil:
    section.add "PubliclyAccessible", valid_591706
  var valid_591707 = query.getOrDefault("DBName")
  valid_591707 = validateParameter(valid_591707, JString, required = false,
                                 default = nil)
  if valid_591707 != nil:
    section.add "DBName", valid_591707
  var valid_591708 = query.getOrDefault("TdeCredentialPassword")
  valid_591708 = validateParameter(valid_591708, JString, required = false,
                                 default = nil)
  if valid_591708 != nil:
    section.add "TdeCredentialPassword", valid_591708
  var valid_591709 = query.getOrDefault("StorageEncrypted")
  valid_591709 = validateParameter(valid_591709, JBool, required = false, default = nil)
  if valid_591709 != nil:
    section.add "StorageEncrypted", valid_591709
  var valid_591710 = query.getOrDefault("DBParameterGroupName")
  valid_591710 = validateParameter(valid_591710, JString, required = false,
                                 default = nil)
  if valid_591710 != nil:
    section.add "DBParameterGroupName", valid_591710
  var valid_591711 = query.getOrDefault("DeletionProtection")
  valid_591711 = validateParameter(valid_591711, JBool, required = false, default = nil)
  if valid_591711 != nil:
    section.add "DeletionProtection", valid_591711
  var valid_591712 = query.getOrDefault("CharacterSetName")
  valid_591712 = validateParameter(valid_591712, JString, required = false,
                                 default = nil)
  if valid_591712 != nil:
    section.add "CharacterSetName", valid_591712
  var valid_591713 = query.getOrDefault("Tags")
  valid_591713 = validateParameter(valid_591713, JArray, required = false,
                                 default = nil)
  if valid_591713 != nil:
    section.add "Tags", valid_591713
  var valid_591714 = query.getOrDefault("MaxAllocatedStorage")
  valid_591714 = validateParameter(valid_591714, JInt, required = false, default = nil)
  if valid_591714 != nil:
    section.add "MaxAllocatedStorage", valid_591714
  var valid_591715 = query.getOrDefault("DBClusterIdentifier")
  valid_591715 = validateParameter(valid_591715, JString, required = false,
                                 default = nil)
  if valid_591715 != nil:
    section.add "DBClusterIdentifier", valid_591715
  var valid_591716 = query.getOrDefault("LicenseModel")
  valid_591716 = validateParameter(valid_591716, JString, required = false,
                                 default = nil)
  if valid_591716 != nil:
    section.add "LicenseModel", valid_591716
  var valid_591717 = query.getOrDefault("DBInstanceIdentifier")
  valid_591717 = validateParameter(valid_591717, JString, required = true,
                                 default = nil)
  if valid_591717 != nil:
    section.add "DBInstanceIdentifier", valid_591717
  var valid_591718 = query.getOrDefault("TdeCredentialArn")
  valid_591718 = validateParameter(valid_591718, JString, required = false,
                                 default = nil)
  if valid_591718 != nil:
    section.add "TdeCredentialArn", valid_591718
  var valid_591719 = query.getOrDefault("PromotionTier")
  valid_591719 = validateParameter(valid_591719, JInt, required = false, default = nil)
  if valid_591719 != nil:
    section.add "PromotionTier", valid_591719
  var valid_591720 = query.getOrDefault("StorageType")
  valid_591720 = validateParameter(valid_591720, JString, required = false,
                                 default = nil)
  if valid_591720 != nil:
    section.add "StorageType", valid_591720
  var valid_591721 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_591721 = validateParameter(valid_591721, JBool, required = false, default = nil)
  if valid_591721 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_591721
  var valid_591722 = query.getOrDefault("MultiAZ")
  valid_591722 = validateParameter(valid_591722, JBool, required = false, default = nil)
  if valid_591722 != nil:
    section.add "MultiAZ", valid_591722
  var valid_591723 = query.getOrDefault("DBSecurityGroups")
  valid_591723 = validateParameter(valid_591723, JArray, required = false,
                                 default = nil)
  if valid_591723 != nil:
    section.add "DBSecurityGroups", valid_591723
  var valid_591724 = query.getOrDefault("Port")
  valid_591724 = validateParameter(valid_591724, JInt, required = false, default = nil)
  if valid_591724 != nil:
    section.add "Port", valid_591724
  var valid_591725 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_591725 = validateParameter(valid_591725, JString, required = false,
                                 default = nil)
  if valid_591725 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_591725
  var valid_591726 = query.getOrDefault("MasterUserPassword")
  valid_591726 = validateParameter(valid_591726, JString, required = false,
                                 default = nil)
  if valid_591726 != nil:
    section.add "MasterUserPassword", valid_591726
  var valid_591727 = query.getOrDefault("AvailabilityZone")
  valid_591727 = validateParameter(valid_591727, JString, required = false,
                                 default = nil)
  if valid_591727 != nil:
    section.add "AvailabilityZone", valid_591727
  var valid_591728 = query.getOrDefault("OptionGroupName")
  valid_591728 = validateParameter(valid_591728, JString, required = false,
                                 default = nil)
  if valid_591728 != nil:
    section.add "OptionGroupName", valid_591728
  var valid_591729 = query.getOrDefault("DBSubnetGroupName")
  valid_591729 = validateParameter(valid_591729, JString, required = false,
                                 default = nil)
  if valid_591729 != nil:
    section.add "DBSubnetGroupName", valid_591729
  var valid_591730 = query.getOrDefault("PreferredBackupWindow")
  valid_591730 = validateParameter(valid_591730, JString, required = false,
                                 default = nil)
  if valid_591730 != nil:
    section.add "PreferredBackupWindow", valid_591730
  var valid_591731 = query.getOrDefault("DBInstanceClass")
  valid_591731 = validateParameter(valid_591731, JString, required = true,
                                 default = nil)
  if valid_591731 != nil:
    section.add "DBInstanceClass", valid_591731
  var valid_591732 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_591732 = validateParameter(valid_591732, JString, required = false,
                                 default = nil)
  if valid_591732 != nil:
    section.add "PreferredMaintenanceWindow", valid_591732
  var valid_591733 = query.getOrDefault("Timezone")
  valid_591733 = validateParameter(valid_591733, JString, required = false,
                                 default = nil)
  if valid_591733 != nil:
    section.add "Timezone", valid_591733
  var valid_591734 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_591734 = validateParameter(valid_591734, JBool, required = false, default = nil)
  if valid_591734 != nil:
    section.add "AutoMinorVersionUpgrade", valid_591734
  var valid_591735 = query.getOrDefault("Iops")
  valid_591735 = validateParameter(valid_591735, JInt, required = false, default = nil)
  if valid_591735 != nil:
    section.add "Iops", valid_591735
  var valid_591736 = query.getOrDefault("Version")
  valid_591736 = validateParameter(valid_591736, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591736 != nil:
    section.add "Version", valid_591736
  var valid_591737 = query.getOrDefault("DomainIAMRoleName")
  valid_591737 = validateParameter(valid_591737, JString, required = false,
                                 default = nil)
  if valid_591737 != nil:
    section.add "DomainIAMRoleName", valid_591737
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_591738 = header.getOrDefault("X-Amz-Security-Token")
  valid_591738 = validateParameter(valid_591738, JString, required = false,
                                 default = nil)
  if valid_591738 != nil:
    section.add "X-Amz-Security-Token", valid_591738
  var valid_591739 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591739 = validateParameter(valid_591739, JString, required = false,
                                 default = nil)
  if valid_591739 != nil:
    section.add "X-Amz-SignedHeaders", valid_591739
  var valid_591740 = header.getOrDefault("X-Amz-Signature")
  valid_591740 = validateParameter(valid_591740, JString, required = false,
                                 default = nil)
  if valid_591740 != nil:
    section.add "X-Amz-Signature", valid_591740
  var valid_591741 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591741 = validateParameter(valid_591741, JString, required = false,
                                 default = nil)
  if valid_591741 != nil:
    section.add "X-Amz-Content-Sha256", valid_591741
  var valid_591742 = header.getOrDefault("X-Amz-Date")
  valid_591742 = validateParameter(valid_591742, JString, required = false,
                                 default = nil)
  if valid_591742 != nil:
    section.add "X-Amz-Date", valid_591742
  var valid_591743 = header.getOrDefault("X-Amz-Credential")
  valid_591743 = validateParameter(valid_591743, JString, required = false,
                                 default = nil)
  if valid_591743 != nil:
    section.add "X-Amz-Credential", valid_591743
  var valid_591744 = header.getOrDefault("X-Amz-Algorithm")
  valid_591744 = validateParameter(valid_591744, JString, required = false,
                                 default = nil)
  if valid_591744 != nil:
    section.add "X-Amz-Algorithm", valid_591744
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591745: Call_GetCreateDBInstance_591687; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_591745.validator(path, query, header, formData, body)
  let scheme = call_591745.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591745.url(scheme.get, call_591745.host, call_591745.base,
                         call_591745.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591745, url, valid)

proc call*(call_591746: Call_GetCreateDBInstance_591687; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; MonitoringInterval: int = 0;
          KmsKeyId: string = ""; MonitoringRoleArn: string = "";
          ProcessorFeatures: JsonNode = nil; MasterUsername: string = "";
          BackupRetentionPeriod: int = 0;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBInstance"; Domain: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          DBName: string = ""; TdeCredentialPassword: string = "";
          StorageEncrypted: bool = false; DBParameterGroupName: string = "";
          DeletionProtection: bool = false; CharacterSetName: string = "";
          Tags: JsonNode = nil; MaxAllocatedStorage: int = 0;
          DBClusterIdentifier: string = ""; LicenseModel: string = "";
          TdeCredentialArn: string = ""; PromotionTier: int = 0;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          MultiAZ: bool = false; DBSecurityGroups: JsonNode = nil; Port: int = 0;
          PerformanceInsightsKMSKeyId: string = ""; MasterUserPassword: string = "";
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Timezone: string = "";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          Version: string = "2014-10-31"; DomainIAMRoleName: string = ""): Recallable =
  ## getCreateDBInstance
  ## Creates a new DB instance.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> is not specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it is not encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: Must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   Version: string (required)
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_591747 = newJObject()
  add(query_591747, "Engine", newJString(Engine))
  add(query_591747, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_591747, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_591747, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_591747, "KmsKeyId", newJString(KmsKeyId))
  add(query_591747, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  if ProcessorFeatures != nil:
    query_591747.add "ProcessorFeatures", ProcessorFeatures
  add(query_591747, "MasterUsername", newJString(MasterUsername))
  add(query_591747, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if EnableCloudwatchLogsExports != nil:
    query_591747.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_591747, "EngineVersion", newJString(EngineVersion))
  add(query_591747, "Action", newJString(Action))
  add(query_591747, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_591747.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_591747, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_591747, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_591747, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_591747, "DBName", newJString(DBName))
  add(query_591747, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_591747, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_591747, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_591747, "DeletionProtection", newJBool(DeletionProtection))
  add(query_591747, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_591747.add "Tags", Tags
  add(query_591747, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_591747, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_591747, "LicenseModel", newJString(LicenseModel))
  add(query_591747, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_591747, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_591747, "PromotionTier", newJInt(PromotionTier))
  add(query_591747, "StorageType", newJString(StorageType))
  add(query_591747, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_591747, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_591747.add "DBSecurityGroups", DBSecurityGroups
  add(query_591747, "Port", newJInt(Port))
  add(query_591747, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_591747, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_591747, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_591747, "OptionGroupName", newJString(OptionGroupName))
  add(query_591747, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_591747, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_591747, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_591747, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_591747, "Timezone", newJString(Timezone))
  add(query_591747, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_591747, "Iops", newJInt(Iops))
  add(query_591747, "Version", newJString(Version))
  add(query_591747, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_591746.call(nil, query_591747, nil, nil, nil)

var getCreateDBInstance* = Call_GetCreateDBInstance_591687(
    name: "getCreateDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_GetCreateDBInstance_591688, base: "/",
    url: url_GetCreateDBInstance_591689, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstanceReadReplica_591856 = ref object of OpenApiRestCall_590348
proc url_PostCreateDBInstanceReadReplica_591858(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBInstanceReadReplica_591857(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591859 = query.getOrDefault("Action")
  valid_591859 = validateParameter(valid_591859, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_591859 != nil:
    section.add "Action", valid_591859
  var valid_591860 = query.getOrDefault("Version")
  valid_591860 = validateParameter(valid_591860, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591860 != nil:
    section.add "Version", valid_591860
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591861 = header.getOrDefault("X-Amz-Signature")
  valid_591861 = validateParameter(valid_591861, JString, required = false,
                                 default = nil)
  if valid_591861 != nil:
    section.add "X-Amz-Signature", valid_591861
  var valid_591862 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591862 = validateParameter(valid_591862, JString, required = false,
                                 default = nil)
  if valid_591862 != nil:
    section.add "X-Amz-Content-Sha256", valid_591862
  var valid_591863 = header.getOrDefault("X-Amz-Date")
  valid_591863 = validateParameter(valid_591863, JString, required = false,
                                 default = nil)
  if valid_591863 != nil:
    section.add "X-Amz-Date", valid_591863
  var valid_591864 = header.getOrDefault("X-Amz-Credential")
  valid_591864 = validateParameter(valid_591864, JString, required = false,
                                 default = nil)
  if valid_591864 != nil:
    section.add "X-Amz-Credential", valid_591864
  var valid_591865 = header.getOrDefault("X-Amz-Security-Token")
  valid_591865 = validateParameter(valid_591865, JString, required = false,
                                 default = nil)
  if valid_591865 != nil:
    section.add "X-Amz-Security-Token", valid_591865
  var valid_591866 = header.getOrDefault("X-Amz-Algorithm")
  valid_591866 = validateParameter(valid_591866, JString, required = false,
                                 default = nil)
  if valid_591866 != nil:
    section.add "X-Amz-Algorithm", valid_591866
  var valid_591867 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591867 = validateParameter(valid_591867, JString, required = false,
                                 default = nil)
  if valid_591867 != nil:
    section.add "X-Amz-SignedHeaders", valid_591867
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you create an encrypted Read Replica from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance is not created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_591868 = formData.getOrDefault("Port")
  valid_591868 = validateParameter(valid_591868, JInt, required = false, default = nil)
  if valid_591868 != nil:
    section.add "Port", valid_591868
  var valid_591869 = formData.getOrDefault("DBInstanceClass")
  valid_591869 = validateParameter(valid_591869, JString, required = false,
                                 default = nil)
  if valid_591869 != nil:
    section.add "DBInstanceClass", valid_591869
  var valid_591870 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_591870 = validateParameter(valid_591870, JBool, required = false, default = nil)
  if valid_591870 != nil:
    section.add "UseDefaultProcessorFeatures", valid_591870
  var valid_591871 = formData.getOrDefault("MultiAZ")
  valid_591871 = validateParameter(valid_591871, JBool, required = false, default = nil)
  if valid_591871 != nil:
    section.add "MultiAZ", valid_591871
  var valid_591872 = formData.getOrDefault("Domain")
  valid_591872 = validateParameter(valid_591872, JString, required = false,
                                 default = nil)
  if valid_591872 != nil:
    section.add "Domain", valid_591872
  var valid_591873 = formData.getOrDefault("MonitoringRoleArn")
  valid_591873 = validateParameter(valid_591873, JString, required = false,
                                 default = nil)
  if valid_591873 != nil:
    section.add "MonitoringRoleArn", valid_591873
  assert formData != nil, "formData argument is necessary due to required `SourceDBInstanceIdentifier` field"
  var valid_591874 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_591874 = validateParameter(valid_591874, JString, required = true,
                                 default = nil)
  if valid_591874 != nil:
    section.add "SourceDBInstanceIdentifier", valid_591874
  var valid_591875 = formData.getOrDefault("DBParameterGroupName")
  valid_591875 = validateParameter(valid_591875, JString, required = false,
                                 default = nil)
  if valid_591875 != nil:
    section.add "DBParameterGroupName", valid_591875
  var valid_591876 = formData.getOrDefault("SourceRegion")
  valid_591876 = validateParameter(valid_591876, JString, required = false,
                                 default = nil)
  if valid_591876 != nil:
    section.add "SourceRegion", valid_591876
  var valid_591877 = formData.getOrDefault("MonitoringInterval")
  valid_591877 = validateParameter(valid_591877, JInt, required = false, default = nil)
  if valid_591877 != nil:
    section.add "MonitoringInterval", valid_591877
  var valid_591878 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_591878 = validateParameter(valid_591878, JArray, required = false,
                                 default = nil)
  if valid_591878 != nil:
    section.add "VpcSecurityGroupIds", valid_591878
  var valid_591879 = formData.getOrDefault("AvailabilityZone")
  valid_591879 = validateParameter(valid_591879, JString, required = false,
                                 default = nil)
  if valid_591879 != nil:
    section.add "AvailabilityZone", valid_591879
  var valid_591880 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_591880 = validateParameter(valid_591880, JBool, required = false, default = nil)
  if valid_591880 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_591880
  var valid_591881 = formData.getOrDefault("KmsKeyId")
  valid_591881 = validateParameter(valid_591881, JString, required = false,
                                 default = nil)
  if valid_591881 != nil:
    section.add "KmsKeyId", valid_591881
  var valid_591882 = formData.getOrDefault("EnablePerformanceInsights")
  valid_591882 = validateParameter(valid_591882, JBool, required = false, default = nil)
  if valid_591882 != nil:
    section.add "EnablePerformanceInsights", valid_591882
  var valid_591883 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_591883 = validateParameter(valid_591883, JBool, required = false, default = nil)
  if valid_591883 != nil:
    section.add "AutoMinorVersionUpgrade", valid_591883
  var valid_591884 = formData.getOrDefault("PreSignedUrl")
  valid_591884 = validateParameter(valid_591884, JString, required = false,
                                 default = nil)
  if valid_591884 != nil:
    section.add "PreSignedUrl", valid_591884
  var valid_591885 = formData.getOrDefault("DBInstanceIdentifier")
  valid_591885 = validateParameter(valid_591885, JString, required = true,
                                 default = nil)
  if valid_591885 != nil:
    section.add "DBInstanceIdentifier", valid_591885
  var valid_591886 = formData.getOrDefault("Iops")
  valid_591886 = validateParameter(valid_591886, JInt, required = false, default = nil)
  if valid_591886 != nil:
    section.add "Iops", valid_591886
  var valid_591887 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_591887 = validateParameter(valid_591887, JArray, required = false,
                                 default = nil)
  if valid_591887 != nil:
    section.add "EnableCloudwatchLogsExports", valid_591887
  var valid_591888 = formData.getOrDefault("PubliclyAccessible")
  valid_591888 = validateParameter(valid_591888, JBool, required = false, default = nil)
  if valid_591888 != nil:
    section.add "PubliclyAccessible", valid_591888
  var valid_591889 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_591889 = validateParameter(valid_591889, JString, required = false,
                                 default = nil)
  if valid_591889 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_591889
  var valid_591890 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_591890 = validateParameter(valid_591890, JInt, required = false, default = nil)
  if valid_591890 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_591890
  var valid_591891 = formData.getOrDefault("Tags")
  valid_591891 = validateParameter(valid_591891, JArray, required = false,
                                 default = nil)
  if valid_591891 != nil:
    section.add "Tags", valid_591891
  var valid_591892 = formData.getOrDefault("DBSubnetGroupName")
  valid_591892 = validateParameter(valid_591892, JString, required = false,
                                 default = nil)
  if valid_591892 != nil:
    section.add "DBSubnetGroupName", valid_591892
  var valid_591893 = formData.getOrDefault("DomainIAMRoleName")
  valid_591893 = validateParameter(valid_591893, JString, required = false,
                                 default = nil)
  if valid_591893 != nil:
    section.add "DomainIAMRoleName", valid_591893
  var valid_591894 = formData.getOrDefault("OptionGroupName")
  valid_591894 = validateParameter(valid_591894, JString, required = false,
                                 default = nil)
  if valid_591894 != nil:
    section.add "OptionGroupName", valid_591894
  var valid_591895 = formData.getOrDefault("StorageType")
  valid_591895 = validateParameter(valid_591895, JString, required = false,
                                 default = nil)
  if valid_591895 != nil:
    section.add "StorageType", valid_591895
  var valid_591896 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_591896 = validateParameter(valid_591896, JBool, required = false, default = nil)
  if valid_591896 != nil:
    section.add "CopyTagsToSnapshot", valid_591896
  var valid_591897 = formData.getOrDefault("DeletionProtection")
  valid_591897 = validateParameter(valid_591897, JBool, required = false, default = nil)
  if valid_591897 != nil:
    section.add "DeletionProtection", valid_591897
  var valid_591898 = formData.getOrDefault("ProcessorFeatures")
  valid_591898 = validateParameter(valid_591898, JArray, required = false,
                                 default = nil)
  if valid_591898 != nil:
    section.add "ProcessorFeatures", valid_591898
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591899: Call_PostCreateDBInstanceReadReplica_591856;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_591899.validator(path, query, header, formData, body)
  let scheme = call_591899.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591899.url(scheme.get, call_591899.host, call_591899.base,
                         call_591899.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591899, url, valid)

proc call*(call_591900: Call_PostCreateDBInstanceReadReplica_591856;
          SourceDBInstanceIdentifier: string; DBInstanceIdentifier: string;
          Port: int = 0; DBInstanceClass: string = "";
          UseDefaultProcessorFeatures: bool = false; MultiAZ: bool = false;
          Domain: string = ""; MonitoringRoleArn: string = "";
          DBParameterGroupName: string = ""; SourceRegion: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          EnablePerformanceInsights: bool = false;
          AutoMinorVersionUpgrade: bool = false; PreSignedUrl: string = "";
          Iops: int = 0; EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "CreateDBInstanceReadReplica";
          PerformanceInsightsKMSKeyId: string = "";
          PerformanceInsightsRetentionPeriod: int = 0; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          StorageType: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you create an encrypted Read Replica from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance is not created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_591901 = newJObject()
  var formData_591902 = newJObject()
  add(formData_591902, "Port", newJInt(Port))
  add(formData_591902, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_591902, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_591902, "MultiAZ", newJBool(MultiAZ))
  add(formData_591902, "Domain", newJString(Domain))
  add(formData_591902, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_591902, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_591902, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_591902, "SourceRegion", newJString(SourceRegion))
  add(formData_591902, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_591902.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_591902, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_591902, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_591902, "KmsKeyId", newJString(KmsKeyId))
  add(formData_591902, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_591902, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_591902, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_591902, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_591902, "Iops", newJInt(Iops))
  if EnableCloudwatchLogsExports != nil:
    formData_591902.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_591902, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_591901, "Action", newJString(Action))
  add(formData_591902, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_591902, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  if Tags != nil:
    formData_591902.add "Tags", Tags
  add(formData_591902, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_591902, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_591902, "OptionGroupName", newJString(OptionGroupName))
  add(query_591901, "Version", newJString(Version))
  add(formData_591902, "StorageType", newJString(StorageType))
  add(formData_591902, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_591902, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_591902.add "ProcessorFeatures", ProcessorFeatures
  result = call_591900.call(nil, query_591901, nil, formData_591902, nil)

var postCreateDBInstanceReadReplica* = Call_PostCreateDBInstanceReadReplica_591856(
    name: "postCreateDBInstanceReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_PostCreateDBInstanceReadReplica_591857, base: "/",
    url: url_PostCreateDBInstanceReadReplica_591858,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstanceReadReplica_591810 = ref object of OpenApiRestCall_590348
proc url_GetCreateDBInstanceReadReplica_591812(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBInstanceReadReplica_591811(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you create an encrypted Read Replica from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance is not created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_591813 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_591813 = validateParameter(valid_591813, JBool, required = false, default = nil)
  if valid_591813 != nil:
    section.add "UseDefaultProcessorFeatures", valid_591813
  var valid_591814 = query.getOrDefault("DeletionProtection")
  valid_591814 = validateParameter(valid_591814, JBool, required = false, default = nil)
  if valid_591814 != nil:
    section.add "DeletionProtection", valid_591814
  var valid_591815 = query.getOrDefault("DBParameterGroupName")
  valid_591815 = validateParameter(valid_591815, JString, required = false,
                                 default = nil)
  if valid_591815 != nil:
    section.add "DBParameterGroupName", valid_591815
  var valid_591816 = query.getOrDefault("CopyTagsToSnapshot")
  valid_591816 = validateParameter(valid_591816, JBool, required = false, default = nil)
  if valid_591816 != nil:
    section.add "CopyTagsToSnapshot", valid_591816
  var valid_591817 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_591817 = validateParameter(valid_591817, JInt, required = false, default = nil)
  if valid_591817 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_591817
  var valid_591818 = query.getOrDefault("Tags")
  valid_591818 = validateParameter(valid_591818, JArray, required = false,
                                 default = nil)
  if valid_591818 != nil:
    section.add "Tags", valid_591818
  var valid_591819 = query.getOrDefault("MonitoringInterval")
  valid_591819 = validateParameter(valid_591819, JInt, required = false, default = nil)
  if valid_591819 != nil:
    section.add "MonitoringInterval", valid_591819
  var valid_591820 = query.getOrDefault("MonitoringRoleArn")
  valid_591820 = validateParameter(valid_591820, JString, required = false,
                                 default = nil)
  if valid_591820 != nil:
    section.add "MonitoringRoleArn", valid_591820
  var valid_591821 = query.getOrDefault("KmsKeyId")
  valid_591821 = validateParameter(valid_591821, JString, required = false,
                                 default = nil)
  if valid_591821 != nil:
    section.add "KmsKeyId", valid_591821
  var valid_591822 = query.getOrDefault("PreSignedUrl")
  valid_591822 = validateParameter(valid_591822, JString, required = false,
                                 default = nil)
  if valid_591822 != nil:
    section.add "PreSignedUrl", valid_591822
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_591823 = query.getOrDefault("DBInstanceIdentifier")
  valid_591823 = validateParameter(valid_591823, JString, required = true,
                                 default = nil)
  if valid_591823 != nil:
    section.add "DBInstanceIdentifier", valid_591823
  var valid_591824 = query.getOrDefault("ProcessorFeatures")
  valid_591824 = validateParameter(valid_591824, JArray, required = false,
                                 default = nil)
  if valid_591824 != nil:
    section.add "ProcessorFeatures", valid_591824
  var valid_591825 = query.getOrDefault("StorageType")
  valid_591825 = validateParameter(valid_591825, JString, required = false,
                                 default = nil)
  if valid_591825 != nil:
    section.add "StorageType", valid_591825
  var valid_591826 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_591826 = validateParameter(valid_591826, JBool, required = false, default = nil)
  if valid_591826 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_591826
  var valid_591827 = query.getOrDefault("SourceRegion")
  valid_591827 = validateParameter(valid_591827, JString, required = false,
                                 default = nil)
  if valid_591827 != nil:
    section.add "SourceRegion", valid_591827
  var valid_591828 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_591828 = validateParameter(valid_591828, JArray, required = false,
                                 default = nil)
  if valid_591828 != nil:
    section.add "EnableCloudwatchLogsExports", valid_591828
  var valid_591829 = query.getOrDefault("Action")
  valid_591829 = validateParameter(valid_591829, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_591829 != nil:
    section.add "Action", valid_591829
  var valid_591830 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_591830 = validateParameter(valid_591830, JString, required = true,
                                 default = nil)
  if valid_591830 != nil:
    section.add "SourceDBInstanceIdentifier", valid_591830
  var valid_591831 = query.getOrDefault("MultiAZ")
  valid_591831 = validateParameter(valid_591831, JBool, required = false, default = nil)
  if valid_591831 != nil:
    section.add "MultiAZ", valid_591831
  var valid_591832 = query.getOrDefault("Port")
  valid_591832 = validateParameter(valid_591832, JInt, required = false, default = nil)
  if valid_591832 != nil:
    section.add "Port", valid_591832
  var valid_591833 = query.getOrDefault("Domain")
  valid_591833 = validateParameter(valid_591833, JString, required = false,
                                 default = nil)
  if valid_591833 != nil:
    section.add "Domain", valid_591833
  var valid_591834 = query.getOrDefault("VpcSecurityGroupIds")
  valid_591834 = validateParameter(valid_591834, JArray, required = false,
                                 default = nil)
  if valid_591834 != nil:
    section.add "VpcSecurityGroupIds", valid_591834
  var valid_591835 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_591835 = validateParameter(valid_591835, JString, required = false,
                                 default = nil)
  if valid_591835 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_591835
  var valid_591836 = query.getOrDefault("AvailabilityZone")
  valid_591836 = validateParameter(valid_591836, JString, required = false,
                                 default = nil)
  if valid_591836 != nil:
    section.add "AvailabilityZone", valid_591836
  var valid_591837 = query.getOrDefault("OptionGroupName")
  valid_591837 = validateParameter(valid_591837, JString, required = false,
                                 default = nil)
  if valid_591837 != nil:
    section.add "OptionGroupName", valid_591837
  var valid_591838 = query.getOrDefault("DBSubnetGroupName")
  valid_591838 = validateParameter(valid_591838, JString, required = false,
                                 default = nil)
  if valid_591838 != nil:
    section.add "DBSubnetGroupName", valid_591838
  var valid_591839 = query.getOrDefault("Version")
  valid_591839 = validateParameter(valid_591839, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591839 != nil:
    section.add "Version", valid_591839
  var valid_591840 = query.getOrDefault("DBInstanceClass")
  valid_591840 = validateParameter(valid_591840, JString, required = false,
                                 default = nil)
  if valid_591840 != nil:
    section.add "DBInstanceClass", valid_591840
  var valid_591841 = query.getOrDefault("PubliclyAccessible")
  valid_591841 = validateParameter(valid_591841, JBool, required = false, default = nil)
  if valid_591841 != nil:
    section.add "PubliclyAccessible", valid_591841
  var valid_591842 = query.getOrDefault("EnablePerformanceInsights")
  valid_591842 = validateParameter(valid_591842, JBool, required = false, default = nil)
  if valid_591842 != nil:
    section.add "EnablePerformanceInsights", valid_591842
  var valid_591843 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_591843 = validateParameter(valid_591843, JBool, required = false, default = nil)
  if valid_591843 != nil:
    section.add "AutoMinorVersionUpgrade", valid_591843
  var valid_591844 = query.getOrDefault("Iops")
  valid_591844 = validateParameter(valid_591844, JInt, required = false, default = nil)
  if valid_591844 != nil:
    section.add "Iops", valid_591844
  var valid_591845 = query.getOrDefault("DomainIAMRoleName")
  valid_591845 = validateParameter(valid_591845, JString, required = false,
                                 default = nil)
  if valid_591845 != nil:
    section.add "DomainIAMRoleName", valid_591845
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591846 = header.getOrDefault("X-Amz-Signature")
  valid_591846 = validateParameter(valid_591846, JString, required = false,
                                 default = nil)
  if valid_591846 != nil:
    section.add "X-Amz-Signature", valid_591846
  var valid_591847 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591847 = validateParameter(valid_591847, JString, required = false,
                                 default = nil)
  if valid_591847 != nil:
    section.add "X-Amz-Content-Sha256", valid_591847
  var valid_591848 = header.getOrDefault("X-Amz-Date")
  valid_591848 = validateParameter(valid_591848, JString, required = false,
                                 default = nil)
  if valid_591848 != nil:
    section.add "X-Amz-Date", valid_591848
  var valid_591849 = header.getOrDefault("X-Amz-Credential")
  valid_591849 = validateParameter(valid_591849, JString, required = false,
                                 default = nil)
  if valid_591849 != nil:
    section.add "X-Amz-Credential", valid_591849
  var valid_591850 = header.getOrDefault("X-Amz-Security-Token")
  valid_591850 = validateParameter(valid_591850, JString, required = false,
                                 default = nil)
  if valid_591850 != nil:
    section.add "X-Amz-Security-Token", valid_591850
  var valid_591851 = header.getOrDefault("X-Amz-Algorithm")
  valid_591851 = validateParameter(valid_591851, JString, required = false,
                                 default = nil)
  if valid_591851 != nil:
    section.add "X-Amz-Algorithm", valid_591851
  var valid_591852 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591852 = validateParameter(valid_591852, JString, required = false,
                                 default = nil)
  if valid_591852 != nil:
    section.add "X-Amz-SignedHeaders", valid_591852
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591853: Call_GetCreateDBInstanceReadReplica_591810; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_591853.validator(path, query, header, formData, body)
  let scheme = call_591853.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591853.url(scheme.get, call_591853.host, call_591853.base,
                         call_591853.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591853, url, valid)

proc call*(call_591854: Call_GetCreateDBInstanceReadReplica_591810;
          DBInstanceIdentifier: string; SourceDBInstanceIdentifier: string;
          UseDefaultProcessorFeatures: bool = false;
          DeletionProtection: bool = false; DBParameterGroupName: string = "";
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; Tags: JsonNode = nil;
          MonitoringInterval: int = 0; MonitoringRoleArn: string = "";
          KmsKeyId: string = ""; PreSignedUrl: string = "";
          ProcessorFeatures: JsonNode = nil; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false; SourceRegion: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBInstanceReadReplica"; MultiAZ: bool = false;
          Port: int = 0; Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          PerformanceInsightsKMSKeyId: string = ""; AvailabilityZone: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          PubliclyAccessible: bool = false; EnablePerformanceInsights: bool = false;
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you create an encrypted Read Replica from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance is not created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_591855 = newJObject()
  add(query_591855, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_591855, "DeletionProtection", newJBool(DeletionProtection))
  add(query_591855, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_591855, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_591855, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  if Tags != nil:
    query_591855.add "Tags", Tags
  add(query_591855, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_591855, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_591855, "KmsKeyId", newJString(KmsKeyId))
  add(query_591855, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_591855, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  if ProcessorFeatures != nil:
    query_591855.add "ProcessorFeatures", ProcessorFeatures
  add(query_591855, "StorageType", newJString(StorageType))
  add(query_591855, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_591855, "SourceRegion", newJString(SourceRegion))
  if EnableCloudwatchLogsExports != nil:
    query_591855.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_591855, "Action", newJString(Action))
  add(query_591855, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_591855, "MultiAZ", newJBool(MultiAZ))
  add(query_591855, "Port", newJInt(Port))
  add(query_591855, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_591855.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_591855, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_591855, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_591855, "OptionGroupName", newJString(OptionGroupName))
  add(query_591855, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_591855, "Version", newJString(Version))
  add(query_591855, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_591855, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_591855, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_591855, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_591855, "Iops", newJInt(Iops))
  add(query_591855, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_591854.call(nil, query_591855, nil, nil, nil)

var getCreateDBInstanceReadReplica* = Call_GetCreateDBInstanceReadReplica_591810(
    name: "getCreateDBInstanceReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_GetCreateDBInstanceReadReplica_591811, base: "/",
    url: url_GetCreateDBInstanceReadReplica_591812,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBParameterGroup_591922 = ref object of OpenApiRestCall_590348
proc url_PostCreateDBParameterGroup_591924(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBParameterGroup_591923(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591925 = query.getOrDefault("Action")
  valid_591925 = validateParameter(valid_591925, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_591925 != nil:
    section.add "Action", valid_591925
  var valid_591926 = query.getOrDefault("Version")
  valid_591926 = validateParameter(valid_591926, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591926 != nil:
    section.add "Version", valid_591926
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591927 = header.getOrDefault("X-Amz-Signature")
  valid_591927 = validateParameter(valid_591927, JString, required = false,
                                 default = nil)
  if valid_591927 != nil:
    section.add "X-Amz-Signature", valid_591927
  var valid_591928 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591928 = validateParameter(valid_591928, JString, required = false,
                                 default = nil)
  if valid_591928 != nil:
    section.add "X-Amz-Content-Sha256", valid_591928
  var valid_591929 = header.getOrDefault("X-Amz-Date")
  valid_591929 = validateParameter(valid_591929, JString, required = false,
                                 default = nil)
  if valid_591929 != nil:
    section.add "X-Amz-Date", valid_591929
  var valid_591930 = header.getOrDefault("X-Amz-Credential")
  valid_591930 = validateParameter(valid_591930, JString, required = false,
                                 default = nil)
  if valid_591930 != nil:
    section.add "X-Amz-Credential", valid_591930
  var valid_591931 = header.getOrDefault("X-Amz-Security-Token")
  valid_591931 = validateParameter(valid_591931, JString, required = false,
                                 default = nil)
  if valid_591931 != nil:
    section.add "X-Amz-Security-Token", valid_591931
  var valid_591932 = header.getOrDefault("X-Amz-Algorithm")
  valid_591932 = validateParameter(valid_591932, JString, required = false,
                                 default = nil)
  if valid_591932 != nil:
    section.add "X-Amz-Algorithm", valid_591932
  var valid_591933 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591933 = validateParameter(valid_591933, JString, required = false,
                                 default = nil)
  if valid_591933 != nil:
    section.add "X-Amz-SignedHeaders", valid_591933
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_591934 = formData.getOrDefault("Description")
  valid_591934 = validateParameter(valid_591934, JString, required = true,
                                 default = nil)
  if valid_591934 != nil:
    section.add "Description", valid_591934
  var valid_591935 = formData.getOrDefault("DBParameterGroupName")
  valid_591935 = validateParameter(valid_591935, JString, required = true,
                                 default = nil)
  if valid_591935 != nil:
    section.add "DBParameterGroupName", valid_591935
  var valid_591936 = formData.getOrDefault("Tags")
  valid_591936 = validateParameter(valid_591936, JArray, required = false,
                                 default = nil)
  if valid_591936 != nil:
    section.add "Tags", valid_591936
  var valid_591937 = formData.getOrDefault("DBParameterGroupFamily")
  valid_591937 = validateParameter(valid_591937, JString, required = true,
                                 default = nil)
  if valid_591937 != nil:
    section.add "DBParameterGroupFamily", valid_591937
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591938: Call_PostCreateDBParameterGroup_591922; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_591938.validator(path, query, header, formData, body)
  let scheme = call_591938.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591938.url(scheme.get, call_591938.host, call_591938.base,
                         call_591938.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591938, url, valid)

proc call*(call_591939: Call_PostCreateDBParameterGroup_591922;
          Description: string; DBParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  var query_591940 = newJObject()
  var formData_591941 = newJObject()
  add(formData_591941, "Description", newJString(Description))
  add(formData_591941, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_591940, "Action", newJString(Action))
  if Tags != nil:
    formData_591941.add "Tags", Tags
  add(query_591940, "Version", newJString(Version))
  add(formData_591941, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_591939.call(nil, query_591940, nil, formData_591941, nil)

var postCreateDBParameterGroup* = Call_PostCreateDBParameterGroup_591922(
    name: "postCreateDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_PostCreateDBParameterGroup_591923, base: "/",
    url: url_PostCreateDBParameterGroup_591924,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBParameterGroup_591903 = ref object of OpenApiRestCall_590348
proc url_GetCreateDBParameterGroup_591905(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBParameterGroup_591904(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_591906 = query.getOrDefault("DBParameterGroupFamily")
  valid_591906 = validateParameter(valid_591906, JString, required = true,
                                 default = nil)
  if valid_591906 != nil:
    section.add "DBParameterGroupFamily", valid_591906
  var valid_591907 = query.getOrDefault("DBParameterGroupName")
  valid_591907 = validateParameter(valid_591907, JString, required = true,
                                 default = nil)
  if valid_591907 != nil:
    section.add "DBParameterGroupName", valid_591907
  var valid_591908 = query.getOrDefault("Tags")
  valid_591908 = validateParameter(valid_591908, JArray, required = false,
                                 default = nil)
  if valid_591908 != nil:
    section.add "Tags", valid_591908
  var valid_591909 = query.getOrDefault("Action")
  valid_591909 = validateParameter(valid_591909, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_591909 != nil:
    section.add "Action", valid_591909
  var valid_591910 = query.getOrDefault("Description")
  valid_591910 = validateParameter(valid_591910, JString, required = true,
                                 default = nil)
  if valid_591910 != nil:
    section.add "Description", valid_591910
  var valid_591911 = query.getOrDefault("Version")
  valid_591911 = validateParameter(valid_591911, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591911 != nil:
    section.add "Version", valid_591911
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591912 = header.getOrDefault("X-Amz-Signature")
  valid_591912 = validateParameter(valid_591912, JString, required = false,
                                 default = nil)
  if valid_591912 != nil:
    section.add "X-Amz-Signature", valid_591912
  var valid_591913 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591913 = validateParameter(valid_591913, JString, required = false,
                                 default = nil)
  if valid_591913 != nil:
    section.add "X-Amz-Content-Sha256", valid_591913
  var valid_591914 = header.getOrDefault("X-Amz-Date")
  valid_591914 = validateParameter(valid_591914, JString, required = false,
                                 default = nil)
  if valid_591914 != nil:
    section.add "X-Amz-Date", valid_591914
  var valid_591915 = header.getOrDefault("X-Amz-Credential")
  valid_591915 = validateParameter(valid_591915, JString, required = false,
                                 default = nil)
  if valid_591915 != nil:
    section.add "X-Amz-Credential", valid_591915
  var valid_591916 = header.getOrDefault("X-Amz-Security-Token")
  valid_591916 = validateParameter(valid_591916, JString, required = false,
                                 default = nil)
  if valid_591916 != nil:
    section.add "X-Amz-Security-Token", valid_591916
  var valid_591917 = header.getOrDefault("X-Amz-Algorithm")
  valid_591917 = validateParameter(valid_591917, JString, required = false,
                                 default = nil)
  if valid_591917 != nil:
    section.add "X-Amz-Algorithm", valid_591917
  var valid_591918 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591918 = validateParameter(valid_591918, JString, required = false,
                                 default = nil)
  if valid_591918 != nil:
    section.add "X-Amz-SignedHeaders", valid_591918
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591919: Call_GetCreateDBParameterGroup_591903; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_591919.validator(path, query, header, formData, body)
  let scheme = call_591919.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591919.url(scheme.get, call_591919.host, call_591919.base,
                         call_591919.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591919, url, valid)

proc call*(call_591920: Call_GetCreateDBParameterGroup_591903;
          DBParameterGroupFamily: string; DBParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   Version: string (required)
  var query_591921 = newJObject()
  add(query_591921, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_591921, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_591921.add "Tags", Tags
  add(query_591921, "Action", newJString(Action))
  add(query_591921, "Description", newJString(Description))
  add(query_591921, "Version", newJString(Version))
  result = call_591920.call(nil, query_591921, nil, nil, nil)

var getCreateDBParameterGroup* = Call_GetCreateDBParameterGroup_591903(
    name: "getCreateDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_GetCreateDBParameterGroup_591904, base: "/",
    url: url_GetCreateDBParameterGroup_591905,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSecurityGroup_591960 = ref object of OpenApiRestCall_590348
proc url_PostCreateDBSecurityGroup_591962(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBSecurityGroup_591961(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591963 = query.getOrDefault("Action")
  valid_591963 = validateParameter(valid_591963, JString, required = true,
                                 default = newJString("CreateDBSecurityGroup"))
  if valid_591963 != nil:
    section.add "Action", valid_591963
  var valid_591964 = query.getOrDefault("Version")
  valid_591964 = validateParameter(valid_591964, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591964 != nil:
    section.add "Version", valid_591964
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591965 = header.getOrDefault("X-Amz-Signature")
  valid_591965 = validateParameter(valid_591965, JString, required = false,
                                 default = nil)
  if valid_591965 != nil:
    section.add "X-Amz-Signature", valid_591965
  var valid_591966 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591966 = validateParameter(valid_591966, JString, required = false,
                                 default = nil)
  if valid_591966 != nil:
    section.add "X-Amz-Content-Sha256", valid_591966
  var valid_591967 = header.getOrDefault("X-Amz-Date")
  valid_591967 = validateParameter(valid_591967, JString, required = false,
                                 default = nil)
  if valid_591967 != nil:
    section.add "X-Amz-Date", valid_591967
  var valid_591968 = header.getOrDefault("X-Amz-Credential")
  valid_591968 = validateParameter(valid_591968, JString, required = false,
                                 default = nil)
  if valid_591968 != nil:
    section.add "X-Amz-Credential", valid_591968
  var valid_591969 = header.getOrDefault("X-Amz-Security-Token")
  valid_591969 = validateParameter(valid_591969, JString, required = false,
                                 default = nil)
  if valid_591969 != nil:
    section.add "X-Amz-Security-Token", valid_591969
  var valid_591970 = header.getOrDefault("X-Amz-Algorithm")
  valid_591970 = validateParameter(valid_591970, JString, required = false,
                                 default = nil)
  if valid_591970 != nil:
    section.add "X-Amz-Algorithm", valid_591970
  var valid_591971 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591971 = validateParameter(valid_591971, JString, required = false,
                                 default = nil)
  if valid_591971 != nil:
    section.add "X-Amz-SignedHeaders", valid_591971
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupDescription` field"
  var valid_591972 = formData.getOrDefault("DBSecurityGroupDescription")
  valid_591972 = validateParameter(valid_591972, JString, required = true,
                                 default = nil)
  if valid_591972 != nil:
    section.add "DBSecurityGroupDescription", valid_591972
  var valid_591973 = formData.getOrDefault("DBSecurityGroupName")
  valid_591973 = validateParameter(valid_591973, JString, required = true,
                                 default = nil)
  if valid_591973 != nil:
    section.add "DBSecurityGroupName", valid_591973
  var valid_591974 = formData.getOrDefault("Tags")
  valid_591974 = validateParameter(valid_591974, JArray, required = false,
                                 default = nil)
  if valid_591974 != nil:
    section.add "Tags", valid_591974
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591975: Call_PostCreateDBSecurityGroup_591960; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_591975.validator(path, query, header, formData, body)
  let scheme = call_591975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591975.url(scheme.get, call_591975.host, call_591975.base,
                         call_591975.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591975, url, valid)

proc call*(call_591976: Call_PostCreateDBSecurityGroup_591960;
          DBSecurityGroupDescription: string; DBSecurityGroupName: string;
          Action: string = "CreateDBSecurityGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_591977 = newJObject()
  var formData_591978 = newJObject()
  add(formData_591978, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  add(formData_591978, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_591977, "Action", newJString(Action))
  if Tags != nil:
    formData_591978.add "Tags", Tags
  add(query_591977, "Version", newJString(Version))
  result = call_591976.call(nil, query_591977, nil, formData_591978, nil)

var postCreateDBSecurityGroup* = Call_PostCreateDBSecurityGroup_591960(
    name: "postCreateDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_PostCreateDBSecurityGroup_591961, base: "/",
    url: url_PostCreateDBSecurityGroup_591962,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSecurityGroup_591942 = ref object of OpenApiRestCall_590348
proc url_GetCreateDBSecurityGroup_591944(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBSecurityGroup_591943(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_591945 = query.getOrDefault("DBSecurityGroupName")
  valid_591945 = validateParameter(valid_591945, JString, required = true,
                                 default = nil)
  if valid_591945 != nil:
    section.add "DBSecurityGroupName", valid_591945
  var valid_591946 = query.getOrDefault("Tags")
  valid_591946 = validateParameter(valid_591946, JArray, required = false,
                                 default = nil)
  if valid_591946 != nil:
    section.add "Tags", valid_591946
  var valid_591947 = query.getOrDefault("DBSecurityGroupDescription")
  valid_591947 = validateParameter(valid_591947, JString, required = true,
                                 default = nil)
  if valid_591947 != nil:
    section.add "DBSecurityGroupDescription", valid_591947
  var valid_591948 = query.getOrDefault("Action")
  valid_591948 = validateParameter(valid_591948, JString, required = true,
                                 default = newJString("CreateDBSecurityGroup"))
  if valid_591948 != nil:
    section.add "Action", valid_591948
  var valid_591949 = query.getOrDefault("Version")
  valid_591949 = validateParameter(valid_591949, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591949 != nil:
    section.add "Version", valid_591949
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591950 = header.getOrDefault("X-Amz-Signature")
  valid_591950 = validateParameter(valid_591950, JString, required = false,
                                 default = nil)
  if valid_591950 != nil:
    section.add "X-Amz-Signature", valid_591950
  var valid_591951 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591951 = validateParameter(valid_591951, JString, required = false,
                                 default = nil)
  if valid_591951 != nil:
    section.add "X-Amz-Content-Sha256", valid_591951
  var valid_591952 = header.getOrDefault("X-Amz-Date")
  valid_591952 = validateParameter(valid_591952, JString, required = false,
                                 default = nil)
  if valid_591952 != nil:
    section.add "X-Amz-Date", valid_591952
  var valid_591953 = header.getOrDefault("X-Amz-Credential")
  valid_591953 = validateParameter(valid_591953, JString, required = false,
                                 default = nil)
  if valid_591953 != nil:
    section.add "X-Amz-Credential", valid_591953
  var valid_591954 = header.getOrDefault("X-Amz-Security-Token")
  valid_591954 = validateParameter(valid_591954, JString, required = false,
                                 default = nil)
  if valid_591954 != nil:
    section.add "X-Amz-Security-Token", valid_591954
  var valid_591955 = header.getOrDefault("X-Amz-Algorithm")
  valid_591955 = validateParameter(valid_591955, JString, required = false,
                                 default = nil)
  if valid_591955 != nil:
    section.add "X-Amz-Algorithm", valid_591955
  var valid_591956 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591956 = validateParameter(valid_591956, JString, required = false,
                                 default = nil)
  if valid_591956 != nil:
    section.add "X-Amz-SignedHeaders", valid_591956
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591957: Call_GetCreateDBSecurityGroup_591942; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_591957.validator(path, query, header, formData, body)
  let scheme = call_591957.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591957.url(scheme.get, call_591957.host, call_591957.base,
                         call_591957.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591957, url, valid)

proc call*(call_591958: Call_GetCreateDBSecurityGroup_591942;
          DBSecurityGroupName: string; DBSecurityGroupDescription: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591959 = newJObject()
  add(query_591959, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  if Tags != nil:
    query_591959.add "Tags", Tags
  add(query_591959, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  add(query_591959, "Action", newJString(Action))
  add(query_591959, "Version", newJString(Version))
  result = call_591958.call(nil, query_591959, nil, nil, nil)

var getCreateDBSecurityGroup* = Call_GetCreateDBSecurityGroup_591942(
    name: "getCreateDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_GetCreateDBSecurityGroup_591943, base: "/",
    url: url_GetCreateDBSecurityGroup_591944, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSnapshot_591997 = ref object of OpenApiRestCall_590348
proc url_PostCreateDBSnapshot_591999(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBSnapshot_591998(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592000 = query.getOrDefault("Action")
  valid_592000 = validateParameter(valid_592000, JString, required = true,
                                 default = newJString("CreateDBSnapshot"))
  if valid_592000 != nil:
    section.add "Action", valid_592000
  var valid_592001 = query.getOrDefault("Version")
  valid_592001 = validateParameter(valid_592001, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592001 != nil:
    section.add "Version", valid_592001
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592002 = header.getOrDefault("X-Amz-Signature")
  valid_592002 = validateParameter(valid_592002, JString, required = false,
                                 default = nil)
  if valid_592002 != nil:
    section.add "X-Amz-Signature", valid_592002
  var valid_592003 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592003 = validateParameter(valid_592003, JString, required = false,
                                 default = nil)
  if valid_592003 != nil:
    section.add "X-Amz-Content-Sha256", valid_592003
  var valid_592004 = header.getOrDefault("X-Amz-Date")
  valid_592004 = validateParameter(valid_592004, JString, required = false,
                                 default = nil)
  if valid_592004 != nil:
    section.add "X-Amz-Date", valid_592004
  var valid_592005 = header.getOrDefault("X-Amz-Credential")
  valid_592005 = validateParameter(valid_592005, JString, required = false,
                                 default = nil)
  if valid_592005 != nil:
    section.add "X-Amz-Credential", valid_592005
  var valid_592006 = header.getOrDefault("X-Amz-Security-Token")
  valid_592006 = validateParameter(valid_592006, JString, required = false,
                                 default = nil)
  if valid_592006 != nil:
    section.add "X-Amz-Security-Token", valid_592006
  var valid_592007 = header.getOrDefault("X-Amz-Algorithm")
  valid_592007 = validateParameter(valid_592007, JString, required = false,
                                 default = nil)
  if valid_592007 != nil:
    section.add "X-Amz-Algorithm", valid_592007
  var valid_592008 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592008 = validateParameter(valid_592008, JString, required = false,
                                 default = nil)
  if valid_592008 != nil:
    section.add "X-Amz-SignedHeaders", valid_592008
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_592009 = formData.getOrDefault("DBInstanceIdentifier")
  valid_592009 = validateParameter(valid_592009, JString, required = true,
                                 default = nil)
  if valid_592009 != nil:
    section.add "DBInstanceIdentifier", valid_592009
  var valid_592010 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_592010 = validateParameter(valid_592010, JString, required = true,
                                 default = nil)
  if valid_592010 != nil:
    section.add "DBSnapshotIdentifier", valid_592010
  var valid_592011 = formData.getOrDefault("Tags")
  valid_592011 = validateParameter(valid_592011, JArray, required = false,
                                 default = nil)
  if valid_592011 != nil:
    section.add "Tags", valid_592011
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592012: Call_PostCreateDBSnapshot_591997; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_592012.validator(path, query, header, formData, body)
  let scheme = call_592012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592012.url(scheme.get, call_592012.host, call_592012.base,
                         call_592012.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592012, url, valid)

proc call*(call_592013: Call_PostCreateDBSnapshot_591997;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Action: string = "CreateDBSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_592014 = newJObject()
  var formData_592015 = newJObject()
  add(formData_592015, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_592015, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_592014, "Action", newJString(Action))
  if Tags != nil:
    formData_592015.add "Tags", Tags
  add(query_592014, "Version", newJString(Version))
  result = call_592013.call(nil, query_592014, nil, formData_592015, nil)

var postCreateDBSnapshot* = Call_PostCreateDBSnapshot_591997(
    name: "postCreateDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_PostCreateDBSnapshot_591998, base: "/",
    url: url_PostCreateDBSnapshot_591999, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSnapshot_591979 = ref object of OpenApiRestCall_590348
proc url_GetCreateDBSnapshot_591981(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBSnapshot_591980(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_591982 = query.getOrDefault("Tags")
  valid_591982 = validateParameter(valid_591982, JArray, required = false,
                                 default = nil)
  if valid_591982 != nil:
    section.add "Tags", valid_591982
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_591983 = query.getOrDefault("DBInstanceIdentifier")
  valid_591983 = validateParameter(valid_591983, JString, required = true,
                                 default = nil)
  if valid_591983 != nil:
    section.add "DBInstanceIdentifier", valid_591983
  var valid_591984 = query.getOrDefault("DBSnapshotIdentifier")
  valid_591984 = validateParameter(valid_591984, JString, required = true,
                                 default = nil)
  if valid_591984 != nil:
    section.add "DBSnapshotIdentifier", valid_591984
  var valid_591985 = query.getOrDefault("Action")
  valid_591985 = validateParameter(valid_591985, JString, required = true,
                                 default = newJString("CreateDBSnapshot"))
  if valid_591985 != nil:
    section.add "Action", valid_591985
  var valid_591986 = query.getOrDefault("Version")
  valid_591986 = validateParameter(valid_591986, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_591986 != nil:
    section.add "Version", valid_591986
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591987 = header.getOrDefault("X-Amz-Signature")
  valid_591987 = validateParameter(valid_591987, JString, required = false,
                                 default = nil)
  if valid_591987 != nil:
    section.add "X-Amz-Signature", valid_591987
  var valid_591988 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591988 = validateParameter(valid_591988, JString, required = false,
                                 default = nil)
  if valid_591988 != nil:
    section.add "X-Amz-Content-Sha256", valid_591988
  var valid_591989 = header.getOrDefault("X-Amz-Date")
  valid_591989 = validateParameter(valid_591989, JString, required = false,
                                 default = nil)
  if valid_591989 != nil:
    section.add "X-Amz-Date", valid_591989
  var valid_591990 = header.getOrDefault("X-Amz-Credential")
  valid_591990 = validateParameter(valid_591990, JString, required = false,
                                 default = nil)
  if valid_591990 != nil:
    section.add "X-Amz-Credential", valid_591990
  var valid_591991 = header.getOrDefault("X-Amz-Security-Token")
  valid_591991 = validateParameter(valid_591991, JString, required = false,
                                 default = nil)
  if valid_591991 != nil:
    section.add "X-Amz-Security-Token", valid_591991
  var valid_591992 = header.getOrDefault("X-Amz-Algorithm")
  valid_591992 = validateParameter(valid_591992, JString, required = false,
                                 default = nil)
  if valid_591992 != nil:
    section.add "X-Amz-Algorithm", valid_591992
  var valid_591993 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591993 = validateParameter(valid_591993, JString, required = false,
                                 default = nil)
  if valid_591993 != nil:
    section.add "X-Amz-SignedHeaders", valid_591993
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591994: Call_GetCreateDBSnapshot_591979; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_591994.validator(path, query, header, formData, body)
  let scheme = call_591994.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591994.url(scheme.get, call_591994.host, call_591994.base,
                         call_591994.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591994, url, valid)

proc call*(call_591995: Call_GetCreateDBSnapshot_591979;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591996 = newJObject()
  if Tags != nil:
    query_591996.add "Tags", Tags
  add(query_591996, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_591996, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_591996, "Action", newJString(Action))
  add(query_591996, "Version", newJString(Version))
  result = call_591995.call(nil, query_591996, nil, nil, nil)

var getCreateDBSnapshot* = Call_GetCreateDBSnapshot_591979(
    name: "getCreateDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_GetCreateDBSnapshot_591980, base: "/",
    url: url_GetCreateDBSnapshot_591981, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSubnetGroup_592035 = ref object of OpenApiRestCall_590348
proc url_PostCreateDBSubnetGroup_592037(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBSubnetGroup_592036(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592038 = query.getOrDefault("Action")
  valid_592038 = validateParameter(valid_592038, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_592038 != nil:
    section.add "Action", valid_592038
  var valid_592039 = query.getOrDefault("Version")
  valid_592039 = validateParameter(valid_592039, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592039 != nil:
    section.add "Version", valid_592039
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592040 = header.getOrDefault("X-Amz-Signature")
  valid_592040 = validateParameter(valid_592040, JString, required = false,
                                 default = nil)
  if valid_592040 != nil:
    section.add "X-Amz-Signature", valid_592040
  var valid_592041 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592041 = validateParameter(valid_592041, JString, required = false,
                                 default = nil)
  if valid_592041 != nil:
    section.add "X-Amz-Content-Sha256", valid_592041
  var valid_592042 = header.getOrDefault("X-Amz-Date")
  valid_592042 = validateParameter(valid_592042, JString, required = false,
                                 default = nil)
  if valid_592042 != nil:
    section.add "X-Amz-Date", valid_592042
  var valid_592043 = header.getOrDefault("X-Amz-Credential")
  valid_592043 = validateParameter(valid_592043, JString, required = false,
                                 default = nil)
  if valid_592043 != nil:
    section.add "X-Amz-Credential", valid_592043
  var valid_592044 = header.getOrDefault("X-Amz-Security-Token")
  valid_592044 = validateParameter(valid_592044, JString, required = false,
                                 default = nil)
  if valid_592044 != nil:
    section.add "X-Amz-Security-Token", valid_592044
  var valid_592045 = header.getOrDefault("X-Amz-Algorithm")
  valid_592045 = validateParameter(valid_592045, JString, required = false,
                                 default = nil)
  if valid_592045 != nil:
    section.add "X-Amz-Algorithm", valid_592045
  var valid_592046 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592046 = validateParameter(valid_592046, JString, required = false,
                                 default = nil)
  if valid_592046 != nil:
    section.add "X-Amz-SignedHeaders", valid_592046
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupDescription` field"
  var valid_592047 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_592047 = validateParameter(valid_592047, JString, required = true,
                                 default = nil)
  if valid_592047 != nil:
    section.add "DBSubnetGroupDescription", valid_592047
  var valid_592048 = formData.getOrDefault("Tags")
  valid_592048 = validateParameter(valid_592048, JArray, required = false,
                                 default = nil)
  if valid_592048 != nil:
    section.add "Tags", valid_592048
  var valid_592049 = formData.getOrDefault("DBSubnetGroupName")
  valid_592049 = validateParameter(valid_592049, JString, required = true,
                                 default = nil)
  if valid_592049 != nil:
    section.add "DBSubnetGroupName", valid_592049
  var valid_592050 = formData.getOrDefault("SubnetIds")
  valid_592050 = validateParameter(valid_592050, JArray, required = true, default = nil)
  if valid_592050 != nil:
    section.add "SubnetIds", valid_592050
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592051: Call_PostCreateDBSubnetGroup_592035; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_592051.validator(path, query, header, formData, body)
  let scheme = call_592051.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592051.url(scheme.get, call_592051.host, call_592051.base,
                         call_592051.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592051, url, valid)

proc call*(call_592052: Call_PostCreateDBSubnetGroup_592035;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          SubnetIds: JsonNode; Action: string = "CreateDBSubnetGroup";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  var query_592053 = newJObject()
  var formData_592054 = newJObject()
  add(formData_592054, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_592053, "Action", newJString(Action))
  if Tags != nil:
    formData_592054.add "Tags", Tags
  add(formData_592054, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_592053, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_592054.add "SubnetIds", SubnetIds
  result = call_592052.call(nil, query_592053, nil, formData_592054, nil)

var postCreateDBSubnetGroup* = Call_PostCreateDBSubnetGroup_592035(
    name: "postCreateDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_PostCreateDBSubnetGroup_592036, base: "/",
    url: url_PostCreateDBSubnetGroup_592037, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSubnetGroup_592016 = ref object of OpenApiRestCall_590348
proc url_GetCreateDBSubnetGroup_592018(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBSubnetGroup_592017(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_592019 = query.getOrDefault("Tags")
  valid_592019 = validateParameter(valid_592019, JArray, required = false,
                                 default = nil)
  if valid_592019 != nil:
    section.add "Tags", valid_592019
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_592020 = query.getOrDefault("SubnetIds")
  valid_592020 = validateParameter(valid_592020, JArray, required = true, default = nil)
  if valid_592020 != nil:
    section.add "SubnetIds", valid_592020
  var valid_592021 = query.getOrDefault("Action")
  valid_592021 = validateParameter(valid_592021, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_592021 != nil:
    section.add "Action", valid_592021
  var valid_592022 = query.getOrDefault("DBSubnetGroupDescription")
  valid_592022 = validateParameter(valid_592022, JString, required = true,
                                 default = nil)
  if valid_592022 != nil:
    section.add "DBSubnetGroupDescription", valid_592022
  var valid_592023 = query.getOrDefault("DBSubnetGroupName")
  valid_592023 = validateParameter(valid_592023, JString, required = true,
                                 default = nil)
  if valid_592023 != nil:
    section.add "DBSubnetGroupName", valid_592023
  var valid_592024 = query.getOrDefault("Version")
  valid_592024 = validateParameter(valid_592024, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592024 != nil:
    section.add "Version", valid_592024
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592025 = header.getOrDefault("X-Amz-Signature")
  valid_592025 = validateParameter(valid_592025, JString, required = false,
                                 default = nil)
  if valid_592025 != nil:
    section.add "X-Amz-Signature", valid_592025
  var valid_592026 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592026 = validateParameter(valid_592026, JString, required = false,
                                 default = nil)
  if valid_592026 != nil:
    section.add "X-Amz-Content-Sha256", valid_592026
  var valid_592027 = header.getOrDefault("X-Amz-Date")
  valid_592027 = validateParameter(valid_592027, JString, required = false,
                                 default = nil)
  if valid_592027 != nil:
    section.add "X-Amz-Date", valid_592027
  var valid_592028 = header.getOrDefault("X-Amz-Credential")
  valid_592028 = validateParameter(valid_592028, JString, required = false,
                                 default = nil)
  if valid_592028 != nil:
    section.add "X-Amz-Credential", valid_592028
  var valid_592029 = header.getOrDefault("X-Amz-Security-Token")
  valid_592029 = validateParameter(valid_592029, JString, required = false,
                                 default = nil)
  if valid_592029 != nil:
    section.add "X-Amz-Security-Token", valid_592029
  var valid_592030 = header.getOrDefault("X-Amz-Algorithm")
  valid_592030 = validateParameter(valid_592030, JString, required = false,
                                 default = nil)
  if valid_592030 != nil:
    section.add "X-Amz-Algorithm", valid_592030
  var valid_592031 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592031 = validateParameter(valid_592031, JString, required = false,
                                 default = nil)
  if valid_592031 != nil:
    section.add "X-Amz-SignedHeaders", valid_592031
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592032: Call_GetCreateDBSubnetGroup_592016; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_592032.validator(path, query, header, formData, body)
  let scheme = call_592032.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592032.url(scheme.get, call_592032.host, call_592032.base,
                         call_592032.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592032, url, valid)

proc call*(call_592033: Call_GetCreateDBSubnetGroup_592016; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_592034 = newJObject()
  if Tags != nil:
    query_592034.add "Tags", Tags
  if SubnetIds != nil:
    query_592034.add "SubnetIds", SubnetIds
  add(query_592034, "Action", newJString(Action))
  add(query_592034, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_592034, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_592034, "Version", newJString(Version))
  result = call_592033.call(nil, query_592034, nil, nil, nil)

var getCreateDBSubnetGroup* = Call_GetCreateDBSubnetGroup_592016(
    name: "getCreateDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_GetCreateDBSubnetGroup_592017, base: "/",
    url: url_GetCreateDBSubnetGroup_592018, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateEventSubscription_592077 = ref object of OpenApiRestCall_590348
proc url_PostCreateEventSubscription_592079(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateEventSubscription_592078(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592080 = query.getOrDefault("Action")
  valid_592080 = validateParameter(valid_592080, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_592080 != nil:
    section.add "Action", valid_592080
  var valid_592081 = query.getOrDefault("Version")
  valid_592081 = validateParameter(valid_592081, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592081 != nil:
    section.add "Version", valid_592081
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592082 = header.getOrDefault("X-Amz-Signature")
  valid_592082 = validateParameter(valid_592082, JString, required = false,
                                 default = nil)
  if valid_592082 != nil:
    section.add "X-Amz-Signature", valid_592082
  var valid_592083 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592083 = validateParameter(valid_592083, JString, required = false,
                                 default = nil)
  if valid_592083 != nil:
    section.add "X-Amz-Content-Sha256", valid_592083
  var valid_592084 = header.getOrDefault("X-Amz-Date")
  valid_592084 = validateParameter(valid_592084, JString, required = false,
                                 default = nil)
  if valid_592084 != nil:
    section.add "X-Amz-Date", valid_592084
  var valid_592085 = header.getOrDefault("X-Amz-Credential")
  valid_592085 = validateParameter(valid_592085, JString, required = false,
                                 default = nil)
  if valid_592085 != nil:
    section.add "X-Amz-Credential", valid_592085
  var valid_592086 = header.getOrDefault("X-Amz-Security-Token")
  valid_592086 = validateParameter(valid_592086, JString, required = false,
                                 default = nil)
  if valid_592086 != nil:
    section.add "X-Amz-Security-Token", valid_592086
  var valid_592087 = header.getOrDefault("X-Amz-Algorithm")
  valid_592087 = validateParameter(valid_592087, JString, required = false,
                                 default = nil)
  if valid_592087 != nil:
    section.add "X-Amz-Algorithm", valid_592087
  var valid_592088 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592088 = validateParameter(valid_592088, JString, required = false,
                                 default = nil)
  if valid_592088 != nil:
    section.add "X-Amz-SignedHeaders", valid_592088
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription is not activated, the subscription is created but not active. 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_592089 = formData.getOrDefault("SourceIds")
  valid_592089 = validateParameter(valid_592089, JArray, required = false,
                                 default = nil)
  if valid_592089 != nil:
    section.add "SourceIds", valid_592089
  assert formData != nil,
        "formData argument is necessary due to required `SnsTopicArn` field"
  var valid_592090 = formData.getOrDefault("SnsTopicArn")
  valid_592090 = validateParameter(valid_592090, JString, required = true,
                                 default = nil)
  if valid_592090 != nil:
    section.add "SnsTopicArn", valid_592090
  var valid_592091 = formData.getOrDefault("Enabled")
  valid_592091 = validateParameter(valid_592091, JBool, required = false, default = nil)
  if valid_592091 != nil:
    section.add "Enabled", valid_592091
  var valid_592092 = formData.getOrDefault("SubscriptionName")
  valid_592092 = validateParameter(valid_592092, JString, required = true,
                                 default = nil)
  if valid_592092 != nil:
    section.add "SubscriptionName", valid_592092
  var valid_592093 = formData.getOrDefault("SourceType")
  valid_592093 = validateParameter(valid_592093, JString, required = false,
                                 default = nil)
  if valid_592093 != nil:
    section.add "SourceType", valid_592093
  var valid_592094 = formData.getOrDefault("EventCategories")
  valid_592094 = validateParameter(valid_592094, JArray, required = false,
                                 default = nil)
  if valid_592094 != nil:
    section.add "EventCategories", valid_592094
  var valid_592095 = formData.getOrDefault("Tags")
  valid_592095 = validateParameter(valid_592095, JArray, required = false,
                                 default = nil)
  if valid_592095 != nil:
    section.add "Tags", valid_592095
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592096: Call_PostCreateEventSubscription_592077; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ## 
  let valid = call_592096.validator(path, query, header, formData, body)
  let scheme = call_592096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592096.url(scheme.get, call_592096.host, call_592096.base,
                         call_592096.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592096, url, valid)

proc call*(call_592097: Call_PostCreateEventSubscription_592077;
          SnsTopicArn: string; SubscriptionName: string; SourceIds: JsonNode = nil;
          Enabled: bool = false; SourceType: string = "";
          EventCategories: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription is not activated, the subscription is created but not active. 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_592098 = newJObject()
  var formData_592099 = newJObject()
  if SourceIds != nil:
    formData_592099.add "SourceIds", SourceIds
  add(formData_592099, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_592099, "Enabled", newJBool(Enabled))
  add(formData_592099, "SubscriptionName", newJString(SubscriptionName))
  add(formData_592099, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_592099.add "EventCategories", EventCategories
  add(query_592098, "Action", newJString(Action))
  if Tags != nil:
    formData_592099.add "Tags", Tags
  add(query_592098, "Version", newJString(Version))
  result = call_592097.call(nil, query_592098, nil, formData_592099, nil)

var postCreateEventSubscription* = Call_PostCreateEventSubscription_592077(
    name: "postCreateEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_PostCreateEventSubscription_592078, base: "/",
    url: url_PostCreateEventSubscription_592079,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateEventSubscription_592055 = ref object of OpenApiRestCall_590348
proc url_GetCreateEventSubscription_592057(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateEventSubscription_592056(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription is not activated, the subscription is created but not active. 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: JString (required)
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_592058 = query.getOrDefault("Tags")
  valid_592058 = validateParameter(valid_592058, JArray, required = false,
                                 default = nil)
  if valid_592058 != nil:
    section.add "Tags", valid_592058
  var valid_592059 = query.getOrDefault("SourceType")
  valid_592059 = validateParameter(valid_592059, JString, required = false,
                                 default = nil)
  if valid_592059 != nil:
    section.add "SourceType", valid_592059
  var valid_592060 = query.getOrDefault("Enabled")
  valid_592060 = validateParameter(valid_592060, JBool, required = false, default = nil)
  if valid_592060 != nil:
    section.add "Enabled", valid_592060
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_592061 = query.getOrDefault("SubscriptionName")
  valid_592061 = validateParameter(valid_592061, JString, required = true,
                                 default = nil)
  if valid_592061 != nil:
    section.add "SubscriptionName", valid_592061
  var valid_592062 = query.getOrDefault("EventCategories")
  valid_592062 = validateParameter(valid_592062, JArray, required = false,
                                 default = nil)
  if valid_592062 != nil:
    section.add "EventCategories", valid_592062
  var valid_592063 = query.getOrDefault("SourceIds")
  valid_592063 = validateParameter(valid_592063, JArray, required = false,
                                 default = nil)
  if valid_592063 != nil:
    section.add "SourceIds", valid_592063
  var valid_592064 = query.getOrDefault("Action")
  valid_592064 = validateParameter(valid_592064, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_592064 != nil:
    section.add "Action", valid_592064
  var valid_592065 = query.getOrDefault("SnsTopicArn")
  valid_592065 = validateParameter(valid_592065, JString, required = true,
                                 default = nil)
  if valid_592065 != nil:
    section.add "SnsTopicArn", valid_592065
  var valid_592066 = query.getOrDefault("Version")
  valid_592066 = validateParameter(valid_592066, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592066 != nil:
    section.add "Version", valid_592066
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592067 = header.getOrDefault("X-Amz-Signature")
  valid_592067 = validateParameter(valid_592067, JString, required = false,
                                 default = nil)
  if valid_592067 != nil:
    section.add "X-Amz-Signature", valid_592067
  var valid_592068 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592068 = validateParameter(valid_592068, JString, required = false,
                                 default = nil)
  if valid_592068 != nil:
    section.add "X-Amz-Content-Sha256", valid_592068
  var valid_592069 = header.getOrDefault("X-Amz-Date")
  valid_592069 = validateParameter(valid_592069, JString, required = false,
                                 default = nil)
  if valid_592069 != nil:
    section.add "X-Amz-Date", valid_592069
  var valid_592070 = header.getOrDefault("X-Amz-Credential")
  valid_592070 = validateParameter(valid_592070, JString, required = false,
                                 default = nil)
  if valid_592070 != nil:
    section.add "X-Amz-Credential", valid_592070
  var valid_592071 = header.getOrDefault("X-Amz-Security-Token")
  valid_592071 = validateParameter(valid_592071, JString, required = false,
                                 default = nil)
  if valid_592071 != nil:
    section.add "X-Amz-Security-Token", valid_592071
  var valid_592072 = header.getOrDefault("X-Amz-Algorithm")
  valid_592072 = validateParameter(valid_592072, JString, required = false,
                                 default = nil)
  if valid_592072 != nil:
    section.add "X-Amz-Algorithm", valid_592072
  var valid_592073 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592073 = validateParameter(valid_592073, JString, required = false,
                                 default = nil)
  if valid_592073 != nil:
    section.add "X-Amz-SignedHeaders", valid_592073
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592074: Call_GetCreateEventSubscription_592055; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ## 
  let valid = call_592074.validator(path, query, header, formData, body)
  let scheme = call_592074.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592074.url(scheme.get, call_592074.host, call_592074.base,
                         call_592074.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592074, url, valid)

proc call*(call_592075: Call_GetCreateEventSubscription_592055;
          SubscriptionName: string; SnsTopicArn: string; Tags: JsonNode = nil;
          SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil; SourceIds: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## getCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription is not activated, the subscription is created but not active. 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_592076 = newJObject()
  if Tags != nil:
    query_592076.add "Tags", Tags
  add(query_592076, "SourceType", newJString(SourceType))
  add(query_592076, "Enabled", newJBool(Enabled))
  add(query_592076, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_592076.add "EventCategories", EventCategories
  if SourceIds != nil:
    query_592076.add "SourceIds", SourceIds
  add(query_592076, "Action", newJString(Action))
  add(query_592076, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_592076, "Version", newJString(Version))
  result = call_592075.call(nil, query_592076, nil, nil, nil)

var getCreateEventSubscription* = Call_GetCreateEventSubscription_592055(
    name: "getCreateEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_GetCreateEventSubscription_592056, base: "/",
    url: url_GetCreateEventSubscription_592057,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateGlobalCluster_592122 = ref object of OpenApiRestCall_590348
proc url_PostCreateGlobalCluster_592124(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateGlobalCluster_592123(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592125 = query.getOrDefault("Action")
  valid_592125 = validateParameter(valid_592125, JString, required = true,
                                 default = newJString("CreateGlobalCluster"))
  if valid_592125 != nil:
    section.add "Action", valid_592125
  var valid_592126 = query.getOrDefault("Version")
  valid_592126 = validateParameter(valid_592126, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592126 != nil:
    section.add "Version", valid_592126
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592127 = header.getOrDefault("X-Amz-Signature")
  valid_592127 = validateParameter(valid_592127, JString, required = false,
                                 default = nil)
  if valid_592127 != nil:
    section.add "X-Amz-Signature", valid_592127
  var valid_592128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592128 = validateParameter(valid_592128, JString, required = false,
                                 default = nil)
  if valid_592128 != nil:
    section.add "X-Amz-Content-Sha256", valid_592128
  var valid_592129 = header.getOrDefault("X-Amz-Date")
  valid_592129 = validateParameter(valid_592129, JString, required = false,
                                 default = nil)
  if valid_592129 != nil:
    section.add "X-Amz-Date", valid_592129
  var valid_592130 = header.getOrDefault("X-Amz-Credential")
  valid_592130 = validateParameter(valid_592130, JString, required = false,
                                 default = nil)
  if valid_592130 != nil:
    section.add "X-Amz-Credential", valid_592130
  var valid_592131 = header.getOrDefault("X-Amz-Security-Token")
  valid_592131 = validateParameter(valid_592131, JString, required = false,
                                 default = nil)
  if valid_592131 != nil:
    section.add "X-Amz-Security-Token", valid_592131
  var valid_592132 = header.getOrDefault("X-Amz-Algorithm")
  valid_592132 = validateParameter(valid_592132, JString, required = false,
                                 default = nil)
  if valid_592132 != nil:
    section.add "X-Amz-Algorithm", valid_592132
  var valid_592133 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592133 = validateParameter(valid_592133, JString, required = false,
                                 default = nil)
  if valid_592133 != nil:
    section.add "X-Amz-SignedHeaders", valid_592133
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  section = newJObject()
  var valid_592134 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_592134 = validateParameter(valid_592134, JString, required = false,
                                 default = nil)
  if valid_592134 != nil:
    section.add "GlobalClusterIdentifier", valid_592134
  var valid_592135 = formData.getOrDefault("EngineVersion")
  valid_592135 = validateParameter(valid_592135, JString, required = false,
                                 default = nil)
  if valid_592135 != nil:
    section.add "EngineVersion", valid_592135
  var valid_592136 = formData.getOrDefault("DatabaseName")
  valid_592136 = validateParameter(valid_592136, JString, required = false,
                                 default = nil)
  if valid_592136 != nil:
    section.add "DatabaseName", valid_592136
  var valid_592137 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_592137 = validateParameter(valid_592137, JString, required = false,
                                 default = nil)
  if valid_592137 != nil:
    section.add "SourceDBClusterIdentifier", valid_592137
  var valid_592138 = formData.getOrDefault("Engine")
  valid_592138 = validateParameter(valid_592138, JString, required = false,
                                 default = nil)
  if valid_592138 != nil:
    section.add "Engine", valid_592138
  var valid_592139 = formData.getOrDefault("StorageEncrypted")
  valid_592139 = validateParameter(valid_592139, JBool, required = false, default = nil)
  if valid_592139 != nil:
    section.add "StorageEncrypted", valid_592139
  var valid_592140 = formData.getOrDefault("DeletionProtection")
  valid_592140 = validateParameter(valid_592140, JBool, required = false, default = nil)
  if valid_592140 != nil:
    section.add "DeletionProtection", valid_592140
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592141: Call_PostCreateGlobalCluster_592122; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592141.validator(path, query, header, formData, body)
  let scheme = call_592141.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592141.url(scheme.get, call_592141.host, call_592141.base,
                         call_592141.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592141, url, valid)

proc call*(call_592142: Call_PostCreateGlobalCluster_592122;
          GlobalClusterIdentifier: string = ""; EngineVersion: string = "";
          DatabaseName: string = ""; SourceDBClusterIdentifier: string = "";
          Engine: string = ""; Action: string = "CreateGlobalCluster";
          Version: string = "2014-10-31"; StorageEncrypted: bool = false;
          DeletionProtection: bool = false): Recallable =
  ## postCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  var query_592143 = newJObject()
  var formData_592144 = newJObject()
  add(formData_592144, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_592144, "EngineVersion", newJString(EngineVersion))
  add(formData_592144, "DatabaseName", newJString(DatabaseName))
  add(formData_592144, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_592144, "Engine", newJString(Engine))
  add(query_592143, "Action", newJString(Action))
  add(query_592143, "Version", newJString(Version))
  add(formData_592144, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_592144, "DeletionProtection", newJBool(DeletionProtection))
  result = call_592142.call(nil, query_592143, nil, formData_592144, nil)

var postCreateGlobalCluster* = Call_PostCreateGlobalCluster_592122(
    name: "postCreateGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_PostCreateGlobalCluster_592123, base: "/",
    url: url_PostCreateGlobalCluster_592124, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateGlobalCluster_592100 = ref object of OpenApiRestCall_590348
proc url_GetCreateGlobalCluster_592102(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateGlobalCluster_592101(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_592103 = query.getOrDefault("GlobalClusterIdentifier")
  valid_592103 = validateParameter(valid_592103, JString, required = false,
                                 default = nil)
  if valid_592103 != nil:
    section.add "GlobalClusterIdentifier", valid_592103
  var valid_592104 = query.getOrDefault("DatabaseName")
  valid_592104 = validateParameter(valid_592104, JString, required = false,
                                 default = nil)
  if valid_592104 != nil:
    section.add "DatabaseName", valid_592104
  var valid_592105 = query.getOrDefault("DeletionProtection")
  valid_592105 = validateParameter(valid_592105, JBool, required = false, default = nil)
  if valid_592105 != nil:
    section.add "DeletionProtection", valid_592105
  var valid_592106 = query.getOrDefault("Engine")
  valid_592106 = validateParameter(valid_592106, JString, required = false,
                                 default = nil)
  if valid_592106 != nil:
    section.add "Engine", valid_592106
  var valid_592107 = query.getOrDefault("StorageEncrypted")
  valid_592107 = validateParameter(valid_592107, JBool, required = false, default = nil)
  if valid_592107 != nil:
    section.add "StorageEncrypted", valid_592107
  var valid_592108 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_592108 = validateParameter(valid_592108, JString, required = false,
                                 default = nil)
  if valid_592108 != nil:
    section.add "SourceDBClusterIdentifier", valid_592108
  var valid_592109 = query.getOrDefault("EngineVersion")
  valid_592109 = validateParameter(valid_592109, JString, required = false,
                                 default = nil)
  if valid_592109 != nil:
    section.add "EngineVersion", valid_592109
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592110 = query.getOrDefault("Action")
  valid_592110 = validateParameter(valid_592110, JString, required = true,
                                 default = newJString("CreateGlobalCluster"))
  if valid_592110 != nil:
    section.add "Action", valid_592110
  var valid_592111 = query.getOrDefault("Version")
  valid_592111 = validateParameter(valid_592111, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592111 != nil:
    section.add "Version", valid_592111
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592112 = header.getOrDefault("X-Amz-Signature")
  valid_592112 = validateParameter(valid_592112, JString, required = false,
                                 default = nil)
  if valid_592112 != nil:
    section.add "X-Amz-Signature", valid_592112
  var valid_592113 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592113 = validateParameter(valid_592113, JString, required = false,
                                 default = nil)
  if valid_592113 != nil:
    section.add "X-Amz-Content-Sha256", valid_592113
  var valid_592114 = header.getOrDefault("X-Amz-Date")
  valid_592114 = validateParameter(valid_592114, JString, required = false,
                                 default = nil)
  if valid_592114 != nil:
    section.add "X-Amz-Date", valid_592114
  var valid_592115 = header.getOrDefault("X-Amz-Credential")
  valid_592115 = validateParameter(valid_592115, JString, required = false,
                                 default = nil)
  if valid_592115 != nil:
    section.add "X-Amz-Credential", valid_592115
  var valid_592116 = header.getOrDefault("X-Amz-Security-Token")
  valid_592116 = validateParameter(valid_592116, JString, required = false,
                                 default = nil)
  if valid_592116 != nil:
    section.add "X-Amz-Security-Token", valid_592116
  var valid_592117 = header.getOrDefault("X-Amz-Algorithm")
  valid_592117 = validateParameter(valid_592117, JString, required = false,
                                 default = nil)
  if valid_592117 != nil:
    section.add "X-Amz-Algorithm", valid_592117
  var valid_592118 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592118 = validateParameter(valid_592118, JString, required = false,
                                 default = nil)
  if valid_592118 != nil:
    section.add "X-Amz-SignedHeaders", valid_592118
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592119: Call_GetCreateGlobalCluster_592100; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592119.validator(path, query, header, formData, body)
  let scheme = call_592119.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592119.url(scheme.get, call_592119.host, call_592119.base,
                         call_592119.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592119, url, valid)

proc call*(call_592120: Call_GetCreateGlobalCluster_592100;
          GlobalClusterIdentifier: string = ""; DatabaseName: string = "";
          DeletionProtection: bool = false; Engine: string = "";
          StorageEncrypted: bool = false; SourceDBClusterIdentifier: string = "";
          EngineVersion: string = ""; Action: string = "CreateGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592121 = newJObject()
  add(query_592121, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_592121, "DatabaseName", newJString(DatabaseName))
  add(query_592121, "DeletionProtection", newJBool(DeletionProtection))
  add(query_592121, "Engine", newJString(Engine))
  add(query_592121, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_592121, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_592121, "EngineVersion", newJString(EngineVersion))
  add(query_592121, "Action", newJString(Action))
  add(query_592121, "Version", newJString(Version))
  result = call_592120.call(nil, query_592121, nil, nil, nil)

var getCreateGlobalCluster* = Call_GetCreateGlobalCluster_592100(
    name: "getCreateGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_GetCreateGlobalCluster_592101, base: "/",
    url: url_GetCreateGlobalCluster_592102, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOptionGroup_592165 = ref object of OpenApiRestCall_590348
proc url_PostCreateOptionGroup_592167(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateOptionGroup_592166(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592168 = query.getOrDefault("Action")
  valid_592168 = validateParameter(valid_592168, JString, required = true,
                                 default = newJString("CreateOptionGroup"))
  if valid_592168 != nil:
    section.add "Action", valid_592168
  var valid_592169 = query.getOrDefault("Version")
  valid_592169 = validateParameter(valid_592169, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592169 != nil:
    section.add "Version", valid_592169
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592170 = header.getOrDefault("X-Amz-Signature")
  valid_592170 = validateParameter(valid_592170, JString, required = false,
                                 default = nil)
  if valid_592170 != nil:
    section.add "X-Amz-Signature", valid_592170
  var valid_592171 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592171 = validateParameter(valid_592171, JString, required = false,
                                 default = nil)
  if valid_592171 != nil:
    section.add "X-Amz-Content-Sha256", valid_592171
  var valid_592172 = header.getOrDefault("X-Amz-Date")
  valid_592172 = validateParameter(valid_592172, JString, required = false,
                                 default = nil)
  if valid_592172 != nil:
    section.add "X-Amz-Date", valid_592172
  var valid_592173 = header.getOrDefault("X-Amz-Credential")
  valid_592173 = validateParameter(valid_592173, JString, required = false,
                                 default = nil)
  if valid_592173 != nil:
    section.add "X-Amz-Credential", valid_592173
  var valid_592174 = header.getOrDefault("X-Amz-Security-Token")
  valid_592174 = validateParameter(valid_592174, JString, required = false,
                                 default = nil)
  if valid_592174 != nil:
    section.add "X-Amz-Security-Token", valid_592174
  var valid_592175 = header.getOrDefault("X-Amz-Algorithm")
  valid_592175 = validateParameter(valid_592175, JString, required = false,
                                 default = nil)
  if valid_592175 != nil:
    section.add "X-Amz-Algorithm", valid_592175
  var valid_592176 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592176 = validateParameter(valid_592176, JString, required = false,
                                 default = nil)
  if valid_592176 != nil:
    section.add "X-Amz-SignedHeaders", valid_592176
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OptionGroupDescription` field"
  var valid_592177 = formData.getOrDefault("OptionGroupDescription")
  valid_592177 = validateParameter(valid_592177, JString, required = true,
                                 default = nil)
  if valid_592177 != nil:
    section.add "OptionGroupDescription", valid_592177
  var valid_592178 = formData.getOrDefault("EngineName")
  valid_592178 = validateParameter(valid_592178, JString, required = true,
                                 default = nil)
  if valid_592178 != nil:
    section.add "EngineName", valid_592178
  var valid_592179 = formData.getOrDefault("MajorEngineVersion")
  valid_592179 = validateParameter(valid_592179, JString, required = true,
                                 default = nil)
  if valid_592179 != nil:
    section.add "MajorEngineVersion", valid_592179
  var valid_592180 = formData.getOrDefault("Tags")
  valid_592180 = validateParameter(valid_592180, JArray, required = false,
                                 default = nil)
  if valid_592180 != nil:
    section.add "Tags", valid_592180
  var valid_592181 = formData.getOrDefault("OptionGroupName")
  valid_592181 = validateParameter(valid_592181, JString, required = true,
                                 default = nil)
  if valid_592181 != nil:
    section.add "OptionGroupName", valid_592181
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592182: Call_PostCreateOptionGroup_592165; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_592182.validator(path, query, header, formData, body)
  let scheme = call_592182.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592182.url(scheme.get, call_592182.host, call_592182.base,
                         call_592182.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592182, url, valid)

proc call*(call_592183: Call_PostCreateOptionGroup_592165;
          OptionGroupDescription: string; EngineName: string;
          MajorEngineVersion: string; OptionGroupName: string;
          Action: string = "CreateOptionGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: string (required)
  var query_592184 = newJObject()
  var formData_592185 = newJObject()
  add(formData_592185, "OptionGroupDescription",
      newJString(OptionGroupDescription))
  add(formData_592185, "EngineName", newJString(EngineName))
  add(formData_592185, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_592184, "Action", newJString(Action))
  if Tags != nil:
    formData_592185.add "Tags", Tags
  add(formData_592185, "OptionGroupName", newJString(OptionGroupName))
  add(query_592184, "Version", newJString(Version))
  result = call_592183.call(nil, query_592184, nil, formData_592185, nil)

var postCreateOptionGroup* = Call_PostCreateOptionGroup_592165(
    name: "postCreateOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_PostCreateOptionGroup_592166, base: "/",
    url: url_PostCreateOptionGroup_592167, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOptionGroup_592145 = ref object of OpenApiRestCall_590348
proc url_GetCreateOptionGroup_592147(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateOptionGroup_592146(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: JString (required)
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EngineName` field"
  var valid_592148 = query.getOrDefault("EngineName")
  valid_592148 = validateParameter(valid_592148, JString, required = true,
                                 default = nil)
  if valid_592148 != nil:
    section.add "EngineName", valid_592148
  var valid_592149 = query.getOrDefault("OptionGroupDescription")
  valid_592149 = validateParameter(valid_592149, JString, required = true,
                                 default = nil)
  if valid_592149 != nil:
    section.add "OptionGroupDescription", valid_592149
  var valid_592150 = query.getOrDefault("Tags")
  valid_592150 = validateParameter(valid_592150, JArray, required = false,
                                 default = nil)
  if valid_592150 != nil:
    section.add "Tags", valid_592150
  var valid_592151 = query.getOrDefault("Action")
  valid_592151 = validateParameter(valid_592151, JString, required = true,
                                 default = newJString("CreateOptionGroup"))
  if valid_592151 != nil:
    section.add "Action", valid_592151
  var valid_592152 = query.getOrDefault("OptionGroupName")
  valid_592152 = validateParameter(valid_592152, JString, required = true,
                                 default = nil)
  if valid_592152 != nil:
    section.add "OptionGroupName", valid_592152
  var valid_592153 = query.getOrDefault("Version")
  valid_592153 = validateParameter(valid_592153, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592153 != nil:
    section.add "Version", valid_592153
  var valid_592154 = query.getOrDefault("MajorEngineVersion")
  valid_592154 = validateParameter(valid_592154, JString, required = true,
                                 default = nil)
  if valid_592154 != nil:
    section.add "MajorEngineVersion", valid_592154
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592155 = header.getOrDefault("X-Amz-Signature")
  valid_592155 = validateParameter(valid_592155, JString, required = false,
                                 default = nil)
  if valid_592155 != nil:
    section.add "X-Amz-Signature", valid_592155
  var valid_592156 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592156 = validateParameter(valid_592156, JString, required = false,
                                 default = nil)
  if valid_592156 != nil:
    section.add "X-Amz-Content-Sha256", valid_592156
  var valid_592157 = header.getOrDefault("X-Amz-Date")
  valid_592157 = validateParameter(valid_592157, JString, required = false,
                                 default = nil)
  if valid_592157 != nil:
    section.add "X-Amz-Date", valid_592157
  var valid_592158 = header.getOrDefault("X-Amz-Credential")
  valid_592158 = validateParameter(valid_592158, JString, required = false,
                                 default = nil)
  if valid_592158 != nil:
    section.add "X-Amz-Credential", valid_592158
  var valid_592159 = header.getOrDefault("X-Amz-Security-Token")
  valid_592159 = validateParameter(valid_592159, JString, required = false,
                                 default = nil)
  if valid_592159 != nil:
    section.add "X-Amz-Security-Token", valid_592159
  var valid_592160 = header.getOrDefault("X-Amz-Algorithm")
  valid_592160 = validateParameter(valid_592160, JString, required = false,
                                 default = nil)
  if valid_592160 != nil:
    section.add "X-Amz-Algorithm", valid_592160
  var valid_592161 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592161 = validateParameter(valid_592161, JString, required = false,
                                 default = nil)
  if valid_592161 != nil:
    section.add "X-Amz-SignedHeaders", valid_592161
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592162: Call_GetCreateOptionGroup_592145; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_592162.validator(path, query, header, formData, body)
  let scheme = call_592162.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592162.url(scheme.get, call_592162.host, call_592162.base,
                         call_592162.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592162, url, valid)

proc call*(call_592163: Call_GetCreateOptionGroup_592145; EngineName: string;
          OptionGroupDescription: string; OptionGroupName: string;
          MajorEngineVersion: string; Tags: JsonNode = nil;
          Action: string = "CreateOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: string (required)
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  var query_592164 = newJObject()
  add(query_592164, "EngineName", newJString(EngineName))
  add(query_592164, "OptionGroupDescription", newJString(OptionGroupDescription))
  if Tags != nil:
    query_592164.add "Tags", Tags
  add(query_592164, "Action", newJString(Action))
  add(query_592164, "OptionGroupName", newJString(OptionGroupName))
  add(query_592164, "Version", newJString(Version))
  add(query_592164, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_592163.call(nil, query_592164, nil, nil, nil)

var getCreateOptionGroup* = Call_GetCreateOptionGroup_592145(
    name: "getCreateOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_GetCreateOptionGroup_592146, base: "/",
    url: url_GetCreateOptionGroup_592147, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCustomAvailabilityZone_592202 = ref object of OpenApiRestCall_590348
proc url_PostDeleteCustomAvailabilityZone_592204(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteCustomAvailabilityZone_592203(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592205 = query.getOrDefault("Action")
  valid_592205 = validateParameter(valid_592205, JString, required = true, default = newJString(
      "DeleteCustomAvailabilityZone"))
  if valid_592205 != nil:
    section.add "Action", valid_592205
  var valid_592206 = query.getOrDefault("Version")
  valid_592206 = validateParameter(valid_592206, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592206 != nil:
    section.add "Version", valid_592206
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592207 = header.getOrDefault("X-Amz-Signature")
  valid_592207 = validateParameter(valid_592207, JString, required = false,
                                 default = nil)
  if valid_592207 != nil:
    section.add "X-Amz-Signature", valid_592207
  var valid_592208 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592208 = validateParameter(valid_592208, JString, required = false,
                                 default = nil)
  if valid_592208 != nil:
    section.add "X-Amz-Content-Sha256", valid_592208
  var valid_592209 = header.getOrDefault("X-Amz-Date")
  valid_592209 = validateParameter(valid_592209, JString, required = false,
                                 default = nil)
  if valid_592209 != nil:
    section.add "X-Amz-Date", valid_592209
  var valid_592210 = header.getOrDefault("X-Amz-Credential")
  valid_592210 = validateParameter(valid_592210, JString, required = false,
                                 default = nil)
  if valid_592210 != nil:
    section.add "X-Amz-Credential", valid_592210
  var valid_592211 = header.getOrDefault("X-Amz-Security-Token")
  valid_592211 = validateParameter(valid_592211, JString, required = false,
                                 default = nil)
  if valid_592211 != nil:
    section.add "X-Amz-Security-Token", valid_592211
  var valid_592212 = header.getOrDefault("X-Amz-Algorithm")
  valid_592212 = validateParameter(valid_592212, JString, required = false,
                                 default = nil)
  if valid_592212 != nil:
    section.add "X-Amz-Algorithm", valid_592212
  var valid_592213 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592213 = validateParameter(valid_592213, JString, required = false,
                                 default = nil)
  if valid_592213 != nil:
    section.add "X-Amz-SignedHeaders", valid_592213
  result.add "header", section
  ## parameters in `formData` object:
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The custom AZ identifier.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CustomAvailabilityZoneId` field"
  var valid_592214 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_592214 = validateParameter(valid_592214, JString, required = true,
                                 default = nil)
  if valid_592214 != nil:
    section.add "CustomAvailabilityZoneId", valid_592214
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592215: Call_PostDeleteCustomAvailabilityZone_592202;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_592215.validator(path, query, header, formData, body)
  let scheme = call_592215.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592215.url(scheme.get, call_592215.host, call_592215.base,
                         call_592215.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592215, url, valid)

proc call*(call_592216: Call_PostDeleteCustomAvailabilityZone_592202;
          CustomAvailabilityZoneId: string;
          Action: string = "DeleteCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteCustomAvailabilityZone
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The custom AZ identifier.
  ##   Version: string (required)
  var query_592217 = newJObject()
  var formData_592218 = newJObject()
  add(query_592217, "Action", newJString(Action))
  add(formData_592218, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_592217, "Version", newJString(Version))
  result = call_592216.call(nil, query_592217, nil, formData_592218, nil)

var postDeleteCustomAvailabilityZone* = Call_PostDeleteCustomAvailabilityZone_592202(
    name: "postDeleteCustomAvailabilityZone", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteCustomAvailabilityZone",
    validator: validate_PostDeleteCustomAvailabilityZone_592203, base: "/",
    url: url_PostDeleteCustomAvailabilityZone_592204,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCustomAvailabilityZone_592186 = ref object of OpenApiRestCall_590348
proc url_GetDeleteCustomAvailabilityZone_592188(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteCustomAvailabilityZone_592187(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The custom AZ identifier.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CustomAvailabilityZoneId` field"
  var valid_592189 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_592189 = validateParameter(valid_592189, JString, required = true,
                                 default = nil)
  if valid_592189 != nil:
    section.add "CustomAvailabilityZoneId", valid_592189
  var valid_592190 = query.getOrDefault("Action")
  valid_592190 = validateParameter(valid_592190, JString, required = true, default = newJString(
      "DeleteCustomAvailabilityZone"))
  if valid_592190 != nil:
    section.add "Action", valid_592190
  var valid_592191 = query.getOrDefault("Version")
  valid_592191 = validateParameter(valid_592191, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592191 != nil:
    section.add "Version", valid_592191
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592192 = header.getOrDefault("X-Amz-Signature")
  valid_592192 = validateParameter(valid_592192, JString, required = false,
                                 default = nil)
  if valid_592192 != nil:
    section.add "X-Amz-Signature", valid_592192
  var valid_592193 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592193 = validateParameter(valid_592193, JString, required = false,
                                 default = nil)
  if valid_592193 != nil:
    section.add "X-Amz-Content-Sha256", valid_592193
  var valid_592194 = header.getOrDefault("X-Amz-Date")
  valid_592194 = validateParameter(valid_592194, JString, required = false,
                                 default = nil)
  if valid_592194 != nil:
    section.add "X-Amz-Date", valid_592194
  var valid_592195 = header.getOrDefault("X-Amz-Credential")
  valid_592195 = validateParameter(valid_592195, JString, required = false,
                                 default = nil)
  if valid_592195 != nil:
    section.add "X-Amz-Credential", valid_592195
  var valid_592196 = header.getOrDefault("X-Amz-Security-Token")
  valid_592196 = validateParameter(valid_592196, JString, required = false,
                                 default = nil)
  if valid_592196 != nil:
    section.add "X-Amz-Security-Token", valid_592196
  var valid_592197 = header.getOrDefault("X-Amz-Algorithm")
  valid_592197 = validateParameter(valid_592197, JString, required = false,
                                 default = nil)
  if valid_592197 != nil:
    section.add "X-Amz-Algorithm", valid_592197
  var valid_592198 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592198 = validateParameter(valid_592198, JString, required = false,
                                 default = nil)
  if valid_592198 != nil:
    section.add "X-Amz-SignedHeaders", valid_592198
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592199: Call_GetDeleteCustomAvailabilityZone_592186;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_592199.validator(path, query, header, formData, body)
  let scheme = call_592199.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592199.url(scheme.get, call_592199.host, call_592199.base,
                         call_592199.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592199, url, valid)

proc call*(call_592200: Call_GetDeleteCustomAvailabilityZone_592186;
          CustomAvailabilityZoneId: string;
          Action: string = "DeleteCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteCustomAvailabilityZone
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The custom AZ identifier.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592201 = newJObject()
  add(query_592201, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_592201, "Action", newJString(Action))
  add(query_592201, "Version", newJString(Version))
  result = call_592200.call(nil, query_592201, nil, nil, nil)

var getDeleteCustomAvailabilityZone* = Call_GetDeleteCustomAvailabilityZone_592186(
    name: "getDeleteCustomAvailabilityZone", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteCustomAvailabilityZone",
    validator: validate_GetDeleteCustomAvailabilityZone_592187, base: "/",
    url: url_GetDeleteCustomAvailabilityZone_592188,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBCluster_592237 = ref object of OpenApiRestCall_590348
proc url_PostDeleteDBCluster_592239(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBCluster_592238(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592240 = query.getOrDefault("Action")
  valid_592240 = validateParameter(valid_592240, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_592240 != nil:
    section.add "Action", valid_592240
  var valid_592241 = query.getOrDefault("Version")
  valid_592241 = validateParameter(valid_592241, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592241 != nil:
    section.add "Version", valid_592241
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592242 = header.getOrDefault("X-Amz-Signature")
  valid_592242 = validateParameter(valid_592242, JString, required = false,
                                 default = nil)
  if valid_592242 != nil:
    section.add "X-Amz-Signature", valid_592242
  var valid_592243 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592243 = validateParameter(valid_592243, JString, required = false,
                                 default = nil)
  if valid_592243 != nil:
    section.add "X-Amz-Content-Sha256", valid_592243
  var valid_592244 = header.getOrDefault("X-Amz-Date")
  valid_592244 = validateParameter(valid_592244, JString, required = false,
                                 default = nil)
  if valid_592244 != nil:
    section.add "X-Amz-Date", valid_592244
  var valid_592245 = header.getOrDefault("X-Amz-Credential")
  valid_592245 = validateParameter(valid_592245, JString, required = false,
                                 default = nil)
  if valid_592245 != nil:
    section.add "X-Amz-Credential", valid_592245
  var valid_592246 = header.getOrDefault("X-Amz-Security-Token")
  valid_592246 = validateParameter(valid_592246, JString, required = false,
                                 default = nil)
  if valid_592246 != nil:
    section.add "X-Amz-Security-Token", valid_592246
  var valid_592247 = header.getOrDefault("X-Amz-Algorithm")
  valid_592247 = validateParameter(valid_592247, JString, required = false,
                                 default = nil)
  if valid_592247 != nil:
    section.add "X-Amz-Algorithm", valid_592247
  var valid_592248 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592248 = validateParameter(valid_592248, JString, required = false,
                                 default = nil)
  if valid_592248 != nil:
    section.add "X-Amz-SignedHeaders", valid_592248
  result.add "header", section
  ## parameters in `formData` object:
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip is not specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip is not specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_592249 = formData.getOrDefault("SkipFinalSnapshot")
  valid_592249 = validateParameter(valid_592249, JBool, required = false, default = nil)
  if valid_592249 != nil:
    section.add "SkipFinalSnapshot", valid_592249
  var valid_592250 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_592250 = validateParameter(valid_592250, JString, required = false,
                                 default = nil)
  if valid_592250 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_592250
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_592251 = formData.getOrDefault("DBClusterIdentifier")
  valid_592251 = validateParameter(valid_592251, JString, required = true,
                                 default = nil)
  if valid_592251 != nil:
    section.add "DBClusterIdentifier", valid_592251
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592252: Call_PostDeleteDBCluster_592237; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592252.validator(path, query, header, formData, body)
  let scheme = call_592252.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592252.url(scheme.get, call_592252.host, call_592252.base,
                         call_592252.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592252, url, valid)

proc call*(call_592253: Call_PostDeleteDBCluster_592237;
          DBClusterIdentifier: string; Action: string = "DeleteDBCluster";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip is not specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip is not specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_592254 = newJObject()
  var formData_592255 = newJObject()
  add(query_592254, "Action", newJString(Action))
  add(formData_592255, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_592255, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_592254, "Version", newJString(Version))
  add(formData_592255, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_592253.call(nil, query_592254, nil, formData_592255, nil)

var postDeleteDBCluster* = Call_PostDeleteDBCluster_592237(
    name: "postDeleteDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBCluster",
    validator: validate_PostDeleteDBCluster_592238, base: "/",
    url: url_PostDeleteDBCluster_592239, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBCluster_592219 = ref object of OpenApiRestCall_590348
proc url_GetDeleteDBCluster_592221(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBCluster_592220(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip is not specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip is not specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_592222 = query.getOrDefault("DBClusterIdentifier")
  valid_592222 = validateParameter(valid_592222, JString, required = true,
                                 default = nil)
  if valid_592222 != nil:
    section.add "DBClusterIdentifier", valid_592222
  var valid_592223 = query.getOrDefault("SkipFinalSnapshot")
  valid_592223 = validateParameter(valid_592223, JBool, required = false, default = nil)
  if valid_592223 != nil:
    section.add "SkipFinalSnapshot", valid_592223
  var valid_592224 = query.getOrDefault("Action")
  valid_592224 = validateParameter(valid_592224, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_592224 != nil:
    section.add "Action", valid_592224
  var valid_592225 = query.getOrDefault("Version")
  valid_592225 = validateParameter(valid_592225, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592225 != nil:
    section.add "Version", valid_592225
  var valid_592226 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_592226 = validateParameter(valid_592226, JString, required = false,
                                 default = nil)
  if valid_592226 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_592226
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592227 = header.getOrDefault("X-Amz-Signature")
  valid_592227 = validateParameter(valid_592227, JString, required = false,
                                 default = nil)
  if valid_592227 != nil:
    section.add "X-Amz-Signature", valid_592227
  var valid_592228 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592228 = validateParameter(valid_592228, JString, required = false,
                                 default = nil)
  if valid_592228 != nil:
    section.add "X-Amz-Content-Sha256", valid_592228
  var valid_592229 = header.getOrDefault("X-Amz-Date")
  valid_592229 = validateParameter(valid_592229, JString, required = false,
                                 default = nil)
  if valid_592229 != nil:
    section.add "X-Amz-Date", valid_592229
  var valid_592230 = header.getOrDefault("X-Amz-Credential")
  valid_592230 = validateParameter(valid_592230, JString, required = false,
                                 default = nil)
  if valid_592230 != nil:
    section.add "X-Amz-Credential", valid_592230
  var valid_592231 = header.getOrDefault("X-Amz-Security-Token")
  valid_592231 = validateParameter(valid_592231, JString, required = false,
                                 default = nil)
  if valid_592231 != nil:
    section.add "X-Amz-Security-Token", valid_592231
  var valid_592232 = header.getOrDefault("X-Amz-Algorithm")
  valid_592232 = validateParameter(valid_592232, JString, required = false,
                                 default = nil)
  if valid_592232 != nil:
    section.add "X-Amz-Algorithm", valid_592232
  var valid_592233 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592233 = validateParameter(valid_592233, JString, required = false,
                                 default = nil)
  if valid_592233 != nil:
    section.add "X-Amz-SignedHeaders", valid_592233
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592234: Call_GetDeleteDBCluster_592219; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592234.validator(path, query, header, formData, body)
  let scheme = call_592234.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592234.url(scheme.get, call_592234.host, call_592234.base,
                         call_592234.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592234, url, valid)

proc call*(call_592235: Call_GetDeleteDBCluster_592219;
          DBClusterIdentifier: string; SkipFinalSnapshot: bool = false;
          Action: string = "DeleteDBCluster"; Version: string = "2014-10-31";
          FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip is not specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip is not specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  var query_592236 = newJObject()
  add(query_592236, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_592236, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_592236, "Action", newJString(Action))
  add(query_592236, "Version", newJString(Version))
  add(query_592236, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_592235.call(nil, query_592236, nil, nil, nil)

var getDeleteDBCluster* = Call_GetDeleteDBCluster_592219(
    name: "getDeleteDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBCluster", validator: validate_GetDeleteDBCluster_592220,
    base: "/", url: url_GetDeleteDBCluster_592221,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterEndpoint_592272 = ref object of OpenApiRestCall_590348
proc url_PostDeleteDBClusterEndpoint_592274(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBClusterEndpoint_592273(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592275 = query.getOrDefault("Action")
  valid_592275 = validateParameter(valid_592275, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_592275 != nil:
    section.add "Action", valid_592275
  var valid_592276 = query.getOrDefault("Version")
  valid_592276 = validateParameter(valid_592276, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592276 != nil:
    section.add "Version", valid_592276
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592277 = header.getOrDefault("X-Amz-Signature")
  valid_592277 = validateParameter(valid_592277, JString, required = false,
                                 default = nil)
  if valid_592277 != nil:
    section.add "X-Amz-Signature", valid_592277
  var valid_592278 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592278 = validateParameter(valid_592278, JString, required = false,
                                 default = nil)
  if valid_592278 != nil:
    section.add "X-Amz-Content-Sha256", valid_592278
  var valid_592279 = header.getOrDefault("X-Amz-Date")
  valid_592279 = validateParameter(valid_592279, JString, required = false,
                                 default = nil)
  if valid_592279 != nil:
    section.add "X-Amz-Date", valid_592279
  var valid_592280 = header.getOrDefault("X-Amz-Credential")
  valid_592280 = validateParameter(valid_592280, JString, required = false,
                                 default = nil)
  if valid_592280 != nil:
    section.add "X-Amz-Credential", valid_592280
  var valid_592281 = header.getOrDefault("X-Amz-Security-Token")
  valid_592281 = validateParameter(valid_592281, JString, required = false,
                                 default = nil)
  if valid_592281 != nil:
    section.add "X-Amz-Security-Token", valid_592281
  var valid_592282 = header.getOrDefault("X-Amz-Algorithm")
  valid_592282 = validateParameter(valid_592282, JString, required = false,
                                 default = nil)
  if valid_592282 != nil:
    section.add "X-Amz-Algorithm", valid_592282
  var valid_592283 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592283 = validateParameter(valid_592283, JString, required = false,
                                 default = nil)
  if valid_592283 != nil:
    section.add "X-Amz-SignedHeaders", valid_592283
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_592284 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_592284 = validateParameter(valid_592284, JString, required = true,
                                 default = nil)
  if valid_592284 != nil:
    section.add "DBClusterEndpointIdentifier", valid_592284
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592285: Call_PostDeleteDBClusterEndpoint_592272; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592285.validator(path, query, header, formData, body)
  let scheme = call_592285.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592285.url(scheme.get, call_592285.host, call_592285.base,
                         call_592285.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592285, url, valid)

proc call*(call_592286: Call_PostDeleteDBClusterEndpoint_592272;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592287 = newJObject()
  var formData_592288 = newJObject()
  add(formData_592288, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_592287, "Action", newJString(Action))
  add(query_592287, "Version", newJString(Version))
  result = call_592286.call(nil, query_592287, nil, formData_592288, nil)

var postDeleteDBClusterEndpoint* = Call_PostDeleteDBClusterEndpoint_592272(
    name: "postDeleteDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_PostDeleteDBClusterEndpoint_592273, base: "/",
    url: url_PostDeleteDBClusterEndpoint_592274,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterEndpoint_592256 = ref object of OpenApiRestCall_590348
proc url_GetDeleteDBClusterEndpoint_592258(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBClusterEndpoint_592257(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_592259 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_592259 = validateParameter(valid_592259, JString, required = true,
                                 default = nil)
  if valid_592259 != nil:
    section.add "DBClusterEndpointIdentifier", valid_592259
  var valid_592260 = query.getOrDefault("Action")
  valid_592260 = validateParameter(valid_592260, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_592260 != nil:
    section.add "Action", valid_592260
  var valid_592261 = query.getOrDefault("Version")
  valid_592261 = validateParameter(valid_592261, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592261 != nil:
    section.add "Version", valid_592261
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592262 = header.getOrDefault("X-Amz-Signature")
  valid_592262 = validateParameter(valid_592262, JString, required = false,
                                 default = nil)
  if valid_592262 != nil:
    section.add "X-Amz-Signature", valid_592262
  var valid_592263 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592263 = validateParameter(valid_592263, JString, required = false,
                                 default = nil)
  if valid_592263 != nil:
    section.add "X-Amz-Content-Sha256", valid_592263
  var valid_592264 = header.getOrDefault("X-Amz-Date")
  valid_592264 = validateParameter(valid_592264, JString, required = false,
                                 default = nil)
  if valid_592264 != nil:
    section.add "X-Amz-Date", valid_592264
  var valid_592265 = header.getOrDefault("X-Amz-Credential")
  valid_592265 = validateParameter(valid_592265, JString, required = false,
                                 default = nil)
  if valid_592265 != nil:
    section.add "X-Amz-Credential", valid_592265
  var valid_592266 = header.getOrDefault("X-Amz-Security-Token")
  valid_592266 = validateParameter(valid_592266, JString, required = false,
                                 default = nil)
  if valid_592266 != nil:
    section.add "X-Amz-Security-Token", valid_592266
  var valid_592267 = header.getOrDefault("X-Amz-Algorithm")
  valid_592267 = validateParameter(valid_592267, JString, required = false,
                                 default = nil)
  if valid_592267 != nil:
    section.add "X-Amz-Algorithm", valid_592267
  var valid_592268 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592268 = validateParameter(valid_592268, JString, required = false,
                                 default = nil)
  if valid_592268 != nil:
    section.add "X-Amz-SignedHeaders", valid_592268
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592269: Call_GetDeleteDBClusterEndpoint_592256; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592269.validator(path, query, header, formData, body)
  let scheme = call_592269.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592269.url(scheme.get, call_592269.host, call_592269.base,
                         call_592269.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592269, url, valid)

proc call*(call_592270: Call_GetDeleteDBClusterEndpoint_592256;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592271 = newJObject()
  add(query_592271, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_592271, "Action", newJString(Action))
  add(query_592271, "Version", newJString(Version))
  result = call_592270.call(nil, query_592271, nil, nil, nil)

var getDeleteDBClusterEndpoint* = Call_GetDeleteDBClusterEndpoint_592256(
    name: "getDeleteDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_GetDeleteDBClusterEndpoint_592257, base: "/",
    url: url_GetDeleteDBClusterEndpoint_592258,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterParameterGroup_592305 = ref object of OpenApiRestCall_590348
proc url_PostDeleteDBClusterParameterGroup_592307(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBClusterParameterGroup_592306(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592308 = query.getOrDefault("Action")
  valid_592308 = validateParameter(valid_592308, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_592308 != nil:
    section.add "Action", valid_592308
  var valid_592309 = query.getOrDefault("Version")
  valid_592309 = validateParameter(valid_592309, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592309 != nil:
    section.add "Version", valid_592309
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592310 = header.getOrDefault("X-Amz-Signature")
  valid_592310 = validateParameter(valid_592310, JString, required = false,
                                 default = nil)
  if valid_592310 != nil:
    section.add "X-Amz-Signature", valid_592310
  var valid_592311 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592311 = validateParameter(valid_592311, JString, required = false,
                                 default = nil)
  if valid_592311 != nil:
    section.add "X-Amz-Content-Sha256", valid_592311
  var valid_592312 = header.getOrDefault("X-Amz-Date")
  valid_592312 = validateParameter(valid_592312, JString, required = false,
                                 default = nil)
  if valid_592312 != nil:
    section.add "X-Amz-Date", valid_592312
  var valid_592313 = header.getOrDefault("X-Amz-Credential")
  valid_592313 = validateParameter(valid_592313, JString, required = false,
                                 default = nil)
  if valid_592313 != nil:
    section.add "X-Amz-Credential", valid_592313
  var valid_592314 = header.getOrDefault("X-Amz-Security-Token")
  valid_592314 = validateParameter(valid_592314, JString, required = false,
                                 default = nil)
  if valid_592314 != nil:
    section.add "X-Amz-Security-Token", valid_592314
  var valid_592315 = header.getOrDefault("X-Amz-Algorithm")
  valid_592315 = validateParameter(valid_592315, JString, required = false,
                                 default = nil)
  if valid_592315 != nil:
    section.add "X-Amz-Algorithm", valid_592315
  var valid_592316 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592316 = validateParameter(valid_592316, JString, required = false,
                                 default = nil)
  if valid_592316 != nil:
    section.add "X-Amz-SignedHeaders", valid_592316
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_592317 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_592317 = validateParameter(valid_592317, JString, required = true,
                                 default = nil)
  if valid_592317 != nil:
    section.add "DBClusterParameterGroupName", valid_592317
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592318: Call_PostDeleteDBClusterParameterGroup_592305;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592318.validator(path, query, header, formData, body)
  let scheme = call_592318.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592318.url(scheme.get, call_592318.host, call_592318.base,
                         call_592318.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592318, url, valid)

proc call*(call_592319: Call_PostDeleteDBClusterParameterGroup_592305;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Version: string (required)
  var query_592320 = newJObject()
  var formData_592321 = newJObject()
  add(query_592320, "Action", newJString(Action))
  add(formData_592321, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_592320, "Version", newJString(Version))
  result = call_592319.call(nil, query_592320, nil, formData_592321, nil)

var postDeleteDBClusterParameterGroup* = Call_PostDeleteDBClusterParameterGroup_592305(
    name: "postDeleteDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_PostDeleteDBClusterParameterGroup_592306, base: "/",
    url: url_PostDeleteDBClusterParameterGroup_592307,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterParameterGroup_592289 = ref object of OpenApiRestCall_590348
proc url_GetDeleteDBClusterParameterGroup_592291(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBClusterParameterGroup_592290(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_592292 = query.getOrDefault("DBClusterParameterGroupName")
  valid_592292 = validateParameter(valid_592292, JString, required = true,
                                 default = nil)
  if valid_592292 != nil:
    section.add "DBClusterParameterGroupName", valid_592292
  var valid_592293 = query.getOrDefault("Action")
  valid_592293 = validateParameter(valid_592293, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_592293 != nil:
    section.add "Action", valid_592293
  var valid_592294 = query.getOrDefault("Version")
  valid_592294 = validateParameter(valid_592294, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592294 != nil:
    section.add "Version", valid_592294
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592295 = header.getOrDefault("X-Amz-Signature")
  valid_592295 = validateParameter(valid_592295, JString, required = false,
                                 default = nil)
  if valid_592295 != nil:
    section.add "X-Amz-Signature", valid_592295
  var valid_592296 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592296 = validateParameter(valid_592296, JString, required = false,
                                 default = nil)
  if valid_592296 != nil:
    section.add "X-Amz-Content-Sha256", valid_592296
  var valid_592297 = header.getOrDefault("X-Amz-Date")
  valid_592297 = validateParameter(valid_592297, JString, required = false,
                                 default = nil)
  if valid_592297 != nil:
    section.add "X-Amz-Date", valid_592297
  var valid_592298 = header.getOrDefault("X-Amz-Credential")
  valid_592298 = validateParameter(valid_592298, JString, required = false,
                                 default = nil)
  if valid_592298 != nil:
    section.add "X-Amz-Credential", valid_592298
  var valid_592299 = header.getOrDefault("X-Amz-Security-Token")
  valid_592299 = validateParameter(valid_592299, JString, required = false,
                                 default = nil)
  if valid_592299 != nil:
    section.add "X-Amz-Security-Token", valid_592299
  var valid_592300 = header.getOrDefault("X-Amz-Algorithm")
  valid_592300 = validateParameter(valid_592300, JString, required = false,
                                 default = nil)
  if valid_592300 != nil:
    section.add "X-Amz-Algorithm", valid_592300
  var valid_592301 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592301 = validateParameter(valid_592301, JString, required = false,
                                 default = nil)
  if valid_592301 != nil:
    section.add "X-Amz-SignedHeaders", valid_592301
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592302: Call_GetDeleteDBClusterParameterGroup_592289;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592302.validator(path, query, header, formData, body)
  let scheme = call_592302.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592302.url(scheme.get, call_592302.host, call_592302.base,
                         call_592302.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592302, url, valid)

proc call*(call_592303: Call_GetDeleteDBClusterParameterGroup_592289;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592304 = newJObject()
  add(query_592304, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_592304, "Action", newJString(Action))
  add(query_592304, "Version", newJString(Version))
  result = call_592303.call(nil, query_592304, nil, nil, nil)

var getDeleteDBClusterParameterGroup* = Call_GetDeleteDBClusterParameterGroup_592289(
    name: "getDeleteDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_GetDeleteDBClusterParameterGroup_592290, base: "/",
    url: url_GetDeleteDBClusterParameterGroup_592291,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterSnapshot_592338 = ref object of OpenApiRestCall_590348
proc url_PostDeleteDBClusterSnapshot_592340(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBClusterSnapshot_592339(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592341 = query.getOrDefault("Action")
  valid_592341 = validateParameter(valid_592341, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_592341 != nil:
    section.add "Action", valid_592341
  var valid_592342 = query.getOrDefault("Version")
  valid_592342 = validateParameter(valid_592342, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592342 != nil:
    section.add "Version", valid_592342
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592343 = header.getOrDefault("X-Amz-Signature")
  valid_592343 = validateParameter(valid_592343, JString, required = false,
                                 default = nil)
  if valid_592343 != nil:
    section.add "X-Amz-Signature", valid_592343
  var valid_592344 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592344 = validateParameter(valid_592344, JString, required = false,
                                 default = nil)
  if valid_592344 != nil:
    section.add "X-Amz-Content-Sha256", valid_592344
  var valid_592345 = header.getOrDefault("X-Amz-Date")
  valid_592345 = validateParameter(valid_592345, JString, required = false,
                                 default = nil)
  if valid_592345 != nil:
    section.add "X-Amz-Date", valid_592345
  var valid_592346 = header.getOrDefault("X-Amz-Credential")
  valid_592346 = validateParameter(valid_592346, JString, required = false,
                                 default = nil)
  if valid_592346 != nil:
    section.add "X-Amz-Credential", valid_592346
  var valid_592347 = header.getOrDefault("X-Amz-Security-Token")
  valid_592347 = validateParameter(valid_592347, JString, required = false,
                                 default = nil)
  if valid_592347 != nil:
    section.add "X-Amz-Security-Token", valid_592347
  var valid_592348 = header.getOrDefault("X-Amz-Algorithm")
  valid_592348 = validateParameter(valid_592348, JString, required = false,
                                 default = nil)
  if valid_592348 != nil:
    section.add "X-Amz-Algorithm", valid_592348
  var valid_592349 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592349 = validateParameter(valid_592349, JString, required = false,
                                 default = nil)
  if valid_592349 != nil:
    section.add "X-Amz-SignedHeaders", valid_592349
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_592350 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_592350 = validateParameter(valid_592350, JString, required = true,
                                 default = nil)
  if valid_592350 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_592350
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592351: Call_PostDeleteDBClusterSnapshot_592338; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592351.validator(path, query, header, formData, body)
  let scheme = call_592351.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592351.url(scheme.get, call_592351.host, call_592351.base,
                         call_592351.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592351, url, valid)

proc call*(call_592352: Call_PostDeleteDBClusterSnapshot_592338;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592353 = newJObject()
  var formData_592354 = newJObject()
  add(formData_592354, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_592353, "Action", newJString(Action))
  add(query_592353, "Version", newJString(Version))
  result = call_592352.call(nil, query_592353, nil, formData_592354, nil)

var postDeleteDBClusterSnapshot* = Call_PostDeleteDBClusterSnapshot_592338(
    name: "postDeleteDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_PostDeleteDBClusterSnapshot_592339, base: "/",
    url: url_PostDeleteDBClusterSnapshot_592340,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterSnapshot_592322 = ref object of OpenApiRestCall_590348
proc url_GetDeleteDBClusterSnapshot_592324(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBClusterSnapshot_592323(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_592325 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_592325 = validateParameter(valid_592325, JString, required = true,
                                 default = nil)
  if valid_592325 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_592325
  var valid_592326 = query.getOrDefault("Action")
  valid_592326 = validateParameter(valid_592326, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_592326 != nil:
    section.add "Action", valid_592326
  var valid_592327 = query.getOrDefault("Version")
  valid_592327 = validateParameter(valid_592327, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592327 != nil:
    section.add "Version", valid_592327
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592328 = header.getOrDefault("X-Amz-Signature")
  valid_592328 = validateParameter(valid_592328, JString, required = false,
                                 default = nil)
  if valid_592328 != nil:
    section.add "X-Amz-Signature", valid_592328
  var valid_592329 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592329 = validateParameter(valid_592329, JString, required = false,
                                 default = nil)
  if valid_592329 != nil:
    section.add "X-Amz-Content-Sha256", valid_592329
  var valid_592330 = header.getOrDefault("X-Amz-Date")
  valid_592330 = validateParameter(valid_592330, JString, required = false,
                                 default = nil)
  if valid_592330 != nil:
    section.add "X-Amz-Date", valid_592330
  var valid_592331 = header.getOrDefault("X-Amz-Credential")
  valid_592331 = validateParameter(valid_592331, JString, required = false,
                                 default = nil)
  if valid_592331 != nil:
    section.add "X-Amz-Credential", valid_592331
  var valid_592332 = header.getOrDefault("X-Amz-Security-Token")
  valid_592332 = validateParameter(valid_592332, JString, required = false,
                                 default = nil)
  if valid_592332 != nil:
    section.add "X-Amz-Security-Token", valid_592332
  var valid_592333 = header.getOrDefault("X-Amz-Algorithm")
  valid_592333 = validateParameter(valid_592333, JString, required = false,
                                 default = nil)
  if valid_592333 != nil:
    section.add "X-Amz-Algorithm", valid_592333
  var valid_592334 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592334 = validateParameter(valid_592334, JString, required = false,
                                 default = nil)
  if valid_592334 != nil:
    section.add "X-Amz-SignedHeaders", valid_592334
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592335: Call_GetDeleteDBClusterSnapshot_592322; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592335.validator(path, query, header, formData, body)
  let scheme = call_592335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592335.url(scheme.get, call_592335.host, call_592335.base,
                         call_592335.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592335, url, valid)

proc call*(call_592336: Call_GetDeleteDBClusterSnapshot_592322;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592337 = newJObject()
  add(query_592337, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_592337, "Action", newJString(Action))
  add(query_592337, "Version", newJString(Version))
  result = call_592336.call(nil, query_592337, nil, nil, nil)

var getDeleteDBClusterSnapshot* = Call_GetDeleteDBClusterSnapshot_592322(
    name: "getDeleteDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_GetDeleteDBClusterSnapshot_592323, base: "/",
    url: url_GetDeleteDBClusterSnapshot_592324,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstance_592374 = ref object of OpenApiRestCall_590348
proc url_PostDeleteDBInstance_592376(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBInstance_592375(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592377 = query.getOrDefault("Action")
  valid_592377 = validateParameter(valid_592377, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_592377 != nil:
    section.add "Action", valid_592377
  var valid_592378 = query.getOrDefault("Version")
  valid_592378 = validateParameter(valid_592378, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592378 != nil:
    section.add "Version", valid_592378
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592379 = header.getOrDefault("X-Amz-Signature")
  valid_592379 = validateParameter(valid_592379, JString, required = false,
                                 default = nil)
  if valid_592379 != nil:
    section.add "X-Amz-Signature", valid_592379
  var valid_592380 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592380 = validateParameter(valid_592380, JString, required = false,
                                 default = nil)
  if valid_592380 != nil:
    section.add "X-Amz-Content-Sha256", valid_592380
  var valid_592381 = header.getOrDefault("X-Amz-Date")
  valid_592381 = validateParameter(valid_592381, JString, required = false,
                                 default = nil)
  if valid_592381 != nil:
    section.add "X-Amz-Date", valid_592381
  var valid_592382 = header.getOrDefault("X-Amz-Credential")
  valid_592382 = validateParameter(valid_592382, JString, required = false,
                                 default = nil)
  if valid_592382 != nil:
    section.add "X-Amz-Credential", valid_592382
  var valid_592383 = header.getOrDefault("X-Amz-Security-Token")
  valid_592383 = validateParameter(valid_592383, JString, required = false,
                                 default = nil)
  if valid_592383 != nil:
    section.add "X-Amz-Security-Token", valid_592383
  var valid_592384 = header.getOrDefault("X-Amz-Algorithm")
  valid_592384 = validateParameter(valid_592384, JString, required = false,
                                 default = nil)
  if valid_592384 != nil:
    section.add "X-Amz-Algorithm", valid_592384
  var valid_592385 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592385 = validateParameter(valid_592385, JString, required = false,
                                 default = nil)
  if valid_592385 != nil:
    section.add "X-Amz-SignedHeaders", valid_592385
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip is not specified, a DB snapshot is created before the DB instance is deleted. By default, skip is not specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip is not specified.</p> </note>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_592386 = formData.getOrDefault("DBInstanceIdentifier")
  valid_592386 = validateParameter(valid_592386, JString, required = true,
                                 default = nil)
  if valid_592386 != nil:
    section.add "DBInstanceIdentifier", valid_592386
  var valid_592387 = formData.getOrDefault("SkipFinalSnapshot")
  valid_592387 = validateParameter(valid_592387, JBool, required = false, default = nil)
  if valid_592387 != nil:
    section.add "SkipFinalSnapshot", valid_592387
  var valid_592388 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_592388 = validateParameter(valid_592388, JString, required = false,
                                 default = nil)
  if valid_592388 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_592388
  var valid_592389 = formData.getOrDefault("DeleteAutomatedBackups")
  valid_592389 = validateParameter(valid_592389, JBool, required = false, default = nil)
  if valid_592389 != nil:
    section.add "DeleteAutomatedBackups", valid_592389
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592390: Call_PostDeleteDBInstance_592374; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_592390.validator(path, query, header, formData, body)
  let scheme = call_592390.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592390.url(scheme.get, call_592390.host, call_592390.base,
                         call_592390.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592390, url, valid)

proc call*(call_592391: Call_PostDeleteDBInstance_592374;
          DBInstanceIdentifier: string; Action: string = "DeleteDBInstance";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"; DeleteAutomatedBackups: bool = false): Recallable =
  ## postDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip is not specified, a DB snapshot is created before the DB instance is deleted. By default, skip is not specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip is not specified.</p> </note>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Version: string (required)
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  var query_592392 = newJObject()
  var formData_592393 = newJObject()
  add(formData_592393, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_592392, "Action", newJString(Action))
  add(formData_592393, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_592393, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_592392, "Version", newJString(Version))
  add(formData_592393, "DeleteAutomatedBackups", newJBool(DeleteAutomatedBackups))
  result = call_592391.call(nil, query_592392, nil, formData_592393, nil)

var postDeleteDBInstance* = Call_PostDeleteDBInstance_592374(
    name: "postDeleteDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_PostDeleteDBInstance_592375, base: "/",
    url: url_PostDeleteDBInstance_592376, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstance_592355 = ref object of OpenApiRestCall_590348
proc url_GetDeleteDBInstance_592357(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBInstance_592356(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip is not specified, a DB snapshot is created before the DB instance is deleted. By default, skip is not specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip is not specified.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  section = newJObject()
  var valid_592358 = query.getOrDefault("DeleteAutomatedBackups")
  valid_592358 = validateParameter(valid_592358, JBool, required = false, default = nil)
  if valid_592358 != nil:
    section.add "DeleteAutomatedBackups", valid_592358
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_592359 = query.getOrDefault("DBInstanceIdentifier")
  valid_592359 = validateParameter(valid_592359, JString, required = true,
                                 default = nil)
  if valid_592359 != nil:
    section.add "DBInstanceIdentifier", valid_592359
  var valid_592360 = query.getOrDefault("SkipFinalSnapshot")
  valid_592360 = validateParameter(valid_592360, JBool, required = false, default = nil)
  if valid_592360 != nil:
    section.add "SkipFinalSnapshot", valid_592360
  var valid_592361 = query.getOrDefault("Action")
  valid_592361 = validateParameter(valid_592361, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_592361 != nil:
    section.add "Action", valid_592361
  var valid_592362 = query.getOrDefault("Version")
  valid_592362 = validateParameter(valid_592362, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592362 != nil:
    section.add "Version", valid_592362
  var valid_592363 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_592363 = validateParameter(valid_592363, JString, required = false,
                                 default = nil)
  if valid_592363 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_592363
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592364 = header.getOrDefault("X-Amz-Signature")
  valid_592364 = validateParameter(valid_592364, JString, required = false,
                                 default = nil)
  if valid_592364 != nil:
    section.add "X-Amz-Signature", valid_592364
  var valid_592365 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592365 = validateParameter(valid_592365, JString, required = false,
                                 default = nil)
  if valid_592365 != nil:
    section.add "X-Amz-Content-Sha256", valid_592365
  var valid_592366 = header.getOrDefault("X-Amz-Date")
  valid_592366 = validateParameter(valid_592366, JString, required = false,
                                 default = nil)
  if valid_592366 != nil:
    section.add "X-Amz-Date", valid_592366
  var valid_592367 = header.getOrDefault("X-Amz-Credential")
  valid_592367 = validateParameter(valid_592367, JString, required = false,
                                 default = nil)
  if valid_592367 != nil:
    section.add "X-Amz-Credential", valid_592367
  var valid_592368 = header.getOrDefault("X-Amz-Security-Token")
  valid_592368 = validateParameter(valid_592368, JString, required = false,
                                 default = nil)
  if valid_592368 != nil:
    section.add "X-Amz-Security-Token", valid_592368
  var valid_592369 = header.getOrDefault("X-Amz-Algorithm")
  valid_592369 = validateParameter(valid_592369, JString, required = false,
                                 default = nil)
  if valid_592369 != nil:
    section.add "X-Amz-Algorithm", valid_592369
  var valid_592370 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592370 = validateParameter(valid_592370, JString, required = false,
                                 default = nil)
  if valid_592370 != nil:
    section.add "X-Amz-SignedHeaders", valid_592370
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592371: Call_GetDeleteDBInstance_592355; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_592371.validator(path, query, header, formData, body)
  let scheme = call_592371.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592371.url(scheme.get, call_592371.host, call_592371.base,
                         call_592371.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592371, url, valid)

proc call*(call_592372: Call_GetDeleteDBInstance_592355;
          DBInstanceIdentifier: string; DeleteAutomatedBackups: bool = false;
          SkipFinalSnapshot: bool = false; Action: string = "DeleteDBInstance";
          Version: string = "2014-10-31"; FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip is not specified, a DB snapshot is created before the DB instance is deleted. By default, skip is not specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip is not specified.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  var query_592373 = newJObject()
  add(query_592373, "DeleteAutomatedBackups", newJBool(DeleteAutomatedBackups))
  add(query_592373, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_592373, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_592373, "Action", newJString(Action))
  add(query_592373, "Version", newJString(Version))
  add(query_592373, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_592372.call(nil, query_592373, nil, nil, nil)

var getDeleteDBInstance* = Call_GetDeleteDBInstance_592355(
    name: "getDeleteDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_GetDeleteDBInstance_592356, base: "/",
    url: url_GetDeleteDBInstance_592357, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstanceAutomatedBackup_592410 = ref object of OpenApiRestCall_590348
proc url_PostDeleteDBInstanceAutomatedBackup_592412(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBInstanceAutomatedBackup_592411(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592413 = query.getOrDefault("Action")
  valid_592413 = validateParameter(valid_592413, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_592413 != nil:
    section.add "Action", valid_592413
  var valid_592414 = query.getOrDefault("Version")
  valid_592414 = validateParameter(valid_592414, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592414 != nil:
    section.add "Version", valid_592414
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592415 = header.getOrDefault("X-Amz-Signature")
  valid_592415 = validateParameter(valid_592415, JString, required = false,
                                 default = nil)
  if valid_592415 != nil:
    section.add "X-Amz-Signature", valid_592415
  var valid_592416 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592416 = validateParameter(valid_592416, JString, required = false,
                                 default = nil)
  if valid_592416 != nil:
    section.add "X-Amz-Content-Sha256", valid_592416
  var valid_592417 = header.getOrDefault("X-Amz-Date")
  valid_592417 = validateParameter(valid_592417, JString, required = false,
                                 default = nil)
  if valid_592417 != nil:
    section.add "X-Amz-Date", valid_592417
  var valid_592418 = header.getOrDefault("X-Amz-Credential")
  valid_592418 = validateParameter(valid_592418, JString, required = false,
                                 default = nil)
  if valid_592418 != nil:
    section.add "X-Amz-Credential", valid_592418
  var valid_592419 = header.getOrDefault("X-Amz-Security-Token")
  valid_592419 = validateParameter(valid_592419, JString, required = false,
                                 default = nil)
  if valid_592419 != nil:
    section.add "X-Amz-Security-Token", valid_592419
  var valid_592420 = header.getOrDefault("X-Amz-Algorithm")
  valid_592420 = validateParameter(valid_592420, JString, required = false,
                                 default = nil)
  if valid_592420 != nil:
    section.add "X-Amz-Algorithm", valid_592420
  var valid_592421 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592421 = validateParameter(valid_592421, JString, required = false,
                                 default = nil)
  if valid_592421 != nil:
    section.add "X-Amz-SignedHeaders", valid_592421
  result.add "header", section
  ## parameters in `formData` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DbiResourceId` field"
  var valid_592422 = formData.getOrDefault("DbiResourceId")
  valid_592422 = validateParameter(valid_592422, JString, required = true,
                                 default = nil)
  if valid_592422 != nil:
    section.add "DbiResourceId", valid_592422
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592423: Call_PostDeleteDBInstanceAutomatedBackup_592410;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_592423.validator(path, query, header, formData, body)
  let scheme = call_592423.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592423.url(scheme.get, call_592423.host, call_592423.base,
                         call_592423.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592423, url, valid)

proc call*(call_592424: Call_PostDeleteDBInstanceAutomatedBackup_592410;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592425 = newJObject()
  var formData_592426 = newJObject()
  add(formData_592426, "DbiResourceId", newJString(DbiResourceId))
  add(query_592425, "Action", newJString(Action))
  add(query_592425, "Version", newJString(Version))
  result = call_592424.call(nil, query_592425, nil, formData_592426, nil)

var postDeleteDBInstanceAutomatedBackup* = Call_PostDeleteDBInstanceAutomatedBackup_592410(
    name: "postDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_PostDeleteDBInstanceAutomatedBackup_592411, base: "/",
    url: url_PostDeleteDBInstanceAutomatedBackup_592412,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstanceAutomatedBackup_592394 = ref object of OpenApiRestCall_590348
proc url_GetDeleteDBInstanceAutomatedBackup_592396(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBInstanceAutomatedBackup_592395(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DbiResourceId` field"
  var valid_592397 = query.getOrDefault("DbiResourceId")
  valid_592397 = validateParameter(valid_592397, JString, required = true,
                                 default = nil)
  if valid_592397 != nil:
    section.add "DbiResourceId", valid_592397
  var valid_592398 = query.getOrDefault("Action")
  valid_592398 = validateParameter(valid_592398, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_592398 != nil:
    section.add "Action", valid_592398
  var valid_592399 = query.getOrDefault("Version")
  valid_592399 = validateParameter(valid_592399, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592399 != nil:
    section.add "Version", valid_592399
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592400 = header.getOrDefault("X-Amz-Signature")
  valid_592400 = validateParameter(valid_592400, JString, required = false,
                                 default = nil)
  if valid_592400 != nil:
    section.add "X-Amz-Signature", valid_592400
  var valid_592401 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592401 = validateParameter(valid_592401, JString, required = false,
                                 default = nil)
  if valid_592401 != nil:
    section.add "X-Amz-Content-Sha256", valid_592401
  var valid_592402 = header.getOrDefault("X-Amz-Date")
  valid_592402 = validateParameter(valid_592402, JString, required = false,
                                 default = nil)
  if valid_592402 != nil:
    section.add "X-Amz-Date", valid_592402
  var valid_592403 = header.getOrDefault("X-Amz-Credential")
  valid_592403 = validateParameter(valid_592403, JString, required = false,
                                 default = nil)
  if valid_592403 != nil:
    section.add "X-Amz-Credential", valid_592403
  var valid_592404 = header.getOrDefault("X-Amz-Security-Token")
  valid_592404 = validateParameter(valid_592404, JString, required = false,
                                 default = nil)
  if valid_592404 != nil:
    section.add "X-Amz-Security-Token", valid_592404
  var valid_592405 = header.getOrDefault("X-Amz-Algorithm")
  valid_592405 = validateParameter(valid_592405, JString, required = false,
                                 default = nil)
  if valid_592405 != nil:
    section.add "X-Amz-Algorithm", valid_592405
  var valid_592406 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592406 = validateParameter(valid_592406, JString, required = false,
                                 default = nil)
  if valid_592406 != nil:
    section.add "X-Amz-SignedHeaders", valid_592406
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592407: Call_GetDeleteDBInstanceAutomatedBackup_592394;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_592407.validator(path, query, header, formData, body)
  let scheme = call_592407.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592407.url(scheme.get, call_592407.host, call_592407.base,
                         call_592407.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592407, url, valid)

proc call*(call_592408: Call_GetDeleteDBInstanceAutomatedBackup_592394;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592409 = newJObject()
  add(query_592409, "DbiResourceId", newJString(DbiResourceId))
  add(query_592409, "Action", newJString(Action))
  add(query_592409, "Version", newJString(Version))
  result = call_592408.call(nil, query_592409, nil, nil, nil)

var getDeleteDBInstanceAutomatedBackup* = Call_GetDeleteDBInstanceAutomatedBackup_592394(
    name: "getDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_GetDeleteDBInstanceAutomatedBackup_592395, base: "/",
    url: url_GetDeleteDBInstanceAutomatedBackup_592396,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBParameterGroup_592443 = ref object of OpenApiRestCall_590348
proc url_PostDeleteDBParameterGroup_592445(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBParameterGroup_592444(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592446 = query.getOrDefault("Action")
  valid_592446 = validateParameter(valid_592446, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_592446 != nil:
    section.add "Action", valid_592446
  var valid_592447 = query.getOrDefault("Version")
  valid_592447 = validateParameter(valid_592447, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592447 != nil:
    section.add "Version", valid_592447
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592448 = header.getOrDefault("X-Amz-Signature")
  valid_592448 = validateParameter(valid_592448, JString, required = false,
                                 default = nil)
  if valid_592448 != nil:
    section.add "X-Amz-Signature", valid_592448
  var valid_592449 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592449 = validateParameter(valid_592449, JString, required = false,
                                 default = nil)
  if valid_592449 != nil:
    section.add "X-Amz-Content-Sha256", valid_592449
  var valid_592450 = header.getOrDefault("X-Amz-Date")
  valid_592450 = validateParameter(valid_592450, JString, required = false,
                                 default = nil)
  if valid_592450 != nil:
    section.add "X-Amz-Date", valid_592450
  var valid_592451 = header.getOrDefault("X-Amz-Credential")
  valid_592451 = validateParameter(valid_592451, JString, required = false,
                                 default = nil)
  if valid_592451 != nil:
    section.add "X-Amz-Credential", valid_592451
  var valid_592452 = header.getOrDefault("X-Amz-Security-Token")
  valid_592452 = validateParameter(valid_592452, JString, required = false,
                                 default = nil)
  if valid_592452 != nil:
    section.add "X-Amz-Security-Token", valid_592452
  var valid_592453 = header.getOrDefault("X-Amz-Algorithm")
  valid_592453 = validateParameter(valid_592453, JString, required = false,
                                 default = nil)
  if valid_592453 != nil:
    section.add "X-Amz-Algorithm", valid_592453
  var valid_592454 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592454 = validateParameter(valid_592454, JString, required = false,
                                 default = nil)
  if valid_592454 != nil:
    section.add "X-Amz-SignedHeaders", valid_592454
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_592455 = formData.getOrDefault("DBParameterGroupName")
  valid_592455 = validateParameter(valid_592455, JString, required = true,
                                 default = nil)
  if valid_592455 != nil:
    section.add "DBParameterGroupName", valid_592455
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592456: Call_PostDeleteDBParameterGroup_592443; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_592456.validator(path, query, header, formData, body)
  let scheme = call_592456.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592456.url(scheme.get, call_592456.host, call_592456.base,
                         call_592456.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592456, url, valid)

proc call*(call_592457: Call_PostDeleteDBParameterGroup_592443;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592458 = newJObject()
  var formData_592459 = newJObject()
  add(formData_592459, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_592458, "Action", newJString(Action))
  add(query_592458, "Version", newJString(Version))
  result = call_592457.call(nil, query_592458, nil, formData_592459, nil)

var postDeleteDBParameterGroup* = Call_PostDeleteDBParameterGroup_592443(
    name: "postDeleteDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_PostDeleteDBParameterGroup_592444, base: "/",
    url: url_PostDeleteDBParameterGroup_592445,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBParameterGroup_592427 = ref object of OpenApiRestCall_590348
proc url_GetDeleteDBParameterGroup_592429(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBParameterGroup_592428(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_592430 = query.getOrDefault("DBParameterGroupName")
  valid_592430 = validateParameter(valid_592430, JString, required = true,
                                 default = nil)
  if valid_592430 != nil:
    section.add "DBParameterGroupName", valid_592430
  var valid_592431 = query.getOrDefault("Action")
  valid_592431 = validateParameter(valid_592431, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_592431 != nil:
    section.add "Action", valid_592431
  var valid_592432 = query.getOrDefault("Version")
  valid_592432 = validateParameter(valid_592432, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592432 != nil:
    section.add "Version", valid_592432
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592433 = header.getOrDefault("X-Amz-Signature")
  valid_592433 = validateParameter(valid_592433, JString, required = false,
                                 default = nil)
  if valid_592433 != nil:
    section.add "X-Amz-Signature", valid_592433
  var valid_592434 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592434 = validateParameter(valid_592434, JString, required = false,
                                 default = nil)
  if valid_592434 != nil:
    section.add "X-Amz-Content-Sha256", valid_592434
  var valid_592435 = header.getOrDefault("X-Amz-Date")
  valid_592435 = validateParameter(valid_592435, JString, required = false,
                                 default = nil)
  if valid_592435 != nil:
    section.add "X-Amz-Date", valid_592435
  var valid_592436 = header.getOrDefault("X-Amz-Credential")
  valid_592436 = validateParameter(valid_592436, JString, required = false,
                                 default = nil)
  if valid_592436 != nil:
    section.add "X-Amz-Credential", valid_592436
  var valid_592437 = header.getOrDefault("X-Amz-Security-Token")
  valid_592437 = validateParameter(valid_592437, JString, required = false,
                                 default = nil)
  if valid_592437 != nil:
    section.add "X-Amz-Security-Token", valid_592437
  var valid_592438 = header.getOrDefault("X-Amz-Algorithm")
  valid_592438 = validateParameter(valid_592438, JString, required = false,
                                 default = nil)
  if valid_592438 != nil:
    section.add "X-Amz-Algorithm", valid_592438
  var valid_592439 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592439 = validateParameter(valid_592439, JString, required = false,
                                 default = nil)
  if valid_592439 != nil:
    section.add "X-Amz-SignedHeaders", valid_592439
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592440: Call_GetDeleteDBParameterGroup_592427; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_592440.validator(path, query, header, formData, body)
  let scheme = call_592440.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592440.url(scheme.get, call_592440.host, call_592440.base,
                         call_592440.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592440, url, valid)

proc call*(call_592441: Call_GetDeleteDBParameterGroup_592427;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592442 = newJObject()
  add(query_592442, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_592442, "Action", newJString(Action))
  add(query_592442, "Version", newJString(Version))
  result = call_592441.call(nil, query_592442, nil, nil, nil)

var getDeleteDBParameterGroup* = Call_GetDeleteDBParameterGroup_592427(
    name: "getDeleteDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_GetDeleteDBParameterGroup_592428, base: "/",
    url: url_GetDeleteDBParameterGroup_592429,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSecurityGroup_592476 = ref object of OpenApiRestCall_590348
proc url_PostDeleteDBSecurityGroup_592478(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBSecurityGroup_592477(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592479 = query.getOrDefault("Action")
  valid_592479 = validateParameter(valid_592479, JString, required = true,
                                 default = newJString("DeleteDBSecurityGroup"))
  if valid_592479 != nil:
    section.add "Action", valid_592479
  var valid_592480 = query.getOrDefault("Version")
  valid_592480 = validateParameter(valid_592480, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592480 != nil:
    section.add "Version", valid_592480
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592481 = header.getOrDefault("X-Amz-Signature")
  valid_592481 = validateParameter(valid_592481, JString, required = false,
                                 default = nil)
  if valid_592481 != nil:
    section.add "X-Amz-Signature", valid_592481
  var valid_592482 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592482 = validateParameter(valid_592482, JString, required = false,
                                 default = nil)
  if valid_592482 != nil:
    section.add "X-Amz-Content-Sha256", valid_592482
  var valid_592483 = header.getOrDefault("X-Amz-Date")
  valid_592483 = validateParameter(valid_592483, JString, required = false,
                                 default = nil)
  if valid_592483 != nil:
    section.add "X-Amz-Date", valid_592483
  var valid_592484 = header.getOrDefault("X-Amz-Credential")
  valid_592484 = validateParameter(valid_592484, JString, required = false,
                                 default = nil)
  if valid_592484 != nil:
    section.add "X-Amz-Credential", valid_592484
  var valid_592485 = header.getOrDefault("X-Amz-Security-Token")
  valid_592485 = validateParameter(valid_592485, JString, required = false,
                                 default = nil)
  if valid_592485 != nil:
    section.add "X-Amz-Security-Token", valid_592485
  var valid_592486 = header.getOrDefault("X-Amz-Algorithm")
  valid_592486 = validateParameter(valid_592486, JString, required = false,
                                 default = nil)
  if valid_592486 != nil:
    section.add "X-Amz-Algorithm", valid_592486
  var valid_592487 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592487 = validateParameter(valid_592487, JString, required = false,
                                 default = nil)
  if valid_592487 != nil:
    section.add "X-Amz-SignedHeaders", valid_592487
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_592488 = formData.getOrDefault("DBSecurityGroupName")
  valid_592488 = validateParameter(valid_592488, JString, required = true,
                                 default = nil)
  if valid_592488 != nil:
    section.add "DBSecurityGroupName", valid_592488
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592489: Call_PostDeleteDBSecurityGroup_592476; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_592489.validator(path, query, header, formData, body)
  let scheme = call_592489.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592489.url(scheme.get, call_592489.host, call_592489.base,
                         call_592489.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592489, url, valid)

proc call*(call_592490: Call_PostDeleteDBSecurityGroup_592476;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592491 = newJObject()
  var formData_592492 = newJObject()
  add(formData_592492, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_592491, "Action", newJString(Action))
  add(query_592491, "Version", newJString(Version))
  result = call_592490.call(nil, query_592491, nil, formData_592492, nil)

var postDeleteDBSecurityGroup* = Call_PostDeleteDBSecurityGroup_592476(
    name: "postDeleteDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_PostDeleteDBSecurityGroup_592477, base: "/",
    url: url_PostDeleteDBSecurityGroup_592478,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSecurityGroup_592460 = ref object of OpenApiRestCall_590348
proc url_GetDeleteDBSecurityGroup_592462(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBSecurityGroup_592461(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_592463 = query.getOrDefault("DBSecurityGroupName")
  valid_592463 = validateParameter(valid_592463, JString, required = true,
                                 default = nil)
  if valid_592463 != nil:
    section.add "DBSecurityGroupName", valid_592463
  var valid_592464 = query.getOrDefault("Action")
  valid_592464 = validateParameter(valid_592464, JString, required = true,
                                 default = newJString("DeleteDBSecurityGroup"))
  if valid_592464 != nil:
    section.add "Action", valid_592464
  var valid_592465 = query.getOrDefault("Version")
  valid_592465 = validateParameter(valid_592465, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592465 != nil:
    section.add "Version", valid_592465
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592466 = header.getOrDefault("X-Amz-Signature")
  valid_592466 = validateParameter(valid_592466, JString, required = false,
                                 default = nil)
  if valid_592466 != nil:
    section.add "X-Amz-Signature", valid_592466
  var valid_592467 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592467 = validateParameter(valid_592467, JString, required = false,
                                 default = nil)
  if valid_592467 != nil:
    section.add "X-Amz-Content-Sha256", valid_592467
  var valid_592468 = header.getOrDefault("X-Amz-Date")
  valid_592468 = validateParameter(valid_592468, JString, required = false,
                                 default = nil)
  if valid_592468 != nil:
    section.add "X-Amz-Date", valid_592468
  var valid_592469 = header.getOrDefault("X-Amz-Credential")
  valid_592469 = validateParameter(valid_592469, JString, required = false,
                                 default = nil)
  if valid_592469 != nil:
    section.add "X-Amz-Credential", valid_592469
  var valid_592470 = header.getOrDefault("X-Amz-Security-Token")
  valid_592470 = validateParameter(valid_592470, JString, required = false,
                                 default = nil)
  if valid_592470 != nil:
    section.add "X-Amz-Security-Token", valid_592470
  var valid_592471 = header.getOrDefault("X-Amz-Algorithm")
  valid_592471 = validateParameter(valid_592471, JString, required = false,
                                 default = nil)
  if valid_592471 != nil:
    section.add "X-Amz-Algorithm", valid_592471
  var valid_592472 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592472 = validateParameter(valid_592472, JString, required = false,
                                 default = nil)
  if valid_592472 != nil:
    section.add "X-Amz-SignedHeaders", valid_592472
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592473: Call_GetDeleteDBSecurityGroup_592460; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_592473.validator(path, query, header, formData, body)
  let scheme = call_592473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592473.url(scheme.get, call_592473.host, call_592473.base,
                         call_592473.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592473, url, valid)

proc call*(call_592474: Call_GetDeleteDBSecurityGroup_592460;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592475 = newJObject()
  add(query_592475, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_592475, "Action", newJString(Action))
  add(query_592475, "Version", newJString(Version))
  result = call_592474.call(nil, query_592475, nil, nil, nil)

var getDeleteDBSecurityGroup* = Call_GetDeleteDBSecurityGroup_592460(
    name: "getDeleteDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_GetDeleteDBSecurityGroup_592461, base: "/",
    url: url_GetDeleteDBSecurityGroup_592462, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSnapshot_592509 = ref object of OpenApiRestCall_590348
proc url_PostDeleteDBSnapshot_592511(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBSnapshot_592510(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592512 = query.getOrDefault("Action")
  valid_592512 = validateParameter(valid_592512, JString, required = true,
                                 default = newJString("DeleteDBSnapshot"))
  if valid_592512 != nil:
    section.add "Action", valid_592512
  var valid_592513 = query.getOrDefault("Version")
  valid_592513 = validateParameter(valid_592513, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592513 != nil:
    section.add "Version", valid_592513
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592514 = header.getOrDefault("X-Amz-Signature")
  valid_592514 = validateParameter(valid_592514, JString, required = false,
                                 default = nil)
  if valid_592514 != nil:
    section.add "X-Amz-Signature", valid_592514
  var valid_592515 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592515 = validateParameter(valid_592515, JString, required = false,
                                 default = nil)
  if valid_592515 != nil:
    section.add "X-Amz-Content-Sha256", valid_592515
  var valid_592516 = header.getOrDefault("X-Amz-Date")
  valid_592516 = validateParameter(valid_592516, JString, required = false,
                                 default = nil)
  if valid_592516 != nil:
    section.add "X-Amz-Date", valid_592516
  var valid_592517 = header.getOrDefault("X-Amz-Credential")
  valid_592517 = validateParameter(valid_592517, JString, required = false,
                                 default = nil)
  if valid_592517 != nil:
    section.add "X-Amz-Credential", valid_592517
  var valid_592518 = header.getOrDefault("X-Amz-Security-Token")
  valid_592518 = validateParameter(valid_592518, JString, required = false,
                                 default = nil)
  if valid_592518 != nil:
    section.add "X-Amz-Security-Token", valid_592518
  var valid_592519 = header.getOrDefault("X-Amz-Algorithm")
  valid_592519 = validateParameter(valid_592519, JString, required = false,
                                 default = nil)
  if valid_592519 != nil:
    section.add "X-Amz-Algorithm", valid_592519
  var valid_592520 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592520 = validateParameter(valid_592520, JString, required = false,
                                 default = nil)
  if valid_592520 != nil:
    section.add "X-Amz-SignedHeaders", valid_592520
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_592521 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_592521 = validateParameter(valid_592521, JString, required = true,
                                 default = nil)
  if valid_592521 != nil:
    section.add "DBSnapshotIdentifier", valid_592521
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592522: Call_PostDeleteDBSnapshot_592509; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_592522.validator(path, query, header, formData, body)
  let scheme = call_592522.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592522.url(scheme.get, call_592522.host, call_592522.base,
                         call_592522.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592522, url, valid)

proc call*(call_592523: Call_PostDeleteDBSnapshot_592509;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592524 = newJObject()
  var formData_592525 = newJObject()
  add(formData_592525, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_592524, "Action", newJString(Action))
  add(query_592524, "Version", newJString(Version))
  result = call_592523.call(nil, query_592524, nil, formData_592525, nil)

var postDeleteDBSnapshot* = Call_PostDeleteDBSnapshot_592509(
    name: "postDeleteDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_PostDeleteDBSnapshot_592510, base: "/",
    url: url_PostDeleteDBSnapshot_592511, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSnapshot_592493 = ref object of OpenApiRestCall_590348
proc url_GetDeleteDBSnapshot_592495(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBSnapshot_592494(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_592496 = query.getOrDefault("DBSnapshotIdentifier")
  valid_592496 = validateParameter(valid_592496, JString, required = true,
                                 default = nil)
  if valid_592496 != nil:
    section.add "DBSnapshotIdentifier", valid_592496
  var valid_592497 = query.getOrDefault("Action")
  valid_592497 = validateParameter(valid_592497, JString, required = true,
                                 default = newJString("DeleteDBSnapshot"))
  if valid_592497 != nil:
    section.add "Action", valid_592497
  var valid_592498 = query.getOrDefault("Version")
  valid_592498 = validateParameter(valid_592498, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592498 != nil:
    section.add "Version", valid_592498
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592499 = header.getOrDefault("X-Amz-Signature")
  valid_592499 = validateParameter(valid_592499, JString, required = false,
                                 default = nil)
  if valid_592499 != nil:
    section.add "X-Amz-Signature", valid_592499
  var valid_592500 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592500 = validateParameter(valid_592500, JString, required = false,
                                 default = nil)
  if valid_592500 != nil:
    section.add "X-Amz-Content-Sha256", valid_592500
  var valid_592501 = header.getOrDefault("X-Amz-Date")
  valid_592501 = validateParameter(valid_592501, JString, required = false,
                                 default = nil)
  if valid_592501 != nil:
    section.add "X-Amz-Date", valid_592501
  var valid_592502 = header.getOrDefault("X-Amz-Credential")
  valid_592502 = validateParameter(valid_592502, JString, required = false,
                                 default = nil)
  if valid_592502 != nil:
    section.add "X-Amz-Credential", valid_592502
  var valid_592503 = header.getOrDefault("X-Amz-Security-Token")
  valid_592503 = validateParameter(valid_592503, JString, required = false,
                                 default = nil)
  if valid_592503 != nil:
    section.add "X-Amz-Security-Token", valid_592503
  var valid_592504 = header.getOrDefault("X-Amz-Algorithm")
  valid_592504 = validateParameter(valid_592504, JString, required = false,
                                 default = nil)
  if valid_592504 != nil:
    section.add "X-Amz-Algorithm", valid_592504
  var valid_592505 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592505 = validateParameter(valid_592505, JString, required = false,
                                 default = nil)
  if valid_592505 != nil:
    section.add "X-Amz-SignedHeaders", valid_592505
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592506: Call_GetDeleteDBSnapshot_592493; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_592506.validator(path, query, header, formData, body)
  let scheme = call_592506.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592506.url(scheme.get, call_592506.host, call_592506.base,
                         call_592506.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592506, url, valid)

proc call*(call_592507: Call_GetDeleteDBSnapshot_592493;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592508 = newJObject()
  add(query_592508, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_592508, "Action", newJString(Action))
  add(query_592508, "Version", newJString(Version))
  result = call_592507.call(nil, query_592508, nil, nil, nil)

var getDeleteDBSnapshot* = Call_GetDeleteDBSnapshot_592493(
    name: "getDeleteDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_GetDeleteDBSnapshot_592494, base: "/",
    url: url_GetDeleteDBSnapshot_592495, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSubnetGroup_592542 = ref object of OpenApiRestCall_590348
proc url_PostDeleteDBSubnetGroup_592544(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBSubnetGroup_592543(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592545 = query.getOrDefault("Action")
  valid_592545 = validateParameter(valid_592545, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_592545 != nil:
    section.add "Action", valid_592545
  var valid_592546 = query.getOrDefault("Version")
  valid_592546 = validateParameter(valid_592546, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592546 != nil:
    section.add "Version", valid_592546
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592547 = header.getOrDefault("X-Amz-Signature")
  valid_592547 = validateParameter(valid_592547, JString, required = false,
                                 default = nil)
  if valid_592547 != nil:
    section.add "X-Amz-Signature", valid_592547
  var valid_592548 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592548 = validateParameter(valid_592548, JString, required = false,
                                 default = nil)
  if valid_592548 != nil:
    section.add "X-Amz-Content-Sha256", valid_592548
  var valid_592549 = header.getOrDefault("X-Amz-Date")
  valid_592549 = validateParameter(valid_592549, JString, required = false,
                                 default = nil)
  if valid_592549 != nil:
    section.add "X-Amz-Date", valid_592549
  var valid_592550 = header.getOrDefault("X-Amz-Credential")
  valid_592550 = validateParameter(valid_592550, JString, required = false,
                                 default = nil)
  if valid_592550 != nil:
    section.add "X-Amz-Credential", valid_592550
  var valid_592551 = header.getOrDefault("X-Amz-Security-Token")
  valid_592551 = validateParameter(valid_592551, JString, required = false,
                                 default = nil)
  if valid_592551 != nil:
    section.add "X-Amz-Security-Token", valid_592551
  var valid_592552 = header.getOrDefault("X-Amz-Algorithm")
  valid_592552 = validateParameter(valid_592552, JString, required = false,
                                 default = nil)
  if valid_592552 != nil:
    section.add "X-Amz-Algorithm", valid_592552
  var valid_592553 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592553 = validateParameter(valid_592553, JString, required = false,
                                 default = nil)
  if valid_592553 != nil:
    section.add "X-Amz-SignedHeaders", valid_592553
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_592554 = formData.getOrDefault("DBSubnetGroupName")
  valid_592554 = validateParameter(valid_592554, JString, required = true,
                                 default = nil)
  if valid_592554 != nil:
    section.add "DBSubnetGroupName", valid_592554
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592555: Call_PostDeleteDBSubnetGroup_592542; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_592555.validator(path, query, header, formData, body)
  let scheme = call_592555.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592555.url(scheme.get, call_592555.host, call_592555.base,
                         call_592555.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592555, url, valid)

proc call*(call_592556: Call_PostDeleteDBSubnetGroup_592542;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_592557 = newJObject()
  var formData_592558 = newJObject()
  add(query_592557, "Action", newJString(Action))
  add(formData_592558, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_592557, "Version", newJString(Version))
  result = call_592556.call(nil, query_592557, nil, formData_592558, nil)

var postDeleteDBSubnetGroup* = Call_PostDeleteDBSubnetGroup_592542(
    name: "postDeleteDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_PostDeleteDBSubnetGroup_592543, base: "/",
    url: url_PostDeleteDBSubnetGroup_592544, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSubnetGroup_592526 = ref object of OpenApiRestCall_590348
proc url_GetDeleteDBSubnetGroup_592528(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBSubnetGroup_592527(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592529 = query.getOrDefault("Action")
  valid_592529 = validateParameter(valid_592529, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_592529 != nil:
    section.add "Action", valid_592529
  var valid_592530 = query.getOrDefault("DBSubnetGroupName")
  valid_592530 = validateParameter(valid_592530, JString, required = true,
                                 default = nil)
  if valid_592530 != nil:
    section.add "DBSubnetGroupName", valid_592530
  var valid_592531 = query.getOrDefault("Version")
  valid_592531 = validateParameter(valid_592531, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592531 != nil:
    section.add "Version", valid_592531
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592532 = header.getOrDefault("X-Amz-Signature")
  valid_592532 = validateParameter(valid_592532, JString, required = false,
                                 default = nil)
  if valid_592532 != nil:
    section.add "X-Amz-Signature", valid_592532
  var valid_592533 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592533 = validateParameter(valid_592533, JString, required = false,
                                 default = nil)
  if valid_592533 != nil:
    section.add "X-Amz-Content-Sha256", valid_592533
  var valid_592534 = header.getOrDefault("X-Amz-Date")
  valid_592534 = validateParameter(valid_592534, JString, required = false,
                                 default = nil)
  if valid_592534 != nil:
    section.add "X-Amz-Date", valid_592534
  var valid_592535 = header.getOrDefault("X-Amz-Credential")
  valid_592535 = validateParameter(valid_592535, JString, required = false,
                                 default = nil)
  if valid_592535 != nil:
    section.add "X-Amz-Credential", valid_592535
  var valid_592536 = header.getOrDefault("X-Amz-Security-Token")
  valid_592536 = validateParameter(valid_592536, JString, required = false,
                                 default = nil)
  if valid_592536 != nil:
    section.add "X-Amz-Security-Token", valid_592536
  var valid_592537 = header.getOrDefault("X-Amz-Algorithm")
  valid_592537 = validateParameter(valid_592537, JString, required = false,
                                 default = nil)
  if valid_592537 != nil:
    section.add "X-Amz-Algorithm", valid_592537
  var valid_592538 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592538 = validateParameter(valid_592538, JString, required = false,
                                 default = nil)
  if valid_592538 != nil:
    section.add "X-Amz-SignedHeaders", valid_592538
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592539: Call_GetDeleteDBSubnetGroup_592526; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_592539.validator(path, query, header, formData, body)
  let scheme = call_592539.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592539.url(scheme.get, call_592539.host, call_592539.base,
                         call_592539.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592539, url, valid)

proc call*(call_592540: Call_GetDeleteDBSubnetGroup_592526;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_592541 = newJObject()
  add(query_592541, "Action", newJString(Action))
  add(query_592541, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_592541, "Version", newJString(Version))
  result = call_592540.call(nil, query_592541, nil, nil, nil)

var getDeleteDBSubnetGroup* = Call_GetDeleteDBSubnetGroup_592526(
    name: "getDeleteDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_GetDeleteDBSubnetGroup_592527, base: "/",
    url: url_GetDeleteDBSubnetGroup_592528, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteEventSubscription_592575 = ref object of OpenApiRestCall_590348
proc url_PostDeleteEventSubscription_592577(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteEventSubscription_592576(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592578 = query.getOrDefault("Action")
  valid_592578 = validateParameter(valid_592578, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_592578 != nil:
    section.add "Action", valid_592578
  var valid_592579 = query.getOrDefault("Version")
  valid_592579 = validateParameter(valid_592579, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592579 != nil:
    section.add "Version", valid_592579
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592580 = header.getOrDefault("X-Amz-Signature")
  valid_592580 = validateParameter(valid_592580, JString, required = false,
                                 default = nil)
  if valid_592580 != nil:
    section.add "X-Amz-Signature", valid_592580
  var valid_592581 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592581 = validateParameter(valid_592581, JString, required = false,
                                 default = nil)
  if valid_592581 != nil:
    section.add "X-Amz-Content-Sha256", valid_592581
  var valid_592582 = header.getOrDefault("X-Amz-Date")
  valid_592582 = validateParameter(valid_592582, JString, required = false,
                                 default = nil)
  if valid_592582 != nil:
    section.add "X-Amz-Date", valid_592582
  var valid_592583 = header.getOrDefault("X-Amz-Credential")
  valid_592583 = validateParameter(valid_592583, JString, required = false,
                                 default = nil)
  if valid_592583 != nil:
    section.add "X-Amz-Credential", valid_592583
  var valid_592584 = header.getOrDefault("X-Amz-Security-Token")
  valid_592584 = validateParameter(valid_592584, JString, required = false,
                                 default = nil)
  if valid_592584 != nil:
    section.add "X-Amz-Security-Token", valid_592584
  var valid_592585 = header.getOrDefault("X-Amz-Algorithm")
  valid_592585 = validateParameter(valid_592585, JString, required = false,
                                 default = nil)
  if valid_592585 != nil:
    section.add "X-Amz-Algorithm", valid_592585
  var valid_592586 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592586 = validateParameter(valid_592586, JString, required = false,
                                 default = nil)
  if valid_592586 != nil:
    section.add "X-Amz-SignedHeaders", valid_592586
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_592587 = formData.getOrDefault("SubscriptionName")
  valid_592587 = validateParameter(valid_592587, JString, required = true,
                                 default = nil)
  if valid_592587 != nil:
    section.add "SubscriptionName", valid_592587
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592588: Call_PostDeleteEventSubscription_592575; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_592588.validator(path, query, header, formData, body)
  let scheme = call_592588.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592588.url(scheme.get, call_592588.host, call_592588.base,
                         call_592588.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592588, url, valid)

proc call*(call_592589: Call_PostDeleteEventSubscription_592575;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592590 = newJObject()
  var formData_592591 = newJObject()
  add(formData_592591, "SubscriptionName", newJString(SubscriptionName))
  add(query_592590, "Action", newJString(Action))
  add(query_592590, "Version", newJString(Version))
  result = call_592589.call(nil, query_592590, nil, formData_592591, nil)

var postDeleteEventSubscription* = Call_PostDeleteEventSubscription_592575(
    name: "postDeleteEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_PostDeleteEventSubscription_592576, base: "/",
    url: url_PostDeleteEventSubscription_592577,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteEventSubscription_592559 = ref object of OpenApiRestCall_590348
proc url_GetDeleteEventSubscription_592561(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteEventSubscription_592560(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_592562 = query.getOrDefault("SubscriptionName")
  valid_592562 = validateParameter(valid_592562, JString, required = true,
                                 default = nil)
  if valid_592562 != nil:
    section.add "SubscriptionName", valid_592562
  var valid_592563 = query.getOrDefault("Action")
  valid_592563 = validateParameter(valid_592563, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_592563 != nil:
    section.add "Action", valid_592563
  var valid_592564 = query.getOrDefault("Version")
  valid_592564 = validateParameter(valid_592564, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592564 != nil:
    section.add "Version", valid_592564
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592565 = header.getOrDefault("X-Amz-Signature")
  valid_592565 = validateParameter(valid_592565, JString, required = false,
                                 default = nil)
  if valid_592565 != nil:
    section.add "X-Amz-Signature", valid_592565
  var valid_592566 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592566 = validateParameter(valid_592566, JString, required = false,
                                 default = nil)
  if valid_592566 != nil:
    section.add "X-Amz-Content-Sha256", valid_592566
  var valid_592567 = header.getOrDefault("X-Amz-Date")
  valid_592567 = validateParameter(valid_592567, JString, required = false,
                                 default = nil)
  if valid_592567 != nil:
    section.add "X-Amz-Date", valid_592567
  var valid_592568 = header.getOrDefault("X-Amz-Credential")
  valid_592568 = validateParameter(valid_592568, JString, required = false,
                                 default = nil)
  if valid_592568 != nil:
    section.add "X-Amz-Credential", valid_592568
  var valid_592569 = header.getOrDefault("X-Amz-Security-Token")
  valid_592569 = validateParameter(valid_592569, JString, required = false,
                                 default = nil)
  if valid_592569 != nil:
    section.add "X-Amz-Security-Token", valid_592569
  var valid_592570 = header.getOrDefault("X-Amz-Algorithm")
  valid_592570 = validateParameter(valid_592570, JString, required = false,
                                 default = nil)
  if valid_592570 != nil:
    section.add "X-Amz-Algorithm", valid_592570
  var valid_592571 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592571 = validateParameter(valid_592571, JString, required = false,
                                 default = nil)
  if valid_592571 != nil:
    section.add "X-Amz-SignedHeaders", valid_592571
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592572: Call_GetDeleteEventSubscription_592559; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_592572.validator(path, query, header, formData, body)
  let scheme = call_592572.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592572.url(scheme.get, call_592572.host, call_592572.base,
                         call_592572.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592572, url, valid)

proc call*(call_592573: Call_GetDeleteEventSubscription_592559;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592574 = newJObject()
  add(query_592574, "SubscriptionName", newJString(SubscriptionName))
  add(query_592574, "Action", newJString(Action))
  add(query_592574, "Version", newJString(Version))
  result = call_592573.call(nil, query_592574, nil, nil, nil)

var getDeleteEventSubscription* = Call_GetDeleteEventSubscription_592559(
    name: "getDeleteEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_GetDeleteEventSubscription_592560, base: "/",
    url: url_GetDeleteEventSubscription_592561,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGlobalCluster_592608 = ref object of OpenApiRestCall_590348
proc url_PostDeleteGlobalCluster_592610(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteGlobalCluster_592609(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592611 = query.getOrDefault("Action")
  valid_592611 = validateParameter(valid_592611, JString, required = true,
                                 default = newJString("DeleteGlobalCluster"))
  if valid_592611 != nil:
    section.add "Action", valid_592611
  var valid_592612 = query.getOrDefault("Version")
  valid_592612 = validateParameter(valid_592612, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592612 != nil:
    section.add "Version", valid_592612
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592613 = header.getOrDefault("X-Amz-Signature")
  valid_592613 = validateParameter(valid_592613, JString, required = false,
                                 default = nil)
  if valid_592613 != nil:
    section.add "X-Amz-Signature", valid_592613
  var valid_592614 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592614 = validateParameter(valid_592614, JString, required = false,
                                 default = nil)
  if valid_592614 != nil:
    section.add "X-Amz-Content-Sha256", valid_592614
  var valid_592615 = header.getOrDefault("X-Amz-Date")
  valid_592615 = validateParameter(valid_592615, JString, required = false,
                                 default = nil)
  if valid_592615 != nil:
    section.add "X-Amz-Date", valid_592615
  var valid_592616 = header.getOrDefault("X-Amz-Credential")
  valid_592616 = validateParameter(valid_592616, JString, required = false,
                                 default = nil)
  if valid_592616 != nil:
    section.add "X-Amz-Credential", valid_592616
  var valid_592617 = header.getOrDefault("X-Amz-Security-Token")
  valid_592617 = validateParameter(valid_592617, JString, required = false,
                                 default = nil)
  if valid_592617 != nil:
    section.add "X-Amz-Security-Token", valid_592617
  var valid_592618 = header.getOrDefault("X-Amz-Algorithm")
  valid_592618 = validateParameter(valid_592618, JString, required = false,
                                 default = nil)
  if valid_592618 != nil:
    section.add "X-Amz-Algorithm", valid_592618
  var valid_592619 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592619 = validateParameter(valid_592619, JString, required = false,
                                 default = nil)
  if valid_592619 != nil:
    section.add "X-Amz-SignedHeaders", valid_592619
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `GlobalClusterIdentifier` field"
  var valid_592620 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_592620 = validateParameter(valid_592620, JString, required = true,
                                 default = nil)
  if valid_592620 != nil:
    section.add "GlobalClusterIdentifier", valid_592620
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592621: Call_PostDeleteGlobalCluster_592608; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592621.validator(path, query, header, formData, body)
  let scheme = call_592621.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592621.url(scheme.get, call_592621.host, call_592621.base,
                         call_592621.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592621, url, valid)

proc call*(call_592622: Call_PostDeleteGlobalCluster_592608;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592623 = newJObject()
  var formData_592624 = newJObject()
  add(formData_592624, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_592623, "Action", newJString(Action))
  add(query_592623, "Version", newJString(Version))
  result = call_592622.call(nil, query_592623, nil, formData_592624, nil)

var postDeleteGlobalCluster* = Call_PostDeleteGlobalCluster_592608(
    name: "postDeleteGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_PostDeleteGlobalCluster_592609, base: "/",
    url: url_PostDeleteGlobalCluster_592610, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGlobalCluster_592592 = ref object of OpenApiRestCall_590348
proc url_GetDeleteGlobalCluster_592594(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteGlobalCluster_592593(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `GlobalClusterIdentifier` field"
  var valid_592595 = query.getOrDefault("GlobalClusterIdentifier")
  valid_592595 = validateParameter(valid_592595, JString, required = true,
                                 default = nil)
  if valid_592595 != nil:
    section.add "GlobalClusterIdentifier", valid_592595
  var valid_592596 = query.getOrDefault("Action")
  valid_592596 = validateParameter(valid_592596, JString, required = true,
                                 default = newJString("DeleteGlobalCluster"))
  if valid_592596 != nil:
    section.add "Action", valid_592596
  var valid_592597 = query.getOrDefault("Version")
  valid_592597 = validateParameter(valid_592597, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592597 != nil:
    section.add "Version", valid_592597
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592598 = header.getOrDefault("X-Amz-Signature")
  valid_592598 = validateParameter(valid_592598, JString, required = false,
                                 default = nil)
  if valid_592598 != nil:
    section.add "X-Amz-Signature", valid_592598
  var valid_592599 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592599 = validateParameter(valid_592599, JString, required = false,
                                 default = nil)
  if valid_592599 != nil:
    section.add "X-Amz-Content-Sha256", valid_592599
  var valid_592600 = header.getOrDefault("X-Amz-Date")
  valid_592600 = validateParameter(valid_592600, JString, required = false,
                                 default = nil)
  if valid_592600 != nil:
    section.add "X-Amz-Date", valid_592600
  var valid_592601 = header.getOrDefault("X-Amz-Credential")
  valid_592601 = validateParameter(valid_592601, JString, required = false,
                                 default = nil)
  if valid_592601 != nil:
    section.add "X-Amz-Credential", valid_592601
  var valid_592602 = header.getOrDefault("X-Amz-Security-Token")
  valid_592602 = validateParameter(valid_592602, JString, required = false,
                                 default = nil)
  if valid_592602 != nil:
    section.add "X-Amz-Security-Token", valid_592602
  var valid_592603 = header.getOrDefault("X-Amz-Algorithm")
  valid_592603 = validateParameter(valid_592603, JString, required = false,
                                 default = nil)
  if valid_592603 != nil:
    section.add "X-Amz-Algorithm", valid_592603
  var valid_592604 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592604 = validateParameter(valid_592604, JString, required = false,
                                 default = nil)
  if valid_592604 != nil:
    section.add "X-Amz-SignedHeaders", valid_592604
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592605: Call_GetDeleteGlobalCluster_592592; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592605.validator(path, query, header, formData, body)
  let scheme = call_592605.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592605.url(scheme.get, call_592605.host, call_592605.base,
                         call_592605.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592605, url, valid)

proc call*(call_592606: Call_GetDeleteGlobalCluster_592592;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592607 = newJObject()
  add(query_592607, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_592607, "Action", newJString(Action))
  add(query_592607, "Version", newJString(Version))
  result = call_592606.call(nil, query_592607, nil, nil, nil)

var getDeleteGlobalCluster* = Call_GetDeleteGlobalCluster_592592(
    name: "getDeleteGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_GetDeleteGlobalCluster_592593, base: "/",
    url: url_GetDeleteGlobalCluster_592594, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteInstallationMedia_592641 = ref object of OpenApiRestCall_590348
proc url_PostDeleteInstallationMedia_592643(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteInstallationMedia_592642(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the installation media for an on-premises, bring your own media (BYOM) DB engine, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592644 = query.getOrDefault("Action")
  valid_592644 = validateParameter(valid_592644, JString, required = true, default = newJString(
      "DeleteInstallationMedia"))
  if valid_592644 != nil:
    section.add "Action", valid_592644
  var valid_592645 = query.getOrDefault("Version")
  valid_592645 = validateParameter(valid_592645, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592645 != nil:
    section.add "Version", valid_592645
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592646 = header.getOrDefault("X-Amz-Signature")
  valid_592646 = validateParameter(valid_592646, JString, required = false,
                                 default = nil)
  if valid_592646 != nil:
    section.add "X-Amz-Signature", valid_592646
  var valid_592647 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592647 = validateParameter(valid_592647, JString, required = false,
                                 default = nil)
  if valid_592647 != nil:
    section.add "X-Amz-Content-Sha256", valid_592647
  var valid_592648 = header.getOrDefault("X-Amz-Date")
  valid_592648 = validateParameter(valid_592648, JString, required = false,
                                 default = nil)
  if valid_592648 != nil:
    section.add "X-Amz-Date", valid_592648
  var valid_592649 = header.getOrDefault("X-Amz-Credential")
  valid_592649 = validateParameter(valid_592649, JString, required = false,
                                 default = nil)
  if valid_592649 != nil:
    section.add "X-Amz-Credential", valid_592649
  var valid_592650 = header.getOrDefault("X-Amz-Security-Token")
  valid_592650 = validateParameter(valid_592650, JString, required = false,
                                 default = nil)
  if valid_592650 != nil:
    section.add "X-Amz-Security-Token", valid_592650
  var valid_592651 = header.getOrDefault("X-Amz-Algorithm")
  valid_592651 = validateParameter(valid_592651, JString, required = false,
                                 default = nil)
  if valid_592651 != nil:
    section.add "X-Amz-Algorithm", valid_592651
  var valid_592652 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592652 = validateParameter(valid_592652, JString, required = false,
                                 default = nil)
  if valid_592652 != nil:
    section.add "X-Amz-SignedHeaders", valid_592652
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstallationMediaId: JString (required)
  ##                      : The installation media ID.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstallationMediaId` field"
  var valid_592653 = formData.getOrDefault("InstallationMediaId")
  valid_592653 = validateParameter(valid_592653, JString, required = true,
                                 default = nil)
  if valid_592653 != nil:
    section.add "InstallationMediaId", valid_592653
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592654: Call_PostDeleteInstallationMedia_592641; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the installation media for an on-premises, bring your own media (BYOM) DB engine, such as Microsoft SQL Server.
  ## 
  let valid = call_592654.validator(path, query, header, formData, body)
  let scheme = call_592654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592654.url(scheme.get, call_592654.host, call_592654.base,
                         call_592654.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592654, url, valid)

proc call*(call_592655: Call_PostDeleteInstallationMedia_592641;
          InstallationMediaId: string; Action: string = "DeleteInstallationMedia";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteInstallationMedia
  ## Deletes the installation media for an on-premises, bring your own media (BYOM) DB engine, such as Microsoft SQL Server.
  ##   InstallationMediaId: string (required)
  ##                      : The installation media ID.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592656 = newJObject()
  var formData_592657 = newJObject()
  add(formData_592657, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_592656, "Action", newJString(Action))
  add(query_592656, "Version", newJString(Version))
  result = call_592655.call(nil, query_592656, nil, formData_592657, nil)

var postDeleteInstallationMedia* = Call_PostDeleteInstallationMedia_592641(
    name: "postDeleteInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteInstallationMedia",
    validator: validate_PostDeleteInstallationMedia_592642, base: "/",
    url: url_PostDeleteInstallationMedia_592643,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteInstallationMedia_592625 = ref object of OpenApiRestCall_590348
proc url_GetDeleteInstallationMedia_592627(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteInstallationMedia_592626(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the installation media for an on-premises, bring your own media (BYOM) DB engine, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstallationMediaId: JString (required)
  ##                      : The installation media ID.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstallationMediaId` field"
  var valid_592628 = query.getOrDefault("InstallationMediaId")
  valid_592628 = validateParameter(valid_592628, JString, required = true,
                                 default = nil)
  if valid_592628 != nil:
    section.add "InstallationMediaId", valid_592628
  var valid_592629 = query.getOrDefault("Action")
  valid_592629 = validateParameter(valid_592629, JString, required = true, default = newJString(
      "DeleteInstallationMedia"))
  if valid_592629 != nil:
    section.add "Action", valid_592629
  var valid_592630 = query.getOrDefault("Version")
  valid_592630 = validateParameter(valid_592630, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592630 != nil:
    section.add "Version", valid_592630
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592631 = header.getOrDefault("X-Amz-Signature")
  valid_592631 = validateParameter(valid_592631, JString, required = false,
                                 default = nil)
  if valid_592631 != nil:
    section.add "X-Amz-Signature", valid_592631
  var valid_592632 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592632 = validateParameter(valid_592632, JString, required = false,
                                 default = nil)
  if valid_592632 != nil:
    section.add "X-Amz-Content-Sha256", valid_592632
  var valid_592633 = header.getOrDefault("X-Amz-Date")
  valid_592633 = validateParameter(valid_592633, JString, required = false,
                                 default = nil)
  if valid_592633 != nil:
    section.add "X-Amz-Date", valid_592633
  var valid_592634 = header.getOrDefault("X-Amz-Credential")
  valid_592634 = validateParameter(valid_592634, JString, required = false,
                                 default = nil)
  if valid_592634 != nil:
    section.add "X-Amz-Credential", valid_592634
  var valid_592635 = header.getOrDefault("X-Amz-Security-Token")
  valid_592635 = validateParameter(valid_592635, JString, required = false,
                                 default = nil)
  if valid_592635 != nil:
    section.add "X-Amz-Security-Token", valid_592635
  var valid_592636 = header.getOrDefault("X-Amz-Algorithm")
  valid_592636 = validateParameter(valid_592636, JString, required = false,
                                 default = nil)
  if valid_592636 != nil:
    section.add "X-Amz-Algorithm", valid_592636
  var valid_592637 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592637 = validateParameter(valid_592637, JString, required = false,
                                 default = nil)
  if valid_592637 != nil:
    section.add "X-Amz-SignedHeaders", valid_592637
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592638: Call_GetDeleteInstallationMedia_592625; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the installation media for an on-premises, bring your own media (BYOM) DB engine, such as Microsoft SQL Server.
  ## 
  let valid = call_592638.validator(path, query, header, formData, body)
  let scheme = call_592638.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592638.url(scheme.get, call_592638.host, call_592638.base,
                         call_592638.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592638, url, valid)

proc call*(call_592639: Call_GetDeleteInstallationMedia_592625;
          InstallationMediaId: string; Action: string = "DeleteInstallationMedia";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteInstallationMedia
  ## Deletes the installation media for an on-premises, bring your own media (BYOM) DB engine, such as Microsoft SQL Server.
  ##   InstallationMediaId: string (required)
  ##                      : The installation media ID.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592640 = newJObject()
  add(query_592640, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_592640, "Action", newJString(Action))
  add(query_592640, "Version", newJString(Version))
  result = call_592639.call(nil, query_592640, nil, nil, nil)

var getDeleteInstallationMedia* = Call_GetDeleteInstallationMedia_592625(
    name: "getDeleteInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteInstallationMedia",
    validator: validate_GetDeleteInstallationMedia_592626, base: "/",
    url: url_GetDeleteInstallationMedia_592627,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteOptionGroup_592674 = ref object of OpenApiRestCall_590348
proc url_PostDeleteOptionGroup_592676(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteOptionGroup_592675(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592677 = query.getOrDefault("Action")
  valid_592677 = validateParameter(valid_592677, JString, required = true,
                                 default = newJString("DeleteOptionGroup"))
  if valid_592677 != nil:
    section.add "Action", valid_592677
  var valid_592678 = query.getOrDefault("Version")
  valid_592678 = validateParameter(valid_592678, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592678 != nil:
    section.add "Version", valid_592678
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592679 = header.getOrDefault("X-Amz-Signature")
  valid_592679 = validateParameter(valid_592679, JString, required = false,
                                 default = nil)
  if valid_592679 != nil:
    section.add "X-Amz-Signature", valid_592679
  var valid_592680 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592680 = validateParameter(valid_592680, JString, required = false,
                                 default = nil)
  if valid_592680 != nil:
    section.add "X-Amz-Content-Sha256", valid_592680
  var valid_592681 = header.getOrDefault("X-Amz-Date")
  valid_592681 = validateParameter(valid_592681, JString, required = false,
                                 default = nil)
  if valid_592681 != nil:
    section.add "X-Amz-Date", valid_592681
  var valid_592682 = header.getOrDefault("X-Amz-Credential")
  valid_592682 = validateParameter(valid_592682, JString, required = false,
                                 default = nil)
  if valid_592682 != nil:
    section.add "X-Amz-Credential", valid_592682
  var valid_592683 = header.getOrDefault("X-Amz-Security-Token")
  valid_592683 = validateParameter(valid_592683, JString, required = false,
                                 default = nil)
  if valid_592683 != nil:
    section.add "X-Amz-Security-Token", valid_592683
  var valid_592684 = header.getOrDefault("X-Amz-Algorithm")
  valid_592684 = validateParameter(valid_592684, JString, required = false,
                                 default = nil)
  if valid_592684 != nil:
    section.add "X-Amz-Algorithm", valid_592684
  var valid_592685 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592685 = validateParameter(valid_592685, JString, required = false,
                                 default = nil)
  if valid_592685 != nil:
    section.add "X-Amz-SignedHeaders", valid_592685
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_592686 = formData.getOrDefault("OptionGroupName")
  valid_592686 = validateParameter(valid_592686, JString, required = true,
                                 default = nil)
  if valid_592686 != nil:
    section.add "OptionGroupName", valid_592686
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592687: Call_PostDeleteOptionGroup_592674; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_592687.validator(path, query, header, formData, body)
  let scheme = call_592687.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592687.url(scheme.get, call_592687.host, call_592687.base,
                         call_592687.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592687, url, valid)

proc call*(call_592688: Call_PostDeleteOptionGroup_592674; OptionGroupName: string;
          Action: string = "DeleteOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteOptionGroup
  ## Deletes an existing option group.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: string (required)
  var query_592689 = newJObject()
  var formData_592690 = newJObject()
  add(query_592689, "Action", newJString(Action))
  add(formData_592690, "OptionGroupName", newJString(OptionGroupName))
  add(query_592689, "Version", newJString(Version))
  result = call_592688.call(nil, query_592689, nil, formData_592690, nil)

var postDeleteOptionGroup* = Call_PostDeleteOptionGroup_592674(
    name: "postDeleteOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_PostDeleteOptionGroup_592675, base: "/",
    url: url_PostDeleteOptionGroup_592676, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteOptionGroup_592658 = ref object of OpenApiRestCall_590348
proc url_GetDeleteOptionGroup_592660(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteOptionGroup_592659(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592661 = query.getOrDefault("Action")
  valid_592661 = validateParameter(valid_592661, JString, required = true,
                                 default = newJString("DeleteOptionGroup"))
  if valid_592661 != nil:
    section.add "Action", valid_592661
  var valid_592662 = query.getOrDefault("OptionGroupName")
  valid_592662 = validateParameter(valid_592662, JString, required = true,
                                 default = nil)
  if valid_592662 != nil:
    section.add "OptionGroupName", valid_592662
  var valid_592663 = query.getOrDefault("Version")
  valid_592663 = validateParameter(valid_592663, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592663 != nil:
    section.add "Version", valid_592663
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592664 = header.getOrDefault("X-Amz-Signature")
  valid_592664 = validateParameter(valid_592664, JString, required = false,
                                 default = nil)
  if valid_592664 != nil:
    section.add "X-Amz-Signature", valid_592664
  var valid_592665 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592665 = validateParameter(valid_592665, JString, required = false,
                                 default = nil)
  if valid_592665 != nil:
    section.add "X-Amz-Content-Sha256", valid_592665
  var valid_592666 = header.getOrDefault("X-Amz-Date")
  valid_592666 = validateParameter(valid_592666, JString, required = false,
                                 default = nil)
  if valid_592666 != nil:
    section.add "X-Amz-Date", valid_592666
  var valid_592667 = header.getOrDefault("X-Amz-Credential")
  valid_592667 = validateParameter(valid_592667, JString, required = false,
                                 default = nil)
  if valid_592667 != nil:
    section.add "X-Amz-Credential", valid_592667
  var valid_592668 = header.getOrDefault("X-Amz-Security-Token")
  valid_592668 = validateParameter(valid_592668, JString, required = false,
                                 default = nil)
  if valid_592668 != nil:
    section.add "X-Amz-Security-Token", valid_592668
  var valid_592669 = header.getOrDefault("X-Amz-Algorithm")
  valid_592669 = validateParameter(valid_592669, JString, required = false,
                                 default = nil)
  if valid_592669 != nil:
    section.add "X-Amz-Algorithm", valid_592669
  var valid_592670 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592670 = validateParameter(valid_592670, JString, required = false,
                                 default = nil)
  if valid_592670 != nil:
    section.add "X-Amz-SignedHeaders", valid_592670
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592671: Call_GetDeleteOptionGroup_592658; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_592671.validator(path, query, header, formData, body)
  let scheme = call_592671.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592671.url(scheme.get, call_592671.host, call_592671.base,
                         call_592671.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592671, url, valid)

proc call*(call_592672: Call_GetDeleteOptionGroup_592658; OptionGroupName: string;
          Action: string = "DeleteOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteOptionGroup
  ## Deletes an existing option group.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: string (required)
  var query_592673 = newJObject()
  add(query_592673, "Action", newJString(Action))
  add(query_592673, "OptionGroupName", newJString(OptionGroupName))
  add(query_592673, "Version", newJString(Version))
  result = call_592672.call(nil, query_592673, nil, nil, nil)

var getDeleteOptionGroup* = Call_GetDeleteOptionGroup_592658(
    name: "getDeleteOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_GetDeleteOptionGroup_592659, base: "/",
    url: url_GetDeleteOptionGroup_592660, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAccountAttributes_592706 = ref object of OpenApiRestCall_590348
proc url_PostDescribeAccountAttributes_592708(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeAccountAttributes_592707(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592709 = query.getOrDefault("Action")
  valid_592709 = validateParameter(valid_592709, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_592709 != nil:
    section.add "Action", valid_592709
  var valid_592710 = query.getOrDefault("Version")
  valid_592710 = validateParameter(valid_592710, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592710 != nil:
    section.add "Version", valid_592710
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592711 = header.getOrDefault("X-Amz-Signature")
  valid_592711 = validateParameter(valid_592711, JString, required = false,
                                 default = nil)
  if valid_592711 != nil:
    section.add "X-Amz-Signature", valid_592711
  var valid_592712 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592712 = validateParameter(valid_592712, JString, required = false,
                                 default = nil)
  if valid_592712 != nil:
    section.add "X-Amz-Content-Sha256", valid_592712
  var valid_592713 = header.getOrDefault("X-Amz-Date")
  valid_592713 = validateParameter(valid_592713, JString, required = false,
                                 default = nil)
  if valid_592713 != nil:
    section.add "X-Amz-Date", valid_592713
  var valid_592714 = header.getOrDefault("X-Amz-Credential")
  valid_592714 = validateParameter(valid_592714, JString, required = false,
                                 default = nil)
  if valid_592714 != nil:
    section.add "X-Amz-Credential", valid_592714
  var valid_592715 = header.getOrDefault("X-Amz-Security-Token")
  valid_592715 = validateParameter(valid_592715, JString, required = false,
                                 default = nil)
  if valid_592715 != nil:
    section.add "X-Amz-Security-Token", valid_592715
  var valid_592716 = header.getOrDefault("X-Amz-Algorithm")
  valid_592716 = validateParameter(valid_592716, JString, required = false,
                                 default = nil)
  if valid_592716 != nil:
    section.add "X-Amz-Algorithm", valid_592716
  var valid_592717 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592717 = validateParameter(valid_592717, JString, required = false,
                                 default = nil)
  if valid_592717 != nil:
    section.add "X-Amz-SignedHeaders", valid_592717
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592718: Call_PostDescribeAccountAttributes_592706; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_592718.validator(path, query, header, formData, body)
  let scheme = call_592718.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592718.url(scheme.get, call_592718.host, call_592718.base,
                         call_592718.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592718, url, valid)

proc call*(call_592719: Call_PostDescribeAccountAttributes_592706;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592720 = newJObject()
  add(query_592720, "Action", newJString(Action))
  add(query_592720, "Version", newJString(Version))
  result = call_592719.call(nil, query_592720, nil, nil, nil)

var postDescribeAccountAttributes* = Call_PostDescribeAccountAttributes_592706(
    name: "postDescribeAccountAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_PostDescribeAccountAttributes_592707, base: "/",
    url: url_PostDescribeAccountAttributes_592708,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAccountAttributes_592691 = ref object of OpenApiRestCall_590348
proc url_GetDescribeAccountAttributes_592693(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeAccountAttributes_592692(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592694 = query.getOrDefault("Action")
  valid_592694 = validateParameter(valid_592694, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_592694 != nil:
    section.add "Action", valid_592694
  var valid_592695 = query.getOrDefault("Version")
  valid_592695 = validateParameter(valid_592695, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592695 != nil:
    section.add "Version", valid_592695
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592696 = header.getOrDefault("X-Amz-Signature")
  valid_592696 = validateParameter(valid_592696, JString, required = false,
                                 default = nil)
  if valid_592696 != nil:
    section.add "X-Amz-Signature", valid_592696
  var valid_592697 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592697 = validateParameter(valid_592697, JString, required = false,
                                 default = nil)
  if valid_592697 != nil:
    section.add "X-Amz-Content-Sha256", valid_592697
  var valid_592698 = header.getOrDefault("X-Amz-Date")
  valid_592698 = validateParameter(valid_592698, JString, required = false,
                                 default = nil)
  if valid_592698 != nil:
    section.add "X-Amz-Date", valid_592698
  var valid_592699 = header.getOrDefault("X-Amz-Credential")
  valid_592699 = validateParameter(valid_592699, JString, required = false,
                                 default = nil)
  if valid_592699 != nil:
    section.add "X-Amz-Credential", valid_592699
  var valid_592700 = header.getOrDefault("X-Amz-Security-Token")
  valid_592700 = validateParameter(valid_592700, JString, required = false,
                                 default = nil)
  if valid_592700 != nil:
    section.add "X-Amz-Security-Token", valid_592700
  var valid_592701 = header.getOrDefault("X-Amz-Algorithm")
  valid_592701 = validateParameter(valid_592701, JString, required = false,
                                 default = nil)
  if valid_592701 != nil:
    section.add "X-Amz-Algorithm", valid_592701
  var valid_592702 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592702 = validateParameter(valid_592702, JString, required = false,
                                 default = nil)
  if valid_592702 != nil:
    section.add "X-Amz-SignedHeaders", valid_592702
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592703: Call_GetDescribeAccountAttributes_592691; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_592703.validator(path, query, header, formData, body)
  let scheme = call_592703.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592703.url(scheme.get, call_592703.host, call_592703.base,
                         call_592703.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592703, url, valid)

proc call*(call_592704: Call_GetDescribeAccountAttributes_592691;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592705 = newJObject()
  add(query_592705, "Action", newJString(Action))
  add(query_592705, "Version", newJString(Version))
  result = call_592704.call(nil, query_592705, nil, nil, nil)

var getDescribeAccountAttributes* = Call_GetDescribeAccountAttributes_592691(
    name: "getDescribeAccountAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_GetDescribeAccountAttributes_592692, base: "/",
    url: url_GetDescribeAccountAttributes_592693,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCertificates_592740 = ref object of OpenApiRestCall_590348
proc url_PostDescribeCertificates_592742(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCertificates_592741(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592743 = query.getOrDefault("Action")
  valid_592743 = validateParameter(valid_592743, JString, required = true,
                                 default = newJString("DescribeCertificates"))
  if valid_592743 != nil:
    section.add "Action", valid_592743
  var valid_592744 = query.getOrDefault("Version")
  valid_592744 = validateParameter(valid_592744, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592744 != nil:
    section.add "Version", valid_592744
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592745 = header.getOrDefault("X-Amz-Signature")
  valid_592745 = validateParameter(valid_592745, JString, required = false,
                                 default = nil)
  if valid_592745 != nil:
    section.add "X-Amz-Signature", valid_592745
  var valid_592746 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592746 = validateParameter(valid_592746, JString, required = false,
                                 default = nil)
  if valid_592746 != nil:
    section.add "X-Amz-Content-Sha256", valid_592746
  var valid_592747 = header.getOrDefault("X-Amz-Date")
  valid_592747 = validateParameter(valid_592747, JString, required = false,
                                 default = nil)
  if valid_592747 != nil:
    section.add "X-Amz-Date", valid_592747
  var valid_592748 = header.getOrDefault("X-Amz-Credential")
  valid_592748 = validateParameter(valid_592748, JString, required = false,
                                 default = nil)
  if valid_592748 != nil:
    section.add "X-Amz-Credential", valid_592748
  var valid_592749 = header.getOrDefault("X-Amz-Security-Token")
  valid_592749 = validateParameter(valid_592749, JString, required = false,
                                 default = nil)
  if valid_592749 != nil:
    section.add "X-Amz-Security-Token", valid_592749
  var valid_592750 = header.getOrDefault("X-Amz-Algorithm")
  valid_592750 = validateParameter(valid_592750, JString, required = false,
                                 default = nil)
  if valid_592750 != nil:
    section.add "X-Amz-Algorithm", valid_592750
  var valid_592751 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592751 = validateParameter(valid_592751, JString, required = false,
                                 default = nil)
  if valid_592751 != nil:
    section.add "X-Amz-SignedHeaders", valid_592751
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_592752 = formData.getOrDefault("MaxRecords")
  valid_592752 = validateParameter(valid_592752, JInt, required = false, default = nil)
  if valid_592752 != nil:
    section.add "MaxRecords", valid_592752
  var valid_592753 = formData.getOrDefault("Marker")
  valid_592753 = validateParameter(valid_592753, JString, required = false,
                                 default = nil)
  if valid_592753 != nil:
    section.add "Marker", valid_592753
  var valid_592754 = formData.getOrDefault("CertificateIdentifier")
  valid_592754 = validateParameter(valid_592754, JString, required = false,
                                 default = nil)
  if valid_592754 != nil:
    section.add "CertificateIdentifier", valid_592754
  var valid_592755 = formData.getOrDefault("Filters")
  valid_592755 = validateParameter(valid_592755, JArray, required = false,
                                 default = nil)
  if valid_592755 != nil:
    section.add "Filters", valid_592755
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592756: Call_PostDescribeCertificates_592740; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_592756.validator(path, query, header, formData, body)
  let scheme = call_592756.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592756.url(scheme.get, call_592756.host, call_592756.base,
                         call_592756.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592756, url, valid)

proc call*(call_592757: Call_PostDescribeCertificates_592740; MaxRecords: int = 0;
          Marker: string = ""; CertificateIdentifier: string = "";
          Action: string = "DescribeCertificates"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_592758 = newJObject()
  var formData_592759 = newJObject()
  add(formData_592759, "MaxRecords", newJInt(MaxRecords))
  add(formData_592759, "Marker", newJString(Marker))
  add(formData_592759, "CertificateIdentifier", newJString(CertificateIdentifier))
  add(query_592758, "Action", newJString(Action))
  if Filters != nil:
    formData_592759.add "Filters", Filters
  add(query_592758, "Version", newJString(Version))
  result = call_592757.call(nil, query_592758, nil, formData_592759, nil)

var postDescribeCertificates* = Call_PostDescribeCertificates_592740(
    name: "postDescribeCertificates", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_PostDescribeCertificates_592741, base: "/",
    url: url_PostDescribeCertificates_592742, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCertificates_592721 = ref object of OpenApiRestCall_590348
proc url_GetDescribeCertificates_592723(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCertificates_592722(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_592724 = query.getOrDefault("Marker")
  valid_592724 = validateParameter(valid_592724, JString, required = false,
                                 default = nil)
  if valid_592724 != nil:
    section.add "Marker", valid_592724
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592725 = query.getOrDefault("Action")
  valid_592725 = validateParameter(valid_592725, JString, required = true,
                                 default = newJString("DescribeCertificates"))
  if valid_592725 != nil:
    section.add "Action", valid_592725
  var valid_592726 = query.getOrDefault("Version")
  valid_592726 = validateParameter(valid_592726, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592726 != nil:
    section.add "Version", valid_592726
  var valid_592727 = query.getOrDefault("CertificateIdentifier")
  valid_592727 = validateParameter(valid_592727, JString, required = false,
                                 default = nil)
  if valid_592727 != nil:
    section.add "CertificateIdentifier", valid_592727
  var valid_592728 = query.getOrDefault("Filters")
  valid_592728 = validateParameter(valid_592728, JArray, required = false,
                                 default = nil)
  if valid_592728 != nil:
    section.add "Filters", valid_592728
  var valid_592729 = query.getOrDefault("MaxRecords")
  valid_592729 = validateParameter(valid_592729, JInt, required = false, default = nil)
  if valid_592729 != nil:
    section.add "MaxRecords", valid_592729
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592730 = header.getOrDefault("X-Amz-Signature")
  valid_592730 = validateParameter(valid_592730, JString, required = false,
                                 default = nil)
  if valid_592730 != nil:
    section.add "X-Amz-Signature", valid_592730
  var valid_592731 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592731 = validateParameter(valid_592731, JString, required = false,
                                 default = nil)
  if valid_592731 != nil:
    section.add "X-Amz-Content-Sha256", valid_592731
  var valid_592732 = header.getOrDefault("X-Amz-Date")
  valid_592732 = validateParameter(valid_592732, JString, required = false,
                                 default = nil)
  if valid_592732 != nil:
    section.add "X-Amz-Date", valid_592732
  var valid_592733 = header.getOrDefault("X-Amz-Credential")
  valid_592733 = validateParameter(valid_592733, JString, required = false,
                                 default = nil)
  if valid_592733 != nil:
    section.add "X-Amz-Credential", valid_592733
  var valid_592734 = header.getOrDefault("X-Amz-Security-Token")
  valid_592734 = validateParameter(valid_592734, JString, required = false,
                                 default = nil)
  if valid_592734 != nil:
    section.add "X-Amz-Security-Token", valid_592734
  var valid_592735 = header.getOrDefault("X-Amz-Algorithm")
  valid_592735 = validateParameter(valid_592735, JString, required = false,
                                 default = nil)
  if valid_592735 != nil:
    section.add "X-Amz-Algorithm", valid_592735
  var valid_592736 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592736 = validateParameter(valid_592736, JString, required = false,
                                 default = nil)
  if valid_592736 != nil:
    section.add "X-Amz-SignedHeaders", valid_592736
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592737: Call_GetDescribeCertificates_592721; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_592737.validator(path, query, header, formData, body)
  let scheme = call_592737.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592737.url(scheme.get, call_592737.host, call_592737.base,
                         call_592737.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592737, url, valid)

proc call*(call_592738: Call_GetDescribeCertificates_592721; Marker: string = "";
          Action: string = "DescribeCertificates"; Version: string = "2014-10-31";
          CertificateIdentifier: string = ""; Filters: JsonNode = nil;
          MaxRecords: int = 0): Recallable =
  ## getDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_592739 = newJObject()
  add(query_592739, "Marker", newJString(Marker))
  add(query_592739, "Action", newJString(Action))
  add(query_592739, "Version", newJString(Version))
  add(query_592739, "CertificateIdentifier", newJString(CertificateIdentifier))
  if Filters != nil:
    query_592739.add "Filters", Filters
  add(query_592739, "MaxRecords", newJInt(MaxRecords))
  result = call_592738.call(nil, query_592739, nil, nil, nil)

var getDescribeCertificates* = Call_GetDescribeCertificates_592721(
    name: "getDescribeCertificates", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_GetDescribeCertificates_592722, base: "/",
    url: url_GetDescribeCertificates_592723, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCustomAvailabilityZones_592779 = ref object of OpenApiRestCall_590348
proc url_PostDescribeCustomAvailabilityZones_592781(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCustomAvailabilityZones_592780(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592782 = query.getOrDefault("Action")
  valid_592782 = validateParameter(valid_592782, JString, required = true, default = newJString(
      "DescribeCustomAvailabilityZones"))
  if valid_592782 != nil:
    section.add "Action", valid_592782
  var valid_592783 = query.getOrDefault("Version")
  valid_592783 = validateParameter(valid_592783, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592783 != nil:
    section.add "Version", valid_592783
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592784 = header.getOrDefault("X-Amz-Signature")
  valid_592784 = validateParameter(valid_592784, JString, required = false,
                                 default = nil)
  if valid_592784 != nil:
    section.add "X-Amz-Signature", valid_592784
  var valid_592785 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592785 = validateParameter(valid_592785, JString, required = false,
                                 default = nil)
  if valid_592785 != nil:
    section.add "X-Amz-Content-Sha256", valid_592785
  var valid_592786 = header.getOrDefault("X-Amz-Date")
  valid_592786 = validateParameter(valid_592786, JString, required = false,
                                 default = nil)
  if valid_592786 != nil:
    section.add "X-Amz-Date", valid_592786
  var valid_592787 = header.getOrDefault("X-Amz-Credential")
  valid_592787 = validateParameter(valid_592787, JString, required = false,
                                 default = nil)
  if valid_592787 != nil:
    section.add "X-Amz-Credential", valid_592787
  var valid_592788 = header.getOrDefault("X-Amz-Security-Token")
  valid_592788 = validateParameter(valid_592788, JString, required = false,
                                 default = nil)
  if valid_592788 != nil:
    section.add "X-Amz-Security-Token", valid_592788
  var valid_592789 = header.getOrDefault("X-Amz-Algorithm")
  valid_592789 = validateParameter(valid_592789, JString, required = false,
                                 default = nil)
  if valid_592789 != nil:
    section.add "X-Amz-Algorithm", valid_592789
  var valid_592790 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592790 = validateParameter(valid_592790, JString, required = false,
                                 default = nil)
  if valid_592790 != nil:
    section.add "X-Amz-SignedHeaders", valid_592790
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   CustomAvailabilityZoneId: JString
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  section = newJObject()
  var valid_592791 = formData.getOrDefault("MaxRecords")
  valid_592791 = validateParameter(valid_592791, JInt, required = false, default = nil)
  if valid_592791 != nil:
    section.add "MaxRecords", valid_592791
  var valid_592792 = formData.getOrDefault("Marker")
  valid_592792 = validateParameter(valid_592792, JString, required = false,
                                 default = nil)
  if valid_592792 != nil:
    section.add "Marker", valid_592792
  var valid_592793 = formData.getOrDefault("Filters")
  valid_592793 = validateParameter(valid_592793, JArray, required = false,
                                 default = nil)
  if valid_592793 != nil:
    section.add "Filters", valid_592793
  var valid_592794 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_592794 = validateParameter(valid_592794, JString, required = false,
                                 default = nil)
  if valid_592794 != nil:
    section.add "CustomAvailabilityZoneId", valid_592794
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592795: Call_PostDescribeCustomAvailabilityZones_592779;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_592795.validator(path, query, header, formData, body)
  let scheme = call_592795.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592795.url(scheme.get, call_592795.host, call_592795.base,
                         call_592795.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592795, url, valid)

proc call*(call_592796: Call_PostDescribeCustomAvailabilityZones_592779;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeCustomAvailabilityZones";
          Filters: JsonNode = nil; CustomAvailabilityZoneId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeCustomAvailabilityZones
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   CustomAvailabilityZoneId: string
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Version: string (required)
  var query_592797 = newJObject()
  var formData_592798 = newJObject()
  add(formData_592798, "MaxRecords", newJInt(MaxRecords))
  add(formData_592798, "Marker", newJString(Marker))
  add(query_592797, "Action", newJString(Action))
  if Filters != nil:
    formData_592798.add "Filters", Filters
  add(formData_592798, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_592797, "Version", newJString(Version))
  result = call_592796.call(nil, query_592797, nil, formData_592798, nil)

var postDescribeCustomAvailabilityZones* = Call_PostDescribeCustomAvailabilityZones_592779(
    name: "postDescribeCustomAvailabilityZones", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCustomAvailabilityZones",
    validator: validate_PostDescribeCustomAvailabilityZones_592780, base: "/",
    url: url_PostDescribeCustomAvailabilityZones_592781,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCustomAvailabilityZones_592760 = ref object of OpenApiRestCall_590348
proc url_GetDescribeCustomAvailabilityZones_592762(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCustomAvailabilityZones_592761(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CustomAvailabilityZoneId: JString
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_592763 = query.getOrDefault("Marker")
  valid_592763 = validateParameter(valid_592763, JString, required = false,
                                 default = nil)
  if valid_592763 != nil:
    section.add "Marker", valid_592763
  var valid_592764 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_592764 = validateParameter(valid_592764, JString, required = false,
                                 default = nil)
  if valid_592764 != nil:
    section.add "CustomAvailabilityZoneId", valid_592764
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592765 = query.getOrDefault("Action")
  valid_592765 = validateParameter(valid_592765, JString, required = true, default = newJString(
      "DescribeCustomAvailabilityZones"))
  if valid_592765 != nil:
    section.add "Action", valid_592765
  var valid_592766 = query.getOrDefault("Version")
  valid_592766 = validateParameter(valid_592766, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592766 != nil:
    section.add "Version", valid_592766
  var valid_592767 = query.getOrDefault("Filters")
  valid_592767 = validateParameter(valid_592767, JArray, required = false,
                                 default = nil)
  if valid_592767 != nil:
    section.add "Filters", valid_592767
  var valid_592768 = query.getOrDefault("MaxRecords")
  valid_592768 = validateParameter(valid_592768, JInt, required = false, default = nil)
  if valid_592768 != nil:
    section.add "MaxRecords", valid_592768
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592769 = header.getOrDefault("X-Amz-Signature")
  valid_592769 = validateParameter(valid_592769, JString, required = false,
                                 default = nil)
  if valid_592769 != nil:
    section.add "X-Amz-Signature", valid_592769
  var valid_592770 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592770 = validateParameter(valid_592770, JString, required = false,
                                 default = nil)
  if valid_592770 != nil:
    section.add "X-Amz-Content-Sha256", valid_592770
  var valid_592771 = header.getOrDefault("X-Amz-Date")
  valid_592771 = validateParameter(valid_592771, JString, required = false,
                                 default = nil)
  if valid_592771 != nil:
    section.add "X-Amz-Date", valid_592771
  var valid_592772 = header.getOrDefault("X-Amz-Credential")
  valid_592772 = validateParameter(valid_592772, JString, required = false,
                                 default = nil)
  if valid_592772 != nil:
    section.add "X-Amz-Credential", valid_592772
  var valid_592773 = header.getOrDefault("X-Amz-Security-Token")
  valid_592773 = validateParameter(valid_592773, JString, required = false,
                                 default = nil)
  if valid_592773 != nil:
    section.add "X-Amz-Security-Token", valid_592773
  var valid_592774 = header.getOrDefault("X-Amz-Algorithm")
  valid_592774 = validateParameter(valid_592774, JString, required = false,
                                 default = nil)
  if valid_592774 != nil:
    section.add "X-Amz-Algorithm", valid_592774
  var valid_592775 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592775 = validateParameter(valid_592775, JString, required = false,
                                 default = nil)
  if valid_592775 != nil:
    section.add "X-Amz-SignedHeaders", valid_592775
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592776: Call_GetDescribeCustomAvailabilityZones_592760;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_592776.validator(path, query, header, formData, body)
  let scheme = call_592776.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592776.url(scheme.get, call_592776.host, call_592776.base,
                         call_592776.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592776, url, valid)

proc call*(call_592777: Call_GetDescribeCustomAvailabilityZones_592760;
          Marker: string = ""; CustomAvailabilityZoneId: string = "";
          Action: string = "DescribeCustomAvailabilityZones";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeCustomAvailabilityZones
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CustomAvailabilityZoneId: string
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_592778 = newJObject()
  add(query_592778, "Marker", newJString(Marker))
  add(query_592778, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_592778, "Action", newJString(Action))
  add(query_592778, "Version", newJString(Version))
  if Filters != nil:
    query_592778.add "Filters", Filters
  add(query_592778, "MaxRecords", newJInt(MaxRecords))
  result = call_592777.call(nil, query_592778, nil, nil, nil)

var getDescribeCustomAvailabilityZones* = Call_GetDescribeCustomAvailabilityZones_592760(
    name: "getDescribeCustomAvailabilityZones", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCustomAvailabilityZones",
    validator: validate_GetDescribeCustomAvailabilityZones_592761, base: "/",
    url: url_GetDescribeCustomAvailabilityZones_592762,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterBacktracks_592819 = ref object of OpenApiRestCall_590348
proc url_PostDescribeDBClusterBacktracks_592821(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterBacktracks_592820(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592822 = query.getOrDefault("Action")
  valid_592822 = validateParameter(valid_592822, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_592822 != nil:
    section.add "Action", valid_592822
  var valid_592823 = query.getOrDefault("Version")
  valid_592823 = validateParameter(valid_592823, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592823 != nil:
    section.add "Version", valid_592823
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592824 = header.getOrDefault("X-Amz-Signature")
  valid_592824 = validateParameter(valid_592824, JString, required = false,
                                 default = nil)
  if valid_592824 != nil:
    section.add "X-Amz-Signature", valid_592824
  var valid_592825 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592825 = validateParameter(valid_592825, JString, required = false,
                                 default = nil)
  if valid_592825 != nil:
    section.add "X-Amz-Content-Sha256", valid_592825
  var valid_592826 = header.getOrDefault("X-Amz-Date")
  valid_592826 = validateParameter(valid_592826, JString, required = false,
                                 default = nil)
  if valid_592826 != nil:
    section.add "X-Amz-Date", valid_592826
  var valid_592827 = header.getOrDefault("X-Amz-Credential")
  valid_592827 = validateParameter(valid_592827, JString, required = false,
                                 default = nil)
  if valid_592827 != nil:
    section.add "X-Amz-Credential", valid_592827
  var valid_592828 = header.getOrDefault("X-Amz-Security-Token")
  valid_592828 = validateParameter(valid_592828, JString, required = false,
                                 default = nil)
  if valid_592828 != nil:
    section.add "X-Amz-Security-Token", valid_592828
  var valid_592829 = header.getOrDefault("X-Amz-Algorithm")
  valid_592829 = validateParameter(valid_592829, JString, required = false,
                                 default = nil)
  if valid_592829 != nil:
    section.add "X-Amz-Algorithm", valid_592829
  var valid_592830 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592830 = validateParameter(valid_592830, JString, required = false,
                                 default = nil)
  if valid_592830 != nil:
    section.add "X-Amz-SignedHeaders", valid_592830
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  var valid_592831 = formData.getOrDefault("MaxRecords")
  valid_592831 = validateParameter(valid_592831, JInt, required = false, default = nil)
  if valid_592831 != nil:
    section.add "MaxRecords", valid_592831
  var valid_592832 = formData.getOrDefault("Marker")
  valid_592832 = validateParameter(valid_592832, JString, required = false,
                                 default = nil)
  if valid_592832 != nil:
    section.add "Marker", valid_592832
  var valid_592833 = formData.getOrDefault("BacktrackIdentifier")
  valid_592833 = validateParameter(valid_592833, JString, required = false,
                                 default = nil)
  if valid_592833 != nil:
    section.add "BacktrackIdentifier", valid_592833
  var valid_592834 = formData.getOrDefault("Filters")
  valid_592834 = validateParameter(valid_592834, JArray, required = false,
                                 default = nil)
  if valid_592834 != nil:
    section.add "Filters", valid_592834
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_592835 = formData.getOrDefault("DBClusterIdentifier")
  valid_592835 = validateParameter(valid_592835, JString, required = true,
                                 default = nil)
  if valid_592835 != nil:
    section.add "DBClusterIdentifier", valid_592835
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592836: Call_PostDescribeDBClusterBacktracks_592819;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592836.validator(path, query, header, formData, body)
  let scheme = call_592836.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592836.url(scheme.get, call_592836.host, call_592836.base,
                         call_592836.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592836, url, valid)

proc call*(call_592837: Call_PostDescribeDBClusterBacktracks_592819;
          DBClusterIdentifier: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterBacktracks";
          BacktrackIdentifier: string = ""; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  var query_592838 = newJObject()
  var formData_592839 = newJObject()
  add(formData_592839, "MaxRecords", newJInt(MaxRecords))
  add(formData_592839, "Marker", newJString(Marker))
  add(query_592838, "Action", newJString(Action))
  add(formData_592839, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  if Filters != nil:
    formData_592839.add "Filters", Filters
  add(query_592838, "Version", newJString(Version))
  add(formData_592839, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_592837.call(nil, query_592838, nil, formData_592839, nil)

var postDescribeDBClusterBacktracks* = Call_PostDescribeDBClusterBacktracks_592819(
    name: "postDescribeDBClusterBacktracks", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_PostDescribeDBClusterBacktracks_592820, base: "/",
    url: url_PostDescribeDBClusterBacktracks_592821,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterBacktracks_592799 = ref object of OpenApiRestCall_590348
proc url_GetDescribeDBClusterBacktracks_592801(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterBacktracks_592800(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_592802 = query.getOrDefault("Marker")
  valid_592802 = validateParameter(valid_592802, JString, required = false,
                                 default = nil)
  if valid_592802 != nil:
    section.add "Marker", valid_592802
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_592803 = query.getOrDefault("DBClusterIdentifier")
  valid_592803 = validateParameter(valid_592803, JString, required = true,
                                 default = nil)
  if valid_592803 != nil:
    section.add "DBClusterIdentifier", valid_592803
  var valid_592804 = query.getOrDefault("BacktrackIdentifier")
  valid_592804 = validateParameter(valid_592804, JString, required = false,
                                 default = nil)
  if valid_592804 != nil:
    section.add "BacktrackIdentifier", valid_592804
  var valid_592805 = query.getOrDefault("Action")
  valid_592805 = validateParameter(valid_592805, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_592805 != nil:
    section.add "Action", valid_592805
  var valid_592806 = query.getOrDefault("Version")
  valid_592806 = validateParameter(valid_592806, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592806 != nil:
    section.add "Version", valid_592806
  var valid_592807 = query.getOrDefault("Filters")
  valid_592807 = validateParameter(valid_592807, JArray, required = false,
                                 default = nil)
  if valid_592807 != nil:
    section.add "Filters", valid_592807
  var valid_592808 = query.getOrDefault("MaxRecords")
  valid_592808 = validateParameter(valid_592808, JInt, required = false, default = nil)
  if valid_592808 != nil:
    section.add "MaxRecords", valid_592808
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592809 = header.getOrDefault("X-Amz-Signature")
  valid_592809 = validateParameter(valid_592809, JString, required = false,
                                 default = nil)
  if valid_592809 != nil:
    section.add "X-Amz-Signature", valid_592809
  var valid_592810 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592810 = validateParameter(valid_592810, JString, required = false,
                                 default = nil)
  if valid_592810 != nil:
    section.add "X-Amz-Content-Sha256", valid_592810
  var valid_592811 = header.getOrDefault("X-Amz-Date")
  valid_592811 = validateParameter(valid_592811, JString, required = false,
                                 default = nil)
  if valid_592811 != nil:
    section.add "X-Amz-Date", valid_592811
  var valid_592812 = header.getOrDefault("X-Amz-Credential")
  valid_592812 = validateParameter(valid_592812, JString, required = false,
                                 default = nil)
  if valid_592812 != nil:
    section.add "X-Amz-Credential", valid_592812
  var valid_592813 = header.getOrDefault("X-Amz-Security-Token")
  valid_592813 = validateParameter(valid_592813, JString, required = false,
                                 default = nil)
  if valid_592813 != nil:
    section.add "X-Amz-Security-Token", valid_592813
  var valid_592814 = header.getOrDefault("X-Amz-Algorithm")
  valid_592814 = validateParameter(valid_592814, JString, required = false,
                                 default = nil)
  if valid_592814 != nil:
    section.add "X-Amz-Algorithm", valid_592814
  var valid_592815 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592815 = validateParameter(valid_592815, JString, required = false,
                                 default = nil)
  if valid_592815 != nil:
    section.add "X-Amz-SignedHeaders", valid_592815
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592816: Call_GetDescribeDBClusterBacktracks_592799; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592816.validator(path, query, header, formData, body)
  let scheme = call_592816.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592816.url(scheme.get, call_592816.host, call_592816.base,
                         call_592816.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592816, url, valid)

proc call*(call_592817: Call_GetDescribeDBClusterBacktracks_592799;
          DBClusterIdentifier: string; Marker: string = "";
          BacktrackIdentifier: string = "";
          Action: string = "DescribeDBClusterBacktracks";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_592818 = newJObject()
  add(query_592818, "Marker", newJString(Marker))
  add(query_592818, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_592818, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  add(query_592818, "Action", newJString(Action))
  add(query_592818, "Version", newJString(Version))
  if Filters != nil:
    query_592818.add "Filters", Filters
  add(query_592818, "MaxRecords", newJInt(MaxRecords))
  result = call_592817.call(nil, query_592818, nil, nil, nil)

var getDescribeDBClusterBacktracks* = Call_GetDescribeDBClusterBacktracks_592799(
    name: "getDescribeDBClusterBacktracks", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_GetDescribeDBClusterBacktracks_592800, base: "/",
    url: url_GetDescribeDBClusterBacktracks_592801,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterEndpoints_592860 = ref object of OpenApiRestCall_590348
proc url_PostDescribeDBClusterEndpoints_592862(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterEndpoints_592861(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592863 = query.getOrDefault("Action")
  valid_592863 = validateParameter(valid_592863, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_592863 != nil:
    section.add "Action", valid_592863
  var valid_592864 = query.getOrDefault("Version")
  valid_592864 = validateParameter(valid_592864, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592864 != nil:
    section.add "Version", valid_592864
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592865 = header.getOrDefault("X-Amz-Signature")
  valid_592865 = validateParameter(valid_592865, JString, required = false,
                                 default = nil)
  if valid_592865 != nil:
    section.add "X-Amz-Signature", valid_592865
  var valid_592866 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592866 = validateParameter(valid_592866, JString, required = false,
                                 default = nil)
  if valid_592866 != nil:
    section.add "X-Amz-Content-Sha256", valid_592866
  var valid_592867 = header.getOrDefault("X-Amz-Date")
  valid_592867 = validateParameter(valid_592867, JString, required = false,
                                 default = nil)
  if valid_592867 != nil:
    section.add "X-Amz-Date", valid_592867
  var valid_592868 = header.getOrDefault("X-Amz-Credential")
  valid_592868 = validateParameter(valid_592868, JString, required = false,
                                 default = nil)
  if valid_592868 != nil:
    section.add "X-Amz-Credential", valid_592868
  var valid_592869 = header.getOrDefault("X-Amz-Security-Token")
  valid_592869 = validateParameter(valid_592869, JString, required = false,
                                 default = nil)
  if valid_592869 != nil:
    section.add "X-Amz-Security-Token", valid_592869
  var valid_592870 = header.getOrDefault("X-Amz-Algorithm")
  valid_592870 = validateParameter(valid_592870, JString, required = false,
                                 default = nil)
  if valid_592870 != nil:
    section.add "X-Amz-Algorithm", valid_592870
  var valid_592871 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592871 = validateParameter(valid_592871, JString, required = false,
                                 default = nil)
  if valid_592871 != nil:
    section.add "X-Amz-SignedHeaders", valid_592871
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  var valid_592872 = formData.getOrDefault("MaxRecords")
  valid_592872 = validateParameter(valid_592872, JInt, required = false, default = nil)
  if valid_592872 != nil:
    section.add "MaxRecords", valid_592872
  var valid_592873 = formData.getOrDefault("Marker")
  valid_592873 = validateParameter(valid_592873, JString, required = false,
                                 default = nil)
  if valid_592873 != nil:
    section.add "Marker", valid_592873
  var valid_592874 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_592874 = validateParameter(valid_592874, JString, required = false,
                                 default = nil)
  if valid_592874 != nil:
    section.add "DBClusterEndpointIdentifier", valid_592874
  var valid_592875 = formData.getOrDefault("Filters")
  valid_592875 = validateParameter(valid_592875, JArray, required = false,
                                 default = nil)
  if valid_592875 != nil:
    section.add "Filters", valid_592875
  var valid_592876 = formData.getOrDefault("DBClusterIdentifier")
  valid_592876 = validateParameter(valid_592876, JString, required = false,
                                 default = nil)
  if valid_592876 != nil:
    section.add "DBClusterIdentifier", valid_592876
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592877: Call_PostDescribeDBClusterEndpoints_592860; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592877.validator(path, query, header, formData, body)
  let scheme = call_592877.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592877.url(scheme.get, call_592877.host, call_592877.base,
                         call_592877.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592877, url, valid)

proc call*(call_592878: Call_PostDescribeDBClusterEndpoints_592860;
          MaxRecords: int = 0; Marker: string = "";
          DBClusterEndpointIdentifier: string = "";
          Action: string = "DescribeDBClusterEndpoints"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  var query_592879 = newJObject()
  var formData_592880 = newJObject()
  add(formData_592880, "MaxRecords", newJInt(MaxRecords))
  add(formData_592880, "Marker", newJString(Marker))
  add(formData_592880, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_592879, "Action", newJString(Action))
  if Filters != nil:
    formData_592880.add "Filters", Filters
  add(query_592879, "Version", newJString(Version))
  add(formData_592880, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_592878.call(nil, query_592879, nil, formData_592880, nil)

var postDescribeDBClusterEndpoints* = Call_PostDescribeDBClusterEndpoints_592860(
    name: "postDescribeDBClusterEndpoints", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_PostDescribeDBClusterEndpoints_592861, base: "/",
    url: url_PostDescribeDBClusterEndpoints_592862,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterEndpoints_592840 = ref object of OpenApiRestCall_590348
proc url_GetDescribeDBClusterEndpoints_592842(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterEndpoints_592841(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_592843 = query.getOrDefault("Marker")
  valid_592843 = validateParameter(valid_592843, JString, required = false,
                                 default = nil)
  if valid_592843 != nil:
    section.add "Marker", valid_592843
  var valid_592844 = query.getOrDefault("DBClusterIdentifier")
  valid_592844 = validateParameter(valid_592844, JString, required = false,
                                 default = nil)
  if valid_592844 != nil:
    section.add "DBClusterIdentifier", valid_592844
  var valid_592845 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_592845 = validateParameter(valid_592845, JString, required = false,
                                 default = nil)
  if valid_592845 != nil:
    section.add "DBClusterEndpointIdentifier", valid_592845
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592846 = query.getOrDefault("Action")
  valid_592846 = validateParameter(valid_592846, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_592846 != nil:
    section.add "Action", valid_592846
  var valid_592847 = query.getOrDefault("Version")
  valid_592847 = validateParameter(valid_592847, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592847 != nil:
    section.add "Version", valid_592847
  var valid_592848 = query.getOrDefault("Filters")
  valid_592848 = validateParameter(valid_592848, JArray, required = false,
                                 default = nil)
  if valid_592848 != nil:
    section.add "Filters", valid_592848
  var valid_592849 = query.getOrDefault("MaxRecords")
  valid_592849 = validateParameter(valid_592849, JInt, required = false, default = nil)
  if valid_592849 != nil:
    section.add "MaxRecords", valid_592849
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592850 = header.getOrDefault("X-Amz-Signature")
  valid_592850 = validateParameter(valid_592850, JString, required = false,
                                 default = nil)
  if valid_592850 != nil:
    section.add "X-Amz-Signature", valid_592850
  var valid_592851 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592851 = validateParameter(valid_592851, JString, required = false,
                                 default = nil)
  if valid_592851 != nil:
    section.add "X-Amz-Content-Sha256", valid_592851
  var valid_592852 = header.getOrDefault("X-Amz-Date")
  valid_592852 = validateParameter(valid_592852, JString, required = false,
                                 default = nil)
  if valid_592852 != nil:
    section.add "X-Amz-Date", valid_592852
  var valid_592853 = header.getOrDefault("X-Amz-Credential")
  valid_592853 = validateParameter(valid_592853, JString, required = false,
                                 default = nil)
  if valid_592853 != nil:
    section.add "X-Amz-Credential", valid_592853
  var valid_592854 = header.getOrDefault("X-Amz-Security-Token")
  valid_592854 = validateParameter(valid_592854, JString, required = false,
                                 default = nil)
  if valid_592854 != nil:
    section.add "X-Amz-Security-Token", valid_592854
  var valid_592855 = header.getOrDefault("X-Amz-Algorithm")
  valid_592855 = validateParameter(valid_592855, JString, required = false,
                                 default = nil)
  if valid_592855 != nil:
    section.add "X-Amz-Algorithm", valid_592855
  var valid_592856 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592856 = validateParameter(valid_592856, JString, required = false,
                                 default = nil)
  if valid_592856 != nil:
    section.add "X-Amz-SignedHeaders", valid_592856
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592857: Call_GetDescribeDBClusterEndpoints_592840; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592857.validator(path, query, header, formData, body)
  let scheme = call_592857.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592857.url(scheme.get, call_592857.host, call_592857.base,
                         call_592857.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592857, url, valid)

proc call*(call_592858: Call_GetDescribeDBClusterEndpoints_592840;
          Marker: string = ""; DBClusterIdentifier: string = "";
          DBClusterEndpointIdentifier: string = "";
          Action: string = "DescribeDBClusterEndpoints";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_592859 = newJObject()
  add(query_592859, "Marker", newJString(Marker))
  add(query_592859, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_592859, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_592859, "Action", newJString(Action))
  add(query_592859, "Version", newJString(Version))
  if Filters != nil:
    query_592859.add "Filters", Filters
  add(query_592859, "MaxRecords", newJInt(MaxRecords))
  result = call_592858.call(nil, query_592859, nil, nil, nil)

var getDescribeDBClusterEndpoints* = Call_GetDescribeDBClusterEndpoints_592840(
    name: "getDescribeDBClusterEndpoints", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_GetDescribeDBClusterEndpoints_592841, base: "/",
    url: url_GetDescribeDBClusterEndpoints_592842,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameterGroups_592900 = ref object of OpenApiRestCall_590348
proc url_PostDescribeDBClusterParameterGroups_592902(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterParameterGroups_592901(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592903 = query.getOrDefault("Action")
  valid_592903 = validateParameter(valid_592903, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_592903 != nil:
    section.add "Action", valid_592903
  var valid_592904 = query.getOrDefault("Version")
  valid_592904 = validateParameter(valid_592904, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592904 != nil:
    section.add "Version", valid_592904
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592905 = header.getOrDefault("X-Amz-Signature")
  valid_592905 = validateParameter(valid_592905, JString, required = false,
                                 default = nil)
  if valid_592905 != nil:
    section.add "X-Amz-Signature", valid_592905
  var valid_592906 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592906 = validateParameter(valid_592906, JString, required = false,
                                 default = nil)
  if valid_592906 != nil:
    section.add "X-Amz-Content-Sha256", valid_592906
  var valid_592907 = header.getOrDefault("X-Amz-Date")
  valid_592907 = validateParameter(valid_592907, JString, required = false,
                                 default = nil)
  if valid_592907 != nil:
    section.add "X-Amz-Date", valid_592907
  var valid_592908 = header.getOrDefault("X-Amz-Credential")
  valid_592908 = validateParameter(valid_592908, JString, required = false,
                                 default = nil)
  if valid_592908 != nil:
    section.add "X-Amz-Credential", valid_592908
  var valid_592909 = header.getOrDefault("X-Amz-Security-Token")
  valid_592909 = validateParameter(valid_592909, JString, required = false,
                                 default = nil)
  if valid_592909 != nil:
    section.add "X-Amz-Security-Token", valid_592909
  var valid_592910 = header.getOrDefault("X-Amz-Algorithm")
  valid_592910 = validateParameter(valid_592910, JString, required = false,
                                 default = nil)
  if valid_592910 != nil:
    section.add "X-Amz-Algorithm", valid_592910
  var valid_592911 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592911 = validateParameter(valid_592911, JString, required = false,
                                 default = nil)
  if valid_592911 != nil:
    section.add "X-Amz-SignedHeaders", valid_592911
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_592912 = formData.getOrDefault("MaxRecords")
  valid_592912 = validateParameter(valid_592912, JInt, required = false, default = nil)
  if valid_592912 != nil:
    section.add "MaxRecords", valid_592912
  var valid_592913 = formData.getOrDefault("Marker")
  valid_592913 = validateParameter(valid_592913, JString, required = false,
                                 default = nil)
  if valid_592913 != nil:
    section.add "Marker", valid_592913
  var valid_592914 = formData.getOrDefault("Filters")
  valid_592914 = validateParameter(valid_592914, JArray, required = false,
                                 default = nil)
  if valid_592914 != nil:
    section.add "Filters", valid_592914
  var valid_592915 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_592915 = validateParameter(valid_592915, JString, required = false,
                                 default = nil)
  if valid_592915 != nil:
    section.add "DBClusterParameterGroupName", valid_592915
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592916: Call_PostDescribeDBClusterParameterGroups_592900;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592916.validator(path, query, header, formData, body)
  let scheme = call_592916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592916.url(scheme.get, call_592916.host, call_592916.base,
                         call_592916.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592916, url, valid)

proc call*(call_592917: Call_PostDescribeDBClusterParameterGroups_592900;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Filters: JsonNode = nil; DBClusterParameterGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_592918 = newJObject()
  var formData_592919 = newJObject()
  add(formData_592919, "MaxRecords", newJInt(MaxRecords))
  add(formData_592919, "Marker", newJString(Marker))
  add(query_592918, "Action", newJString(Action))
  if Filters != nil:
    formData_592919.add "Filters", Filters
  add(formData_592919, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_592918, "Version", newJString(Version))
  result = call_592917.call(nil, query_592918, nil, formData_592919, nil)

var postDescribeDBClusterParameterGroups* = Call_PostDescribeDBClusterParameterGroups_592900(
    name: "postDescribeDBClusterParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_PostDescribeDBClusterParameterGroups_592901, base: "/",
    url: url_PostDescribeDBClusterParameterGroups_592902,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameterGroups_592881 = ref object of OpenApiRestCall_590348
proc url_GetDescribeDBClusterParameterGroups_592883(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterParameterGroups_592882(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_592884 = query.getOrDefault("Marker")
  valid_592884 = validateParameter(valid_592884, JString, required = false,
                                 default = nil)
  if valid_592884 != nil:
    section.add "Marker", valid_592884
  var valid_592885 = query.getOrDefault("DBClusterParameterGroupName")
  valid_592885 = validateParameter(valid_592885, JString, required = false,
                                 default = nil)
  if valid_592885 != nil:
    section.add "DBClusterParameterGroupName", valid_592885
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592886 = query.getOrDefault("Action")
  valid_592886 = validateParameter(valid_592886, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_592886 != nil:
    section.add "Action", valid_592886
  var valid_592887 = query.getOrDefault("Version")
  valid_592887 = validateParameter(valid_592887, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592887 != nil:
    section.add "Version", valid_592887
  var valid_592888 = query.getOrDefault("Filters")
  valid_592888 = validateParameter(valid_592888, JArray, required = false,
                                 default = nil)
  if valid_592888 != nil:
    section.add "Filters", valid_592888
  var valid_592889 = query.getOrDefault("MaxRecords")
  valid_592889 = validateParameter(valid_592889, JInt, required = false, default = nil)
  if valid_592889 != nil:
    section.add "MaxRecords", valid_592889
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592890 = header.getOrDefault("X-Amz-Signature")
  valid_592890 = validateParameter(valid_592890, JString, required = false,
                                 default = nil)
  if valid_592890 != nil:
    section.add "X-Amz-Signature", valid_592890
  var valid_592891 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592891 = validateParameter(valid_592891, JString, required = false,
                                 default = nil)
  if valid_592891 != nil:
    section.add "X-Amz-Content-Sha256", valid_592891
  var valid_592892 = header.getOrDefault("X-Amz-Date")
  valid_592892 = validateParameter(valid_592892, JString, required = false,
                                 default = nil)
  if valid_592892 != nil:
    section.add "X-Amz-Date", valid_592892
  var valid_592893 = header.getOrDefault("X-Amz-Credential")
  valid_592893 = validateParameter(valid_592893, JString, required = false,
                                 default = nil)
  if valid_592893 != nil:
    section.add "X-Amz-Credential", valid_592893
  var valid_592894 = header.getOrDefault("X-Amz-Security-Token")
  valid_592894 = validateParameter(valid_592894, JString, required = false,
                                 default = nil)
  if valid_592894 != nil:
    section.add "X-Amz-Security-Token", valid_592894
  var valid_592895 = header.getOrDefault("X-Amz-Algorithm")
  valid_592895 = validateParameter(valid_592895, JString, required = false,
                                 default = nil)
  if valid_592895 != nil:
    section.add "X-Amz-Algorithm", valid_592895
  var valid_592896 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592896 = validateParameter(valid_592896, JString, required = false,
                                 default = nil)
  if valid_592896 != nil:
    section.add "X-Amz-SignedHeaders", valid_592896
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592897: Call_GetDescribeDBClusterParameterGroups_592881;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592897.validator(path, query, header, formData, body)
  let scheme = call_592897.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592897.url(scheme.get, call_592897.host, call_592897.base,
                         call_592897.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592897, url, valid)

proc call*(call_592898: Call_GetDescribeDBClusterParameterGroups_592881;
          Marker: string = ""; DBClusterParameterGroupName: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_592899 = newJObject()
  add(query_592899, "Marker", newJString(Marker))
  add(query_592899, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_592899, "Action", newJString(Action))
  add(query_592899, "Version", newJString(Version))
  if Filters != nil:
    query_592899.add "Filters", Filters
  add(query_592899, "MaxRecords", newJInt(MaxRecords))
  result = call_592898.call(nil, query_592899, nil, nil, nil)

var getDescribeDBClusterParameterGroups* = Call_GetDescribeDBClusterParameterGroups_592881(
    name: "getDescribeDBClusterParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_GetDescribeDBClusterParameterGroups_592882, base: "/",
    url: url_GetDescribeDBClusterParameterGroups_592883,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameters_592940 = ref object of OpenApiRestCall_590348
proc url_PostDescribeDBClusterParameters_592942(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterParameters_592941(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592943 = query.getOrDefault("Action")
  valid_592943 = validateParameter(valid_592943, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_592943 != nil:
    section.add "Action", valid_592943
  var valid_592944 = query.getOrDefault("Version")
  valid_592944 = validateParameter(valid_592944, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592944 != nil:
    section.add "Version", valid_592944
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592945 = header.getOrDefault("X-Amz-Signature")
  valid_592945 = validateParameter(valid_592945, JString, required = false,
                                 default = nil)
  if valid_592945 != nil:
    section.add "X-Amz-Signature", valid_592945
  var valid_592946 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592946 = validateParameter(valid_592946, JString, required = false,
                                 default = nil)
  if valid_592946 != nil:
    section.add "X-Amz-Content-Sha256", valid_592946
  var valid_592947 = header.getOrDefault("X-Amz-Date")
  valid_592947 = validateParameter(valid_592947, JString, required = false,
                                 default = nil)
  if valid_592947 != nil:
    section.add "X-Amz-Date", valid_592947
  var valid_592948 = header.getOrDefault("X-Amz-Credential")
  valid_592948 = validateParameter(valid_592948, JString, required = false,
                                 default = nil)
  if valid_592948 != nil:
    section.add "X-Amz-Credential", valid_592948
  var valid_592949 = header.getOrDefault("X-Amz-Security-Token")
  valid_592949 = validateParameter(valid_592949, JString, required = false,
                                 default = nil)
  if valid_592949 != nil:
    section.add "X-Amz-Security-Token", valid_592949
  var valid_592950 = header.getOrDefault("X-Amz-Algorithm")
  valid_592950 = validateParameter(valid_592950, JString, required = false,
                                 default = nil)
  if valid_592950 != nil:
    section.add "X-Amz-Algorithm", valid_592950
  var valid_592951 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592951 = validateParameter(valid_592951, JString, required = false,
                                 default = nil)
  if valid_592951 != nil:
    section.add "X-Amz-SignedHeaders", valid_592951
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_592952 = formData.getOrDefault("Source")
  valid_592952 = validateParameter(valid_592952, JString, required = false,
                                 default = nil)
  if valid_592952 != nil:
    section.add "Source", valid_592952
  var valid_592953 = formData.getOrDefault("MaxRecords")
  valid_592953 = validateParameter(valid_592953, JInt, required = false, default = nil)
  if valid_592953 != nil:
    section.add "MaxRecords", valid_592953
  var valid_592954 = formData.getOrDefault("Marker")
  valid_592954 = validateParameter(valid_592954, JString, required = false,
                                 default = nil)
  if valid_592954 != nil:
    section.add "Marker", valid_592954
  var valid_592955 = formData.getOrDefault("Filters")
  valid_592955 = validateParameter(valid_592955, JArray, required = false,
                                 default = nil)
  if valid_592955 != nil:
    section.add "Filters", valid_592955
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_592956 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_592956 = validateParameter(valid_592956, JString, required = true,
                                 default = nil)
  if valid_592956 != nil:
    section.add "DBClusterParameterGroupName", valid_592956
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592957: Call_PostDescribeDBClusterParameters_592940;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592957.validator(path, query, header, formData, body)
  let scheme = call_592957.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592957.url(scheme.get, call_592957.host, call_592957.base,
                         call_592957.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592957, url, valid)

proc call*(call_592958: Call_PostDescribeDBClusterParameters_592940;
          DBClusterParameterGroupName: string; Source: string = "";
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameters"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_592959 = newJObject()
  var formData_592960 = newJObject()
  add(formData_592960, "Source", newJString(Source))
  add(formData_592960, "MaxRecords", newJInt(MaxRecords))
  add(formData_592960, "Marker", newJString(Marker))
  add(query_592959, "Action", newJString(Action))
  if Filters != nil:
    formData_592960.add "Filters", Filters
  add(formData_592960, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_592959, "Version", newJString(Version))
  result = call_592958.call(nil, query_592959, nil, formData_592960, nil)

var postDescribeDBClusterParameters* = Call_PostDescribeDBClusterParameters_592940(
    name: "postDescribeDBClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_PostDescribeDBClusterParameters_592941, base: "/",
    url: url_PostDescribeDBClusterParameters_592942,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameters_592920 = ref object of OpenApiRestCall_590348
proc url_GetDescribeDBClusterParameters_592922(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterParameters_592921(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_592923 = query.getOrDefault("Marker")
  valid_592923 = validateParameter(valid_592923, JString, required = false,
                                 default = nil)
  if valid_592923 != nil:
    section.add "Marker", valid_592923
  var valid_592924 = query.getOrDefault("Source")
  valid_592924 = validateParameter(valid_592924, JString, required = false,
                                 default = nil)
  if valid_592924 != nil:
    section.add "Source", valid_592924
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_592925 = query.getOrDefault("DBClusterParameterGroupName")
  valid_592925 = validateParameter(valid_592925, JString, required = true,
                                 default = nil)
  if valid_592925 != nil:
    section.add "DBClusterParameterGroupName", valid_592925
  var valid_592926 = query.getOrDefault("Action")
  valid_592926 = validateParameter(valid_592926, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_592926 != nil:
    section.add "Action", valid_592926
  var valid_592927 = query.getOrDefault("Version")
  valid_592927 = validateParameter(valid_592927, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592927 != nil:
    section.add "Version", valid_592927
  var valid_592928 = query.getOrDefault("Filters")
  valid_592928 = validateParameter(valid_592928, JArray, required = false,
                                 default = nil)
  if valid_592928 != nil:
    section.add "Filters", valid_592928
  var valid_592929 = query.getOrDefault("MaxRecords")
  valid_592929 = validateParameter(valid_592929, JInt, required = false, default = nil)
  if valid_592929 != nil:
    section.add "MaxRecords", valid_592929
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592930 = header.getOrDefault("X-Amz-Signature")
  valid_592930 = validateParameter(valid_592930, JString, required = false,
                                 default = nil)
  if valid_592930 != nil:
    section.add "X-Amz-Signature", valid_592930
  var valid_592931 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592931 = validateParameter(valid_592931, JString, required = false,
                                 default = nil)
  if valid_592931 != nil:
    section.add "X-Amz-Content-Sha256", valid_592931
  var valid_592932 = header.getOrDefault("X-Amz-Date")
  valid_592932 = validateParameter(valid_592932, JString, required = false,
                                 default = nil)
  if valid_592932 != nil:
    section.add "X-Amz-Date", valid_592932
  var valid_592933 = header.getOrDefault("X-Amz-Credential")
  valid_592933 = validateParameter(valid_592933, JString, required = false,
                                 default = nil)
  if valid_592933 != nil:
    section.add "X-Amz-Credential", valid_592933
  var valid_592934 = header.getOrDefault("X-Amz-Security-Token")
  valid_592934 = validateParameter(valid_592934, JString, required = false,
                                 default = nil)
  if valid_592934 != nil:
    section.add "X-Amz-Security-Token", valid_592934
  var valid_592935 = header.getOrDefault("X-Amz-Algorithm")
  valid_592935 = validateParameter(valid_592935, JString, required = false,
                                 default = nil)
  if valid_592935 != nil:
    section.add "X-Amz-Algorithm", valid_592935
  var valid_592936 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592936 = validateParameter(valid_592936, JString, required = false,
                                 default = nil)
  if valid_592936 != nil:
    section.add "X-Amz-SignedHeaders", valid_592936
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592937: Call_GetDescribeDBClusterParameters_592920; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592937.validator(path, query, header, formData, body)
  let scheme = call_592937.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592937.url(scheme.get, call_592937.host, call_592937.base,
                         call_592937.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592937, url, valid)

proc call*(call_592938: Call_GetDescribeDBClusterParameters_592920;
          DBClusterParameterGroupName: string; Marker: string = "";
          Source: string = ""; Action: string = "DescribeDBClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_592939 = newJObject()
  add(query_592939, "Marker", newJString(Marker))
  add(query_592939, "Source", newJString(Source))
  add(query_592939, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_592939, "Action", newJString(Action))
  add(query_592939, "Version", newJString(Version))
  if Filters != nil:
    query_592939.add "Filters", Filters
  add(query_592939, "MaxRecords", newJInt(MaxRecords))
  result = call_592938.call(nil, query_592939, nil, nil, nil)

var getDescribeDBClusterParameters* = Call_GetDescribeDBClusterParameters_592920(
    name: "getDescribeDBClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_GetDescribeDBClusterParameters_592921, base: "/",
    url: url_GetDescribeDBClusterParameters_592922,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshotAttributes_592977 = ref object of OpenApiRestCall_590348
proc url_PostDescribeDBClusterSnapshotAttributes_592979(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterSnapshotAttributes_592978(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592980 = query.getOrDefault("Action")
  valid_592980 = validateParameter(valid_592980, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_592980 != nil:
    section.add "Action", valid_592980
  var valid_592981 = query.getOrDefault("Version")
  valid_592981 = validateParameter(valid_592981, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592981 != nil:
    section.add "Version", valid_592981
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592982 = header.getOrDefault("X-Amz-Signature")
  valid_592982 = validateParameter(valid_592982, JString, required = false,
                                 default = nil)
  if valid_592982 != nil:
    section.add "X-Amz-Signature", valid_592982
  var valid_592983 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592983 = validateParameter(valid_592983, JString, required = false,
                                 default = nil)
  if valid_592983 != nil:
    section.add "X-Amz-Content-Sha256", valid_592983
  var valid_592984 = header.getOrDefault("X-Amz-Date")
  valid_592984 = validateParameter(valid_592984, JString, required = false,
                                 default = nil)
  if valid_592984 != nil:
    section.add "X-Amz-Date", valid_592984
  var valid_592985 = header.getOrDefault("X-Amz-Credential")
  valid_592985 = validateParameter(valid_592985, JString, required = false,
                                 default = nil)
  if valid_592985 != nil:
    section.add "X-Amz-Credential", valid_592985
  var valid_592986 = header.getOrDefault("X-Amz-Security-Token")
  valid_592986 = validateParameter(valid_592986, JString, required = false,
                                 default = nil)
  if valid_592986 != nil:
    section.add "X-Amz-Security-Token", valid_592986
  var valid_592987 = header.getOrDefault("X-Amz-Algorithm")
  valid_592987 = validateParameter(valid_592987, JString, required = false,
                                 default = nil)
  if valid_592987 != nil:
    section.add "X-Amz-Algorithm", valid_592987
  var valid_592988 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592988 = validateParameter(valid_592988, JString, required = false,
                                 default = nil)
  if valid_592988 != nil:
    section.add "X-Amz-SignedHeaders", valid_592988
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_592989 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_592989 = validateParameter(valid_592989, JString, required = true,
                                 default = nil)
  if valid_592989 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_592989
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592990: Call_PostDescribeDBClusterSnapshotAttributes_592977;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592990.validator(path, query, header, formData, body)
  let scheme = call_592990.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592990.url(scheme.get, call_592990.host, call_592990.base,
                         call_592990.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592990, url, valid)

proc call*(call_592991: Call_PostDescribeDBClusterSnapshotAttributes_592977;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592992 = newJObject()
  var formData_592993 = newJObject()
  add(formData_592993, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_592992, "Action", newJString(Action))
  add(query_592992, "Version", newJString(Version))
  result = call_592991.call(nil, query_592992, nil, formData_592993, nil)

var postDescribeDBClusterSnapshotAttributes* = Call_PostDescribeDBClusterSnapshotAttributes_592977(
    name: "postDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_PostDescribeDBClusterSnapshotAttributes_592978, base: "/",
    url: url_PostDescribeDBClusterSnapshotAttributes_592979,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshotAttributes_592961 = ref object of OpenApiRestCall_590348
proc url_GetDescribeDBClusterSnapshotAttributes_592963(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterSnapshotAttributes_592962(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_592964 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_592964 = validateParameter(valid_592964, JString, required = true,
                                 default = nil)
  if valid_592964 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_592964
  var valid_592965 = query.getOrDefault("Action")
  valid_592965 = validateParameter(valid_592965, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_592965 != nil:
    section.add "Action", valid_592965
  var valid_592966 = query.getOrDefault("Version")
  valid_592966 = validateParameter(valid_592966, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_592966 != nil:
    section.add "Version", valid_592966
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592967 = header.getOrDefault("X-Amz-Signature")
  valid_592967 = validateParameter(valid_592967, JString, required = false,
                                 default = nil)
  if valid_592967 != nil:
    section.add "X-Amz-Signature", valid_592967
  var valid_592968 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592968 = validateParameter(valid_592968, JString, required = false,
                                 default = nil)
  if valid_592968 != nil:
    section.add "X-Amz-Content-Sha256", valid_592968
  var valid_592969 = header.getOrDefault("X-Amz-Date")
  valid_592969 = validateParameter(valid_592969, JString, required = false,
                                 default = nil)
  if valid_592969 != nil:
    section.add "X-Amz-Date", valid_592969
  var valid_592970 = header.getOrDefault("X-Amz-Credential")
  valid_592970 = validateParameter(valid_592970, JString, required = false,
                                 default = nil)
  if valid_592970 != nil:
    section.add "X-Amz-Credential", valid_592970
  var valid_592971 = header.getOrDefault("X-Amz-Security-Token")
  valid_592971 = validateParameter(valid_592971, JString, required = false,
                                 default = nil)
  if valid_592971 != nil:
    section.add "X-Amz-Security-Token", valid_592971
  var valid_592972 = header.getOrDefault("X-Amz-Algorithm")
  valid_592972 = validateParameter(valid_592972, JString, required = false,
                                 default = nil)
  if valid_592972 != nil:
    section.add "X-Amz-Algorithm", valid_592972
  var valid_592973 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592973 = validateParameter(valid_592973, JString, required = false,
                                 default = nil)
  if valid_592973 != nil:
    section.add "X-Amz-SignedHeaders", valid_592973
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592974: Call_GetDescribeDBClusterSnapshotAttributes_592961;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_592974.validator(path, query, header, formData, body)
  let scheme = call_592974.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592974.url(scheme.get, call_592974.host, call_592974.base,
                         call_592974.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592974, url, valid)

proc call*(call_592975: Call_GetDescribeDBClusterSnapshotAttributes_592961;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592976 = newJObject()
  add(query_592976, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_592976, "Action", newJString(Action))
  add(query_592976, "Version", newJString(Version))
  result = call_592975.call(nil, query_592976, nil, nil, nil)

var getDescribeDBClusterSnapshotAttributes* = Call_GetDescribeDBClusterSnapshotAttributes_592961(
    name: "getDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_GetDescribeDBClusterSnapshotAttributes_592962, base: "/",
    url: url_GetDescribeDBClusterSnapshotAttributes_592963,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshots_593017 = ref object of OpenApiRestCall_590348
proc url_PostDescribeDBClusterSnapshots_593019(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterSnapshots_593018(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593020 = query.getOrDefault("Action")
  valid_593020 = validateParameter(valid_593020, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_593020 != nil:
    section.add "Action", valid_593020
  var valid_593021 = query.getOrDefault("Version")
  valid_593021 = validateParameter(valid_593021, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593021 != nil:
    section.add "Version", valid_593021
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593022 = header.getOrDefault("X-Amz-Signature")
  valid_593022 = validateParameter(valid_593022, JString, required = false,
                                 default = nil)
  if valid_593022 != nil:
    section.add "X-Amz-Signature", valid_593022
  var valid_593023 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593023 = validateParameter(valid_593023, JString, required = false,
                                 default = nil)
  if valid_593023 != nil:
    section.add "X-Amz-Content-Sha256", valid_593023
  var valid_593024 = header.getOrDefault("X-Amz-Date")
  valid_593024 = validateParameter(valid_593024, JString, required = false,
                                 default = nil)
  if valid_593024 != nil:
    section.add "X-Amz-Date", valid_593024
  var valid_593025 = header.getOrDefault("X-Amz-Credential")
  valid_593025 = validateParameter(valid_593025, JString, required = false,
                                 default = nil)
  if valid_593025 != nil:
    section.add "X-Amz-Credential", valid_593025
  var valid_593026 = header.getOrDefault("X-Amz-Security-Token")
  valid_593026 = validateParameter(valid_593026, JString, required = false,
                                 default = nil)
  if valid_593026 != nil:
    section.add "X-Amz-Security-Token", valid_593026
  var valid_593027 = header.getOrDefault("X-Amz-Algorithm")
  valid_593027 = validateParameter(valid_593027, JString, required = false,
                                 default = nil)
  if valid_593027 != nil:
    section.add "X-Amz-Algorithm", valid_593027
  var valid_593028 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593028 = validateParameter(valid_593028, JString, required = false,
                                 default = nil)
  if valid_593028 != nil:
    section.add "X-Amz-SignedHeaders", valid_593028
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_593029 = formData.getOrDefault("SnapshotType")
  valid_593029 = validateParameter(valid_593029, JString, required = false,
                                 default = nil)
  if valid_593029 != nil:
    section.add "SnapshotType", valid_593029
  var valid_593030 = formData.getOrDefault("MaxRecords")
  valid_593030 = validateParameter(valid_593030, JInt, required = false, default = nil)
  if valid_593030 != nil:
    section.add "MaxRecords", valid_593030
  var valid_593031 = formData.getOrDefault("IncludePublic")
  valid_593031 = validateParameter(valid_593031, JBool, required = false, default = nil)
  if valid_593031 != nil:
    section.add "IncludePublic", valid_593031
  var valid_593032 = formData.getOrDefault("Marker")
  valid_593032 = validateParameter(valid_593032, JString, required = false,
                                 default = nil)
  if valid_593032 != nil:
    section.add "Marker", valid_593032
  var valid_593033 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_593033 = validateParameter(valid_593033, JString, required = false,
                                 default = nil)
  if valid_593033 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_593033
  var valid_593034 = formData.getOrDefault("IncludeShared")
  valid_593034 = validateParameter(valid_593034, JBool, required = false, default = nil)
  if valid_593034 != nil:
    section.add "IncludeShared", valid_593034
  var valid_593035 = formData.getOrDefault("Filters")
  valid_593035 = validateParameter(valid_593035, JArray, required = false,
                                 default = nil)
  if valid_593035 != nil:
    section.add "Filters", valid_593035
  var valid_593036 = formData.getOrDefault("DBClusterIdentifier")
  valid_593036 = validateParameter(valid_593036, JString, required = false,
                                 default = nil)
  if valid_593036 != nil:
    section.add "DBClusterIdentifier", valid_593036
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593037: Call_PostDescribeDBClusterSnapshots_593017; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593037.validator(path, query, header, formData, body)
  let scheme = call_593037.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593037.url(scheme.get, call_593037.host, call_593037.base,
                         call_593037.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593037, url, valid)

proc call*(call_593038: Call_PostDescribeDBClusterSnapshots_593017;
          SnapshotType: string = ""; MaxRecords: int = 0; IncludePublic: bool = false;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          IncludeShared: bool = false;
          Action: string = "DescribeDBClusterSnapshots"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_593039 = newJObject()
  var formData_593040 = newJObject()
  add(formData_593040, "SnapshotType", newJString(SnapshotType))
  add(formData_593040, "MaxRecords", newJInt(MaxRecords))
  add(formData_593040, "IncludePublic", newJBool(IncludePublic))
  add(formData_593040, "Marker", newJString(Marker))
  add(formData_593040, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(formData_593040, "IncludeShared", newJBool(IncludeShared))
  add(query_593039, "Action", newJString(Action))
  if Filters != nil:
    formData_593040.add "Filters", Filters
  add(query_593039, "Version", newJString(Version))
  add(formData_593040, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_593038.call(nil, query_593039, nil, formData_593040, nil)

var postDescribeDBClusterSnapshots* = Call_PostDescribeDBClusterSnapshots_593017(
    name: "postDescribeDBClusterSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_PostDescribeDBClusterSnapshots_593018, base: "/",
    url: url_PostDescribeDBClusterSnapshots_593019,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshots_592994 = ref object of OpenApiRestCall_590348
proc url_GetDescribeDBClusterSnapshots_592996(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterSnapshots_592995(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_592997 = query.getOrDefault("Marker")
  valid_592997 = validateParameter(valid_592997, JString, required = false,
                                 default = nil)
  if valid_592997 != nil:
    section.add "Marker", valid_592997
  var valid_592998 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_592998 = validateParameter(valid_592998, JString, required = false,
                                 default = nil)
  if valid_592998 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_592998
  var valid_592999 = query.getOrDefault("DBClusterIdentifier")
  valid_592999 = validateParameter(valid_592999, JString, required = false,
                                 default = nil)
  if valid_592999 != nil:
    section.add "DBClusterIdentifier", valid_592999
  var valid_593000 = query.getOrDefault("SnapshotType")
  valid_593000 = validateParameter(valid_593000, JString, required = false,
                                 default = nil)
  if valid_593000 != nil:
    section.add "SnapshotType", valid_593000
  var valid_593001 = query.getOrDefault("IncludePublic")
  valid_593001 = validateParameter(valid_593001, JBool, required = false, default = nil)
  if valid_593001 != nil:
    section.add "IncludePublic", valid_593001
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593002 = query.getOrDefault("Action")
  valid_593002 = validateParameter(valid_593002, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_593002 != nil:
    section.add "Action", valid_593002
  var valid_593003 = query.getOrDefault("IncludeShared")
  valid_593003 = validateParameter(valid_593003, JBool, required = false, default = nil)
  if valid_593003 != nil:
    section.add "IncludeShared", valid_593003
  var valid_593004 = query.getOrDefault("Version")
  valid_593004 = validateParameter(valid_593004, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593004 != nil:
    section.add "Version", valid_593004
  var valid_593005 = query.getOrDefault("Filters")
  valid_593005 = validateParameter(valid_593005, JArray, required = false,
                                 default = nil)
  if valid_593005 != nil:
    section.add "Filters", valid_593005
  var valid_593006 = query.getOrDefault("MaxRecords")
  valid_593006 = validateParameter(valid_593006, JInt, required = false, default = nil)
  if valid_593006 != nil:
    section.add "MaxRecords", valid_593006
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593007 = header.getOrDefault("X-Amz-Signature")
  valid_593007 = validateParameter(valid_593007, JString, required = false,
                                 default = nil)
  if valid_593007 != nil:
    section.add "X-Amz-Signature", valid_593007
  var valid_593008 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593008 = validateParameter(valid_593008, JString, required = false,
                                 default = nil)
  if valid_593008 != nil:
    section.add "X-Amz-Content-Sha256", valid_593008
  var valid_593009 = header.getOrDefault("X-Amz-Date")
  valid_593009 = validateParameter(valid_593009, JString, required = false,
                                 default = nil)
  if valid_593009 != nil:
    section.add "X-Amz-Date", valid_593009
  var valid_593010 = header.getOrDefault("X-Amz-Credential")
  valid_593010 = validateParameter(valid_593010, JString, required = false,
                                 default = nil)
  if valid_593010 != nil:
    section.add "X-Amz-Credential", valid_593010
  var valid_593011 = header.getOrDefault("X-Amz-Security-Token")
  valid_593011 = validateParameter(valid_593011, JString, required = false,
                                 default = nil)
  if valid_593011 != nil:
    section.add "X-Amz-Security-Token", valid_593011
  var valid_593012 = header.getOrDefault("X-Amz-Algorithm")
  valid_593012 = validateParameter(valid_593012, JString, required = false,
                                 default = nil)
  if valid_593012 != nil:
    section.add "X-Amz-Algorithm", valid_593012
  var valid_593013 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593013 = validateParameter(valid_593013, JString, required = false,
                                 default = nil)
  if valid_593013 != nil:
    section.add "X-Amz-SignedHeaders", valid_593013
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593014: Call_GetDescribeDBClusterSnapshots_592994; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593014.validator(path, query, header, formData, body)
  let scheme = call_593014.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593014.url(scheme.get, call_593014.host, call_593014.base,
                         call_593014.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593014, url, valid)

proc call*(call_593015: Call_GetDescribeDBClusterSnapshots_592994;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          DBClusterIdentifier: string = ""; SnapshotType: string = "";
          IncludePublic: bool = false;
          Action: string = "DescribeDBClusterSnapshots";
          IncludeShared: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_593016 = newJObject()
  add(query_593016, "Marker", newJString(Marker))
  add(query_593016, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_593016, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_593016, "SnapshotType", newJString(SnapshotType))
  add(query_593016, "IncludePublic", newJBool(IncludePublic))
  add(query_593016, "Action", newJString(Action))
  add(query_593016, "IncludeShared", newJBool(IncludeShared))
  add(query_593016, "Version", newJString(Version))
  if Filters != nil:
    query_593016.add "Filters", Filters
  add(query_593016, "MaxRecords", newJInt(MaxRecords))
  result = call_593015.call(nil, query_593016, nil, nil, nil)

var getDescribeDBClusterSnapshots* = Call_GetDescribeDBClusterSnapshots_592994(
    name: "getDescribeDBClusterSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_GetDescribeDBClusterSnapshots_592995, base: "/",
    url: url_GetDescribeDBClusterSnapshots_592996,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusters_593061 = ref object of OpenApiRestCall_590348
proc url_PostDescribeDBClusters_593063(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusters_593062(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593064 = query.getOrDefault("Action")
  valid_593064 = validateParameter(valid_593064, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_593064 != nil:
    section.add "Action", valid_593064
  var valid_593065 = query.getOrDefault("Version")
  valid_593065 = validateParameter(valid_593065, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593065 != nil:
    section.add "Version", valid_593065
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593066 = header.getOrDefault("X-Amz-Signature")
  valid_593066 = validateParameter(valid_593066, JString, required = false,
                                 default = nil)
  if valid_593066 != nil:
    section.add "X-Amz-Signature", valid_593066
  var valid_593067 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593067 = validateParameter(valid_593067, JString, required = false,
                                 default = nil)
  if valid_593067 != nil:
    section.add "X-Amz-Content-Sha256", valid_593067
  var valid_593068 = header.getOrDefault("X-Amz-Date")
  valid_593068 = validateParameter(valid_593068, JString, required = false,
                                 default = nil)
  if valid_593068 != nil:
    section.add "X-Amz-Date", valid_593068
  var valid_593069 = header.getOrDefault("X-Amz-Credential")
  valid_593069 = validateParameter(valid_593069, JString, required = false,
                                 default = nil)
  if valid_593069 != nil:
    section.add "X-Amz-Credential", valid_593069
  var valid_593070 = header.getOrDefault("X-Amz-Security-Token")
  valid_593070 = validateParameter(valid_593070, JString, required = false,
                                 default = nil)
  if valid_593070 != nil:
    section.add "X-Amz-Security-Token", valid_593070
  var valid_593071 = header.getOrDefault("X-Amz-Algorithm")
  valid_593071 = validateParameter(valid_593071, JString, required = false,
                                 default = nil)
  if valid_593071 != nil:
    section.add "X-Amz-Algorithm", valid_593071
  var valid_593072 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593072 = validateParameter(valid_593072, JString, required = false,
                                 default = nil)
  if valid_593072 != nil:
    section.add "X-Amz-SignedHeaders", valid_593072
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_593073 = formData.getOrDefault("MaxRecords")
  valid_593073 = validateParameter(valid_593073, JInt, required = false, default = nil)
  if valid_593073 != nil:
    section.add "MaxRecords", valid_593073
  var valid_593074 = formData.getOrDefault("Marker")
  valid_593074 = validateParameter(valid_593074, JString, required = false,
                                 default = nil)
  if valid_593074 != nil:
    section.add "Marker", valid_593074
  var valid_593075 = formData.getOrDefault("IncludeShared")
  valid_593075 = validateParameter(valid_593075, JBool, required = false, default = nil)
  if valid_593075 != nil:
    section.add "IncludeShared", valid_593075
  var valid_593076 = formData.getOrDefault("Filters")
  valid_593076 = validateParameter(valid_593076, JArray, required = false,
                                 default = nil)
  if valid_593076 != nil:
    section.add "Filters", valid_593076
  var valid_593077 = formData.getOrDefault("DBClusterIdentifier")
  valid_593077 = validateParameter(valid_593077, JString, required = false,
                                 default = nil)
  if valid_593077 != nil:
    section.add "DBClusterIdentifier", valid_593077
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593078: Call_PostDescribeDBClusters_593061; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593078.validator(path, query, header, formData, body)
  let scheme = call_593078.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593078.url(scheme.get, call_593078.host, call_593078.base,
                         call_593078.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593078, url, valid)

proc call*(call_593079: Call_PostDescribeDBClusters_593061; MaxRecords: int = 0;
          Marker: string = ""; IncludeShared: bool = false;
          Action: string = "DescribeDBClusters"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_593080 = newJObject()
  var formData_593081 = newJObject()
  add(formData_593081, "MaxRecords", newJInt(MaxRecords))
  add(formData_593081, "Marker", newJString(Marker))
  add(formData_593081, "IncludeShared", newJBool(IncludeShared))
  add(query_593080, "Action", newJString(Action))
  if Filters != nil:
    formData_593081.add "Filters", Filters
  add(query_593080, "Version", newJString(Version))
  add(formData_593081, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_593079.call(nil, query_593080, nil, formData_593081, nil)

var postDescribeDBClusters* = Call_PostDescribeDBClusters_593061(
    name: "postDescribeDBClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_PostDescribeDBClusters_593062, base: "/",
    url: url_PostDescribeDBClusters_593063, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusters_593041 = ref object of OpenApiRestCall_590348
proc url_GetDescribeDBClusters_593043(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusters_593042(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_593044 = query.getOrDefault("Marker")
  valid_593044 = validateParameter(valid_593044, JString, required = false,
                                 default = nil)
  if valid_593044 != nil:
    section.add "Marker", valid_593044
  var valid_593045 = query.getOrDefault("DBClusterIdentifier")
  valid_593045 = validateParameter(valid_593045, JString, required = false,
                                 default = nil)
  if valid_593045 != nil:
    section.add "DBClusterIdentifier", valid_593045
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593046 = query.getOrDefault("Action")
  valid_593046 = validateParameter(valid_593046, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_593046 != nil:
    section.add "Action", valid_593046
  var valid_593047 = query.getOrDefault("IncludeShared")
  valid_593047 = validateParameter(valid_593047, JBool, required = false, default = nil)
  if valid_593047 != nil:
    section.add "IncludeShared", valid_593047
  var valid_593048 = query.getOrDefault("Version")
  valid_593048 = validateParameter(valid_593048, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593048 != nil:
    section.add "Version", valid_593048
  var valid_593049 = query.getOrDefault("Filters")
  valid_593049 = validateParameter(valid_593049, JArray, required = false,
                                 default = nil)
  if valid_593049 != nil:
    section.add "Filters", valid_593049
  var valid_593050 = query.getOrDefault("MaxRecords")
  valid_593050 = validateParameter(valid_593050, JInt, required = false, default = nil)
  if valid_593050 != nil:
    section.add "MaxRecords", valid_593050
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593051 = header.getOrDefault("X-Amz-Signature")
  valid_593051 = validateParameter(valid_593051, JString, required = false,
                                 default = nil)
  if valid_593051 != nil:
    section.add "X-Amz-Signature", valid_593051
  var valid_593052 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593052 = validateParameter(valid_593052, JString, required = false,
                                 default = nil)
  if valid_593052 != nil:
    section.add "X-Amz-Content-Sha256", valid_593052
  var valid_593053 = header.getOrDefault("X-Amz-Date")
  valid_593053 = validateParameter(valid_593053, JString, required = false,
                                 default = nil)
  if valid_593053 != nil:
    section.add "X-Amz-Date", valid_593053
  var valid_593054 = header.getOrDefault("X-Amz-Credential")
  valid_593054 = validateParameter(valid_593054, JString, required = false,
                                 default = nil)
  if valid_593054 != nil:
    section.add "X-Amz-Credential", valid_593054
  var valid_593055 = header.getOrDefault("X-Amz-Security-Token")
  valid_593055 = validateParameter(valid_593055, JString, required = false,
                                 default = nil)
  if valid_593055 != nil:
    section.add "X-Amz-Security-Token", valid_593055
  var valid_593056 = header.getOrDefault("X-Amz-Algorithm")
  valid_593056 = validateParameter(valid_593056, JString, required = false,
                                 default = nil)
  if valid_593056 != nil:
    section.add "X-Amz-Algorithm", valid_593056
  var valid_593057 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593057 = validateParameter(valid_593057, JString, required = false,
                                 default = nil)
  if valid_593057 != nil:
    section.add "X-Amz-SignedHeaders", valid_593057
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593058: Call_GetDescribeDBClusters_593041; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593058.validator(path, query, header, formData, body)
  let scheme = call_593058.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593058.url(scheme.get, call_593058.host, call_593058.base,
                         call_593058.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593058, url, valid)

proc call*(call_593059: Call_GetDescribeDBClusters_593041; Marker: string = "";
          DBClusterIdentifier: string = ""; Action: string = "DescribeDBClusters";
          IncludeShared: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_593060 = newJObject()
  add(query_593060, "Marker", newJString(Marker))
  add(query_593060, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_593060, "Action", newJString(Action))
  add(query_593060, "IncludeShared", newJBool(IncludeShared))
  add(query_593060, "Version", newJString(Version))
  if Filters != nil:
    query_593060.add "Filters", Filters
  add(query_593060, "MaxRecords", newJInt(MaxRecords))
  result = call_593059.call(nil, query_593060, nil, nil, nil)

var getDescribeDBClusters* = Call_GetDescribeDBClusters_593041(
    name: "getDescribeDBClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_GetDescribeDBClusters_593042, base: "/",
    url: url_GetDescribeDBClusters_593043, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBEngineVersions_593107 = ref object of OpenApiRestCall_590348
proc url_PostDescribeDBEngineVersions_593109(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBEngineVersions_593108(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593110 = query.getOrDefault("Action")
  valid_593110 = validateParameter(valid_593110, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_593110 != nil:
    section.add "Action", valid_593110
  var valid_593111 = query.getOrDefault("Version")
  valid_593111 = validateParameter(valid_593111, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593111 != nil:
    section.add "Version", valid_593111
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593112 = header.getOrDefault("X-Amz-Signature")
  valid_593112 = validateParameter(valid_593112, JString, required = false,
                                 default = nil)
  if valid_593112 != nil:
    section.add "X-Amz-Signature", valid_593112
  var valid_593113 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593113 = validateParameter(valid_593113, JString, required = false,
                                 default = nil)
  if valid_593113 != nil:
    section.add "X-Amz-Content-Sha256", valid_593113
  var valid_593114 = header.getOrDefault("X-Amz-Date")
  valid_593114 = validateParameter(valid_593114, JString, required = false,
                                 default = nil)
  if valid_593114 != nil:
    section.add "X-Amz-Date", valid_593114
  var valid_593115 = header.getOrDefault("X-Amz-Credential")
  valid_593115 = validateParameter(valid_593115, JString, required = false,
                                 default = nil)
  if valid_593115 != nil:
    section.add "X-Amz-Credential", valid_593115
  var valid_593116 = header.getOrDefault("X-Amz-Security-Token")
  valid_593116 = validateParameter(valid_593116, JString, required = false,
                                 default = nil)
  if valid_593116 != nil:
    section.add "X-Amz-Security-Token", valid_593116
  var valid_593117 = header.getOrDefault("X-Amz-Algorithm")
  valid_593117 = validateParameter(valid_593117, JString, required = false,
                                 default = nil)
  if valid_593117 != nil:
    section.add "X-Amz-Algorithm", valid_593117
  var valid_593118 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593118 = validateParameter(valid_593118, JString, required = false,
                                 default = nil)
  if valid_593118 != nil:
    section.add "X-Amz-SignedHeaders", valid_593118
  result.add "header", section
  ## parameters in `formData` object:
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Engine: JString
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  section = newJObject()
  var valid_593119 = formData.getOrDefault("DefaultOnly")
  valid_593119 = validateParameter(valid_593119, JBool, required = false, default = nil)
  if valid_593119 != nil:
    section.add "DefaultOnly", valid_593119
  var valid_593120 = formData.getOrDefault("MaxRecords")
  valid_593120 = validateParameter(valid_593120, JInt, required = false, default = nil)
  if valid_593120 != nil:
    section.add "MaxRecords", valid_593120
  var valid_593121 = formData.getOrDefault("EngineVersion")
  valid_593121 = validateParameter(valid_593121, JString, required = false,
                                 default = nil)
  if valid_593121 != nil:
    section.add "EngineVersion", valid_593121
  var valid_593122 = formData.getOrDefault("Marker")
  valid_593122 = validateParameter(valid_593122, JString, required = false,
                                 default = nil)
  if valid_593122 != nil:
    section.add "Marker", valid_593122
  var valid_593123 = formData.getOrDefault("IncludeAll")
  valid_593123 = validateParameter(valid_593123, JBool, required = false, default = nil)
  if valid_593123 != nil:
    section.add "IncludeAll", valid_593123
  var valid_593124 = formData.getOrDefault("Engine")
  valid_593124 = validateParameter(valid_593124, JString, required = false,
                                 default = nil)
  if valid_593124 != nil:
    section.add "Engine", valid_593124
  var valid_593125 = formData.getOrDefault("ListSupportedCharacterSets")
  valid_593125 = validateParameter(valid_593125, JBool, required = false, default = nil)
  if valid_593125 != nil:
    section.add "ListSupportedCharacterSets", valid_593125
  var valid_593126 = formData.getOrDefault("ListSupportedTimezones")
  valid_593126 = validateParameter(valid_593126, JBool, required = false, default = nil)
  if valid_593126 != nil:
    section.add "ListSupportedTimezones", valid_593126
  var valid_593127 = formData.getOrDefault("Filters")
  valid_593127 = validateParameter(valid_593127, JArray, required = false,
                                 default = nil)
  if valid_593127 != nil:
    section.add "Filters", valid_593127
  var valid_593128 = formData.getOrDefault("DBParameterGroupFamily")
  valid_593128 = validateParameter(valid_593128, JString, required = false,
                                 default = nil)
  if valid_593128 != nil:
    section.add "DBParameterGroupFamily", valid_593128
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593129: Call_PostDescribeDBEngineVersions_593107; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_593129.validator(path, query, header, formData, body)
  let scheme = call_593129.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593129.url(scheme.get, call_593129.host, call_593129.base,
                         call_593129.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593129, url, valid)

proc call*(call_593130: Call_PostDescribeDBEngineVersions_593107;
          DefaultOnly: bool = false; MaxRecords: int = 0; EngineVersion: string = "";
          Marker: string = ""; IncludeAll: bool = false; Engine: string = "";
          ListSupportedCharacterSets: bool = false;
          Action: string = "DescribeDBEngineVersions";
          ListSupportedTimezones: bool = false; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBParameterGroupFamily: string = ""): Recallable =
  ## postDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Engine: string
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Action: string (required)
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  var query_593131 = newJObject()
  var formData_593132 = newJObject()
  add(formData_593132, "DefaultOnly", newJBool(DefaultOnly))
  add(formData_593132, "MaxRecords", newJInt(MaxRecords))
  add(formData_593132, "EngineVersion", newJString(EngineVersion))
  add(formData_593132, "Marker", newJString(Marker))
  add(formData_593132, "IncludeAll", newJBool(IncludeAll))
  add(formData_593132, "Engine", newJString(Engine))
  add(formData_593132, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_593131, "Action", newJString(Action))
  add(formData_593132, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  if Filters != nil:
    formData_593132.add "Filters", Filters
  add(query_593131, "Version", newJString(Version))
  add(formData_593132, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_593130.call(nil, query_593131, nil, formData_593132, nil)

var postDescribeDBEngineVersions* = Call_PostDescribeDBEngineVersions_593107(
    name: "postDescribeDBEngineVersions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_PostDescribeDBEngineVersions_593108, base: "/",
    url: url_PostDescribeDBEngineVersions_593109,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBEngineVersions_593082 = ref object of OpenApiRestCall_590348
proc url_GetDescribeDBEngineVersions_593084(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBEngineVersions_593083(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: JString
  ##         : The database engine to return.
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: JString (required)
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  section = newJObject()
  var valid_593085 = query.getOrDefault("Marker")
  valid_593085 = validateParameter(valid_593085, JString, required = false,
                                 default = nil)
  if valid_593085 != nil:
    section.add "Marker", valid_593085
  var valid_593086 = query.getOrDefault("ListSupportedTimezones")
  valid_593086 = validateParameter(valid_593086, JBool, required = false, default = nil)
  if valid_593086 != nil:
    section.add "ListSupportedTimezones", valid_593086
  var valid_593087 = query.getOrDefault("DBParameterGroupFamily")
  valid_593087 = validateParameter(valid_593087, JString, required = false,
                                 default = nil)
  if valid_593087 != nil:
    section.add "DBParameterGroupFamily", valid_593087
  var valid_593088 = query.getOrDefault("Engine")
  valid_593088 = validateParameter(valid_593088, JString, required = false,
                                 default = nil)
  if valid_593088 != nil:
    section.add "Engine", valid_593088
  var valid_593089 = query.getOrDefault("IncludeAll")
  valid_593089 = validateParameter(valid_593089, JBool, required = false, default = nil)
  if valid_593089 != nil:
    section.add "IncludeAll", valid_593089
  var valid_593090 = query.getOrDefault("EngineVersion")
  valid_593090 = validateParameter(valid_593090, JString, required = false,
                                 default = nil)
  if valid_593090 != nil:
    section.add "EngineVersion", valid_593090
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593091 = query.getOrDefault("Action")
  valid_593091 = validateParameter(valid_593091, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_593091 != nil:
    section.add "Action", valid_593091
  var valid_593092 = query.getOrDefault("ListSupportedCharacterSets")
  valid_593092 = validateParameter(valid_593092, JBool, required = false, default = nil)
  if valid_593092 != nil:
    section.add "ListSupportedCharacterSets", valid_593092
  var valid_593093 = query.getOrDefault("Version")
  valid_593093 = validateParameter(valid_593093, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593093 != nil:
    section.add "Version", valid_593093
  var valid_593094 = query.getOrDefault("Filters")
  valid_593094 = validateParameter(valid_593094, JArray, required = false,
                                 default = nil)
  if valid_593094 != nil:
    section.add "Filters", valid_593094
  var valid_593095 = query.getOrDefault("MaxRecords")
  valid_593095 = validateParameter(valid_593095, JInt, required = false, default = nil)
  if valid_593095 != nil:
    section.add "MaxRecords", valid_593095
  var valid_593096 = query.getOrDefault("DefaultOnly")
  valid_593096 = validateParameter(valid_593096, JBool, required = false, default = nil)
  if valid_593096 != nil:
    section.add "DefaultOnly", valid_593096
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593097 = header.getOrDefault("X-Amz-Signature")
  valid_593097 = validateParameter(valid_593097, JString, required = false,
                                 default = nil)
  if valid_593097 != nil:
    section.add "X-Amz-Signature", valid_593097
  var valid_593098 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593098 = validateParameter(valid_593098, JString, required = false,
                                 default = nil)
  if valid_593098 != nil:
    section.add "X-Amz-Content-Sha256", valid_593098
  var valid_593099 = header.getOrDefault("X-Amz-Date")
  valid_593099 = validateParameter(valid_593099, JString, required = false,
                                 default = nil)
  if valid_593099 != nil:
    section.add "X-Amz-Date", valid_593099
  var valid_593100 = header.getOrDefault("X-Amz-Credential")
  valid_593100 = validateParameter(valid_593100, JString, required = false,
                                 default = nil)
  if valid_593100 != nil:
    section.add "X-Amz-Credential", valid_593100
  var valid_593101 = header.getOrDefault("X-Amz-Security-Token")
  valid_593101 = validateParameter(valid_593101, JString, required = false,
                                 default = nil)
  if valid_593101 != nil:
    section.add "X-Amz-Security-Token", valid_593101
  var valid_593102 = header.getOrDefault("X-Amz-Algorithm")
  valid_593102 = validateParameter(valid_593102, JString, required = false,
                                 default = nil)
  if valid_593102 != nil:
    section.add "X-Amz-Algorithm", valid_593102
  var valid_593103 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593103 = validateParameter(valid_593103, JString, required = false,
                                 default = nil)
  if valid_593103 != nil:
    section.add "X-Amz-SignedHeaders", valid_593103
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593104: Call_GetDescribeDBEngineVersions_593082; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_593104.validator(path, query, header, formData, body)
  let scheme = call_593104.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593104.url(scheme.get, call_593104.host, call_593104.base,
                         call_593104.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593104, url, valid)

proc call*(call_593105: Call_GetDescribeDBEngineVersions_593082;
          Marker: string = ""; ListSupportedTimezones: bool = false;
          DBParameterGroupFamily: string = ""; Engine: string = "";
          IncludeAll: bool = false; EngineVersion: string = "";
          Action: string = "DescribeDBEngineVersions";
          ListSupportedCharacterSets: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0; DefaultOnly: bool = false): Recallable =
  ## getDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: string
  ##         : The database engine to return.
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: string (required)
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  var query_593106 = newJObject()
  add(query_593106, "Marker", newJString(Marker))
  add(query_593106, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_593106, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_593106, "Engine", newJString(Engine))
  add(query_593106, "IncludeAll", newJBool(IncludeAll))
  add(query_593106, "EngineVersion", newJString(EngineVersion))
  add(query_593106, "Action", newJString(Action))
  add(query_593106, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_593106, "Version", newJString(Version))
  if Filters != nil:
    query_593106.add "Filters", Filters
  add(query_593106, "MaxRecords", newJInt(MaxRecords))
  add(query_593106, "DefaultOnly", newJBool(DefaultOnly))
  result = call_593105.call(nil, query_593106, nil, nil, nil)

var getDescribeDBEngineVersions* = Call_GetDescribeDBEngineVersions_593082(
    name: "getDescribeDBEngineVersions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_GetDescribeDBEngineVersions_593083, base: "/",
    url: url_GetDescribeDBEngineVersions_593084,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstanceAutomatedBackups_593153 = ref object of OpenApiRestCall_590348
proc url_PostDescribeDBInstanceAutomatedBackups_593155(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBInstanceAutomatedBackups_593154(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593156 = query.getOrDefault("Action")
  valid_593156 = validateParameter(valid_593156, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_593156 != nil:
    section.add "Action", valid_593156
  var valid_593157 = query.getOrDefault("Version")
  valid_593157 = validateParameter(valid_593157, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593157 != nil:
    section.add "Version", valid_593157
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593158 = header.getOrDefault("X-Amz-Signature")
  valid_593158 = validateParameter(valid_593158, JString, required = false,
                                 default = nil)
  if valid_593158 != nil:
    section.add "X-Amz-Signature", valid_593158
  var valid_593159 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593159 = validateParameter(valid_593159, JString, required = false,
                                 default = nil)
  if valid_593159 != nil:
    section.add "X-Amz-Content-Sha256", valid_593159
  var valid_593160 = header.getOrDefault("X-Amz-Date")
  valid_593160 = validateParameter(valid_593160, JString, required = false,
                                 default = nil)
  if valid_593160 != nil:
    section.add "X-Amz-Date", valid_593160
  var valid_593161 = header.getOrDefault("X-Amz-Credential")
  valid_593161 = validateParameter(valid_593161, JString, required = false,
                                 default = nil)
  if valid_593161 != nil:
    section.add "X-Amz-Credential", valid_593161
  var valid_593162 = header.getOrDefault("X-Amz-Security-Token")
  valid_593162 = validateParameter(valid_593162, JString, required = false,
                                 default = nil)
  if valid_593162 != nil:
    section.add "X-Amz-Security-Token", valid_593162
  var valid_593163 = header.getOrDefault("X-Amz-Algorithm")
  valid_593163 = validateParameter(valid_593163, JString, required = false,
                                 default = nil)
  if valid_593163 != nil:
    section.add "X-Amz-Algorithm", valid_593163
  var valid_593164 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593164 = validateParameter(valid_593164, JString, required = false,
                                 default = nil)
  if valid_593164 != nil:
    section.add "X-Amz-SignedHeaders", valid_593164
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  section = newJObject()
  var valid_593165 = formData.getOrDefault("MaxRecords")
  valid_593165 = validateParameter(valid_593165, JInt, required = false, default = nil)
  if valid_593165 != nil:
    section.add "MaxRecords", valid_593165
  var valid_593166 = formData.getOrDefault("Marker")
  valid_593166 = validateParameter(valid_593166, JString, required = false,
                                 default = nil)
  if valid_593166 != nil:
    section.add "Marker", valid_593166
  var valid_593167 = formData.getOrDefault("DbiResourceId")
  valid_593167 = validateParameter(valid_593167, JString, required = false,
                                 default = nil)
  if valid_593167 != nil:
    section.add "DbiResourceId", valid_593167
  var valid_593168 = formData.getOrDefault("DBInstanceIdentifier")
  valid_593168 = validateParameter(valid_593168, JString, required = false,
                                 default = nil)
  if valid_593168 != nil:
    section.add "DBInstanceIdentifier", valid_593168
  var valid_593169 = formData.getOrDefault("Filters")
  valid_593169 = validateParameter(valid_593169, JArray, required = false,
                                 default = nil)
  if valid_593169 != nil:
    section.add "Filters", valid_593169
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593170: Call_PostDescribeDBInstanceAutomatedBackups_593153;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_593170.validator(path, query, header, formData, body)
  let scheme = call_593170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593170.url(scheme.get, call_593170.host, call_593170.base,
                         call_593170.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593170, url, valid)

proc call*(call_593171: Call_PostDescribeDBInstanceAutomatedBackups_593153;
          MaxRecords: int = 0; Marker: string = ""; DbiResourceId: string = "";
          DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   Version: string (required)
  var query_593172 = newJObject()
  var formData_593173 = newJObject()
  add(formData_593173, "MaxRecords", newJInt(MaxRecords))
  add(formData_593173, "Marker", newJString(Marker))
  add(formData_593173, "DbiResourceId", newJString(DbiResourceId))
  add(formData_593173, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_593172, "Action", newJString(Action))
  if Filters != nil:
    formData_593173.add "Filters", Filters
  add(query_593172, "Version", newJString(Version))
  result = call_593171.call(nil, query_593172, nil, formData_593173, nil)

var postDescribeDBInstanceAutomatedBackups* = Call_PostDescribeDBInstanceAutomatedBackups_593153(
    name: "postDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_PostDescribeDBInstanceAutomatedBackups_593154, base: "/",
    url: url_PostDescribeDBInstanceAutomatedBackups_593155,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstanceAutomatedBackups_593133 = ref object of OpenApiRestCall_590348
proc url_GetDescribeDBInstanceAutomatedBackups_593135(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBInstanceAutomatedBackups_593134(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  section = newJObject()
  var valid_593136 = query.getOrDefault("DbiResourceId")
  valid_593136 = validateParameter(valid_593136, JString, required = false,
                                 default = nil)
  if valid_593136 != nil:
    section.add "DbiResourceId", valid_593136
  var valid_593137 = query.getOrDefault("Marker")
  valid_593137 = validateParameter(valid_593137, JString, required = false,
                                 default = nil)
  if valid_593137 != nil:
    section.add "Marker", valid_593137
  var valid_593138 = query.getOrDefault("DBInstanceIdentifier")
  valid_593138 = validateParameter(valid_593138, JString, required = false,
                                 default = nil)
  if valid_593138 != nil:
    section.add "DBInstanceIdentifier", valid_593138
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593139 = query.getOrDefault("Action")
  valid_593139 = validateParameter(valid_593139, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_593139 != nil:
    section.add "Action", valid_593139
  var valid_593140 = query.getOrDefault("Version")
  valid_593140 = validateParameter(valid_593140, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593140 != nil:
    section.add "Version", valid_593140
  var valid_593141 = query.getOrDefault("Filters")
  valid_593141 = validateParameter(valid_593141, JArray, required = false,
                                 default = nil)
  if valid_593141 != nil:
    section.add "Filters", valid_593141
  var valid_593142 = query.getOrDefault("MaxRecords")
  valid_593142 = validateParameter(valid_593142, JInt, required = false, default = nil)
  if valid_593142 != nil:
    section.add "MaxRecords", valid_593142
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593143 = header.getOrDefault("X-Amz-Signature")
  valid_593143 = validateParameter(valid_593143, JString, required = false,
                                 default = nil)
  if valid_593143 != nil:
    section.add "X-Amz-Signature", valid_593143
  var valid_593144 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593144 = validateParameter(valid_593144, JString, required = false,
                                 default = nil)
  if valid_593144 != nil:
    section.add "X-Amz-Content-Sha256", valid_593144
  var valid_593145 = header.getOrDefault("X-Amz-Date")
  valid_593145 = validateParameter(valid_593145, JString, required = false,
                                 default = nil)
  if valid_593145 != nil:
    section.add "X-Amz-Date", valid_593145
  var valid_593146 = header.getOrDefault("X-Amz-Credential")
  valid_593146 = validateParameter(valid_593146, JString, required = false,
                                 default = nil)
  if valid_593146 != nil:
    section.add "X-Amz-Credential", valid_593146
  var valid_593147 = header.getOrDefault("X-Amz-Security-Token")
  valid_593147 = validateParameter(valid_593147, JString, required = false,
                                 default = nil)
  if valid_593147 != nil:
    section.add "X-Amz-Security-Token", valid_593147
  var valid_593148 = header.getOrDefault("X-Amz-Algorithm")
  valid_593148 = validateParameter(valid_593148, JString, required = false,
                                 default = nil)
  if valid_593148 != nil:
    section.add "X-Amz-Algorithm", valid_593148
  var valid_593149 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593149 = validateParameter(valid_593149, JString, required = false,
                                 default = nil)
  if valid_593149 != nil:
    section.add "X-Amz-SignedHeaders", valid_593149
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593150: Call_GetDescribeDBInstanceAutomatedBackups_593133;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_593150.validator(path, query, header, formData, body)
  let scheme = call_593150.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593150.url(scheme.get, call_593150.host, call_593150.base,
                         call_593150.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593150, url, valid)

proc call*(call_593151: Call_GetDescribeDBInstanceAutomatedBackups_593133;
          DbiResourceId: string = ""; Marker: string = "";
          DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  var query_593152 = newJObject()
  add(query_593152, "DbiResourceId", newJString(DbiResourceId))
  add(query_593152, "Marker", newJString(Marker))
  add(query_593152, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_593152, "Action", newJString(Action))
  add(query_593152, "Version", newJString(Version))
  if Filters != nil:
    query_593152.add "Filters", Filters
  add(query_593152, "MaxRecords", newJInt(MaxRecords))
  result = call_593151.call(nil, query_593152, nil, nil, nil)

var getDescribeDBInstanceAutomatedBackups* = Call_GetDescribeDBInstanceAutomatedBackups_593133(
    name: "getDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_GetDescribeDBInstanceAutomatedBackups_593134, base: "/",
    url: url_GetDescribeDBInstanceAutomatedBackups_593135,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstances_593193 = ref object of OpenApiRestCall_590348
proc url_PostDescribeDBInstances_593195(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBInstances_593194(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593196 = query.getOrDefault("Action")
  valid_593196 = validateParameter(valid_593196, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_593196 != nil:
    section.add "Action", valid_593196
  var valid_593197 = query.getOrDefault("Version")
  valid_593197 = validateParameter(valid_593197, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593197 != nil:
    section.add "Version", valid_593197
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593198 = header.getOrDefault("X-Amz-Signature")
  valid_593198 = validateParameter(valid_593198, JString, required = false,
                                 default = nil)
  if valid_593198 != nil:
    section.add "X-Amz-Signature", valid_593198
  var valid_593199 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593199 = validateParameter(valid_593199, JString, required = false,
                                 default = nil)
  if valid_593199 != nil:
    section.add "X-Amz-Content-Sha256", valid_593199
  var valid_593200 = header.getOrDefault("X-Amz-Date")
  valid_593200 = validateParameter(valid_593200, JString, required = false,
                                 default = nil)
  if valid_593200 != nil:
    section.add "X-Amz-Date", valid_593200
  var valid_593201 = header.getOrDefault("X-Amz-Credential")
  valid_593201 = validateParameter(valid_593201, JString, required = false,
                                 default = nil)
  if valid_593201 != nil:
    section.add "X-Amz-Credential", valid_593201
  var valid_593202 = header.getOrDefault("X-Amz-Security-Token")
  valid_593202 = validateParameter(valid_593202, JString, required = false,
                                 default = nil)
  if valid_593202 != nil:
    section.add "X-Amz-Security-Token", valid_593202
  var valid_593203 = header.getOrDefault("X-Amz-Algorithm")
  valid_593203 = validateParameter(valid_593203, JString, required = false,
                                 default = nil)
  if valid_593203 != nil:
    section.add "X-Amz-Algorithm", valid_593203
  var valid_593204 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593204 = validateParameter(valid_593204, JString, required = false,
                                 default = nil)
  if valid_593204 != nil:
    section.add "X-Amz-SignedHeaders", valid_593204
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  section = newJObject()
  var valid_593205 = formData.getOrDefault("MaxRecords")
  valid_593205 = validateParameter(valid_593205, JInt, required = false, default = nil)
  if valid_593205 != nil:
    section.add "MaxRecords", valid_593205
  var valid_593206 = formData.getOrDefault("Marker")
  valid_593206 = validateParameter(valid_593206, JString, required = false,
                                 default = nil)
  if valid_593206 != nil:
    section.add "Marker", valid_593206
  var valid_593207 = formData.getOrDefault("DBInstanceIdentifier")
  valid_593207 = validateParameter(valid_593207, JString, required = false,
                                 default = nil)
  if valid_593207 != nil:
    section.add "DBInstanceIdentifier", valid_593207
  var valid_593208 = formData.getOrDefault("Filters")
  valid_593208 = validateParameter(valid_593208, JArray, required = false,
                                 default = nil)
  if valid_593208 != nil:
    section.add "Filters", valid_593208
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593209: Call_PostDescribeDBInstances_593193; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  let valid = call_593209.validator(path, query, header, formData, body)
  let scheme = call_593209.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593209.url(scheme.get, call_593209.host, call_593209.base,
                         call_593209.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593209, url, valid)

proc call*(call_593210: Call_PostDescribeDBInstances_593193; MaxRecords: int = 0;
          Marker: string = ""; DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstances"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstances
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   Version: string (required)
  var query_593211 = newJObject()
  var formData_593212 = newJObject()
  add(formData_593212, "MaxRecords", newJInt(MaxRecords))
  add(formData_593212, "Marker", newJString(Marker))
  add(formData_593212, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_593211, "Action", newJString(Action))
  if Filters != nil:
    formData_593212.add "Filters", Filters
  add(query_593211, "Version", newJString(Version))
  result = call_593210.call(nil, query_593211, nil, formData_593212, nil)

var postDescribeDBInstances* = Call_PostDescribeDBInstances_593193(
    name: "postDescribeDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_PostDescribeDBInstances_593194, base: "/",
    url: url_PostDescribeDBInstances_593195, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstances_593174 = ref object of OpenApiRestCall_590348
proc url_GetDescribeDBInstances_593176(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBInstances_593175(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_593177 = query.getOrDefault("Marker")
  valid_593177 = validateParameter(valid_593177, JString, required = false,
                                 default = nil)
  if valid_593177 != nil:
    section.add "Marker", valid_593177
  var valid_593178 = query.getOrDefault("DBInstanceIdentifier")
  valid_593178 = validateParameter(valid_593178, JString, required = false,
                                 default = nil)
  if valid_593178 != nil:
    section.add "DBInstanceIdentifier", valid_593178
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593179 = query.getOrDefault("Action")
  valid_593179 = validateParameter(valid_593179, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_593179 != nil:
    section.add "Action", valid_593179
  var valid_593180 = query.getOrDefault("Version")
  valid_593180 = validateParameter(valid_593180, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593180 != nil:
    section.add "Version", valid_593180
  var valid_593181 = query.getOrDefault("Filters")
  valid_593181 = validateParameter(valid_593181, JArray, required = false,
                                 default = nil)
  if valid_593181 != nil:
    section.add "Filters", valid_593181
  var valid_593182 = query.getOrDefault("MaxRecords")
  valid_593182 = validateParameter(valid_593182, JInt, required = false, default = nil)
  if valid_593182 != nil:
    section.add "MaxRecords", valid_593182
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593183 = header.getOrDefault("X-Amz-Signature")
  valid_593183 = validateParameter(valid_593183, JString, required = false,
                                 default = nil)
  if valid_593183 != nil:
    section.add "X-Amz-Signature", valid_593183
  var valid_593184 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593184 = validateParameter(valid_593184, JString, required = false,
                                 default = nil)
  if valid_593184 != nil:
    section.add "X-Amz-Content-Sha256", valid_593184
  var valid_593185 = header.getOrDefault("X-Amz-Date")
  valid_593185 = validateParameter(valid_593185, JString, required = false,
                                 default = nil)
  if valid_593185 != nil:
    section.add "X-Amz-Date", valid_593185
  var valid_593186 = header.getOrDefault("X-Amz-Credential")
  valid_593186 = validateParameter(valid_593186, JString, required = false,
                                 default = nil)
  if valid_593186 != nil:
    section.add "X-Amz-Credential", valid_593186
  var valid_593187 = header.getOrDefault("X-Amz-Security-Token")
  valid_593187 = validateParameter(valid_593187, JString, required = false,
                                 default = nil)
  if valid_593187 != nil:
    section.add "X-Amz-Security-Token", valid_593187
  var valid_593188 = header.getOrDefault("X-Amz-Algorithm")
  valid_593188 = validateParameter(valid_593188, JString, required = false,
                                 default = nil)
  if valid_593188 != nil:
    section.add "X-Amz-Algorithm", valid_593188
  var valid_593189 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593189 = validateParameter(valid_593189, JString, required = false,
                                 default = nil)
  if valid_593189 != nil:
    section.add "X-Amz-SignedHeaders", valid_593189
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593190: Call_GetDescribeDBInstances_593174; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  let valid = call_593190.validator(path, query, header, formData, body)
  let scheme = call_593190.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593190.url(scheme.get, call_593190.host, call_593190.base,
                         call_593190.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593190, url, valid)

proc call*(call_593191: Call_GetDescribeDBInstances_593174; Marker: string = "";
          DBInstanceIdentifier: string = ""; Action: string = "DescribeDBInstances";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBInstances
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_593192 = newJObject()
  add(query_593192, "Marker", newJString(Marker))
  add(query_593192, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_593192, "Action", newJString(Action))
  add(query_593192, "Version", newJString(Version))
  if Filters != nil:
    query_593192.add "Filters", Filters
  add(query_593192, "MaxRecords", newJInt(MaxRecords))
  result = call_593191.call(nil, query_593192, nil, nil, nil)

var getDescribeDBInstances* = Call_GetDescribeDBInstances_593174(
    name: "getDescribeDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_GetDescribeDBInstances_593175, base: "/",
    url: url_GetDescribeDBInstances_593176, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBLogFiles_593235 = ref object of OpenApiRestCall_590348
proc url_PostDescribeDBLogFiles_593237(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBLogFiles_593236(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593238 = query.getOrDefault("Action")
  valid_593238 = validateParameter(valid_593238, JString, required = true,
                                 default = newJString("DescribeDBLogFiles"))
  if valid_593238 != nil:
    section.add "Action", valid_593238
  var valid_593239 = query.getOrDefault("Version")
  valid_593239 = validateParameter(valid_593239, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593239 != nil:
    section.add "Version", valid_593239
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593240 = header.getOrDefault("X-Amz-Signature")
  valid_593240 = validateParameter(valid_593240, JString, required = false,
                                 default = nil)
  if valid_593240 != nil:
    section.add "X-Amz-Signature", valid_593240
  var valid_593241 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593241 = validateParameter(valid_593241, JString, required = false,
                                 default = nil)
  if valid_593241 != nil:
    section.add "X-Amz-Content-Sha256", valid_593241
  var valid_593242 = header.getOrDefault("X-Amz-Date")
  valid_593242 = validateParameter(valid_593242, JString, required = false,
                                 default = nil)
  if valid_593242 != nil:
    section.add "X-Amz-Date", valid_593242
  var valid_593243 = header.getOrDefault("X-Amz-Credential")
  valid_593243 = validateParameter(valid_593243, JString, required = false,
                                 default = nil)
  if valid_593243 != nil:
    section.add "X-Amz-Credential", valid_593243
  var valid_593244 = header.getOrDefault("X-Amz-Security-Token")
  valid_593244 = validateParameter(valid_593244, JString, required = false,
                                 default = nil)
  if valid_593244 != nil:
    section.add "X-Amz-Security-Token", valid_593244
  var valid_593245 = header.getOrDefault("X-Amz-Algorithm")
  valid_593245 = validateParameter(valid_593245, JString, required = false,
                                 default = nil)
  if valid_593245 != nil:
    section.add "X-Amz-Algorithm", valid_593245
  var valid_593246 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593246 = validateParameter(valid_593246, JString, required = false,
                                 default = nil)
  if valid_593246 != nil:
    section.add "X-Amz-SignedHeaders", valid_593246
  result.add "header", section
  ## parameters in `formData` object:
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  section = newJObject()
  var valid_593247 = formData.getOrDefault("FileSize")
  valid_593247 = validateParameter(valid_593247, JInt, required = false, default = nil)
  if valid_593247 != nil:
    section.add "FileSize", valid_593247
  var valid_593248 = formData.getOrDefault("MaxRecords")
  valid_593248 = validateParameter(valid_593248, JInt, required = false, default = nil)
  if valid_593248 != nil:
    section.add "MaxRecords", valid_593248
  var valid_593249 = formData.getOrDefault("Marker")
  valid_593249 = validateParameter(valid_593249, JString, required = false,
                                 default = nil)
  if valid_593249 != nil:
    section.add "Marker", valid_593249
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_593250 = formData.getOrDefault("DBInstanceIdentifier")
  valid_593250 = validateParameter(valid_593250, JString, required = true,
                                 default = nil)
  if valid_593250 != nil:
    section.add "DBInstanceIdentifier", valid_593250
  var valid_593251 = formData.getOrDefault("FilenameContains")
  valid_593251 = validateParameter(valid_593251, JString, required = false,
                                 default = nil)
  if valid_593251 != nil:
    section.add "FilenameContains", valid_593251
  var valid_593252 = formData.getOrDefault("Filters")
  valid_593252 = validateParameter(valid_593252, JArray, required = false,
                                 default = nil)
  if valid_593252 != nil:
    section.add "Filters", valid_593252
  var valid_593253 = formData.getOrDefault("FileLastWritten")
  valid_593253 = validateParameter(valid_593253, JInt, required = false, default = nil)
  if valid_593253 != nil:
    section.add "FileLastWritten", valid_593253
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593254: Call_PostDescribeDBLogFiles_593235; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_593254.validator(path, query, header, formData, body)
  let scheme = call_593254.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593254.url(scheme.get, call_593254.host, call_593254.base,
                         call_593254.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593254, url, valid)

proc call*(call_593255: Call_PostDescribeDBLogFiles_593235;
          DBInstanceIdentifier: string; FileSize: int = 0; MaxRecords: int = 0;
          Marker: string = ""; FilenameContains: string = "";
          Action: string = "DescribeDBLogFiles"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; FileLastWritten: int = 0): Recallable =
  ## postDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  var query_593256 = newJObject()
  var formData_593257 = newJObject()
  add(formData_593257, "FileSize", newJInt(FileSize))
  add(formData_593257, "MaxRecords", newJInt(MaxRecords))
  add(formData_593257, "Marker", newJString(Marker))
  add(formData_593257, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_593257, "FilenameContains", newJString(FilenameContains))
  add(query_593256, "Action", newJString(Action))
  if Filters != nil:
    formData_593257.add "Filters", Filters
  add(query_593256, "Version", newJString(Version))
  add(formData_593257, "FileLastWritten", newJInt(FileLastWritten))
  result = call_593255.call(nil, query_593256, nil, formData_593257, nil)

var postDescribeDBLogFiles* = Call_PostDescribeDBLogFiles_593235(
    name: "postDescribeDBLogFiles", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_PostDescribeDBLogFiles_593236, base: "/",
    url: url_PostDescribeDBLogFiles_593237, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBLogFiles_593213 = ref object of OpenApiRestCall_590348
proc url_GetDescribeDBLogFiles_593215(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBLogFiles_593214(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   Action: JString (required)
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  section = newJObject()
  var valid_593216 = query.getOrDefault("Marker")
  valid_593216 = validateParameter(valid_593216, JString, required = false,
                                 default = nil)
  if valid_593216 != nil:
    section.add "Marker", valid_593216
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_593217 = query.getOrDefault("DBInstanceIdentifier")
  valid_593217 = validateParameter(valid_593217, JString, required = true,
                                 default = nil)
  if valid_593217 != nil:
    section.add "DBInstanceIdentifier", valid_593217
  var valid_593218 = query.getOrDefault("FileLastWritten")
  valid_593218 = validateParameter(valid_593218, JInt, required = false, default = nil)
  if valid_593218 != nil:
    section.add "FileLastWritten", valid_593218
  var valid_593219 = query.getOrDefault("Action")
  valid_593219 = validateParameter(valid_593219, JString, required = true,
                                 default = newJString("DescribeDBLogFiles"))
  if valid_593219 != nil:
    section.add "Action", valid_593219
  var valid_593220 = query.getOrDefault("FilenameContains")
  valid_593220 = validateParameter(valid_593220, JString, required = false,
                                 default = nil)
  if valid_593220 != nil:
    section.add "FilenameContains", valid_593220
  var valid_593221 = query.getOrDefault("Version")
  valid_593221 = validateParameter(valid_593221, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593221 != nil:
    section.add "Version", valid_593221
  var valid_593222 = query.getOrDefault("Filters")
  valid_593222 = validateParameter(valid_593222, JArray, required = false,
                                 default = nil)
  if valid_593222 != nil:
    section.add "Filters", valid_593222
  var valid_593223 = query.getOrDefault("MaxRecords")
  valid_593223 = validateParameter(valid_593223, JInt, required = false, default = nil)
  if valid_593223 != nil:
    section.add "MaxRecords", valid_593223
  var valid_593224 = query.getOrDefault("FileSize")
  valid_593224 = validateParameter(valid_593224, JInt, required = false, default = nil)
  if valid_593224 != nil:
    section.add "FileSize", valid_593224
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593225 = header.getOrDefault("X-Amz-Signature")
  valid_593225 = validateParameter(valid_593225, JString, required = false,
                                 default = nil)
  if valid_593225 != nil:
    section.add "X-Amz-Signature", valid_593225
  var valid_593226 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593226 = validateParameter(valid_593226, JString, required = false,
                                 default = nil)
  if valid_593226 != nil:
    section.add "X-Amz-Content-Sha256", valid_593226
  var valid_593227 = header.getOrDefault("X-Amz-Date")
  valid_593227 = validateParameter(valid_593227, JString, required = false,
                                 default = nil)
  if valid_593227 != nil:
    section.add "X-Amz-Date", valid_593227
  var valid_593228 = header.getOrDefault("X-Amz-Credential")
  valid_593228 = validateParameter(valid_593228, JString, required = false,
                                 default = nil)
  if valid_593228 != nil:
    section.add "X-Amz-Credential", valid_593228
  var valid_593229 = header.getOrDefault("X-Amz-Security-Token")
  valid_593229 = validateParameter(valid_593229, JString, required = false,
                                 default = nil)
  if valid_593229 != nil:
    section.add "X-Amz-Security-Token", valid_593229
  var valid_593230 = header.getOrDefault("X-Amz-Algorithm")
  valid_593230 = validateParameter(valid_593230, JString, required = false,
                                 default = nil)
  if valid_593230 != nil:
    section.add "X-Amz-Algorithm", valid_593230
  var valid_593231 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593231 = validateParameter(valid_593231, JString, required = false,
                                 default = nil)
  if valid_593231 != nil:
    section.add "X-Amz-SignedHeaders", valid_593231
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593232: Call_GetDescribeDBLogFiles_593213; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_593232.validator(path, query, header, formData, body)
  let scheme = call_593232.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593232.url(scheme.get, call_593232.host, call_593232.base,
                         call_593232.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593232, url, valid)

proc call*(call_593233: Call_GetDescribeDBLogFiles_593213;
          DBInstanceIdentifier: string; Marker: string = ""; FileLastWritten: int = 0;
          Action: string = "DescribeDBLogFiles"; FilenameContains: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          FileSize: int = 0): Recallable =
  ## getDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   Action: string (required)
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  var query_593234 = newJObject()
  add(query_593234, "Marker", newJString(Marker))
  add(query_593234, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_593234, "FileLastWritten", newJInt(FileLastWritten))
  add(query_593234, "Action", newJString(Action))
  add(query_593234, "FilenameContains", newJString(FilenameContains))
  add(query_593234, "Version", newJString(Version))
  if Filters != nil:
    query_593234.add "Filters", Filters
  add(query_593234, "MaxRecords", newJInt(MaxRecords))
  add(query_593234, "FileSize", newJInt(FileSize))
  result = call_593233.call(nil, query_593234, nil, nil, nil)

var getDescribeDBLogFiles* = Call_GetDescribeDBLogFiles_593213(
    name: "getDescribeDBLogFiles", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_GetDescribeDBLogFiles_593214, base: "/",
    url: url_GetDescribeDBLogFiles_593215, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameterGroups_593277 = ref object of OpenApiRestCall_590348
proc url_PostDescribeDBParameterGroups_593279(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBParameterGroups_593278(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593280 = query.getOrDefault("Action")
  valid_593280 = validateParameter(valid_593280, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_593280 != nil:
    section.add "Action", valid_593280
  var valid_593281 = query.getOrDefault("Version")
  valid_593281 = validateParameter(valid_593281, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593281 != nil:
    section.add "Version", valid_593281
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593282 = header.getOrDefault("X-Amz-Signature")
  valid_593282 = validateParameter(valid_593282, JString, required = false,
                                 default = nil)
  if valid_593282 != nil:
    section.add "X-Amz-Signature", valid_593282
  var valid_593283 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593283 = validateParameter(valid_593283, JString, required = false,
                                 default = nil)
  if valid_593283 != nil:
    section.add "X-Amz-Content-Sha256", valid_593283
  var valid_593284 = header.getOrDefault("X-Amz-Date")
  valid_593284 = validateParameter(valid_593284, JString, required = false,
                                 default = nil)
  if valid_593284 != nil:
    section.add "X-Amz-Date", valid_593284
  var valid_593285 = header.getOrDefault("X-Amz-Credential")
  valid_593285 = validateParameter(valid_593285, JString, required = false,
                                 default = nil)
  if valid_593285 != nil:
    section.add "X-Amz-Credential", valid_593285
  var valid_593286 = header.getOrDefault("X-Amz-Security-Token")
  valid_593286 = validateParameter(valid_593286, JString, required = false,
                                 default = nil)
  if valid_593286 != nil:
    section.add "X-Amz-Security-Token", valid_593286
  var valid_593287 = header.getOrDefault("X-Amz-Algorithm")
  valid_593287 = validateParameter(valid_593287, JString, required = false,
                                 default = nil)
  if valid_593287 != nil:
    section.add "X-Amz-Algorithm", valid_593287
  var valid_593288 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593288 = validateParameter(valid_593288, JString, required = false,
                                 default = nil)
  if valid_593288 != nil:
    section.add "X-Amz-SignedHeaders", valid_593288
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_593289 = formData.getOrDefault("MaxRecords")
  valid_593289 = validateParameter(valid_593289, JInt, required = false, default = nil)
  if valid_593289 != nil:
    section.add "MaxRecords", valid_593289
  var valid_593290 = formData.getOrDefault("DBParameterGroupName")
  valid_593290 = validateParameter(valid_593290, JString, required = false,
                                 default = nil)
  if valid_593290 != nil:
    section.add "DBParameterGroupName", valid_593290
  var valid_593291 = formData.getOrDefault("Marker")
  valid_593291 = validateParameter(valid_593291, JString, required = false,
                                 default = nil)
  if valid_593291 != nil:
    section.add "Marker", valid_593291
  var valid_593292 = formData.getOrDefault("Filters")
  valid_593292 = validateParameter(valid_593292, JArray, required = false,
                                 default = nil)
  if valid_593292 != nil:
    section.add "Filters", valid_593292
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593293: Call_PostDescribeDBParameterGroups_593277; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_593293.validator(path, query, header, formData, body)
  let scheme = call_593293.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593293.url(scheme.get, call_593293.host, call_593293.base,
                         call_593293.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593293, url, valid)

proc call*(call_593294: Call_PostDescribeDBParameterGroups_593277;
          MaxRecords: int = 0; DBParameterGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBParameterGroups"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_593295 = newJObject()
  var formData_593296 = newJObject()
  add(formData_593296, "MaxRecords", newJInt(MaxRecords))
  add(formData_593296, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_593296, "Marker", newJString(Marker))
  add(query_593295, "Action", newJString(Action))
  if Filters != nil:
    formData_593296.add "Filters", Filters
  add(query_593295, "Version", newJString(Version))
  result = call_593294.call(nil, query_593295, nil, formData_593296, nil)

var postDescribeDBParameterGroups* = Call_PostDescribeDBParameterGroups_593277(
    name: "postDescribeDBParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_PostDescribeDBParameterGroups_593278, base: "/",
    url: url_PostDescribeDBParameterGroups_593279,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameterGroups_593258 = ref object of OpenApiRestCall_590348
proc url_GetDescribeDBParameterGroups_593260(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBParameterGroups_593259(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_593261 = query.getOrDefault("Marker")
  valid_593261 = validateParameter(valid_593261, JString, required = false,
                                 default = nil)
  if valid_593261 != nil:
    section.add "Marker", valid_593261
  var valid_593262 = query.getOrDefault("DBParameterGroupName")
  valid_593262 = validateParameter(valid_593262, JString, required = false,
                                 default = nil)
  if valid_593262 != nil:
    section.add "DBParameterGroupName", valid_593262
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593263 = query.getOrDefault("Action")
  valid_593263 = validateParameter(valid_593263, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_593263 != nil:
    section.add "Action", valid_593263
  var valid_593264 = query.getOrDefault("Version")
  valid_593264 = validateParameter(valid_593264, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593264 != nil:
    section.add "Version", valid_593264
  var valid_593265 = query.getOrDefault("Filters")
  valid_593265 = validateParameter(valid_593265, JArray, required = false,
                                 default = nil)
  if valid_593265 != nil:
    section.add "Filters", valid_593265
  var valid_593266 = query.getOrDefault("MaxRecords")
  valid_593266 = validateParameter(valid_593266, JInt, required = false, default = nil)
  if valid_593266 != nil:
    section.add "MaxRecords", valid_593266
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593267 = header.getOrDefault("X-Amz-Signature")
  valid_593267 = validateParameter(valid_593267, JString, required = false,
                                 default = nil)
  if valid_593267 != nil:
    section.add "X-Amz-Signature", valid_593267
  var valid_593268 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593268 = validateParameter(valid_593268, JString, required = false,
                                 default = nil)
  if valid_593268 != nil:
    section.add "X-Amz-Content-Sha256", valid_593268
  var valid_593269 = header.getOrDefault("X-Amz-Date")
  valid_593269 = validateParameter(valid_593269, JString, required = false,
                                 default = nil)
  if valid_593269 != nil:
    section.add "X-Amz-Date", valid_593269
  var valid_593270 = header.getOrDefault("X-Amz-Credential")
  valid_593270 = validateParameter(valid_593270, JString, required = false,
                                 default = nil)
  if valid_593270 != nil:
    section.add "X-Amz-Credential", valid_593270
  var valid_593271 = header.getOrDefault("X-Amz-Security-Token")
  valid_593271 = validateParameter(valid_593271, JString, required = false,
                                 default = nil)
  if valid_593271 != nil:
    section.add "X-Amz-Security-Token", valid_593271
  var valid_593272 = header.getOrDefault("X-Amz-Algorithm")
  valid_593272 = validateParameter(valid_593272, JString, required = false,
                                 default = nil)
  if valid_593272 != nil:
    section.add "X-Amz-Algorithm", valid_593272
  var valid_593273 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593273 = validateParameter(valid_593273, JString, required = false,
                                 default = nil)
  if valid_593273 != nil:
    section.add "X-Amz-SignedHeaders", valid_593273
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593274: Call_GetDescribeDBParameterGroups_593258; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_593274.validator(path, query, header, formData, body)
  let scheme = call_593274.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593274.url(scheme.get, call_593274.host, call_593274.base,
                         call_593274.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593274, url, valid)

proc call*(call_593275: Call_GetDescribeDBParameterGroups_593258;
          Marker: string = ""; DBParameterGroupName: string = "";
          Action: string = "DescribeDBParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_593276 = newJObject()
  add(query_593276, "Marker", newJString(Marker))
  add(query_593276, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_593276, "Action", newJString(Action))
  add(query_593276, "Version", newJString(Version))
  if Filters != nil:
    query_593276.add "Filters", Filters
  add(query_593276, "MaxRecords", newJInt(MaxRecords))
  result = call_593275.call(nil, query_593276, nil, nil, nil)

var getDescribeDBParameterGroups* = Call_GetDescribeDBParameterGroups_593258(
    name: "getDescribeDBParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_GetDescribeDBParameterGroups_593259, base: "/",
    url: url_GetDescribeDBParameterGroups_593260,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameters_593317 = ref object of OpenApiRestCall_590348
proc url_PostDescribeDBParameters_593319(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBParameters_593318(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593320 = query.getOrDefault("Action")
  valid_593320 = validateParameter(valid_593320, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_593320 != nil:
    section.add "Action", valid_593320
  var valid_593321 = query.getOrDefault("Version")
  valid_593321 = validateParameter(valid_593321, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593321 != nil:
    section.add "Version", valid_593321
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593322 = header.getOrDefault("X-Amz-Signature")
  valid_593322 = validateParameter(valid_593322, JString, required = false,
                                 default = nil)
  if valid_593322 != nil:
    section.add "X-Amz-Signature", valid_593322
  var valid_593323 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593323 = validateParameter(valid_593323, JString, required = false,
                                 default = nil)
  if valid_593323 != nil:
    section.add "X-Amz-Content-Sha256", valid_593323
  var valid_593324 = header.getOrDefault("X-Amz-Date")
  valid_593324 = validateParameter(valid_593324, JString, required = false,
                                 default = nil)
  if valid_593324 != nil:
    section.add "X-Amz-Date", valid_593324
  var valid_593325 = header.getOrDefault("X-Amz-Credential")
  valid_593325 = validateParameter(valid_593325, JString, required = false,
                                 default = nil)
  if valid_593325 != nil:
    section.add "X-Amz-Credential", valid_593325
  var valid_593326 = header.getOrDefault("X-Amz-Security-Token")
  valid_593326 = validateParameter(valid_593326, JString, required = false,
                                 default = nil)
  if valid_593326 != nil:
    section.add "X-Amz-Security-Token", valid_593326
  var valid_593327 = header.getOrDefault("X-Amz-Algorithm")
  valid_593327 = validateParameter(valid_593327, JString, required = false,
                                 default = nil)
  if valid_593327 != nil:
    section.add "X-Amz-Algorithm", valid_593327
  var valid_593328 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593328 = validateParameter(valid_593328, JString, required = false,
                                 default = nil)
  if valid_593328 != nil:
    section.add "X-Amz-SignedHeaders", valid_593328
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_593329 = formData.getOrDefault("Source")
  valid_593329 = validateParameter(valid_593329, JString, required = false,
                                 default = nil)
  if valid_593329 != nil:
    section.add "Source", valid_593329
  var valid_593330 = formData.getOrDefault("MaxRecords")
  valid_593330 = validateParameter(valid_593330, JInt, required = false, default = nil)
  if valid_593330 != nil:
    section.add "MaxRecords", valid_593330
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_593331 = formData.getOrDefault("DBParameterGroupName")
  valid_593331 = validateParameter(valid_593331, JString, required = true,
                                 default = nil)
  if valid_593331 != nil:
    section.add "DBParameterGroupName", valid_593331
  var valid_593332 = formData.getOrDefault("Marker")
  valid_593332 = validateParameter(valid_593332, JString, required = false,
                                 default = nil)
  if valid_593332 != nil:
    section.add "Marker", valid_593332
  var valid_593333 = formData.getOrDefault("Filters")
  valid_593333 = validateParameter(valid_593333, JArray, required = false,
                                 default = nil)
  if valid_593333 != nil:
    section.add "Filters", valid_593333
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593334: Call_PostDescribeDBParameters_593317; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_593334.validator(path, query, header, formData, body)
  let scheme = call_593334.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593334.url(scheme.get, call_593334.host, call_593334.base,
                         call_593334.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593334, url, valid)

proc call*(call_593335: Call_PostDescribeDBParameters_593317;
          DBParameterGroupName: string; Source: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeDBParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_593336 = newJObject()
  var formData_593337 = newJObject()
  add(formData_593337, "Source", newJString(Source))
  add(formData_593337, "MaxRecords", newJInt(MaxRecords))
  add(formData_593337, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_593337, "Marker", newJString(Marker))
  add(query_593336, "Action", newJString(Action))
  if Filters != nil:
    formData_593337.add "Filters", Filters
  add(query_593336, "Version", newJString(Version))
  result = call_593335.call(nil, query_593336, nil, formData_593337, nil)

var postDescribeDBParameters* = Call_PostDescribeDBParameters_593317(
    name: "postDescribeDBParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_PostDescribeDBParameters_593318, base: "/",
    url: url_PostDescribeDBParameters_593319, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameters_593297 = ref object of OpenApiRestCall_590348
proc url_GetDescribeDBParameters_593299(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBParameters_593298(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_593300 = query.getOrDefault("Marker")
  valid_593300 = validateParameter(valid_593300, JString, required = false,
                                 default = nil)
  if valid_593300 != nil:
    section.add "Marker", valid_593300
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_593301 = query.getOrDefault("DBParameterGroupName")
  valid_593301 = validateParameter(valid_593301, JString, required = true,
                                 default = nil)
  if valid_593301 != nil:
    section.add "DBParameterGroupName", valid_593301
  var valid_593302 = query.getOrDefault("Source")
  valid_593302 = validateParameter(valid_593302, JString, required = false,
                                 default = nil)
  if valid_593302 != nil:
    section.add "Source", valid_593302
  var valid_593303 = query.getOrDefault("Action")
  valid_593303 = validateParameter(valid_593303, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_593303 != nil:
    section.add "Action", valid_593303
  var valid_593304 = query.getOrDefault("Version")
  valid_593304 = validateParameter(valid_593304, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593304 != nil:
    section.add "Version", valid_593304
  var valid_593305 = query.getOrDefault("Filters")
  valid_593305 = validateParameter(valid_593305, JArray, required = false,
                                 default = nil)
  if valid_593305 != nil:
    section.add "Filters", valid_593305
  var valid_593306 = query.getOrDefault("MaxRecords")
  valid_593306 = validateParameter(valid_593306, JInt, required = false, default = nil)
  if valid_593306 != nil:
    section.add "MaxRecords", valid_593306
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593307 = header.getOrDefault("X-Amz-Signature")
  valid_593307 = validateParameter(valid_593307, JString, required = false,
                                 default = nil)
  if valid_593307 != nil:
    section.add "X-Amz-Signature", valid_593307
  var valid_593308 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593308 = validateParameter(valid_593308, JString, required = false,
                                 default = nil)
  if valid_593308 != nil:
    section.add "X-Amz-Content-Sha256", valid_593308
  var valid_593309 = header.getOrDefault("X-Amz-Date")
  valid_593309 = validateParameter(valid_593309, JString, required = false,
                                 default = nil)
  if valid_593309 != nil:
    section.add "X-Amz-Date", valid_593309
  var valid_593310 = header.getOrDefault("X-Amz-Credential")
  valid_593310 = validateParameter(valid_593310, JString, required = false,
                                 default = nil)
  if valid_593310 != nil:
    section.add "X-Amz-Credential", valid_593310
  var valid_593311 = header.getOrDefault("X-Amz-Security-Token")
  valid_593311 = validateParameter(valid_593311, JString, required = false,
                                 default = nil)
  if valid_593311 != nil:
    section.add "X-Amz-Security-Token", valid_593311
  var valid_593312 = header.getOrDefault("X-Amz-Algorithm")
  valid_593312 = validateParameter(valid_593312, JString, required = false,
                                 default = nil)
  if valid_593312 != nil:
    section.add "X-Amz-Algorithm", valid_593312
  var valid_593313 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593313 = validateParameter(valid_593313, JString, required = false,
                                 default = nil)
  if valid_593313 != nil:
    section.add "X-Amz-SignedHeaders", valid_593313
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593314: Call_GetDescribeDBParameters_593297; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_593314.validator(path, query, header, formData, body)
  let scheme = call_593314.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593314.url(scheme.get, call_593314.host, call_593314.base,
                         call_593314.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593314, url, valid)

proc call*(call_593315: Call_GetDescribeDBParameters_593297;
          DBParameterGroupName: string; Marker: string = ""; Source: string = "";
          Action: string = "DescribeDBParameters"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_593316 = newJObject()
  add(query_593316, "Marker", newJString(Marker))
  add(query_593316, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_593316, "Source", newJString(Source))
  add(query_593316, "Action", newJString(Action))
  add(query_593316, "Version", newJString(Version))
  if Filters != nil:
    query_593316.add "Filters", Filters
  add(query_593316, "MaxRecords", newJInt(MaxRecords))
  result = call_593315.call(nil, query_593316, nil, nil, nil)

var getDescribeDBParameters* = Call_GetDescribeDBParameters_593297(
    name: "getDescribeDBParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_GetDescribeDBParameters_593298, base: "/",
    url: url_GetDescribeDBParameters_593299, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSecurityGroups_593357 = ref object of OpenApiRestCall_590348
proc url_PostDescribeDBSecurityGroups_593359(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBSecurityGroups_593358(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593360 = query.getOrDefault("Action")
  valid_593360 = validateParameter(valid_593360, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_593360 != nil:
    section.add "Action", valid_593360
  var valid_593361 = query.getOrDefault("Version")
  valid_593361 = validateParameter(valid_593361, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593361 != nil:
    section.add "Version", valid_593361
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593362 = header.getOrDefault("X-Amz-Signature")
  valid_593362 = validateParameter(valid_593362, JString, required = false,
                                 default = nil)
  if valid_593362 != nil:
    section.add "X-Amz-Signature", valid_593362
  var valid_593363 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593363 = validateParameter(valid_593363, JString, required = false,
                                 default = nil)
  if valid_593363 != nil:
    section.add "X-Amz-Content-Sha256", valid_593363
  var valid_593364 = header.getOrDefault("X-Amz-Date")
  valid_593364 = validateParameter(valid_593364, JString, required = false,
                                 default = nil)
  if valid_593364 != nil:
    section.add "X-Amz-Date", valid_593364
  var valid_593365 = header.getOrDefault("X-Amz-Credential")
  valid_593365 = validateParameter(valid_593365, JString, required = false,
                                 default = nil)
  if valid_593365 != nil:
    section.add "X-Amz-Credential", valid_593365
  var valid_593366 = header.getOrDefault("X-Amz-Security-Token")
  valid_593366 = validateParameter(valid_593366, JString, required = false,
                                 default = nil)
  if valid_593366 != nil:
    section.add "X-Amz-Security-Token", valid_593366
  var valid_593367 = header.getOrDefault("X-Amz-Algorithm")
  valid_593367 = validateParameter(valid_593367, JString, required = false,
                                 default = nil)
  if valid_593367 != nil:
    section.add "X-Amz-Algorithm", valid_593367
  var valid_593368 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593368 = validateParameter(valid_593368, JString, required = false,
                                 default = nil)
  if valid_593368 != nil:
    section.add "X-Amz-SignedHeaders", valid_593368
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_593369 = formData.getOrDefault("DBSecurityGroupName")
  valid_593369 = validateParameter(valid_593369, JString, required = false,
                                 default = nil)
  if valid_593369 != nil:
    section.add "DBSecurityGroupName", valid_593369
  var valid_593370 = formData.getOrDefault("MaxRecords")
  valid_593370 = validateParameter(valid_593370, JInt, required = false, default = nil)
  if valid_593370 != nil:
    section.add "MaxRecords", valid_593370
  var valid_593371 = formData.getOrDefault("Marker")
  valid_593371 = validateParameter(valid_593371, JString, required = false,
                                 default = nil)
  if valid_593371 != nil:
    section.add "Marker", valid_593371
  var valid_593372 = formData.getOrDefault("Filters")
  valid_593372 = validateParameter(valid_593372, JArray, required = false,
                                 default = nil)
  if valid_593372 != nil:
    section.add "Filters", valid_593372
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593373: Call_PostDescribeDBSecurityGroups_593357; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_593373.validator(path, query, header, formData, body)
  let scheme = call_593373.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593373.url(scheme.get, call_593373.host, call_593373.base,
                         call_593373.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593373, url, valid)

proc call*(call_593374: Call_PostDescribeDBSecurityGroups_593357;
          DBSecurityGroupName: string = ""; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBSecurityGroups"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_593375 = newJObject()
  var formData_593376 = newJObject()
  add(formData_593376, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_593376, "MaxRecords", newJInt(MaxRecords))
  add(formData_593376, "Marker", newJString(Marker))
  add(query_593375, "Action", newJString(Action))
  if Filters != nil:
    formData_593376.add "Filters", Filters
  add(query_593375, "Version", newJString(Version))
  result = call_593374.call(nil, query_593375, nil, formData_593376, nil)

var postDescribeDBSecurityGroups* = Call_PostDescribeDBSecurityGroups_593357(
    name: "postDescribeDBSecurityGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_PostDescribeDBSecurityGroups_593358, base: "/",
    url: url_PostDescribeDBSecurityGroups_593359,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSecurityGroups_593338 = ref object of OpenApiRestCall_590348
proc url_GetDescribeDBSecurityGroups_593340(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBSecurityGroups_593339(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_593341 = query.getOrDefault("Marker")
  valid_593341 = validateParameter(valid_593341, JString, required = false,
                                 default = nil)
  if valid_593341 != nil:
    section.add "Marker", valid_593341
  var valid_593342 = query.getOrDefault("DBSecurityGroupName")
  valid_593342 = validateParameter(valid_593342, JString, required = false,
                                 default = nil)
  if valid_593342 != nil:
    section.add "DBSecurityGroupName", valid_593342
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593343 = query.getOrDefault("Action")
  valid_593343 = validateParameter(valid_593343, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_593343 != nil:
    section.add "Action", valid_593343
  var valid_593344 = query.getOrDefault("Version")
  valid_593344 = validateParameter(valid_593344, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593344 != nil:
    section.add "Version", valid_593344
  var valid_593345 = query.getOrDefault("Filters")
  valid_593345 = validateParameter(valid_593345, JArray, required = false,
                                 default = nil)
  if valid_593345 != nil:
    section.add "Filters", valid_593345
  var valid_593346 = query.getOrDefault("MaxRecords")
  valid_593346 = validateParameter(valid_593346, JInt, required = false, default = nil)
  if valid_593346 != nil:
    section.add "MaxRecords", valid_593346
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593347 = header.getOrDefault("X-Amz-Signature")
  valid_593347 = validateParameter(valid_593347, JString, required = false,
                                 default = nil)
  if valid_593347 != nil:
    section.add "X-Amz-Signature", valid_593347
  var valid_593348 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593348 = validateParameter(valid_593348, JString, required = false,
                                 default = nil)
  if valid_593348 != nil:
    section.add "X-Amz-Content-Sha256", valid_593348
  var valid_593349 = header.getOrDefault("X-Amz-Date")
  valid_593349 = validateParameter(valid_593349, JString, required = false,
                                 default = nil)
  if valid_593349 != nil:
    section.add "X-Amz-Date", valid_593349
  var valid_593350 = header.getOrDefault("X-Amz-Credential")
  valid_593350 = validateParameter(valid_593350, JString, required = false,
                                 default = nil)
  if valid_593350 != nil:
    section.add "X-Amz-Credential", valid_593350
  var valid_593351 = header.getOrDefault("X-Amz-Security-Token")
  valid_593351 = validateParameter(valid_593351, JString, required = false,
                                 default = nil)
  if valid_593351 != nil:
    section.add "X-Amz-Security-Token", valid_593351
  var valid_593352 = header.getOrDefault("X-Amz-Algorithm")
  valid_593352 = validateParameter(valid_593352, JString, required = false,
                                 default = nil)
  if valid_593352 != nil:
    section.add "X-Amz-Algorithm", valid_593352
  var valid_593353 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593353 = validateParameter(valid_593353, JString, required = false,
                                 default = nil)
  if valid_593353 != nil:
    section.add "X-Amz-SignedHeaders", valid_593353
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593354: Call_GetDescribeDBSecurityGroups_593338; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_593354.validator(path, query, header, formData, body)
  let scheme = call_593354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593354.url(scheme.get, call_593354.host, call_593354.base,
                         call_593354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593354, url, valid)

proc call*(call_593355: Call_GetDescribeDBSecurityGroups_593338;
          Marker: string = ""; DBSecurityGroupName: string = "";
          Action: string = "DescribeDBSecurityGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_593356 = newJObject()
  add(query_593356, "Marker", newJString(Marker))
  add(query_593356, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_593356, "Action", newJString(Action))
  add(query_593356, "Version", newJString(Version))
  if Filters != nil:
    query_593356.add "Filters", Filters
  add(query_593356, "MaxRecords", newJInt(MaxRecords))
  result = call_593355.call(nil, query_593356, nil, nil, nil)

var getDescribeDBSecurityGroups* = Call_GetDescribeDBSecurityGroups_593338(
    name: "getDescribeDBSecurityGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_GetDescribeDBSecurityGroups_593339, base: "/",
    url: url_GetDescribeDBSecurityGroups_593340,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshotAttributes_593393 = ref object of OpenApiRestCall_590348
proc url_PostDescribeDBSnapshotAttributes_593395(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBSnapshotAttributes_593394(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593396 = query.getOrDefault("Action")
  valid_593396 = validateParameter(valid_593396, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_593396 != nil:
    section.add "Action", valid_593396
  var valid_593397 = query.getOrDefault("Version")
  valid_593397 = validateParameter(valid_593397, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593397 != nil:
    section.add "Version", valid_593397
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593398 = header.getOrDefault("X-Amz-Signature")
  valid_593398 = validateParameter(valid_593398, JString, required = false,
                                 default = nil)
  if valid_593398 != nil:
    section.add "X-Amz-Signature", valid_593398
  var valid_593399 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593399 = validateParameter(valid_593399, JString, required = false,
                                 default = nil)
  if valid_593399 != nil:
    section.add "X-Amz-Content-Sha256", valid_593399
  var valid_593400 = header.getOrDefault("X-Amz-Date")
  valid_593400 = validateParameter(valid_593400, JString, required = false,
                                 default = nil)
  if valid_593400 != nil:
    section.add "X-Amz-Date", valid_593400
  var valid_593401 = header.getOrDefault("X-Amz-Credential")
  valid_593401 = validateParameter(valid_593401, JString, required = false,
                                 default = nil)
  if valid_593401 != nil:
    section.add "X-Amz-Credential", valid_593401
  var valid_593402 = header.getOrDefault("X-Amz-Security-Token")
  valid_593402 = validateParameter(valid_593402, JString, required = false,
                                 default = nil)
  if valid_593402 != nil:
    section.add "X-Amz-Security-Token", valid_593402
  var valid_593403 = header.getOrDefault("X-Amz-Algorithm")
  valid_593403 = validateParameter(valid_593403, JString, required = false,
                                 default = nil)
  if valid_593403 != nil:
    section.add "X-Amz-Algorithm", valid_593403
  var valid_593404 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593404 = validateParameter(valid_593404, JString, required = false,
                                 default = nil)
  if valid_593404 != nil:
    section.add "X-Amz-SignedHeaders", valid_593404
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_593405 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_593405 = validateParameter(valid_593405, JString, required = true,
                                 default = nil)
  if valid_593405 != nil:
    section.add "DBSnapshotIdentifier", valid_593405
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593406: Call_PostDescribeDBSnapshotAttributes_593393;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_593406.validator(path, query, header, formData, body)
  let scheme = call_593406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593406.url(scheme.get, call_593406.host, call_593406.base,
                         call_593406.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593406, url, valid)

proc call*(call_593407: Call_PostDescribeDBSnapshotAttributes_593393;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593408 = newJObject()
  var formData_593409 = newJObject()
  add(formData_593409, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_593408, "Action", newJString(Action))
  add(query_593408, "Version", newJString(Version))
  result = call_593407.call(nil, query_593408, nil, formData_593409, nil)

var postDescribeDBSnapshotAttributes* = Call_PostDescribeDBSnapshotAttributes_593393(
    name: "postDescribeDBSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_PostDescribeDBSnapshotAttributes_593394, base: "/",
    url: url_PostDescribeDBSnapshotAttributes_593395,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshotAttributes_593377 = ref object of OpenApiRestCall_590348
proc url_GetDescribeDBSnapshotAttributes_593379(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBSnapshotAttributes_593378(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_593380 = query.getOrDefault("DBSnapshotIdentifier")
  valid_593380 = validateParameter(valid_593380, JString, required = true,
                                 default = nil)
  if valid_593380 != nil:
    section.add "DBSnapshotIdentifier", valid_593380
  var valid_593381 = query.getOrDefault("Action")
  valid_593381 = validateParameter(valid_593381, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_593381 != nil:
    section.add "Action", valid_593381
  var valid_593382 = query.getOrDefault("Version")
  valid_593382 = validateParameter(valid_593382, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593382 != nil:
    section.add "Version", valid_593382
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593383 = header.getOrDefault("X-Amz-Signature")
  valid_593383 = validateParameter(valid_593383, JString, required = false,
                                 default = nil)
  if valid_593383 != nil:
    section.add "X-Amz-Signature", valid_593383
  var valid_593384 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593384 = validateParameter(valid_593384, JString, required = false,
                                 default = nil)
  if valid_593384 != nil:
    section.add "X-Amz-Content-Sha256", valid_593384
  var valid_593385 = header.getOrDefault("X-Amz-Date")
  valid_593385 = validateParameter(valid_593385, JString, required = false,
                                 default = nil)
  if valid_593385 != nil:
    section.add "X-Amz-Date", valid_593385
  var valid_593386 = header.getOrDefault("X-Amz-Credential")
  valid_593386 = validateParameter(valid_593386, JString, required = false,
                                 default = nil)
  if valid_593386 != nil:
    section.add "X-Amz-Credential", valid_593386
  var valid_593387 = header.getOrDefault("X-Amz-Security-Token")
  valid_593387 = validateParameter(valid_593387, JString, required = false,
                                 default = nil)
  if valid_593387 != nil:
    section.add "X-Amz-Security-Token", valid_593387
  var valid_593388 = header.getOrDefault("X-Amz-Algorithm")
  valid_593388 = validateParameter(valid_593388, JString, required = false,
                                 default = nil)
  if valid_593388 != nil:
    section.add "X-Amz-Algorithm", valid_593388
  var valid_593389 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593389 = validateParameter(valid_593389, JString, required = false,
                                 default = nil)
  if valid_593389 != nil:
    section.add "X-Amz-SignedHeaders", valid_593389
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593390: Call_GetDescribeDBSnapshotAttributes_593377;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_593390.validator(path, query, header, formData, body)
  let scheme = call_593390.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593390.url(scheme.get, call_593390.host, call_593390.base,
                         call_593390.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593390, url, valid)

proc call*(call_593391: Call_GetDescribeDBSnapshotAttributes_593377;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593392 = newJObject()
  add(query_593392, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_593392, "Action", newJString(Action))
  add(query_593392, "Version", newJString(Version))
  result = call_593391.call(nil, query_593392, nil, nil, nil)

var getDescribeDBSnapshotAttributes* = Call_GetDescribeDBSnapshotAttributes_593377(
    name: "getDescribeDBSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_GetDescribeDBSnapshotAttributes_593378, base: "/",
    url: url_GetDescribeDBSnapshotAttributes_593379,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshots_593434 = ref object of OpenApiRestCall_590348
proc url_PostDescribeDBSnapshots_593436(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBSnapshots_593435(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593437 = query.getOrDefault("Action")
  valid_593437 = validateParameter(valid_593437, JString, required = true,
                                 default = newJString("DescribeDBSnapshots"))
  if valid_593437 != nil:
    section.add "Action", valid_593437
  var valid_593438 = query.getOrDefault("Version")
  valid_593438 = validateParameter(valid_593438, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593438 != nil:
    section.add "Version", valid_593438
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593439 = header.getOrDefault("X-Amz-Signature")
  valid_593439 = validateParameter(valid_593439, JString, required = false,
                                 default = nil)
  if valid_593439 != nil:
    section.add "X-Amz-Signature", valid_593439
  var valid_593440 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593440 = validateParameter(valid_593440, JString, required = false,
                                 default = nil)
  if valid_593440 != nil:
    section.add "X-Amz-Content-Sha256", valid_593440
  var valid_593441 = header.getOrDefault("X-Amz-Date")
  valid_593441 = validateParameter(valid_593441, JString, required = false,
                                 default = nil)
  if valid_593441 != nil:
    section.add "X-Amz-Date", valid_593441
  var valid_593442 = header.getOrDefault("X-Amz-Credential")
  valid_593442 = validateParameter(valid_593442, JString, required = false,
                                 default = nil)
  if valid_593442 != nil:
    section.add "X-Amz-Credential", valid_593442
  var valid_593443 = header.getOrDefault("X-Amz-Security-Token")
  valid_593443 = validateParameter(valid_593443, JString, required = false,
                                 default = nil)
  if valid_593443 != nil:
    section.add "X-Amz-Security-Token", valid_593443
  var valid_593444 = header.getOrDefault("X-Amz-Algorithm")
  valid_593444 = validateParameter(valid_593444, JString, required = false,
                                 default = nil)
  if valid_593444 != nil:
    section.add "X-Amz-Algorithm", valid_593444
  var valid_593445 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593445 = validateParameter(valid_593445, JString, required = false,
                                 default = nil)
  if valid_593445 != nil:
    section.add "X-Amz-SignedHeaders", valid_593445
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  section = newJObject()
  var valid_593446 = formData.getOrDefault("SnapshotType")
  valid_593446 = validateParameter(valid_593446, JString, required = false,
                                 default = nil)
  if valid_593446 != nil:
    section.add "SnapshotType", valid_593446
  var valid_593447 = formData.getOrDefault("MaxRecords")
  valid_593447 = validateParameter(valid_593447, JInt, required = false, default = nil)
  if valid_593447 != nil:
    section.add "MaxRecords", valid_593447
  var valid_593448 = formData.getOrDefault("IncludePublic")
  valid_593448 = validateParameter(valid_593448, JBool, required = false, default = nil)
  if valid_593448 != nil:
    section.add "IncludePublic", valid_593448
  var valid_593449 = formData.getOrDefault("Marker")
  valid_593449 = validateParameter(valid_593449, JString, required = false,
                                 default = nil)
  if valid_593449 != nil:
    section.add "Marker", valid_593449
  var valid_593450 = formData.getOrDefault("DbiResourceId")
  valid_593450 = validateParameter(valid_593450, JString, required = false,
                                 default = nil)
  if valid_593450 != nil:
    section.add "DbiResourceId", valid_593450
  var valid_593451 = formData.getOrDefault("IncludeShared")
  valid_593451 = validateParameter(valid_593451, JBool, required = false, default = nil)
  if valid_593451 != nil:
    section.add "IncludeShared", valid_593451
  var valid_593452 = formData.getOrDefault("DBInstanceIdentifier")
  valid_593452 = validateParameter(valid_593452, JString, required = false,
                                 default = nil)
  if valid_593452 != nil:
    section.add "DBInstanceIdentifier", valid_593452
  var valid_593453 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_593453 = validateParameter(valid_593453, JString, required = false,
                                 default = nil)
  if valid_593453 != nil:
    section.add "DBSnapshotIdentifier", valid_593453
  var valid_593454 = formData.getOrDefault("Filters")
  valid_593454 = validateParameter(valid_593454, JArray, required = false,
                                 default = nil)
  if valid_593454 != nil:
    section.add "Filters", valid_593454
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593455: Call_PostDescribeDBSnapshots_593434; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_593455.validator(path, query, header, formData, body)
  let scheme = call_593455.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593455.url(scheme.get, call_593455.host, call_593455.base,
                         call_593455.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593455, url, valid)

proc call*(call_593456: Call_PostDescribeDBSnapshots_593434;
          SnapshotType: string = ""; MaxRecords: int = 0; IncludePublic: bool = false;
          Marker: string = ""; DbiResourceId: string = ""; IncludeShared: bool = false;
          DBInstanceIdentifier: string = ""; DBSnapshotIdentifier: string = "";
          Action: string = "DescribeDBSnapshots"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   Version: string (required)
  var query_593457 = newJObject()
  var formData_593458 = newJObject()
  add(formData_593458, "SnapshotType", newJString(SnapshotType))
  add(formData_593458, "MaxRecords", newJInt(MaxRecords))
  add(formData_593458, "IncludePublic", newJBool(IncludePublic))
  add(formData_593458, "Marker", newJString(Marker))
  add(formData_593458, "DbiResourceId", newJString(DbiResourceId))
  add(formData_593458, "IncludeShared", newJBool(IncludeShared))
  add(formData_593458, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_593458, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_593457, "Action", newJString(Action))
  if Filters != nil:
    formData_593458.add "Filters", Filters
  add(query_593457, "Version", newJString(Version))
  result = call_593456.call(nil, query_593457, nil, formData_593458, nil)

var postDescribeDBSnapshots* = Call_PostDescribeDBSnapshots_593434(
    name: "postDescribeDBSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_PostDescribeDBSnapshots_593435, base: "/",
    url: url_PostDescribeDBSnapshots_593436, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshots_593410 = ref object of OpenApiRestCall_590348
proc url_GetDescribeDBSnapshots_593412(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBSnapshots_593411(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_593413 = query.getOrDefault("DbiResourceId")
  valid_593413 = validateParameter(valid_593413, JString, required = false,
                                 default = nil)
  if valid_593413 != nil:
    section.add "DbiResourceId", valid_593413
  var valid_593414 = query.getOrDefault("Marker")
  valid_593414 = validateParameter(valid_593414, JString, required = false,
                                 default = nil)
  if valid_593414 != nil:
    section.add "Marker", valid_593414
  var valid_593415 = query.getOrDefault("DBInstanceIdentifier")
  valid_593415 = validateParameter(valid_593415, JString, required = false,
                                 default = nil)
  if valid_593415 != nil:
    section.add "DBInstanceIdentifier", valid_593415
  var valid_593416 = query.getOrDefault("DBSnapshotIdentifier")
  valid_593416 = validateParameter(valid_593416, JString, required = false,
                                 default = nil)
  if valid_593416 != nil:
    section.add "DBSnapshotIdentifier", valid_593416
  var valid_593417 = query.getOrDefault("SnapshotType")
  valid_593417 = validateParameter(valid_593417, JString, required = false,
                                 default = nil)
  if valid_593417 != nil:
    section.add "SnapshotType", valid_593417
  var valid_593418 = query.getOrDefault("IncludePublic")
  valid_593418 = validateParameter(valid_593418, JBool, required = false, default = nil)
  if valid_593418 != nil:
    section.add "IncludePublic", valid_593418
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593419 = query.getOrDefault("Action")
  valid_593419 = validateParameter(valid_593419, JString, required = true,
                                 default = newJString("DescribeDBSnapshots"))
  if valid_593419 != nil:
    section.add "Action", valid_593419
  var valid_593420 = query.getOrDefault("IncludeShared")
  valid_593420 = validateParameter(valid_593420, JBool, required = false, default = nil)
  if valid_593420 != nil:
    section.add "IncludeShared", valid_593420
  var valid_593421 = query.getOrDefault("Version")
  valid_593421 = validateParameter(valid_593421, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593421 != nil:
    section.add "Version", valid_593421
  var valid_593422 = query.getOrDefault("Filters")
  valid_593422 = validateParameter(valid_593422, JArray, required = false,
                                 default = nil)
  if valid_593422 != nil:
    section.add "Filters", valid_593422
  var valid_593423 = query.getOrDefault("MaxRecords")
  valid_593423 = validateParameter(valid_593423, JInt, required = false, default = nil)
  if valid_593423 != nil:
    section.add "MaxRecords", valid_593423
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593424 = header.getOrDefault("X-Amz-Signature")
  valid_593424 = validateParameter(valid_593424, JString, required = false,
                                 default = nil)
  if valid_593424 != nil:
    section.add "X-Amz-Signature", valid_593424
  var valid_593425 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593425 = validateParameter(valid_593425, JString, required = false,
                                 default = nil)
  if valid_593425 != nil:
    section.add "X-Amz-Content-Sha256", valid_593425
  var valid_593426 = header.getOrDefault("X-Amz-Date")
  valid_593426 = validateParameter(valid_593426, JString, required = false,
                                 default = nil)
  if valid_593426 != nil:
    section.add "X-Amz-Date", valid_593426
  var valid_593427 = header.getOrDefault("X-Amz-Credential")
  valid_593427 = validateParameter(valid_593427, JString, required = false,
                                 default = nil)
  if valid_593427 != nil:
    section.add "X-Amz-Credential", valid_593427
  var valid_593428 = header.getOrDefault("X-Amz-Security-Token")
  valid_593428 = validateParameter(valid_593428, JString, required = false,
                                 default = nil)
  if valid_593428 != nil:
    section.add "X-Amz-Security-Token", valid_593428
  var valid_593429 = header.getOrDefault("X-Amz-Algorithm")
  valid_593429 = validateParameter(valid_593429, JString, required = false,
                                 default = nil)
  if valid_593429 != nil:
    section.add "X-Amz-Algorithm", valid_593429
  var valid_593430 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593430 = validateParameter(valid_593430, JString, required = false,
                                 default = nil)
  if valid_593430 != nil:
    section.add "X-Amz-SignedHeaders", valid_593430
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593431: Call_GetDescribeDBSnapshots_593410; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_593431.validator(path, query, header, formData, body)
  let scheme = call_593431.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593431.url(scheme.get, call_593431.host, call_593431.base,
                         call_593431.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593431, url, valid)

proc call*(call_593432: Call_GetDescribeDBSnapshots_593410;
          DbiResourceId: string = ""; Marker: string = "";
          DBInstanceIdentifier: string = ""; DBSnapshotIdentifier: string = "";
          SnapshotType: string = ""; IncludePublic: bool = false;
          Action: string = "DescribeDBSnapshots"; IncludeShared: bool = false;
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_593433 = newJObject()
  add(query_593433, "DbiResourceId", newJString(DbiResourceId))
  add(query_593433, "Marker", newJString(Marker))
  add(query_593433, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_593433, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_593433, "SnapshotType", newJString(SnapshotType))
  add(query_593433, "IncludePublic", newJBool(IncludePublic))
  add(query_593433, "Action", newJString(Action))
  add(query_593433, "IncludeShared", newJBool(IncludeShared))
  add(query_593433, "Version", newJString(Version))
  if Filters != nil:
    query_593433.add "Filters", Filters
  add(query_593433, "MaxRecords", newJInt(MaxRecords))
  result = call_593432.call(nil, query_593433, nil, nil, nil)

var getDescribeDBSnapshots* = Call_GetDescribeDBSnapshots_593410(
    name: "getDescribeDBSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_GetDescribeDBSnapshots_593411, base: "/",
    url: url_GetDescribeDBSnapshots_593412, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSubnetGroups_593478 = ref object of OpenApiRestCall_590348
proc url_PostDescribeDBSubnetGroups_593480(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBSubnetGroups_593479(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593481 = query.getOrDefault("Action")
  valid_593481 = validateParameter(valid_593481, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_593481 != nil:
    section.add "Action", valid_593481
  var valid_593482 = query.getOrDefault("Version")
  valid_593482 = validateParameter(valid_593482, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593482 != nil:
    section.add "Version", valid_593482
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593483 = header.getOrDefault("X-Amz-Signature")
  valid_593483 = validateParameter(valid_593483, JString, required = false,
                                 default = nil)
  if valid_593483 != nil:
    section.add "X-Amz-Signature", valid_593483
  var valid_593484 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593484 = validateParameter(valid_593484, JString, required = false,
                                 default = nil)
  if valid_593484 != nil:
    section.add "X-Amz-Content-Sha256", valid_593484
  var valid_593485 = header.getOrDefault("X-Amz-Date")
  valid_593485 = validateParameter(valid_593485, JString, required = false,
                                 default = nil)
  if valid_593485 != nil:
    section.add "X-Amz-Date", valid_593485
  var valid_593486 = header.getOrDefault("X-Amz-Credential")
  valid_593486 = validateParameter(valid_593486, JString, required = false,
                                 default = nil)
  if valid_593486 != nil:
    section.add "X-Amz-Credential", valid_593486
  var valid_593487 = header.getOrDefault("X-Amz-Security-Token")
  valid_593487 = validateParameter(valid_593487, JString, required = false,
                                 default = nil)
  if valid_593487 != nil:
    section.add "X-Amz-Security-Token", valid_593487
  var valid_593488 = header.getOrDefault("X-Amz-Algorithm")
  valid_593488 = validateParameter(valid_593488, JString, required = false,
                                 default = nil)
  if valid_593488 != nil:
    section.add "X-Amz-Algorithm", valid_593488
  var valid_593489 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593489 = validateParameter(valid_593489, JString, required = false,
                                 default = nil)
  if valid_593489 != nil:
    section.add "X-Amz-SignedHeaders", valid_593489
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_593490 = formData.getOrDefault("MaxRecords")
  valid_593490 = validateParameter(valid_593490, JInt, required = false, default = nil)
  if valid_593490 != nil:
    section.add "MaxRecords", valid_593490
  var valid_593491 = formData.getOrDefault("Marker")
  valid_593491 = validateParameter(valid_593491, JString, required = false,
                                 default = nil)
  if valid_593491 != nil:
    section.add "Marker", valid_593491
  var valid_593492 = formData.getOrDefault("DBSubnetGroupName")
  valid_593492 = validateParameter(valid_593492, JString, required = false,
                                 default = nil)
  if valid_593492 != nil:
    section.add "DBSubnetGroupName", valid_593492
  var valid_593493 = formData.getOrDefault("Filters")
  valid_593493 = validateParameter(valid_593493, JArray, required = false,
                                 default = nil)
  if valid_593493 != nil:
    section.add "Filters", valid_593493
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593494: Call_PostDescribeDBSubnetGroups_593478; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_593494.validator(path, query, header, formData, body)
  let scheme = call_593494.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593494.url(scheme.get, call_593494.host, call_593494.base,
                         call_593494.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593494, url, valid)

proc call*(call_593495: Call_PostDescribeDBSubnetGroups_593478;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_593496 = newJObject()
  var formData_593497 = newJObject()
  add(formData_593497, "MaxRecords", newJInt(MaxRecords))
  add(formData_593497, "Marker", newJString(Marker))
  add(query_593496, "Action", newJString(Action))
  add(formData_593497, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if Filters != nil:
    formData_593497.add "Filters", Filters
  add(query_593496, "Version", newJString(Version))
  result = call_593495.call(nil, query_593496, nil, formData_593497, nil)

var postDescribeDBSubnetGroups* = Call_PostDescribeDBSubnetGroups_593478(
    name: "postDescribeDBSubnetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_PostDescribeDBSubnetGroups_593479, base: "/",
    url: url_PostDescribeDBSubnetGroups_593480,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSubnetGroups_593459 = ref object of OpenApiRestCall_590348
proc url_GetDescribeDBSubnetGroups_593461(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBSubnetGroups_593460(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_593462 = query.getOrDefault("Marker")
  valid_593462 = validateParameter(valid_593462, JString, required = false,
                                 default = nil)
  if valid_593462 != nil:
    section.add "Marker", valid_593462
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593463 = query.getOrDefault("Action")
  valid_593463 = validateParameter(valid_593463, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_593463 != nil:
    section.add "Action", valid_593463
  var valid_593464 = query.getOrDefault("DBSubnetGroupName")
  valid_593464 = validateParameter(valid_593464, JString, required = false,
                                 default = nil)
  if valid_593464 != nil:
    section.add "DBSubnetGroupName", valid_593464
  var valid_593465 = query.getOrDefault("Version")
  valid_593465 = validateParameter(valid_593465, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593465 != nil:
    section.add "Version", valid_593465
  var valid_593466 = query.getOrDefault("Filters")
  valid_593466 = validateParameter(valid_593466, JArray, required = false,
                                 default = nil)
  if valid_593466 != nil:
    section.add "Filters", valid_593466
  var valid_593467 = query.getOrDefault("MaxRecords")
  valid_593467 = validateParameter(valid_593467, JInt, required = false, default = nil)
  if valid_593467 != nil:
    section.add "MaxRecords", valid_593467
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593468 = header.getOrDefault("X-Amz-Signature")
  valid_593468 = validateParameter(valid_593468, JString, required = false,
                                 default = nil)
  if valid_593468 != nil:
    section.add "X-Amz-Signature", valid_593468
  var valid_593469 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593469 = validateParameter(valid_593469, JString, required = false,
                                 default = nil)
  if valid_593469 != nil:
    section.add "X-Amz-Content-Sha256", valid_593469
  var valid_593470 = header.getOrDefault("X-Amz-Date")
  valid_593470 = validateParameter(valid_593470, JString, required = false,
                                 default = nil)
  if valid_593470 != nil:
    section.add "X-Amz-Date", valid_593470
  var valid_593471 = header.getOrDefault("X-Amz-Credential")
  valid_593471 = validateParameter(valid_593471, JString, required = false,
                                 default = nil)
  if valid_593471 != nil:
    section.add "X-Amz-Credential", valid_593471
  var valid_593472 = header.getOrDefault("X-Amz-Security-Token")
  valid_593472 = validateParameter(valid_593472, JString, required = false,
                                 default = nil)
  if valid_593472 != nil:
    section.add "X-Amz-Security-Token", valid_593472
  var valid_593473 = header.getOrDefault("X-Amz-Algorithm")
  valid_593473 = validateParameter(valid_593473, JString, required = false,
                                 default = nil)
  if valid_593473 != nil:
    section.add "X-Amz-Algorithm", valid_593473
  var valid_593474 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593474 = validateParameter(valid_593474, JString, required = false,
                                 default = nil)
  if valid_593474 != nil:
    section.add "X-Amz-SignedHeaders", valid_593474
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593475: Call_GetDescribeDBSubnetGroups_593459; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_593475.validator(path, query, header, formData, body)
  let scheme = call_593475.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593475.url(scheme.get, call_593475.host, call_593475.base,
                         call_593475.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593475, url, valid)

proc call*(call_593476: Call_GetDescribeDBSubnetGroups_593459; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_593477 = newJObject()
  add(query_593477, "Marker", newJString(Marker))
  add(query_593477, "Action", newJString(Action))
  add(query_593477, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_593477, "Version", newJString(Version))
  if Filters != nil:
    query_593477.add "Filters", Filters
  add(query_593477, "MaxRecords", newJInt(MaxRecords))
  result = call_593476.call(nil, query_593477, nil, nil, nil)

var getDescribeDBSubnetGroups* = Call_GetDescribeDBSubnetGroups_593459(
    name: "getDescribeDBSubnetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_GetDescribeDBSubnetGroups_593460, base: "/",
    url: url_GetDescribeDBSubnetGroups_593461,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultClusterParameters_593517 = ref object of OpenApiRestCall_590348
proc url_PostDescribeEngineDefaultClusterParameters_593519(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEngineDefaultClusterParameters_593518(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593520 = query.getOrDefault("Action")
  valid_593520 = validateParameter(valid_593520, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_593520 != nil:
    section.add "Action", valid_593520
  var valid_593521 = query.getOrDefault("Version")
  valid_593521 = validateParameter(valid_593521, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593521 != nil:
    section.add "Version", valid_593521
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593522 = header.getOrDefault("X-Amz-Signature")
  valid_593522 = validateParameter(valid_593522, JString, required = false,
                                 default = nil)
  if valid_593522 != nil:
    section.add "X-Amz-Signature", valid_593522
  var valid_593523 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593523 = validateParameter(valid_593523, JString, required = false,
                                 default = nil)
  if valid_593523 != nil:
    section.add "X-Amz-Content-Sha256", valid_593523
  var valid_593524 = header.getOrDefault("X-Amz-Date")
  valid_593524 = validateParameter(valid_593524, JString, required = false,
                                 default = nil)
  if valid_593524 != nil:
    section.add "X-Amz-Date", valid_593524
  var valid_593525 = header.getOrDefault("X-Amz-Credential")
  valid_593525 = validateParameter(valid_593525, JString, required = false,
                                 default = nil)
  if valid_593525 != nil:
    section.add "X-Amz-Credential", valid_593525
  var valid_593526 = header.getOrDefault("X-Amz-Security-Token")
  valid_593526 = validateParameter(valid_593526, JString, required = false,
                                 default = nil)
  if valid_593526 != nil:
    section.add "X-Amz-Security-Token", valid_593526
  var valid_593527 = header.getOrDefault("X-Amz-Algorithm")
  valid_593527 = validateParameter(valid_593527, JString, required = false,
                                 default = nil)
  if valid_593527 != nil:
    section.add "X-Amz-Algorithm", valid_593527
  var valid_593528 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593528 = validateParameter(valid_593528, JString, required = false,
                                 default = nil)
  if valid_593528 != nil:
    section.add "X-Amz-SignedHeaders", valid_593528
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  section = newJObject()
  var valid_593529 = formData.getOrDefault("MaxRecords")
  valid_593529 = validateParameter(valid_593529, JInt, required = false, default = nil)
  if valid_593529 != nil:
    section.add "MaxRecords", valid_593529
  var valid_593530 = formData.getOrDefault("Marker")
  valid_593530 = validateParameter(valid_593530, JString, required = false,
                                 default = nil)
  if valid_593530 != nil:
    section.add "Marker", valid_593530
  var valid_593531 = formData.getOrDefault("Filters")
  valid_593531 = validateParameter(valid_593531, JArray, required = false,
                                 default = nil)
  if valid_593531 != nil:
    section.add "Filters", valid_593531
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_593532 = formData.getOrDefault("DBParameterGroupFamily")
  valid_593532 = validateParameter(valid_593532, JString, required = true,
                                 default = nil)
  if valid_593532 != nil:
    section.add "DBParameterGroupFamily", valid_593532
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593533: Call_PostDescribeEngineDefaultClusterParameters_593517;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_593533.validator(path, query, header, formData, body)
  let scheme = call_593533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593533.url(scheme.get, call_593533.host, call_593533.base,
                         call_593533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593533, url, valid)

proc call*(call_593534: Call_PostDescribeEngineDefaultClusterParameters_593517;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  var query_593535 = newJObject()
  var formData_593536 = newJObject()
  add(formData_593536, "MaxRecords", newJInt(MaxRecords))
  add(formData_593536, "Marker", newJString(Marker))
  add(query_593535, "Action", newJString(Action))
  if Filters != nil:
    formData_593536.add "Filters", Filters
  add(query_593535, "Version", newJString(Version))
  add(formData_593536, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_593534.call(nil, query_593535, nil, formData_593536, nil)

var postDescribeEngineDefaultClusterParameters* = Call_PostDescribeEngineDefaultClusterParameters_593517(
    name: "postDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_PostDescribeEngineDefaultClusterParameters_593518,
    base: "/", url: url_PostDescribeEngineDefaultClusterParameters_593519,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultClusterParameters_593498 = ref object of OpenApiRestCall_590348
proc url_GetDescribeEngineDefaultClusterParameters_593500(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEngineDefaultClusterParameters_593499(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_593501 = query.getOrDefault("Marker")
  valid_593501 = validateParameter(valid_593501, JString, required = false,
                                 default = nil)
  if valid_593501 != nil:
    section.add "Marker", valid_593501
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_593502 = query.getOrDefault("DBParameterGroupFamily")
  valid_593502 = validateParameter(valid_593502, JString, required = true,
                                 default = nil)
  if valid_593502 != nil:
    section.add "DBParameterGroupFamily", valid_593502
  var valid_593503 = query.getOrDefault("Action")
  valid_593503 = validateParameter(valid_593503, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_593503 != nil:
    section.add "Action", valid_593503
  var valid_593504 = query.getOrDefault("Version")
  valid_593504 = validateParameter(valid_593504, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593504 != nil:
    section.add "Version", valid_593504
  var valid_593505 = query.getOrDefault("Filters")
  valid_593505 = validateParameter(valid_593505, JArray, required = false,
                                 default = nil)
  if valid_593505 != nil:
    section.add "Filters", valid_593505
  var valid_593506 = query.getOrDefault("MaxRecords")
  valid_593506 = validateParameter(valid_593506, JInt, required = false, default = nil)
  if valid_593506 != nil:
    section.add "MaxRecords", valid_593506
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593507 = header.getOrDefault("X-Amz-Signature")
  valid_593507 = validateParameter(valid_593507, JString, required = false,
                                 default = nil)
  if valid_593507 != nil:
    section.add "X-Amz-Signature", valid_593507
  var valid_593508 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593508 = validateParameter(valid_593508, JString, required = false,
                                 default = nil)
  if valid_593508 != nil:
    section.add "X-Amz-Content-Sha256", valid_593508
  var valid_593509 = header.getOrDefault("X-Amz-Date")
  valid_593509 = validateParameter(valid_593509, JString, required = false,
                                 default = nil)
  if valid_593509 != nil:
    section.add "X-Amz-Date", valid_593509
  var valid_593510 = header.getOrDefault("X-Amz-Credential")
  valid_593510 = validateParameter(valid_593510, JString, required = false,
                                 default = nil)
  if valid_593510 != nil:
    section.add "X-Amz-Credential", valid_593510
  var valid_593511 = header.getOrDefault("X-Amz-Security-Token")
  valid_593511 = validateParameter(valid_593511, JString, required = false,
                                 default = nil)
  if valid_593511 != nil:
    section.add "X-Amz-Security-Token", valid_593511
  var valid_593512 = header.getOrDefault("X-Amz-Algorithm")
  valid_593512 = validateParameter(valid_593512, JString, required = false,
                                 default = nil)
  if valid_593512 != nil:
    section.add "X-Amz-Algorithm", valid_593512
  var valid_593513 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593513 = validateParameter(valid_593513, JString, required = false,
                                 default = nil)
  if valid_593513 != nil:
    section.add "X-Amz-SignedHeaders", valid_593513
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593514: Call_GetDescribeEngineDefaultClusterParameters_593498;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_593514.validator(path, query, header, formData, body)
  let scheme = call_593514.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593514.url(scheme.get, call_593514.host, call_593514.base,
                         call_593514.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593514, url, valid)

proc call*(call_593515: Call_GetDescribeEngineDefaultClusterParameters_593498;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_593516 = newJObject()
  add(query_593516, "Marker", newJString(Marker))
  add(query_593516, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_593516, "Action", newJString(Action))
  add(query_593516, "Version", newJString(Version))
  if Filters != nil:
    query_593516.add "Filters", Filters
  add(query_593516, "MaxRecords", newJInt(MaxRecords))
  result = call_593515.call(nil, query_593516, nil, nil, nil)

var getDescribeEngineDefaultClusterParameters* = Call_GetDescribeEngineDefaultClusterParameters_593498(
    name: "getDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_GetDescribeEngineDefaultClusterParameters_593499,
    base: "/", url: url_GetDescribeEngineDefaultClusterParameters_593500,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_593556 = ref object of OpenApiRestCall_590348
proc url_PostDescribeEngineDefaultParameters_593558(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_593557(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593559 = query.getOrDefault("Action")
  valid_593559 = validateParameter(valid_593559, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_593559 != nil:
    section.add "Action", valid_593559
  var valid_593560 = query.getOrDefault("Version")
  valid_593560 = validateParameter(valid_593560, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593560 != nil:
    section.add "Version", valid_593560
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593561 = header.getOrDefault("X-Amz-Signature")
  valid_593561 = validateParameter(valid_593561, JString, required = false,
                                 default = nil)
  if valid_593561 != nil:
    section.add "X-Amz-Signature", valid_593561
  var valid_593562 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593562 = validateParameter(valid_593562, JString, required = false,
                                 default = nil)
  if valid_593562 != nil:
    section.add "X-Amz-Content-Sha256", valid_593562
  var valid_593563 = header.getOrDefault("X-Amz-Date")
  valid_593563 = validateParameter(valid_593563, JString, required = false,
                                 default = nil)
  if valid_593563 != nil:
    section.add "X-Amz-Date", valid_593563
  var valid_593564 = header.getOrDefault("X-Amz-Credential")
  valid_593564 = validateParameter(valid_593564, JString, required = false,
                                 default = nil)
  if valid_593564 != nil:
    section.add "X-Amz-Credential", valid_593564
  var valid_593565 = header.getOrDefault("X-Amz-Security-Token")
  valid_593565 = validateParameter(valid_593565, JString, required = false,
                                 default = nil)
  if valid_593565 != nil:
    section.add "X-Amz-Security-Token", valid_593565
  var valid_593566 = header.getOrDefault("X-Amz-Algorithm")
  valid_593566 = validateParameter(valid_593566, JString, required = false,
                                 default = nil)
  if valid_593566 != nil:
    section.add "X-Amz-Algorithm", valid_593566
  var valid_593567 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593567 = validateParameter(valid_593567, JString, required = false,
                                 default = nil)
  if valid_593567 != nil:
    section.add "X-Amz-SignedHeaders", valid_593567
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  section = newJObject()
  var valid_593568 = formData.getOrDefault("MaxRecords")
  valid_593568 = validateParameter(valid_593568, JInt, required = false, default = nil)
  if valid_593568 != nil:
    section.add "MaxRecords", valid_593568
  var valid_593569 = formData.getOrDefault("Marker")
  valid_593569 = validateParameter(valid_593569, JString, required = false,
                                 default = nil)
  if valid_593569 != nil:
    section.add "Marker", valid_593569
  var valid_593570 = formData.getOrDefault("Filters")
  valid_593570 = validateParameter(valid_593570, JArray, required = false,
                                 default = nil)
  if valid_593570 != nil:
    section.add "Filters", valid_593570
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_593571 = formData.getOrDefault("DBParameterGroupFamily")
  valid_593571 = validateParameter(valid_593571, JString, required = true,
                                 default = nil)
  if valid_593571 != nil:
    section.add "DBParameterGroupFamily", valid_593571
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593572: Call_PostDescribeEngineDefaultParameters_593556;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_593572.validator(path, query, header, formData, body)
  let scheme = call_593572.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593572.url(scheme.get, call_593572.host, call_593572.base,
                         call_593572.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593572, url, valid)

proc call*(call_593573: Call_PostDescribeEngineDefaultParameters_593556;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  var query_593574 = newJObject()
  var formData_593575 = newJObject()
  add(formData_593575, "MaxRecords", newJInt(MaxRecords))
  add(formData_593575, "Marker", newJString(Marker))
  add(query_593574, "Action", newJString(Action))
  if Filters != nil:
    formData_593575.add "Filters", Filters
  add(query_593574, "Version", newJString(Version))
  add(formData_593575, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_593573.call(nil, query_593574, nil, formData_593575, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_593556(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_593557, base: "/",
    url: url_PostDescribeEngineDefaultParameters_593558,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_593537 = ref object of OpenApiRestCall_590348
proc url_GetDescribeEngineDefaultParameters_593539(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_593538(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_593540 = query.getOrDefault("Marker")
  valid_593540 = validateParameter(valid_593540, JString, required = false,
                                 default = nil)
  if valid_593540 != nil:
    section.add "Marker", valid_593540
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_593541 = query.getOrDefault("DBParameterGroupFamily")
  valid_593541 = validateParameter(valid_593541, JString, required = true,
                                 default = nil)
  if valid_593541 != nil:
    section.add "DBParameterGroupFamily", valid_593541
  var valid_593542 = query.getOrDefault("Action")
  valid_593542 = validateParameter(valid_593542, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_593542 != nil:
    section.add "Action", valid_593542
  var valid_593543 = query.getOrDefault("Version")
  valid_593543 = validateParameter(valid_593543, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593543 != nil:
    section.add "Version", valid_593543
  var valid_593544 = query.getOrDefault("Filters")
  valid_593544 = validateParameter(valid_593544, JArray, required = false,
                                 default = nil)
  if valid_593544 != nil:
    section.add "Filters", valid_593544
  var valid_593545 = query.getOrDefault("MaxRecords")
  valid_593545 = validateParameter(valid_593545, JInt, required = false, default = nil)
  if valid_593545 != nil:
    section.add "MaxRecords", valid_593545
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593546 = header.getOrDefault("X-Amz-Signature")
  valid_593546 = validateParameter(valid_593546, JString, required = false,
                                 default = nil)
  if valid_593546 != nil:
    section.add "X-Amz-Signature", valid_593546
  var valid_593547 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593547 = validateParameter(valid_593547, JString, required = false,
                                 default = nil)
  if valid_593547 != nil:
    section.add "X-Amz-Content-Sha256", valid_593547
  var valid_593548 = header.getOrDefault("X-Amz-Date")
  valid_593548 = validateParameter(valid_593548, JString, required = false,
                                 default = nil)
  if valid_593548 != nil:
    section.add "X-Amz-Date", valid_593548
  var valid_593549 = header.getOrDefault("X-Amz-Credential")
  valid_593549 = validateParameter(valid_593549, JString, required = false,
                                 default = nil)
  if valid_593549 != nil:
    section.add "X-Amz-Credential", valid_593549
  var valid_593550 = header.getOrDefault("X-Amz-Security-Token")
  valid_593550 = validateParameter(valid_593550, JString, required = false,
                                 default = nil)
  if valid_593550 != nil:
    section.add "X-Amz-Security-Token", valid_593550
  var valid_593551 = header.getOrDefault("X-Amz-Algorithm")
  valid_593551 = validateParameter(valid_593551, JString, required = false,
                                 default = nil)
  if valid_593551 != nil:
    section.add "X-Amz-Algorithm", valid_593551
  var valid_593552 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593552 = validateParameter(valid_593552, JString, required = false,
                                 default = nil)
  if valid_593552 != nil:
    section.add "X-Amz-SignedHeaders", valid_593552
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593553: Call_GetDescribeEngineDefaultParameters_593537;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_593553.validator(path, query, header, formData, body)
  let scheme = call_593553.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593553.url(scheme.get, call_593553.host, call_593553.base,
                         call_593553.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593553, url, valid)

proc call*(call_593554: Call_GetDescribeEngineDefaultParameters_593537;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_593555 = newJObject()
  add(query_593555, "Marker", newJString(Marker))
  add(query_593555, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_593555, "Action", newJString(Action))
  add(query_593555, "Version", newJString(Version))
  if Filters != nil:
    query_593555.add "Filters", Filters
  add(query_593555, "MaxRecords", newJInt(MaxRecords))
  result = call_593554.call(nil, query_593555, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_593537(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_593538, base: "/",
    url: url_GetDescribeEngineDefaultParameters_593539,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventCategories_593593 = ref object of OpenApiRestCall_590348
proc url_PostDescribeEventCategories_593595(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEventCategories_593594(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593596 = query.getOrDefault("Action")
  valid_593596 = validateParameter(valid_593596, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_593596 != nil:
    section.add "Action", valid_593596
  var valid_593597 = query.getOrDefault("Version")
  valid_593597 = validateParameter(valid_593597, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593597 != nil:
    section.add "Version", valid_593597
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593598 = header.getOrDefault("X-Amz-Signature")
  valid_593598 = validateParameter(valid_593598, JString, required = false,
                                 default = nil)
  if valid_593598 != nil:
    section.add "X-Amz-Signature", valid_593598
  var valid_593599 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593599 = validateParameter(valid_593599, JString, required = false,
                                 default = nil)
  if valid_593599 != nil:
    section.add "X-Amz-Content-Sha256", valid_593599
  var valid_593600 = header.getOrDefault("X-Amz-Date")
  valid_593600 = validateParameter(valid_593600, JString, required = false,
                                 default = nil)
  if valid_593600 != nil:
    section.add "X-Amz-Date", valid_593600
  var valid_593601 = header.getOrDefault("X-Amz-Credential")
  valid_593601 = validateParameter(valid_593601, JString, required = false,
                                 default = nil)
  if valid_593601 != nil:
    section.add "X-Amz-Credential", valid_593601
  var valid_593602 = header.getOrDefault("X-Amz-Security-Token")
  valid_593602 = validateParameter(valid_593602, JString, required = false,
                                 default = nil)
  if valid_593602 != nil:
    section.add "X-Amz-Security-Token", valid_593602
  var valid_593603 = header.getOrDefault("X-Amz-Algorithm")
  valid_593603 = validateParameter(valid_593603, JString, required = false,
                                 default = nil)
  if valid_593603 != nil:
    section.add "X-Amz-Algorithm", valid_593603
  var valid_593604 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593604 = validateParameter(valid_593604, JString, required = false,
                                 default = nil)
  if valid_593604 != nil:
    section.add "X-Amz-SignedHeaders", valid_593604
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_593605 = formData.getOrDefault("SourceType")
  valid_593605 = validateParameter(valid_593605, JString, required = false,
                                 default = nil)
  if valid_593605 != nil:
    section.add "SourceType", valid_593605
  var valid_593606 = formData.getOrDefault("Filters")
  valid_593606 = validateParameter(valid_593606, JArray, required = false,
                                 default = nil)
  if valid_593606 != nil:
    section.add "Filters", valid_593606
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593607: Call_PostDescribeEventCategories_593593; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_593607.validator(path, query, header, formData, body)
  let scheme = call_593607.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593607.url(scheme.get, call_593607.host, call_593607.base,
                         call_593607.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593607, url, valid)

proc call*(call_593608: Call_PostDescribeEventCategories_593593;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_593609 = newJObject()
  var formData_593610 = newJObject()
  add(formData_593610, "SourceType", newJString(SourceType))
  add(query_593609, "Action", newJString(Action))
  if Filters != nil:
    formData_593610.add "Filters", Filters
  add(query_593609, "Version", newJString(Version))
  result = call_593608.call(nil, query_593609, nil, formData_593610, nil)

var postDescribeEventCategories* = Call_PostDescribeEventCategories_593593(
    name: "postDescribeEventCategories", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_PostDescribeEventCategories_593594, base: "/",
    url: url_PostDescribeEventCategories_593595,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventCategories_593576 = ref object of OpenApiRestCall_590348
proc url_GetDescribeEventCategories_593578(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEventCategories_593577(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_593579 = query.getOrDefault("SourceType")
  valid_593579 = validateParameter(valid_593579, JString, required = false,
                                 default = nil)
  if valid_593579 != nil:
    section.add "SourceType", valid_593579
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593580 = query.getOrDefault("Action")
  valid_593580 = validateParameter(valid_593580, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_593580 != nil:
    section.add "Action", valid_593580
  var valid_593581 = query.getOrDefault("Version")
  valid_593581 = validateParameter(valid_593581, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593581 != nil:
    section.add "Version", valid_593581
  var valid_593582 = query.getOrDefault("Filters")
  valid_593582 = validateParameter(valid_593582, JArray, required = false,
                                 default = nil)
  if valid_593582 != nil:
    section.add "Filters", valid_593582
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593583 = header.getOrDefault("X-Amz-Signature")
  valid_593583 = validateParameter(valid_593583, JString, required = false,
                                 default = nil)
  if valid_593583 != nil:
    section.add "X-Amz-Signature", valid_593583
  var valid_593584 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593584 = validateParameter(valid_593584, JString, required = false,
                                 default = nil)
  if valid_593584 != nil:
    section.add "X-Amz-Content-Sha256", valid_593584
  var valid_593585 = header.getOrDefault("X-Amz-Date")
  valid_593585 = validateParameter(valid_593585, JString, required = false,
                                 default = nil)
  if valid_593585 != nil:
    section.add "X-Amz-Date", valid_593585
  var valid_593586 = header.getOrDefault("X-Amz-Credential")
  valid_593586 = validateParameter(valid_593586, JString, required = false,
                                 default = nil)
  if valid_593586 != nil:
    section.add "X-Amz-Credential", valid_593586
  var valid_593587 = header.getOrDefault("X-Amz-Security-Token")
  valid_593587 = validateParameter(valid_593587, JString, required = false,
                                 default = nil)
  if valid_593587 != nil:
    section.add "X-Amz-Security-Token", valid_593587
  var valid_593588 = header.getOrDefault("X-Amz-Algorithm")
  valid_593588 = validateParameter(valid_593588, JString, required = false,
                                 default = nil)
  if valid_593588 != nil:
    section.add "X-Amz-Algorithm", valid_593588
  var valid_593589 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593589 = validateParameter(valid_593589, JString, required = false,
                                 default = nil)
  if valid_593589 != nil:
    section.add "X-Amz-SignedHeaders", valid_593589
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593590: Call_GetDescribeEventCategories_593576; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_593590.validator(path, query, header, formData, body)
  let scheme = call_593590.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593590.url(scheme.get, call_593590.host, call_593590.base,
                         call_593590.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593590, url, valid)

proc call*(call_593591: Call_GetDescribeEventCategories_593576;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Version: string = "2014-10-31"; Filters: JsonNode = nil): Recallable =
  ## getDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  var query_593592 = newJObject()
  add(query_593592, "SourceType", newJString(SourceType))
  add(query_593592, "Action", newJString(Action))
  add(query_593592, "Version", newJString(Version))
  if Filters != nil:
    query_593592.add "Filters", Filters
  result = call_593591.call(nil, query_593592, nil, nil, nil)

var getDescribeEventCategories* = Call_GetDescribeEventCategories_593576(
    name: "getDescribeEventCategories", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_GetDescribeEventCategories_593577, base: "/",
    url: url_GetDescribeEventCategories_593578,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventSubscriptions_593630 = ref object of OpenApiRestCall_590348
proc url_PostDescribeEventSubscriptions_593632(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEventSubscriptions_593631(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593633 = query.getOrDefault("Action")
  valid_593633 = validateParameter(valid_593633, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_593633 != nil:
    section.add "Action", valid_593633
  var valid_593634 = query.getOrDefault("Version")
  valid_593634 = validateParameter(valid_593634, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593634 != nil:
    section.add "Version", valid_593634
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593635 = header.getOrDefault("X-Amz-Signature")
  valid_593635 = validateParameter(valid_593635, JString, required = false,
                                 default = nil)
  if valid_593635 != nil:
    section.add "X-Amz-Signature", valid_593635
  var valid_593636 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593636 = validateParameter(valid_593636, JString, required = false,
                                 default = nil)
  if valid_593636 != nil:
    section.add "X-Amz-Content-Sha256", valid_593636
  var valid_593637 = header.getOrDefault("X-Amz-Date")
  valid_593637 = validateParameter(valid_593637, JString, required = false,
                                 default = nil)
  if valid_593637 != nil:
    section.add "X-Amz-Date", valid_593637
  var valid_593638 = header.getOrDefault("X-Amz-Credential")
  valid_593638 = validateParameter(valid_593638, JString, required = false,
                                 default = nil)
  if valid_593638 != nil:
    section.add "X-Amz-Credential", valid_593638
  var valid_593639 = header.getOrDefault("X-Amz-Security-Token")
  valid_593639 = validateParameter(valid_593639, JString, required = false,
                                 default = nil)
  if valid_593639 != nil:
    section.add "X-Amz-Security-Token", valid_593639
  var valid_593640 = header.getOrDefault("X-Amz-Algorithm")
  valid_593640 = validateParameter(valid_593640, JString, required = false,
                                 default = nil)
  if valid_593640 != nil:
    section.add "X-Amz-Algorithm", valid_593640
  var valid_593641 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593641 = validateParameter(valid_593641, JString, required = false,
                                 default = nil)
  if valid_593641 != nil:
    section.add "X-Amz-SignedHeaders", valid_593641
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_593642 = formData.getOrDefault("MaxRecords")
  valid_593642 = validateParameter(valid_593642, JInt, required = false, default = nil)
  if valid_593642 != nil:
    section.add "MaxRecords", valid_593642
  var valid_593643 = formData.getOrDefault("Marker")
  valid_593643 = validateParameter(valid_593643, JString, required = false,
                                 default = nil)
  if valid_593643 != nil:
    section.add "Marker", valid_593643
  var valid_593644 = formData.getOrDefault("SubscriptionName")
  valid_593644 = validateParameter(valid_593644, JString, required = false,
                                 default = nil)
  if valid_593644 != nil:
    section.add "SubscriptionName", valid_593644
  var valid_593645 = formData.getOrDefault("Filters")
  valid_593645 = validateParameter(valid_593645, JArray, required = false,
                                 default = nil)
  if valid_593645 != nil:
    section.add "Filters", valid_593645
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593646: Call_PostDescribeEventSubscriptions_593630; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_593646.validator(path, query, header, formData, body)
  let scheme = call_593646.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593646.url(scheme.get, call_593646.host, call_593646.base,
                         call_593646.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593646, url, valid)

proc call*(call_593647: Call_PostDescribeEventSubscriptions_593630;
          MaxRecords: int = 0; Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_593648 = newJObject()
  var formData_593649 = newJObject()
  add(formData_593649, "MaxRecords", newJInt(MaxRecords))
  add(formData_593649, "Marker", newJString(Marker))
  add(formData_593649, "SubscriptionName", newJString(SubscriptionName))
  add(query_593648, "Action", newJString(Action))
  if Filters != nil:
    formData_593649.add "Filters", Filters
  add(query_593648, "Version", newJString(Version))
  result = call_593647.call(nil, query_593648, nil, formData_593649, nil)

var postDescribeEventSubscriptions* = Call_PostDescribeEventSubscriptions_593630(
    name: "postDescribeEventSubscriptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_PostDescribeEventSubscriptions_593631, base: "/",
    url: url_PostDescribeEventSubscriptions_593632,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventSubscriptions_593611 = ref object of OpenApiRestCall_590348
proc url_GetDescribeEventSubscriptions_593613(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEventSubscriptions_593612(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_593614 = query.getOrDefault("Marker")
  valid_593614 = validateParameter(valid_593614, JString, required = false,
                                 default = nil)
  if valid_593614 != nil:
    section.add "Marker", valid_593614
  var valid_593615 = query.getOrDefault("SubscriptionName")
  valid_593615 = validateParameter(valid_593615, JString, required = false,
                                 default = nil)
  if valid_593615 != nil:
    section.add "SubscriptionName", valid_593615
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593616 = query.getOrDefault("Action")
  valid_593616 = validateParameter(valid_593616, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_593616 != nil:
    section.add "Action", valid_593616
  var valid_593617 = query.getOrDefault("Version")
  valid_593617 = validateParameter(valid_593617, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593617 != nil:
    section.add "Version", valid_593617
  var valid_593618 = query.getOrDefault("Filters")
  valid_593618 = validateParameter(valid_593618, JArray, required = false,
                                 default = nil)
  if valid_593618 != nil:
    section.add "Filters", valid_593618
  var valid_593619 = query.getOrDefault("MaxRecords")
  valid_593619 = validateParameter(valid_593619, JInt, required = false, default = nil)
  if valid_593619 != nil:
    section.add "MaxRecords", valid_593619
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593620 = header.getOrDefault("X-Amz-Signature")
  valid_593620 = validateParameter(valid_593620, JString, required = false,
                                 default = nil)
  if valid_593620 != nil:
    section.add "X-Amz-Signature", valid_593620
  var valid_593621 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593621 = validateParameter(valid_593621, JString, required = false,
                                 default = nil)
  if valid_593621 != nil:
    section.add "X-Amz-Content-Sha256", valid_593621
  var valid_593622 = header.getOrDefault("X-Amz-Date")
  valid_593622 = validateParameter(valid_593622, JString, required = false,
                                 default = nil)
  if valid_593622 != nil:
    section.add "X-Amz-Date", valid_593622
  var valid_593623 = header.getOrDefault("X-Amz-Credential")
  valid_593623 = validateParameter(valid_593623, JString, required = false,
                                 default = nil)
  if valid_593623 != nil:
    section.add "X-Amz-Credential", valid_593623
  var valid_593624 = header.getOrDefault("X-Amz-Security-Token")
  valid_593624 = validateParameter(valid_593624, JString, required = false,
                                 default = nil)
  if valid_593624 != nil:
    section.add "X-Amz-Security-Token", valid_593624
  var valid_593625 = header.getOrDefault("X-Amz-Algorithm")
  valid_593625 = validateParameter(valid_593625, JString, required = false,
                                 default = nil)
  if valid_593625 != nil:
    section.add "X-Amz-Algorithm", valid_593625
  var valid_593626 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593626 = validateParameter(valid_593626, JString, required = false,
                                 default = nil)
  if valid_593626 != nil:
    section.add "X-Amz-SignedHeaders", valid_593626
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593627: Call_GetDescribeEventSubscriptions_593611; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_593627.validator(path, query, header, formData, body)
  let scheme = call_593627.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593627.url(scheme.get, call_593627.host, call_593627.base,
                         call_593627.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593627, url, valid)

proc call*(call_593628: Call_GetDescribeEventSubscriptions_593611;
          Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_593629 = newJObject()
  add(query_593629, "Marker", newJString(Marker))
  add(query_593629, "SubscriptionName", newJString(SubscriptionName))
  add(query_593629, "Action", newJString(Action))
  add(query_593629, "Version", newJString(Version))
  if Filters != nil:
    query_593629.add "Filters", Filters
  add(query_593629, "MaxRecords", newJInt(MaxRecords))
  result = call_593628.call(nil, query_593629, nil, nil, nil)

var getDescribeEventSubscriptions* = Call_GetDescribeEventSubscriptions_593611(
    name: "getDescribeEventSubscriptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_GetDescribeEventSubscriptions_593612, base: "/",
    url: url_GetDescribeEventSubscriptions_593613,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_593674 = ref object of OpenApiRestCall_590348
proc url_PostDescribeEvents_593676(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEvents_593675(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593677 = query.getOrDefault("Action")
  valid_593677 = validateParameter(valid_593677, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_593677 != nil:
    section.add "Action", valid_593677
  var valid_593678 = query.getOrDefault("Version")
  valid_593678 = validateParameter(valid_593678, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593678 != nil:
    section.add "Version", valid_593678
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593679 = header.getOrDefault("X-Amz-Signature")
  valid_593679 = validateParameter(valid_593679, JString, required = false,
                                 default = nil)
  if valid_593679 != nil:
    section.add "X-Amz-Signature", valid_593679
  var valid_593680 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593680 = validateParameter(valid_593680, JString, required = false,
                                 default = nil)
  if valid_593680 != nil:
    section.add "X-Amz-Content-Sha256", valid_593680
  var valid_593681 = header.getOrDefault("X-Amz-Date")
  valid_593681 = validateParameter(valid_593681, JString, required = false,
                                 default = nil)
  if valid_593681 != nil:
    section.add "X-Amz-Date", valid_593681
  var valid_593682 = header.getOrDefault("X-Amz-Credential")
  valid_593682 = validateParameter(valid_593682, JString, required = false,
                                 default = nil)
  if valid_593682 != nil:
    section.add "X-Amz-Credential", valid_593682
  var valid_593683 = header.getOrDefault("X-Amz-Security-Token")
  valid_593683 = validateParameter(valid_593683, JString, required = false,
                                 default = nil)
  if valid_593683 != nil:
    section.add "X-Amz-Security-Token", valid_593683
  var valid_593684 = header.getOrDefault("X-Amz-Algorithm")
  valid_593684 = validateParameter(valid_593684, JString, required = false,
                                 default = nil)
  if valid_593684 != nil:
    section.add "X-Amz-Algorithm", valid_593684
  var valid_593685 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593685 = validateParameter(valid_593685, JString, required = false,
                                 default = nil)
  if valid_593685 != nil:
    section.add "X-Amz-SignedHeaders", valid_593685
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_593686 = formData.getOrDefault("MaxRecords")
  valid_593686 = validateParameter(valid_593686, JInt, required = false, default = nil)
  if valid_593686 != nil:
    section.add "MaxRecords", valid_593686
  var valid_593687 = formData.getOrDefault("Marker")
  valid_593687 = validateParameter(valid_593687, JString, required = false,
                                 default = nil)
  if valid_593687 != nil:
    section.add "Marker", valid_593687
  var valid_593688 = formData.getOrDefault("SourceIdentifier")
  valid_593688 = validateParameter(valid_593688, JString, required = false,
                                 default = nil)
  if valid_593688 != nil:
    section.add "SourceIdentifier", valid_593688
  var valid_593689 = formData.getOrDefault("SourceType")
  valid_593689 = validateParameter(valid_593689, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_593689 != nil:
    section.add "SourceType", valid_593689
  var valid_593690 = formData.getOrDefault("Duration")
  valid_593690 = validateParameter(valid_593690, JInt, required = false, default = nil)
  if valid_593690 != nil:
    section.add "Duration", valid_593690
  var valid_593691 = formData.getOrDefault("EndTime")
  valid_593691 = validateParameter(valid_593691, JString, required = false,
                                 default = nil)
  if valid_593691 != nil:
    section.add "EndTime", valid_593691
  var valid_593692 = formData.getOrDefault("StartTime")
  valid_593692 = validateParameter(valid_593692, JString, required = false,
                                 default = nil)
  if valid_593692 != nil:
    section.add "StartTime", valid_593692
  var valid_593693 = formData.getOrDefault("EventCategories")
  valid_593693 = validateParameter(valid_593693, JArray, required = false,
                                 default = nil)
  if valid_593693 != nil:
    section.add "EventCategories", valid_593693
  var valid_593694 = formData.getOrDefault("Filters")
  valid_593694 = validateParameter(valid_593694, JArray, required = false,
                                 default = nil)
  if valid_593694 != nil:
    section.add "Filters", valid_593694
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593695: Call_PostDescribeEvents_593674; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_593695.validator(path, query, header, formData, body)
  let scheme = call_593695.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593695.url(scheme.get, call_593695.host, call_593695.base,
                         call_593695.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593695, url, valid)

proc call*(call_593696: Call_PostDescribeEvents_593674; MaxRecords: int = 0;
          Marker: string = ""; SourceIdentifier: string = "";
          SourceType: string = "db-instance"; Duration: int = 0; EndTime: string = "";
          StartTime: string = ""; EventCategories: JsonNode = nil;
          Action: string = "DescribeEvents"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_593697 = newJObject()
  var formData_593698 = newJObject()
  add(formData_593698, "MaxRecords", newJInt(MaxRecords))
  add(formData_593698, "Marker", newJString(Marker))
  add(formData_593698, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_593698, "SourceType", newJString(SourceType))
  add(formData_593698, "Duration", newJInt(Duration))
  add(formData_593698, "EndTime", newJString(EndTime))
  add(formData_593698, "StartTime", newJString(StartTime))
  if EventCategories != nil:
    formData_593698.add "EventCategories", EventCategories
  add(query_593697, "Action", newJString(Action))
  if Filters != nil:
    formData_593698.add "Filters", Filters
  add(query_593697, "Version", newJString(Version))
  result = call_593696.call(nil, query_593697, nil, formData_593698, nil)

var postDescribeEvents* = Call_PostDescribeEvents_593674(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_593675, base: "/",
    url: url_PostDescribeEvents_593676, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_593650 = ref object of OpenApiRestCall_590348
proc url_GetDescribeEvents_593652(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEvents_593651(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: JString (required)
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_593653 = query.getOrDefault("Marker")
  valid_593653 = validateParameter(valid_593653, JString, required = false,
                                 default = nil)
  if valid_593653 != nil:
    section.add "Marker", valid_593653
  var valid_593654 = query.getOrDefault("SourceType")
  valid_593654 = validateParameter(valid_593654, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_593654 != nil:
    section.add "SourceType", valid_593654
  var valid_593655 = query.getOrDefault("SourceIdentifier")
  valid_593655 = validateParameter(valid_593655, JString, required = false,
                                 default = nil)
  if valid_593655 != nil:
    section.add "SourceIdentifier", valid_593655
  var valid_593656 = query.getOrDefault("EventCategories")
  valid_593656 = validateParameter(valid_593656, JArray, required = false,
                                 default = nil)
  if valid_593656 != nil:
    section.add "EventCategories", valid_593656
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593657 = query.getOrDefault("Action")
  valid_593657 = validateParameter(valid_593657, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_593657 != nil:
    section.add "Action", valid_593657
  var valid_593658 = query.getOrDefault("StartTime")
  valid_593658 = validateParameter(valid_593658, JString, required = false,
                                 default = nil)
  if valid_593658 != nil:
    section.add "StartTime", valid_593658
  var valid_593659 = query.getOrDefault("Duration")
  valid_593659 = validateParameter(valid_593659, JInt, required = false, default = nil)
  if valid_593659 != nil:
    section.add "Duration", valid_593659
  var valid_593660 = query.getOrDefault("EndTime")
  valid_593660 = validateParameter(valid_593660, JString, required = false,
                                 default = nil)
  if valid_593660 != nil:
    section.add "EndTime", valid_593660
  var valid_593661 = query.getOrDefault("Version")
  valid_593661 = validateParameter(valid_593661, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593661 != nil:
    section.add "Version", valid_593661
  var valid_593662 = query.getOrDefault("Filters")
  valid_593662 = validateParameter(valid_593662, JArray, required = false,
                                 default = nil)
  if valid_593662 != nil:
    section.add "Filters", valid_593662
  var valid_593663 = query.getOrDefault("MaxRecords")
  valid_593663 = validateParameter(valid_593663, JInt, required = false, default = nil)
  if valid_593663 != nil:
    section.add "MaxRecords", valid_593663
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593664 = header.getOrDefault("X-Amz-Signature")
  valid_593664 = validateParameter(valid_593664, JString, required = false,
                                 default = nil)
  if valid_593664 != nil:
    section.add "X-Amz-Signature", valid_593664
  var valid_593665 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593665 = validateParameter(valid_593665, JString, required = false,
                                 default = nil)
  if valid_593665 != nil:
    section.add "X-Amz-Content-Sha256", valid_593665
  var valid_593666 = header.getOrDefault("X-Amz-Date")
  valid_593666 = validateParameter(valid_593666, JString, required = false,
                                 default = nil)
  if valid_593666 != nil:
    section.add "X-Amz-Date", valid_593666
  var valid_593667 = header.getOrDefault("X-Amz-Credential")
  valid_593667 = validateParameter(valid_593667, JString, required = false,
                                 default = nil)
  if valid_593667 != nil:
    section.add "X-Amz-Credential", valid_593667
  var valid_593668 = header.getOrDefault("X-Amz-Security-Token")
  valid_593668 = validateParameter(valid_593668, JString, required = false,
                                 default = nil)
  if valid_593668 != nil:
    section.add "X-Amz-Security-Token", valid_593668
  var valid_593669 = header.getOrDefault("X-Amz-Algorithm")
  valid_593669 = validateParameter(valid_593669, JString, required = false,
                                 default = nil)
  if valid_593669 != nil:
    section.add "X-Amz-Algorithm", valid_593669
  var valid_593670 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593670 = validateParameter(valid_593670, JString, required = false,
                                 default = nil)
  if valid_593670 != nil:
    section.add "X-Amz-SignedHeaders", valid_593670
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593671: Call_GetDescribeEvents_593650; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_593671.validator(path, query, header, formData, body)
  let scheme = call_593671.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593671.url(scheme.get, call_593671.host, call_593671.base,
                         call_593671.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593671, url, valid)

proc call*(call_593672: Call_GetDescribeEvents_593650; Marker: string = "";
          SourceType: string = "db-instance"; SourceIdentifier: string = "";
          EventCategories: JsonNode = nil; Action: string = "DescribeEvents";
          StartTime: string = ""; Duration: int = 0; EndTime: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_593673 = newJObject()
  add(query_593673, "Marker", newJString(Marker))
  add(query_593673, "SourceType", newJString(SourceType))
  add(query_593673, "SourceIdentifier", newJString(SourceIdentifier))
  if EventCategories != nil:
    query_593673.add "EventCategories", EventCategories
  add(query_593673, "Action", newJString(Action))
  add(query_593673, "StartTime", newJString(StartTime))
  add(query_593673, "Duration", newJInt(Duration))
  add(query_593673, "EndTime", newJString(EndTime))
  add(query_593673, "Version", newJString(Version))
  if Filters != nil:
    query_593673.add "Filters", Filters
  add(query_593673, "MaxRecords", newJInt(MaxRecords))
  result = call_593672.call(nil, query_593673, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_593650(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_593651,
    base: "/", url: url_GetDescribeEvents_593652,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeGlobalClusters_593718 = ref object of OpenApiRestCall_590348
proc url_PostDescribeGlobalClusters_593720(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeGlobalClusters_593719(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593721 = query.getOrDefault("Action")
  valid_593721 = validateParameter(valid_593721, JString, required = true,
                                 default = newJString("DescribeGlobalClusters"))
  if valid_593721 != nil:
    section.add "Action", valid_593721
  var valid_593722 = query.getOrDefault("Version")
  valid_593722 = validateParameter(valid_593722, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593722 != nil:
    section.add "Version", valid_593722
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593723 = header.getOrDefault("X-Amz-Signature")
  valid_593723 = validateParameter(valid_593723, JString, required = false,
                                 default = nil)
  if valid_593723 != nil:
    section.add "X-Amz-Signature", valid_593723
  var valid_593724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593724 = validateParameter(valid_593724, JString, required = false,
                                 default = nil)
  if valid_593724 != nil:
    section.add "X-Amz-Content-Sha256", valid_593724
  var valid_593725 = header.getOrDefault("X-Amz-Date")
  valid_593725 = validateParameter(valid_593725, JString, required = false,
                                 default = nil)
  if valid_593725 != nil:
    section.add "X-Amz-Date", valid_593725
  var valid_593726 = header.getOrDefault("X-Amz-Credential")
  valid_593726 = validateParameter(valid_593726, JString, required = false,
                                 default = nil)
  if valid_593726 != nil:
    section.add "X-Amz-Credential", valid_593726
  var valid_593727 = header.getOrDefault("X-Amz-Security-Token")
  valid_593727 = validateParameter(valid_593727, JString, required = false,
                                 default = nil)
  if valid_593727 != nil:
    section.add "X-Amz-Security-Token", valid_593727
  var valid_593728 = header.getOrDefault("X-Amz-Algorithm")
  valid_593728 = validateParameter(valid_593728, JString, required = false,
                                 default = nil)
  if valid_593728 != nil:
    section.add "X-Amz-Algorithm", valid_593728
  var valid_593729 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593729 = validateParameter(valid_593729, JString, required = false,
                                 default = nil)
  if valid_593729 != nil:
    section.add "X-Amz-SignedHeaders", valid_593729
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_593730 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_593730 = validateParameter(valid_593730, JString, required = false,
                                 default = nil)
  if valid_593730 != nil:
    section.add "GlobalClusterIdentifier", valid_593730
  var valid_593731 = formData.getOrDefault("MaxRecords")
  valid_593731 = validateParameter(valid_593731, JInt, required = false, default = nil)
  if valid_593731 != nil:
    section.add "MaxRecords", valid_593731
  var valid_593732 = formData.getOrDefault("Marker")
  valid_593732 = validateParameter(valid_593732, JString, required = false,
                                 default = nil)
  if valid_593732 != nil:
    section.add "Marker", valid_593732
  var valid_593733 = formData.getOrDefault("Filters")
  valid_593733 = validateParameter(valid_593733, JArray, required = false,
                                 default = nil)
  if valid_593733 != nil:
    section.add "Filters", valid_593733
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593734: Call_PostDescribeGlobalClusters_593718; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593734.validator(path, query, header, formData, body)
  let scheme = call_593734.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593734.url(scheme.get, call_593734.host, call_593734.base,
                         call_593734.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593734, url, valid)

proc call*(call_593735: Call_PostDescribeGlobalClusters_593718;
          GlobalClusterIdentifier: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeGlobalClusters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_593736 = newJObject()
  var formData_593737 = newJObject()
  add(formData_593737, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_593737, "MaxRecords", newJInt(MaxRecords))
  add(formData_593737, "Marker", newJString(Marker))
  add(query_593736, "Action", newJString(Action))
  if Filters != nil:
    formData_593737.add "Filters", Filters
  add(query_593736, "Version", newJString(Version))
  result = call_593735.call(nil, query_593736, nil, formData_593737, nil)

var postDescribeGlobalClusters* = Call_PostDescribeGlobalClusters_593718(
    name: "postDescribeGlobalClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_PostDescribeGlobalClusters_593719, base: "/",
    url: url_PostDescribeGlobalClusters_593720,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeGlobalClusters_593699 = ref object of OpenApiRestCall_590348
proc url_GetDescribeGlobalClusters_593701(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeGlobalClusters_593700(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_593702 = query.getOrDefault("Marker")
  valid_593702 = validateParameter(valid_593702, JString, required = false,
                                 default = nil)
  if valid_593702 != nil:
    section.add "Marker", valid_593702
  var valid_593703 = query.getOrDefault("GlobalClusterIdentifier")
  valid_593703 = validateParameter(valid_593703, JString, required = false,
                                 default = nil)
  if valid_593703 != nil:
    section.add "GlobalClusterIdentifier", valid_593703
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593704 = query.getOrDefault("Action")
  valid_593704 = validateParameter(valid_593704, JString, required = true,
                                 default = newJString("DescribeGlobalClusters"))
  if valid_593704 != nil:
    section.add "Action", valid_593704
  var valid_593705 = query.getOrDefault("Version")
  valid_593705 = validateParameter(valid_593705, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593705 != nil:
    section.add "Version", valid_593705
  var valid_593706 = query.getOrDefault("Filters")
  valid_593706 = validateParameter(valid_593706, JArray, required = false,
                                 default = nil)
  if valid_593706 != nil:
    section.add "Filters", valid_593706
  var valid_593707 = query.getOrDefault("MaxRecords")
  valid_593707 = validateParameter(valid_593707, JInt, required = false, default = nil)
  if valid_593707 != nil:
    section.add "MaxRecords", valid_593707
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593708 = header.getOrDefault("X-Amz-Signature")
  valid_593708 = validateParameter(valid_593708, JString, required = false,
                                 default = nil)
  if valid_593708 != nil:
    section.add "X-Amz-Signature", valid_593708
  var valid_593709 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593709 = validateParameter(valid_593709, JString, required = false,
                                 default = nil)
  if valid_593709 != nil:
    section.add "X-Amz-Content-Sha256", valid_593709
  var valid_593710 = header.getOrDefault("X-Amz-Date")
  valid_593710 = validateParameter(valid_593710, JString, required = false,
                                 default = nil)
  if valid_593710 != nil:
    section.add "X-Amz-Date", valid_593710
  var valid_593711 = header.getOrDefault("X-Amz-Credential")
  valid_593711 = validateParameter(valid_593711, JString, required = false,
                                 default = nil)
  if valid_593711 != nil:
    section.add "X-Amz-Credential", valid_593711
  var valid_593712 = header.getOrDefault("X-Amz-Security-Token")
  valid_593712 = validateParameter(valid_593712, JString, required = false,
                                 default = nil)
  if valid_593712 != nil:
    section.add "X-Amz-Security-Token", valid_593712
  var valid_593713 = header.getOrDefault("X-Amz-Algorithm")
  valid_593713 = validateParameter(valid_593713, JString, required = false,
                                 default = nil)
  if valid_593713 != nil:
    section.add "X-Amz-Algorithm", valid_593713
  var valid_593714 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593714 = validateParameter(valid_593714, JString, required = false,
                                 default = nil)
  if valid_593714 != nil:
    section.add "X-Amz-SignedHeaders", valid_593714
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593715: Call_GetDescribeGlobalClusters_593699; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_593715.validator(path, query, header, formData, body)
  let scheme = call_593715.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593715.url(scheme.get, call_593715.host, call_593715.base,
                         call_593715.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593715, url, valid)

proc call*(call_593716: Call_GetDescribeGlobalClusters_593699; Marker: string = "";
          GlobalClusterIdentifier: string = "";
          Action: string = "DescribeGlobalClusters"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_593717 = newJObject()
  add(query_593717, "Marker", newJString(Marker))
  add(query_593717, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_593717, "Action", newJString(Action))
  add(query_593717, "Version", newJString(Version))
  if Filters != nil:
    query_593717.add "Filters", Filters
  add(query_593717, "MaxRecords", newJInt(MaxRecords))
  result = call_593716.call(nil, query_593717, nil, nil, nil)

var getDescribeGlobalClusters* = Call_GetDescribeGlobalClusters_593699(
    name: "getDescribeGlobalClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_GetDescribeGlobalClusters_593700, base: "/",
    url: url_GetDescribeGlobalClusters_593701,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeInstallationMedia_593757 = ref object of OpenApiRestCall_590348
proc url_PostDescribeInstallationMedia_593759(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeInstallationMedia_593758(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available installation media for on-premises, bring your own media (BYOM) DB engines, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593760 = query.getOrDefault("Action")
  valid_593760 = validateParameter(valid_593760, JString, required = true, default = newJString(
      "DescribeInstallationMedia"))
  if valid_593760 != nil:
    section.add "Action", valid_593760
  var valid_593761 = query.getOrDefault("Version")
  valid_593761 = validateParameter(valid_593761, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593761 != nil:
    section.add "Version", valid_593761
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593762 = header.getOrDefault("X-Amz-Signature")
  valid_593762 = validateParameter(valid_593762, JString, required = false,
                                 default = nil)
  if valid_593762 != nil:
    section.add "X-Amz-Signature", valid_593762
  var valid_593763 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593763 = validateParameter(valid_593763, JString, required = false,
                                 default = nil)
  if valid_593763 != nil:
    section.add "X-Amz-Content-Sha256", valid_593763
  var valid_593764 = header.getOrDefault("X-Amz-Date")
  valid_593764 = validateParameter(valid_593764, JString, required = false,
                                 default = nil)
  if valid_593764 != nil:
    section.add "X-Amz-Date", valid_593764
  var valid_593765 = header.getOrDefault("X-Amz-Credential")
  valid_593765 = validateParameter(valid_593765, JString, required = false,
                                 default = nil)
  if valid_593765 != nil:
    section.add "X-Amz-Credential", valid_593765
  var valid_593766 = header.getOrDefault("X-Amz-Security-Token")
  valid_593766 = validateParameter(valid_593766, JString, required = false,
                                 default = nil)
  if valid_593766 != nil:
    section.add "X-Amz-Security-Token", valid_593766
  var valid_593767 = header.getOrDefault("X-Amz-Algorithm")
  valid_593767 = validateParameter(valid_593767, JString, required = false,
                                 default = nil)
  if valid_593767 != nil:
    section.add "X-Amz-Algorithm", valid_593767
  var valid_593768 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593768 = validateParameter(valid_593768, JString, required = false,
                                 default = nil)
  if valid_593768 != nil:
    section.add "X-Amz-SignedHeaders", valid_593768
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: JString
  ##                      : The installation media ID.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  section = newJObject()
  var valid_593769 = formData.getOrDefault("MaxRecords")
  valid_593769 = validateParameter(valid_593769, JInt, required = false, default = nil)
  if valid_593769 != nil:
    section.add "MaxRecords", valid_593769
  var valid_593770 = formData.getOrDefault("Marker")
  valid_593770 = validateParameter(valid_593770, JString, required = false,
                                 default = nil)
  if valid_593770 != nil:
    section.add "Marker", valid_593770
  var valid_593771 = formData.getOrDefault("InstallationMediaId")
  valid_593771 = validateParameter(valid_593771, JString, required = false,
                                 default = nil)
  if valid_593771 != nil:
    section.add "InstallationMediaId", valid_593771
  var valid_593772 = formData.getOrDefault("Filters")
  valid_593772 = validateParameter(valid_593772, JArray, required = false,
                                 default = nil)
  if valid_593772 != nil:
    section.add "Filters", valid_593772
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593773: Call_PostDescribeInstallationMedia_593757; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available installation media for on-premises, bring your own media (BYOM) DB engines, such as Microsoft SQL Server.
  ## 
  let valid = call_593773.validator(path, query, header, formData, body)
  let scheme = call_593773.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593773.url(scheme.get, call_593773.host, call_593773.base,
                         call_593773.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593773, url, valid)

proc call*(call_593774: Call_PostDescribeInstallationMedia_593757;
          MaxRecords: int = 0; Marker: string = ""; InstallationMediaId: string = "";
          Action: string = "DescribeInstallationMedia"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeInstallationMedia
  ## Describes the available installation media for on-premises, bring your own media (BYOM) DB engines, such as Microsoft SQL Server.
  ##   MaxRecords: int
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: string
  ##                      : The installation media ID.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   Version: string (required)
  var query_593775 = newJObject()
  var formData_593776 = newJObject()
  add(formData_593776, "MaxRecords", newJInt(MaxRecords))
  add(formData_593776, "Marker", newJString(Marker))
  add(formData_593776, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_593775, "Action", newJString(Action))
  if Filters != nil:
    formData_593776.add "Filters", Filters
  add(query_593775, "Version", newJString(Version))
  result = call_593774.call(nil, query_593775, nil, formData_593776, nil)

var postDescribeInstallationMedia* = Call_PostDescribeInstallationMedia_593757(
    name: "postDescribeInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeInstallationMedia",
    validator: validate_PostDescribeInstallationMedia_593758, base: "/",
    url: url_PostDescribeInstallationMedia_593759,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeInstallationMedia_593738 = ref object of OpenApiRestCall_590348
proc url_GetDescribeInstallationMedia_593740(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeInstallationMedia_593739(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available installation media for on-premises, bring your own media (BYOM) DB engines, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: JString
  ##                      : The installation media ID.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  section = newJObject()
  var valid_593741 = query.getOrDefault("Marker")
  valid_593741 = validateParameter(valid_593741, JString, required = false,
                                 default = nil)
  if valid_593741 != nil:
    section.add "Marker", valid_593741
  var valid_593742 = query.getOrDefault("InstallationMediaId")
  valid_593742 = validateParameter(valid_593742, JString, required = false,
                                 default = nil)
  if valid_593742 != nil:
    section.add "InstallationMediaId", valid_593742
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593743 = query.getOrDefault("Action")
  valid_593743 = validateParameter(valid_593743, JString, required = true, default = newJString(
      "DescribeInstallationMedia"))
  if valid_593743 != nil:
    section.add "Action", valid_593743
  var valid_593744 = query.getOrDefault("Version")
  valid_593744 = validateParameter(valid_593744, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593744 != nil:
    section.add "Version", valid_593744
  var valid_593745 = query.getOrDefault("Filters")
  valid_593745 = validateParameter(valid_593745, JArray, required = false,
                                 default = nil)
  if valid_593745 != nil:
    section.add "Filters", valid_593745
  var valid_593746 = query.getOrDefault("MaxRecords")
  valid_593746 = validateParameter(valid_593746, JInt, required = false, default = nil)
  if valid_593746 != nil:
    section.add "MaxRecords", valid_593746
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593747 = header.getOrDefault("X-Amz-Signature")
  valid_593747 = validateParameter(valid_593747, JString, required = false,
                                 default = nil)
  if valid_593747 != nil:
    section.add "X-Amz-Signature", valid_593747
  var valid_593748 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593748 = validateParameter(valid_593748, JString, required = false,
                                 default = nil)
  if valid_593748 != nil:
    section.add "X-Amz-Content-Sha256", valid_593748
  var valid_593749 = header.getOrDefault("X-Amz-Date")
  valid_593749 = validateParameter(valid_593749, JString, required = false,
                                 default = nil)
  if valid_593749 != nil:
    section.add "X-Amz-Date", valid_593749
  var valid_593750 = header.getOrDefault("X-Amz-Credential")
  valid_593750 = validateParameter(valid_593750, JString, required = false,
                                 default = nil)
  if valid_593750 != nil:
    section.add "X-Amz-Credential", valid_593750
  var valid_593751 = header.getOrDefault("X-Amz-Security-Token")
  valid_593751 = validateParameter(valid_593751, JString, required = false,
                                 default = nil)
  if valid_593751 != nil:
    section.add "X-Amz-Security-Token", valid_593751
  var valid_593752 = header.getOrDefault("X-Amz-Algorithm")
  valid_593752 = validateParameter(valid_593752, JString, required = false,
                                 default = nil)
  if valid_593752 != nil:
    section.add "X-Amz-Algorithm", valid_593752
  var valid_593753 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593753 = validateParameter(valid_593753, JString, required = false,
                                 default = nil)
  if valid_593753 != nil:
    section.add "X-Amz-SignedHeaders", valid_593753
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593754: Call_GetDescribeInstallationMedia_593738; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available installation media for on-premises, bring your own media (BYOM) DB engines, such as Microsoft SQL Server.
  ## 
  let valid = call_593754.validator(path, query, header, formData, body)
  let scheme = call_593754.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593754.url(scheme.get, call_593754.host, call_593754.base,
                         call_593754.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593754, url, valid)

proc call*(call_593755: Call_GetDescribeInstallationMedia_593738;
          Marker: string = ""; InstallationMediaId: string = "";
          Action: string = "DescribeInstallationMedia";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeInstallationMedia
  ## Describes the available installation media for on-premises, bring your own media (BYOM) DB engines, such as Microsoft SQL Server.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: string
  ##                      : The installation media ID.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  var query_593756 = newJObject()
  add(query_593756, "Marker", newJString(Marker))
  add(query_593756, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_593756, "Action", newJString(Action))
  add(query_593756, "Version", newJString(Version))
  if Filters != nil:
    query_593756.add "Filters", Filters
  add(query_593756, "MaxRecords", newJInt(MaxRecords))
  result = call_593755.call(nil, query_593756, nil, nil, nil)

var getDescribeInstallationMedia* = Call_GetDescribeInstallationMedia_593738(
    name: "getDescribeInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeInstallationMedia",
    validator: validate_GetDescribeInstallationMedia_593739, base: "/",
    url: url_GetDescribeInstallationMedia_593740,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroupOptions_593797 = ref object of OpenApiRestCall_590348
proc url_PostDescribeOptionGroupOptions_593799(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeOptionGroupOptions_593798(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593800 = query.getOrDefault("Action")
  valid_593800 = validateParameter(valid_593800, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_593800 != nil:
    section.add "Action", valid_593800
  var valid_593801 = query.getOrDefault("Version")
  valid_593801 = validateParameter(valid_593801, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593801 != nil:
    section.add "Version", valid_593801
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593802 = header.getOrDefault("X-Amz-Signature")
  valid_593802 = validateParameter(valid_593802, JString, required = false,
                                 default = nil)
  if valid_593802 != nil:
    section.add "X-Amz-Signature", valid_593802
  var valid_593803 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593803 = validateParameter(valid_593803, JString, required = false,
                                 default = nil)
  if valid_593803 != nil:
    section.add "X-Amz-Content-Sha256", valid_593803
  var valid_593804 = header.getOrDefault("X-Amz-Date")
  valid_593804 = validateParameter(valid_593804, JString, required = false,
                                 default = nil)
  if valid_593804 != nil:
    section.add "X-Amz-Date", valid_593804
  var valid_593805 = header.getOrDefault("X-Amz-Credential")
  valid_593805 = validateParameter(valid_593805, JString, required = false,
                                 default = nil)
  if valid_593805 != nil:
    section.add "X-Amz-Credential", valid_593805
  var valid_593806 = header.getOrDefault("X-Amz-Security-Token")
  valid_593806 = validateParameter(valid_593806, JString, required = false,
                                 default = nil)
  if valid_593806 != nil:
    section.add "X-Amz-Security-Token", valid_593806
  var valid_593807 = header.getOrDefault("X-Amz-Algorithm")
  valid_593807 = validateParameter(valid_593807, JString, required = false,
                                 default = nil)
  if valid_593807 != nil:
    section.add "X-Amz-Algorithm", valid_593807
  var valid_593808 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593808 = validateParameter(valid_593808, JString, required = false,
                                 default = nil)
  if valid_593808 != nil:
    section.add "X-Amz-SignedHeaders", valid_593808
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_593809 = formData.getOrDefault("MaxRecords")
  valid_593809 = validateParameter(valid_593809, JInt, required = false, default = nil)
  if valid_593809 != nil:
    section.add "MaxRecords", valid_593809
  var valid_593810 = formData.getOrDefault("Marker")
  valid_593810 = validateParameter(valid_593810, JString, required = false,
                                 default = nil)
  if valid_593810 != nil:
    section.add "Marker", valid_593810
  assert formData != nil,
        "formData argument is necessary due to required `EngineName` field"
  var valid_593811 = formData.getOrDefault("EngineName")
  valid_593811 = validateParameter(valid_593811, JString, required = true,
                                 default = nil)
  if valid_593811 != nil:
    section.add "EngineName", valid_593811
  var valid_593812 = formData.getOrDefault("MajorEngineVersion")
  valid_593812 = validateParameter(valid_593812, JString, required = false,
                                 default = nil)
  if valid_593812 != nil:
    section.add "MajorEngineVersion", valid_593812
  var valid_593813 = formData.getOrDefault("Filters")
  valid_593813 = validateParameter(valid_593813, JArray, required = false,
                                 default = nil)
  if valid_593813 != nil:
    section.add "Filters", valid_593813
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593814: Call_PostDescribeOptionGroupOptions_593797; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_593814.validator(path, query, header, formData, body)
  let scheme = call_593814.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593814.url(scheme.get, call_593814.host, call_593814.base,
                         call_593814.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593814, url, valid)

proc call*(call_593815: Call_PostDescribeOptionGroupOptions_593797;
          EngineName: string; MaxRecords: int = 0; Marker: string = "";
          MajorEngineVersion: string = "";
          Action: string = "DescribeOptionGroupOptions"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroupOptions
  ## Describes all available options.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_593816 = newJObject()
  var formData_593817 = newJObject()
  add(formData_593817, "MaxRecords", newJInt(MaxRecords))
  add(formData_593817, "Marker", newJString(Marker))
  add(formData_593817, "EngineName", newJString(EngineName))
  add(formData_593817, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_593816, "Action", newJString(Action))
  if Filters != nil:
    formData_593817.add "Filters", Filters
  add(query_593816, "Version", newJString(Version))
  result = call_593815.call(nil, query_593816, nil, formData_593817, nil)

var postDescribeOptionGroupOptions* = Call_PostDescribeOptionGroupOptions_593797(
    name: "postDescribeOptionGroupOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_PostDescribeOptionGroupOptions_593798, base: "/",
    url: url_PostDescribeOptionGroupOptions_593799,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroupOptions_593777 = ref object of OpenApiRestCall_590348
proc url_GetDescribeOptionGroupOptions_593779(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeOptionGroupOptions_593778(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EngineName` field"
  var valid_593780 = query.getOrDefault("EngineName")
  valid_593780 = validateParameter(valid_593780, JString, required = true,
                                 default = nil)
  if valid_593780 != nil:
    section.add "EngineName", valid_593780
  var valid_593781 = query.getOrDefault("Marker")
  valid_593781 = validateParameter(valid_593781, JString, required = false,
                                 default = nil)
  if valid_593781 != nil:
    section.add "Marker", valid_593781
  var valid_593782 = query.getOrDefault("Action")
  valid_593782 = validateParameter(valid_593782, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_593782 != nil:
    section.add "Action", valid_593782
  var valid_593783 = query.getOrDefault("Version")
  valid_593783 = validateParameter(valid_593783, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593783 != nil:
    section.add "Version", valid_593783
  var valid_593784 = query.getOrDefault("Filters")
  valid_593784 = validateParameter(valid_593784, JArray, required = false,
                                 default = nil)
  if valid_593784 != nil:
    section.add "Filters", valid_593784
  var valid_593785 = query.getOrDefault("MaxRecords")
  valid_593785 = validateParameter(valid_593785, JInt, required = false, default = nil)
  if valid_593785 != nil:
    section.add "MaxRecords", valid_593785
  var valid_593786 = query.getOrDefault("MajorEngineVersion")
  valid_593786 = validateParameter(valid_593786, JString, required = false,
                                 default = nil)
  if valid_593786 != nil:
    section.add "MajorEngineVersion", valid_593786
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593787 = header.getOrDefault("X-Amz-Signature")
  valid_593787 = validateParameter(valid_593787, JString, required = false,
                                 default = nil)
  if valid_593787 != nil:
    section.add "X-Amz-Signature", valid_593787
  var valid_593788 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593788 = validateParameter(valid_593788, JString, required = false,
                                 default = nil)
  if valid_593788 != nil:
    section.add "X-Amz-Content-Sha256", valid_593788
  var valid_593789 = header.getOrDefault("X-Amz-Date")
  valid_593789 = validateParameter(valid_593789, JString, required = false,
                                 default = nil)
  if valid_593789 != nil:
    section.add "X-Amz-Date", valid_593789
  var valid_593790 = header.getOrDefault("X-Amz-Credential")
  valid_593790 = validateParameter(valid_593790, JString, required = false,
                                 default = nil)
  if valid_593790 != nil:
    section.add "X-Amz-Credential", valid_593790
  var valid_593791 = header.getOrDefault("X-Amz-Security-Token")
  valid_593791 = validateParameter(valid_593791, JString, required = false,
                                 default = nil)
  if valid_593791 != nil:
    section.add "X-Amz-Security-Token", valid_593791
  var valid_593792 = header.getOrDefault("X-Amz-Algorithm")
  valid_593792 = validateParameter(valid_593792, JString, required = false,
                                 default = nil)
  if valid_593792 != nil:
    section.add "X-Amz-Algorithm", valid_593792
  var valid_593793 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593793 = validateParameter(valid_593793, JString, required = false,
                                 default = nil)
  if valid_593793 != nil:
    section.add "X-Amz-SignedHeaders", valid_593793
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593794: Call_GetDescribeOptionGroupOptions_593777; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_593794.validator(path, query, header, formData, body)
  let scheme = call_593794.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593794.url(scheme.get, call_593794.host, call_593794.base,
                         call_593794.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593794, url, valid)

proc call*(call_593795: Call_GetDescribeOptionGroupOptions_593777;
          EngineName: string; Marker: string = "";
          Action: string = "DescribeOptionGroupOptions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroupOptions
  ## Describes all available options.
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  var query_593796 = newJObject()
  add(query_593796, "EngineName", newJString(EngineName))
  add(query_593796, "Marker", newJString(Marker))
  add(query_593796, "Action", newJString(Action))
  add(query_593796, "Version", newJString(Version))
  if Filters != nil:
    query_593796.add "Filters", Filters
  add(query_593796, "MaxRecords", newJInt(MaxRecords))
  add(query_593796, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_593795.call(nil, query_593796, nil, nil, nil)

var getDescribeOptionGroupOptions* = Call_GetDescribeOptionGroupOptions_593777(
    name: "getDescribeOptionGroupOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_GetDescribeOptionGroupOptions_593778, base: "/",
    url: url_GetDescribeOptionGroupOptions_593779,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroups_593839 = ref object of OpenApiRestCall_590348
proc url_PostDescribeOptionGroups_593841(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeOptionGroups_593840(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593842 = query.getOrDefault("Action")
  valid_593842 = validateParameter(valid_593842, JString, required = true,
                                 default = newJString("DescribeOptionGroups"))
  if valid_593842 != nil:
    section.add "Action", valid_593842
  var valid_593843 = query.getOrDefault("Version")
  valid_593843 = validateParameter(valid_593843, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593843 != nil:
    section.add "Version", valid_593843
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593844 = header.getOrDefault("X-Amz-Signature")
  valid_593844 = validateParameter(valid_593844, JString, required = false,
                                 default = nil)
  if valid_593844 != nil:
    section.add "X-Amz-Signature", valid_593844
  var valid_593845 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593845 = validateParameter(valid_593845, JString, required = false,
                                 default = nil)
  if valid_593845 != nil:
    section.add "X-Amz-Content-Sha256", valid_593845
  var valid_593846 = header.getOrDefault("X-Amz-Date")
  valid_593846 = validateParameter(valid_593846, JString, required = false,
                                 default = nil)
  if valid_593846 != nil:
    section.add "X-Amz-Date", valid_593846
  var valid_593847 = header.getOrDefault("X-Amz-Credential")
  valid_593847 = validateParameter(valid_593847, JString, required = false,
                                 default = nil)
  if valid_593847 != nil:
    section.add "X-Amz-Credential", valid_593847
  var valid_593848 = header.getOrDefault("X-Amz-Security-Token")
  valid_593848 = validateParameter(valid_593848, JString, required = false,
                                 default = nil)
  if valid_593848 != nil:
    section.add "X-Amz-Security-Token", valid_593848
  var valid_593849 = header.getOrDefault("X-Amz-Algorithm")
  valid_593849 = validateParameter(valid_593849, JString, required = false,
                                 default = nil)
  if valid_593849 != nil:
    section.add "X-Amz-Algorithm", valid_593849
  var valid_593850 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593850 = validateParameter(valid_593850, JString, required = false,
                                 default = nil)
  if valid_593850 != nil:
    section.add "X-Amz-SignedHeaders", valid_593850
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_593851 = formData.getOrDefault("MaxRecords")
  valid_593851 = validateParameter(valid_593851, JInt, required = false, default = nil)
  if valid_593851 != nil:
    section.add "MaxRecords", valid_593851
  var valid_593852 = formData.getOrDefault("Marker")
  valid_593852 = validateParameter(valid_593852, JString, required = false,
                                 default = nil)
  if valid_593852 != nil:
    section.add "Marker", valid_593852
  var valid_593853 = formData.getOrDefault("EngineName")
  valid_593853 = validateParameter(valid_593853, JString, required = false,
                                 default = nil)
  if valid_593853 != nil:
    section.add "EngineName", valid_593853
  var valid_593854 = formData.getOrDefault("MajorEngineVersion")
  valid_593854 = validateParameter(valid_593854, JString, required = false,
                                 default = nil)
  if valid_593854 != nil:
    section.add "MajorEngineVersion", valid_593854
  var valid_593855 = formData.getOrDefault("OptionGroupName")
  valid_593855 = validateParameter(valid_593855, JString, required = false,
                                 default = nil)
  if valid_593855 != nil:
    section.add "OptionGroupName", valid_593855
  var valid_593856 = formData.getOrDefault("Filters")
  valid_593856 = validateParameter(valid_593856, JArray, required = false,
                                 default = nil)
  if valid_593856 != nil:
    section.add "Filters", valid_593856
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593857: Call_PostDescribeOptionGroups_593839; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_593857.validator(path, query, header, formData, body)
  let scheme = call_593857.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593857.url(scheme.get, call_593857.host, call_593857.base,
                         call_593857.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593857, url, valid)

proc call*(call_593858: Call_PostDescribeOptionGroups_593839; MaxRecords: int = 0;
          Marker: string = ""; EngineName: string = ""; MajorEngineVersion: string = "";
          Action: string = "DescribeOptionGroups"; OptionGroupName: string = "";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroups
  ## Describes the available option groups.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_593859 = newJObject()
  var formData_593860 = newJObject()
  add(formData_593860, "MaxRecords", newJInt(MaxRecords))
  add(formData_593860, "Marker", newJString(Marker))
  add(formData_593860, "EngineName", newJString(EngineName))
  add(formData_593860, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_593859, "Action", newJString(Action))
  add(formData_593860, "OptionGroupName", newJString(OptionGroupName))
  if Filters != nil:
    formData_593860.add "Filters", Filters
  add(query_593859, "Version", newJString(Version))
  result = call_593858.call(nil, query_593859, nil, formData_593860, nil)

var postDescribeOptionGroups* = Call_PostDescribeOptionGroups_593839(
    name: "postDescribeOptionGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_PostDescribeOptionGroups_593840, base: "/",
    url: url_PostDescribeOptionGroups_593841, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroups_593818 = ref object of OpenApiRestCall_590348
proc url_GetDescribeOptionGroups_593820(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeOptionGroups_593819(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  section = newJObject()
  var valid_593821 = query.getOrDefault("EngineName")
  valid_593821 = validateParameter(valid_593821, JString, required = false,
                                 default = nil)
  if valid_593821 != nil:
    section.add "EngineName", valid_593821
  var valid_593822 = query.getOrDefault("Marker")
  valid_593822 = validateParameter(valid_593822, JString, required = false,
                                 default = nil)
  if valid_593822 != nil:
    section.add "Marker", valid_593822
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593823 = query.getOrDefault("Action")
  valid_593823 = validateParameter(valid_593823, JString, required = true,
                                 default = newJString("DescribeOptionGroups"))
  if valid_593823 != nil:
    section.add "Action", valid_593823
  var valid_593824 = query.getOrDefault("OptionGroupName")
  valid_593824 = validateParameter(valid_593824, JString, required = false,
                                 default = nil)
  if valid_593824 != nil:
    section.add "OptionGroupName", valid_593824
  var valid_593825 = query.getOrDefault("Version")
  valid_593825 = validateParameter(valid_593825, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593825 != nil:
    section.add "Version", valid_593825
  var valid_593826 = query.getOrDefault("Filters")
  valid_593826 = validateParameter(valid_593826, JArray, required = false,
                                 default = nil)
  if valid_593826 != nil:
    section.add "Filters", valid_593826
  var valid_593827 = query.getOrDefault("MaxRecords")
  valid_593827 = validateParameter(valid_593827, JInt, required = false, default = nil)
  if valid_593827 != nil:
    section.add "MaxRecords", valid_593827
  var valid_593828 = query.getOrDefault("MajorEngineVersion")
  valid_593828 = validateParameter(valid_593828, JString, required = false,
                                 default = nil)
  if valid_593828 != nil:
    section.add "MajorEngineVersion", valid_593828
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593829 = header.getOrDefault("X-Amz-Signature")
  valid_593829 = validateParameter(valid_593829, JString, required = false,
                                 default = nil)
  if valid_593829 != nil:
    section.add "X-Amz-Signature", valid_593829
  var valid_593830 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593830 = validateParameter(valid_593830, JString, required = false,
                                 default = nil)
  if valid_593830 != nil:
    section.add "X-Amz-Content-Sha256", valid_593830
  var valid_593831 = header.getOrDefault("X-Amz-Date")
  valid_593831 = validateParameter(valid_593831, JString, required = false,
                                 default = nil)
  if valid_593831 != nil:
    section.add "X-Amz-Date", valid_593831
  var valid_593832 = header.getOrDefault("X-Amz-Credential")
  valid_593832 = validateParameter(valid_593832, JString, required = false,
                                 default = nil)
  if valid_593832 != nil:
    section.add "X-Amz-Credential", valid_593832
  var valid_593833 = header.getOrDefault("X-Amz-Security-Token")
  valid_593833 = validateParameter(valid_593833, JString, required = false,
                                 default = nil)
  if valid_593833 != nil:
    section.add "X-Amz-Security-Token", valid_593833
  var valid_593834 = header.getOrDefault("X-Amz-Algorithm")
  valid_593834 = validateParameter(valid_593834, JString, required = false,
                                 default = nil)
  if valid_593834 != nil:
    section.add "X-Amz-Algorithm", valid_593834
  var valid_593835 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593835 = validateParameter(valid_593835, JString, required = false,
                                 default = nil)
  if valid_593835 != nil:
    section.add "X-Amz-SignedHeaders", valid_593835
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593836: Call_GetDescribeOptionGroups_593818; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_593836.validator(path, query, header, formData, body)
  let scheme = call_593836.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593836.url(scheme.get, call_593836.host, call_593836.base,
                         call_593836.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593836, url, valid)

proc call*(call_593837: Call_GetDescribeOptionGroups_593818;
          EngineName: string = ""; Marker: string = "";
          Action: string = "DescribeOptionGroups"; OptionGroupName: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroups
  ## Describes the available option groups.
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  var query_593838 = newJObject()
  add(query_593838, "EngineName", newJString(EngineName))
  add(query_593838, "Marker", newJString(Marker))
  add(query_593838, "Action", newJString(Action))
  add(query_593838, "OptionGroupName", newJString(OptionGroupName))
  add(query_593838, "Version", newJString(Version))
  if Filters != nil:
    query_593838.add "Filters", Filters
  add(query_593838, "MaxRecords", newJInt(MaxRecords))
  add(query_593838, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_593837.call(nil, query_593838, nil, nil, nil)

var getDescribeOptionGroups* = Call_GetDescribeOptionGroups_593818(
    name: "getDescribeOptionGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_GetDescribeOptionGroups_593819, base: "/",
    url: url_GetDescribeOptionGroups_593820, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOrderableDBInstanceOptions_593884 = ref object of OpenApiRestCall_590348
proc url_PostDescribeOrderableDBInstanceOptions_593886(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeOrderableDBInstanceOptions_593885(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593887 = query.getOrDefault("Action")
  valid_593887 = validateParameter(valid_593887, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_593887 != nil:
    section.add "Action", valid_593887
  var valid_593888 = query.getOrDefault("Version")
  valid_593888 = validateParameter(valid_593888, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593888 != nil:
    section.add "Version", valid_593888
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593889 = header.getOrDefault("X-Amz-Signature")
  valid_593889 = validateParameter(valid_593889, JString, required = false,
                                 default = nil)
  if valid_593889 != nil:
    section.add "X-Amz-Signature", valid_593889
  var valid_593890 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593890 = validateParameter(valid_593890, JString, required = false,
                                 default = nil)
  if valid_593890 != nil:
    section.add "X-Amz-Content-Sha256", valid_593890
  var valid_593891 = header.getOrDefault("X-Amz-Date")
  valid_593891 = validateParameter(valid_593891, JString, required = false,
                                 default = nil)
  if valid_593891 != nil:
    section.add "X-Amz-Date", valid_593891
  var valid_593892 = header.getOrDefault("X-Amz-Credential")
  valid_593892 = validateParameter(valid_593892, JString, required = false,
                                 default = nil)
  if valid_593892 != nil:
    section.add "X-Amz-Credential", valid_593892
  var valid_593893 = header.getOrDefault("X-Amz-Security-Token")
  valid_593893 = validateParameter(valid_593893, JString, required = false,
                                 default = nil)
  if valid_593893 != nil:
    section.add "X-Amz-Security-Token", valid_593893
  var valid_593894 = header.getOrDefault("X-Amz-Algorithm")
  valid_593894 = validateParameter(valid_593894, JString, required = false,
                                 default = nil)
  if valid_593894 != nil:
    section.add "X-Amz-Algorithm", valid_593894
  var valid_593895 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593895 = validateParameter(valid_593895, JString, required = false,
                                 default = nil)
  if valid_593895 != nil:
    section.add "X-Amz-SignedHeaders", valid_593895
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_593896 = formData.getOrDefault("DBInstanceClass")
  valid_593896 = validateParameter(valid_593896, JString, required = false,
                                 default = nil)
  if valid_593896 != nil:
    section.add "DBInstanceClass", valid_593896
  var valid_593897 = formData.getOrDefault("MaxRecords")
  valid_593897 = validateParameter(valid_593897, JInt, required = false, default = nil)
  if valid_593897 != nil:
    section.add "MaxRecords", valid_593897
  var valid_593898 = formData.getOrDefault("EngineVersion")
  valid_593898 = validateParameter(valid_593898, JString, required = false,
                                 default = nil)
  if valid_593898 != nil:
    section.add "EngineVersion", valid_593898
  var valid_593899 = formData.getOrDefault("Marker")
  valid_593899 = validateParameter(valid_593899, JString, required = false,
                                 default = nil)
  if valid_593899 != nil:
    section.add "Marker", valid_593899
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_593900 = formData.getOrDefault("Engine")
  valid_593900 = validateParameter(valid_593900, JString, required = true,
                                 default = nil)
  if valid_593900 != nil:
    section.add "Engine", valid_593900
  var valid_593901 = formData.getOrDefault("Vpc")
  valid_593901 = validateParameter(valid_593901, JBool, required = false, default = nil)
  if valid_593901 != nil:
    section.add "Vpc", valid_593901
  var valid_593902 = formData.getOrDefault("LicenseModel")
  valid_593902 = validateParameter(valid_593902, JString, required = false,
                                 default = nil)
  if valid_593902 != nil:
    section.add "LicenseModel", valid_593902
  var valid_593903 = formData.getOrDefault("Filters")
  valid_593903 = validateParameter(valid_593903, JArray, required = false,
                                 default = nil)
  if valid_593903 != nil:
    section.add "Filters", valid_593903
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593904: Call_PostDescribeOrderableDBInstanceOptions_593884;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_593904.validator(path, query, header, formData, body)
  let scheme = call_593904.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593904.url(scheme.get, call_593904.host, call_593904.base,
                         call_593904.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593904, url, valid)

proc call*(call_593905: Call_PostDescribeOrderableDBInstanceOptions_593884;
          Engine: string; DBInstanceClass: string = ""; MaxRecords: int = 0;
          EngineVersion: string = ""; Marker: string = ""; Vpc: bool = false;
          Action: string = "DescribeOrderableDBInstanceOptions";
          LicenseModel: string = ""; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_593906 = newJObject()
  var formData_593907 = newJObject()
  add(formData_593907, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_593907, "MaxRecords", newJInt(MaxRecords))
  add(formData_593907, "EngineVersion", newJString(EngineVersion))
  add(formData_593907, "Marker", newJString(Marker))
  add(formData_593907, "Engine", newJString(Engine))
  add(formData_593907, "Vpc", newJBool(Vpc))
  add(query_593906, "Action", newJString(Action))
  add(formData_593907, "LicenseModel", newJString(LicenseModel))
  if Filters != nil:
    formData_593907.add "Filters", Filters
  add(query_593906, "Version", newJString(Version))
  result = call_593905.call(nil, query_593906, nil, formData_593907, nil)

var postDescribeOrderableDBInstanceOptions* = Call_PostDescribeOrderableDBInstanceOptions_593884(
    name: "postDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_PostDescribeOrderableDBInstanceOptions_593885, base: "/",
    url: url_PostDescribeOrderableDBInstanceOptions_593886,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOrderableDBInstanceOptions_593861 = ref object of OpenApiRestCall_590348
proc url_GetDescribeOrderableDBInstanceOptions_593863(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeOrderableDBInstanceOptions_593862(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_593864 = query.getOrDefault("Marker")
  valid_593864 = validateParameter(valid_593864, JString, required = false,
                                 default = nil)
  if valid_593864 != nil:
    section.add "Marker", valid_593864
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_593865 = query.getOrDefault("Engine")
  valid_593865 = validateParameter(valid_593865, JString, required = true,
                                 default = nil)
  if valid_593865 != nil:
    section.add "Engine", valid_593865
  var valid_593866 = query.getOrDefault("LicenseModel")
  valid_593866 = validateParameter(valid_593866, JString, required = false,
                                 default = nil)
  if valid_593866 != nil:
    section.add "LicenseModel", valid_593866
  var valid_593867 = query.getOrDefault("Vpc")
  valid_593867 = validateParameter(valid_593867, JBool, required = false, default = nil)
  if valid_593867 != nil:
    section.add "Vpc", valid_593867
  var valid_593868 = query.getOrDefault("EngineVersion")
  valid_593868 = validateParameter(valid_593868, JString, required = false,
                                 default = nil)
  if valid_593868 != nil:
    section.add "EngineVersion", valid_593868
  var valid_593869 = query.getOrDefault("Action")
  valid_593869 = validateParameter(valid_593869, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_593869 != nil:
    section.add "Action", valid_593869
  var valid_593870 = query.getOrDefault("Version")
  valid_593870 = validateParameter(valid_593870, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593870 != nil:
    section.add "Version", valid_593870
  var valid_593871 = query.getOrDefault("DBInstanceClass")
  valid_593871 = validateParameter(valid_593871, JString, required = false,
                                 default = nil)
  if valid_593871 != nil:
    section.add "DBInstanceClass", valid_593871
  var valid_593872 = query.getOrDefault("Filters")
  valid_593872 = validateParameter(valid_593872, JArray, required = false,
                                 default = nil)
  if valid_593872 != nil:
    section.add "Filters", valid_593872
  var valid_593873 = query.getOrDefault("MaxRecords")
  valid_593873 = validateParameter(valid_593873, JInt, required = false, default = nil)
  if valid_593873 != nil:
    section.add "MaxRecords", valid_593873
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593874 = header.getOrDefault("X-Amz-Signature")
  valid_593874 = validateParameter(valid_593874, JString, required = false,
                                 default = nil)
  if valid_593874 != nil:
    section.add "X-Amz-Signature", valid_593874
  var valid_593875 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593875 = validateParameter(valid_593875, JString, required = false,
                                 default = nil)
  if valid_593875 != nil:
    section.add "X-Amz-Content-Sha256", valid_593875
  var valid_593876 = header.getOrDefault("X-Amz-Date")
  valid_593876 = validateParameter(valid_593876, JString, required = false,
                                 default = nil)
  if valid_593876 != nil:
    section.add "X-Amz-Date", valid_593876
  var valid_593877 = header.getOrDefault("X-Amz-Credential")
  valid_593877 = validateParameter(valid_593877, JString, required = false,
                                 default = nil)
  if valid_593877 != nil:
    section.add "X-Amz-Credential", valid_593877
  var valid_593878 = header.getOrDefault("X-Amz-Security-Token")
  valid_593878 = validateParameter(valid_593878, JString, required = false,
                                 default = nil)
  if valid_593878 != nil:
    section.add "X-Amz-Security-Token", valid_593878
  var valid_593879 = header.getOrDefault("X-Amz-Algorithm")
  valid_593879 = validateParameter(valid_593879, JString, required = false,
                                 default = nil)
  if valid_593879 != nil:
    section.add "X-Amz-Algorithm", valid_593879
  var valid_593880 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593880 = validateParameter(valid_593880, JString, required = false,
                                 default = nil)
  if valid_593880 != nil:
    section.add "X-Amz-SignedHeaders", valid_593880
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593881: Call_GetDescribeOrderableDBInstanceOptions_593861;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_593881.validator(path, query, header, formData, body)
  let scheme = call_593881.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593881.url(scheme.get, call_593881.host, call_593881.base,
                         call_593881.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593881, url, valid)

proc call*(call_593882: Call_GetDescribeOrderableDBInstanceOptions_593861;
          Engine: string; Marker: string = ""; LicenseModel: string = "";
          Vpc: bool = false; EngineVersion: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_593883 = newJObject()
  add(query_593883, "Marker", newJString(Marker))
  add(query_593883, "Engine", newJString(Engine))
  add(query_593883, "LicenseModel", newJString(LicenseModel))
  add(query_593883, "Vpc", newJBool(Vpc))
  add(query_593883, "EngineVersion", newJString(EngineVersion))
  add(query_593883, "Action", newJString(Action))
  add(query_593883, "Version", newJString(Version))
  add(query_593883, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_593883.add "Filters", Filters
  add(query_593883, "MaxRecords", newJInt(MaxRecords))
  result = call_593882.call(nil, query_593883, nil, nil, nil)

var getDescribeOrderableDBInstanceOptions* = Call_GetDescribeOrderableDBInstanceOptions_593861(
    name: "getDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_GetDescribeOrderableDBInstanceOptions_593862, base: "/",
    url: url_GetDescribeOrderableDBInstanceOptions_593863,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePendingMaintenanceActions_593927 = ref object of OpenApiRestCall_590348
proc url_PostDescribePendingMaintenanceActions_593929(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribePendingMaintenanceActions_593928(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593930 = query.getOrDefault("Action")
  valid_593930 = validateParameter(valid_593930, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_593930 != nil:
    section.add "Action", valid_593930
  var valid_593931 = query.getOrDefault("Version")
  valid_593931 = validateParameter(valid_593931, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593931 != nil:
    section.add "Version", valid_593931
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593932 = header.getOrDefault("X-Amz-Signature")
  valid_593932 = validateParameter(valid_593932, JString, required = false,
                                 default = nil)
  if valid_593932 != nil:
    section.add "X-Amz-Signature", valid_593932
  var valid_593933 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593933 = validateParameter(valid_593933, JString, required = false,
                                 default = nil)
  if valid_593933 != nil:
    section.add "X-Amz-Content-Sha256", valid_593933
  var valid_593934 = header.getOrDefault("X-Amz-Date")
  valid_593934 = validateParameter(valid_593934, JString, required = false,
                                 default = nil)
  if valid_593934 != nil:
    section.add "X-Amz-Date", valid_593934
  var valid_593935 = header.getOrDefault("X-Amz-Credential")
  valid_593935 = validateParameter(valid_593935, JString, required = false,
                                 default = nil)
  if valid_593935 != nil:
    section.add "X-Amz-Credential", valid_593935
  var valid_593936 = header.getOrDefault("X-Amz-Security-Token")
  valid_593936 = validateParameter(valid_593936, JString, required = false,
                                 default = nil)
  if valid_593936 != nil:
    section.add "X-Amz-Security-Token", valid_593936
  var valid_593937 = header.getOrDefault("X-Amz-Algorithm")
  valid_593937 = validateParameter(valid_593937, JString, required = false,
                                 default = nil)
  if valid_593937 != nil:
    section.add "X-Amz-Algorithm", valid_593937
  var valid_593938 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593938 = validateParameter(valid_593938, JString, required = false,
                                 default = nil)
  if valid_593938 != nil:
    section.add "X-Amz-SignedHeaders", valid_593938
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_593939 = formData.getOrDefault("MaxRecords")
  valid_593939 = validateParameter(valid_593939, JInt, required = false, default = nil)
  if valid_593939 != nil:
    section.add "MaxRecords", valid_593939
  var valid_593940 = formData.getOrDefault("Marker")
  valid_593940 = validateParameter(valid_593940, JString, required = false,
                                 default = nil)
  if valid_593940 != nil:
    section.add "Marker", valid_593940
  var valid_593941 = formData.getOrDefault("ResourceIdentifier")
  valid_593941 = validateParameter(valid_593941, JString, required = false,
                                 default = nil)
  if valid_593941 != nil:
    section.add "ResourceIdentifier", valid_593941
  var valid_593942 = formData.getOrDefault("Filters")
  valid_593942 = validateParameter(valid_593942, JArray, required = false,
                                 default = nil)
  if valid_593942 != nil:
    section.add "Filters", valid_593942
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593943: Call_PostDescribePendingMaintenanceActions_593927;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_593943.validator(path, query, header, formData, body)
  let scheme = call_593943.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593943.url(scheme.get, call_593943.host, call_593943.base,
                         call_593943.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593943, url, valid)

proc call*(call_593944: Call_PostDescribePendingMaintenanceActions_593927;
          MaxRecords: int = 0; Marker: string = ""; ResourceIdentifier: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_593945 = newJObject()
  var formData_593946 = newJObject()
  add(formData_593946, "MaxRecords", newJInt(MaxRecords))
  add(formData_593946, "Marker", newJString(Marker))
  add(formData_593946, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_593945, "Action", newJString(Action))
  if Filters != nil:
    formData_593946.add "Filters", Filters
  add(query_593945, "Version", newJString(Version))
  result = call_593944.call(nil, query_593945, nil, formData_593946, nil)

var postDescribePendingMaintenanceActions* = Call_PostDescribePendingMaintenanceActions_593927(
    name: "postDescribePendingMaintenanceActions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_PostDescribePendingMaintenanceActions_593928, base: "/",
    url: url_PostDescribePendingMaintenanceActions_593929,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePendingMaintenanceActions_593908 = ref object of OpenApiRestCall_590348
proc url_GetDescribePendingMaintenanceActions_593910(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribePendingMaintenanceActions_593909(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_593911 = query.getOrDefault("ResourceIdentifier")
  valid_593911 = validateParameter(valid_593911, JString, required = false,
                                 default = nil)
  if valid_593911 != nil:
    section.add "ResourceIdentifier", valid_593911
  var valid_593912 = query.getOrDefault("Marker")
  valid_593912 = validateParameter(valid_593912, JString, required = false,
                                 default = nil)
  if valid_593912 != nil:
    section.add "Marker", valid_593912
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593913 = query.getOrDefault("Action")
  valid_593913 = validateParameter(valid_593913, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_593913 != nil:
    section.add "Action", valid_593913
  var valid_593914 = query.getOrDefault("Version")
  valid_593914 = validateParameter(valid_593914, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593914 != nil:
    section.add "Version", valid_593914
  var valid_593915 = query.getOrDefault("Filters")
  valid_593915 = validateParameter(valid_593915, JArray, required = false,
                                 default = nil)
  if valid_593915 != nil:
    section.add "Filters", valid_593915
  var valid_593916 = query.getOrDefault("MaxRecords")
  valid_593916 = validateParameter(valid_593916, JInt, required = false, default = nil)
  if valid_593916 != nil:
    section.add "MaxRecords", valid_593916
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593917 = header.getOrDefault("X-Amz-Signature")
  valid_593917 = validateParameter(valid_593917, JString, required = false,
                                 default = nil)
  if valid_593917 != nil:
    section.add "X-Amz-Signature", valid_593917
  var valid_593918 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593918 = validateParameter(valid_593918, JString, required = false,
                                 default = nil)
  if valid_593918 != nil:
    section.add "X-Amz-Content-Sha256", valid_593918
  var valid_593919 = header.getOrDefault("X-Amz-Date")
  valid_593919 = validateParameter(valid_593919, JString, required = false,
                                 default = nil)
  if valid_593919 != nil:
    section.add "X-Amz-Date", valid_593919
  var valid_593920 = header.getOrDefault("X-Amz-Credential")
  valid_593920 = validateParameter(valid_593920, JString, required = false,
                                 default = nil)
  if valid_593920 != nil:
    section.add "X-Amz-Credential", valid_593920
  var valid_593921 = header.getOrDefault("X-Amz-Security-Token")
  valid_593921 = validateParameter(valid_593921, JString, required = false,
                                 default = nil)
  if valid_593921 != nil:
    section.add "X-Amz-Security-Token", valid_593921
  var valid_593922 = header.getOrDefault("X-Amz-Algorithm")
  valid_593922 = validateParameter(valid_593922, JString, required = false,
                                 default = nil)
  if valid_593922 != nil:
    section.add "X-Amz-Algorithm", valid_593922
  var valid_593923 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593923 = validateParameter(valid_593923, JString, required = false,
                                 default = nil)
  if valid_593923 != nil:
    section.add "X-Amz-SignedHeaders", valid_593923
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593924: Call_GetDescribePendingMaintenanceActions_593908;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_593924.validator(path, query, header, formData, body)
  let scheme = call_593924.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593924.url(scheme.get, call_593924.host, call_593924.base,
                         call_593924.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593924, url, valid)

proc call*(call_593925: Call_GetDescribePendingMaintenanceActions_593908;
          ResourceIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_593926 = newJObject()
  add(query_593926, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_593926, "Marker", newJString(Marker))
  add(query_593926, "Action", newJString(Action))
  add(query_593926, "Version", newJString(Version))
  if Filters != nil:
    query_593926.add "Filters", Filters
  add(query_593926, "MaxRecords", newJInt(MaxRecords))
  result = call_593925.call(nil, query_593926, nil, nil, nil)

var getDescribePendingMaintenanceActions* = Call_GetDescribePendingMaintenanceActions_593908(
    name: "getDescribePendingMaintenanceActions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_GetDescribePendingMaintenanceActions_593909, base: "/",
    url: url_GetDescribePendingMaintenanceActions_593910,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstances_593973 = ref object of OpenApiRestCall_590348
proc url_PostDescribeReservedDBInstances_593975(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReservedDBInstances_593974(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593976 = query.getOrDefault("Action")
  valid_593976 = validateParameter(valid_593976, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_593976 != nil:
    section.add "Action", valid_593976
  var valid_593977 = query.getOrDefault("Version")
  valid_593977 = validateParameter(valid_593977, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593977 != nil:
    section.add "Version", valid_593977
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593978 = header.getOrDefault("X-Amz-Signature")
  valid_593978 = validateParameter(valid_593978, JString, required = false,
                                 default = nil)
  if valid_593978 != nil:
    section.add "X-Amz-Signature", valid_593978
  var valid_593979 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593979 = validateParameter(valid_593979, JString, required = false,
                                 default = nil)
  if valid_593979 != nil:
    section.add "X-Amz-Content-Sha256", valid_593979
  var valid_593980 = header.getOrDefault("X-Amz-Date")
  valid_593980 = validateParameter(valid_593980, JString, required = false,
                                 default = nil)
  if valid_593980 != nil:
    section.add "X-Amz-Date", valid_593980
  var valid_593981 = header.getOrDefault("X-Amz-Credential")
  valid_593981 = validateParameter(valid_593981, JString, required = false,
                                 default = nil)
  if valid_593981 != nil:
    section.add "X-Amz-Credential", valid_593981
  var valid_593982 = header.getOrDefault("X-Amz-Security-Token")
  valid_593982 = validateParameter(valid_593982, JString, required = false,
                                 default = nil)
  if valid_593982 != nil:
    section.add "X-Amz-Security-Token", valid_593982
  var valid_593983 = header.getOrDefault("X-Amz-Algorithm")
  valid_593983 = validateParameter(valid_593983, JString, required = false,
                                 default = nil)
  if valid_593983 != nil:
    section.add "X-Amz-Algorithm", valid_593983
  var valid_593984 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593984 = validateParameter(valid_593984, JString, required = false,
                                 default = nil)
  if valid_593984 != nil:
    section.add "X-Amz-SignedHeaders", valid_593984
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   LeaseId: JString
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  section = newJObject()
  var valid_593985 = formData.getOrDefault("DBInstanceClass")
  valid_593985 = validateParameter(valid_593985, JString, required = false,
                                 default = nil)
  if valid_593985 != nil:
    section.add "DBInstanceClass", valid_593985
  var valid_593986 = formData.getOrDefault("MultiAZ")
  valid_593986 = validateParameter(valid_593986, JBool, required = false, default = nil)
  if valid_593986 != nil:
    section.add "MultiAZ", valid_593986
  var valid_593987 = formData.getOrDefault("MaxRecords")
  valid_593987 = validateParameter(valid_593987, JInt, required = false, default = nil)
  if valid_593987 != nil:
    section.add "MaxRecords", valid_593987
  var valid_593988 = formData.getOrDefault("LeaseId")
  valid_593988 = validateParameter(valid_593988, JString, required = false,
                                 default = nil)
  if valid_593988 != nil:
    section.add "LeaseId", valid_593988
  var valid_593989 = formData.getOrDefault("ReservedDBInstanceId")
  valid_593989 = validateParameter(valid_593989, JString, required = false,
                                 default = nil)
  if valid_593989 != nil:
    section.add "ReservedDBInstanceId", valid_593989
  var valid_593990 = formData.getOrDefault("Marker")
  valid_593990 = validateParameter(valid_593990, JString, required = false,
                                 default = nil)
  if valid_593990 != nil:
    section.add "Marker", valid_593990
  var valid_593991 = formData.getOrDefault("Duration")
  valid_593991 = validateParameter(valid_593991, JString, required = false,
                                 default = nil)
  if valid_593991 != nil:
    section.add "Duration", valid_593991
  var valid_593992 = formData.getOrDefault("OfferingType")
  valid_593992 = validateParameter(valid_593992, JString, required = false,
                                 default = nil)
  if valid_593992 != nil:
    section.add "OfferingType", valid_593992
  var valid_593993 = formData.getOrDefault("ProductDescription")
  valid_593993 = validateParameter(valid_593993, JString, required = false,
                                 default = nil)
  if valid_593993 != nil:
    section.add "ProductDescription", valid_593993
  var valid_593994 = formData.getOrDefault("Filters")
  valid_593994 = validateParameter(valid_593994, JArray, required = false,
                                 default = nil)
  if valid_593994 != nil:
    section.add "Filters", valid_593994
  var valid_593995 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_593995 = validateParameter(valid_593995, JString, required = false,
                                 default = nil)
  if valid_593995 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_593995
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593996: Call_PostDescribeReservedDBInstances_593973;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_593996.validator(path, query, header, formData, body)
  let scheme = call_593996.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593996.url(scheme.get, call_593996.host, call_593996.base,
                         call_593996.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593996, url, valid)

proc call*(call_593997: Call_PostDescribeReservedDBInstances_593973;
          DBInstanceClass: string = ""; MultiAZ: bool = false; MaxRecords: int = 0;
          LeaseId: string = ""; ReservedDBInstanceId: string = ""; Marker: string = "";
          Duration: string = ""; OfferingType: string = "";
          ProductDescription: string = "";
          Action: string = "DescribeReservedDBInstances"; Filters: JsonNode = nil;
          ReservedDBInstancesOfferingId: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   LeaseId: string
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: string (required)
  var query_593998 = newJObject()
  var formData_593999 = newJObject()
  add(formData_593999, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_593999, "MultiAZ", newJBool(MultiAZ))
  add(formData_593999, "MaxRecords", newJInt(MaxRecords))
  add(formData_593999, "LeaseId", newJString(LeaseId))
  add(formData_593999, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(formData_593999, "Marker", newJString(Marker))
  add(formData_593999, "Duration", newJString(Duration))
  add(formData_593999, "OfferingType", newJString(OfferingType))
  add(formData_593999, "ProductDescription", newJString(ProductDescription))
  add(query_593998, "Action", newJString(Action))
  if Filters != nil:
    formData_593999.add "Filters", Filters
  add(formData_593999, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_593998, "Version", newJString(Version))
  result = call_593997.call(nil, query_593998, nil, formData_593999, nil)

var postDescribeReservedDBInstances* = Call_PostDescribeReservedDBInstances_593973(
    name: "postDescribeReservedDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_PostDescribeReservedDBInstances_593974, base: "/",
    url: url_PostDescribeReservedDBInstances_593975,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstances_593947 = ref object of OpenApiRestCall_590348
proc url_GetDescribeReservedDBInstances_593949(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReservedDBInstances_593948(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   LeaseId: JString
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_593950 = query.getOrDefault("Marker")
  valid_593950 = validateParameter(valid_593950, JString, required = false,
                                 default = nil)
  if valid_593950 != nil:
    section.add "Marker", valid_593950
  var valid_593951 = query.getOrDefault("ProductDescription")
  valid_593951 = validateParameter(valid_593951, JString, required = false,
                                 default = nil)
  if valid_593951 != nil:
    section.add "ProductDescription", valid_593951
  var valid_593952 = query.getOrDefault("OfferingType")
  valid_593952 = validateParameter(valid_593952, JString, required = false,
                                 default = nil)
  if valid_593952 != nil:
    section.add "OfferingType", valid_593952
  var valid_593953 = query.getOrDefault("ReservedDBInstanceId")
  valid_593953 = validateParameter(valid_593953, JString, required = false,
                                 default = nil)
  if valid_593953 != nil:
    section.add "ReservedDBInstanceId", valid_593953
  var valid_593954 = query.getOrDefault("LeaseId")
  valid_593954 = validateParameter(valid_593954, JString, required = false,
                                 default = nil)
  if valid_593954 != nil:
    section.add "LeaseId", valid_593954
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593955 = query.getOrDefault("Action")
  valid_593955 = validateParameter(valid_593955, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_593955 != nil:
    section.add "Action", valid_593955
  var valid_593956 = query.getOrDefault("MultiAZ")
  valid_593956 = validateParameter(valid_593956, JBool, required = false, default = nil)
  if valid_593956 != nil:
    section.add "MultiAZ", valid_593956
  var valid_593957 = query.getOrDefault("Duration")
  valid_593957 = validateParameter(valid_593957, JString, required = false,
                                 default = nil)
  if valid_593957 != nil:
    section.add "Duration", valid_593957
  var valid_593958 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_593958 = validateParameter(valid_593958, JString, required = false,
                                 default = nil)
  if valid_593958 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_593958
  var valid_593959 = query.getOrDefault("Version")
  valid_593959 = validateParameter(valid_593959, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_593959 != nil:
    section.add "Version", valid_593959
  var valid_593960 = query.getOrDefault("DBInstanceClass")
  valid_593960 = validateParameter(valid_593960, JString, required = false,
                                 default = nil)
  if valid_593960 != nil:
    section.add "DBInstanceClass", valid_593960
  var valid_593961 = query.getOrDefault("Filters")
  valid_593961 = validateParameter(valid_593961, JArray, required = false,
                                 default = nil)
  if valid_593961 != nil:
    section.add "Filters", valid_593961
  var valid_593962 = query.getOrDefault("MaxRecords")
  valid_593962 = validateParameter(valid_593962, JInt, required = false, default = nil)
  if valid_593962 != nil:
    section.add "MaxRecords", valid_593962
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593963 = header.getOrDefault("X-Amz-Signature")
  valid_593963 = validateParameter(valid_593963, JString, required = false,
                                 default = nil)
  if valid_593963 != nil:
    section.add "X-Amz-Signature", valid_593963
  var valid_593964 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593964 = validateParameter(valid_593964, JString, required = false,
                                 default = nil)
  if valid_593964 != nil:
    section.add "X-Amz-Content-Sha256", valid_593964
  var valid_593965 = header.getOrDefault("X-Amz-Date")
  valid_593965 = validateParameter(valid_593965, JString, required = false,
                                 default = nil)
  if valid_593965 != nil:
    section.add "X-Amz-Date", valid_593965
  var valid_593966 = header.getOrDefault("X-Amz-Credential")
  valid_593966 = validateParameter(valid_593966, JString, required = false,
                                 default = nil)
  if valid_593966 != nil:
    section.add "X-Amz-Credential", valid_593966
  var valid_593967 = header.getOrDefault("X-Amz-Security-Token")
  valid_593967 = validateParameter(valid_593967, JString, required = false,
                                 default = nil)
  if valid_593967 != nil:
    section.add "X-Amz-Security-Token", valid_593967
  var valid_593968 = header.getOrDefault("X-Amz-Algorithm")
  valid_593968 = validateParameter(valid_593968, JString, required = false,
                                 default = nil)
  if valid_593968 != nil:
    section.add "X-Amz-Algorithm", valid_593968
  var valid_593969 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593969 = validateParameter(valid_593969, JString, required = false,
                                 default = nil)
  if valid_593969 != nil:
    section.add "X-Amz-SignedHeaders", valid_593969
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593970: Call_GetDescribeReservedDBInstances_593947; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_593970.validator(path, query, header, formData, body)
  let scheme = call_593970.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593970.url(scheme.get, call_593970.host, call_593970.base,
                         call_593970.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593970, url, valid)

proc call*(call_593971: Call_GetDescribeReservedDBInstances_593947;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = ""; ReservedDBInstanceId: string = "";
          LeaseId: string = ""; Action: string = "DescribeReservedDBInstances";
          MultiAZ: bool = false; Duration: string = "";
          ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   LeaseId: string
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_593972 = newJObject()
  add(query_593972, "Marker", newJString(Marker))
  add(query_593972, "ProductDescription", newJString(ProductDescription))
  add(query_593972, "OfferingType", newJString(OfferingType))
  add(query_593972, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_593972, "LeaseId", newJString(LeaseId))
  add(query_593972, "Action", newJString(Action))
  add(query_593972, "MultiAZ", newJBool(MultiAZ))
  add(query_593972, "Duration", newJString(Duration))
  add(query_593972, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_593972, "Version", newJString(Version))
  add(query_593972, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_593972.add "Filters", Filters
  add(query_593972, "MaxRecords", newJInt(MaxRecords))
  result = call_593971.call(nil, query_593972, nil, nil, nil)

var getDescribeReservedDBInstances* = Call_GetDescribeReservedDBInstances_593947(
    name: "getDescribeReservedDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_GetDescribeReservedDBInstances_593948, base: "/",
    url: url_GetDescribeReservedDBInstances_593949,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstancesOfferings_594024 = ref object of OpenApiRestCall_590348
proc url_PostDescribeReservedDBInstancesOfferings_594026(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReservedDBInstancesOfferings_594025(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594027 = query.getOrDefault("Action")
  valid_594027 = validateParameter(valid_594027, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_594027 != nil:
    section.add "Action", valid_594027
  var valid_594028 = query.getOrDefault("Version")
  valid_594028 = validateParameter(valid_594028, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594028 != nil:
    section.add "Version", valid_594028
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594029 = header.getOrDefault("X-Amz-Signature")
  valid_594029 = validateParameter(valid_594029, JString, required = false,
                                 default = nil)
  if valid_594029 != nil:
    section.add "X-Amz-Signature", valid_594029
  var valid_594030 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594030 = validateParameter(valid_594030, JString, required = false,
                                 default = nil)
  if valid_594030 != nil:
    section.add "X-Amz-Content-Sha256", valid_594030
  var valid_594031 = header.getOrDefault("X-Amz-Date")
  valid_594031 = validateParameter(valid_594031, JString, required = false,
                                 default = nil)
  if valid_594031 != nil:
    section.add "X-Amz-Date", valid_594031
  var valid_594032 = header.getOrDefault("X-Amz-Credential")
  valid_594032 = validateParameter(valid_594032, JString, required = false,
                                 default = nil)
  if valid_594032 != nil:
    section.add "X-Amz-Credential", valid_594032
  var valid_594033 = header.getOrDefault("X-Amz-Security-Token")
  valid_594033 = validateParameter(valid_594033, JString, required = false,
                                 default = nil)
  if valid_594033 != nil:
    section.add "X-Amz-Security-Token", valid_594033
  var valid_594034 = header.getOrDefault("X-Amz-Algorithm")
  valid_594034 = validateParameter(valid_594034, JString, required = false,
                                 default = nil)
  if valid_594034 != nil:
    section.add "X-Amz-Algorithm", valid_594034
  var valid_594035 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594035 = validateParameter(valid_594035, JString, required = false,
                                 default = nil)
  if valid_594035 != nil:
    section.add "X-Amz-SignedHeaders", valid_594035
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that you can retrieve the reamaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_594036 = formData.getOrDefault("DBInstanceClass")
  valid_594036 = validateParameter(valid_594036, JString, required = false,
                                 default = nil)
  if valid_594036 != nil:
    section.add "DBInstanceClass", valid_594036
  var valid_594037 = formData.getOrDefault("MultiAZ")
  valid_594037 = validateParameter(valid_594037, JBool, required = false, default = nil)
  if valid_594037 != nil:
    section.add "MultiAZ", valid_594037
  var valid_594038 = formData.getOrDefault("MaxRecords")
  valid_594038 = validateParameter(valid_594038, JInt, required = false, default = nil)
  if valid_594038 != nil:
    section.add "MaxRecords", valid_594038
  var valid_594039 = formData.getOrDefault("Marker")
  valid_594039 = validateParameter(valid_594039, JString, required = false,
                                 default = nil)
  if valid_594039 != nil:
    section.add "Marker", valid_594039
  var valid_594040 = formData.getOrDefault("Duration")
  valid_594040 = validateParameter(valid_594040, JString, required = false,
                                 default = nil)
  if valid_594040 != nil:
    section.add "Duration", valid_594040
  var valid_594041 = formData.getOrDefault("OfferingType")
  valid_594041 = validateParameter(valid_594041, JString, required = false,
                                 default = nil)
  if valid_594041 != nil:
    section.add "OfferingType", valid_594041
  var valid_594042 = formData.getOrDefault("ProductDescription")
  valid_594042 = validateParameter(valid_594042, JString, required = false,
                                 default = nil)
  if valid_594042 != nil:
    section.add "ProductDescription", valid_594042
  var valid_594043 = formData.getOrDefault("Filters")
  valid_594043 = validateParameter(valid_594043, JArray, required = false,
                                 default = nil)
  if valid_594043 != nil:
    section.add "Filters", valid_594043
  var valid_594044 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_594044 = validateParameter(valid_594044, JString, required = false,
                                 default = nil)
  if valid_594044 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_594044
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594045: Call_PostDescribeReservedDBInstancesOfferings_594024;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_594045.validator(path, query, header, formData, body)
  let scheme = call_594045.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594045.url(scheme.get, call_594045.host, call_594045.base,
                         call_594045.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594045, url, valid)

proc call*(call_594046: Call_PostDescribeReservedDBInstancesOfferings_594024;
          DBInstanceClass: string = ""; MultiAZ: bool = false; MaxRecords: int = 0;
          Marker: string = ""; Duration: string = ""; OfferingType: string = "";
          ProductDescription: string = "";
          Action: string = "DescribeReservedDBInstancesOfferings";
          Filters: JsonNode = nil; ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that you can retrieve the reamaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  var query_594047 = newJObject()
  var formData_594048 = newJObject()
  add(formData_594048, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_594048, "MultiAZ", newJBool(MultiAZ))
  add(formData_594048, "MaxRecords", newJInt(MaxRecords))
  add(formData_594048, "Marker", newJString(Marker))
  add(formData_594048, "Duration", newJString(Duration))
  add(formData_594048, "OfferingType", newJString(OfferingType))
  add(formData_594048, "ProductDescription", newJString(ProductDescription))
  add(query_594047, "Action", newJString(Action))
  if Filters != nil:
    formData_594048.add "Filters", Filters
  add(formData_594048, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_594047, "Version", newJString(Version))
  result = call_594046.call(nil, query_594047, nil, formData_594048, nil)

var postDescribeReservedDBInstancesOfferings* = Call_PostDescribeReservedDBInstancesOfferings_594024(
    name: "postDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_PostDescribeReservedDBInstancesOfferings_594025,
    base: "/", url: url_PostDescribeReservedDBInstancesOfferings_594026,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstancesOfferings_594000 = ref object of OpenApiRestCall_590348
proc url_GetDescribeReservedDBInstancesOfferings_594002(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReservedDBInstancesOfferings_594001(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that you can retrieve the reamaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_594003 = query.getOrDefault("Marker")
  valid_594003 = validateParameter(valid_594003, JString, required = false,
                                 default = nil)
  if valid_594003 != nil:
    section.add "Marker", valid_594003
  var valid_594004 = query.getOrDefault("ProductDescription")
  valid_594004 = validateParameter(valid_594004, JString, required = false,
                                 default = nil)
  if valid_594004 != nil:
    section.add "ProductDescription", valid_594004
  var valid_594005 = query.getOrDefault("OfferingType")
  valid_594005 = validateParameter(valid_594005, JString, required = false,
                                 default = nil)
  if valid_594005 != nil:
    section.add "OfferingType", valid_594005
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594006 = query.getOrDefault("Action")
  valid_594006 = validateParameter(valid_594006, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_594006 != nil:
    section.add "Action", valid_594006
  var valid_594007 = query.getOrDefault("MultiAZ")
  valid_594007 = validateParameter(valid_594007, JBool, required = false, default = nil)
  if valid_594007 != nil:
    section.add "MultiAZ", valid_594007
  var valid_594008 = query.getOrDefault("Duration")
  valid_594008 = validateParameter(valid_594008, JString, required = false,
                                 default = nil)
  if valid_594008 != nil:
    section.add "Duration", valid_594008
  var valid_594009 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_594009 = validateParameter(valid_594009, JString, required = false,
                                 default = nil)
  if valid_594009 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_594009
  var valid_594010 = query.getOrDefault("Version")
  valid_594010 = validateParameter(valid_594010, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594010 != nil:
    section.add "Version", valid_594010
  var valid_594011 = query.getOrDefault("DBInstanceClass")
  valid_594011 = validateParameter(valid_594011, JString, required = false,
                                 default = nil)
  if valid_594011 != nil:
    section.add "DBInstanceClass", valid_594011
  var valid_594012 = query.getOrDefault("Filters")
  valid_594012 = validateParameter(valid_594012, JArray, required = false,
                                 default = nil)
  if valid_594012 != nil:
    section.add "Filters", valid_594012
  var valid_594013 = query.getOrDefault("MaxRecords")
  valid_594013 = validateParameter(valid_594013, JInt, required = false, default = nil)
  if valid_594013 != nil:
    section.add "MaxRecords", valid_594013
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594014 = header.getOrDefault("X-Amz-Signature")
  valid_594014 = validateParameter(valid_594014, JString, required = false,
                                 default = nil)
  if valid_594014 != nil:
    section.add "X-Amz-Signature", valid_594014
  var valid_594015 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594015 = validateParameter(valid_594015, JString, required = false,
                                 default = nil)
  if valid_594015 != nil:
    section.add "X-Amz-Content-Sha256", valid_594015
  var valid_594016 = header.getOrDefault("X-Amz-Date")
  valid_594016 = validateParameter(valid_594016, JString, required = false,
                                 default = nil)
  if valid_594016 != nil:
    section.add "X-Amz-Date", valid_594016
  var valid_594017 = header.getOrDefault("X-Amz-Credential")
  valid_594017 = validateParameter(valid_594017, JString, required = false,
                                 default = nil)
  if valid_594017 != nil:
    section.add "X-Amz-Credential", valid_594017
  var valid_594018 = header.getOrDefault("X-Amz-Security-Token")
  valid_594018 = validateParameter(valid_594018, JString, required = false,
                                 default = nil)
  if valid_594018 != nil:
    section.add "X-Amz-Security-Token", valid_594018
  var valid_594019 = header.getOrDefault("X-Amz-Algorithm")
  valid_594019 = validateParameter(valid_594019, JString, required = false,
                                 default = nil)
  if valid_594019 != nil:
    section.add "X-Amz-Algorithm", valid_594019
  var valid_594020 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594020 = validateParameter(valid_594020, JString, required = false,
                                 default = nil)
  if valid_594020 != nil:
    section.add "X-Amz-SignedHeaders", valid_594020
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594021: Call_GetDescribeReservedDBInstancesOfferings_594000;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_594021.validator(path, query, header, formData, body)
  let scheme = call_594021.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594021.url(scheme.get, call_594021.host, call_594021.base,
                         call_594021.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594021, url, valid)

proc call*(call_594022: Call_GetDescribeReservedDBInstancesOfferings_594000;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = "";
          Action: string = "DescribeReservedDBInstancesOfferings";
          MultiAZ: bool = false; Duration: string = "";
          ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that you can retrieve the reamaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_594023 = newJObject()
  add(query_594023, "Marker", newJString(Marker))
  add(query_594023, "ProductDescription", newJString(ProductDescription))
  add(query_594023, "OfferingType", newJString(OfferingType))
  add(query_594023, "Action", newJString(Action))
  add(query_594023, "MultiAZ", newJBool(MultiAZ))
  add(query_594023, "Duration", newJString(Duration))
  add(query_594023, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_594023, "Version", newJString(Version))
  add(query_594023, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_594023.add "Filters", Filters
  add(query_594023, "MaxRecords", newJInt(MaxRecords))
  result = call_594022.call(nil, query_594023, nil, nil, nil)

var getDescribeReservedDBInstancesOfferings* = Call_GetDescribeReservedDBInstancesOfferings_594000(
    name: "getDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_GetDescribeReservedDBInstancesOfferings_594001, base: "/",
    url: url_GetDescribeReservedDBInstancesOfferings_594002,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSourceRegions_594068 = ref object of OpenApiRestCall_590348
proc url_PostDescribeSourceRegions_594070(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeSourceRegions_594069(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594071 = query.getOrDefault("Action")
  valid_594071 = validateParameter(valid_594071, JString, required = true,
                                 default = newJString("DescribeSourceRegions"))
  if valid_594071 != nil:
    section.add "Action", valid_594071
  var valid_594072 = query.getOrDefault("Version")
  valid_594072 = validateParameter(valid_594072, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594072 != nil:
    section.add "Version", valid_594072
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594073 = header.getOrDefault("X-Amz-Signature")
  valid_594073 = validateParameter(valid_594073, JString, required = false,
                                 default = nil)
  if valid_594073 != nil:
    section.add "X-Amz-Signature", valid_594073
  var valid_594074 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594074 = validateParameter(valid_594074, JString, required = false,
                                 default = nil)
  if valid_594074 != nil:
    section.add "X-Amz-Content-Sha256", valid_594074
  var valid_594075 = header.getOrDefault("X-Amz-Date")
  valid_594075 = validateParameter(valid_594075, JString, required = false,
                                 default = nil)
  if valid_594075 != nil:
    section.add "X-Amz-Date", valid_594075
  var valid_594076 = header.getOrDefault("X-Amz-Credential")
  valid_594076 = validateParameter(valid_594076, JString, required = false,
                                 default = nil)
  if valid_594076 != nil:
    section.add "X-Amz-Credential", valid_594076
  var valid_594077 = header.getOrDefault("X-Amz-Security-Token")
  valid_594077 = validateParameter(valid_594077, JString, required = false,
                                 default = nil)
  if valid_594077 != nil:
    section.add "X-Amz-Security-Token", valid_594077
  var valid_594078 = header.getOrDefault("X-Amz-Algorithm")
  valid_594078 = validateParameter(valid_594078, JString, required = false,
                                 default = nil)
  if valid_594078 != nil:
    section.add "X-Amz-Algorithm", valid_594078
  var valid_594079 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594079 = validateParameter(valid_594079, JString, required = false,
                                 default = nil)
  if valid_594079 != nil:
    section.add "X-Amz-SignedHeaders", valid_594079
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  section = newJObject()
  var valid_594080 = formData.getOrDefault("MaxRecords")
  valid_594080 = validateParameter(valid_594080, JInt, required = false, default = nil)
  if valid_594080 != nil:
    section.add "MaxRecords", valid_594080
  var valid_594081 = formData.getOrDefault("Marker")
  valid_594081 = validateParameter(valid_594081, JString, required = false,
                                 default = nil)
  if valid_594081 != nil:
    section.add "Marker", valid_594081
  var valid_594082 = formData.getOrDefault("Filters")
  valid_594082 = validateParameter(valid_594082, JArray, required = false,
                                 default = nil)
  if valid_594082 != nil:
    section.add "Filters", valid_594082
  var valid_594083 = formData.getOrDefault("RegionName")
  valid_594083 = validateParameter(valid_594083, JString, required = false,
                                 default = nil)
  if valid_594083 != nil:
    section.add "RegionName", valid_594083
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594084: Call_PostDescribeSourceRegions_594068; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_594084.validator(path, query, header, formData, body)
  let scheme = call_594084.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594084.url(scheme.get, call_594084.host, call_594084.base,
                         call_594084.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594084, url, valid)

proc call*(call_594085: Call_PostDescribeSourceRegions_594068; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeSourceRegions";
          Filters: JsonNode = nil; Version: string = "2014-10-31";
          RegionName: string = ""): Recallable =
  ## postDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  var query_594086 = newJObject()
  var formData_594087 = newJObject()
  add(formData_594087, "MaxRecords", newJInt(MaxRecords))
  add(formData_594087, "Marker", newJString(Marker))
  add(query_594086, "Action", newJString(Action))
  if Filters != nil:
    formData_594087.add "Filters", Filters
  add(query_594086, "Version", newJString(Version))
  add(formData_594087, "RegionName", newJString(RegionName))
  result = call_594085.call(nil, query_594086, nil, formData_594087, nil)

var postDescribeSourceRegions* = Call_PostDescribeSourceRegions_594068(
    name: "postDescribeSourceRegions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_PostDescribeSourceRegions_594069, base: "/",
    url: url_PostDescribeSourceRegions_594070,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSourceRegions_594049 = ref object of OpenApiRestCall_590348
proc url_GetDescribeSourceRegions_594051(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeSourceRegions_594050(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_594052 = query.getOrDefault("Marker")
  valid_594052 = validateParameter(valid_594052, JString, required = false,
                                 default = nil)
  if valid_594052 != nil:
    section.add "Marker", valid_594052
  var valid_594053 = query.getOrDefault("RegionName")
  valid_594053 = validateParameter(valid_594053, JString, required = false,
                                 default = nil)
  if valid_594053 != nil:
    section.add "RegionName", valid_594053
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594054 = query.getOrDefault("Action")
  valid_594054 = validateParameter(valid_594054, JString, required = true,
                                 default = newJString("DescribeSourceRegions"))
  if valid_594054 != nil:
    section.add "Action", valid_594054
  var valid_594055 = query.getOrDefault("Version")
  valid_594055 = validateParameter(valid_594055, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594055 != nil:
    section.add "Version", valid_594055
  var valid_594056 = query.getOrDefault("Filters")
  valid_594056 = validateParameter(valid_594056, JArray, required = false,
                                 default = nil)
  if valid_594056 != nil:
    section.add "Filters", valid_594056
  var valid_594057 = query.getOrDefault("MaxRecords")
  valid_594057 = validateParameter(valid_594057, JInt, required = false, default = nil)
  if valid_594057 != nil:
    section.add "MaxRecords", valid_594057
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594058 = header.getOrDefault("X-Amz-Signature")
  valid_594058 = validateParameter(valid_594058, JString, required = false,
                                 default = nil)
  if valid_594058 != nil:
    section.add "X-Amz-Signature", valid_594058
  var valid_594059 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594059 = validateParameter(valid_594059, JString, required = false,
                                 default = nil)
  if valid_594059 != nil:
    section.add "X-Amz-Content-Sha256", valid_594059
  var valid_594060 = header.getOrDefault("X-Amz-Date")
  valid_594060 = validateParameter(valid_594060, JString, required = false,
                                 default = nil)
  if valid_594060 != nil:
    section.add "X-Amz-Date", valid_594060
  var valid_594061 = header.getOrDefault("X-Amz-Credential")
  valid_594061 = validateParameter(valid_594061, JString, required = false,
                                 default = nil)
  if valid_594061 != nil:
    section.add "X-Amz-Credential", valid_594061
  var valid_594062 = header.getOrDefault("X-Amz-Security-Token")
  valid_594062 = validateParameter(valid_594062, JString, required = false,
                                 default = nil)
  if valid_594062 != nil:
    section.add "X-Amz-Security-Token", valid_594062
  var valid_594063 = header.getOrDefault("X-Amz-Algorithm")
  valid_594063 = validateParameter(valid_594063, JString, required = false,
                                 default = nil)
  if valid_594063 != nil:
    section.add "X-Amz-Algorithm", valid_594063
  var valid_594064 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594064 = validateParameter(valid_594064, JString, required = false,
                                 default = nil)
  if valid_594064 != nil:
    section.add "X-Amz-SignedHeaders", valid_594064
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594065: Call_GetDescribeSourceRegions_594049; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_594065.validator(path, query, header, formData, body)
  let scheme = call_594065.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594065.url(scheme.get, call_594065.host, call_594065.base,
                         call_594065.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594065, url, valid)

proc call*(call_594066: Call_GetDescribeSourceRegions_594049; Marker: string = "";
          RegionName: string = ""; Action: string = "DescribeSourceRegions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_594067 = newJObject()
  add(query_594067, "Marker", newJString(Marker))
  add(query_594067, "RegionName", newJString(RegionName))
  add(query_594067, "Action", newJString(Action))
  add(query_594067, "Version", newJString(Version))
  if Filters != nil:
    query_594067.add "Filters", Filters
  add(query_594067, "MaxRecords", newJInt(MaxRecords))
  result = call_594066.call(nil, query_594067, nil, nil, nil)

var getDescribeSourceRegions* = Call_GetDescribeSourceRegions_594049(
    name: "getDescribeSourceRegions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_GetDescribeSourceRegions_594050, base: "/",
    url: url_GetDescribeSourceRegions_594051, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeValidDBInstanceModifications_594104 = ref object of OpenApiRestCall_590348
proc url_PostDescribeValidDBInstanceModifications_594106(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeValidDBInstanceModifications_594105(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594107 = query.getOrDefault("Action")
  valid_594107 = validateParameter(valid_594107, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_594107 != nil:
    section.add "Action", valid_594107
  var valid_594108 = query.getOrDefault("Version")
  valid_594108 = validateParameter(valid_594108, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594108 != nil:
    section.add "Version", valid_594108
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594109 = header.getOrDefault("X-Amz-Signature")
  valid_594109 = validateParameter(valid_594109, JString, required = false,
                                 default = nil)
  if valid_594109 != nil:
    section.add "X-Amz-Signature", valid_594109
  var valid_594110 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594110 = validateParameter(valid_594110, JString, required = false,
                                 default = nil)
  if valid_594110 != nil:
    section.add "X-Amz-Content-Sha256", valid_594110
  var valid_594111 = header.getOrDefault("X-Amz-Date")
  valid_594111 = validateParameter(valid_594111, JString, required = false,
                                 default = nil)
  if valid_594111 != nil:
    section.add "X-Amz-Date", valid_594111
  var valid_594112 = header.getOrDefault("X-Amz-Credential")
  valid_594112 = validateParameter(valid_594112, JString, required = false,
                                 default = nil)
  if valid_594112 != nil:
    section.add "X-Amz-Credential", valid_594112
  var valid_594113 = header.getOrDefault("X-Amz-Security-Token")
  valid_594113 = validateParameter(valid_594113, JString, required = false,
                                 default = nil)
  if valid_594113 != nil:
    section.add "X-Amz-Security-Token", valid_594113
  var valid_594114 = header.getOrDefault("X-Amz-Algorithm")
  valid_594114 = validateParameter(valid_594114, JString, required = false,
                                 default = nil)
  if valid_594114 != nil:
    section.add "X-Amz-Algorithm", valid_594114
  var valid_594115 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594115 = validateParameter(valid_594115, JString, required = false,
                                 default = nil)
  if valid_594115 != nil:
    section.add "X-Amz-SignedHeaders", valid_594115
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_594116 = formData.getOrDefault("DBInstanceIdentifier")
  valid_594116 = validateParameter(valid_594116, JString, required = true,
                                 default = nil)
  if valid_594116 != nil:
    section.add "DBInstanceIdentifier", valid_594116
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594117: Call_PostDescribeValidDBInstanceModifications_594104;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_594117.validator(path, query, header, formData, body)
  let scheme = call_594117.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594117.url(scheme.get, call_594117.host, call_594117.base,
                         call_594117.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594117, url, valid)

proc call*(call_594118: Call_PostDescribeValidDBInstanceModifications_594104;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594119 = newJObject()
  var formData_594120 = newJObject()
  add(formData_594120, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_594119, "Action", newJString(Action))
  add(query_594119, "Version", newJString(Version))
  result = call_594118.call(nil, query_594119, nil, formData_594120, nil)

var postDescribeValidDBInstanceModifications* = Call_PostDescribeValidDBInstanceModifications_594104(
    name: "postDescribeValidDBInstanceModifications", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_PostDescribeValidDBInstanceModifications_594105,
    base: "/", url: url_PostDescribeValidDBInstanceModifications_594106,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeValidDBInstanceModifications_594088 = ref object of OpenApiRestCall_590348
proc url_GetDescribeValidDBInstanceModifications_594090(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeValidDBInstanceModifications_594089(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_594091 = query.getOrDefault("DBInstanceIdentifier")
  valid_594091 = validateParameter(valid_594091, JString, required = true,
                                 default = nil)
  if valid_594091 != nil:
    section.add "DBInstanceIdentifier", valid_594091
  var valid_594092 = query.getOrDefault("Action")
  valid_594092 = validateParameter(valid_594092, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_594092 != nil:
    section.add "Action", valid_594092
  var valid_594093 = query.getOrDefault("Version")
  valid_594093 = validateParameter(valid_594093, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594093 != nil:
    section.add "Version", valid_594093
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594094 = header.getOrDefault("X-Amz-Signature")
  valid_594094 = validateParameter(valid_594094, JString, required = false,
                                 default = nil)
  if valid_594094 != nil:
    section.add "X-Amz-Signature", valid_594094
  var valid_594095 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594095 = validateParameter(valid_594095, JString, required = false,
                                 default = nil)
  if valid_594095 != nil:
    section.add "X-Amz-Content-Sha256", valid_594095
  var valid_594096 = header.getOrDefault("X-Amz-Date")
  valid_594096 = validateParameter(valid_594096, JString, required = false,
                                 default = nil)
  if valid_594096 != nil:
    section.add "X-Amz-Date", valid_594096
  var valid_594097 = header.getOrDefault("X-Amz-Credential")
  valid_594097 = validateParameter(valid_594097, JString, required = false,
                                 default = nil)
  if valid_594097 != nil:
    section.add "X-Amz-Credential", valid_594097
  var valid_594098 = header.getOrDefault("X-Amz-Security-Token")
  valid_594098 = validateParameter(valid_594098, JString, required = false,
                                 default = nil)
  if valid_594098 != nil:
    section.add "X-Amz-Security-Token", valid_594098
  var valid_594099 = header.getOrDefault("X-Amz-Algorithm")
  valid_594099 = validateParameter(valid_594099, JString, required = false,
                                 default = nil)
  if valid_594099 != nil:
    section.add "X-Amz-Algorithm", valid_594099
  var valid_594100 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594100 = validateParameter(valid_594100, JString, required = false,
                                 default = nil)
  if valid_594100 != nil:
    section.add "X-Amz-SignedHeaders", valid_594100
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594101: Call_GetDescribeValidDBInstanceModifications_594088;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_594101.validator(path, query, header, formData, body)
  let scheme = call_594101.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594101.url(scheme.get, call_594101.host, call_594101.base,
                         call_594101.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594101, url, valid)

proc call*(call_594102: Call_GetDescribeValidDBInstanceModifications_594088;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594103 = newJObject()
  add(query_594103, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_594103, "Action", newJString(Action))
  add(query_594103, "Version", newJString(Version))
  result = call_594102.call(nil, query_594103, nil, nil, nil)

var getDescribeValidDBInstanceModifications* = Call_GetDescribeValidDBInstanceModifications_594088(
    name: "getDescribeValidDBInstanceModifications", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_GetDescribeValidDBInstanceModifications_594089, base: "/",
    url: url_GetDescribeValidDBInstanceModifications_594090,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDownloadDBLogFilePortion_594140 = ref object of OpenApiRestCall_590348
proc url_PostDownloadDBLogFilePortion_594142(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDownloadDBLogFilePortion_594141(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594143 = query.getOrDefault("Action")
  valid_594143 = validateParameter(valid_594143, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_594143 != nil:
    section.add "Action", valid_594143
  var valid_594144 = query.getOrDefault("Version")
  valid_594144 = validateParameter(valid_594144, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594144 != nil:
    section.add "Version", valid_594144
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594145 = header.getOrDefault("X-Amz-Signature")
  valid_594145 = validateParameter(valid_594145, JString, required = false,
                                 default = nil)
  if valid_594145 != nil:
    section.add "X-Amz-Signature", valid_594145
  var valid_594146 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594146 = validateParameter(valid_594146, JString, required = false,
                                 default = nil)
  if valid_594146 != nil:
    section.add "X-Amz-Content-Sha256", valid_594146
  var valid_594147 = header.getOrDefault("X-Amz-Date")
  valid_594147 = validateParameter(valid_594147, JString, required = false,
                                 default = nil)
  if valid_594147 != nil:
    section.add "X-Amz-Date", valid_594147
  var valid_594148 = header.getOrDefault("X-Amz-Credential")
  valid_594148 = validateParameter(valid_594148, JString, required = false,
                                 default = nil)
  if valid_594148 != nil:
    section.add "X-Amz-Credential", valid_594148
  var valid_594149 = header.getOrDefault("X-Amz-Security-Token")
  valid_594149 = validateParameter(valid_594149, JString, required = false,
                                 default = nil)
  if valid_594149 != nil:
    section.add "X-Amz-Security-Token", valid_594149
  var valid_594150 = header.getOrDefault("X-Amz-Algorithm")
  valid_594150 = validateParameter(valid_594150, JString, required = false,
                                 default = nil)
  if valid_594150 != nil:
    section.add "X-Amz-Algorithm", valid_594150
  var valid_594151 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594151 = validateParameter(valid_594151, JString, required = false,
                                 default = nil)
  if valid_594151 != nil:
    section.add "X-Amz-SignedHeaders", valid_594151
  result.add "header", section
  ## parameters in `formData` object:
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker is not specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_594152 = formData.getOrDefault("NumberOfLines")
  valid_594152 = validateParameter(valid_594152, JInt, required = false, default = nil)
  if valid_594152 != nil:
    section.add "NumberOfLines", valid_594152
  var valid_594153 = formData.getOrDefault("Marker")
  valid_594153 = validateParameter(valid_594153, JString, required = false,
                                 default = nil)
  if valid_594153 != nil:
    section.add "Marker", valid_594153
  assert formData != nil,
        "formData argument is necessary due to required `LogFileName` field"
  var valid_594154 = formData.getOrDefault("LogFileName")
  valid_594154 = validateParameter(valid_594154, JString, required = true,
                                 default = nil)
  if valid_594154 != nil:
    section.add "LogFileName", valid_594154
  var valid_594155 = formData.getOrDefault("DBInstanceIdentifier")
  valid_594155 = validateParameter(valid_594155, JString, required = true,
                                 default = nil)
  if valid_594155 != nil:
    section.add "DBInstanceIdentifier", valid_594155
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594156: Call_PostDownloadDBLogFilePortion_594140; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_594156.validator(path, query, header, formData, body)
  let scheme = call_594156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594156.url(scheme.get, call_594156.host, call_594156.base,
                         call_594156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594156, url, valid)

proc call*(call_594157: Call_PostDownloadDBLogFilePortion_594140;
          LogFileName: string; DBInstanceIdentifier: string; NumberOfLines: int = 0;
          Marker: string = ""; Action: string = "DownloadDBLogFilePortion";
          Version: string = "2014-10-31"): Recallable =
  ## postDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker is not specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594158 = newJObject()
  var formData_594159 = newJObject()
  add(formData_594159, "NumberOfLines", newJInt(NumberOfLines))
  add(formData_594159, "Marker", newJString(Marker))
  add(formData_594159, "LogFileName", newJString(LogFileName))
  add(formData_594159, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_594158, "Action", newJString(Action))
  add(query_594158, "Version", newJString(Version))
  result = call_594157.call(nil, query_594158, nil, formData_594159, nil)

var postDownloadDBLogFilePortion* = Call_PostDownloadDBLogFilePortion_594140(
    name: "postDownloadDBLogFilePortion", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_PostDownloadDBLogFilePortion_594141, base: "/",
    url: url_PostDownloadDBLogFilePortion_594142,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDownloadDBLogFilePortion_594121 = ref object of OpenApiRestCall_590348
proc url_GetDownloadDBLogFilePortion_594123(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDownloadDBLogFilePortion_594122(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker is not specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  ##   Version: JString (required)
  section = newJObject()
  var valid_594124 = query.getOrDefault("Marker")
  valid_594124 = validateParameter(valid_594124, JString, required = false,
                                 default = nil)
  if valid_594124 != nil:
    section.add "Marker", valid_594124
  var valid_594125 = query.getOrDefault("NumberOfLines")
  valid_594125 = validateParameter(valid_594125, JInt, required = false, default = nil)
  if valid_594125 != nil:
    section.add "NumberOfLines", valid_594125
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_594126 = query.getOrDefault("DBInstanceIdentifier")
  valid_594126 = validateParameter(valid_594126, JString, required = true,
                                 default = nil)
  if valid_594126 != nil:
    section.add "DBInstanceIdentifier", valid_594126
  var valid_594127 = query.getOrDefault("Action")
  valid_594127 = validateParameter(valid_594127, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_594127 != nil:
    section.add "Action", valid_594127
  var valid_594128 = query.getOrDefault("LogFileName")
  valid_594128 = validateParameter(valid_594128, JString, required = true,
                                 default = nil)
  if valid_594128 != nil:
    section.add "LogFileName", valid_594128
  var valid_594129 = query.getOrDefault("Version")
  valid_594129 = validateParameter(valid_594129, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594129 != nil:
    section.add "Version", valid_594129
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594130 = header.getOrDefault("X-Amz-Signature")
  valid_594130 = validateParameter(valid_594130, JString, required = false,
                                 default = nil)
  if valid_594130 != nil:
    section.add "X-Amz-Signature", valid_594130
  var valid_594131 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594131 = validateParameter(valid_594131, JString, required = false,
                                 default = nil)
  if valid_594131 != nil:
    section.add "X-Amz-Content-Sha256", valid_594131
  var valid_594132 = header.getOrDefault("X-Amz-Date")
  valid_594132 = validateParameter(valid_594132, JString, required = false,
                                 default = nil)
  if valid_594132 != nil:
    section.add "X-Amz-Date", valid_594132
  var valid_594133 = header.getOrDefault("X-Amz-Credential")
  valid_594133 = validateParameter(valid_594133, JString, required = false,
                                 default = nil)
  if valid_594133 != nil:
    section.add "X-Amz-Credential", valid_594133
  var valid_594134 = header.getOrDefault("X-Amz-Security-Token")
  valid_594134 = validateParameter(valid_594134, JString, required = false,
                                 default = nil)
  if valid_594134 != nil:
    section.add "X-Amz-Security-Token", valid_594134
  var valid_594135 = header.getOrDefault("X-Amz-Algorithm")
  valid_594135 = validateParameter(valid_594135, JString, required = false,
                                 default = nil)
  if valid_594135 != nil:
    section.add "X-Amz-Algorithm", valid_594135
  var valid_594136 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594136 = validateParameter(valid_594136, JString, required = false,
                                 default = nil)
  if valid_594136 != nil:
    section.add "X-Amz-SignedHeaders", valid_594136
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594137: Call_GetDownloadDBLogFilePortion_594121; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_594137.validator(path, query, header, formData, body)
  let scheme = call_594137.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594137.url(scheme.get, call_594137.host, call_594137.base,
                         call_594137.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594137, url, valid)

proc call*(call_594138: Call_GetDownloadDBLogFilePortion_594121;
          DBInstanceIdentifier: string; LogFileName: string; Marker: string = "";
          NumberOfLines: int = 0; Action: string = "DownloadDBLogFilePortion";
          Version: string = "2014-10-31"): Recallable =
  ## getDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker is not specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   Version: string (required)
  var query_594139 = newJObject()
  add(query_594139, "Marker", newJString(Marker))
  add(query_594139, "NumberOfLines", newJInt(NumberOfLines))
  add(query_594139, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_594139, "Action", newJString(Action))
  add(query_594139, "LogFileName", newJString(LogFileName))
  add(query_594139, "Version", newJString(Version))
  result = call_594138.call(nil, query_594139, nil, nil, nil)

var getDownloadDBLogFilePortion* = Call_GetDownloadDBLogFilePortion_594121(
    name: "getDownloadDBLogFilePortion", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_GetDownloadDBLogFilePortion_594122, base: "/",
    url: url_GetDownloadDBLogFilePortion_594123,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostFailoverDBCluster_594177 = ref object of OpenApiRestCall_590348
proc url_PostFailoverDBCluster_594179(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostFailoverDBCluster_594178(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594180 = query.getOrDefault("Action")
  valid_594180 = validateParameter(valid_594180, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_594180 != nil:
    section.add "Action", valid_594180
  var valid_594181 = query.getOrDefault("Version")
  valid_594181 = validateParameter(valid_594181, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594181 != nil:
    section.add "Version", valid_594181
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594182 = header.getOrDefault("X-Amz-Signature")
  valid_594182 = validateParameter(valid_594182, JString, required = false,
                                 default = nil)
  if valid_594182 != nil:
    section.add "X-Amz-Signature", valid_594182
  var valid_594183 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594183 = validateParameter(valid_594183, JString, required = false,
                                 default = nil)
  if valid_594183 != nil:
    section.add "X-Amz-Content-Sha256", valid_594183
  var valid_594184 = header.getOrDefault("X-Amz-Date")
  valid_594184 = validateParameter(valid_594184, JString, required = false,
                                 default = nil)
  if valid_594184 != nil:
    section.add "X-Amz-Date", valid_594184
  var valid_594185 = header.getOrDefault("X-Amz-Credential")
  valid_594185 = validateParameter(valid_594185, JString, required = false,
                                 default = nil)
  if valid_594185 != nil:
    section.add "X-Amz-Credential", valid_594185
  var valid_594186 = header.getOrDefault("X-Amz-Security-Token")
  valid_594186 = validateParameter(valid_594186, JString, required = false,
                                 default = nil)
  if valid_594186 != nil:
    section.add "X-Amz-Security-Token", valid_594186
  var valid_594187 = header.getOrDefault("X-Amz-Algorithm")
  valid_594187 = validateParameter(valid_594187, JString, required = false,
                                 default = nil)
  if valid_594187 != nil:
    section.add "X-Amz-Algorithm", valid_594187
  var valid_594188 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594188 = validateParameter(valid_594188, JString, required = false,
                                 default = nil)
  if valid_594188 != nil:
    section.add "X-Amz-SignedHeaders", valid_594188
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_594189 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_594189 = validateParameter(valid_594189, JString, required = false,
                                 default = nil)
  if valid_594189 != nil:
    section.add "TargetDBInstanceIdentifier", valid_594189
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_594190 = formData.getOrDefault("DBClusterIdentifier")
  valid_594190 = validateParameter(valid_594190, JString, required = true,
                                 default = nil)
  if valid_594190 != nil:
    section.add "DBClusterIdentifier", valid_594190
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594191: Call_PostFailoverDBCluster_594177; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594191.validator(path, query, header, formData, body)
  let scheme = call_594191.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594191.url(scheme.get, call_594191.host, call_594191.base,
                         call_594191.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594191, url, valid)

proc call*(call_594192: Call_PostFailoverDBCluster_594177;
          DBClusterIdentifier: string; Action: string = "FailoverDBCluster";
          TargetDBInstanceIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_594193 = newJObject()
  var formData_594194 = newJObject()
  add(query_594193, "Action", newJString(Action))
  add(formData_594194, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_594193, "Version", newJString(Version))
  add(formData_594194, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_594192.call(nil, query_594193, nil, formData_594194, nil)

var postFailoverDBCluster* = Call_PostFailoverDBCluster_594177(
    name: "postFailoverDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_PostFailoverDBCluster_594178, base: "/",
    url: url_PostFailoverDBCluster_594179, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFailoverDBCluster_594160 = ref object of OpenApiRestCall_590348
proc url_GetFailoverDBCluster_594162(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetFailoverDBCluster_594161(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_594163 = query.getOrDefault("DBClusterIdentifier")
  valid_594163 = validateParameter(valid_594163, JString, required = true,
                                 default = nil)
  if valid_594163 != nil:
    section.add "DBClusterIdentifier", valid_594163
  var valid_594164 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_594164 = validateParameter(valid_594164, JString, required = false,
                                 default = nil)
  if valid_594164 != nil:
    section.add "TargetDBInstanceIdentifier", valid_594164
  var valid_594165 = query.getOrDefault("Action")
  valid_594165 = validateParameter(valid_594165, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_594165 != nil:
    section.add "Action", valid_594165
  var valid_594166 = query.getOrDefault("Version")
  valid_594166 = validateParameter(valid_594166, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594166 != nil:
    section.add "Version", valid_594166
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594167 = header.getOrDefault("X-Amz-Signature")
  valid_594167 = validateParameter(valid_594167, JString, required = false,
                                 default = nil)
  if valid_594167 != nil:
    section.add "X-Amz-Signature", valid_594167
  var valid_594168 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594168 = validateParameter(valid_594168, JString, required = false,
                                 default = nil)
  if valid_594168 != nil:
    section.add "X-Amz-Content-Sha256", valid_594168
  var valid_594169 = header.getOrDefault("X-Amz-Date")
  valid_594169 = validateParameter(valid_594169, JString, required = false,
                                 default = nil)
  if valid_594169 != nil:
    section.add "X-Amz-Date", valid_594169
  var valid_594170 = header.getOrDefault("X-Amz-Credential")
  valid_594170 = validateParameter(valid_594170, JString, required = false,
                                 default = nil)
  if valid_594170 != nil:
    section.add "X-Amz-Credential", valid_594170
  var valid_594171 = header.getOrDefault("X-Amz-Security-Token")
  valid_594171 = validateParameter(valid_594171, JString, required = false,
                                 default = nil)
  if valid_594171 != nil:
    section.add "X-Amz-Security-Token", valid_594171
  var valid_594172 = header.getOrDefault("X-Amz-Algorithm")
  valid_594172 = validateParameter(valid_594172, JString, required = false,
                                 default = nil)
  if valid_594172 != nil:
    section.add "X-Amz-Algorithm", valid_594172
  var valid_594173 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594173 = validateParameter(valid_594173, JString, required = false,
                                 default = nil)
  if valid_594173 != nil:
    section.add "X-Amz-SignedHeaders", valid_594173
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594174: Call_GetFailoverDBCluster_594160; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594174.validator(path, query, header, formData, body)
  let scheme = call_594174.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594174.url(scheme.get, call_594174.host, call_594174.base,
                         call_594174.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594174, url, valid)

proc call*(call_594175: Call_GetFailoverDBCluster_594160;
          DBClusterIdentifier: string; TargetDBInstanceIdentifier: string = "";
          Action: string = "FailoverDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594176 = newJObject()
  add(query_594176, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_594176, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_594176, "Action", newJString(Action))
  add(query_594176, "Version", newJString(Version))
  result = call_594175.call(nil, query_594176, nil, nil, nil)

var getFailoverDBCluster* = Call_GetFailoverDBCluster_594160(
    name: "getFailoverDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_GetFailoverDBCluster_594161, base: "/",
    url: url_GetFailoverDBCluster_594162, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostImportInstallationMedia_594215 = ref object of OpenApiRestCall_590348
proc url_PostImportInstallationMedia_594217(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostImportInstallationMedia_594216(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Imports the installation media for an on-premises, bring your own media (BYOM) DB engine, such as SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594218 = query.getOrDefault("Action")
  valid_594218 = validateParameter(valid_594218, JString, required = true, default = newJString(
      "ImportInstallationMedia"))
  if valid_594218 != nil:
    section.add "Action", valid_594218
  var valid_594219 = query.getOrDefault("Version")
  valid_594219 = validateParameter(valid_594219, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594219 != nil:
    section.add "Version", valid_594219
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594220 = header.getOrDefault("X-Amz-Signature")
  valid_594220 = validateParameter(valid_594220, JString, required = false,
                                 default = nil)
  if valid_594220 != nil:
    section.add "X-Amz-Signature", valid_594220
  var valid_594221 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594221 = validateParameter(valid_594221, JString, required = false,
                                 default = nil)
  if valid_594221 != nil:
    section.add "X-Amz-Content-Sha256", valid_594221
  var valid_594222 = header.getOrDefault("X-Amz-Date")
  valid_594222 = validateParameter(valid_594222, JString, required = false,
                                 default = nil)
  if valid_594222 != nil:
    section.add "X-Amz-Date", valid_594222
  var valid_594223 = header.getOrDefault("X-Amz-Credential")
  valid_594223 = validateParameter(valid_594223, JString, required = false,
                                 default = nil)
  if valid_594223 != nil:
    section.add "X-Amz-Credential", valid_594223
  var valid_594224 = header.getOrDefault("X-Amz-Security-Token")
  valid_594224 = validateParameter(valid_594224, JString, required = false,
                                 default = nil)
  if valid_594224 != nil:
    section.add "X-Amz-Security-Token", valid_594224
  var valid_594225 = header.getOrDefault("X-Amz-Algorithm")
  valid_594225 = validateParameter(valid_594225, JString, required = false,
                                 default = nil)
  if valid_594225 != nil:
    section.add "X-Amz-Algorithm", valid_594225
  var valid_594226 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594226 = validateParameter(valid_594226, JString, required = false,
                                 default = nil)
  if valid_594226 != nil:
    section.add "X-Amz-SignedHeaders", valid_594226
  result.add "header", section
  ## parameters in `formData` object:
  ##   OSInstallationMediaPath: JString (required)
  ##                          : <p>The path to the installation media for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   EngineInstallationMediaPath: JString (required)
  ##                              : <p>The path to the installation media for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   EngineVersion: JString (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes supported on-premises, bring your own media (BYOM) DB engines.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported on-premises, bring your own media (BYOM) DB engines. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OSInstallationMediaPath` field"
  var valid_594227 = formData.getOrDefault("OSInstallationMediaPath")
  valid_594227 = validateParameter(valid_594227, JString, required = true,
                                 default = nil)
  if valid_594227 != nil:
    section.add "OSInstallationMediaPath", valid_594227
  var valid_594228 = formData.getOrDefault("EngineInstallationMediaPath")
  valid_594228 = validateParameter(valid_594228, JString, required = true,
                                 default = nil)
  if valid_594228 != nil:
    section.add "EngineInstallationMediaPath", valid_594228
  var valid_594229 = formData.getOrDefault("EngineVersion")
  valid_594229 = validateParameter(valid_594229, JString, required = true,
                                 default = nil)
  if valid_594229 != nil:
    section.add "EngineVersion", valid_594229
  var valid_594230 = formData.getOrDefault("Engine")
  valid_594230 = validateParameter(valid_594230, JString, required = true,
                                 default = nil)
  if valid_594230 != nil:
    section.add "Engine", valid_594230
  var valid_594231 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_594231 = validateParameter(valid_594231, JString, required = true,
                                 default = nil)
  if valid_594231 != nil:
    section.add "CustomAvailabilityZoneId", valid_594231
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594232: Call_PostImportInstallationMedia_594215; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Imports the installation media for an on-premises, bring your own media (BYOM) DB engine, such as SQL Server.
  ## 
  let valid = call_594232.validator(path, query, header, formData, body)
  let scheme = call_594232.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594232.url(scheme.get, call_594232.host, call_594232.base,
                         call_594232.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594232, url, valid)

proc call*(call_594233: Call_PostImportInstallationMedia_594215;
          OSInstallationMediaPath: string; EngineInstallationMediaPath: string;
          EngineVersion: string; Engine: string; CustomAvailabilityZoneId: string;
          Action: string = "ImportInstallationMedia"; Version: string = "2014-10-31"): Recallable =
  ## postImportInstallationMedia
  ## Imports the installation media for an on-premises, bring your own media (BYOM) DB engine, such as SQL Server.
  ##   OSInstallationMediaPath: string (required)
  ##                          : <p>The path to the installation media for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   EngineInstallationMediaPath: string (required)
  ##                              : <p>The path to the installation media for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   EngineVersion: string (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes supported on-premises, bring your own media (BYOM) DB engines.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported on-premises, bring your own media (BYOM) DB engines. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   Version: string (required)
  var query_594234 = newJObject()
  var formData_594235 = newJObject()
  add(formData_594235, "OSInstallationMediaPath",
      newJString(OSInstallationMediaPath))
  add(formData_594235, "EngineInstallationMediaPath",
      newJString(EngineInstallationMediaPath))
  add(formData_594235, "EngineVersion", newJString(EngineVersion))
  add(formData_594235, "Engine", newJString(Engine))
  add(query_594234, "Action", newJString(Action))
  add(formData_594235, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_594234, "Version", newJString(Version))
  result = call_594233.call(nil, query_594234, nil, formData_594235, nil)

var postImportInstallationMedia* = Call_PostImportInstallationMedia_594215(
    name: "postImportInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ImportInstallationMedia",
    validator: validate_PostImportInstallationMedia_594216, base: "/",
    url: url_PostImportInstallationMedia_594217,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImportInstallationMedia_594195 = ref object of OpenApiRestCall_590348
proc url_GetImportInstallationMedia_594197(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetImportInstallationMedia_594196(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Imports the installation media for an on-premises, bring your own media (BYOM) DB engine, such as SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported on-premises, bring your own media (BYOM) DB engines. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   EngineInstallationMediaPath: JString (required)
  ##                              : <p>The path to the installation media for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   EngineVersion: JString (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes supported on-premises, bring your own media (BYOM) DB engines.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: JString (required)
  ##   OSInstallationMediaPath: JString (required)
  ##                          : <p>The path to the installation media for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_594198 = query.getOrDefault("Engine")
  valid_594198 = validateParameter(valid_594198, JString, required = true,
                                 default = nil)
  if valid_594198 != nil:
    section.add "Engine", valid_594198
  var valid_594199 = query.getOrDefault("EngineInstallationMediaPath")
  valid_594199 = validateParameter(valid_594199, JString, required = true,
                                 default = nil)
  if valid_594199 != nil:
    section.add "EngineInstallationMediaPath", valid_594199
  var valid_594200 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_594200 = validateParameter(valid_594200, JString, required = true,
                                 default = nil)
  if valid_594200 != nil:
    section.add "CustomAvailabilityZoneId", valid_594200
  var valid_594201 = query.getOrDefault("EngineVersion")
  valid_594201 = validateParameter(valid_594201, JString, required = true,
                                 default = nil)
  if valid_594201 != nil:
    section.add "EngineVersion", valid_594201
  var valid_594202 = query.getOrDefault("Action")
  valid_594202 = validateParameter(valid_594202, JString, required = true, default = newJString(
      "ImportInstallationMedia"))
  if valid_594202 != nil:
    section.add "Action", valid_594202
  var valid_594203 = query.getOrDefault("OSInstallationMediaPath")
  valid_594203 = validateParameter(valid_594203, JString, required = true,
                                 default = nil)
  if valid_594203 != nil:
    section.add "OSInstallationMediaPath", valid_594203
  var valid_594204 = query.getOrDefault("Version")
  valid_594204 = validateParameter(valid_594204, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594204 != nil:
    section.add "Version", valid_594204
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594205 = header.getOrDefault("X-Amz-Signature")
  valid_594205 = validateParameter(valid_594205, JString, required = false,
                                 default = nil)
  if valid_594205 != nil:
    section.add "X-Amz-Signature", valid_594205
  var valid_594206 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594206 = validateParameter(valid_594206, JString, required = false,
                                 default = nil)
  if valid_594206 != nil:
    section.add "X-Amz-Content-Sha256", valid_594206
  var valid_594207 = header.getOrDefault("X-Amz-Date")
  valid_594207 = validateParameter(valid_594207, JString, required = false,
                                 default = nil)
  if valid_594207 != nil:
    section.add "X-Amz-Date", valid_594207
  var valid_594208 = header.getOrDefault("X-Amz-Credential")
  valid_594208 = validateParameter(valid_594208, JString, required = false,
                                 default = nil)
  if valid_594208 != nil:
    section.add "X-Amz-Credential", valid_594208
  var valid_594209 = header.getOrDefault("X-Amz-Security-Token")
  valid_594209 = validateParameter(valid_594209, JString, required = false,
                                 default = nil)
  if valid_594209 != nil:
    section.add "X-Amz-Security-Token", valid_594209
  var valid_594210 = header.getOrDefault("X-Amz-Algorithm")
  valid_594210 = validateParameter(valid_594210, JString, required = false,
                                 default = nil)
  if valid_594210 != nil:
    section.add "X-Amz-Algorithm", valid_594210
  var valid_594211 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594211 = validateParameter(valid_594211, JString, required = false,
                                 default = nil)
  if valid_594211 != nil:
    section.add "X-Amz-SignedHeaders", valid_594211
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594212: Call_GetImportInstallationMedia_594195; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Imports the installation media for an on-premises, bring your own media (BYOM) DB engine, such as SQL Server.
  ## 
  let valid = call_594212.validator(path, query, header, formData, body)
  let scheme = call_594212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594212.url(scheme.get, call_594212.host, call_594212.base,
                         call_594212.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594212, url, valid)

proc call*(call_594213: Call_GetImportInstallationMedia_594195; Engine: string;
          EngineInstallationMediaPath: string; CustomAvailabilityZoneId: string;
          EngineVersion: string; OSInstallationMediaPath: string;
          Action: string = "ImportInstallationMedia"; Version: string = "2014-10-31"): Recallable =
  ## getImportInstallationMedia
  ## Imports the installation media for an on-premises, bring your own media (BYOM) DB engine, such as SQL Server.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported on-premises, bring your own media (BYOM) DB engines. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   EngineInstallationMediaPath: string (required)
  ##                              : <p>The path to the installation media for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   EngineVersion: string (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes supported on-premises, bring your own media (BYOM) DB engines.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   OSInstallationMediaPath: string (required)
  ##                          : <p>The path to the installation media for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   Version: string (required)
  var query_594214 = newJObject()
  add(query_594214, "Engine", newJString(Engine))
  add(query_594214, "EngineInstallationMediaPath",
      newJString(EngineInstallationMediaPath))
  add(query_594214, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_594214, "EngineVersion", newJString(EngineVersion))
  add(query_594214, "Action", newJString(Action))
  add(query_594214, "OSInstallationMediaPath", newJString(OSInstallationMediaPath))
  add(query_594214, "Version", newJString(Version))
  result = call_594213.call(nil, query_594214, nil, nil, nil)

var getImportInstallationMedia* = Call_GetImportInstallationMedia_594195(
    name: "getImportInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ImportInstallationMedia",
    validator: validate_GetImportInstallationMedia_594196, base: "/",
    url: url_GetImportInstallationMedia_594197,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_594253 = ref object of OpenApiRestCall_590348
proc url_PostListTagsForResource_594255(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListTagsForResource_594254(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594256 = query.getOrDefault("Action")
  valid_594256 = validateParameter(valid_594256, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_594256 != nil:
    section.add "Action", valid_594256
  var valid_594257 = query.getOrDefault("Version")
  valid_594257 = validateParameter(valid_594257, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594257 != nil:
    section.add "Version", valid_594257
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594258 = header.getOrDefault("X-Amz-Signature")
  valid_594258 = validateParameter(valid_594258, JString, required = false,
                                 default = nil)
  if valid_594258 != nil:
    section.add "X-Amz-Signature", valid_594258
  var valid_594259 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594259 = validateParameter(valid_594259, JString, required = false,
                                 default = nil)
  if valid_594259 != nil:
    section.add "X-Amz-Content-Sha256", valid_594259
  var valid_594260 = header.getOrDefault("X-Amz-Date")
  valid_594260 = validateParameter(valid_594260, JString, required = false,
                                 default = nil)
  if valid_594260 != nil:
    section.add "X-Amz-Date", valid_594260
  var valid_594261 = header.getOrDefault("X-Amz-Credential")
  valid_594261 = validateParameter(valid_594261, JString, required = false,
                                 default = nil)
  if valid_594261 != nil:
    section.add "X-Amz-Credential", valid_594261
  var valid_594262 = header.getOrDefault("X-Amz-Security-Token")
  valid_594262 = validateParameter(valid_594262, JString, required = false,
                                 default = nil)
  if valid_594262 != nil:
    section.add "X-Amz-Security-Token", valid_594262
  var valid_594263 = header.getOrDefault("X-Amz-Algorithm")
  valid_594263 = validateParameter(valid_594263, JString, required = false,
                                 default = nil)
  if valid_594263 != nil:
    section.add "X-Amz-Algorithm", valid_594263
  var valid_594264 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594264 = validateParameter(valid_594264, JString, required = false,
                                 default = nil)
  if valid_594264 != nil:
    section.add "X-Amz-SignedHeaders", valid_594264
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  section = newJObject()
  var valid_594265 = formData.getOrDefault("Filters")
  valid_594265 = validateParameter(valid_594265, JArray, required = false,
                                 default = nil)
  if valid_594265 != nil:
    section.add "Filters", valid_594265
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_594266 = formData.getOrDefault("ResourceName")
  valid_594266 = validateParameter(valid_594266, JString, required = true,
                                 default = nil)
  if valid_594266 != nil:
    section.add "ResourceName", valid_594266
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594267: Call_PostListTagsForResource_594253; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_594267.validator(path, query, header, formData, body)
  let scheme = call_594267.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594267.url(scheme.get, call_594267.host, call_594267.base,
                         call_594267.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594267, url, valid)

proc call*(call_594268: Call_PostListTagsForResource_594253; ResourceName: string;
          Action: string = "ListTagsForResource"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  var query_594269 = newJObject()
  var formData_594270 = newJObject()
  add(query_594269, "Action", newJString(Action))
  if Filters != nil:
    formData_594270.add "Filters", Filters
  add(query_594269, "Version", newJString(Version))
  add(formData_594270, "ResourceName", newJString(ResourceName))
  result = call_594268.call(nil, query_594269, nil, formData_594270, nil)

var postListTagsForResource* = Call_PostListTagsForResource_594253(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_594254, base: "/",
    url: url_PostListTagsForResource_594255, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_594236 = ref object of OpenApiRestCall_590348
proc url_GetListTagsForResource_594238(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListTagsForResource_594237(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_594239 = query.getOrDefault("ResourceName")
  valid_594239 = validateParameter(valid_594239, JString, required = true,
                                 default = nil)
  if valid_594239 != nil:
    section.add "ResourceName", valid_594239
  var valid_594240 = query.getOrDefault("Action")
  valid_594240 = validateParameter(valid_594240, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_594240 != nil:
    section.add "Action", valid_594240
  var valid_594241 = query.getOrDefault("Version")
  valid_594241 = validateParameter(valid_594241, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594241 != nil:
    section.add "Version", valid_594241
  var valid_594242 = query.getOrDefault("Filters")
  valid_594242 = validateParameter(valid_594242, JArray, required = false,
                                 default = nil)
  if valid_594242 != nil:
    section.add "Filters", valid_594242
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594243 = header.getOrDefault("X-Amz-Signature")
  valid_594243 = validateParameter(valid_594243, JString, required = false,
                                 default = nil)
  if valid_594243 != nil:
    section.add "X-Amz-Signature", valid_594243
  var valid_594244 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594244 = validateParameter(valid_594244, JString, required = false,
                                 default = nil)
  if valid_594244 != nil:
    section.add "X-Amz-Content-Sha256", valid_594244
  var valid_594245 = header.getOrDefault("X-Amz-Date")
  valid_594245 = validateParameter(valid_594245, JString, required = false,
                                 default = nil)
  if valid_594245 != nil:
    section.add "X-Amz-Date", valid_594245
  var valid_594246 = header.getOrDefault("X-Amz-Credential")
  valid_594246 = validateParameter(valid_594246, JString, required = false,
                                 default = nil)
  if valid_594246 != nil:
    section.add "X-Amz-Credential", valid_594246
  var valid_594247 = header.getOrDefault("X-Amz-Security-Token")
  valid_594247 = validateParameter(valid_594247, JString, required = false,
                                 default = nil)
  if valid_594247 != nil:
    section.add "X-Amz-Security-Token", valid_594247
  var valid_594248 = header.getOrDefault("X-Amz-Algorithm")
  valid_594248 = validateParameter(valid_594248, JString, required = false,
                                 default = nil)
  if valid_594248 != nil:
    section.add "X-Amz-Algorithm", valid_594248
  var valid_594249 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594249 = validateParameter(valid_594249, JString, required = false,
                                 default = nil)
  if valid_594249 != nil:
    section.add "X-Amz-SignedHeaders", valid_594249
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594250: Call_GetListTagsForResource_594236; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_594250.validator(path, query, header, formData, body)
  let scheme = call_594250.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594250.url(scheme.get, call_594250.host, call_594250.base,
                         call_594250.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594250, url, valid)

proc call*(call_594251: Call_GetListTagsForResource_594236; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2014-10-31";
          Filters: JsonNode = nil): Recallable =
  ## getListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  var query_594252 = newJObject()
  add(query_594252, "ResourceName", newJString(ResourceName))
  add(query_594252, "Action", newJString(Action))
  add(query_594252, "Version", newJString(Version))
  if Filters != nil:
    query_594252.add "Filters", Filters
  result = call_594251.call(nil, query_594252, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_594236(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_594237, base: "/",
    url: url_GetListTagsForResource_594238, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCurrentDBClusterCapacity_594290 = ref object of OpenApiRestCall_590348
proc url_PostModifyCurrentDBClusterCapacity_594292(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyCurrentDBClusterCapacity_594291(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594293 = query.getOrDefault("Action")
  valid_594293 = validateParameter(valid_594293, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_594293 != nil:
    section.add "Action", valid_594293
  var valid_594294 = query.getOrDefault("Version")
  valid_594294 = validateParameter(valid_594294, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594294 != nil:
    section.add "Version", valid_594294
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594295 = header.getOrDefault("X-Amz-Signature")
  valid_594295 = validateParameter(valid_594295, JString, required = false,
                                 default = nil)
  if valid_594295 != nil:
    section.add "X-Amz-Signature", valid_594295
  var valid_594296 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594296 = validateParameter(valid_594296, JString, required = false,
                                 default = nil)
  if valid_594296 != nil:
    section.add "X-Amz-Content-Sha256", valid_594296
  var valid_594297 = header.getOrDefault("X-Amz-Date")
  valid_594297 = validateParameter(valid_594297, JString, required = false,
                                 default = nil)
  if valid_594297 != nil:
    section.add "X-Amz-Date", valid_594297
  var valid_594298 = header.getOrDefault("X-Amz-Credential")
  valid_594298 = validateParameter(valid_594298, JString, required = false,
                                 default = nil)
  if valid_594298 != nil:
    section.add "X-Amz-Credential", valid_594298
  var valid_594299 = header.getOrDefault("X-Amz-Security-Token")
  valid_594299 = validateParameter(valid_594299, JString, required = false,
                                 default = nil)
  if valid_594299 != nil:
    section.add "X-Amz-Security-Token", valid_594299
  var valid_594300 = header.getOrDefault("X-Amz-Algorithm")
  valid_594300 = validateParameter(valid_594300, JString, required = false,
                                 default = nil)
  if valid_594300 != nil:
    section.add "X-Amz-Algorithm", valid_594300
  var valid_594301 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594301 = validateParameter(valid_594301, JString, required = false,
                                 default = nil)
  if valid_594301 != nil:
    section.add "X-Amz-SignedHeaders", valid_594301
  result.add "header", section
  ## parameters in `formData` object:
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point is not found in the timeout period.</p>
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>Value must be <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, or <code>256</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  section = newJObject()
  var valid_594302 = formData.getOrDefault("TimeoutAction")
  valid_594302 = validateParameter(valid_594302, JString, required = false,
                                 default = nil)
  if valid_594302 != nil:
    section.add "TimeoutAction", valid_594302
  var valid_594303 = formData.getOrDefault("SecondsBeforeTimeout")
  valid_594303 = validateParameter(valid_594303, JInt, required = false, default = nil)
  if valid_594303 != nil:
    section.add "SecondsBeforeTimeout", valid_594303
  var valid_594304 = formData.getOrDefault("Capacity")
  valid_594304 = validateParameter(valid_594304, JInt, required = false, default = nil)
  if valid_594304 != nil:
    section.add "Capacity", valid_594304
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_594305 = formData.getOrDefault("DBClusterIdentifier")
  valid_594305 = validateParameter(valid_594305, JString, required = true,
                                 default = nil)
  if valid_594305 != nil:
    section.add "DBClusterIdentifier", valid_594305
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594306: Call_PostModifyCurrentDBClusterCapacity_594290;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594306.validator(path, query, header, formData, body)
  let scheme = call_594306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594306.url(scheme.get, call_594306.host, call_594306.base,
                         call_594306.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594306, url, valid)

proc call*(call_594307: Call_PostModifyCurrentDBClusterCapacity_594290;
          DBClusterIdentifier: string; TimeoutAction: string = "";
          Action: string = "ModifyCurrentDBClusterCapacity";
          SecondsBeforeTimeout: int = 0; Version: string = "2014-10-31";
          Capacity: int = 0): Recallable =
  ## postModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point is not found in the timeout period.</p>
  ##   Action: string (required)
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Version: string (required)
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>Value must be <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, or <code>256</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  var query_594308 = newJObject()
  var formData_594309 = newJObject()
  add(formData_594309, "TimeoutAction", newJString(TimeoutAction))
  add(query_594308, "Action", newJString(Action))
  add(formData_594309, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_594308, "Version", newJString(Version))
  add(formData_594309, "Capacity", newJInt(Capacity))
  add(formData_594309, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_594307.call(nil, query_594308, nil, formData_594309, nil)

var postModifyCurrentDBClusterCapacity* = Call_PostModifyCurrentDBClusterCapacity_594290(
    name: "postModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_PostModifyCurrentDBClusterCapacity_594291, base: "/",
    url: url_PostModifyCurrentDBClusterCapacity_594292,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCurrentDBClusterCapacity_594271 = ref object of OpenApiRestCall_590348
proc url_GetModifyCurrentDBClusterCapacity_594273(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyCurrentDBClusterCapacity_594272(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>Value must be <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, or <code>256</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point is not found in the timeout period.</p>
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_594274 = query.getOrDefault("Capacity")
  valid_594274 = validateParameter(valid_594274, JInt, required = false, default = nil)
  if valid_594274 != nil:
    section.add "Capacity", valid_594274
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_594275 = query.getOrDefault("DBClusterIdentifier")
  valid_594275 = validateParameter(valid_594275, JString, required = true,
                                 default = nil)
  if valid_594275 != nil:
    section.add "DBClusterIdentifier", valid_594275
  var valid_594276 = query.getOrDefault("TimeoutAction")
  valid_594276 = validateParameter(valid_594276, JString, required = false,
                                 default = nil)
  if valid_594276 != nil:
    section.add "TimeoutAction", valid_594276
  var valid_594277 = query.getOrDefault("SecondsBeforeTimeout")
  valid_594277 = validateParameter(valid_594277, JInt, required = false, default = nil)
  if valid_594277 != nil:
    section.add "SecondsBeforeTimeout", valid_594277
  var valid_594278 = query.getOrDefault("Action")
  valid_594278 = validateParameter(valid_594278, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_594278 != nil:
    section.add "Action", valid_594278
  var valid_594279 = query.getOrDefault("Version")
  valid_594279 = validateParameter(valid_594279, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594279 != nil:
    section.add "Version", valid_594279
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594280 = header.getOrDefault("X-Amz-Signature")
  valid_594280 = validateParameter(valid_594280, JString, required = false,
                                 default = nil)
  if valid_594280 != nil:
    section.add "X-Amz-Signature", valid_594280
  var valid_594281 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594281 = validateParameter(valid_594281, JString, required = false,
                                 default = nil)
  if valid_594281 != nil:
    section.add "X-Amz-Content-Sha256", valid_594281
  var valid_594282 = header.getOrDefault("X-Amz-Date")
  valid_594282 = validateParameter(valid_594282, JString, required = false,
                                 default = nil)
  if valid_594282 != nil:
    section.add "X-Amz-Date", valid_594282
  var valid_594283 = header.getOrDefault("X-Amz-Credential")
  valid_594283 = validateParameter(valid_594283, JString, required = false,
                                 default = nil)
  if valid_594283 != nil:
    section.add "X-Amz-Credential", valid_594283
  var valid_594284 = header.getOrDefault("X-Amz-Security-Token")
  valid_594284 = validateParameter(valid_594284, JString, required = false,
                                 default = nil)
  if valid_594284 != nil:
    section.add "X-Amz-Security-Token", valid_594284
  var valid_594285 = header.getOrDefault("X-Amz-Algorithm")
  valid_594285 = validateParameter(valid_594285, JString, required = false,
                                 default = nil)
  if valid_594285 != nil:
    section.add "X-Amz-Algorithm", valid_594285
  var valid_594286 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594286 = validateParameter(valid_594286, JString, required = false,
                                 default = nil)
  if valid_594286 != nil:
    section.add "X-Amz-SignedHeaders", valid_594286
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594287: Call_GetModifyCurrentDBClusterCapacity_594271;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594287.validator(path, query, header, formData, body)
  let scheme = call_594287.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594287.url(scheme.get, call_594287.host, call_594287.base,
                         call_594287.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594287, url, valid)

proc call*(call_594288: Call_GetModifyCurrentDBClusterCapacity_594271;
          DBClusterIdentifier: string; Capacity: int = 0; TimeoutAction: string = "";
          SecondsBeforeTimeout: int = 0;
          Action: string = "ModifyCurrentDBClusterCapacity";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>Value must be <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, or <code>256</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point is not found in the timeout period.</p>
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594289 = newJObject()
  add(query_594289, "Capacity", newJInt(Capacity))
  add(query_594289, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_594289, "TimeoutAction", newJString(TimeoutAction))
  add(query_594289, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_594289, "Action", newJString(Action))
  add(query_594289, "Version", newJString(Version))
  result = call_594288.call(nil, query_594289, nil, nil, nil)

var getModifyCurrentDBClusterCapacity* = Call_GetModifyCurrentDBClusterCapacity_594271(
    name: "getModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_GetModifyCurrentDBClusterCapacity_594272, base: "/",
    url: url_GetModifyCurrentDBClusterCapacity_594273,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBCluster_594351 = ref object of OpenApiRestCall_590348
proc url_PostModifyDBCluster_594353(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBCluster_594352(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594354 = query.getOrDefault("Action")
  valid_594354 = validateParameter(valid_594354, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_594354 != nil:
    section.add "Action", valid_594354
  var valid_594355 = query.getOrDefault("Version")
  valid_594355 = validateParameter(valid_594355, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594355 != nil:
    section.add "Version", valid_594355
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594356 = header.getOrDefault("X-Amz-Signature")
  valid_594356 = validateParameter(valid_594356, JString, required = false,
                                 default = nil)
  if valid_594356 != nil:
    section.add "X-Amz-Signature", valid_594356
  var valid_594357 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594357 = validateParameter(valid_594357, JString, required = false,
                                 default = nil)
  if valid_594357 != nil:
    section.add "X-Amz-Content-Sha256", valid_594357
  var valid_594358 = header.getOrDefault("X-Amz-Date")
  valid_594358 = validateParameter(valid_594358, JString, required = false,
                                 default = nil)
  if valid_594358 != nil:
    section.add "X-Amz-Date", valid_594358
  var valid_594359 = header.getOrDefault("X-Amz-Credential")
  valid_594359 = validateParameter(valid_594359, JString, required = false,
                                 default = nil)
  if valid_594359 != nil:
    section.add "X-Amz-Credential", valid_594359
  var valid_594360 = header.getOrDefault("X-Amz-Security-Token")
  valid_594360 = validateParameter(valid_594360, JString, required = false,
                                 default = nil)
  if valid_594360 != nil:
    section.add "X-Amz-Security-Token", valid_594360
  var valid_594361 = header.getOrDefault("X-Amz-Algorithm")
  valid_594361 = validateParameter(valid_594361, JString, required = false,
                                 default = nil)
  if valid_594361 != nil:
    section.add "X-Amz-Algorithm", valid_594361
  var valid_594362 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594362 = validateParameter(valid_594362, JString, required = false,
                                 default = nil)
  if valid_594362 != nil:
    section.add "X-Amz-SignedHeaders", valid_594362
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_594363 = formData.getOrDefault("NewDBClusterIdentifier")
  valid_594363 = validateParameter(valid_594363, JString, required = false,
                                 default = nil)
  if valid_594363 != nil:
    section.add "NewDBClusterIdentifier", valid_594363
  var valid_594364 = formData.getOrDefault("Port")
  valid_594364 = validateParameter(valid_594364, JInt, required = false, default = nil)
  if valid_594364 != nil:
    section.add "Port", valid_594364
  var valid_594365 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_594365 = validateParameter(valid_594365, JString, required = false,
                                 default = nil)
  if valid_594365 != nil:
    section.add "PreferredMaintenanceWindow", valid_594365
  var valid_594366 = formData.getOrDefault("PreferredBackupWindow")
  valid_594366 = validateParameter(valid_594366, JString, required = false,
                                 default = nil)
  if valid_594366 != nil:
    section.add "PreferredBackupWindow", valid_594366
  var valid_594367 = formData.getOrDefault("MasterUserPassword")
  valid_594367 = validateParameter(valid_594367, JString, required = false,
                                 default = nil)
  if valid_594367 != nil:
    section.add "MasterUserPassword", valid_594367
  var valid_594368 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_594368 = validateParameter(valid_594368, JArray, required = false,
                                 default = nil)
  if valid_594368 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_594368
  var valid_594369 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_594369 = validateParameter(valid_594369, JString, required = false,
                                 default = nil)
  if valid_594369 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_594369
  var valid_594370 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_594370 = validateParameter(valid_594370, JArray, required = false,
                                 default = nil)
  if valid_594370 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_594370
  var valid_594371 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_594371 = validateParameter(valid_594371, JString, required = false,
                                 default = nil)
  if valid_594371 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_594371
  var valid_594372 = formData.getOrDefault("EngineVersion")
  valid_594372 = validateParameter(valid_594372, JString, required = false,
                                 default = nil)
  if valid_594372 != nil:
    section.add "EngineVersion", valid_594372
  var valid_594373 = formData.getOrDefault("BacktrackWindow")
  valid_594373 = validateParameter(valid_594373, JInt, required = false, default = nil)
  if valid_594373 != nil:
    section.add "BacktrackWindow", valid_594373
  var valid_594374 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_594374 = validateParameter(valid_594374, JArray, required = false,
                                 default = nil)
  if valid_594374 != nil:
    section.add "VpcSecurityGroupIds", valid_594374
  var valid_594375 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_594375 = validateParameter(valid_594375, JBool, required = false, default = nil)
  if valid_594375 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_594375
  var valid_594376 = formData.getOrDefault("BackupRetentionPeriod")
  valid_594376 = validateParameter(valid_594376, JInt, required = false, default = nil)
  if valid_594376 != nil:
    section.add "BackupRetentionPeriod", valid_594376
  var valid_594377 = formData.getOrDefault("ApplyImmediately")
  valid_594377 = validateParameter(valid_594377, JBool, required = false, default = nil)
  if valid_594377 != nil:
    section.add "ApplyImmediately", valid_594377
  var valid_594378 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_594378 = validateParameter(valid_594378, JString, required = false,
                                 default = nil)
  if valid_594378 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_594378
  var valid_594379 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_594379 = validateParameter(valid_594379, JBool, required = false, default = nil)
  if valid_594379 != nil:
    section.add "AllowMajorVersionUpgrade", valid_594379
  var valid_594380 = formData.getOrDefault("EnableHttpEndpoint")
  valid_594380 = validateParameter(valid_594380, JBool, required = false, default = nil)
  if valid_594380 != nil:
    section.add "EnableHttpEndpoint", valid_594380
  var valid_594381 = formData.getOrDefault("OptionGroupName")
  valid_594381 = validateParameter(valid_594381, JString, required = false,
                                 default = nil)
  if valid_594381 != nil:
    section.add "OptionGroupName", valid_594381
  var valid_594382 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_594382 = validateParameter(valid_594382, JString, required = false,
                                 default = nil)
  if valid_594382 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_594382
  var valid_594383 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_594383 = validateParameter(valid_594383, JString, required = false,
                                 default = nil)
  if valid_594383 != nil:
    section.add "DBClusterParameterGroupName", valid_594383
  var valid_594384 = formData.getOrDefault("DBInstanceParameterGroupName")
  valid_594384 = validateParameter(valid_594384, JString, required = false,
                                 default = nil)
  if valid_594384 != nil:
    section.add "DBInstanceParameterGroupName", valid_594384
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_594385 = formData.getOrDefault("DBClusterIdentifier")
  valid_594385 = validateParameter(valid_594385, JString, required = true,
                                 default = nil)
  if valid_594385 != nil:
    section.add "DBClusterIdentifier", valid_594385
  var valid_594386 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_594386 = validateParameter(valid_594386, JString, required = false,
                                 default = nil)
  if valid_594386 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_594386
  var valid_594387 = formData.getOrDefault("DeletionProtection")
  valid_594387 = validateParameter(valid_594387, JBool, required = false, default = nil)
  if valid_594387 != nil:
    section.add "DeletionProtection", valid_594387
  var valid_594388 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_594388 = validateParameter(valid_594388, JBool, required = false, default = nil)
  if valid_594388 != nil:
    section.add "CopyTagsToSnapshot", valid_594388
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594389: Call_PostModifyDBCluster_594351; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594389.validator(path, query, header, formData, body)
  let scheme = call_594389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594389.url(scheme.get, call_594389.host, call_594389.base,
                         call_594389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594389, url, valid)

proc call*(call_594390: Call_PostModifyDBCluster_594351;
          DBClusterIdentifier: string; NewDBClusterIdentifier: string = "";
          Port: int = 0; PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; ApplyImmediately: bool = false;
          ScalingConfigurationMaxCapacity: string = "";
          Action: string = "ModifyDBCluster";
          AllowMajorVersionUpgrade: bool = false; EnableHttpEndpoint: bool = false;
          OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          DBClusterParameterGroupName: string = "";
          DBInstanceParameterGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationAutoPause: string = "";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Action: string (required)
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  var query_594391 = newJObject()
  var formData_594392 = newJObject()
  add(formData_594392, "NewDBClusterIdentifier",
      newJString(NewDBClusterIdentifier))
  add(formData_594392, "Port", newJInt(Port))
  add(formData_594392, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_594392, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_594392, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_594392.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_594392, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_594392.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_594392, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_594392, "EngineVersion", newJString(EngineVersion))
  add(formData_594392, "BacktrackWindow", newJInt(BacktrackWindow))
  if VpcSecurityGroupIds != nil:
    formData_594392.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_594392, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_594392, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_594392, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_594392, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_594391, "Action", newJString(Action))
  add(formData_594392, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_594392, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(formData_594392, "OptionGroupName", newJString(OptionGroupName))
  add(formData_594392, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_594392, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_594392, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  add(query_594391, "Version", newJString(Version))
  add(formData_594392, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_594392, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_594392, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_594392, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_594390.call(nil, query_594391, nil, formData_594392, nil)

var postModifyDBCluster* = Call_PostModifyDBCluster_594351(
    name: "postModifyDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBCluster",
    validator: validate_PostModifyDBCluster_594352, base: "/",
    url: url_PostModifyDBCluster_594353, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBCluster_594310 = ref object of OpenApiRestCall_590348
proc url_GetModifyDBCluster_594312(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBCluster_594311(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   Version: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_594313 = query.getOrDefault("DeletionProtection")
  valid_594313 = validateParameter(valid_594313, JBool, required = false, default = nil)
  if valid_594313 != nil:
    section.add "DeletionProtection", valid_594313
  var valid_594314 = query.getOrDefault("CopyTagsToSnapshot")
  valid_594314 = validateParameter(valid_594314, JBool, required = false, default = nil)
  if valid_594314 != nil:
    section.add "CopyTagsToSnapshot", valid_594314
  var valid_594315 = query.getOrDefault("EnableHttpEndpoint")
  valid_594315 = validateParameter(valid_594315, JBool, required = false, default = nil)
  if valid_594315 != nil:
    section.add "EnableHttpEndpoint", valid_594315
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_594316 = query.getOrDefault("DBClusterIdentifier")
  valid_594316 = validateParameter(valid_594316, JString, required = true,
                                 default = nil)
  if valid_594316 != nil:
    section.add "DBClusterIdentifier", valid_594316
  var valid_594317 = query.getOrDefault("BacktrackWindow")
  valid_594317 = validateParameter(valid_594317, JInt, required = false, default = nil)
  if valid_594317 != nil:
    section.add "BacktrackWindow", valid_594317
  var valid_594318 = query.getOrDefault("DBClusterParameterGroupName")
  valid_594318 = validateParameter(valid_594318, JString, required = false,
                                 default = nil)
  if valid_594318 != nil:
    section.add "DBClusterParameterGroupName", valid_594318
  var valid_594319 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_594319 = validateParameter(valid_594319, JArray, required = false,
                                 default = nil)
  if valid_594319 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_594319
  var valid_594320 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_594320 = validateParameter(valid_594320, JArray, required = false,
                                 default = nil)
  if valid_594320 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_594320
  var valid_594321 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_594321 = validateParameter(valid_594321, JString, required = false,
                                 default = nil)
  if valid_594321 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_594321
  var valid_594322 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_594322 = validateParameter(valid_594322, JString, required = false,
                                 default = nil)
  if valid_594322 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_594322
  var valid_594323 = query.getOrDefault("BackupRetentionPeriod")
  valid_594323 = validateParameter(valid_594323, JInt, required = false, default = nil)
  if valid_594323 != nil:
    section.add "BackupRetentionPeriod", valid_594323
  var valid_594324 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_594324 = validateParameter(valid_594324, JString, required = false,
                                 default = nil)
  if valid_594324 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_594324
  var valid_594325 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_594325 = validateParameter(valid_594325, JBool, required = false, default = nil)
  if valid_594325 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_594325
  var valid_594326 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_594326 = validateParameter(valid_594326, JString, required = false,
                                 default = nil)
  if valid_594326 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_594326
  var valid_594327 = query.getOrDefault("EngineVersion")
  valid_594327 = validateParameter(valid_594327, JString, required = false,
                                 default = nil)
  if valid_594327 != nil:
    section.add "EngineVersion", valid_594327
  var valid_594328 = query.getOrDefault("DBInstanceParameterGroupName")
  valid_594328 = validateParameter(valid_594328, JString, required = false,
                                 default = nil)
  if valid_594328 != nil:
    section.add "DBInstanceParameterGroupName", valid_594328
  var valid_594329 = query.getOrDefault("Action")
  valid_594329 = validateParameter(valid_594329, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_594329 != nil:
    section.add "Action", valid_594329
  var valid_594330 = query.getOrDefault("ApplyImmediately")
  valid_594330 = validateParameter(valid_594330, JBool, required = false, default = nil)
  if valid_594330 != nil:
    section.add "ApplyImmediately", valid_594330
  var valid_594331 = query.getOrDefault("NewDBClusterIdentifier")
  valid_594331 = validateParameter(valid_594331, JString, required = false,
                                 default = nil)
  if valid_594331 != nil:
    section.add "NewDBClusterIdentifier", valid_594331
  var valid_594332 = query.getOrDefault("Port")
  valid_594332 = validateParameter(valid_594332, JInt, required = false, default = nil)
  if valid_594332 != nil:
    section.add "Port", valid_594332
  var valid_594333 = query.getOrDefault("VpcSecurityGroupIds")
  valid_594333 = validateParameter(valid_594333, JArray, required = false,
                                 default = nil)
  if valid_594333 != nil:
    section.add "VpcSecurityGroupIds", valid_594333
  var valid_594334 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_594334 = validateParameter(valid_594334, JBool, required = false, default = nil)
  if valid_594334 != nil:
    section.add "AllowMajorVersionUpgrade", valid_594334
  var valid_594335 = query.getOrDefault("MasterUserPassword")
  valid_594335 = validateParameter(valid_594335, JString, required = false,
                                 default = nil)
  if valid_594335 != nil:
    section.add "MasterUserPassword", valid_594335
  var valid_594336 = query.getOrDefault("OptionGroupName")
  valid_594336 = validateParameter(valid_594336, JString, required = false,
                                 default = nil)
  if valid_594336 != nil:
    section.add "OptionGroupName", valid_594336
  var valid_594337 = query.getOrDefault("Version")
  valid_594337 = validateParameter(valid_594337, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594337 != nil:
    section.add "Version", valid_594337
  var valid_594338 = query.getOrDefault("PreferredBackupWindow")
  valid_594338 = validateParameter(valid_594338, JString, required = false,
                                 default = nil)
  if valid_594338 != nil:
    section.add "PreferredBackupWindow", valid_594338
  var valid_594339 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_594339 = validateParameter(valid_594339, JString, required = false,
                                 default = nil)
  if valid_594339 != nil:
    section.add "PreferredMaintenanceWindow", valid_594339
  var valid_594340 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_594340 = validateParameter(valid_594340, JString, required = false,
                                 default = nil)
  if valid_594340 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_594340
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594341 = header.getOrDefault("X-Amz-Signature")
  valid_594341 = validateParameter(valid_594341, JString, required = false,
                                 default = nil)
  if valid_594341 != nil:
    section.add "X-Amz-Signature", valid_594341
  var valid_594342 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594342 = validateParameter(valid_594342, JString, required = false,
                                 default = nil)
  if valid_594342 != nil:
    section.add "X-Amz-Content-Sha256", valid_594342
  var valid_594343 = header.getOrDefault("X-Amz-Date")
  valid_594343 = validateParameter(valid_594343, JString, required = false,
                                 default = nil)
  if valid_594343 != nil:
    section.add "X-Amz-Date", valid_594343
  var valid_594344 = header.getOrDefault("X-Amz-Credential")
  valid_594344 = validateParameter(valid_594344, JString, required = false,
                                 default = nil)
  if valid_594344 != nil:
    section.add "X-Amz-Credential", valid_594344
  var valid_594345 = header.getOrDefault("X-Amz-Security-Token")
  valid_594345 = validateParameter(valid_594345, JString, required = false,
                                 default = nil)
  if valid_594345 != nil:
    section.add "X-Amz-Security-Token", valid_594345
  var valid_594346 = header.getOrDefault("X-Amz-Algorithm")
  valid_594346 = validateParameter(valid_594346, JString, required = false,
                                 default = nil)
  if valid_594346 != nil:
    section.add "X-Amz-Algorithm", valid_594346
  var valid_594347 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594347 = validateParameter(valid_594347, JString, required = false,
                                 default = nil)
  if valid_594347 != nil:
    section.add "X-Amz-SignedHeaders", valid_594347
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594348: Call_GetModifyDBCluster_594310; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594348.validator(path, query, header, formData, body)
  let scheme = call_594348.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594348.url(scheme.get, call_594348.host, call_594348.base,
                         call_594348.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594348, url, valid)

proc call*(call_594349: Call_GetModifyDBCluster_594310;
          DBClusterIdentifier: string; DeletionProtection: bool = false;
          CopyTagsToSnapshot: bool = false; EnableHttpEndpoint: bool = false;
          BacktrackWindow: int = 0; DBClusterParameterGroupName: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          BackupRetentionPeriod: int = 0;
          ScalingConfigurationMinCapacity: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          EngineVersion: string = ""; DBInstanceParameterGroupName: string = "";
          Action: string = "ModifyDBCluster"; ApplyImmediately: bool = false;
          NewDBClusterIdentifier: string = ""; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          AllowMajorVersionUpgrade: bool = false; MasterUserPassword: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = "";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   Version: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_594350 = newJObject()
  add(query_594350, "DeletionProtection", newJBool(DeletionProtection))
  add(query_594350, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_594350, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_594350, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_594350, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_594350, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_594350.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_594350.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_594350, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_594350, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_594350, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_594350, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_594350, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_594350, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_594350, "EngineVersion", newJString(EngineVersion))
  add(query_594350, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  add(query_594350, "Action", newJString(Action))
  add(query_594350, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_594350, "NewDBClusterIdentifier", newJString(NewDBClusterIdentifier))
  add(query_594350, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_594350.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_594350, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_594350, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_594350, "OptionGroupName", newJString(OptionGroupName))
  add(query_594350, "Version", newJString(Version))
  add(query_594350, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_594350, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_594350, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_594349.call(nil, query_594350, nil, nil, nil)

var getModifyDBCluster* = Call_GetModifyDBCluster_594310(
    name: "getModifyDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBCluster", validator: validate_GetModifyDBCluster_594311,
    base: "/", url: url_GetModifyDBCluster_594312,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterEndpoint_594412 = ref object of OpenApiRestCall_590348
proc url_PostModifyDBClusterEndpoint_594414(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBClusterEndpoint_594413(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594415 = query.getOrDefault("Action")
  valid_594415 = validateParameter(valid_594415, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_594415 != nil:
    section.add "Action", valid_594415
  var valid_594416 = query.getOrDefault("Version")
  valid_594416 = validateParameter(valid_594416, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594416 != nil:
    section.add "Version", valid_594416
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594417 = header.getOrDefault("X-Amz-Signature")
  valid_594417 = validateParameter(valid_594417, JString, required = false,
                                 default = nil)
  if valid_594417 != nil:
    section.add "X-Amz-Signature", valid_594417
  var valid_594418 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594418 = validateParameter(valid_594418, JString, required = false,
                                 default = nil)
  if valid_594418 != nil:
    section.add "X-Amz-Content-Sha256", valid_594418
  var valid_594419 = header.getOrDefault("X-Amz-Date")
  valid_594419 = validateParameter(valid_594419, JString, required = false,
                                 default = nil)
  if valid_594419 != nil:
    section.add "X-Amz-Date", valid_594419
  var valid_594420 = header.getOrDefault("X-Amz-Credential")
  valid_594420 = validateParameter(valid_594420, JString, required = false,
                                 default = nil)
  if valid_594420 != nil:
    section.add "X-Amz-Credential", valid_594420
  var valid_594421 = header.getOrDefault("X-Amz-Security-Token")
  valid_594421 = validateParameter(valid_594421, JString, required = false,
                                 default = nil)
  if valid_594421 != nil:
    section.add "X-Amz-Security-Token", valid_594421
  var valid_594422 = header.getOrDefault("X-Amz-Algorithm")
  valid_594422 = validateParameter(valid_594422, JString, required = false,
                                 default = nil)
  if valid_594422 != nil:
    section.add "X-Amz-Algorithm", valid_594422
  var valid_594423 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594423 = validateParameter(valid_594423, JString, required = false,
                                 default = nil)
  if valid_594423 != nil:
    section.add "X-Amz-SignedHeaders", valid_594423
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_594424 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_594424 = validateParameter(valid_594424, JString, required = true,
                                 default = nil)
  if valid_594424 != nil:
    section.add "DBClusterEndpointIdentifier", valid_594424
  var valid_594425 = formData.getOrDefault("StaticMembers")
  valid_594425 = validateParameter(valid_594425, JArray, required = false,
                                 default = nil)
  if valid_594425 != nil:
    section.add "StaticMembers", valid_594425
  var valid_594426 = formData.getOrDefault("EndpointType")
  valid_594426 = validateParameter(valid_594426, JString, required = false,
                                 default = nil)
  if valid_594426 != nil:
    section.add "EndpointType", valid_594426
  var valid_594427 = formData.getOrDefault("ExcludedMembers")
  valid_594427 = validateParameter(valid_594427, JArray, required = false,
                                 default = nil)
  if valid_594427 != nil:
    section.add "ExcludedMembers", valid_594427
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594428: Call_PostModifyDBClusterEndpoint_594412; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594428.validator(path, query, header, formData, body)
  let scheme = call_594428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594428.url(scheme.get, call_594428.host, call_594428.base,
                         call_594428.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594428, url, valid)

proc call*(call_594429: Call_PostModifyDBClusterEndpoint_594412;
          DBClusterEndpointIdentifier: string; StaticMembers: JsonNode = nil;
          Action: string = "ModifyDBClusterEndpoint"; EndpointType: string = "";
          ExcludedMembers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: string (required)
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: string (required)
  var query_594430 = newJObject()
  var formData_594431 = newJObject()
  add(formData_594431, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_594431.add "StaticMembers", StaticMembers
  add(query_594430, "Action", newJString(Action))
  add(formData_594431, "EndpointType", newJString(EndpointType))
  if ExcludedMembers != nil:
    formData_594431.add "ExcludedMembers", ExcludedMembers
  add(query_594430, "Version", newJString(Version))
  result = call_594429.call(nil, query_594430, nil, formData_594431, nil)

var postModifyDBClusterEndpoint* = Call_PostModifyDBClusterEndpoint_594412(
    name: "postModifyDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_PostModifyDBClusterEndpoint_594413, base: "/",
    url: url_PostModifyDBClusterEndpoint_594414,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterEndpoint_594393 = ref object of OpenApiRestCall_590348
proc url_GetModifyDBClusterEndpoint_594395(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBClusterEndpoint_594394(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_594396 = query.getOrDefault("ExcludedMembers")
  valid_594396 = validateParameter(valid_594396, JArray, required = false,
                                 default = nil)
  if valid_594396 != nil:
    section.add "ExcludedMembers", valid_594396
  assert query != nil, "query argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_594397 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_594397 = validateParameter(valid_594397, JString, required = true,
                                 default = nil)
  if valid_594397 != nil:
    section.add "DBClusterEndpointIdentifier", valid_594397
  var valid_594398 = query.getOrDefault("StaticMembers")
  valid_594398 = validateParameter(valid_594398, JArray, required = false,
                                 default = nil)
  if valid_594398 != nil:
    section.add "StaticMembers", valid_594398
  var valid_594399 = query.getOrDefault("EndpointType")
  valid_594399 = validateParameter(valid_594399, JString, required = false,
                                 default = nil)
  if valid_594399 != nil:
    section.add "EndpointType", valid_594399
  var valid_594400 = query.getOrDefault("Action")
  valid_594400 = validateParameter(valid_594400, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_594400 != nil:
    section.add "Action", valid_594400
  var valid_594401 = query.getOrDefault("Version")
  valid_594401 = validateParameter(valid_594401, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594401 != nil:
    section.add "Version", valid_594401
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594402 = header.getOrDefault("X-Amz-Signature")
  valid_594402 = validateParameter(valid_594402, JString, required = false,
                                 default = nil)
  if valid_594402 != nil:
    section.add "X-Amz-Signature", valid_594402
  var valid_594403 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594403 = validateParameter(valid_594403, JString, required = false,
                                 default = nil)
  if valid_594403 != nil:
    section.add "X-Amz-Content-Sha256", valid_594403
  var valid_594404 = header.getOrDefault("X-Amz-Date")
  valid_594404 = validateParameter(valid_594404, JString, required = false,
                                 default = nil)
  if valid_594404 != nil:
    section.add "X-Amz-Date", valid_594404
  var valid_594405 = header.getOrDefault("X-Amz-Credential")
  valid_594405 = validateParameter(valid_594405, JString, required = false,
                                 default = nil)
  if valid_594405 != nil:
    section.add "X-Amz-Credential", valid_594405
  var valid_594406 = header.getOrDefault("X-Amz-Security-Token")
  valid_594406 = validateParameter(valid_594406, JString, required = false,
                                 default = nil)
  if valid_594406 != nil:
    section.add "X-Amz-Security-Token", valid_594406
  var valid_594407 = header.getOrDefault("X-Amz-Algorithm")
  valid_594407 = validateParameter(valid_594407, JString, required = false,
                                 default = nil)
  if valid_594407 != nil:
    section.add "X-Amz-Algorithm", valid_594407
  var valid_594408 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594408 = validateParameter(valid_594408, JString, required = false,
                                 default = nil)
  if valid_594408 != nil:
    section.add "X-Amz-SignedHeaders", valid_594408
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594409: Call_GetModifyDBClusterEndpoint_594393; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594409.validator(path, query, header, formData, body)
  let scheme = call_594409.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594409.url(scheme.get, call_594409.host, call_594409.base,
                         call_594409.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594409, url, valid)

proc call*(call_594410: Call_GetModifyDBClusterEndpoint_594393;
          DBClusterEndpointIdentifier: string; ExcludedMembers: JsonNode = nil;
          StaticMembers: JsonNode = nil; EndpointType: string = "";
          Action: string = "ModifyDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594411 = newJObject()
  if ExcludedMembers != nil:
    query_594411.add "ExcludedMembers", ExcludedMembers
  add(query_594411, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    query_594411.add "StaticMembers", StaticMembers
  add(query_594411, "EndpointType", newJString(EndpointType))
  add(query_594411, "Action", newJString(Action))
  add(query_594411, "Version", newJString(Version))
  result = call_594410.call(nil, query_594411, nil, nil, nil)

var getModifyDBClusterEndpoint* = Call_GetModifyDBClusterEndpoint_594393(
    name: "getModifyDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_GetModifyDBClusterEndpoint_594394, base: "/",
    url: url_GetModifyDBClusterEndpoint_594395,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterParameterGroup_594449 = ref object of OpenApiRestCall_590348
proc url_PostModifyDBClusterParameterGroup_594451(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBClusterParameterGroup_594450(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594452 = query.getOrDefault("Action")
  valid_594452 = validateParameter(valid_594452, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_594452 != nil:
    section.add "Action", valid_594452
  var valid_594453 = query.getOrDefault("Version")
  valid_594453 = validateParameter(valid_594453, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594453 != nil:
    section.add "Version", valid_594453
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594454 = header.getOrDefault("X-Amz-Signature")
  valid_594454 = validateParameter(valid_594454, JString, required = false,
                                 default = nil)
  if valid_594454 != nil:
    section.add "X-Amz-Signature", valid_594454
  var valid_594455 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594455 = validateParameter(valid_594455, JString, required = false,
                                 default = nil)
  if valid_594455 != nil:
    section.add "X-Amz-Content-Sha256", valid_594455
  var valid_594456 = header.getOrDefault("X-Amz-Date")
  valid_594456 = validateParameter(valid_594456, JString, required = false,
                                 default = nil)
  if valid_594456 != nil:
    section.add "X-Amz-Date", valid_594456
  var valid_594457 = header.getOrDefault("X-Amz-Credential")
  valid_594457 = validateParameter(valid_594457, JString, required = false,
                                 default = nil)
  if valid_594457 != nil:
    section.add "X-Amz-Credential", valid_594457
  var valid_594458 = header.getOrDefault("X-Amz-Security-Token")
  valid_594458 = validateParameter(valid_594458, JString, required = false,
                                 default = nil)
  if valid_594458 != nil:
    section.add "X-Amz-Security-Token", valid_594458
  var valid_594459 = header.getOrDefault("X-Amz-Algorithm")
  valid_594459 = validateParameter(valid_594459, JString, required = false,
                                 default = nil)
  if valid_594459 != nil:
    section.add "X-Amz-Algorithm", valid_594459
  var valid_594460 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594460 = validateParameter(valid_594460, JString, required = false,
                                 default = nil)
  if valid_594460 != nil:
    section.add "X-Amz-SignedHeaders", valid_594460
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Parameters` field"
  var valid_594461 = formData.getOrDefault("Parameters")
  valid_594461 = validateParameter(valid_594461, JArray, required = true, default = nil)
  if valid_594461 != nil:
    section.add "Parameters", valid_594461
  var valid_594462 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_594462 = validateParameter(valid_594462, JString, required = true,
                                 default = nil)
  if valid_594462 != nil:
    section.add "DBClusterParameterGroupName", valid_594462
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594463: Call_PostModifyDBClusterParameterGroup_594449;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594463.validator(path, query, header, formData, body)
  let scheme = call_594463.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594463.url(scheme.get, call_594463.host, call_594463.base,
                         call_594463.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594463, url, valid)

proc call*(call_594464: Call_PostModifyDBClusterParameterGroup_594449;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Version: string (required)
  var query_594465 = newJObject()
  var formData_594466 = newJObject()
  add(query_594465, "Action", newJString(Action))
  if Parameters != nil:
    formData_594466.add "Parameters", Parameters
  add(formData_594466, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_594465, "Version", newJString(Version))
  result = call_594464.call(nil, query_594465, nil, formData_594466, nil)

var postModifyDBClusterParameterGroup* = Call_PostModifyDBClusterParameterGroup_594449(
    name: "postModifyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_PostModifyDBClusterParameterGroup_594450, base: "/",
    url: url_PostModifyDBClusterParameterGroup_594451,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterParameterGroup_594432 = ref object of OpenApiRestCall_590348
proc url_GetModifyDBClusterParameterGroup_594434(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBClusterParameterGroup_594433(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Parameters` field"
  var valid_594435 = query.getOrDefault("Parameters")
  valid_594435 = validateParameter(valid_594435, JArray, required = true, default = nil)
  if valid_594435 != nil:
    section.add "Parameters", valid_594435
  var valid_594436 = query.getOrDefault("DBClusterParameterGroupName")
  valid_594436 = validateParameter(valid_594436, JString, required = true,
                                 default = nil)
  if valid_594436 != nil:
    section.add "DBClusterParameterGroupName", valid_594436
  var valid_594437 = query.getOrDefault("Action")
  valid_594437 = validateParameter(valid_594437, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_594437 != nil:
    section.add "Action", valid_594437
  var valid_594438 = query.getOrDefault("Version")
  valid_594438 = validateParameter(valid_594438, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594438 != nil:
    section.add "Version", valid_594438
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594439 = header.getOrDefault("X-Amz-Signature")
  valid_594439 = validateParameter(valid_594439, JString, required = false,
                                 default = nil)
  if valid_594439 != nil:
    section.add "X-Amz-Signature", valid_594439
  var valid_594440 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594440 = validateParameter(valid_594440, JString, required = false,
                                 default = nil)
  if valid_594440 != nil:
    section.add "X-Amz-Content-Sha256", valid_594440
  var valid_594441 = header.getOrDefault("X-Amz-Date")
  valid_594441 = validateParameter(valid_594441, JString, required = false,
                                 default = nil)
  if valid_594441 != nil:
    section.add "X-Amz-Date", valid_594441
  var valid_594442 = header.getOrDefault("X-Amz-Credential")
  valid_594442 = validateParameter(valid_594442, JString, required = false,
                                 default = nil)
  if valid_594442 != nil:
    section.add "X-Amz-Credential", valid_594442
  var valid_594443 = header.getOrDefault("X-Amz-Security-Token")
  valid_594443 = validateParameter(valid_594443, JString, required = false,
                                 default = nil)
  if valid_594443 != nil:
    section.add "X-Amz-Security-Token", valid_594443
  var valid_594444 = header.getOrDefault("X-Amz-Algorithm")
  valid_594444 = validateParameter(valid_594444, JString, required = false,
                                 default = nil)
  if valid_594444 != nil:
    section.add "X-Amz-Algorithm", valid_594444
  var valid_594445 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594445 = validateParameter(valid_594445, JString, required = false,
                                 default = nil)
  if valid_594445 != nil:
    section.add "X-Amz-SignedHeaders", valid_594445
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594446: Call_GetModifyDBClusterParameterGroup_594432;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594446.validator(path, query, header, formData, body)
  let scheme = call_594446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594446.url(scheme.get, call_594446.host, call_594446.base,
                         call_594446.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594446, url, valid)

proc call*(call_594447: Call_GetModifyDBClusterParameterGroup_594432;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594448 = newJObject()
  if Parameters != nil:
    query_594448.add "Parameters", Parameters
  add(query_594448, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_594448, "Action", newJString(Action))
  add(query_594448, "Version", newJString(Version))
  result = call_594447.call(nil, query_594448, nil, nil, nil)

var getModifyDBClusterParameterGroup* = Call_GetModifyDBClusterParameterGroup_594432(
    name: "getModifyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_GetModifyDBClusterParameterGroup_594433, base: "/",
    url: url_GetModifyDBClusterParameterGroup_594434,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterSnapshotAttribute_594486 = ref object of OpenApiRestCall_590348
proc url_PostModifyDBClusterSnapshotAttribute_594488(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBClusterSnapshotAttribute_594487(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594489 = query.getOrDefault("Action")
  valid_594489 = validateParameter(valid_594489, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_594489 != nil:
    section.add "Action", valid_594489
  var valid_594490 = query.getOrDefault("Version")
  valid_594490 = validateParameter(valid_594490, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594490 != nil:
    section.add "Version", valid_594490
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594491 = header.getOrDefault("X-Amz-Signature")
  valid_594491 = validateParameter(valid_594491, JString, required = false,
                                 default = nil)
  if valid_594491 != nil:
    section.add "X-Amz-Signature", valid_594491
  var valid_594492 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594492 = validateParameter(valid_594492, JString, required = false,
                                 default = nil)
  if valid_594492 != nil:
    section.add "X-Amz-Content-Sha256", valid_594492
  var valid_594493 = header.getOrDefault("X-Amz-Date")
  valid_594493 = validateParameter(valid_594493, JString, required = false,
                                 default = nil)
  if valid_594493 != nil:
    section.add "X-Amz-Date", valid_594493
  var valid_594494 = header.getOrDefault("X-Amz-Credential")
  valid_594494 = validateParameter(valid_594494, JString, required = false,
                                 default = nil)
  if valid_594494 != nil:
    section.add "X-Amz-Credential", valid_594494
  var valid_594495 = header.getOrDefault("X-Amz-Security-Token")
  valid_594495 = validateParameter(valid_594495, JString, required = false,
                                 default = nil)
  if valid_594495 != nil:
    section.add "X-Amz-Security-Token", valid_594495
  var valid_594496 = header.getOrDefault("X-Amz-Algorithm")
  valid_594496 = validateParameter(valid_594496, JString, required = false,
                                 default = nil)
  if valid_594496 != nil:
    section.add "X-Amz-Algorithm", valid_594496
  var valid_594497 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594497 = validateParameter(valid_594497, JString, required = false,
                                 default = nil)
  if valid_594497 != nil:
    section.add "X-Amz-SignedHeaders", valid_594497
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_594498 = formData.getOrDefault("AttributeName")
  valid_594498 = validateParameter(valid_594498, JString, required = true,
                                 default = nil)
  if valid_594498 != nil:
    section.add "AttributeName", valid_594498
  var valid_594499 = formData.getOrDefault("ValuesToAdd")
  valid_594499 = validateParameter(valid_594499, JArray, required = false,
                                 default = nil)
  if valid_594499 != nil:
    section.add "ValuesToAdd", valid_594499
  var valid_594500 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_594500 = validateParameter(valid_594500, JString, required = true,
                                 default = nil)
  if valid_594500 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_594500
  var valid_594501 = formData.getOrDefault("ValuesToRemove")
  valid_594501 = validateParameter(valid_594501, JArray, required = false,
                                 default = nil)
  if valid_594501 != nil:
    section.add "ValuesToRemove", valid_594501
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594502: Call_PostModifyDBClusterSnapshotAttribute_594486;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594502.validator(path, query, header, formData, body)
  let scheme = call_594502.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594502.url(scheme.get, call_594502.host, call_594502.base,
                         call_594502.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594502, url, valid)

proc call*(call_594503: Call_PostModifyDBClusterSnapshotAttribute_594486;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: string (required)
  var query_594504 = newJObject()
  var formData_594505 = newJObject()
  add(formData_594505, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    formData_594505.add "ValuesToAdd", ValuesToAdd
  add(formData_594505, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_594504, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_594505.add "ValuesToRemove", ValuesToRemove
  add(query_594504, "Version", newJString(Version))
  result = call_594503.call(nil, query_594504, nil, formData_594505, nil)

var postModifyDBClusterSnapshotAttribute* = Call_PostModifyDBClusterSnapshotAttribute_594486(
    name: "postModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_PostModifyDBClusterSnapshotAttribute_594487, base: "/",
    url: url_PostModifyDBClusterSnapshotAttribute_594488,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterSnapshotAttribute_594467 = ref object of OpenApiRestCall_590348
proc url_GetModifyDBClusterSnapshotAttribute_594469(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBClusterSnapshotAttribute_594468(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: JString (required)
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_594470 = query.getOrDefault("ValuesToRemove")
  valid_594470 = validateParameter(valid_594470, JArray, required = false,
                                 default = nil)
  if valid_594470 != nil:
    section.add "ValuesToRemove", valid_594470
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_594471 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_594471 = validateParameter(valid_594471, JString, required = true,
                                 default = nil)
  if valid_594471 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_594471
  var valid_594472 = query.getOrDefault("Action")
  valid_594472 = validateParameter(valid_594472, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_594472 != nil:
    section.add "Action", valid_594472
  var valid_594473 = query.getOrDefault("AttributeName")
  valid_594473 = validateParameter(valid_594473, JString, required = true,
                                 default = nil)
  if valid_594473 != nil:
    section.add "AttributeName", valid_594473
  var valid_594474 = query.getOrDefault("ValuesToAdd")
  valid_594474 = validateParameter(valid_594474, JArray, required = false,
                                 default = nil)
  if valid_594474 != nil:
    section.add "ValuesToAdd", valid_594474
  var valid_594475 = query.getOrDefault("Version")
  valid_594475 = validateParameter(valid_594475, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594475 != nil:
    section.add "Version", valid_594475
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594476 = header.getOrDefault("X-Amz-Signature")
  valid_594476 = validateParameter(valid_594476, JString, required = false,
                                 default = nil)
  if valid_594476 != nil:
    section.add "X-Amz-Signature", valid_594476
  var valid_594477 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594477 = validateParameter(valid_594477, JString, required = false,
                                 default = nil)
  if valid_594477 != nil:
    section.add "X-Amz-Content-Sha256", valid_594477
  var valid_594478 = header.getOrDefault("X-Amz-Date")
  valid_594478 = validateParameter(valid_594478, JString, required = false,
                                 default = nil)
  if valid_594478 != nil:
    section.add "X-Amz-Date", valid_594478
  var valid_594479 = header.getOrDefault("X-Amz-Credential")
  valid_594479 = validateParameter(valid_594479, JString, required = false,
                                 default = nil)
  if valid_594479 != nil:
    section.add "X-Amz-Credential", valid_594479
  var valid_594480 = header.getOrDefault("X-Amz-Security-Token")
  valid_594480 = validateParameter(valid_594480, JString, required = false,
                                 default = nil)
  if valid_594480 != nil:
    section.add "X-Amz-Security-Token", valid_594480
  var valid_594481 = header.getOrDefault("X-Amz-Algorithm")
  valid_594481 = validateParameter(valid_594481, JString, required = false,
                                 default = nil)
  if valid_594481 != nil:
    section.add "X-Amz-Algorithm", valid_594481
  var valid_594482 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594482 = validateParameter(valid_594482, JString, required = false,
                                 default = nil)
  if valid_594482 != nil:
    section.add "X-Amz-SignedHeaders", valid_594482
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594483: Call_GetModifyDBClusterSnapshotAttribute_594467;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594483.validator(path, query, header, formData, body)
  let scheme = call_594483.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594483.url(scheme.get, call_594483.host, call_594483.base,
                         call_594483.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594483, url, valid)

proc call*(call_594484: Call_GetModifyDBClusterSnapshotAttribute_594467;
          DBClusterSnapshotIdentifier: string; AttributeName: string;
          ValuesToRemove: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToAdd: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_594485 = newJObject()
  if ValuesToRemove != nil:
    query_594485.add "ValuesToRemove", ValuesToRemove
  add(query_594485, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_594485, "Action", newJString(Action))
  add(query_594485, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_594485.add "ValuesToAdd", ValuesToAdd
  add(query_594485, "Version", newJString(Version))
  result = call_594484.call(nil, query_594485, nil, nil, nil)

var getModifyDBClusterSnapshotAttribute* = Call_GetModifyDBClusterSnapshotAttribute_594467(
    name: "getModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_GetModifyDBClusterSnapshotAttribute_594468, base: "/",
    url: url_GetModifyDBClusterSnapshotAttribute_594469,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBInstance_594563 = ref object of OpenApiRestCall_590348
proc url_PostModifyDBInstance_594565(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBInstance_594564(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594566 = query.getOrDefault("Action")
  valid_594566 = validateParameter(valid_594566, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_594566 != nil:
    section.add "Action", valid_594566
  var valid_594567 = query.getOrDefault("Version")
  valid_594567 = validateParameter(valid_594567, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594567 != nil:
    section.add "Version", valid_594567
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_594568 = header.getOrDefault("X-Amz-Security-Token")
  valid_594568 = validateParameter(valid_594568, JString, required = false,
                                 default = nil)
  if valid_594568 != nil:
    section.add "X-Amz-Security-Token", valid_594568
  var valid_594569 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594569 = validateParameter(valid_594569, JString, required = false,
                                 default = nil)
  if valid_594569 != nil:
    section.add "X-Amz-SignedHeaders", valid_594569
  var valid_594570 = header.getOrDefault("X-Amz-Signature")
  valid_594570 = validateParameter(valid_594570, JString, required = false,
                                 default = nil)
  if valid_594570 != nil:
    section.add "X-Amz-Signature", valid_594570
  var valid_594571 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594571 = validateParameter(valid_594571, JString, required = false,
                                 default = nil)
  if valid_594571 != nil:
    section.add "X-Amz-Content-Sha256", valid_594571
  var valid_594572 = header.getOrDefault("X-Amz-Date")
  valid_594572 = validateParameter(valid_594572, JString, required = false,
                                 default = nil)
  if valid_594572 != nil:
    section.add "X-Amz-Date", valid_594572
  var valid_594573 = header.getOrDefault("X-Amz-Credential")
  valid_594573 = validateParameter(valid_594573, JString, required = false,
                                 default = nil)
  if valid_594573 != nil:
    section.add "X-Amz-Credential", valid_594573
  var valid_594574 = header.getOrDefault("X-Amz-Algorithm")
  valid_594574 = validateParameter(valid_594574, JString, required = false,
                                 default = nil)
  if valid_594574 != nil:
    section.add "X-Amz-Algorithm", valid_594574
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance is not in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  section = newJObject()
  var valid_594575 = formData.getOrDefault("PromotionTier")
  valid_594575 = validateParameter(valid_594575, JInt, required = false, default = nil)
  if valid_594575 != nil:
    section.add "PromotionTier", valid_594575
  var valid_594576 = formData.getOrDefault("MultiAZ")
  valid_594576 = validateParameter(valid_594576, JBool, required = false, default = nil)
  if valid_594576 != nil:
    section.add "MultiAZ", valid_594576
  var valid_594577 = formData.getOrDefault("MonitoringRoleArn")
  valid_594577 = validateParameter(valid_594577, JString, required = false,
                                 default = nil)
  if valid_594577 != nil:
    section.add "MonitoringRoleArn", valid_594577
  var valid_594578 = formData.getOrDefault("CACertificateIdentifier")
  valid_594578 = validateParameter(valid_594578, JString, required = false,
                                 default = nil)
  if valid_594578 != nil:
    section.add "CACertificateIdentifier", valid_594578
  var valid_594579 = formData.getOrDefault("MonitoringInterval")
  valid_594579 = validateParameter(valid_594579, JInt, required = false, default = nil)
  if valid_594579 != nil:
    section.add "MonitoringInterval", valid_594579
  var valid_594580 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_594580 = validateParameter(valid_594580, JArray, required = false,
                                 default = nil)
  if valid_594580 != nil:
    section.add "VpcSecurityGroupIds", valid_594580
  var valid_594581 = formData.getOrDefault("EnablePerformanceInsights")
  valid_594581 = validateParameter(valid_594581, JBool, required = false, default = nil)
  if valid_594581 != nil:
    section.add "EnablePerformanceInsights", valid_594581
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_594582 = formData.getOrDefault("DBInstanceIdentifier")
  valid_594582 = validateParameter(valid_594582, JString, required = true,
                                 default = nil)
  if valid_594582 != nil:
    section.add "DBInstanceIdentifier", valid_594582
  var valid_594583 = formData.getOrDefault("TdeCredentialArn")
  valid_594583 = validateParameter(valid_594583, JString, required = false,
                                 default = nil)
  if valid_594583 != nil:
    section.add "TdeCredentialArn", valid_594583
  var valid_594584 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_594584 = validateParameter(valid_594584, JInt, required = false, default = nil)
  if valid_594584 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_594584
  var valid_594585 = formData.getOrDefault("DBSubnetGroupName")
  valid_594585 = validateParameter(valid_594585, JString, required = false,
                                 default = nil)
  if valid_594585 != nil:
    section.add "DBSubnetGroupName", valid_594585
  var valid_594586 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_594586 = validateParameter(valid_594586, JBool, required = false, default = nil)
  if valid_594586 != nil:
    section.add "AllowMajorVersionUpgrade", valid_594586
  var valid_594587 = formData.getOrDefault("StorageType")
  valid_594587 = validateParameter(valid_594587, JString, required = false,
                                 default = nil)
  if valid_594587 != nil:
    section.add "StorageType", valid_594587
  var valid_594588 = formData.getOrDefault("MaxAllocatedStorage")
  valid_594588 = validateParameter(valid_594588, JInt, required = false, default = nil)
  if valid_594588 != nil:
    section.add "MaxAllocatedStorage", valid_594588
  var valid_594589 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_594589 = validateParameter(valid_594589, JBool, required = false, default = nil)
  if valid_594589 != nil:
    section.add "CopyTagsToSnapshot", valid_594589
  var valid_594590 = formData.getOrDefault("DeletionProtection")
  valid_594590 = validateParameter(valid_594590, JBool, required = false, default = nil)
  if valid_594590 != nil:
    section.add "DeletionProtection", valid_594590
  var valid_594591 = formData.getOrDefault("ProcessorFeatures")
  valid_594591 = validateParameter(valid_594591, JArray, required = false,
                                 default = nil)
  if valid_594591 != nil:
    section.add "ProcessorFeatures", valid_594591
  var valid_594592 = formData.getOrDefault("AllocatedStorage")
  valid_594592 = validateParameter(valid_594592, JInt, required = false, default = nil)
  if valid_594592 != nil:
    section.add "AllocatedStorage", valid_594592
  var valid_594593 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_594593 = validateParameter(valid_594593, JString, required = false,
                                 default = nil)
  if valid_594593 != nil:
    section.add "PreferredMaintenanceWindow", valid_594593
  var valid_594594 = formData.getOrDefault("DBInstanceClass")
  valid_594594 = validateParameter(valid_594594, JString, required = false,
                                 default = nil)
  if valid_594594 != nil:
    section.add "DBInstanceClass", valid_594594
  var valid_594595 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_594595 = validateParameter(valid_594595, JBool, required = false, default = nil)
  if valid_594595 != nil:
    section.add "UseDefaultProcessorFeatures", valid_594595
  var valid_594596 = formData.getOrDefault("PreferredBackupWindow")
  valid_594596 = validateParameter(valid_594596, JString, required = false,
                                 default = nil)
  if valid_594596 != nil:
    section.add "PreferredBackupWindow", valid_594596
  var valid_594597 = formData.getOrDefault("MasterUserPassword")
  valid_594597 = validateParameter(valid_594597, JString, required = false,
                                 default = nil)
  if valid_594597 != nil:
    section.add "MasterUserPassword", valid_594597
  var valid_594598 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_594598 = validateParameter(valid_594598, JArray, required = false,
                                 default = nil)
  if valid_594598 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_594598
  var valid_594599 = formData.getOrDefault("Domain")
  valid_594599 = validateParameter(valid_594599, JString, required = false,
                                 default = nil)
  if valid_594599 != nil:
    section.add "Domain", valid_594599
  var valid_594600 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_594600 = validateParameter(valid_594600, JArray, required = false,
                                 default = nil)
  if valid_594600 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_594600
  var valid_594601 = formData.getOrDefault("DBParameterGroupName")
  valid_594601 = validateParameter(valid_594601, JString, required = false,
                                 default = nil)
  if valid_594601 != nil:
    section.add "DBParameterGroupName", valid_594601
  var valid_594602 = formData.getOrDefault("EngineVersion")
  valid_594602 = validateParameter(valid_594602, JString, required = false,
                                 default = nil)
  if valid_594602 != nil:
    section.add "EngineVersion", valid_594602
  var valid_594603 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_594603 = validateParameter(valid_594603, JBool, required = false, default = nil)
  if valid_594603 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_594603
  var valid_594604 = formData.getOrDefault("BackupRetentionPeriod")
  valid_594604 = validateParameter(valid_594604, JInt, required = false, default = nil)
  if valid_594604 != nil:
    section.add "BackupRetentionPeriod", valid_594604
  var valid_594605 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_594605 = validateParameter(valid_594605, JBool, required = false, default = nil)
  if valid_594605 != nil:
    section.add "AutoMinorVersionUpgrade", valid_594605
  var valid_594606 = formData.getOrDefault("TdeCredentialPassword")
  valid_594606 = validateParameter(valid_594606, JString, required = false,
                                 default = nil)
  if valid_594606 != nil:
    section.add "TdeCredentialPassword", valid_594606
  var valid_594607 = formData.getOrDefault("ApplyImmediately")
  valid_594607 = validateParameter(valid_594607, JBool, required = false, default = nil)
  if valid_594607 != nil:
    section.add "ApplyImmediately", valid_594607
  var valid_594608 = formData.getOrDefault("Iops")
  valid_594608 = validateParameter(valid_594608, JInt, required = false, default = nil)
  if valid_594608 != nil:
    section.add "Iops", valid_594608
  var valid_594609 = formData.getOrDefault("PubliclyAccessible")
  valid_594609 = validateParameter(valid_594609, JBool, required = false, default = nil)
  if valid_594609 != nil:
    section.add "PubliclyAccessible", valid_594609
  var valid_594610 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_594610 = validateParameter(valid_594610, JString, required = false,
                                 default = nil)
  if valid_594610 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_594610
  var valid_594611 = formData.getOrDefault("LicenseModel")
  valid_594611 = validateParameter(valid_594611, JString, required = false,
                                 default = nil)
  if valid_594611 != nil:
    section.add "LicenseModel", valid_594611
  var valid_594612 = formData.getOrDefault("DomainIAMRoleName")
  valid_594612 = validateParameter(valid_594612, JString, required = false,
                                 default = nil)
  if valid_594612 != nil:
    section.add "DomainIAMRoleName", valid_594612
  var valid_594613 = formData.getOrDefault("OptionGroupName")
  valid_594613 = validateParameter(valid_594613, JString, required = false,
                                 default = nil)
  if valid_594613 != nil:
    section.add "OptionGroupName", valid_594613
  var valid_594614 = formData.getOrDefault("NewDBInstanceIdentifier")
  valid_594614 = validateParameter(valid_594614, JString, required = false,
                                 default = nil)
  if valid_594614 != nil:
    section.add "NewDBInstanceIdentifier", valid_594614
  var valid_594615 = formData.getOrDefault("DBSecurityGroups")
  valid_594615 = validateParameter(valid_594615, JArray, required = false,
                                 default = nil)
  if valid_594615 != nil:
    section.add "DBSecurityGroups", valid_594615
  var valid_594616 = formData.getOrDefault("DBPortNumber")
  valid_594616 = validateParameter(valid_594616, JInt, required = false, default = nil)
  if valid_594616 != nil:
    section.add "DBPortNumber", valid_594616
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594617: Call_PostModifyDBInstance_594563; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_594617.validator(path, query, header, formData, body)
  let scheme = call_594617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594617.url(scheme.get, call_594617.host, call_594617.base,
                         call_594617.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594617, url, valid)

proc call*(call_594618: Call_PostModifyDBInstance_594563;
          DBInstanceIdentifier: string; PromotionTier: int = 0; MultiAZ: bool = false;
          MonitoringRoleArn: string = ""; CACertificateIdentifier: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnablePerformanceInsights: bool = false; TdeCredentialArn: string = "";
          Action: string = "ModifyDBInstance";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; AllowMajorVersionUpgrade: bool = false;
          StorageType: string = ""; MaxAllocatedStorage: int = 0;
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          ProcessorFeatures: JsonNode = nil; AllocatedStorage: int = 0;
          PreferredMaintenanceWindow: string = ""; DBInstanceClass: string = "";
          UseDefaultProcessorFeatures: bool = false;
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          Domain: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          DBParameterGroupName: string = ""; EngineVersion: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; AutoMinorVersionUpgrade: bool = false;
          TdeCredentialPassword: string = ""; ApplyImmediately: bool = false;
          Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          DomainIAMRoleName: string = ""; OptionGroupName: string = "";
          NewDBInstanceIdentifier: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; DBPortNumber: int = 0): Recallable =
  ## postModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance is not in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  var query_594619 = newJObject()
  var formData_594620 = newJObject()
  add(formData_594620, "PromotionTier", newJInt(PromotionTier))
  add(formData_594620, "MultiAZ", newJBool(MultiAZ))
  add(formData_594620, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_594620, "CACertificateIdentifier",
      newJString(CACertificateIdentifier))
  add(formData_594620, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_594620.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_594620, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_594620, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_594620, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_594619, "Action", newJString(Action))
  add(formData_594620, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_594620, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_594620, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_594620, "StorageType", newJString(StorageType))
  add(formData_594620, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(formData_594620, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_594620, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_594620.add "ProcessorFeatures", ProcessorFeatures
  add(formData_594620, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_594620, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_594620, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_594620, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_594620, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_594620, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_594620.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_594620, "Domain", newJString(Domain))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_594620.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_594620, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_594620, "EngineVersion", newJString(EngineVersion))
  add(formData_594620, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_594620, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_594620, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_594620, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_594620, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_594620, "Iops", newJInt(Iops))
  add(formData_594620, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_594620, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_594620, "LicenseModel", newJString(LicenseModel))
  add(formData_594620, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_594620, "OptionGroupName", newJString(OptionGroupName))
  add(formData_594620, "NewDBInstanceIdentifier",
      newJString(NewDBInstanceIdentifier))
  add(query_594619, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_594620.add "DBSecurityGroups", DBSecurityGroups
  add(formData_594620, "DBPortNumber", newJInt(DBPortNumber))
  result = call_594618.call(nil, query_594619, nil, formData_594620, nil)

var postModifyDBInstance* = Call_PostModifyDBInstance_594563(
    name: "postModifyDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_PostModifyDBInstance_594564, base: "/",
    url: url_PostModifyDBInstance_594565, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBInstance_594506 = ref object of OpenApiRestCall_590348
proc url_GetModifyDBInstance_594508(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBInstance_594507(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance is not in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  section = newJObject()
  var valid_594509 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_594509 = validateParameter(valid_594509, JBool, required = false, default = nil)
  if valid_594509 != nil:
    section.add "UseDefaultProcessorFeatures", valid_594509
  var valid_594510 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_594510 = validateParameter(valid_594510, JInt, required = false, default = nil)
  if valid_594510 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_594510
  var valid_594511 = query.getOrDefault("CopyTagsToSnapshot")
  valid_594511 = validateParameter(valid_594511, JBool, required = false, default = nil)
  if valid_594511 != nil:
    section.add "CopyTagsToSnapshot", valid_594511
  var valid_594512 = query.getOrDefault("MonitoringInterval")
  valid_594512 = validateParameter(valid_594512, JInt, required = false, default = nil)
  if valid_594512 != nil:
    section.add "MonitoringInterval", valid_594512
  var valid_594513 = query.getOrDefault("MonitoringRoleArn")
  valid_594513 = validateParameter(valid_594513, JString, required = false,
                                 default = nil)
  if valid_594513 != nil:
    section.add "MonitoringRoleArn", valid_594513
  var valid_594514 = query.getOrDefault("DBPortNumber")
  valid_594514 = validateParameter(valid_594514, JInt, required = false, default = nil)
  if valid_594514 != nil:
    section.add "DBPortNumber", valid_594514
  var valid_594515 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_594515 = validateParameter(valid_594515, JArray, required = false,
                                 default = nil)
  if valid_594515 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_594515
  var valid_594516 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_594516 = validateParameter(valid_594516, JArray, required = false,
                                 default = nil)
  if valid_594516 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_594516
  var valid_594517 = query.getOrDefault("ProcessorFeatures")
  valid_594517 = validateParameter(valid_594517, JArray, required = false,
                                 default = nil)
  if valid_594517 != nil:
    section.add "ProcessorFeatures", valid_594517
  var valid_594518 = query.getOrDefault("BackupRetentionPeriod")
  valid_594518 = validateParameter(valid_594518, JInt, required = false, default = nil)
  if valid_594518 != nil:
    section.add "BackupRetentionPeriod", valid_594518
  var valid_594519 = query.getOrDefault("EngineVersion")
  valid_594519 = validateParameter(valid_594519, JString, required = false,
                                 default = nil)
  if valid_594519 != nil:
    section.add "EngineVersion", valid_594519
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594520 = query.getOrDefault("Action")
  valid_594520 = validateParameter(valid_594520, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_594520 != nil:
    section.add "Action", valid_594520
  var valid_594521 = query.getOrDefault("Domain")
  valid_594521 = validateParameter(valid_594521, JString, required = false,
                                 default = nil)
  if valid_594521 != nil:
    section.add "Domain", valid_594521
  var valid_594522 = query.getOrDefault("VpcSecurityGroupIds")
  valid_594522 = validateParameter(valid_594522, JArray, required = false,
                                 default = nil)
  if valid_594522 != nil:
    section.add "VpcSecurityGroupIds", valid_594522
  var valid_594523 = query.getOrDefault("AllocatedStorage")
  valid_594523 = validateParameter(valid_594523, JInt, required = false, default = nil)
  if valid_594523 != nil:
    section.add "AllocatedStorage", valid_594523
  var valid_594524 = query.getOrDefault("EnablePerformanceInsights")
  valid_594524 = validateParameter(valid_594524, JBool, required = false, default = nil)
  if valid_594524 != nil:
    section.add "EnablePerformanceInsights", valid_594524
  var valid_594525 = query.getOrDefault("PubliclyAccessible")
  valid_594525 = validateParameter(valid_594525, JBool, required = false, default = nil)
  if valid_594525 != nil:
    section.add "PubliclyAccessible", valid_594525
  var valid_594526 = query.getOrDefault("NewDBInstanceIdentifier")
  valid_594526 = validateParameter(valid_594526, JString, required = false,
                                 default = nil)
  if valid_594526 != nil:
    section.add "NewDBInstanceIdentifier", valid_594526
  var valid_594527 = query.getOrDefault("TdeCredentialPassword")
  valid_594527 = validateParameter(valid_594527, JString, required = false,
                                 default = nil)
  if valid_594527 != nil:
    section.add "TdeCredentialPassword", valid_594527
  var valid_594528 = query.getOrDefault("DeletionProtection")
  valid_594528 = validateParameter(valid_594528, JBool, required = false, default = nil)
  if valid_594528 != nil:
    section.add "DeletionProtection", valid_594528
  var valid_594529 = query.getOrDefault("DBParameterGroupName")
  valid_594529 = validateParameter(valid_594529, JString, required = false,
                                 default = nil)
  if valid_594529 != nil:
    section.add "DBParameterGroupName", valid_594529
  var valid_594530 = query.getOrDefault("MaxAllocatedStorage")
  valid_594530 = validateParameter(valid_594530, JInt, required = false, default = nil)
  if valid_594530 != nil:
    section.add "MaxAllocatedStorage", valid_594530
  var valid_594531 = query.getOrDefault("LicenseModel")
  valid_594531 = validateParameter(valid_594531, JString, required = false,
                                 default = nil)
  if valid_594531 != nil:
    section.add "LicenseModel", valid_594531
  var valid_594532 = query.getOrDefault("DBInstanceIdentifier")
  valid_594532 = validateParameter(valid_594532, JString, required = true,
                                 default = nil)
  if valid_594532 != nil:
    section.add "DBInstanceIdentifier", valid_594532
  var valid_594533 = query.getOrDefault("TdeCredentialArn")
  valid_594533 = validateParameter(valid_594533, JString, required = false,
                                 default = nil)
  if valid_594533 != nil:
    section.add "TdeCredentialArn", valid_594533
  var valid_594534 = query.getOrDefault("PromotionTier")
  valid_594534 = validateParameter(valid_594534, JInt, required = false, default = nil)
  if valid_594534 != nil:
    section.add "PromotionTier", valid_594534
  var valid_594535 = query.getOrDefault("CACertificateIdentifier")
  valid_594535 = validateParameter(valid_594535, JString, required = false,
                                 default = nil)
  if valid_594535 != nil:
    section.add "CACertificateIdentifier", valid_594535
  var valid_594536 = query.getOrDefault("StorageType")
  valid_594536 = validateParameter(valid_594536, JString, required = false,
                                 default = nil)
  if valid_594536 != nil:
    section.add "StorageType", valid_594536
  var valid_594537 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_594537 = validateParameter(valid_594537, JBool, required = false, default = nil)
  if valid_594537 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_594537
  var valid_594538 = query.getOrDefault("MultiAZ")
  valid_594538 = validateParameter(valid_594538, JBool, required = false, default = nil)
  if valid_594538 != nil:
    section.add "MultiAZ", valid_594538
  var valid_594539 = query.getOrDefault("DBSecurityGroups")
  valid_594539 = validateParameter(valid_594539, JArray, required = false,
                                 default = nil)
  if valid_594539 != nil:
    section.add "DBSecurityGroups", valid_594539
  var valid_594540 = query.getOrDefault("ApplyImmediately")
  valid_594540 = validateParameter(valid_594540, JBool, required = false, default = nil)
  if valid_594540 != nil:
    section.add "ApplyImmediately", valid_594540
  var valid_594541 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_594541 = validateParameter(valid_594541, JBool, required = false, default = nil)
  if valid_594541 != nil:
    section.add "AllowMajorVersionUpgrade", valid_594541
  var valid_594542 = query.getOrDefault("MasterUserPassword")
  valid_594542 = validateParameter(valid_594542, JString, required = false,
                                 default = nil)
  if valid_594542 != nil:
    section.add "MasterUserPassword", valid_594542
  var valid_594543 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_594543 = validateParameter(valid_594543, JString, required = false,
                                 default = nil)
  if valid_594543 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_594543
  var valid_594544 = query.getOrDefault("OptionGroupName")
  valid_594544 = validateParameter(valid_594544, JString, required = false,
                                 default = nil)
  if valid_594544 != nil:
    section.add "OptionGroupName", valid_594544
  var valid_594545 = query.getOrDefault("DBSubnetGroupName")
  valid_594545 = validateParameter(valid_594545, JString, required = false,
                                 default = nil)
  if valid_594545 != nil:
    section.add "DBSubnetGroupName", valid_594545
  var valid_594546 = query.getOrDefault("PreferredBackupWindow")
  valid_594546 = validateParameter(valid_594546, JString, required = false,
                                 default = nil)
  if valid_594546 != nil:
    section.add "PreferredBackupWindow", valid_594546
  var valid_594547 = query.getOrDefault("DBInstanceClass")
  valid_594547 = validateParameter(valid_594547, JString, required = false,
                                 default = nil)
  if valid_594547 != nil:
    section.add "DBInstanceClass", valid_594547
  var valid_594548 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_594548 = validateParameter(valid_594548, JString, required = false,
                                 default = nil)
  if valid_594548 != nil:
    section.add "PreferredMaintenanceWindow", valid_594548
  var valid_594549 = query.getOrDefault("Version")
  valid_594549 = validateParameter(valid_594549, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594549 != nil:
    section.add "Version", valid_594549
  var valid_594550 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_594550 = validateParameter(valid_594550, JBool, required = false, default = nil)
  if valid_594550 != nil:
    section.add "AutoMinorVersionUpgrade", valid_594550
  var valid_594551 = query.getOrDefault("Iops")
  valid_594551 = validateParameter(valid_594551, JInt, required = false, default = nil)
  if valid_594551 != nil:
    section.add "Iops", valid_594551
  var valid_594552 = query.getOrDefault("DomainIAMRoleName")
  valid_594552 = validateParameter(valid_594552, JString, required = false,
                                 default = nil)
  if valid_594552 != nil:
    section.add "DomainIAMRoleName", valid_594552
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_594553 = header.getOrDefault("X-Amz-Security-Token")
  valid_594553 = validateParameter(valid_594553, JString, required = false,
                                 default = nil)
  if valid_594553 != nil:
    section.add "X-Amz-Security-Token", valid_594553
  var valid_594554 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594554 = validateParameter(valid_594554, JString, required = false,
                                 default = nil)
  if valid_594554 != nil:
    section.add "X-Amz-SignedHeaders", valid_594554
  var valid_594555 = header.getOrDefault("X-Amz-Signature")
  valid_594555 = validateParameter(valid_594555, JString, required = false,
                                 default = nil)
  if valid_594555 != nil:
    section.add "X-Amz-Signature", valid_594555
  var valid_594556 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594556 = validateParameter(valid_594556, JString, required = false,
                                 default = nil)
  if valid_594556 != nil:
    section.add "X-Amz-Content-Sha256", valid_594556
  var valid_594557 = header.getOrDefault("X-Amz-Date")
  valid_594557 = validateParameter(valid_594557, JString, required = false,
                                 default = nil)
  if valid_594557 != nil:
    section.add "X-Amz-Date", valid_594557
  var valid_594558 = header.getOrDefault("X-Amz-Credential")
  valid_594558 = validateParameter(valid_594558, JString, required = false,
                                 default = nil)
  if valid_594558 != nil:
    section.add "X-Amz-Credential", valid_594558
  var valid_594559 = header.getOrDefault("X-Amz-Algorithm")
  valid_594559 = validateParameter(valid_594559, JString, required = false,
                                 default = nil)
  if valid_594559 != nil:
    section.add "X-Amz-Algorithm", valid_594559
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594560: Call_GetModifyDBInstance_594506; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_594560.validator(path, query, header, formData, body)
  let scheme = call_594560.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594560.url(scheme.get, call_594560.host, call_594560.base,
                         call_594560.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594560, url, valid)

proc call*(call_594561: Call_GetModifyDBInstance_594506;
          DBInstanceIdentifier: string; UseDefaultProcessorFeatures: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0;
          CopyTagsToSnapshot: bool = false; MonitoringInterval: int = 0;
          MonitoringRoleArn: string = ""; DBPortNumber: int = 0;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ProcessorFeatures: JsonNode = nil; BackupRetentionPeriod: int = 0;
          EngineVersion: string = ""; Action: string = "ModifyDBInstance";
          Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AllocatedStorage: int = 0; EnablePerformanceInsights: bool = false;
          PubliclyAccessible: bool = false; NewDBInstanceIdentifier: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          DBParameterGroupName: string = ""; MaxAllocatedStorage: int = 0;
          LicenseModel: string = ""; TdeCredentialArn: string = "";
          PromotionTier: int = 0; CACertificateIdentifier: string = "";
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          MultiAZ: bool = false; DBSecurityGroups: JsonNode = nil;
          ApplyImmediately: bool = false; AllowMajorVersionUpgrade: bool = false;
          MasterUserPassword: string = ""; PerformanceInsightsKMSKeyId: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          PreferredBackupWindow: string = ""; DBInstanceClass: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   Action: string (required)
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance is not in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  var query_594562 = newJObject()
  add(query_594562, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_594562, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_594562, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_594562, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_594562, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_594562, "DBPortNumber", newJInt(DBPortNumber))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_594562.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_594562.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  if ProcessorFeatures != nil:
    query_594562.add "ProcessorFeatures", ProcessorFeatures
  add(query_594562, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_594562, "EngineVersion", newJString(EngineVersion))
  add(query_594562, "Action", newJString(Action))
  add(query_594562, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_594562.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_594562, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_594562, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_594562, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_594562, "NewDBInstanceIdentifier", newJString(NewDBInstanceIdentifier))
  add(query_594562, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_594562, "DeletionProtection", newJBool(DeletionProtection))
  add(query_594562, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_594562, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_594562, "LicenseModel", newJString(LicenseModel))
  add(query_594562, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_594562, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_594562, "PromotionTier", newJInt(PromotionTier))
  add(query_594562, "CACertificateIdentifier", newJString(CACertificateIdentifier))
  add(query_594562, "StorageType", newJString(StorageType))
  add(query_594562, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_594562, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_594562.add "DBSecurityGroups", DBSecurityGroups
  add(query_594562, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_594562, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_594562, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_594562, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_594562, "OptionGroupName", newJString(OptionGroupName))
  add(query_594562, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_594562, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_594562, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_594562, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_594562, "Version", newJString(Version))
  add(query_594562, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_594562, "Iops", newJInt(Iops))
  add(query_594562, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_594561.call(nil, query_594562, nil, nil, nil)

var getModifyDBInstance* = Call_GetModifyDBInstance_594506(
    name: "getModifyDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_GetModifyDBInstance_594507, base: "/",
    url: url_GetModifyDBInstance_594508, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBParameterGroup_594638 = ref object of OpenApiRestCall_590348
proc url_PostModifyDBParameterGroup_594640(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBParameterGroup_594639(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594641 = query.getOrDefault("Action")
  valid_594641 = validateParameter(valid_594641, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_594641 != nil:
    section.add "Action", valid_594641
  var valid_594642 = query.getOrDefault("Version")
  valid_594642 = validateParameter(valid_594642, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594642 != nil:
    section.add "Version", valid_594642
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594643 = header.getOrDefault("X-Amz-Signature")
  valid_594643 = validateParameter(valid_594643, JString, required = false,
                                 default = nil)
  if valid_594643 != nil:
    section.add "X-Amz-Signature", valid_594643
  var valid_594644 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594644 = validateParameter(valid_594644, JString, required = false,
                                 default = nil)
  if valid_594644 != nil:
    section.add "X-Amz-Content-Sha256", valid_594644
  var valid_594645 = header.getOrDefault("X-Amz-Date")
  valid_594645 = validateParameter(valid_594645, JString, required = false,
                                 default = nil)
  if valid_594645 != nil:
    section.add "X-Amz-Date", valid_594645
  var valid_594646 = header.getOrDefault("X-Amz-Credential")
  valid_594646 = validateParameter(valid_594646, JString, required = false,
                                 default = nil)
  if valid_594646 != nil:
    section.add "X-Amz-Credential", valid_594646
  var valid_594647 = header.getOrDefault("X-Amz-Security-Token")
  valid_594647 = validateParameter(valid_594647, JString, required = false,
                                 default = nil)
  if valid_594647 != nil:
    section.add "X-Amz-Security-Token", valid_594647
  var valid_594648 = header.getOrDefault("X-Amz-Algorithm")
  valid_594648 = validateParameter(valid_594648, JString, required = false,
                                 default = nil)
  if valid_594648 != nil:
    section.add "X-Amz-Algorithm", valid_594648
  var valid_594649 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594649 = validateParameter(valid_594649, JString, required = false,
                                 default = nil)
  if valid_594649 != nil:
    section.add "X-Amz-SignedHeaders", valid_594649
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_594650 = formData.getOrDefault("DBParameterGroupName")
  valid_594650 = validateParameter(valid_594650, JString, required = true,
                                 default = nil)
  if valid_594650 != nil:
    section.add "DBParameterGroupName", valid_594650
  var valid_594651 = formData.getOrDefault("Parameters")
  valid_594651 = validateParameter(valid_594651, JArray, required = true, default = nil)
  if valid_594651 != nil:
    section.add "Parameters", valid_594651
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594652: Call_PostModifyDBParameterGroup_594638; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_594652.validator(path, query, header, formData, body)
  let scheme = call_594652.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594652.url(scheme.get, call_594652.host, call_594652.base,
                         call_594652.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594652, url, valid)

proc call*(call_594653: Call_PostModifyDBParameterGroup_594638;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Version: string (required)
  var query_594654 = newJObject()
  var formData_594655 = newJObject()
  add(formData_594655, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_594654, "Action", newJString(Action))
  if Parameters != nil:
    formData_594655.add "Parameters", Parameters
  add(query_594654, "Version", newJString(Version))
  result = call_594653.call(nil, query_594654, nil, formData_594655, nil)

var postModifyDBParameterGroup* = Call_PostModifyDBParameterGroup_594638(
    name: "postModifyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_PostModifyDBParameterGroup_594639, base: "/",
    url: url_PostModifyDBParameterGroup_594640,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBParameterGroup_594621 = ref object of OpenApiRestCall_590348
proc url_GetModifyDBParameterGroup_594623(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBParameterGroup_594622(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_594624 = query.getOrDefault("DBParameterGroupName")
  valid_594624 = validateParameter(valid_594624, JString, required = true,
                                 default = nil)
  if valid_594624 != nil:
    section.add "DBParameterGroupName", valid_594624
  var valid_594625 = query.getOrDefault("Parameters")
  valid_594625 = validateParameter(valid_594625, JArray, required = true, default = nil)
  if valid_594625 != nil:
    section.add "Parameters", valid_594625
  var valid_594626 = query.getOrDefault("Action")
  valid_594626 = validateParameter(valid_594626, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_594626 != nil:
    section.add "Action", valid_594626
  var valid_594627 = query.getOrDefault("Version")
  valid_594627 = validateParameter(valid_594627, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594627 != nil:
    section.add "Version", valid_594627
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594628 = header.getOrDefault("X-Amz-Signature")
  valid_594628 = validateParameter(valid_594628, JString, required = false,
                                 default = nil)
  if valid_594628 != nil:
    section.add "X-Amz-Signature", valid_594628
  var valid_594629 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594629 = validateParameter(valid_594629, JString, required = false,
                                 default = nil)
  if valid_594629 != nil:
    section.add "X-Amz-Content-Sha256", valid_594629
  var valid_594630 = header.getOrDefault("X-Amz-Date")
  valid_594630 = validateParameter(valid_594630, JString, required = false,
                                 default = nil)
  if valid_594630 != nil:
    section.add "X-Amz-Date", valid_594630
  var valid_594631 = header.getOrDefault("X-Amz-Credential")
  valid_594631 = validateParameter(valid_594631, JString, required = false,
                                 default = nil)
  if valid_594631 != nil:
    section.add "X-Amz-Credential", valid_594631
  var valid_594632 = header.getOrDefault("X-Amz-Security-Token")
  valid_594632 = validateParameter(valid_594632, JString, required = false,
                                 default = nil)
  if valid_594632 != nil:
    section.add "X-Amz-Security-Token", valid_594632
  var valid_594633 = header.getOrDefault("X-Amz-Algorithm")
  valid_594633 = validateParameter(valid_594633, JString, required = false,
                                 default = nil)
  if valid_594633 != nil:
    section.add "X-Amz-Algorithm", valid_594633
  var valid_594634 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594634 = validateParameter(valid_594634, JString, required = false,
                                 default = nil)
  if valid_594634 != nil:
    section.add "X-Amz-SignedHeaders", valid_594634
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594635: Call_GetModifyDBParameterGroup_594621; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_594635.validator(path, query, header, formData, body)
  let scheme = call_594635.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594635.url(scheme.get, call_594635.host, call_594635.base,
                         call_594635.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594635, url, valid)

proc call*(call_594636: Call_GetModifyDBParameterGroup_594621;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594637 = newJObject()
  add(query_594637, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_594637.add "Parameters", Parameters
  add(query_594637, "Action", newJString(Action))
  add(query_594637, "Version", newJString(Version))
  result = call_594636.call(nil, query_594637, nil, nil, nil)

var getModifyDBParameterGroup* = Call_GetModifyDBParameterGroup_594621(
    name: "getModifyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_GetModifyDBParameterGroup_594622, base: "/",
    url: url_GetModifyDBParameterGroup_594623,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshot_594674 = ref object of OpenApiRestCall_590348
proc url_PostModifyDBSnapshot_594676(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBSnapshot_594675(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594677 = query.getOrDefault("Action")
  valid_594677 = validateParameter(valid_594677, JString, required = true,
                                 default = newJString("ModifyDBSnapshot"))
  if valid_594677 != nil:
    section.add "Action", valid_594677
  var valid_594678 = query.getOrDefault("Version")
  valid_594678 = validateParameter(valid_594678, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594678 != nil:
    section.add "Version", valid_594678
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594679 = header.getOrDefault("X-Amz-Signature")
  valid_594679 = validateParameter(valid_594679, JString, required = false,
                                 default = nil)
  if valid_594679 != nil:
    section.add "X-Amz-Signature", valid_594679
  var valid_594680 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594680 = validateParameter(valid_594680, JString, required = false,
                                 default = nil)
  if valid_594680 != nil:
    section.add "X-Amz-Content-Sha256", valid_594680
  var valid_594681 = header.getOrDefault("X-Amz-Date")
  valid_594681 = validateParameter(valid_594681, JString, required = false,
                                 default = nil)
  if valid_594681 != nil:
    section.add "X-Amz-Date", valid_594681
  var valid_594682 = header.getOrDefault("X-Amz-Credential")
  valid_594682 = validateParameter(valid_594682, JString, required = false,
                                 default = nil)
  if valid_594682 != nil:
    section.add "X-Amz-Credential", valid_594682
  var valid_594683 = header.getOrDefault("X-Amz-Security-Token")
  valid_594683 = validateParameter(valid_594683, JString, required = false,
                                 default = nil)
  if valid_594683 != nil:
    section.add "X-Amz-Security-Token", valid_594683
  var valid_594684 = header.getOrDefault("X-Amz-Algorithm")
  valid_594684 = validateParameter(valid_594684, JString, required = false,
                                 default = nil)
  if valid_594684 != nil:
    section.add "X-Amz-Algorithm", valid_594684
  var valid_594685 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594685 = validateParameter(valid_594685, JString, required = false,
                                 default = nil)
  if valid_594685 != nil:
    section.add "X-Amz-SignedHeaders", valid_594685
  result.add "header", section
  ## parameters in `formData` object:
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  section = newJObject()
  var valid_594686 = formData.getOrDefault("EngineVersion")
  valid_594686 = validateParameter(valid_594686, JString, required = false,
                                 default = nil)
  if valid_594686 != nil:
    section.add "EngineVersion", valid_594686
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_594687 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_594687 = validateParameter(valid_594687, JString, required = true,
                                 default = nil)
  if valid_594687 != nil:
    section.add "DBSnapshotIdentifier", valid_594687
  var valid_594688 = formData.getOrDefault("OptionGroupName")
  valid_594688 = validateParameter(valid_594688, JString, required = false,
                                 default = nil)
  if valid_594688 != nil:
    section.add "OptionGroupName", valid_594688
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594689: Call_PostModifyDBSnapshot_594674; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ## 
  let valid = call_594689.validator(path, query, header, formData, body)
  let scheme = call_594689.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594689.url(scheme.get, call_594689.host, call_594689.base,
                         call_594689.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594689, url, valid)

proc call*(call_594690: Call_PostModifyDBSnapshot_594674;
          DBSnapshotIdentifier: string; EngineVersion: string = "";
          Action: string = "ModifyDBSnapshot"; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_594691 = newJObject()
  var formData_594692 = newJObject()
  add(formData_594692, "EngineVersion", newJString(EngineVersion))
  add(formData_594692, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_594691, "Action", newJString(Action))
  add(formData_594692, "OptionGroupName", newJString(OptionGroupName))
  add(query_594691, "Version", newJString(Version))
  result = call_594690.call(nil, query_594691, nil, formData_594692, nil)

var postModifyDBSnapshot* = Call_PostModifyDBSnapshot_594674(
    name: "postModifyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_PostModifyDBSnapshot_594675, base: "/",
    url: url_PostModifyDBSnapshot_594676, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshot_594656 = ref object of OpenApiRestCall_590348
proc url_GetModifyDBSnapshot_594658(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBSnapshot_594657(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul>
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_594659 = query.getOrDefault("DBSnapshotIdentifier")
  valid_594659 = validateParameter(valid_594659, JString, required = true,
                                 default = nil)
  if valid_594659 != nil:
    section.add "DBSnapshotIdentifier", valid_594659
  var valid_594660 = query.getOrDefault("EngineVersion")
  valid_594660 = validateParameter(valid_594660, JString, required = false,
                                 default = nil)
  if valid_594660 != nil:
    section.add "EngineVersion", valid_594660
  var valid_594661 = query.getOrDefault("Action")
  valid_594661 = validateParameter(valid_594661, JString, required = true,
                                 default = newJString("ModifyDBSnapshot"))
  if valid_594661 != nil:
    section.add "Action", valid_594661
  var valid_594662 = query.getOrDefault("OptionGroupName")
  valid_594662 = validateParameter(valid_594662, JString, required = false,
                                 default = nil)
  if valid_594662 != nil:
    section.add "OptionGroupName", valid_594662
  var valid_594663 = query.getOrDefault("Version")
  valid_594663 = validateParameter(valid_594663, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594663 != nil:
    section.add "Version", valid_594663
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594664 = header.getOrDefault("X-Amz-Signature")
  valid_594664 = validateParameter(valid_594664, JString, required = false,
                                 default = nil)
  if valid_594664 != nil:
    section.add "X-Amz-Signature", valid_594664
  var valid_594665 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594665 = validateParameter(valid_594665, JString, required = false,
                                 default = nil)
  if valid_594665 != nil:
    section.add "X-Amz-Content-Sha256", valid_594665
  var valid_594666 = header.getOrDefault("X-Amz-Date")
  valid_594666 = validateParameter(valid_594666, JString, required = false,
                                 default = nil)
  if valid_594666 != nil:
    section.add "X-Amz-Date", valid_594666
  var valid_594667 = header.getOrDefault("X-Amz-Credential")
  valid_594667 = validateParameter(valid_594667, JString, required = false,
                                 default = nil)
  if valid_594667 != nil:
    section.add "X-Amz-Credential", valid_594667
  var valid_594668 = header.getOrDefault("X-Amz-Security-Token")
  valid_594668 = validateParameter(valid_594668, JString, required = false,
                                 default = nil)
  if valid_594668 != nil:
    section.add "X-Amz-Security-Token", valid_594668
  var valid_594669 = header.getOrDefault("X-Amz-Algorithm")
  valid_594669 = validateParameter(valid_594669, JString, required = false,
                                 default = nil)
  if valid_594669 != nil:
    section.add "X-Amz-Algorithm", valid_594669
  var valid_594670 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594670 = validateParameter(valid_594670, JString, required = false,
                                 default = nil)
  if valid_594670 != nil:
    section.add "X-Amz-SignedHeaders", valid_594670
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594671: Call_GetModifyDBSnapshot_594656; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ## 
  let valid = call_594671.validator(path, query, header, formData, body)
  let scheme = call_594671.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594671.url(scheme.get, call_594671.host, call_594671.base,
                         call_594671.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594671, url, valid)

proc call*(call_594672: Call_GetModifyDBSnapshot_594656;
          DBSnapshotIdentifier: string; EngineVersion: string = "";
          Action: string = "ModifyDBSnapshot"; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul>
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_594673 = newJObject()
  add(query_594673, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_594673, "EngineVersion", newJString(EngineVersion))
  add(query_594673, "Action", newJString(Action))
  add(query_594673, "OptionGroupName", newJString(OptionGroupName))
  add(query_594673, "Version", newJString(Version))
  result = call_594672.call(nil, query_594673, nil, nil, nil)

var getModifyDBSnapshot* = Call_GetModifyDBSnapshot_594656(
    name: "getModifyDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_GetModifyDBSnapshot_594657, base: "/",
    url: url_GetModifyDBSnapshot_594658, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshotAttribute_594712 = ref object of OpenApiRestCall_590348
proc url_PostModifyDBSnapshotAttribute_594714(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBSnapshotAttribute_594713(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594715 = query.getOrDefault("Action")
  valid_594715 = validateParameter(valid_594715, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_594715 != nil:
    section.add "Action", valid_594715
  var valid_594716 = query.getOrDefault("Version")
  valid_594716 = validateParameter(valid_594716, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594716 != nil:
    section.add "Version", valid_594716
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594717 = header.getOrDefault("X-Amz-Signature")
  valid_594717 = validateParameter(valid_594717, JString, required = false,
                                 default = nil)
  if valid_594717 != nil:
    section.add "X-Amz-Signature", valid_594717
  var valid_594718 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594718 = validateParameter(valid_594718, JString, required = false,
                                 default = nil)
  if valid_594718 != nil:
    section.add "X-Amz-Content-Sha256", valid_594718
  var valid_594719 = header.getOrDefault("X-Amz-Date")
  valid_594719 = validateParameter(valid_594719, JString, required = false,
                                 default = nil)
  if valid_594719 != nil:
    section.add "X-Amz-Date", valid_594719
  var valid_594720 = header.getOrDefault("X-Amz-Credential")
  valid_594720 = validateParameter(valid_594720, JString, required = false,
                                 default = nil)
  if valid_594720 != nil:
    section.add "X-Amz-Credential", valid_594720
  var valid_594721 = header.getOrDefault("X-Amz-Security-Token")
  valid_594721 = validateParameter(valid_594721, JString, required = false,
                                 default = nil)
  if valid_594721 != nil:
    section.add "X-Amz-Security-Token", valid_594721
  var valid_594722 = header.getOrDefault("X-Amz-Algorithm")
  valid_594722 = validateParameter(valid_594722, JString, required = false,
                                 default = nil)
  if valid_594722 != nil:
    section.add "X-Amz-Algorithm", valid_594722
  var valid_594723 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594723 = validateParameter(valid_594723, JString, required = false,
                                 default = nil)
  if valid_594723 != nil:
    section.add "X-Amz-SignedHeaders", valid_594723
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_594724 = formData.getOrDefault("AttributeName")
  valid_594724 = validateParameter(valid_594724, JString, required = true,
                                 default = nil)
  if valid_594724 != nil:
    section.add "AttributeName", valid_594724
  var valid_594725 = formData.getOrDefault("ValuesToAdd")
  valid_594725 = validateParameter(valid_594725, JArray, required = false,
                                 default = nil)
  if valid_594725 != nil:
    section.add "ValuesToAdd", valid_594725
  var valid_594726 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_594726 = validateParameter(valid_594726, JString, required = true,
                                 default = nil)
  if valid_594726 != nil:
    section.add "DBSnapshotIdentifier", valid_594726
  var valid_594727 = formData.getOrDefault("ValuesToRemove")
  valid_594727 = validateParameter(valid_594727, JArray, required = false,
                                 default = nil)
  if valid_594727 != nil:
    section.add "ValuesToRemove", valid_594727
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594728: Call_PostModifyDBSnapshotAttribute_594712; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_594728.validator(path, query, header, formData, body)
  let scheme = call_594728.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594728.url(scheme.get, call_594728.host, call_594728.base,
                         call_594728.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594728, url, valid)

proc call*(call_594729: Call_PostModifyDBSnapshotAttribute_594712;
          AttributeName: string; DBSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil; Action: string = "ModifyDBSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   Version: string (required)
  var query_594730 = newJObject()
  var formData_594731 = newJObject()
  add(formData_594731, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    formData_594731.add "ValuesToAdd", ValuesToAdd
  add(formData_594731, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_594730, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_594731.add "ValuesToRemove", ValuesToRemove
  add(query_594730, "Version", newJString(Version))
  result = call_594729.call(nil, query_594730, nil, formData_594731, nil)

var postModifyDBSnapshotAttribute* = Call_PostModifyDBSnapshotAttribute_594712(
    name: "postModifyDBSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_PostModifyDBSnapshotAttribute_594713, base: "/",
    url: url_PostModifyDBSnapshotAttribute_594714,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshotAttribute_594693 = ref object of OpenApiRestCall_590348
proc url_GetModifyDBSnapshotAttribute_594695(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBSnapshotAttribute_594694(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: JString (required)
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_594696 = query.getOrDefault("ValuesToRemove")
  valid_594696 = validateParameter(valid_594696, JArray, required = false,
                                 default = nil)
  if valid_594696 != nil:
    section.add "ValuesToRemove", valid_594696
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_594697 = query.getOrDefault("DBSnapshotIdentifier")
  valid_594697 = validateParameter(valid_594697, JString, required = true,
                                 default = nil)
  if valid_594697 != nil:
    section.add "DBSnapshotIdentifier", valid_594697
  var valid_594698 = query.getOrDefault("Action")
  valid_594698 = validateParameter(valid_594698, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_594698 != nil:
    section.add "Action", valid_594698
  var valid_594699 = query.getOrDefault("AttributeName")
  valid_594699 = validateParameter(valid_594699, JString, required = true,
                                 default = nil)
  if valid_594699 != nil:
    section.add "AttributeName", valid_594699
  var valid_594700 = query.getOrDefault("ValuesToAdd")
  valid_594700 = validateParameter(valid_594700, JArray, required = false,
                                 default = nil)
  if valid_594700 != nil:
    section.add "ValuesToAdd", valid_594700
  var valid_594701 = query.getOrDefault("Version")
  valid_594701 = validateParameter(valid_594701, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594701 != nil:
    section.add "Version", valid_594701
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594702 = header.getOrDefault("X-Amz-Signature")
  valid_594702 = validateParameter(valid_594702, JString, required = false,
                                 default = nil)
  if valid_594702 != nil:
    section.add "X-Amz-Signature", valid_594702
  var valid_594703 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594703 = validateParameter(valid_594703, JString, required = false,
                                 default = nil)
  if valid_594703 != nil:
    section.add "X-Amz-Content-Sha256", valid_594703
  var valid_594704 = header.getOrDefault("X-Amz-Date")
  valid_594704 = validateParameter(valid_594704, JString, required = false,
                                 default = nil)
  if valid_594704 != nil:
    section.add "X-Amz-Date", valid_594704
  var valid_594705 = header.getOrDefault("X-Amz-Credential")
  valid_594705 = validateParameter(valid_594705, JString, required = false,
                                 default = nil)
  if valid_594705 != nil:
    section.add "X-Amz-Credential", valid_594705
  var valid_594706 = header.getOrDefault("X-Amz-Security-Token")
  valid_594706 = validateParameter(valid_594706, JString, required = false,
                                 default = nil)
  if valid_594706 != nil:
    section.add "X-Amz-Security-Token", valid_594706
  var valid_594707 = header.getOrDefault("X-Amz-Algorithm")
  valid_594707 = validateParameter(valid_594707, JString, required = false,
                                 default = nil)
  if valid_594707 != nil:
    section.add "X-Amz-Algorithm", valid_594707
  var valid_594708 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594708 = validateParameter(valid_594708, JString, required = false,
                                 default = nil)
  if valid_594708 != nil:
    section.add "X-Amz-SignedHeaders", valid_594708
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594709: Call_GetModifyDBSnapshotAttribute_594693; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_594709.validator(path, query, header, formData, body)
  let scheme = call_594709.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594709.url(scheme.get, call_594709.host, call_594709.base,
                         call_594709.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594709, url, valid)

proc call*(call_594710: Call_GetModifyDBSnapshotAttribute_594693;
          DBSnapshotIdentifier: string; AttributeName: string;
          ValuesToRemove: JsonNode = nil;
          Action: string = "ModifyDBSnapshotAttribute"; ValuesToAdd: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_594711 = newJObject()
  if ValuesToRemove != nil:
    query_594711.add "ValuesToRemove", ValuesToRemove
  add(query_594711, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_594711, "Action", newJString(Action))
  add(query_594711, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_594711.add "ValuesToAdd", ValuesToAdd
  add(query_594711, "Version", newJString(Version))
  result = call_594710.call(nil, query_594711, nil, nil, nil)

var getModifyDBSnapshotAttribute* = Call_GetModifyDBSnapshotAttribute_594693(
    name: "getModifyDBSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_GetModifyDBSnapshotAttribute_594694, base: "/",
    url: url_GetModifyDBSnapshotAttribute_594695,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSubnetGroup_594750 = ref object of OpenApiRestCall_590348
proc url_PostModifyDBSubnetGroup_594752(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBSubnetGroup_594751(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594753 = query.getOrDefault("Action")
  valid_594753 = validateParameter(valid_594753, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_594753 != nil:
    section.add "Action", valid_594753
  var valid_594754 = query.getOrDefault("Version")
  valid_594754 = validateParameter(valid_594754, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594754 != nil:
    section.add "Version", valid_594754
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594755 = header.getOrDefault("X-Amz-Signature")
  valid_594755 = validateParameter(valid_594755, JString, required = false,
                                 default = nil)
  if valid_594755 != nil:
    section.add "X-Amz-Signature", valid_594755
  var valid_594756 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594756 = validateParameter(valid_594756, JString, required = false,
                                 default = nil)
  if valid_594756 != nil:
    section.add "X-Amz-Content-Sha256", valid_594756
  var valid_594757 = header.getOrDefault("X-Amz-Date")
  valid_594757 = validateParameter(valid_594757, JString, required = false,
                                 default = nil)
  if valid_594757 != nil:
    section.add "X-Amz-Date", valid_594757
  var valid_594758 = header.getOrDefault("X-Amz-Credential")
  valid_594758 = validateParameter(valid_594758, JString, required = false,
                                 default = nil)
  if valid_594758 != nil:
    section.add "X-Amz-Credential", valid_594758
  var valid_594759 = header.getOrDefault("X-Amz-Security-Token")
  valid_594759 = validateParameter(valid_594759, JString, required = false,
                                 default = nil)
  if valid_594759 != nil:
    section.add "X-Amz-Security-Token", valid_594759
  var valid_594760 = header.getOrDefault("X-Amz-Algorithm")
  valid_594760 = validateParameter(valid_594760, JString, required = false,
                                 default = nil)
  if valid_594760 != nil:
    section.add "X-Amz-Algorithm", valid_594760
  var valid_594761 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594761 = validateParameter(valid_594761, JString, required = false,
                                 default = nil)
  if valid_594761 != nil:
    section.add "X-Amz-SignedHeaders", valid_594761
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  section = newJObject()
  var valid_594762 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_594762 = validateParameter(valid_594762, JString, required = false,
                                 default = nil)
  if valid_594762 != nil:
    section.add "DBSubnetGroupDescription", valid_594762
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_594763 = formData.getOrDefault("DBSubnetGroupName")
  valid_594763 = validateParameter(valid_594763, JString, required = true,
                                 default = nil)
  if valid_594763 != nil:
    section.add "DBSubnetGroupName", valid_594763
  var valid_594764 = formData.getOrDefault("SubnetIds")
  valid_594764 = validateParameter(valid_594764, JArray, required = true, default = nil)
  if valid_594764 != nil:
    section.add "SubnetIds", valid_594764
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594765: Call_PostModifyDBSubnetGroup_594750; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_594765.validator(path, query, header, formData, body)
  let scheme = call_594765.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594765.url(scheme.get, call_594765.host, call_594765.base,
                         call_594765.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594765, url, valid)

proc call*(call_594766: Call_PostModifyDBSubnetGroup_594750;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string = "";
          Action: string = "ModifyDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  var query_594767 = newJObject()
  var formData_594768 = newJObject()
  add(formData_594768, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_594767, "Action", newJString(Action))
  add(formData_594768, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_594767, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_594768.add "SubnetIds", SubnetIds
  result = call_594766.call(nil, query_594767, nil, formData_594768, nil)

var postModifyDBSubnetGroup* = Call_PostModifyDBSubnetGroup_594750(
    name: "postModifyDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_PostModifyDBSubnetGroup_594751, base: "/",
    url: url_PostModifyDBSubnetGroup_594752, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSubnetGroup_594732 = ref object of OpenApiRestCall_590348
proc url_GetModifyDBSubnetGroup_594734(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBSubnetGroup_594733(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_594735 = query.getOrDefault("SubnetIds")
  valid_594735 = validateParameter(valid_594735, JArray, required = true, default = nil)
  if valid_594735 != nil:
    section.add "SubnetIds", valid_594735
  var valid_594736 = query.getOrDefault("Action")
  valid_594736 = validateParameter(valid_594736, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_594736 != nil:
    section.add "Action", valid_594736
  var valid_594737 = query.getOrDefault("DBSubnetGroupDescription")
  valid_594737 = validateParameter(valid_594737, JString, required = false,
                                 default = nil)
  if valid_594737 != nil:
    section.add "DBSubnetGroupDescription", valid_594737
  var valid_594738 = query.getOrDefault("DBSubnetGroupName")
  valid_594738 = validateParameter(valid_594738, JString, required = true,
                                 default = nil)
  if valid_594738 != nil:
    section.add "DBSubnetGroupName", valid_594738
  var valid_594739 = query.getOrDefault("Version")
  valid_594739 = validateParameter(valid_594739, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594739 != nil:
    section.add "Version", valid_594739
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594740 = header.getOrDefault("X-Amz-Signature")
  valid_594740 = validateParameter(valid_594740, JString, required = false,
                                 default = nil)
  if valid_594740 != nil:
    section.add "X-Amz-Signature", valid_594740
  var valid_594741 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594741 = validateParameter(valid_594741, JString, required = false,
                                 default = nil)
  if valid_594741 != nil:
    section.add "X-Amz-Content-Sha256", valid_594741
  var valid_594742 = header.getOrDefault("X-Amz-Date")
  valid_594742 = validateParameter(valid_594742, JString, required = false,
                                 default = nil)
  if valid_594742 != nil:
    section.add "X-Amz-Date", valid_594742
  var valid_594743 = header.getOrDefault("X-Amz-Credential")
  valid_594743 = validateParameter(valid_594743, JString, required = false,
                                 default = nil)
  if valid_594743 != nil:
    section.add "X-Amz-Credential", valid_594743
  var valid_594744 = header.getOrDefault("X-Amz-Security-Token")
  valid_594744 = validateParameter(valid_594744, JString, required = false,
                                 default = nil)
  if valid_594744 != nil:
    section.add "X-Amz-Security-Token", valid_594744
  var valid_594745 = header.getOrDefault("X-Amz-Algorithm")
  valid_594745 = validateParameter(valid_594745, JString, required = false,
                                 default = nil)
  if valid_594745 != nil:
    section.add "X-Amz-Algorithm", valid_594745
  var valid_594746 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594746 = validateParameter(valid_594746, JString, required = false,
                                 default = nil)
  if valid_594746 != nil:
    section.add "X-Amz-SignedHeaders", valid_594746
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594747: Call_GetModifyDBSubnetGroup_594732; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_594747.validator(path, query, header, formData, body)
  let scheme = call_594747.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594747.url(scheme.get, call_594747.host, call_594747.base,
                         call_594747.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594747, url, valid)

proc call*(call_594748: Call_GetModifyDBSubnetGroup_594732; SubnetIds: JsonNode;
          DBSubnetGroupName: string; Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_594749 = newJObject()
  if SubnetIds != nil:
    query_594749.add "SubnetIds", SubnetIds
  add(query_594749, "Action", newJString(Action))
  add(query_594749, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_594749, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_594749, "Version", newJString(Version))
  result = call_594748.call(nil, query_594749, nil, nil, nil)

var getModifyDBSubnetGroup* = Call_GetModifyDBSubnetGroup_594732(
    name: "getModifyDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_GetModifyDBSubnetGroup_594733, base: "/",
    url: url_GetModifyDBSubnetGroup_594734, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyEventSubscription_594789 = ref object of OpenApiRestCall_590348
proc url_PostModifyEventSubscription_594791(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyEventSubscription_594790(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594792 = query.getOrDefault("Action")
  valid_594792 = validateParameter(valid_594792, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_594792 != nil:
    section.add "Action", valid_594792
  var valid_594793 = query.getOrDefault("Version")
  valid_594793 = validateParameter(valid_594793, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594793 != nil:
    section.add "Version", valid_594793
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594794 = header.getOrDefault("X-Amz-Signature")
  valid_594794 = validateParameter(valid_594794, JString, required = false,
                                 default = nil)
  if valid_594794 != nil:
    section.add "X-Amz-Signature", valid_594794
  var valid_594795 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594795 = validateParameter(valid_594795, JString, required = false,
                                 default = nil)
  if valid_594795 != nil:
    section.add "X-Amz-Content-Sha256", valid_594795
  var valid_594796 = header.getOrDefault("X-Amz-Date")
  valid_594796 = validateParameter(valid_594796, JString, required = false,
                                 default = nil)
  if valid_594796 != nil:
    section.add "X-Amz-Date", valid_594796
  var valid_594797 = header.getOrDefault("X-Amz-Credential")
  valid_594797 = validateParameter(valid_594797, JString, required = false,
                                 default = nil)
  if valid_594797 != nil:
    section.add "X-Amz-Credential", valid_594797
  var valid_594798 = header.getOrDefault("X-Amz-Security-Token")
  valid_594798 = validateParameter(valid_594798, JString, required = false,
                                 default = nil)
  if valid_594798 != nil:
    section.add "X-Amz-Security-Token", valid_594798
  var valid_594799 = header.getOrDefault("X-Amz-Algorithm")
  valid_594799 = validateParameter(valid_594799, JString, required = false,
                                 default = nil)
  if valid_594799 != nil:
    section.add "X-Amz-Algorithm", valid_594799
  var valid_594800 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594800 = validateParameter(valid_594800, JString, required = false,
                                 default = nil)
  if valid_594800 != nil:
    section.add "X-Amz-SignedHeaders", valid_594800
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  section = newJObject()
  var valid_594801 = formData.getOrDefault("SnsTopicArn")
  valid_594801 = validateParameter(valid_594801, JString, required = false,
                                 default = nil)
  if valid_594801 != nil:
    section.add "SnsTopicArn", valid_594801
  var valid_594802 = formData.getOrDefault("Enabled")
  valid_594802 = validateParameter(valid_594802, JBool, required = false, default = nil)
  if valid_594802 != nil:
    section.add "Enabled", valid_594802
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_594803 = formData.getOrDefault("SubscriptionName")
  valid_594803 = validateParameter(valid_594803, JString, required = true,
                                 default = nil)
  if valid_594803 != nil:
    section.add "SubscriptionName", valid_594803
  var valid_594804 = formData.getOrDefault("SourceType")
  valid_594804 = validateParameter(valid_594804, JString, required = false,
                                 default = nil)
  if valid_594804 != nil:
    section.add "SourceType", valid_594804
  var valid_594805 = formData.getOrDefault("EventCategories")
  valid_594805 = validateParameter(valid_594805, JArray, required = false,
                                 default = nil)
  if valid_594805 != nil:
    section.add "EventCategories", valid_594805
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594806: Call_PostModifyEventSubscription_594789; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_594806.validator(path, query, header, formData, body)
  let scheme = call_594806.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594806.url(scheme.get, call_594806.host, call_594806.base,
                         call_594806.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594806, url, valid)

proc call*(call_594807: Call_PostModifyEventSubscription_594789;
          SubscriptionName: string; SnsTopicArn: string = ""; Enabled: bool = false;
          SourceType: string = ""; EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## postModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594808 = newJObject()
  var formData_594809 = newJObject()
  add(formData_594809, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_594809, "Enabled", newJBool(Enabled))
  add(formData_594809, "SubscriptionName", newJString(SubscriptionName))
  add(formData_594809, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_594809.add "EventCategories", EventCategories
  add(query_594808, "Action", newJString(Action))
  add(query_594808, "Version", newJString(Version))
  result = call_594807.call(nil, query_594808, nil, formData_594809, nil)

var postModifyEventSubscription* = Call_PostModifyEventSubscription_594789(
    name: "postModifyEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_PostModifyEventSubscription_594790, base: "/",
    url: url_PostModifyEventSubscription_594791,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyEventSubscription_594769 = ref object of OpenApiRestCall_590348
proc url_GetModifyEventSubscription_594771(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyEventSubscription_594770(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: JString (required)
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_594772 = query.getOrDefault("SourceType")
  valid_594772 = validateParameter(valid_594772, JString, required = false,
                                 default = nil)
  if valid_594772 != nil:
    section.add "SourceType", valid_594772
  var valid_594773 = query.getOrDefault("Enabled")
  valid_594773 = validateParameter(valid_594773, JBool, required = false, default = nil)
  if valid_594773 != nil:
    section.add "Enabled", valid_594773
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_594774 = query.getOrDefault("SubscriptionName")
  valid_594774 = validateParameter(valid_594774, JString, required = true,
                                 default = nil)
  if valid_594774 != nil:
    section.add "SubscriptionName", valid_594774
  var valid_594775 = query.getOrDefault("EventCategories")
  valid_594775 = validateParameter(valid_594775, JArray, required = false,
                                 default = nil)
  if valid_594775 != nil:
    section.add "EventCategories", valid_594775
  var valid_594776 = query.getOrDefault("Action")
  valid_594776 = validateParameter(valid_594776, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_594776 != nil:
    section.add "Action", valid_594776
  var valid_594777 = query.getOrDefault("SnsTopicArn")
  valid_594777 = validateParameter(valid_594777, JString, required = false,
                                 default = nil)
  if valid_594777 != nil:
    section.add "SnsTopicArn", valid_594777
  var valid_594778 = query.getOrDefault("Version")
  valid_594778 = validateParameter(valid_594778, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594778 != nil:
    section.add "Version", valid_594778
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594779 = header.getOrDefault("X-Amz-Signature")
  valid_594779 = validateParameter(valid_594779, JString, required = false,
                                 default = nil)
  if valid_594779 != nil:
    section.add "X-Amz-Signature", valid_594779
  var valid_594780 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594780 = validateParameter(valid_594780, JString, required = false,
                                 default = nil)
  if valid_594780 != nil:
    section.add "X-Amz-Content-Sha256", valid_594780
  var valid_594781 = header.getOrDefault("X-Amz-Date")
  valid_594781 = validateParameter(valid_594781, JString, required = false,
                                 default = nil)
  if valid_594781 != nil:
    section.add "X-Amz-Date", valid_594781
  var valid_594782 = header.getOrDefault("X-Amz-Credential")
  valid_594782 = validateParameter(valid_594782, JString, required = false,
                                 default = nil)
  if valid_594782 != nil:
    section.add "X-Amz-Credential", valid_594782
  var valid_594783 = header.getOrDefault("X-Amz-Security-Token")
  valid_594783 = validateParameter(valid_594783, JString, required = false,
                                 default = nil)
  if valid_594783 != nil:
    section.add "X-Amz-Security-Token", valid_594783
  var valid_594784 = header.getOrDefault("X-Amz-Algorithm")
  valid_594784 = validateParameter(valid_594784, JString, required = false,
                                 default = nil)
  if valid_594784 != nil:
    section.add "X-Amz-Algorithm", valid_594784
  var valid_594785 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594785 = validateParameter(valid_594785, JString, required = false,
                                 default = nil)
  if valid_594785 != nil:
    section.add "X-Amz-SignedHeaders", valid_594785
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594786: Call_GetModifyEventSubscription_594769; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_594786.validator(path, query, header, formData, body)
  let scheme = call_594786.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594786.url(scheme.get, call_594786.host, call_594786.base,
                         call_594786.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594786, url, valid)

proc call*(call_594787: Call_GetModifyEventSubscription_594769;
          SubscriptionName: string; SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; SnsTopicArn: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_594788 = newJObject()
  add(query_594788, "SourceType", newJString(SourceType))
  add(query_594788, "Enabled", newJBool(Enabled))
  add(query_594788, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_594788.add "EventCategories", EventCategories
  add(query_594788, "Action", newJString(Action))
  add(query_594788, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_594788, "Version", newJString(Version))
  result = call_594787.call(nil, query_594788, nil, nil, nil)

var getModifyEventSubscription* = Call_GetModifyEventSubscription_594769(
    name: "getModifyEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_GetModifyEventSubscription_594770, base: "/",
    url: url_GetModifyEventSubscription_594771,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyGlobalCluster_594828 = ref object of OpenApiRestCall_590348
proc url_PostModifyGlobalCluster_594830(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyGlobalCluster_594829(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594831 = query.getOrDefault("Action")
  valid_594831 = validateParameter(valid_594831, JString, required = true,
                                 default = newJString("ModifyGlobalCluster"))
  if valid_594831 != nil:
    section.add "Action", valid_594831
  var valid_594832 = query.getOrDefault("Version")
  valid_594832 = validateParameter(valid_594832, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594832 != nil:
    section.add "Version", valid_594832
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594833 = header.getOrDefault("X-Amz-Signature")
  valid_594833 = validateParameter(valid_594833, JString, required = false,
                                 default = nil)
  if valid_594833 != nil:
    section.add "X-Amz-Signature", valid_594833
  var valid_594834 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594834 = validateParameter(valid_594834, JString, required = false,
                                 default = nil)
  if valid_594834 != nil:
    section.add "X-Amz-Content-Sha256", valid_594834
  var valid_594835 = header.getOrDefault("X-Amz-Date")
  valid_594835 = validateParameter(valid_594835, JString, required = false,
                                 default = nil)
  if valid_594835 != nil:
    section.add "X-Amz-Date", valid_594835
  var valid_594836 = header.getOrDefault("X-Amz-Credential")
  valid_594836 = validateParameter(valid_594836, JString, required = false,
                                 default = nil)
  if valid_594836 != nil:
    section.add "X-Amz-Credential", valid_594836
  var valid_594837 = header.getOrDefault("X-Amz-Security-Token")
  valid_594837 = validateParameter(valid_594837, JString, required = false,
                                 default = nil)
  if valid_594837 != nil:
    section.add "X-Amz-Security-Token", valid_594837
  var valid_594838 = header.getOrDefault("X-Amz-Algorithm")
  valid_594838 = validateParameter(valid_594838, JString, required = false,
                                 default = nil)
  if valid_594838 != nil:
    section.add "X-Amz-Algorithm", valid_594838
  var valid_594839 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594839 = validateParameter(valid_594839, JString, required = false,
                                 default = nil)
  if valid_594839 != nil:
    section.add "X-Amz-SignedHeaders", valid_594839
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  section = newJObject()
  var valid_594840 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_594840 = validateParameter(valid_594840, JString, required = false,
                                 default = nil)
  if valid_594840 != nil:
    section.add "GlobalClusterIdentifier", valid_594840
  var valid_594841 = formData.getOrDefault("DeletionProtection")
  valid_594841 = validateParameter(valid_594841, JBool, required = false, default = nil)
  if valid_594841 != nil:
    section.add "DeletionProtection", valid_594841
  var valid_594842 = formData.getOrDefault("NewGlobalClusterIdentifier")
  valid_594842 = validateParameter(valid_594842, JString, required = false,
                                 default = nil)
  if valid_594842 != nil:
    section.add "NewGlobalClusterIdentifier", valid_594842
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594843: Call_PostModifyGlobalCluster_594828; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594843.validator(path, query, header, formData, body)
  let scheme = call_594843.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594843.url(scheme.get, call_594843.host, call_594843.base,
                         call_594843.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594843, url, valid)

proc call*(call_594844: Call_PostModifyGlobalCluster_594828;
          GlobalClusterIdentifier: string = "";
          Action: string = "ModifyGlobalCluster"; Version: string = "2014-10-31";
          DeletionProtection: bool = false; NewGlobalClusterIdentifier: string = ""): Recallable =
  ## postModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  var query_594845 = newJObject()
  var formData_594846 = newJObject()
  add(formData_594846, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_594845, "Action", newJString(Action))
  add(query_594845, "Version", newJString(Version))
  add(formData_594846, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_594846, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  result = call_594844.call(nil, query_594845, nil, formData_594846, nil)

var postModifyGlobalCluster* = Call_PostModifyGlobalCluster_594828(
    name: "postModifyGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_PostModifyGlobalCluster_594829, base: "/",
    url: url_PostModifyGlobalCluster_594830, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyGlobalCluster_594810 = ref object of OpenApiRestCall_590348
proc url_GetModifyGlobalCluster_594812(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyGlobalCluster_594811(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_594813 = query.getOrDefault("NewGlobalClusterIdentifier")
  valid_594813 = validateParameter(valid_594813, JString, required = false,
                                 default = nil)
  if valid_594813 != nil:
    section.add "NewGlobalClusterIdentifier", valid_594813
  var valid_594814 = query.getOrDefault("GlobalClusterIdentifier")
  valid_594814 = validateParameter(valid_594814, JString, required = false,
                                 default = nil)
  if valid_594814 != nil:
    section.add "GlobalClusterIdentifier", valid_594814
  var valid_594815 = query.getOrDefault("DeletionProtection")
  valid_594815 = validateParameter(valid_594815, JBool, required = false, default = nil)
  if valid_594815 != nil:
    section.add "DeletionProtection", valid_594815
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594816 = query.getOrDefault("Action")
  valid_594816 = validateParameter(valid_594816, JString, required = true,
                                 default = newJString("ModifyGlobalCluster"))
  if valid_594816 != nil:
    section.add "Action", valid_594816
  var valid_594817 = query.getOrDefault("Version")
  valid_594817 = validateParameter(valid_594817, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594817 != nil:
    section.add "Version", valid_594817
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594818 = header.getOrDefault("X-Amz-Signature")
  valid_594818 = validateParameter(valid_594818, JString, required = false,
                                 default = nil)
  if valid_594818 != nil:
    section.add "X-Amz-Signature", valid_594818
  var valid_594819 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594819 = validateParameter(valid_594819, JString, required = false,
                                 default = nil)
  if valid_594819 != nil:
    section.add "X-Amz-Content-Sha256", valid_594819
  var valid_594820 = header.getOrDefault("X-Amz-Date")
  valid_594820 = validateParameter(valid_594820, JString, required = false,
                                 default = nil)
  if valid_594820 != nil:
    section.add "X-Amz-Date", valid_594820
  var valid_594821 = header.getOrDefault("X-Amz-Credential")
  valid_594821 = validateParameter(valid_594821, JString, required = false,
                                 default = nil)
  if valid_594821 != nil:
    section.add "X-Amz-Credential", valid_594821
  var valid_594822 = header.getOrDefault("X-Amz-Security-Token")
  valid_594822 = validateParameter(valid_594822, JString, required = false,
                                 default = nil)
  if valid_594822 != nil:
    section.add "X-Amz-Security-Token", valid_594822
  var valid_594823 = header.getOrDefault("X-Amz-Algorithm")
  valid_594823 = validateParameter(valid_594823, JString, required = false,
                                 default = nil)
  if valid_594823 != nil:
    section.add "X-Amz-Algorithm", valid_594823
  var valid_594824 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594824 = validateParameter(valid_594824, JString, required = false,
                                 default = nil)
  if valid_594824 != nil:
    section.add "X-Amz-SignedHeaders", valid_594824
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594825: Call_GetModifyGlobalCluster_594810; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594825.validator(path, query, header, formData, body)
  let scheme = call_594825.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594825.url(scheme.get, call_594825.host, call_594825.base,
                         call_594825.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594825, url, valid)

proc call*(call_594826: Call_GetModifyGlobalCluster_594810;
          NewGlobalClusterIdentifier: string = "";
          GlobalClusterIdentifier: string = ""; DeletionProtection: bool = false;
          Action: string = "ModifyGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## getModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594827 = newJObject()
  add(query_594827, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  add(query_594827, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_594827, "DeletionProtection", newJBool(DeletionProtection))
  add(query_594827, "Action", newJString(Action))
  add(query_594827, "Version", newJString(Version))
  result = call_594826.call(nil, query_594827, nil, nil, nil)

var getModifyGlobalCluster* = Call_GetModifyGlobalCluster_594810(
    name: "getModifyGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_GetModifyGlobalCluster_594811, base: "/",
    url: url_GetModifyGlobalCluster_594812, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyOptionGroup_594866 = ref object of OpenApiRestCall_590348
proc url_PostModifyOptionGroup_594868(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyOptionGroup_594867(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594869 = query.getOrDefault("Action")
  valid_594869 = validateParameter(valid_594869, JString, required = true,
                                 default = newJString("ModifyOptionGroup"))
  if valid_594869 != nil:
    section.add "Action", valid_594869
  var valid_594870 = query.getOrDefault("Version")
  valid_594870 = validateParameter(valid_594870, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594870 != nil:
    section.add "Version", valid_594870
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594871 = header.getOrDefault("X-Amz-Signature")
  valid_594871 = validateParameter(valid_594871, JString, required = false,
                                 default = nil)
  if valid_594871 != nil:
    section.add "X-Amz-Signature", valid_594871
  var valid_594872 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594872 = validateParameter(valid_594872, JString, required = false,
                                 default = nil)
  if valid_594872 != nil:
    section.add "X-Amz-Content-Sha256", valid_594872
  var valid_594873 = header.getOrDefault("X-Amz-Date")
  valid_594873 = validateParameter(valid_594873, JString, required = false,
                                 default = nil)
  if valid_594873 != nil:
    section.add "X-Amz-Date", valid_594873
  var valid_594874 = header.getOrDefault("X-Amz-Credential")
  valid_594874 = validateParameter(valid_594874, JString, required = false,
                                 default = nil)
  if valid_594874 != nil:
    section.add "X-Amz-Credential", valid_594874
  var valid_594875 = header.getOrDefault("X-Amz-Security-Token")
  valid_594875 = validateParameter(valid_594875, JString, required = false,
                                 default = nil)
  if valid_594875 != nil:
    section.add "X-Amz-Security-Token", valid_594875
  var valid_594876 = header.getOrDefault("X-Amz-Algorithm")
  valid_594876 = validateParameter(valid_594876, JString, required = false,
                                 default = nil)
  if valid_594876 != nil:
    section.add "X-Amz-Algorithm", valid_594876
  var valid_594877 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594877 = validateParameter(valid_594877, JString, required = false,
                                 default = nil)
  if valid_594877 != nil:
    section.add "X-Amz-SignedHeaders", valid_594877
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  section = newJObject()
  var valid_594878 = formData.getOrDefault("OptionsToRemove")
  valid_594878 = validateParameter(valid_594878, JArray, required = false,
                                 default = nil)
  if valid_594878 != nil:
    section.add "OptionsToRemove", valid_594878
  var valid_594879 = formData.getOrDefault("ApplyImmediately")
  valid_594879 = validateParameter(valid_594879, JBool, required = false, default = nil)
  if valid_594879 != nil:
    section.add "ApplyImmediately", valid_594879
  var valid_594880 = formData.getOrDefault("OptionsToInclude")
  valid_594880 = validateParameter(valid_594880, JArray, required = false,
                                 default = nil)
  if valid_594880 != nil:
    section.add "OptionsToInclude", valid_594880
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_594881 = formData.getOrDefault("OptionGroupName")
  valid_594881 = validateParameter(valid_594881, JString, required = true,
                                 default = nil)
  if valid_594881 != nil:
    section.add "OptionGroupName", valid_594881
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594882: Call_PostModifyOptionGroup_594866; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_594882.validator(path, query, header, formData, body)
  let scheme = call_594882.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594882.url(scheme.get, call_594882.host, call_594882.base,
                         call_594882.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594882, url, valid)

proc call*(call_594883: Call_PostModifyOptionGroup_594866; OptionGroupName: string;
          OptionsToRemove: JsonNode = nil; ApplyImmediately: bool = false;
          OptionsToInclude: JsonNode = nil; Action: string = "ModifyOptionGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyOptionGroup
  ## Modifies an existing option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  var query_594884 = newJObject()
  var formData_594885 = newJObject()
  if OptionsToRemove != nil:
    formData_594885.add "OptionsToRemove", OptionsToRemove
  add(formData_594885, "ApplyImmediately", newJBool(ApplyImmediately))
  if OptionsToInclude != nil:
    formData_594885.add "OptionsToInclude", OptionsToInclude
  add(query_594884, "Action", newJString(Action))
  add(formData_594885, "OptionGroupName", newJString(OptionGroupName))
  add(query_594884, "Version", newJString(Version))
  result = call_594883.call(nil, query_594884, nil, formData_594885, nil)

var postModifyOptionGroup* = Call_PostModifyOptionGroup_594866(
    name: "postModifyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_PostModifyOptionGroup_594867, base: "/",
    url: url_PostModifyOptionGroup_594868, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyOptionGroup_594847 = ref object of OpenApiRestCall_590348
proc url_GetModifyOptionGroup_594849(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyOptionGroup_594848(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594850 = query.getOrDefault("Action")
  valid_594850 = validateParameter(valid_594850, JString, required = true,
                                 default = newJString("ModifyOptionGroup"))
  if valid_594850 != nil:
    section.add "Action", valid_594850
  var valid_594851 = query.getOrDefault("ApplyImmediately")
  valid_594851 = validateParameter(valid_594851, JBool, required = false, default = nil)
  if valid_594851 != nil:
    section.add "ApplyImmediately", valid_594851
  var valid_594852 = query.getOrDefault("OptionsToRemove")
  valid_594852 = validateParameter(valid_594852, JArray, required = false,
                                 default = nil)
  if valid_594852 != nil:
    section.add "OptionsToRemove", valid_594852
  var valid_594853 = query.getOrDefault("OptionsToInclude")
  valid_594853 = validateParameter(valid_594853, JArray, required = false,
                                 default = nil)
  if valid_594853 != nil:
    section.add "OptionsToInclude", valid_594853
  var valid_594854 = query.getOrDefault("OptionGroupName")
  valid_594854 = validateParameter(valid_594854, JString, required = true,
                                 default = nil)
  if valid_594854 != nil:
    section.add "OptionGroupName", valid_594854
  var valid_594855 = query.getOrDefault("Version")
  valid_594855 = validateParameter(valid_594855, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594855 != nil:
    section.add "Version", valid_594855
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594856 = header.getOrDefault("X-Amz-Signature")
  valid_594856 = validateParameter(valid_594856, JString, required = false,
                                 default = nil)
  if valid_594856 != nil:
    section.add "X-Amz-Signature", valid_594856
  var valid_594857 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594857 = validateParameter(valid_594857, JString, required = false,
                                 default = nil)
  if valid_594857 != nil:
    section.add "X-Amz-Content-Sha256", valid_594857
  var valid_594858 = header.getOrDefault("X-Amz-Date")
  valid_594858 = validateParameter(valid_594858, JString, required = false,
                                 default = nil)
  if valid_594858 != nil:
    section.add "X-Amz-Date", valid_594858
  var valid_594859 = header.getOrDefault("X-Amz-Credential")
  valid_594859 = validateParameter(valid_594859, JString, required = false,
                                 default = nil)
  if valid_594859 != nil:
    section.add "X-Amz-Credential", valid_594859
  var valid_594860 = header.getOrDefault("X-Amz-Security-Token")
  valid_594860 = validateParameter(valid_594860, JString, required = false,
                                 default = nil)
  if valid_594860 != nil:
    section.add "X-Amz-Security-Token", valid_594860
  var valid_594861 = header.getOrDefault("X-Amz-Algorithm")
  valid_594861 = validateParameter(valid_594861, JString, required = false,
                                 default = nil)
  if valid_594861 != nil:
    section.add "X-Amz-Algorithm", valid_594861
  var valid_594862 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594862 = validateParameter(valid_594862, JString, required = false,
                                 default = nil)
  if valid_594862 != nil:
    section.add "X-Amz-SignedHeaders", valid_594862
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594863: Call_GetModifyOptionGroup_594847; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_594863.validator(path, query, header, formData, body)
  let scheme = call_594863.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594863.url(scheme.get, call_594863.host, call_594863.base,
                         call_594863.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594863, url, valid)

proc call*(call_594864: Call_GetModifyOptionGroup_594847; OptionGroupName: string;
          Action: string = "ModifyOptionGroup"; ApplyImmediately: bool = false;
          OptionsToRemove: JsonNode = nil; OptionsToInclude: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## getModifyOptionGroup
  ## Modifies an existing option group.
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  var query_594865 = newJObject()
  add(query_594865, "Action", newJString(Action))
  add(query_594865, "ApplyImmediately", newJBool(ApplyImmediately))
  if OptionsToRemove != nil:
    query_594865.add "OptionsToRemove", OptionsToRemove
  if OptionsToInclude != nil:
    query_594865.add "OptionsToInclude", OptionsToInclude
  add(query_594865, "OptionGroupName", newJString(OptionGroupName))
  add(query_594865, "Version", newJString(Version))
  result = call_594864.call(nil, query_594865, nil, nil, nil)

var getModifyOptionGroup* = Call_GetModifyOptionGroup_594847(
    name: "getModifyOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_GetModifyOptionGroup_594848, base: "/",
    url: url_GetModifyOptionGroup_594849, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplica_594904 = ref object of OpenApiRestCall_590348
proc url_PostPromoteReadReplica_594906(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPromoteReadReplica_594905(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594907 = query.getOrDefault("Action")
  valid_594907 = validateParameter(valid_594907, JString, required = true,
                                 default = newJString("PromoteReadReplica"))
  if valid_594907 != nil:
    section.add "Action", valid_594907
  var valid_594908 = query.getOrDefault("Version")
  valid_594908 = validateParameter(valid_594908, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594908 != nil:
    section.add "Version", valid_594908
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594909 = header.getOrDefault("X-Amz-Signature")
  valid_594909 = validateParameter(valid_594909, JString, required = false,
                                 default = nil)
  if valid_594909 != nil:
    section.add "X-Amz-Signature", valid_594909
  var valid_594910 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594910 = validateParameter(valid_594910, JString, required = false,
                                 default = nil)
  if valid_594910 != nil:
    section.add "X-Amz-Content-Sha256", valid_594910
  var valid_594911 = header.getOrDefault("X-Amz-Date")
  valid_594911 = validateParameter(valid_594911, JString, required = false,
                                 default = nil)
  if valid_594911 != nil:
    section.add "X-Amz-Date", valid_594911
  var valid_594912 = header.getOrDefault("X-Amz-Credential")
  valid_594912 = validateParameter(valid_594912, JString, required = false,
                                 default = nil)
  if valid_594912 != nil:
    section.add "X-Amz-Credential", valid_594912
  var valid_594913 = header.getOrDefault("X-Amz-Security-Token")
  valid_594913 = validateParameter(valid_594913, JString, required = false,
                                 default = nil)
  if valid_594913 != nil:
    section.add "X-Amz-Security-Token", valid_594913
  var valid_594914 = header.getOrDefault("X-Amz-Algorithm")
  valid_594914 = validateParameter(valid_594914, JString, required = false,
                                 default = nil)
  if valid_594914 != nil:
    section.add "X-Amz-Algorithm", valid_594914
  var valid_594915 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594915 = validateParameter(valid_594915, JString, required = false,
                                 default = nil)
  if valid_594915 != nil:
    section.add "X-Amz-SignedHeaders", valid_594915
  result.add "header", section
  ## parameters in `formData` object:
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  section = newJObject()
  var valid_594916 = formData.getOrDefault("PreferredBackupWindow")
  valid_594916 = validateParameter(valid_594916, JString, required = false,
                                 default = nil)
  if valid_594916 != nil:
    section.add "PreferredBackupWindow", valid_594916
  var valid_594917 = formData.getOrDefault("BackupRetentionPeriod")
  valid_594917 = validateParameter(valid_594917, JInt, required = false, default = nil)
  if valid_594917 != nil:
    section.add "BackupRetentionPeriod", valid_594917
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_594918 = formData.getOrDefault("DBInstanceIdentifier")
  valid_594918 = validateParameter(valid_594918, JString, required = true,
                                 default = nil)
  if valid_594918 != nil:
    section.add "DBInstanceIdentifier", valid_594918
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594919: Call_PostPromoteReadReplica_594904; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_594919.validator(path, query, header, formData, body)
  let scheme = call_594919.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594919.url(scheme.get, call_594919.host, call_594919.base,
                         call_594919.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594919, url, valid)

proc call*(call_594920: Call_PostPromoteReadReplica_594904;
          DBInstanceIdentifier: string; PreferredBackupWindow: string = "";
          BackupRetentionPeriod: int = 0; Action: string = "PromoteReadReplica";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594921 = newJObject()
  var formData_594922 = newJObject()
  add(formData_594922, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_594922, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_594922, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_594921, "Action", newJString(Action))
  add(query_594921, "Version", newJString(Version))
  result = call_594920.call(nil, query_594921, nil, formData_594922, nil)

var postPromoteReadReplica* = Call_PostPromoteReadReplica_594904(
    name: "postPromoteReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_PostPromoteReadReplica_594905, base: "/",
    url: url_PostPromoteReadReplica_594906, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplica_594886 = ref object of OpenApiRestCall_590348
proc url_GetPromoteReadReplica_594888(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPromoteReadReplica_594887(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_594889 = query.getOrDefault("DBInstanceIdentifier")
  valid_594889 = validateParameter(valid_594889, JString, required = true,
                                 default = nil)
  if valid_594889 != nil:
    section.add "DBInstanceIdentifier", valid_594889
  var valid_594890 = query.getOrDefault("BackupRetentionPeriod")
  valid_594890 = validateParameter(valid_594890, JInt, required = false, default = nil)
  if valid_594890 != nil:
    section.add "BackupRetentionPeriod", valid_594890
  var valid_594891 = query.getOrDefault("Action")
  valid_594891 = validateParameter(valid_594891, JString, required = true,
                                 default = newJString("PromoteReadReplica"))
  if valid_594891 != nil:
    section.add "Action", valid_594891
  var valid_594892 = query.getOrDefault("Version")
  valid_594892 = validateParameter(valid_594892, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594892 != nil:
    section.add "Version", valid_594892
  var valid_594893 = query.getOrDefault("PreferredBackupWindow")
  valid_594893 = validateParameter(valid_594893, JString, required = false,
                                 default = nil)
  if valid_594893 != nil:
    section.add "PreferredBackupWindow", valid_594893
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594894 = header.getOrDefault("X-Amz-Signature")
  valid_594894 = validateParameter(valid_594894, JString, required = false,
                                 default = nil)
  if valid_594894 != nil:
    section.add "X-Amz-Signature", valid_594894
  var valid_594895 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594895 = validateParameter(valid_594895, JString, required = false,
                                 default = nil)
  if valid_594895 != nil:
    section.add "X-Amz-Content-Sha256", valid_594895
  var valid_594896 = header.getOrDefault("X-Amz-Date")
  valid_594896 = validateParameter(valid_594896, JString, required = false,
                                 default = nil)
  if valid_594896 != nil:
    section.add "X-Amz-Date", valid_594896
  var valid_594897 = header.getOrDefault("X-Amz-Credential")
  valid_594897 = validateParameter(valid_594897, JString, required = false,
                                 default = nil)
  if valid_594897 != nil:
    section.add "X-Amz-Credential", valid_594897
  var valid_594898 = header.getOrDefault("X-Amz-Security-Token")
  valid_594898 = validateParameter(valid_594898, JString, required = false,
                                 default = nil)
  if valid_594898 != nil:
    section.add "X-Amz-Security-Token", valid_594898
  var valid_594899 = header.getOrDefault("X-Amz-Algorithm")
  valid_594899 = validateParameter(valid_594899, JString, required = false,
                                 default = nil)
  if valid_594899 != nil:
    section.add "X-Amz-Algorithm", valid_594899
  var valid_594900 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594900 = validateParameter(valid_594900, JString, required = false,
                                 default = nil)
  if valid_594900 != nil:
    section.add "X-Amz-SignedHeaders", valid_594900
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594901: Call_GetPromoteReadReplica_594886; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_594901.validator(path, query, header, formData, body)
  let scheme = call_594901.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594901.url(scheme.get, call_594901.host, call_594901.base,
                         call_594901.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594901, url, valid)

proc call*(call_594902: Call_GetPromoteReadReplica_594886;
          DBInstanceIdentifier: string; BackupRetentionPeriod: int = 0;
          Action: string = "PromoteReadReplica"; Version: string = "2014-10-31";
          PreferredBackupWindow: string = ""): Recallable =
  ## getPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  var query_594903 = newJObject()
  add(query_594903, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_594903, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_594903, "Action", newJString(Action))
  add(query_594903, "Version", newJString(Version))
  add(query_594903, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  result = call_594902.call(nil, query_594903, nil, nil, nil)

var getPromoteReadReplica* = Call_GetPromoteReadReplica_594886(
    name: "getPromoteReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_GetPromoteReadReplica_594887, base: "/",
    url: url_GetPromoteReadReplica_594888, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplicaDBCluster_594939 = ref object of OpenApiRestCall_590348
proc url_PostPromoteReadReplicaDBCluster_594941(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPromoteReadReplicaDBCluster_594940(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594942 = query.getOrDefault("Action")
  valid_594942 = validateParameter(valid_594942, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_594942 != nil:
    section.add "Action", valid_594942
  var valid_594943 = query.getOrDefault("Version")
  valid_594943 = validateParameter(valid_594943, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594943 != nil:
    section.add "Version", valid_594943
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594944 = header.getOrDefault("X-Amz-Signature")
  valid_594944 = validateParameter(valid_594944, JString, required = false,
                                 default = nil)
  if valid_594944 != nil:
    section.add "X-Amz-Signature", valid_594944
  var valid_594945 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594945 = validateParameter(valid_594945, JString, required = false,
                                 default = nil)
  if valid_594945 != nil:
    section.add "X-Amz-Content-Sha256", valid_594945
  var valid_594946 = header.getOrDefault("X-Amz-Date")
  valid_594946 = validateParameter(valid_594946, JString, required = false,
                                 default = nil)
  if valid_594946 != nil:
    section.add "X-Amz-Date", valid_594946
  var valid_594947 = header.getOrDefault("X-Amz-Credential")
  valid_594947 = validateParameter(valid_594947, JString, required = false,
                                 default = nil)
  if valid_594947 != nil:
    section.add "X-Amz-Credential", valid_594947
  var valid_594948 = header.getOrDefault("X-Amz-Security-Token")
  valid_594948 = validateParameter(valid_594948, JString, required = false,
                                 default = nil)
  if valid_594948 != nil:
    section.add "X-Amz-Security-Token", valid_594948
  var valid_594949 = header.getOrDefault("X-Amz-Algorithm")
  valid_594949 = validateParameter(valid_594949, JString, required = false,
                                 default = nil)
  if valid_594949 != nil:
    section.add "X-Amz-Algorithm", valid_594949
  var valid_594950 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594950 = validateParameter(valid_594950, JString, required = false,
                                 default = nil)
  if valid_594950 != nil:
    section.add "X-Amz-SignedHeaders", valid_594950
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_594951 = formData.getOrDefault("DBClusterIdentifier")
  valid_594951 = validateParameter(valid_594951, JString, required = true,
                                 default = nil)
  if valid_594951 != nil:
    section.add "DBClusterIdentifier", valid_594951
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594952: Call_PostPromoteReadReplicaDBCluster_594939;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594952.validator(path, query, header, formData, body)
  let scheme = call_594952.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594952.url(scheme.get, call_594952.host, call_594952.base,
                         call_594952.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594952, url, valid)

proc call*(call_594953: Call_PostPromoteReadReplicaDBCluster_594939;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  var query_594954 = newJObject()
  var formData_594955 = newJObject()
  add(query_594954, "Action", newJString(Action))
  add(query_594954, "Version", newJString(Version))
  add(formData_594955, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_594953.call(nil, query_594954, nil, formData_594955, nil)

var postPromoteReadReplicaDBCluster* = Call_PostPromoteReadReplicaDBCluster_594939(
    name: "postPromoteReadReplicaDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_PostPromoteReadReplicaDBCluster_594940, base: "/",
    url: url_PostPromoteReadReplicaDBCluster_594941,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplicaDBCluster_594923 = ref object of OpenApiRestCall_590348
proc url_GetPromoteReadReplicaDBCluster_594925(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPromoteReadReplicaDBCluster_594924(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_594926 = query.getOrDefault("DBClusterIdentifier")
  valid_594926 = validateParameter(valid_594926, JString, required = true,
                                 default = nil)
  if valid_594926 != nil:
    section.add "DBClusterIdentifier", valid_594926
  var valid_594927 = query.getOrDefault("Action")
  valid_594927 = validateParameter(valid_594927, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_594927 != nil:
    section.add "Action", valid_594927
  var valid_594928 = query.getOrDefault("Version")
  valid_594928 = validateParameter(valid_594928, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594928 != nil:
    section.add "Version", valid_594928
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594929 = header.getOrDefault("X-Amz-Signature")
  valid_594929 = validateParameter(valid_594929, JString, required = false,
                                 default = nil)
  if valid_594929 != nil:
    section.add "X-Amz-Signature", valid_594929
  var valid_594930 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594930 = validateParameter(valid_594930, JString, required = false,
                                 default = nil)
  if valid_594930 != nil:
    section.add "X-Amz-Content-Sha256", valid_594930
  var valid_594931 = header.getOrDefault("X-Amz-Date")
  valid_594931 = validateParameter(valid_594931, JString, required = false,
                                 default = nil)
  if valid_594931 != nil:
    section.add "X-Amz-Date", valid_594931
  var valid_594932 = header.getOrDefault("X-Amz-Credential")
  valid_594932 = validateParameter(valid_594932, JString, required = false,
                                 default = nil)
  if valid_594932 != nil:
    section.add "X-Amz-Credential", valid_594932
  var valid_594933 = header.getOrDefault("X-Amz-Security-Token")
  valid_594933 = validateParameter(valid_594933, JString, required = false,
                                 default = nil)
  if valid_594933 != nil:
    section.add "X-Amz-Security-Token", valid_594933
  var valid_594934 = header.getOrDefault("X-Amz-Algorithm")
  valid_594934 = validateParameter(valid_594934, JString, required = false,
                                 default = nil)
  if valid_594934 != nil:
    section.add "X-Amz-Algorithm", valid_594934
  var valid_594935 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594935 = validateParameter(valid_594935, JString, required = false,
                                 default = nil)
  if valid_594935 != nil:
    section.add "X-Amz-SignedHeaders", valid_594935
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594936: Call_GetPromoteReadReplicaDBCluster_594923; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_594936.validator(path, query, header, formData, body)
  let scheme = call_594936.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594936.url(scheme.get, call_594936.host, call_594936.base,
                         call_594936.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594936, url, valid)

proc call*(call_594937: Call_GetPromoteReadReplicaDBCluster_594923;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594938 = newJObject()
  add(query_594938, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_594938, "Action", newJString(Action))
  add(query_594938, "Version", newJString(Version))
  result = call_594937.call(nil, query_594938, nil, nil, nil)

var getPromoteReadReplicaDBCluster* = Call_GetPromoteReadReplicaDBCluster_594923(
    name: "getPromoteReadReplicaDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_GetPromoteReadReplicaDBCluster_594924, base: "/",
    url: url_GetPromoteReadReplicaDBCluster_594925,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPurchaseReservedDBInstancesOffering_594975 = ref object of OpenApiRestCall_590348
proc url_PostPurchaseReservedDBInstancesOffering_594977(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPurchaseReservedDBInstancesOffering_594976(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594978 = query.getOrDefault("Action")
  valid_594978 = validateParameter(valid_594978, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_594978 != nil:
    section.add "Action", valid_594978
  var valid_594979 = query.getOrDefault("Version")
  valid_594979 = validateParameter(valid_594979, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594979 != nil:
    section.add "Version", valid_594979
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594980 = header.getOrDefault("X-Amz-Signature")
  valid_594980 = validateParameter(valid_594980, JString, required = false,
                                 default = nil)
  if valid_594980 != nil:
    section.add "X-Amz-Signature", valid_594980
  var valid_594981 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594981 = validateParameter(valid_594981, JString, required = false,
                                 default = nil)
  if valid_594981 != nil:
    section.add "X-Amz-Content-Sha256", valid_594981
  var valid_594982 = header.getOrDefault("X-Amz-Date")
  valid_594982 = validateParameter(valid_594982, JString, required = false,
                                 default = nil)
  if valid_594982 != nil:
    section.add "X-Amz-Date", valid_594982
  var valid_594983 = header.getOrDefault("X-Amz-Credential")
  valid_594983 = validateParameter(valid_594983, JString, required = false,
                                 default = nil)
  if valid_594983 != nil:
    section.add "X-Amz-Credential", valid_594983
  var valid_594984 = header.getOrDefault("X-Amz-Security-Token")
  valid_594984 = validateParameter(valid_594984, JString, required = false,
                                 default = nil)
  if valid_594984 != nil:
    section.add "X-Amz-Security-Token", valid_594984
  var valid_594985 = header.getOrDefault("X-Amz-Algorithm")
  valid_594985 = validateParameter(valid_594985, JString, required = false,
                                 default = nil)
  if valid_594985 != nil:
    section.add "X-Amz-Algorithm", valid_594985
  var valid_594986 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594986 = validateParameter(valid_594986, JString, required = false,
                                 default = nil)
  if valid_594986 != nil:
    section.add "X-Amz-SignedHeaders", valid_594986
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  section = newJObject()
  var valid_594987 = formData.getOrDefault("ReservedDBInstanceId")
  valid_594987 = validateParameter(valid_594987, JString, required = false,
                                 default = nil)
  if valid_594987 != nil:
    section.add "ReservedDBInstanceId", valid_594987
  var valid_594988 = formData.getOrDefault("Tags")
  valid_594988 = validateParameter(valid_594988, JArray, required = false,
                                 default = nil)
  if valid_594988 != nil:
    section.add "Tags", valid_594988
  assert formData != nil, "formData argument is necessary due to required `ReservedDBInstancesOfferingId` field"
  var valid_594989 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_594989 = validateParameter(valid_594989, JString, required = true,
                                 default = nil)
  if valid_594989 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_594989
  var valid_594990 = formData.getOrDefault("DBInstanceCount")
  valid_594990 = validateParameter(valid_594990, JInt, required = false, default = nil)
  if valid_594990 != nil:
    section.add "DBInstanceCount", valid_594990
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594991: Call_PostPurchaseReservedDBInstancesOffering_594975;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_594991.validator(path, query, header, formData, body)
  let scheme = call_594991.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594991.url(scheme.get, call_594991.host, call_594991.base,
                         call_594991.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594991, url, valid)

proc call*(call_594992: Call_PostPurchaseReservedDBInstancesOffering_594975;
          ReservedDBInstancesOfferingId: string;
          ReservedDBInstanceId: string = "";
          Action: string = "PurchaseReservedDBInstancesOffering";
          Tags: JsonNode = nil; Version: string = "2014-10-31"; DBInstanceCount: int = 0): Recallable =
  ## postPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: string (required)
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  var query_594993 = newJObject()
  var formData_594994 = newJObject()
  add(formData_594994, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_594993, "Action", newJString(Action))
  if Tags != nil:
    formData_594994.add "Tags", Tags
  add(formData_594994, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_594993, "Version", newJString(Version))
  add(formData_594994, "DBInstanceCount", newJInt(DBInstanceCount))
  result = call_594992.call(nil, query_594993, nil, formData_594994, nil)

var postPurchaseReservedDBInstancesOffering* = Call_PostPurchaseReservedDBInstancesOffering_594975(
    name: "postPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_PostPurchaseReservedDBInstancesOffering_594976, base: "/",
    url: url_PostPurchaseReservedDBInstancesOffering_594977,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPurchaseReservedDBInstancesOffering_594956 = ref object of OpenApiRestCall_590348
proc url_GetPurchaseReservedDBInstancesOffering_594958(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPurchaseReservedDBInstancesOffering_594957(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: JString (required)
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_594959 = query.getOrDefault("Tags")
  valid_594959 = validateParameter(valid_594959, JArray, required = false,
                                 default = nil)
  if valid_594959 != nil:
    section.add "Tags", valid_594959
  var valid_594960 = query.getOrDefault("DBInstanceCount")
  valid_594960 = validateParameter(valid_594960, JInt, required = false, default = nil)
  if valid_594960 != nil:
    section.add "DBInstanceCount", valid_594960
  var valid_594961 = query.getOrDefault("ReservedDBInstanceId")
  valid_594961 = validateParameter(valid_594961, JString, required = false,
                                 default = nil)
  if valid_594961 != nil:
    section.add "ReservedDBInstanceId", valid_594961
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594962 = query.getOrDefault("Action")
  valid_594962 = validateParameter(valid_594962, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_594962 != nil:
    section.add "Action", valid_594962
  var valid_594963 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_594963 = validateParameter(valid_594963, JString, required = true,
                                 default = nil)
  if valid_594963 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_594963
  var valid_594964 = query.getOrDefault("Version")
  valid_594964 = validateParameter(valid_594964, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_594964 != nil:
    section.add "Version", valid_594964
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594965 = header.getOrDefault("X-Amz-Signature")
  valid_594965 = validateParameter(valid_594965, JString, required = false,
                                 default = nil)
  if valid_594965 != nil:
    section.add "X-Amz-Signature", valid_594965
  var valid_594966 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594966 = validateParameter(valid_594966, JString, required = false,
                                 default = nil)
  if valid_594966 != nil:
    section.add "X-Amz-Content-Sha256", valid_594966
  var valid_594967 = header.getOrDefault("X-Amz-Date")
  valid_594967 = validateParameter(valid_594967, JString, required = false,
                                 default = nil)
  if valid_594967 != nil:
    section.add "X-Amz-Date", valid_594967
  var valid_594968 = header.getOrDefault("X-Amz-Credential")
  valid_594968 = validateParameter(valid_594968, JString, required = false,
                                 default = nil)
  if valid_594968 != nil:
    section.add "X-Amz-Credential", valid_594968
  var valid_594969 = header.getOrDefault("X-Amz-Security-Token")
  valid_594969 = validateParameter(valid_594969, JString, required = false,
                                 default = nil)
  if valid_594969 != nil:
    section.add "X-Amz-Security-Token", valid_594969
  var valid_594970 = header.getOrDefault("X-Amz-Algorithm")
  valid_594970 = validateParameter(valid_594970, JString, required = false,
                                 default = nil)
  if valid_594970 != nil:
    section.add "X-Amz-Algorithm", valid_594970
  var valid_594971 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594971 = validateParameter(valid_594971, JString, required = false,
                                 default = nil)
  if valid_594971 != nil:
    section.add "X-Amz-SignedHeaders", valid_594971
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594972: Call_GetPurchaseReservedDBInstancesOffering_594956;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_594972.validator(path, query, header, formData, body)
  let scheme = call_594972.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594972.url(scheme.get, call_594972.host, call_594972.base,
                         call_594972.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594972, url, valid)

proc call*(call_594973: Call_GetPurchaseReservedDBInstancesOffering_594956;
          ReservedDBInstancesOfferingId: string; Tags: JsonNode = nil;
          DBInstanceCount: int = 0; ReservedDBInstanceId: string = "";
          Action: string = "PurchaseReservedDBInstancesOffering";
          Version: string = "2014-10-31"): Recallable =
  ## getPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: string (required)
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: string (required)
  var query_594974 = newJObject()
  if Tags != nil:
    query_594974.add "Tags", Tags
  add(query_594974, "DBInstanceCount", newJInt(DBInstanceCount))
  add(query_594974, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_594974, "Action", newJString(Action))
  add(query_594974, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_594974, "Version", newJString(Version))
  result = call_594973.call(nil, query_594974, nil, nil, nil)

var getPurchaseReservedDBInstancesOffering* = Call_GetPurchaseReservedDBInstancesOffering_594956(
    name: "getPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_GetPurchaseReservedDBInstancesOffering_594957, base: "/",
    url: url_GetPurchaseReservedDBInstancesOffering_594958,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootDBInstance_595012 = ref object of OpenApiRestCall_590348
proc url_PostRebootDBInstance_595014(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRebootDBInstance_595013(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595015 = query.getOrDefault("Action")
  valid_595015 = validateParameter(valid_595015, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_595015 != nil:
    section.add "Action", valid_595015
  var valid_595016 = query.getOrDefault("Version")
  valid_595016 = validateParameter(valid_595016, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595016 != nil:
    section.add "Version", valid_595016
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595017 = header.getOrDefault("X-Amz-Signature")
  valid_595017 = validateParameter(valid_595017, JString, required = false,
                                 default = nil)
  if valid_595017 != nil:
    section.add "X-Amz-Signature", valid_595017
  var valid_595018 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595018 = validateParameter(valid_595018, JString, required = false,
                                 default = nil)
  if valid_595018 != nil:
    section.add "X-Amz-Content-Sha256", valid_595018
  var valid_595019 = header.getOrDefault("X-Amz-Date")
  valid_595019 = validateParameter(valid_595019, JString, required = false,
                                 default = nil)
  if valid_595019 != nil:
    section.add "X-Amz-Date", valid_595019
  var valid_595020 = header.getOrDefault("X-Amz-Credential")
  valid_595020 = validateParameter(valid_595020, JString, required = false,
                                 default = nil)
  if valid_595020 != nil:
    section.add "X-Amz-Credential", valid_595020
  var valid_595021 = header.getOrDefault("X-Amz-Security-Token")
  valid_595021 = validateParameter(valid_595021, JString, required = false,
                                 default = nil)
  if valid_595021 != nil:
    section.add "X-Amz-Security-Token", valid_595021
  var valid_595022 = header.getOrDefault("X-Amz-Algorithm")
  valid_595022 = validateParameter(valid_595022, JString, required = false,
                                 default = nil)
  if valid_595022 != nil:
    section.add "X-Amz-Algorithm", valid_595022
  var valid_595023 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595023 = validateParameter(valid_595023, JString, required = false,
                                 default = nil)
  if valid_595023 != nil:
    section.add "X-Amz-SignedHeaders", valid_595023
  result.add "header", section
  ## parameters in `formData` object:
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance is not configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_595024 = formData.getOrDefault("ForceFailover")
  valid_595024 = validateParameter(valid_595024, JBool, required = false, default = nil)
  if valid_595024 != nil:
    section.add "ForceFailover", valid_595024
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_595025 = formData.getOrDefault("DBInstanceIdentifier")
  valid_595025 = validateParameter(valid_595025, JString, required = true,
                                 default = nil)
  if valid_595025 != nil:
    section.add "DBInstanceIdentifier", valid_595025
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595026: Call_PostRebootDBInstance_595012; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_595026.validator(path, query, header, formData, body)
  let scheme = call_595026.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595026.url(scheme.get, call_595026.host, call_595026.base,
                         call_595026.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595026, url, valid)

proc call*(call_595027: Call_PostRebootDBInstance_595012;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance is not configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595028 = newJObject()
  var formData_595029 = newJObject()
  add(formData_595029, "ForceFailover", newJBool(ForceFailover))
  add(formData_595029, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_595028, "Action", newJString(Action))
  add(query_595028, "Version", newJString(Version))
  result = call_595027.call(nil, query_595028, nil, formData_595029, nil)

var postRebootDBInstance* = Call_PostRebootDBInstance_595012(
    name: "postRebootDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_PostRebootDBInstance_595013, base: "/",
    url: url_PostRebootDBInstance_595014, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootDBInstance_594995 = ref object of OpenApiRestCall_590348
proc url_GetRebootDBInstance_594997(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRebootDBInstance_594996(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance is not configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_594998 = query.getOrDefault("ForceFailover")
  valid_594998 = validateParameter(valid_594998, JBool, required = false, default = nil)
  if valid_594998 != nil:
    section.add "ForceFailover", valid_594998
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_594999 = query.getOrDefault("DBInstanceIdentifier")
  valid_594999 = validateParameter(valid_594999, JString, required = true,
                                 default = nil)
  if valid_594999 != nil:
    section.add "DBInstanceIdentifier", valid_594999
  var valid_595000 = query.getOrDefault("Action")
  valid_595000 = validateParameter(valid_595000, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_595000 != nil:
    section.add "Action", valid_595000
  var valid_595001 = query.getOrDefault("Version")
  valid_595001 = validateParameter(valid_595001, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595001 != nil:
    section.add "Version", valid_595001
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595002 = header.getOrDefault("X-Amz-Signature")
  valid_595002 = validateParameter(valid_595002, JString, required = false,
                                 default = nil)
  if valid_595002 != nil:
    section.add "X-Amz-Signature", valid_595002
  var valid_595003 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595003 = validateParameter(valid_595003, JString, required = false,
                                 default = nil)
  if valid_595003 != nil:
    section.add "X-Amz-Content-Sha256", valid_595003
  var valid_595004 = header.getOrDefault("X-Amz-Date")
  valid_595004 = validateParameter(valid_595004, JString, required = false,
                                 default = nil)
  if valid_595004 != nil:
    section.add "X-Amz-Date", valid_595004
  var valid_595005 = header.getOrDefault("X-Amz-Credential")
  valid_595005 = validateParameter(valid_595005, JString, required = false,
                                 default = nil)
  if valid_595005 != nil:
    section.add "X-Amz-Credential", valid_595005
  var valid_595006 = header.getOrDefault("X-Amz-Security-Token")
  valid_595006 = validateParameter(valid_595006, JString, required = false,
                                 default = nil)
  if valid_595006 != nil:
    section.add "X-Amz-Security-Token", valid_595006
  var valid_595007 = header.getOrDefault("X-Amz-Algorithm")
  valid_595007 = validateParameter(valid_595007, JString, required = false,
                                 default = nil)
  if valid_595007 != nil:
    section.add "X-Amz-Algorithm", valid_595007
  var valid_595008 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595008 = validateParameter(valid_595008, JString, required = false,
                                 default = nil)
  if valid_595008 != nil:
    section.add "X-Amz-SignedHeaders", valid_595008
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595009: Call_GetRebootDBInstance_594995; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_595009.validator(path, query, header, formData, body)
  let scheme = call_595009.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595009.url(scheme.get, call_595009.host, call_595009.base,
                         call_595009.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595009, url, valid)

proc call*(call_595010: Call_GetRebootDBInstance_594995;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance is not configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595011 = newJObject()
  add(query_595011, "ForceFailover", newJBool(ForceFailover))
  add(query_595011, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_595011, "Action", newJString(Action))
  add(query_595011, "Version", newJString(Version))
  result = call_595010.call(nil, query_595011, nil, nil, nil)

var getRebootDBInstance* = Call_GetRebootDBInstance_594995(
    name: "getRebootDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_GetRebootDBInstance_594996, base: "/",
    url: url_GetRebootDBInstance_594997, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveFromGlobalCluster_595047 = ref object of OpenApiRestCall_590348
proc url_PostRemoveFromGlobalCluster_595049(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveFromGlobalCluster_595048(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595050 = query.getOrDefault("Action")
  valid_595050 = validateParameter(valid_595050, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_595050 != nil:
    section.add "Action", valid_595050
  var valid_595051 = query.getOrDefault("Version")
  valid_595051 = validateParameter(valid_595051, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595051 != nil:
    section.add "Version", valid_595051
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595052 = header.getOrDefault("X-Amz-Signature")
  valid_595052 = validateParameter(valid_595052, JString, required = false,
                                 default = nil)
  if valid_595052 != nil:
    section.add "X-Amz-Signature", valid_595052
  var valid_595053 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595053 = validateParameter(valid_595053, JString, required = false,
                                 default = nil)
  if valid_595053 != nil:
    section.add "X-Amz-Content-Sha256", valid_595053
  var valid_595054 = header.getOrDefault("X-Amz-Date")
  valid_595054 = validateParameter(valid_595054, JString, required = false,
                                 default = nil)
  if valid_595054 != nil:
    section.add "X-Amz-Date", valid_595054
  var valid_595055 = header.getOrDefault("X-Amz-Credential")
  valid_595055 = validateParameter(valid_595055, JString, required = false,
                                 default = nil)
  if valid_595055 != nil:
    section.add "X-Amz-Credential", valid_595055
  var valid_595056 = header.getOrDefault("X-Amz-Security-Token")
  valid_595056 = validateParameter(valid_595056, JString, required = false,
                                 default = nil)
  if valid_595056 != nil:
    section.add "X-Amz-Security-Token", valid_595056
  var valid_595057 = header.getOrDefault("X-Amz-Algorithm")
  valid_595057 = validateParameter(valid_595057, JString, required = false,
                                 default = nil)
  if valid_595057 != nil:
    section.add "X-Amz-Algorithm", valid_595057
  var valid_595058 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595058 = validateParameter(valid_595058, JString, required = false,
                                 default = nil)
  if valid_595058 != nil:
    section.add "X-Amz-SignedHeaders", valid_595058
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  section = newJObject()
  var valid_595059 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_595059 = validateParameter(valid_595059, JString, required = false,
                                 default = nil)
  if valid_595059 != nil:
    section.add "GlobalClusterIdentifier", valid_595059
  var valid_595060 = formData.getOrDefault("DbClusterIdentifier")
  valid_595060 = validateParameter(valid_595060, JString, required = false,
                                 default = nil)
  if valid_595060 != nil:
    section.add "DbClusterIdentifier", valid_595060
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595061: Call_PostRemoveFromGlobalCluster_595047; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595061.validator(path, query, header, formData, body)
  let scheme = call_595061.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595061.url(scheme.get, call_595061.host, call_595061.base,
                         call_595061.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595061, url, valid)

proc call*(call_595062: Call_PostRemoveFromGlobalCluster_595047;
          GlobalClusterIdentifier: string = ""; DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595063 = newJObject()
  var formData_595064 = newJObject()
  add(formData_595064, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_595064, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_595063, "Action", newJString(Action))
  add(query_595063, "Version", newJString(Version))
  result = call_595062.call(nil, query_595063, nil, formData_595064, nil)

var postRemoveFromGlobalCluster* = Call_PostRemoveFromGlobalCluster_595047(
    name: "postRemoveFromGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_PostRemoveFromGlobalCluster_595048, base: "/",
    url: url_PostRemoveFromGlobalCluster_595049,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveFromGlobalCluster_595030 = ref object of OpenApiRestCall_590348
proc url_GetRemoveFromGlobalCluster_595032(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveFromGlobalCluster_595031(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_595033 = query.getOrDefault("GlobalClusterIdentifier")
  valid_595033 = validateParameter(valid_595033, JString, required = false,
                                 default = nil)
  if valid_595033 != nil:
    section.add "GlobalClusterIdentifier", valid_595033
  var valid_595034 = query.getOrDefault("DbClusterIdentifier")
  valid_595034 = validateParameter(valid_595034, JString, required = false,
                                 default = nil)
  if valid_595034 != nil:
    section.add "DbClusterIdentifier", valid_595034
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595035 = query.getOrDefault("Action")
  valid_595035 = validateParameter(valid_595035, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_595035 != nil:
    section.add "Action", valid_595035
  var valid_595036 = query.getOrDefault("Version")
  valid_595036 = validateParameter(valid_595036, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595036 != nil:
    section.add "Version", valid_595036
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595037 = header.getOrDefault("X-Amz-Signature")
  valid_595037 = validateParameter(valid_595037, JString, required = false,
                                 default = nil)
  if valid_595037 != nil:
    section.add "X-Amz-Signature", valid_595037
  var valid_595038 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595038 = validateParameter(valid_595038, JString, required = false,
                                 default = nil)
  if valid_595038 != nil:
    section.add "X-Amz-Content-Sha256", valid_595038
  var valid_595039 = header.getOrDefault("X-Amz-Date")
  valid_595039 = validateParameter(valid_595039, JString, required = false,
                                 default = nil)
  if valid_595039 != nil:
    section.add "X-Amz-Date", valid_595039
  var valid_595040 = header.getOrDefault("X-Amz-Credential")
  valid_595040 = validateParameter(valid_595040, JString, required = false,
                                 default = nil)
  if valid_595040 != nil:
    section.add "X-Amz-Credential", valid_595040
  var valid_595041 = header.getOrDefault("X-Amz-Security-Token")
  valid_595041 = validateParameter(valid_595041, JString, required = false,
                                 default = nil)
  if valid_595041 != nil:
    section.add "X-Amz-Security-Token", valid_595041
  var valid_595042 = header.getOrDefault("X-Amz-Algorithm")
  valid_595042 = validateParameter(valid_595042, JString, required = false,
                                 default = nil)
  if valid_595042 != nil:
    section.add "X-Amz-Algorithm", valid_595042
  var valid_595043 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595043 = validateParameter(valid_595043, JString, required = false,
                                 default = nil)
  if valid_595043 != nil:
    section.add "X-Amz-SignedHeaders", valid_595043
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595044: Call_GetRemoveFromGlobalCluster_595030; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595044.validator(path, query, header, formData, body)
  let scheme = call_595044.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595044.url(scheme.get, call_595044.host, call_595044.base,
                         call_595044.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595044, url, valid)

proc call*(call_595045: Call_GetRemoveFromGlobalCluster_595030;
          GlobalClusterIdentifier: string = ""; DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595046 = newJObject()
  add(query_595046, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_595046, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_595046, "Action", newJString(Action))
  add(query_595046, "Version", newJString(Version))
  result = call_595045.call(nil, query_595046, nil, nil, nil)

var getRemoveFromGlobalCluster* = Call_GetRemoveFromGlobalCluster_595030(
    name: "getRemoveFromGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_GetRemoveFromGlobalCluster_595031, base: "/",
    url: url_GetRemoveFromGlobalCluster_595032,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBCluster_595083 = ref object of OpenApiRestCall_590348
proc url_PostRemoveRoleFromDBCluster_595085(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveRoleFromDBCluster_595084(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595086 = query.getOrDefault("Action")
  valid_595086 = validateParameter(valid_595086, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_595086 != nil:
    section.add "Action", valid_595086
  var valid_595087 = query.getOrDefault("Version")
  valid_595087 = validateParameter(valid_595087, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595087 != nil:
    section.add "Version", valid_595087
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595088 = header.getOrDefault("X-Amz-Signature")
  valid_595088 = validateParameter(valid_595088, JString, required = false,
                                 default = nil)
  if valid_595088 != nil:
    section.add "X-Amz-Signature", valid_595088
  var valid_595089 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595089 = validateParameter(valid_595089, JString, required = false,
                                 default = nil)
  if valid_595089 != nil:
    section.add "X-Amz-Content-Sha256", valid_595089
  var valid_595090 = header.getOrDefault("X-Amz-Date")
  valid_595090 = validateParameter(valid_595090, JString, required = false,
                                 default = nil)
  if valid_595090 != nil:
    section.add "X-Amz-Date", valid_595090
  var valid_595091 = header.getOrDefault("X-Amz-Credential")
  valid_595091 = validateParameter(valid_595091, JString, required = false,
                                 default = nil)
  if valid_595091 != nil:
    section.add "X-Amz-Credential", valid_595091
  var valid_595092 = header.getOrDefault("X-Amz-Security-Token")
  valid_595092 = validateParameter(valid_595092, JString, required = false,
                                 default = nil)
  if valid_595092 != nil:
    section.add "X-Amz-Security-Token", valid_595092
  var valid_595093 = header.getOrDefault("X-Amz-Algorithm")
  valid_595093 = validateParameter(valid_595093, JString, required = false,
                                 default = nil)
  if valid_595093 != nil:
    section.add "X-Amz-Algorithm", valid_595093
  var valid_595094 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595094 = validateParameter(valid_595094, JString, required = false,
                                 default = nil)
  if valid_595094 != nil:
    section.add "X-Amz-SignedHeaders", valid_595094
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  section = newJObject()
  var valid_595095 = formData.getOrDefault("FeatureName")
  valid_595095 = validateParameter(valid_595095, JString, required = false,
                                 default = nil)
  if valid_595095 != nil:
    section.add "FeatureName", valid_595095
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_595096 = formData.getOrDefault("RoleArn")
  valid_595096 = validateParameter(valid_595096, JString, required = true,
                                 default = nil)
  if valid_595096 != nil:
    section.add "RoleArn", valid_595096
  var valid_595097 = formData.getOrDefault("DBClusterIdentifier")
  valid_595097 = validateParameter(valid_595097, JString, required = true,
                                 default = nil)
  if valid_595097 != nil:
    section.add "DBClusterIdentifier", valid_595097
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595098: Call_PostRemoveRoleFromDBCluster_595083; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595098.validator(path, query, header, formData, body)
  let scheme = call_595098.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595098.url(scheme.get, call_595098.host, call_595098.base,
                         call_595098.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595098, url, valid)

proc call*(call_595099: Call_PostRemoveRoleFromDBCluster_595083; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "RemoveRoleFromDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  var query_595100 = newJObject()
  var formData_595101 = newJObject()
  add(formData_595101, "FeatureName", newJString(FeatureName))
  add(formData_595101, "RoleArn", newJString(RoleArn))
  add(query_595100, "Action", newJString(Action))
  add(query_595100, "Version", newJString(Version))
  add(formData_595101, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_595099.call(nil, query_595100, nil, formData_595101, nil)

var postRemoveRoleFromDBCluster* = Call_PostRemoveRoleFromDBCluster_595083(
    name: "postRemoveRoleFromDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_PostRemoveRoleFromDBCluster_595084, base: "/",
    url: url_PostRemoveRoleFromDBCluster_595085,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBCluster_595065 = ref object of OpenApiRestCall_590348
proc url_GetRemoveRoleFromDBCluster_595067(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveRoleFromDBCluster_595066(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_595068 = query.getOrDefault("RoleArn")
  valid_595068 = validateParameter(valid_595068, JString, required = true,
                                 default = nil)
  if valid_595068 != nil:
    section.add "RoleArn", valid_595068
  var valid_595069 = query.getOrDefault("DBClusterIdentifier")
  valid_595069 = validateParameter(valid_595069, JString, required = true,
                                 default = nil)
  if valid_595069 != nil:
    section.add "DBClusterIdentifier", valid_595069
  var valid_595070 = query.getOrDefault("FeatureName")
  valid_595070 = validateParameter(valid_595070, JString, required = false,
                                 default = nil)
  if valid_595070 != nil:
    section.add "FeatureName", valid_595070
  var valid_595071 = query.getOrDefault("Action")
  valid_595071 = validateParameter(valid_595071, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_595071 != nil:
    section.add "Action", valid_595071
  var valid_595072 = query.getOrDefault("Version")
  valid_595072 = validateParameter(valid_595072, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595072 != nil:
    section.add "Version", valid_595072
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595073 = header.getOrDefault("X-Amz-Signature")
  valid_595073 = validateParameter(valid_595073, JString, required = false,
                                 default = nil)
  if valid_595073 != nil:
    section.add "X-Amz-Signature", valid_595073
  var valid_595074 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595074 = validateParameter(valid_595074, JString, required = false,
                                 default = nil)
  if valid_595074 != nil:
    section.add "X-Amz-Content-Sha256", valid_595074
  var valid_595075 = header.getOrDefault("X-Amz-Date")
  valid_595075 = validateParameter(valid_595075, JString, required = false,
                                 default = nil)
  if valid_595075 != nil:
    section.add "X-Amz-Date", valid_595075
  var valid_595076 = header.getOrDefault("X-Amz-Credential")
  valid_595076 = validateParameter(valid_595076, JString, required = false,
                                 default = nil)
  if valid_595076 != nil:
    section.add "X-Amz-Credential", valid_595076
  var valid_595077 = header.getOrDefault("X-Amz-Security-Token")
  valid_595077 = validateParameter(valid_595077, JString, required = false,
                                 default = nil)
  if valid_595077 != nil:
    section.add "X-Amz-Security-Token", valid_595077
  var valid_595078 = header.getOrDefault("X-Amz-Algorithm")
  valid_595078 = validateParameter(valid_595078, JString, required = false,
                                 default = nil)
  if valid_595078 != nil:
    section.add "X-Amz-Algorithm", valid_595078
  var valid_595079 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595079 = validateParameter(valid_595079, JString, required = false,
                                 default = nil)
  if valid_595079 != nil:
    section.add "X-Amz-SignedHeaders", valid_595079
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595080: Call_GetRemoveRoleFromDBCluster_595065; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595080.validator(path, query, header, formData, body)
  let scheme = call_595080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595080.url(scheme.get, call_595080.host, call_595080.base,
                         call_595080.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595080, url, valid)

proc call*(call_595081: Call_GetRemoveRoleFromDBCluster_595065; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "RemoveRoleFromDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595082 = newJObject()
  add(query_595082, "RoleArn", newJString(RoleArn))
  add(query_595082, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_595082, "FeatureName", newJString(FeatureName))
  add(query_595082, "Action", newJString(Action))
  add(query_595082, "Version", newJString(Version))
  result = call_595081.call(nil, query_595082, nil, nil, nil)

var getRemoveRoleFromDBCluster* = Call_GetRemoveRoleFromDBCluster_595065(
    name: "getRemoveRoleFromDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_GetRemoveRoleFromDBCluster_595066, base: "/",
    url: url_GetRemoveRoleFromDBCluster_595067,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBInstance_595120 = ref object of OpenApiRestCall_590348
proc url_PostRemoveRoleFromDBInstance_595122(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveRoleFromDBInstance_595121(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595123 = query.getOrDefault("Action")
  valid_595123 = validateParameter(valid_595123, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_595123 != nil:
    section.add "Action", valid_595123
  var valid_595124 = query.getOrDefault("Version")
  valid_595124 = validateParameter(valid_595124, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595124 != nil:
    section.add "Version", valid_595124
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595125 = header.getOrDefault("X-Amz-Signature")
  valid_595125 = validateParameter(valid_595125, JString, required = false,
                                 default = nil)
  if valid_595125 != nil:
    section.add "X-Amz-Signature", valid_595125
  var valid_595126 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595126 = validateParameter(valid_595126, JString, required = false,
                                 default = nil)
  if valid_595126 != nil:
    section.add "X-Amz-Content-Sha256", valid_595126
  var valid_595127 = header.getOrDefault("X-Amz-Date")
  valid_595127 = validateParameter(valid_595127, JString, required = false,
                                 default = nil)
  if valid_595127 != nil:
    section.add "X-Amz-Date", valid_595127
  var valid_595128 = header.getOrDefault("X-Amz-Credential")
  valid_595128 = validateParameter(valid_595128, JString, required = false,
                                 default = nil)
  if valid_595128 != nil:
    section.add "X-Amz-Credential", valid_595128
  var valid_595129 = header.getOrDefault("X-Amz-Security-Token")
  valid_595129 = validateParameter(valid_595129, JString, required = false,
                                 default = nil)
  if valid_595129 != nil:
    section.add "X-Amz-Security-Token", valid_595129
  var valid_595130 = header.getOrDefault("X-Amz-Algorithm")
  valid_595130 = validateParameter(valid_595130, JString, required = false,
                                 default = nil)
  if valid_595130 != nil:
    section.add "X-Amz-Algorithm", valid_595130
  var valid_595131 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595131 = validateParameter(valid_595131, JString, required = false,
                                 default = nil)
  if valid_595131 != nil:
    section.add "X-Amz-SignedHeaders", valid_595131
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FeatureName` field"
  var valid_595132 = formData.getOrDefault("FeatureName")
  valid_595132 = validateParameter(valid_595132, JString, required = true,
                                 default = nil)
  if valid_595132 != nil:
    section.add "FeatureName", valid_595132
  var valid_595133 = formData.getOrDefault("RoleArn")
  valid_595133 = validateParameter(valid_595133, JString, required = true,
                                 default = nil)
  if valid_595133 != nil:
    section.add "RoleArn", valid_595133
  var valid_595134 = formData.getOrDefault("DBInstanceIdentifier")
  valid_595134 = validateParameter(valid_595134, JString, required = true,
                                 default = nil)
  if valid_595134 != nil:
    section.add "DBInstanceIdentifier", valid_595134
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595135: Call_PostRemoveRoleFromDBInstance_595120; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_595135.validator(path, query, header, formData, body)
  let scheme = call_595135.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595135.url(scheme.get, call_595135.host, call_595135.base,
                         call_595135.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595135, url, valid)

proc call*(call_595136: Call_PostRemoveRoleFromDBInstance_595120;
          FeatureName: string; RoleArn: string; DBInstanceIdentifier: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595137 = newJObject()
  var formData_595138 = newJObject()
  add(formData_595138, "FeatureName", newJString(FeatureName))
  add(formData_595138, "RoleArn", newJString(RoleArn))
  add(formData_595138, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_595137, "Action", newJString(Action))
  add(query_595137, "Version", newJString(Version))
  result = call_595136.call(nil, query_595137, nil, formData_595138, nil)

var postRemoveRoleFromDBInstance* = Call_PostRemoveRoleFromDBInstance_595120(
    name: "postRemoveRoleFromDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_PostRemoveRoleFromDBInstance_595121, base: "/",
    url: url_PostRemoveRoleFromDBInstance_595122,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBInstance_595102 = ref object of OpenApiRestCall_590348
proc url_GetRemoveRoleFromDBInstance_595104(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveRoleFromDBInstance_595103(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_595105 = query.getOrDefault("RoleArn")
  valid_595105 = validateParameter(valid_595105, JString, required = true,
                                 default = nil)
  if valid_595105 != nil:
    section.add "RoleArn", valid_595105
  var valid_595106 = query.getOrDefault("FeatureName")
  valid_595106 = validateParameter(valid_595106, JString, required = true,
                                 default = nil)
  if valid_595106 != nil:
    section.add "FeatureName", valid_595106
  var valid_595107 = query.getOrDefault("DBInstanceIdentifier")
  valid_595107 = validateParameter(valid_595107, JString, required = true,
                                 default = nil)
  if valid_595107 != nil:
    section.add "DBInstanceIdentifier", valid_595107
  var valid_595108 = query.getOrDefault("Action")
  valid_595108 = validateParameter(valid_595108, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_595108 != nil:
    section.add "Action", valid_595108
  var valid_595109 = query.getOrDefault("Version")
  valid_595109 = validateParameter(valid_595109, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595109 != nil:
    section.add "Version", valid_595109
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595110 = header.getOrDefault("X-Amz-Signature")
  valid_595110 = validateParameter(valid_595110, JString, required = false,
                                 default = nil)
  if valid_595110 != nil:
    section.add "X-Amz-Signature", valid_595110
  var valid_595111 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595111 = validateParameter(valid_595111, JString, required = false,
                                 default = nil)
  if valid_595111 != nil:
    section.add "X-Amz-Content-Sha256", valid_595111
  var valid_595112 = header.getOrDefault("X-Amz-Date")
  valid_595112 = validateParameter(valid_595112, JString, required = false,
                                 default = nil)
  if valid_595112 != nil:
    section.add "X-Amz-Date", valid_595112
  var valid_595113 = header.getOrDefault("X-Amz-Credential")
  valid_595113 = validateParameter(valid_595113, JString, required = false,
                                 default = nil)
  if valid_595113 != nil:
    section.add "X-Amz-Credential", valid_595113
  var valid_595114 = header.getOrDefault("X-Amz-Security-Token")
  valid_595114 = validateParameter(valid_595114, JString, required = false,
                                 default = nil)
  if valid_595114 != nil:
    section.add "X-Amz-Security-Token", valid_595114
  var valid_595115 = header.getOrDefault("X-Amz-Algorithm")
  valid_595115 = validateParameter(valid_595115, JString, required = false,
                                 default = nil)
  if valid_595115 != nil:
    section.add "X-Amz-Algorithm", valid_595115
  var valid_595116 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595116 = validateParameter(valid_595116, JString, required = false,
                                 default = nil)
  if valid_595116 != nil:
    section.add "X-Amz-SignedHeaders", valid_595116
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595117: Call_GetRemoveRoleFromDBInstance_595102; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_595117.validator(path, query, header, formData, body)
  let scheme = call_595117.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595117.url(scheme.get, call_595117.host, call_595117.base,
                         call_595117.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595117, url, valid)

proc call*(call_595118: Call_GetRemoveRoleFromDBInstance_595102; RoleArn: string;
          FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595119 = newJObject()
  add(query_595119, "RoleArn", newJString(RoleArn))
  add(query_595119, "FeatureName", newJString(FeatureName))
  add(query_595119, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_595119, "Action", newJString(Action))
  add(query_595119, "Version", newJString(Version))
  result = call_595118.call(nil, query_595119, nil, nil, nil)

var getRemoveRoleFromDBInstance* = Call_GetRemoveRoleFromDBInstance_595102(
    name: "getRemoveRoleFromDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_GetRemoveRoleFromDBInstance_595103, base: "/",
    url: url_GetRemoveRoleFromDBInstance_595104,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveSourceIdentifierFromSubscription_595156 = ref object of OpenApiRestCall_590348
proc url_PostRemoveSourceIdentifierFromSubscription_595158(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveSourceIdentifierFromSubscription_595157(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595159 = query.getOrDefault("Action")
  valid_595159 = validateParameter(valid_595159, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_595159 != nil:
    section.add "Action", valid_595159
  var valid_595160 = query.getOrDefault("Version")
  valid_595160 = validateParameter(valid_595160, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595160 != nil:
    section.add "Version", valid_595160
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595161 = header.getOrDefault("X-Amz-Signature")
  valid_595161 = validateParameter(valid_595161, JString, required = false,
                                 default = nil)
  if valid_595161 != nil:
    section.add "X-Amz-Signature", valid_595161
  var valid_595162 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595162 = validateParameter(valid_595162, JString, required = false,
                                 default = nil)
  if valid_595162 != nil:
    section.add "X-Amz-Content-Sha256", valid_595162
  var valid_595163 = header.getOrDefault("X-Amz-Date")
  valid_595163 = validateParameter(valid_595163, JString, required = false,
                                 default = nil)
  if valid_595163 != nil:
    section.add "X-Amz-Date", valid_595163
  var valid_595164 = header.getOrDefault("X-Amz-Credential")
  valid_595164 = validateParameter(valid_595164, JString, required = false,
                                 default = nil)
  if valid_595164 != nil:
    section.add "X-Amz-Credential", valid_595164
  var valid_595165 = header.getOrDefault("X-Amz-Security-Token")
  valid_595165 = validateParameter(valid_595165, JString, required = false,
                                 default = nil)
  if valid_595165 != nil:
    section.add "X-Amz-Security-Token", valid_595165
  var valid_595166 = header.getOrDefault("X-Amz-Algorithm")
  valid_595166 = validateParameter(valid_595166, JString, required = false,
                                 default = nil)
  if valid_595166 != nil:
    section.add "X-Amz-Algorithm", valid_595166
  var valid_595167 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595167 = validateParameter(valid_595167, JString, required = false,
                                 default = nil)
  if valid_595167 != nil:
    section.add "X-Amz-SignedHeaders", valid_595167
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_595168 = formData.getOrDefault("SubscriptionName")
  valid_595168 = validateParameter(valid_595168, JString, required = true,
                                 default = nil)
  if valid_595168 != nil:
    section.add "SubscriptionName", valid_595168
  var valid_595169 = formData.getOrDefault("SourceIdentifier")
  valid_595169 = validateParameter(valid_595169, JString, required = true,
                                 default = nil)
  if valid_595169 != nil:
    section.add "SourceIdentifier", valid_595169
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595170: Call_PostRemoveSourceIdentifierFromSubscription_595156;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_595170.validator(path, query, header, formData, body)
  let scheme = call_595170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595170.url(scheme.get, call_595170.host, call_595170.base,
                         call_595170.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595170, url, valid)

proc call*(call_595171: Call_PostRemoveSourceIdentifierFromSubscription_595156;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595172 = newJObject()
  var formData_595173 = newJObject()
  add(formData_595173, "SubscriptionName", newJString(SubscriptionName))
  add(formData_595173, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_595172, "Action", newJString(Action))
  add(query_595172, "Version", newJString(Version))
  result = call_595171.call(nil, query_595172, nil, formData_595173, nil)

var postRemoveSourceIdentifierFromSubscription* = Call_PostRemoveSourceIdentifierFromSubscription_595156(
    name: "postRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_PostRemoveSourceIdentifierFromSubscription_595157,
    base: "/", url: url_PostRemoveSourceIdentifierFromSubscription_595158,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveSourceIdentifierFromSubscription_595139 = ref object of OpenApiRestCall_590348
proc url_GetRemoveSourceIdentifierFromSubscription_595141(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveSourceIdentifierFromSubscription_595140(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_595142 = query.getOrDefault("SourceIdentifier")
  valid_595142 = validateParameter(valid_595142, JString, required = true,
                                 default = nil)
  if valid_595142 != nil:
    section.add "SourceIdentifier", valid_595142
  var valid_595143 = query.getOrDefault("SubscriptionName")
  valid_595143 = validateParameter(valid_595143, JString, required = true,
                                 default = nil)
  if valid_595143 != nil:
    section.add "SubscriptionName", valid_595143
  var valid_595144 = query.getOrDefault("Action")
  valid_595144 = validateParameter(valid_595144, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_595144 != nil:
    section.add "Action", valid_595144
  var valid_595145 = query.getOrDefault("Version")
  valid_595145 = validateParameter(valid_595145, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595145 != nil:
    section.add "Version", valid_595145
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595146 = header.getOrDefault("X-Amz-Signature")
  valid_595146 = validateParameter(valid_595146, JString, required = false,
                                 default = nil)
  if valid_595146 != nil:
    section.add "X-Amz-Signature", valid_595146
  var valid_595147 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595147 = validateParameter(valid_595147, JString, required = false,
                                 default = nil)
  if valid_595147 != nil:
    section.add "X-Amz-Content-Sha256", valid_595147
  var valid_595148 = header.getOrDefault("X-Amz-Date")
  valid_595148 = validateParameter(valid_595148, JString, required = false,
                                 default = nil)
  if valid_595148 != nil:
    section.add "X-Amz-Date", valid_595148
  var valid_595149 = header.getOrDefault("X-Amz-Credential")
  valid_595149 = validateParameter(valid_595149, JString, required = false,
                                 default = nil)
  if valid_595149 != nil:
    section.add "X-Amz-Credential", valid_595149
  var valid_595150 = header.getOrDefault("X-Amz-Security-Token")
  valid_595150 = validateParameter(valid_595150, JString, required = false,
                                 default = nil)
  if valid_595150 != nil:
    section.add "X-Amz-Security-Token", valid_595150
  var valid_595151 = header.getOrDefault("X-Amz-Algorithm")
  valid_595151 = validateParameter(valid_595151, JString, required = false,
                                 default = nil)
  if valid_595151 != nil:
    section.add "X-Amz-Algorithm", valid_595151
  var valid_595152 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595152 = validateParameter(valid_595152, JString, required = false,
                                 default = nil)
  if valid_595152 != nil:
    section.add "X-Amz-SignedHeaders", valid_595152
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595153: Call_GetRemoveSourceIdentifierFromSubscription_595139;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_595153.validator(path, query, header, formData, body)
  let scheme = call_595153.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595153.url(scheme.get, call_595153.host, call_595153.base,
                         call_595153.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595153, url, valid)

proc call*(call_595154: Call_GetRemoveSourceIdentifierFromSubscription_595139;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595155 = newJObject()
  add(query_595155, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_595155, "SubscriptionName", newJString(SubscriptionName))
  add(query_595155, "Action", newJString(Action))
  add(query_595155, "Version", newJString(Version))
  result = call_595154.call(nil, query_595155, nil, nil, nil)

var getRemoveSourceIdentifierFromSubscription* = Call_GetRemoveSourceIdentifierFromSubscription_595139(
    name: "getRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_GetRemoveSourceIdentifierFromSubscription_595140,
    base: "/", url: url_GetRemoveSourceIdentifierFromSubscription_595141,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_595191 = ref object of OpenApiRestCall_590348
proc url_PostRemoveTagsFromResource_595193(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveTagsFromResource_595192(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595194 = query.getOrDefault("Action")
  valid_595194 = validateParameter(valid_595194, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_595194 != nil:
    section.add "Action", valid_595194
  var valid_595195 = query.getOrDefault("Version")
  valid_595195 = validateParameter(valid_595195, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595195 != nil:
    section.add "Version", valid_595195
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595196 = header.getOrDefault("X-Amz-Signature")
  valid_595196 = validateParameter(valid_595196, JString, required = false,
                                 default = nil)
  if valid_595196 != nil:
    section.add "X-Amz-Signature", valid_595196
  var valid_595197 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595197 = validateParameter(valid_595197, JString, required = false,
                                 default = nil)
  if valid_595197 != nil:
    section.add "X-Amz-Content-Sha256", valid_595197
  var valid_595198 = header.getOrDefault("X-Amz-Date")
  valid_595198 = validateParameter(valid_595198, JString, required = false,
                                 default = nil)
  if valid_595198 != nil:
    section.add "X-Amz-Date", valid_595198
  var valid_595199 = header.getOrDefault("X-Amz-Credential")
  valid_595199 = validateParameter(valid_595199, JString, required = false,
                                 default = nil)
  if valid_595199 != nil:
    section.add "X-Amz-Credential", valid_595199
  var valid_595200 = header.getOrDefault("X-Amz-Security-Token")
  valid_595200 = validateParameter(valid_595200, JString, required = false,
                                 default = nil)
  if valid_595200 != nil:
    section.add "X-Amz-Security-Token", valid_595200
  var valid_595201 = header.getOrDefault("X-Amz-Algorithm")
  valid_595201 = validateParameter(valid_595201, JString, required = false,
                                 default = nil)
  if valid_595201 != nil:
    section.add "X-Amz-Algorithm", valid_595201
  var valid_595202 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595202 = validateParameter(valid_595202, JString, required = false,
                                 default = nil)
  if valid_595202 != nil:
    section.add "X-Amz-SignedHeaders", valid_595202
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_595203 = formData.getOrDefault("TagKeys")
  valid_595203 = validateParameter(valid_595203, JArray, required = true, default = nil)
  if valid_595203 != nil:
    section.add "TagKeys", valid_595203
  var valid_595204 = formData.getOrDefault("ResourceName")
  valid_595204 = validateParameter(valid_595204, JString, required = true,
                                 default = nil)
  if valid_595204 != nil:
    section.add "ResourceName", valid_595204
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595205: Call_PostRemoveTagsFromResource_595191; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_595205.validator(path, query, header, formData, body)
  let scheme = call_595205.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595205.url(scheme.get, call_595205.host, call_595205.base,
                         call_595205.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595205, url, valid)

proc call*(call_595206: Call_PostRemoveTagsFromResource_595191; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  var query_595207 = newJObject()
  var formData_595208 = newJObject()
  if TagKeys != nil:
    formData_595208.add "TagKeys", TagKeys
  add(query_595207, "Action", newJString(Action))
  add(query_595207, "Version", newJString(Version))
  add(formData_595208, "ResourceName", newJString(ResourceName))
  result = call_595206.call(nil, query_595207, nil, formData_595208, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_595191(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_595192, base: "/",
    url: url_PostRemoveTagsFromResource_595193,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_595174 = ref object of OpenApiRestCall_590348
proc url_GetRemoveTagsFromResource_595176(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveTagsFromResource_595175(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_595177 = query.getOrDefault("ResourceName")
  valid_595177 = validateParameter(valid_595177, JString, required = true,
                                 default = nil)
  if valid_595177 != nil:
    section.add "ResourceName", valid_595177
  var valid_595178 = query.getOrDefault("TagKeys")
  valid_595178 = validateParameter(valid_595178, JArray, required = true, default = nil)
  if valid_595178 != nil:
    section.add "TagKeys", valid_595178
  var valid_595179 = query.getOrDefault("Action")
  valid_595179 = validateParameter(valid_595179, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_595179 != nil:
    section.add "Action", valid_595179
  var valid_595180 = query.getOrDefault("Version")
  valid_595180 = validateParameter(valid_595180, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595180 != nil:
    section.add "Version", valid_595180
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595181 = header.getOrDefault("X-Amz-Signature")
  valid_595181 = validateParameter(valid_595181, JString, required = false,
                                 default = nil)
  if valid_595181 != nil:
    section.add "X-Amz-Signature", valid_595181
  var valid_595182 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595182 = validateParameter(valid_595182, JString, required = false,
                                 default = nil)
  if valid_595182 != nil:
    section.add "X-Amz-Content-Sha256", valid_595182
  var valid_595183 = header.getOrDefault("X-Amz-Date")
  valid_595183 = validateParameter(valid_595183, JString, required = false,
                                 default = nil)
  if valid_595183 != nil:
    section.add "X-Amz-Date", valid_595183
  var valid_595184 = header.getOrDefault("X-Amz-Credential")
  valid_595184 = validateParameter(valid_595184, JString, required = false,
                                 default = nil)
  if valid_595184 != nil:
    section.add "X-Amz-Credential", valid_595184
  var valid_595185 = header.getOrDefault("X-Amz-Security-Token")
  valid_595185 = validateParameter(valid_595185, JString, required = false,
                                 default = nil)
  if valid_595185 != nil:
    section.add "X-Amz-Security-Token", valid_595185
  var valid_595186 = header.getOrDefault("X-Amz-Algorithm")
  valid_595186 = validateParameter(valid_595186, JString, required = false,
                                 default = nil)
  if valid_595186 != nil:
    section.add "X-Amz-Algorithm", valid_595186
  var valid_595187 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595187 = validateParameter(valid_595187, JString, required = false,
                                 default = nil)
  if valid_595187 != nil:
    section.add "X-Amz-SignedHeaders", valid_595187
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595188: Call_GetRemoveTagsFromResource_595174; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_595188.validator(path, query, header, formData, body)
  let scheme = call_595188.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595188.url(scheme.get, call_595188.host, call_595188.base,
                         call_595188.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595188, url, valid)

proc call*(call_595189: Call_GetRemoveTagsFromResource_595174;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595190 = newJObject()
  add(query_595190, "ResourceName", newJString(ResourceName))
  if TagKeys != nil:
    query_595190.add "TagKeys", TagKeys
  add(query_595190, "Action", newJString(Action))
  add(query_595190, "Version", newJString(Version))
  result = call_595189.call(nil, query_595190, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_595174(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_595175, base: "/",
    url: url_GetRemoveTagsFromResource_595176,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBClusterParameterGroup_595227 = ref object of OpenApiRestCall_590348
proc url_PostResetDBClusterParameterGroup_595229(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostResetDBClusterParameterGroup_595228(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595230 = query.getOrDefault("Action")
  valid_595230 = validateParameter(valid_595230, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_595230 != nil:
    section.add "Action", valid_595230
  var valid_595231 = query.getOrDefault("Version")
  valid_595231 = validateParameter(valid_595231, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595231 != nil:
    section.add "Version", valid_595231
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595232 = header.getOrDefault("X-Amz-Signature")
  valid_595232 = validateParameter(valid_595232, JString, required = false,
                                 default = nil)
  if valid_595232 != nil:
    section.add "X-Amz-Signature", valid_595232
  var valid_595233 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595233 = validateParameter(valid_595233, JString, required = false,
                                 default = nil)
  if valid_595233 != nil:
    section.add "X-Amz-Content-Sha256", valid_595233
  var valid_595234 = header.getOrDefault("X-Amz-Date")
  valid_595234 = validateParameter(valid_595234, JString, required = false,
                                 default = nil)
  if valid_595234 != nil:
    section.add "X-Amz-Date", valid_595234
  var valid_595235 = header.getOrDefault("X-Amz-Credential")
  valid_595235 = validateParameter(valid_595235, JString, required = false,
                                 default = nil)
  if valid_595235 != nil:
    section.add "X-Amz-Credential", valid_595235
  var valid_595236 = header.getOrDefault("X-Amz-Security-Token")
  valid_595236 = validateParameter(valid_595236, JString, required = false,
                                 default = nil)
  if valid_595236 != nil:
    section.add "X-Amz-Security-Token", valid_595236
  var valid_595237 = header.getOrDefault("X-Amz-Algorithm")
  valid_595237 = validateParameter(valid_595237, JString, required = false,
                                 default = nil)
  if valid_595237 != nil:
    section.add "X-Amz-Algorithm", valid_595237
  var valid_595238 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595238 = validateParameter(valid_595238, JString, required = false,
                                 default = nil)
  if valid_595238 != nil:
    section.add "X-Amz-SignedHeaders", valid_595238
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  section = newJObject()
  var valid_595239 = formData.getOrDefault("ResetAllParameters")
  valid_595239 = validateParameter(valid_595239, JBool, required = false, default = nil)
  if valid_595239 != nil:
    section.add "ResetAllParameters", valid_595239
  var valid_595240 = formData.getOrDefault("Parameters")
  valid_595240 = validateParameter(valid_595240, JArray, required = false,
                                 default = nil)
  if valid_595240 != nil:
    section.add "Parameters", valid_595240
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_595241 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_595241 = validateParameter(valid_595241, JString, required = true,
                                 default = nil)
  if valid_595241 != nil:
    section.add "DBClusterParameterGroupName", valid_595241
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595242: Call_PostResetDBClusterParameterGroup_595227;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595242.validator(path, query, header, formData, body)
  let scheme = call_595242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595242.url(scheme.get, call_595242.host, call_595242.base,
                         call_595242.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595242, url, valid)

proc call*(call_595243: Call_PostResetDBClusterParameterGroup_595227;
          DBClusterParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Parameters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Version: string (required)
  var query_595244 = newJObject()
  var formData_595245 = newJObject()
  add(formData_595245, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_595244, "Action", newJString(Action))
  if Parameters != nil:
    formData_595245.add "Parameters", Parameters
  add(formData_595245, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_595244, "Version", newJString(Version))
  result = call_595243.call(nil, query_595244, nil, formData_595245, nil)

var postResetDBClusterParameterGroup* = Call_PostResetDBClusterParameterGroup_595227(
    name: "postResetDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_PostResetDBClusterParameterGroup_595228, base: "/",
    url: url_PostResetDBClusterParameterGroup_595229,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBClusterParameterGroup_595209 = ref object of OpenApiRestCall_590348
proc url_GetResetDBClusterParameterGroup_595211(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetResetDBClusterParameterGroup_595210(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_595212 = query.getOrDefault("Parameters")
  valid_595212 = validateParameter(valid_595212, JArray, required = false,
                                 default = nil)
  if valid_595212 != nil:
    section.add "Parameters", valid_595212
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_595213 = query.getOrDefault("DBClusterParameterGroupName")
  valid_595213 = validateParameter(valid_595213, JString, required = true,
                                 default = nil)
  if valid_595213 != nil:
    section.add "DBClusterParameterGroupName", valid_595213
  var valid_595214 = query.getOrDefault("ResetAllParameters")
  valid_595214 = validateParameter(valid_595214, JBool, required = false, default = nil)
  if valid_595214 != nil:
    section.add "ResetAllParameters", valid_595214
  var valid_595215 = query.getOrDefault("Action")
  valid_595215 = validateParameter(valid_595215, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_595215 != nil:
    section.add "Action", valid_595215
  var valid_595216 = query.getOrDefault("Version")
  valid_595216 = validateParameter(valid_595216, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595216 != nil:
    section.add "Version", valid_595216
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595217 = header.getOrDefault("X-Amz-Signature")
  valid_595217 = validateParameter(valid_595217, JString, required = false,
                                 default = nil)
  if valid_595217 != nil:
    section.add "X-Amz-Signature", valid_595217
  var valid_595218 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595218 = validateParameter(valid_595218, JString, required = false,
                                 default = nil)
  if valid_595218 != nil:
    section.add "X-Amz-Content-Sha256", valid_595218
  var valid_595219 = header.getOrDefault("X-Amz-Date")
  valid_595219 = validateParameter(valid_595219, JString, required = false,
                                 default = nil)
  if valid_595219 != nil:
    section.add "X-Amz-Date", valid_595219
  var valid_595220 = header.getOrDefault("X-Amz-Credential")
  valid_595220 = validateParameter(valid_595220, JString, required = false,
                                 default = nil)
  if valid_595220 != nil:
    section.add "X-Amz-Credential", valid_595220
  var valid_595221 = header.getOrDefault("X-Amz-Security-Token")
  valid_595221 = validateParameter(valid_595221, JString, required = false,
                                 default = nil)
  if valid_595221 != nil:
    section.add "X-Amz-Security-Token", valid_595221
  var valid_595222 = header.getOrDefault("X-Amz-Algorithm")
  valid_595222 = validateParameter(valid_595222, JString, required = false,
                                 default = nil)
  if valid_595222 != nil:
    section.add "X-Amz-Algorithm", valid_595222
  var valid_595223 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595223 = validateParameter(valid_595223, JString, required = false,
                                 default = nil)
  if valid_595223 != nil:
    section.add "X-Amz-SignedHeaders", valid_595223
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595224: Call_GetResetDBClusterParameterGroup_595209;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595224.validator(path, query, header, formData, body)
  let scheme = call_595224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595224.url(scheme.get, call_595224.host, call_595224.base,
                         call_595224.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595224, url, valid)

proc call*(call_595225: Call_GetResetDBClusterParameterGroup_595209;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595226 = newJObject()
  if Parameters != nil:
    query_595226.add "Parameters", Parameters
  add(query_595226, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_595226, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_595226, "Action", newJString(Action))
  add(query_595226, "Version", newJString(Version))
  result = call_595225.call(nil, query_595226, nil, nil, nil)

var getResetDBClusterParameterGroup* = Call_GetResetDBClusterParameterGroup_595209(
    name: "getResetDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_GetResetDBClusterParameterGroup_595210, base: "/",
    url: url_GetResetDBClusterParameterGroup_595211,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBParameterGroup_595264 = ref object of OpenApiRestCall_590348
proc url_PostResetDBParameterGroup_595266(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostResetDBParameterGroup_595265(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595267 = query.getOrDefault("Action")
  valid_595267 = validateParameter(valid_595267, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_595267 != nil:
    section.add "Action", valid_595267
  var valid_595268 = query.getOrDefault("Version")
  valid_595268 = validateParameter(valid_595268, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595268 != nil:
    section.add "Version", valid_595268
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595269 = header.getOrDefault("X-Amz-Signature")
  valid_595269 = validateParameter(valid_595269, JString, required = false,
                                 default = nil)
  if valid_595269 != nil:
    section.add "X-Amz-Signature", valid_595269
  var valid_595270 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595270 = validateParameter(valid_595270, JString, required = false,
                                 default = nil)
  if valid_595270 != nil:
    section.add "X-Amz-Content-Sha256", valid_595270
  var valid_595271 = header.getOrDefault("X-Amz-Date")
  valid_595271 = validateParameter(valid_595271, JString, required = false,
                                 default = nil)
  if valid_595271 != nil:
    section.add "X-Amz-Date", valid_595271
  var valid_595272 = header.getOrDefault("X-Amz-Credential")
  valid_595272 = validateParameter(valid_595272, JString, required = false,
                                 default = nil)
  if valid_595272 != nil:
    section.add "X-Amz-Credential", valid_595272
  var valid_595273 = header.getOrDefault("X-Amz-Security-Token")
  valid_595273 = validateParameter(valid_595273, JString, required = false,
                                 default = nil)
  if valid_595273 != nil:
    section.add "X-Amz-Security-Token", valid_595273
  var valid_595274 = header.getOrDefault("X-Amz-Algorithm")
  valid_595274 = validateParameter(valid_595274, JString, required = false,
                                 default = nil)
  if valid_595274 != nil:
    section.add "X-Amz-Algorithm", valid_595274
  var valid_595275 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595275 = validateParameter(valid_595275, JString, required = false,
                                 default = nil)
  if valid_595275 != nil:
    section.add "X-Amz-SignedHeaders", valid_595275
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  section = newJObject()
  var valid_595276 = formData.getOrDefault("ResetAllParameters")
  valid_595276 = validateParameter(valid_595276, JBool, required = false, default = nil)
  if valid_595276 != nil:
    section.add "ResetAllParameters", valid_595276
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_595277 = formData.getOrDefault("DBParameterGroupName")
  valid_595277 = validateParameter(valid_595277, JString, required = true,
                                 default = nil)
  if valid_595277 != nil:
    section.add "DBParameterGroupName", valid_595277
  var valid_595278 = formData.getOrDefault("Parameters")
  valid_595278 = validateParameter(valid_595278, JArray, required = false,
                                 default = nil)
  if valid_595278 != nil:
    section.add "Parameters", valid_595278
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595279: Call_PostResetDBParameterGroup_595264; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_595279.validator(path, query, header, formData, body)
  let scheme = call_595279.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595279.url(scheme.get, call_595279.host, call_595279.base,
                         call_595279.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595279, url, valid)

proc call*(call_595280: Call_PostResetDBParameterGroup_595264;
          DBParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Parameters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Version: string (required)
  var query_595281 = newJObject()
  var formData_595282 = newJObject()
  add(formData_595282, "ResetAllParameters", newJBool(ResetAllParameters))
  add(formData_595282, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_595281, "Action", newJString(Action))
  if Parameters != nil:
    formData_595282.add "Parameters", Parameters
  add(query_595281, "Version", newJString(Version))
  result = call_595280.call(nil, query_595281, nil, formData_595282, nil)

var postResetDBParameterGroup* = Call_PostResetDBParameterGroup_595264(
    name: "postResetDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_PostResetDBParameterGroup_595265, base: "/",
    url: url_PostResetDBParameterGroup_595266,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBParameterGroup_595246 = ref object of OpenApiRestCall_590348
proc url_GetResetDBParameterGroup_595248(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetResetDBParameterGroup_595247(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_595249 = query.getOrDefault("DBParameterGroupName")
  valid_595249 = validateParameter(valid_595249, JString, required = true,
                                 default = nil)
  if valid_595249 != nil:
    section.add "DBParameterGroupName", valid_595249
  var valid_595250 = query.getOrDefault("Parameters")
  valid_595250 = validateParameter(valid_595250, JArray, required = false,
                                 default = nil)
  if valid_595250 != nil:
    section.add "Parameters", valid_595250
  var valid_595251 = query.getOrDefault("ResetAllParameters")
  valid_595251 = validateParameter(valid_595251, JBool, required = false, default = nil)
  if valid_595251 != nil:
    section.add "ResetAllParameters", valid_595251
  var valid_595252 = query.getOrDefault("Action")
  valid_595252 = validateParameter(valid_595252, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_595252 != nil:
    section.add "Action", valid_595252
  var valid_595253 = query.getOrDefault("Version")
  valid_595253 = validateParameter(valid_595253, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595253 != nil:
    section.add "Version", valid_595253
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595254 = header.getOrDefault("X-Amz-Signature")
  valid_595254 = validateParameter(valid_595254, JString, required = false,
                                 default = nil)
  if valid_595254 != nil:
    section.add "X-Amz-Signature", valid_595254
  var valid_595255 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595255 = validateParameter(valid_595255, JString, required = false,
                                 default = nil)
  if valid_595255 != nil:
    section.add "X-Amz-Content-Sha256", valid_595255
  var valid_595256 = header.getOrDefault("X-Amz-Date")
  valid_595256 = validateParameter(valid_595256, JString, required = false,
                                 default = nil)
  if valid_595256 != nil:
    section.add "X-Amz-Date", valid_595256
  var valid_595257 = header.getOrDefault("X-Amz-Credential")
  valid_595257 = validateParameter(valid_595257, JString, required = false,
                                 default = nil)
  if valid_595257 != nil:
    section.add "X-Amz-Credential", valid_595257
  var valid_595258 = header.getOrDefault("X-Amz-Security-Token")
  valid_595258 = validateParameter(valid_595258, JString, required = false,
                                 default = nil)
  if valid_595258 != nil:
    section.add "X-Amz-Security-Token", valid_595258
  var valid_595259 = header.getOrDefault("X-Amz-Algorithm")
  valid_595259 = validateParameter(valid_595259, JString, required = false,
                                 default = nil)
  if valid_595259 != nil:
    section.add "X-Amz-Algorithm", valid_595259
  var valid_595260 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595260 = validateParameter(valid_595260, JString, required = false,
                                 default = nil)
  if valid_595260 != nil:
    section.add "X-Amz-SignedHeaders", valid_595260
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595261: Call_GetResetDBParameterGroup_595246; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_595261.validator(path, query, header, formData, body)
  let scheme = call_595261.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595261.url(scheme.get, call_595261.host, call_595261.base,
                         call_595261.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595261, url, valid)

proc call*(call_595262: Call_GetResetDBParameterGroup_595246;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595263 = newJObject()
  add(query_595263, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_595263.add "Parameters", Parameters
  add(query_595263, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_595263, "Action", newJString(Action))
  add(query_595263, "Version", newJString(Version))
  result = call_595262.call(nil, query_595263, nil, nil, nil)

var getResetDBParameterGroup* = Call_GetResetDBParameterGroup_595246(
    name: "getResetDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_GetResetDBParameterGroup_595247, base: "/",
    url: url_GetResetDBParameterGroup_595248, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromS3_595327 = ref object of OpenApiRestCall_590348
proc url_PostRestoreDBClusterFromS3_595329(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBClusterFromS3_595328(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595330 = query.getOrDefault("Action")
  valid_595330 = validateParameter(valid_595330, JString, required = true,
                                 default = newJString("RestoreDBClusterFromS3"))
  if valid_595330 != nil:
    section.add "Action", valid_595330
  var valid_595331 = query.getOrDefault("Version")
  valid_595331 = validateParameter(valid_595331, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595331 != nil:
    section.add "Version", valid_595331
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595332 = header.getOrDefault("X-Amz-Signature")
  valid_595332 = validateParameter(valid_595332, JString, required = false,
                                 default = nil)
  if valid_595332 != nil:
    section.add "X-Amz-Signature", valid_595332
  var valid_595333 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595333 = validateParameter(valid_595333, JString, required = false,
                                 default = nil)
  if valid_595333 != nil:
    section.add "X-Amz-Content-Sha256", valid_595333
  var valid_595334 = header.getOrDefault("X-Amz-Date")
  valid_595334 = validateParameter(valid_595334, JString, required = false,
                                 default = nil)
  if valid_595334 != nil:
    section.add "X-Amz-Date", valid_595334
  var valid_595335 = header.getOrDefault("X-Amz-Credential")
  valid_595335 = validateParameter(valid_595335, JString, required = false,
                                 default = nil)
  if valid_595335 != nil:
    section.add "X-Amz-Credential", valid_595335
  var valid_595336 = header.getOrDefault("X-Amz-Security-Token")
  valid_595336 = validateParameter(valid_595336, JString, required = false,
                                 default = nil)
  if valid_595336 != nil:
    section.add "X-Amz-Security-Token", valid_595336
  var valid_595337 = header.getOrDefault("X-Amz-Algorithm")
  valid_595337 = validateParameter(valid_595337, JString, required = false,
                                 default = nil)
  if valid_595337 != nil:
    section.add "X-Amz-Algorithm", valid_595337
  var valid_595338 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595338 = validateParameter(valid_595338, JString, required = false,
                                 default = nil)
  if valid_595338 != nil:
    section.add "X-Amz-SignedHeaders", valid_595338
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_595339 = formData.getOrDefault("S3Prefix")
  valid_595339 = validateParameter(valid_595339, JString, required = false,
                                 default = nil)
  if valid_595339 != nil:
    section.add "S3Prefix", valid_595339
  var valid_595340 = formData.getOrDefault("Port")
  valid_595340 = validateParameter(valid_595340, JInt, required = false, default = nil)
  if valid_595340 != nil:
    section.add "Port", valid_595340
  var valid_595341 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_595341 = validateParameter(valid_595341, JString, required = false,
                                 default = nil)
  if valid_595341 != nil:
    section.add "PreferredMaintenanceWindow", valid_595341
  assert formData != nil, "formData argument is necessary due to required `S3IngestionRoleArn` field"
  var valid_595342 = formData.getOrDefault("S3IngestionRoleArn")
  valid_595342 = validateParameter(valid_595342, JString, required = true,
                                 default = nil)
  if valid_595342 != nil:
    section.add "S3IngestionRoleArn", valid_595342
  var valid_595343 = formData.getOrDefault("PreferredBackupWindow")
  valid_595343 = validateParameter(valid_595343, JString, required = false,
                                 default = nil)
  if valid_595343 != nil:
    section.add "PreferredBackupWindow", valid_595343
  var valid_595344 = formData.getOrDefault("MasterUserPassword")
  valid_595344 = validateParameter(valid_595344, JString, required = true,
                                 default = nil)
  if valid_595344 != nil:
    section.add "MasterUserPassword", valid_595344
  var valid_595345 = formData.getOrDefault("MasterUsername")
  valid_595345 = validateParameter(valid_595345, JString, required = true,
                                 default = nil)
  if valid_595345 != nil:
    section.add "MasterUsername", valid_595345
  var valid_595346 = formData.getOrDefault("SourceEngine")
  valid_595346 = validateParameter(valid_595346, JString, required = true,
                                 default = nil)
  if valid_595346 != nil:
    section.add "SourceEngine", valid_595346
  var valid_595347 = formData.getOrDefault("EngineVersion")
  valid_595347 = validateParameter(valid_595347, JString, required = false,
                                 default = nil)
  if valid_595347 != nil:
    section.add "EngineVersion", valid_595347
  var valid_595348 = formData.getOrDefault("BacktrackWindow")
  valid_595348 = validateParameter(valid_595348, JInt, required = false, default = nil)
  if valid_595348 != nil:
    section.add "BacktrackWindow", valid_595348
  var valid_595349 = formData.getOrDefault("DatabaseName")
  valid_595349 = validateParameter(valid_595349, JString, required = false,
                                 default = nil)
  if valid_595349 != nil:
    section.add "DatabaseName", valid_595349
  var valid_595350 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_595350 = validateParameter(valid_595350, JArray, required = false,
                                 default = nil)
  if valid_595350 != nil:
    section.add "VpcSecurityGroupIds", valid_595350
  var valid_595351 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_595351 = validateParameter(valid_595351, JBool, required = false, default = nil)
  if valid_595351 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_595351
  var valid_595352 = formData.getOrDefault("AvailabilityZones")
  valid_595352 = validateParameter(valid_595352, JArray, required = false,
                                 default = nil)
  if valid_595352 != nil:
    section.add "AvailabilityZones", valid_595352
  var valid_595353 = formData.getOrDefault("BackupRetentionPeriod")
  valid_595353 = validateParameter(valid_595353, JInt, required = false, default = nil)
  if valid_595353 != nil:
    section.add "BackupRetentionPeriod", valid_595353
  var valid_595354 = formData.getOrDefault("Engine")
  valid_595354 = validateParameter(valid_595354, JString, required = true,
                                 default = nil)
  if valid_595354 != nil:
    section.add "Engine", valid_595354
  var valid_595355 = formData.getOrDefault("KmsKeyId")
  valid_595355 = validateParameter(valid_595355, JString, required = false,
                                 default = nil)
  if valid_595355 != nil:
    section.add "KmsKeyId", valid_595355
  var valid_595356 = formData.getOrDefault("S3BucketName")
  valid_595356 = validateParameter(valid_595356, JString, required = true,
                                 default = nil)
  if valid_595356 != nil:
    section.add "S3BucketName", valid_595356
  var valid_595357 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_595357 = validateParameter(valid_595357, JArray, required = false,
                                 default = nil)
  if valid_595357 != nil:
    section.add "EnableCloudwatchLogsExports", valid_595357
  var valid_595358 = formData.getOrDefault("SourceEngineVersion")
  valid_595358 = validateParameter(valid_595358, JString, required = true,
                                 default = nil)
  if valid_595358 != nil:
    section.add "SourceEngineVersion", valid_595358
  var valid_595359 = formData.getOrDefault("Tags")
  valid_595359 = validateParameter(valid_595359, JArray, required = false,
                                 default = nil)
  if valid_595359 != nil:
    section.add "Tags", valid_595359
  var valid_595360 = formData.getOrDefault("DBSubnetGroupName")
  valid_595360 = validateParameter(valid_595360, JString, required = false,
                                 default = nil)
  if valid_595360 != nil:
    section.add "DBSubnetGroupName", valid_595360
  var valid_595361 = formData.getOrDefault("OptionGroupName")
  valid_595361 = validateParameter(valid_595361, JString, required = false,
                                 default = nil)
  if valid_595361 != nil:
    section.add "OptionGroupName", valid_595361
  var valid_595362 = formData.getOrDefault("CharacterSetName")
  valid_595362 = validateParameter(valid_595362, JString, required = false,
                                 default = nil)
  if valid_595362 != nil:
    section.add "CharacterSetName", valid_595362
  var valid_595363 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_595363 = validateParameter(valid_595363, JString, required = false,
                                 default = nil)
  if valid_595363 != nil:
    section.add "DBClusterParameterGroupName", valid_595363
  var valid_595364 = formData.getOrDefault("StorageEncrypted")
  valid_595364 = validateParameter(valid_595364, JBool, required = false, default = nil)
  if valid_595364 != nil:
    section.add "StorageEncrypted", valid_595364
  var valid_595365 = formData.getOrDefault("DBClusterIdentifier")
  valid_595365 = validateParameter(valid_595365, JString, required = true,
                                 default = nil)
  if valid_595365 != nil:
    section.add "DBClusterIdentifier", valid_595365
  var valid_595366 = formData.getOrDefault("DeletionProtection")
  valid_595366 = validateParameter(valid_595366, JBool, required = false, default = nil)
  if valid_595366 != nil:
    section.add "DeletionProtection", valid_595366
  var valid_595367 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_595367 = validateParameter(valid_595367, JBool, required = false, default = nil)
  if valid_595367 != nil:
    section.add "CopyTagsToSnapshot", valid_595367
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595368: Call_PostRestoreDBClusterFromS3_595327; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595368.validator(path, query, header, formData, body)
  let scheme = call_595368.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595368.url(scheme.get, call_595368.host, call_595368.base,
                         call_595368.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595368, url, valid)

proc call*(call_595369: Call_PostRestoreDBClusterFromS3_595327;
          S3IngestionRoleArn: string; MasterUserPassword: string;
          MasterUsername: string; SourceEngine: string; Engine: string;
          S3BucketName: string; SourceEngineVersion: string;
          DBClusterIdentifier: string; S3Prefix: string = ""; Port: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; EngineVersion: string = "";
          BacktrackWindow: int = 0; DatabaseName: string = "";
          VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; BackupRetentionPeriod: int = 0;
          KmsKeyId: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterFromS3"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          CharacterSetName: string = ""; DBClusterParameterGroupName: string = "";
          Version: string = "2014-10-31"; StorageEncrypted: bool = false;
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_595370 = newJObject()
  var formData_595371 = newJObject()
  add(formData_595371, "S3Prefix", newJString(S3Prefix))
  add(formData_595371, "Port", newJInt(Port))
  add(formData_595371, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_595371, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(formData_595371, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_595371, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_595371, "MasterUsername", newJString(MasterUsername))
  add(formData_595371, "SourceEngine", newJString(SourceEngine))
  add(formData_595371, "EngineVersion", newJString(EngineVersion))
  add(formData_595371, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_595371, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_595371.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_595371, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_595371.add "AvailabilityZones", AvailabilityZones
  add(formData_595371, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_595371, "Engine", newJString(Engine))
  add(formData_595371, "KmsKeyId", newJString(KmsKeyId))
  add(formData_595371, "S3BucketName", newJString(S3BucketName))
  if EnableCloudwatchLogsExports != nil:
    formData_595371.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_595371, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_595370, "Action", newJString(Action))
  if Tags != nil:
    formData_595371.add "Tags", Tags
  add(formData_595371, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_595371, "OptionGroupName", newJString(OptionGroupName))
  add(formData_595371, "CharacterSetName", newJString(CharacterSetName))
  add(formData_595371, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_595370, "Version", newJString(Version))
  add(formData_595371, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_595371, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_595371, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_595371, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_595369.call(nil, query_595370, nil, formData_595371, nil)

var postRestoreDBClusterFromS3* = Call_PostRestoreDBClusterFromS3_595327(
    name: "postRestoreDBClusterFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_PostRestoreDBClusterFromS3_595328, base: "/",
    url: url_PostRestoreDBClusterFromS3_595329,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromS3_595283 = ref object of OpenApiRestCall_590348
proc url_GetRestoreDBClusterFromS3_595285(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBClusterFromS3_595284(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   Version: JString (required)
  section = newJObject()
  var valid_595286 = query.getOrDefault("DatabaseName")
  valid_595286 = validateParameter(valid_595286, JString, required = false,
                                 default = nil)
  if valid_595286 != nil:
    section.add "DatabaseName", valid_595286
  assert query != nil, "query argument is necessary due to required `SourceEngineVersion` field"
  var valid_595287 = query.getOrDefault("SourceEngineVersion")
  valid_595287 = validateParameter(valid_595287, JString, required = true,
                                 default = nil)
  if valid_595287 != nil:
    section.add "SourceEngineVersion", valid_595287
  var valid_595288 = query.getOrDefault("StorageEncrypted")
  valid_595288 = validateParameter(valid_595288, JBool, required = false, default = nil)
  if valid_595288 != nil:
    section.add "StorageEncrypted", valid_595288
  var valid_595289 = query.getOrDefault("Engine")
  valid_595289 = validateParameter(valid_595289, JString, required = true,
                                 default = nil)
  if valid_595289 != nil:
    section.add "Engine", valid_595289
  var valid_595290 = query.getOrDefault("SourceEngine")
  valid_595290 = validateParameter(valid_595290, JString, required = true,
                                 default = nil)
  if valid_595290 != nil:
    section.add "SourceEngine", valid_595290
  var valid_595291 = query.getOrDefault("DeletionProtection")
  valid_595291 = validateParameter(valid_595291, JBool, required = false, default = nil)
  if valid_595291 != nil:
    section.add "DeletionProtection", valid_595291
  var valid_595292 = query.getOrDefault("CharacterSetName")
  valid_595292 = validateParameter(valid_595292, JString, required = false,
                                 default = nil)
  if valid_595292 != nil:
    section.add "CharacterSetName", valid_595292
  var valid_595293 = query.getOrDefault("S3Prefix")
  valid_595293 = validateParameter(valid_595293, JString, required = false,
                                 default = nil)
  if valid_595293 != nil:
    section.add "S3Prefix", valid_595293
  var valid_595294 = query.getOrDefault("CopyTagsToSnapshot")
  valid_595294 = validateParameter(valid_595294, JBool, required = false, default = nil)
  if valid_595294 != nil:
    section.add "CopyTagsToSnapshot", valid_595294
  var valid_595295 = query.getOrDefault("Tags")
  valid_595295 = validateParameter(valid_595295, JArray, required = false,
                                 default = nil)
  if valid_595295 != nil:
    section.add "Tags", valid_595295
  var valid_595296 = query.getOrDefault("KmsKeyId")
  valid_595296 = validateParameter(valid_595296, JString, required = false,
                                 default = nil)
  if valid_595296 != nil:
    section.add "KmsKeyId", valid_595296
  var valid_595297 = query.getOrDefault("DBClusterIdentifier")
  valid_595297 = validateParameter(valid_595297, JString, required = true,
                                 default = nil)
  if valid_595297 != nil:
    section.add "DBClusterIdentifier", valid_595297
  var valid_595298 = query.getOrDefault("BacktrackWindow")
  valid_595298 = validateParameter(valid_595298, JInt, required = false, default = nil)
  if valid_595298 != nil:
    section.add "BacktrackWindow", valid_595298
  var valid_595299 = query.getOrDefault("DBClusterParameterGroupName")
  valid_595299 = validateParameter(valid_595299, JString, required = false,
                                 default = nil)
  if valid_595299 != nil:
    section.add "DBClusterParameterGroupName", valid_595299
  var valid_595300 = query.getOrDefault("S3BucketName")
  valid_595300 = validateParameter(valid_595300, JString, required = true,
                                 default = nil)
  if valid_595300 != nil:
    section.add "S3BucketName", valid_595300
  var valid_595301 = query.getOrDefault("AvailabilityZones")
  valid_595301 = validateParameter(valid_595301, JArray, required = false,
                                 default = nil)
  if valid_595301 != nil:
    section.add "AvailabilityZones", valid_595301
  var valid_595302 = query.getOrDefault("MasterUsername")
  valid_595302 = validateParameter(valid_595302, JString, required = true,
                                 default = nil)
  if valid_595302 != nil:
    section.add "MasterUsername", valid_595302
  var valid_595303 = query.getOrDefault("BackupRetentionPeriod")
  valid_595303 = validateParameter(valid_595303, JInt, required = false, default = nil)
  if valid_595303 != nil:
    section.add "BackupRetentionPeriod", valid_595303
  var valid_595304 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_595304 = validateParameter(valid_595304, JBool, required = false, default = nil)
  if valid_595304 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_595304
  var valid_595305 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_595305 = validateParameter(valid_595305, JArray, required = false,
                                 default = nil)
  if valid_595305 != nil:
    section.add "EnableCloudwatchLogsExports", valid_595305
  var valid_595306 = query.getOrDefault("EngineVersion")
  valid_595306 = validateParameter(valid_595306, JString, required = false,
                                 default = nil)
  if valid_595306 != nil:
    section.add "EngineVersion", valid_595306
  var valid_595307 = query.getOrDefault("Action")
  valid_595307 = validateParameter(valid_595307, JString, required = true,
                                 default = newJString("RestoreDBClusterFromS3"))
  if valid_595307 != nil:
    section.add "Action", valid_595307
  var valid_595308 = query.getOrDefault("Port")
  valid_595308 = validateParameter(valid_595308, JInt, required = false, default = nil)
  if valid_595308 != nil:
    section.add "Port", valid_595308
  var valid_595309 = query.getOrDefault("VpcSecurityGroupIds")
  valid_595309 = validateParameter(valid_595309, JArray, required = false,
                                 default = nil)
  if valid_595309 != nil:
    section.add "VpcSecurityGroupIds", valid_595309
  var valid_595310 = query.getOrDefault("MasterUserPassword")
  valid_595310 = validateParameter(valid_595310, JString, required = true,
                                 default = nil)
  if valid_595310 != nil:
    section.add "MasterUserPassword", valid_595310
  var valid_595311 = query.getOrDefault("OptionGroupName")
  valid_595311 = validateParameter(valid_595311, JString, required = false,
                                 default = nil)
  if valid_595311 != nil:
    section.add "OptionGroupName", valid_595311
  var valid_595312 = query.getOrDefault("DBSubnetGroupName")
  valid_595312 = validateParameter(valid_595312, JString, required = false,
                                 default = nil)
  if valid_595312 != nil:
    section.add "DBSubnetGroupName", valid_595312
  var valid_595313 = query.getOrDefault("PreferredBackupWindow")
  valid_595313 = validateParameter(valid_595313, JString, required = false,
                                 default = nil)
  if valid_595313 != nil:
    section.add "PreferredBackupWindow", valid_595313
  var valid_595314 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_595314 = validateParameter(valid_595314, JString, required = false,
                                 default = nil)
  if valid_595314 != nil:
    section.add "PreferredMaintenanceWindow", valid_595314
  var valid_595315 = query.getOrDefault("S3IngestionRoleArn")
  valid_595315 = validateParameter(valid_595315, JString, required = true,
                                 default = nil)
  if valid_595315 != nil:
    section.add "S3IngestionRoleArn", valid_595315
  var valid_595316 = query.getOrDefault("Version")
  valid_595316 = validateParameter(valid_595316, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595316 != nil:
    section.add "Version", valid_595316
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595317 = header.getOrDefault("X-Amz-Signature")
  valid_595317 = validateParameter(valid_595317, JString, required = false,
                                 default = nil)
  if valid_595317 != nil:
    section.add "X-Amz-Signature", valid_595317
  var valid_595318 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595318 = validateParameter(valid_595318, JString, required = false,
                                 default = nil)
  if valid_595318 != nil:
    section.add "X-Amz-Content-Sha256", valid_595318
  var valid_595319 = header.getOrDefault("X-Amz-Date")
  valid_595319 = validateParameter(valid_595319, JString, required = false,
                                 default = nil)
  if valid_595319 != nil:
    section.add "X-Amz-Date", valid_595319
  var valid_595320 = header.getOrDefault("X-Amz-Credential")
  valid_595320 = validateParameter(valid_595320, JString, required = false,
                                 default = nil)
  if valid_595320 != nil:
    section.add "X-Amz-Credential", valid_595320
  var valid_595321 = header.getOrDefault("X-Amz-Security-Token")
  valid_595321 = validateParameter(valid_595321, JString, required = false,
                                 default = nil)
  if valid_595321 != nil:
    section.add "X-Amz-Security-Token", valid_595321
  var valid_595322 = header.getOrDefault("X-Amz-Algorithm")
  valid_595322 = validateParameter(valid_595322, JString, required = false,
                                 default = nil)
  if valid_595322 != nil:
    section.add "X-Amz-Algorithm", valid_595322
  var valid_595323 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595323 = validateParameter(valid_595323, JString, required = false,
                                 default = nil)
  if valid_595323 != nil:
    section.add "X-Amz-SignedHeaders", valid_595323
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595324: Call_GetRestoreDBClusterFromS3_595283; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595324.validator(path, query, header, formData, body)
  let scheme = call_595324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595324.url(scheme.get, call_595324.host, call_595324.base,
                         call_595324.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595324, url, valid)

proc call*(call_595325: Call_GetRestoreDBClusterFromS3_595283;
          SourceEngineVersion: string; Engine: string; SourceEngine: string;
          DBClusterIdentifier: string; S3BucketName: string; MasterUsername: string;
          MasterUserPassword: string; S3IngestionRoleArn: string;
          DatabaseName: string = ""; StorageEncrypted: bool = false;
          DeletionProtection: bool = false; CharacterSetName: string = "";
          S3Prefix: string = ""; CopyTagsToSnapshot: bool = false; Tags: JsonNode = nil;
          KmsKeyId: string = ""; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil; BackupRetentionPeriod: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBClusterFromS3"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   Version: string (required)
  var query_595326 = newJObject()
  add(query_595326, "DatabaseName", newJString(DatabaseName))
  add(query_595326, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_595326, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_595326, "Engine", newJString(Engine))
  add(query_595326, "SourceEngine", newJString(SourceEngine))
  add(query_595326, "DeletionProtection", newJBool(DeletionProtection))
  add(query_595326, "CharacterSetName", newJString(CharacterSetName))
  add(query_595326, "S3Prefix", newJString(S3Prefix))
  add(query_595326, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  if Tags != nil:
    query_595326.add "Tags", Tags
  add(query_595326, "KmsKeyId", newJString(KmsKeyId))
  add(query_595326, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_595326, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_595326, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_595326, "S3BucketName", newJString(S3BucketName))
  if AvailabilityZones != nil:
    query_595326.add "AvailabilityZones", AvailabilityZones
  add(query_595326, "MasterUsername", newJString(MasterUsername))
  add(query_595326, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_595326, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_595326.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_595326, "EngineVersion", newJString(EngineVersion))
  add(query_595326, "Action", newJString(Action))
  add(query_595326, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_595326.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_595326, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_595326, "OptionGroupName", newJString(OptionGroupName))
  add(query_595326, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_595326, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_595326, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_595326, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_595326, "Version", newJString(Version))
  result = call_595325.call(nil, query_595326, nil, nil, nil)

var getRestoreDBClusterFromS3* = Call_GetRestoreDBClusterFromS3_595283(
    name: "getRestoreDBClusterFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_GetRestoreDBClusterFromS3_595284, base: "/",
    url: url_GetRestoreDBClusterFromS3_595285,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromSnapshot_595411 = ref object of OpenApiRestCall_590348
proc url_PostRestoreDBClusterFromSnapshot_595413(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBClusterFromSnapshot_595412(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595414 = query.getOrDefault("Action")
  valid_595414 = validateParameter(valid_595414, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_595414 != nil:
    section.add "Action", valid_595414
  var valid_595415 = query.getOrDefault("Version")
  valid_595415 = validateParameter(valid_595415, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595415 != nil:
    section.add "Version", valid_595415
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595416 = header.getOrDefault("X-Amz-Signature")
  valid_595416 = validateParameter(valid_595416, JString, required = false,
                                 default = nil)
  if valid_595416 != nil:
    section.add "X-Amz-Signature", valid_595416
  var valid_595417 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595417 = validateParameter(valid_595417, JString, required = false,
                                 default = nil)
  if valid_595417 != nil:
    section.add "X-Amz-Content-Sha256", valid_595417
  var valid_595418 = header.getOrDefault("X-Amz-Date")
  valid_595418 = validateParameter(valid_595418, JString, required = false,
                                 default = nil)
  if valid_595418 != nil:
    section.add "X-Amz-Date", valid_595418
  var valid_595419 = header.getOrDefault("X-Amz-Credential")
  valid_595419 = validateParameter(valid_595419, JString, required = false,
                                 default = nil)
  if valid_595419 != nil:
    section.add "X-Amz-Credential", valid_595419
  var valid_595420 = header.getOrDefault("X-Amz-Security-Token")
  valid_595420 = validateParameter(valid_595420, JString, required = false,
                                 default = nil)
  if valid_595420 != nil:
    section.add "X-Amz-Security-Token", valid_595420
  var valid_595421 = header.getOrDefault("X-Amz-Algorithm")
  valid_595421 = validateParameter(valid_595421, JString, required = false,
                                 default = nil)
  if valid_595421 != nil:
    section.add "X-Amz-Algorithm", valid_595421
  var valid_595422 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595422 = validateParameter(valid_595422, JString, required = false,
                                 default = nil)
  if valid_595422 != nil:
    section.add "X-Amz-SignedHeaders", valid_595422
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_595423 = formData.getOrDefault("Port")
  valid_595423 = validateParameter(valid_595423, JInt, required = false, default = nil)
  if valid_595423 != nil:
    section.add "Port", valid_595423
  var valid_595424 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_595424 = validateParameter(valid_595424, JString, required = false,
                                 default = nil)
  if valid_595424 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_595424
  var valid_595425 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_595425 = validateParameter(valid_595425, JString, required = false,
                                 default = nil)
  if valid_595425 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_595425
  var valid_595426 = formData.getOrDefault("EngineVersion")
  valid_595426 = validateParameter(valid_595426, JString, required = false,
                                 default = nil)
  if valid_595426 != nil:
    section.add "EngineVersion", valid_595426
  var valid_595427 = formData.getOrDefault("BacktrackWindow")
  valid_595427 = validateParameter(valid_595427, JInt, required = false, default = nil)
  if valid_595427 != nil:
    section.add "BacktrackWindow", valid_595427
  var valid_595428 = formData.getOrDefault("DatabaseName")
  valid_595428 = validateParameter(valid_595428, JString, required = false,
                                 default = nil)
  if valid_595428 != nil:
    section.add "DatabaseName", valid_595428
  var valid_595429 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_595429 = validateParameter(valid_595429, JArray, required = false,
                                 default = nil)
  if valid_595429 != nil:
    section.add "VpcSecurityGroupIds", valid_595429
  var valid_595430 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_595430 = validateParameter(valid_595430, JBool, required = false, default = nil)
  if valid_595430 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_595430
  var valid_595431 = formData.getOrDefault("AvailabilityZones")
  valid_595431 = validateParameter(valid_595431, JArray, required = false,
                                 default = nil)
  if valid_595431 != nil:
    section.add "AvailabilityZones", valid_595431
  var valid_595432 = formData.getOrDefault("KmsKeyId")
  valid_595432 = validateParameter(valid_595432, JString, required = false,
                                 default = nil)
  if valid_595432 != nil:
    section.add "KmsKeyId", valid_595432
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_595433 = formData.getOrDefault("Engine")
  valid_595433 = validateParameter(valid_595433, JString, required = true,
                                 default = nil)
  if valid_595433 != nil:
    section.add "Engine", valid_595433
  var valid_595434 = formData.getOrDefault("EngineMode")
  valid_595434 = validateParameter(valid_595434, JString, required = false,
                                 default = nil)
  if valid_595434 != nil:
    section.add "EngineMode", valid_595434
  var valid_595435 = formData.getOrDefault("SnapshotIdentifier")
  valid_595435 = validateParameter(valid_595435, JString, required = true,
                                 default = nil)
  if valid_595435 != nil:
    section.add "SnapshotIdentifier", valid_595435
  var valid_595436 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_595436 = validateParameter(valid_595436, JArray, required = false,
                                 default = nil)
  if valid_595436 != nil:
    section.add "EnableCloudwatchLogsExports", valid_595436
  var valid_595437 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_595437 = validateParameter(valid_595437, JString, required = false,
                                 default = nil)
  if valid_595437 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_595437
  var valid_595438 = formData.getOrDefault("Tags")
  valid_595438 = validateParameter(valid_595438, JArray, required = false,
                                 default = nil)
  if valid_595438 != nil:
    section.add "Tags", valid_595438
  var valid_595439 = formData.getOrDefault("DBSubnetGroupName")
  valid_595439 = validateParameter(valid_595439, JString, required = false,
                                 default = nil)
  if valid_595439 != nil:
    section.add "DBSubnetGroupName", valid_595439
  var valid_595440 = formData.getOrDefault("OptionGroupName")
  valid_595440 = validateParameter(valid_595440, JString, required = false,
                                 default = nil)
  if valid_595440 != nil:
    section.add "OptionGroupName", valid_595440
  var valid_595441 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_595441 = validateParameter(valid_595441, JString, required = false,
                                 default = nil)
  if valid_595441 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_595441
  var valid_595442 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_595442 = validateParameter(valid_595442, JString, required = false,
                                 default = nil)
  if valid_595442 != nil:
    section.add "DBClusterParameterGroupName", valid_595442
  var valid_595443 = formData.getOrDefault("DBClusterIdentifier")
  valid_595443 = validateParameter(valid_595443, JString, required = true,
                                 default = nil)
  if valid_595443 != nil:
    section.add "DBClusterIdentifier", valid_595443
  var valid_595444 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_595444 = validateParameter(valid_595444, JString, required = false,
                                 default = nil)
  if valid_595444 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_595444
  var valid_595445 = formData.getOrDefault("DeletionProtection")
  valid_595445 = validateParameter(valid_595445, JBool, required = false, default = nil)
  if valid_595445 != nil:
    section.add "DeletionProtection", valid_595445
  var valid_595446 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_595446 = validateParameter(valid_595446, JBool, required = false, default = nil)
  if valid_595446 != nil:
    section.add "CopyTagsToSnapshot", valid_595446
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595447: Call_PostRestoreDBClusterFromSnapshot_595411;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595447.validator(path, query, header, formData, body)
  let scheme = call_595447.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595447.url(scheme.get, call_595447.host, call_595447.base,
                         call_595447.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595447, url, valid)

proc call*(call_595448: Call_PostRestoreDBClusterFromSnapshot_595411;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationTimeoutAction: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          DatabaseName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; KmsKeyId: string = "";
          EngineMode: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          ScalingConfigurationMaxCapacity: string = "";
          Action: string = "RestoreDBClusterFromSnapshot"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationAutoPause: string = "";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_595449 = newJObject()
  var formData_595450 = newJObject()
  add(formData_595450, "Port", newJInt(Port))
  add(formData_595450, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_595450, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_595450, "EngineVersion", newJString(EngineVersion))
  add(formData_595450, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_595450, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_595450.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_595450, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_595450.add "AvailabilityZones", AvailabilityZones
  add(formData_595450, "KmsKeyId", newJString(KmsKeyId))
  add(formData_595450, "Engine", newJString(Engine))
  add(formData_595450, "EngineMode", newJString(EngineMode))
  add(formData_595450, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if EnableCloudwatchLogsExports != nil:
    formData_595450.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_595450, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_595449, "Action", newJString(Action))
  if Tags != nil:
    formData_595450.add "Tags", Tags
  add(formData_595450, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_595450, "OptionGroupName", newJString(OptionGroupName))
  add(formData_595450, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_595450, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_595449, "Version", newJString(Version))
  add(formData_595450, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_595450, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_595450, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_595450, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_595448.call(nil, query_595449, nil, formData_595450, nil)

var postRestoreDBClusterFromSnapshot* = Call_PostRestoreDBClusterFromSnapshot_595411(
    name: "postRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_PostRestoreDBClusterFromSnapshot_595412, base: "/",
    url: url_PostRestoreDBClusterFromSnapshot_595413,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromSnapshot_595372 = ref object of OpenApiRestCall_590348
proc url_GetRestoreDBClusterFromSnapshot_595374(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBClusterFromSnapshot_595373(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_595375 = query.getOrDefault("DatabaseName")
  valid_595375 = validateParameter(valid_595375, JString, required = false,
                                 default = nil)
  if valid_595375 != nil:
    section.add "DatabaseName", valid_595375
  var valid_595376 = query.getOrDefault("DeletionProtection")
  valid_595376 = validateParameter(valid_595376, JBool, required = false, default = nil)
  if valid_595376 != nil:
    section.add "DeletionProtection", valid_595376
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_595377 = query.getOrDefault("Engine")
  valid_595377 = validateParameter(valid_595377, JString, required = true,
                                 default = nil)
  if valid_595377 != nil:
    section.add "Engine", valid_595377
  var valid_595378 = query.getOrDefault("CopyTagsToSnapshot")
  valid_595378 = validateParameter(valid_595378, JBool, required = false, default = nil)
  if valid_595378 != nil:
    section.add "CopyTagsToSnapshot", valid_595378
  var valid_595379 = query.getOrDefault("SnapshotIdentifier")
  valid_595379 = validateParameter(valid_595379, JString, required = true,
                                 default = nil)
  if valid_595379 != nil:
    section.add "SnapshotIdentifier", valid_595379
  var valid_595380 = query.getOrDefault("Tags")
  valid_595380 = validateParameter(valid_595380, JArray, required = false,
                                 default = nil)
  if valid_595380 != nil:
    section.add "Tags", valid_595380
  var valid_595381 = query.getOrDefault("KmsKeyId")
  valid_595381 = validateParameter(valid_595381, JString, required = false,
                                 default = nil)
  if valid_595381 != nil:
    section.add "KmsKeyId", valid_595381
  var valid_595382 = query.getOrDefault("DBClusterIdentifier")
  valid_595382 = validateParameter(valid_595382, JString, required = true,
                                 default = nil)
  if valid_595382 != nil:
    section.add "DBClusterIdentifier", valid_595382
  var valid_595383 = query.getOrDefault("BacktrackWindow")
  valid_595383 = validateParameter(valid_595383, JInt, required = false, default = nil)
  if valid_595383 != nil:
    section.add "BacktrackWindow", valid_595383
  var valid_595384 = query.getOrDefault("EngineMode")
  valid_595384 = validateParameter(valid_595384, JString, required = false,
                                 default = nil)
  if valid_595384 != nil:
    section.add "EngineMode", valid_595384
  var valid_595385 = query.getOrDefault("DBClusterParameterGroupName")
  valid_595385 = validateParameter(valid_595385, JString, required = false,
                                 default = nil)
  if valid_595385 != nil:
    section.add "DBClusterParameterGroupName", valid_595385
  var valid_595386 = query.getOrDefault("AvailabilityZones")
  valid_595386 = validateParameter(valid_595386, JArray, required = false,
                                 default = nil)
  if valid_595386 != nil:
    section.add "AvailabilityZones", valid_595386
  var valid_595387 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_595387 = validateParameter(valid_595387, JString, required = false,
                                 default = nil)
  if valid_595387 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_595387
  var valid_595388 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_595388 = validateParameter(valid_595388, JString, required = false,
                                 default = nil)
  if valid_595388 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_595388
  var valid_595389 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_595389 = validateParameter(valid_595389, JString, required = false,
                                 default = nil)
  if valid_595389 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_595389
  var valid_595390 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_595390 = validateParameter(valid_595390, JBool, required = false, default = nil)
  if valid_595390 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_595390
  var valid_595391 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_595391 = validateParameter(valid_595391, JString, required = false,
                                 default = nil)
  if valid_595391 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_595391
  var valid_595392 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_595392 = validateParameter(valid_595392, JArray, required = false,
                                 default = nil)
  if valid_595392 != nil:
    section.add "EnableCloudwatchLogsExports", valid_595392
  var valid_595393 = query.getOrDefault("EngineVersion")
  valid_595393 = validateParameter(valid_595393, JString, required = false,
                                 default = nil)
  if valid_595393 != nil:
    section.add "EngineVersion", valid_595393
  var valid_595394 = query.getOrDefault("Action")
  valid_595394 = validateParameter(valid_595394, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_595394 != nil:
    section.add "Action", valid_595394
  var valid_595395 = query.getOrDefault("Port")
  valid_595395 = validateParameter(valid_595395, JInt, required = false, default = nil)
  if valid_595395 != nil:
    section.add "Port", valid_595395
  var valid_595396 = query.getOrDefault("VpcSecurityGroupIds")
  valid_595396 = validateParameter(valid_595396, JArray, required = false,
                                 default = nil)
  if valid_595396 != nil:
    section.add "VpcSecurityGroupIds", valid_595396
  var valid_595397 = query.getOrDefault("OptionGroupName")
  valid_595397 = validateParameter(valid_595397, JString, required = false,
                                 default = nil)
  if valid_595397 != nil:
    section.add "OptionGroupName", valid_595397
  var valid_595398 = query.getOrDefault("DBSubnetGroupName")
  valid_595398 = validateParameter(valid_595398, JString, required = false,
                                 default = nil)
  if valid_595398 != nil:
    section.add "DBSubnetGroupName", valid_595398
  var valid_595399 = query.getOrDefault("Version")
  valid_595399 = validateParameter(valid_595399, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595399 != nil:
    section.add "Version", valid_595399
  var valid_595400 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_595400 = validateParameter(valid_595400, JString, required = false,
                                 default = nil)
  if valid_595400 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_595400
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595401 = header.getOrDefault("X-Amz-Signature")
  valid_595401 = validateParameter(valid_595401, JString, required = false,
                                 default = nil)
  if valid_595401 != nil:
    section.add "X-Amz-Signature", valid_595401
  var valid_595402 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595402 = validateParameter(valid_595402, JString, required = false,
                                 default = nil)
  if valid_595402 != nil:
    section.add "X-Amz-Content-Sha256", valid_595402
  var valid_595403 = header.getOrDefault("X-Amz-Date")
  valid_595403 = validateParameter(valid_595403, JString, required = false,
                                 default = nil)
  if valid_595403 != nil:
    section.add "X-Amz-Date", valid_595403
  var valid_595404 = header.getOrDefault("X-Amz-Credential")
  valid_595404 = validateParameter(valid_595404, JString, required = false,
                                 default = nil)
  if valid_595404 != nil:
    section.add "X-Amz-Credential", valid_595404
  var valid_595405 = header.getOrDefault("X-Amz-Security-Token")
  valid_595405 = validateParameter(valid_595405, JString, required = false,
                                 default = nil)
  if valid_595405 != nil:
    section.add "X-Amz-Security-Token", valid_595405
  var valid_595406 = header.getOrDefault("X-Amz-Algorithm")
  valid_595406 = validateParameter(valid_595406, JString, required = false,
                                 default = nil)
  if valid_595406 != nil:
    section.add "X-Amz-Algorithm", valid_595406
  var valid_595407 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595407 = validateParameter(valid_595407, JString, required = false,
                                 default = nil)
  if valid_595407 != nil:
    section.add "X-Amz-SignedHeaders", valid_595407
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595408: Call_GetRestoreDBClusterFromSnapshot_595372;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595408.validator(path, query, header, formData, body)
  let scheme = call_595408.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595408.url(scheme.get, call_595408.host, call_595408.base,
                         call_595408.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595408, url, valid)

proc call*(call_595409: Call_GetRestoreDBClusterFromSnapshot_595372;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          DatabaseName: string = ""; DeletionProtection: bool = false;
          CopyTagsToSnapshot: bool = false; Tags: JsonNode = nil; KmsKeyId: string = "";
          BacktrackWindow: int = 0; EngineMode: string = "";
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          ScalingConfigurationMinCapacity: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBClusterFromSnapshot"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_595410 = newJObject()
  add(query_595410, "DatabaseName", newJString(DatabaseName))
  add(query_595410, "DeletionProtection", newJBool(DeletionProtection))
  add(query_595410, "Engine", newJString(Engine))
  add(query_595410, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_595410, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if Tags != nil:
    query_595410.add "Tags", Tags
  add(query_595410, "KmsKeyId", newJString(KmsKeyId))
  add(query_595410, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_595410, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_595410, "EngineMode", newJString(EngineMode))
  add(query_595410, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_595410.add "AvailabilityZones", AvailabilityZones
  add(query_595410, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_595410, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_595410, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_595410, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_595410, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  if EnableCloudwatchLogsExports != nil:
    query_595410.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_595410, "EngineVersion", newJString(EngineVersion))
  add(query_595410, "Action", newJString(Action))
  add(query_595410, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_595410.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_595410, "OptionGroupName", newJString(OptionGroupName))
  add(query_595410, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_595410, "Version", newJString(Version))
  add(query_595410, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_595409.call(nil, query_595410, nil, nil, nil)

var getRestoreDBClusterFromSnapshot* = Call_GetRestoreDBClusterFromSnapshot_595372(
    name: "getRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_GetRestoreDBClusterFromSnapshot_595373, base: "/",
    url: url_GetRestoreDBClusterFromSnapshot_595374,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterToPointInTime_595483 = ref object of OpenApiRestCall_590348
proc url_PostRestoreDBClusterToPointInTime_595485(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBClusterToPointInTime_595484(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595486 = query.getOrDefault("Action")
  valid_595486 = validateParameter(valid_595486, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_595486 != nil:
    section.add "Action", valid_595486
  var valid_595487 = query.getOrDefault("Version")
  valid_595487 = validateParameter(valid_595487, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595487 != nil:
    section.add "Version", valid_595487
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595488 = header.getOrDefault("X-Amz-Signature")
  valid_595488 = validateParameter(valid_595488, JString, required = false,
                                 default = nil)
  if valid_595488 != nil:
    section.add "X-Amz-Signature", valid_595488
  var valid_595489 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595489 = validateParameter(valid_595489, JString, required = false,
                                 default = nil)
  if valid_595489 != nil:
    section.add "X-Amz-Content-Sha256", valid_595489
  var valid_595490 = header.getOrDefault("X-Amz-Date")
  valid_595490 = validateParameter(valid_595490, JString, required = false,
                                 default = nil)
  if valid_595490 != nil:
    section.add "X-Amz-Date", valid_595490
  var valid_595491 = header.getOrDefault("X-Amz-Credential")
  valid_595491 = validateParameter(valid_595491, JString, required = false,
                                 default = nil)
  if valid_595491 != nil:
    section.add "X-Amz-Credential", valid_595491
  var valid_595492 = header.getOrDefault("X-Amz-Security-Token")
  valid_595492 = validateParameter(valid_595492, JString, required = false,
                                 default = nil)
  if valid_595492 != nil:
    section.add "X-Amz-Security-Token", valid_595492
  var valid_595493 = header.getOrDefault("X-Amz-Algorithm")
  valid_595493 = validateParameter(valid_595493, JString, required = false,
                                 default = nil)
  if valid_595493 != nil:
    section.add "X-Amz-Algorithm", valid_595493
  var valid_595494 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595494 = validateParameter(valid_595494, JString, required = false,
                                 default = nil)
  if valid_595494 != nil:
    section.add "X-Amz-SignedHeaders", valid_595494
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_595495 = formData.getOrDefault("Port")
  valid_595495 = validateParameter(valid_595495, JInt, required = false, default = nil)
  if valid_595495 != nil:
    section.add "Port", valid_595495
  var valid_595496 = formData.getOrDefault("BacktrackWindow")
  valid_595496 = validateParameter(valid_595496, JInt, required = false, default = nil)
  if valid_595496 != nil:
    section.add "BacktrackWindow", valid_595496
  var valid_595497 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_595497 = validateParameter(valid_595497, JArray, required = false,
                                 default = nil)
  if valid_595497 != nil:
    section.add "VpcSecurityGroupIds", valid_595497
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterIdentifier` field"
  var valid_595498 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_595498 = validateParameter(valid_595498, JString, required = true,
                                 default = nil)
  if valid_595498 != nil:
    section.add "SourceDBClusterIdentifier", valid_595498
  var valid_595499 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_595499 = validateParameter(valid_595499, JBool, required = false, default = nil)
  if valid_595499 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_595499
  var valid_595500 = formData.getOrDefault("KmsKeyId")
  valid_595500 = validateParameter(valid_595500, JString, required = false,
                                 default = nil)
  if valid_595500 != nil:
    section.add "KmsKeyId", valid_595500
  var valid_595501 = formData.getOrDefault("RestoreType")
  valid_595501 = validateParameter(valid_595501, JString, required = false,
                                 default = nil)
  if valid_595501 != nil:
    section.add "RestoreType", valid_595501
  var valid_595502 = formData.getOrDefault("UseLatestRestorableTime")
  valid_595502 = validateParameter(valid_595502, JBool, required = false, default = nil)
  if valid_595502 != nil:
    section.add "UseLatestRestorableTime", valid_595502
  var valid_595503 = formData.getOrDefault("RestoreToTime")
  valid_595503 = validateParameter(valid_595503, JString, required = false,
                                 default = nil)
  if valid_595503 != nil:
    section.add "RestoreToTime", valid_595503
  var valid_595504 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_595504 = validateParameter(valid_595504, JArray, required = false,
                                 default = nil)
  if valid_595504 != nil:
    section.add "EnableCloudwatchLogsExports", valid_595504
  var valid_595505 = formData.getOrDefault("Tags")
  valid_595505 = validateParameter(valid_595505, JArray, required = false,
                                 default = nil)
  if valid_595505 != nil:
    section.add "Tags", valid_595505
  var valid_595506 = formData.getOrDefault("DBSubnetGroupName")
  valid_595506 = validateParameter(valid_595506, JString, required = false,
                                 default = nil)
  if valid_595506 != nil:
    section.add "DBSubnetGroupName", valid_595506
  var valid_595507 = formData.getOrDefault("OptionGroupName")
  valid_595507 = validateParameter(valid_595507, JString, required = false,
                                 default = nil)
  if valid_595507 != nil:
    section.add "OptionGroupName", valid_595507
  var valid_595508 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_595508 = validateParameter(valid_595508, JString, required = false,
                                 default = nil)
  if valid_595508 != nil:
    section.add "DBClusterParameterGroupName", valid_595508
  var valid_595509 = formData.getOrDefault("DBClusterIdentifier")
  valid_595509 = validateParameter(valid_595509, JString, required = true,
                                 default = nil)
  if valid_595509 != nil:
    section.add "DBClusterIdentifier", valid_595509
  var valid_595510 = formData.getOrDefault("DeletionProtection")
  valid_595510 = validateParameter(valid_595510, JBool, required = false, default = nil)
  if valid_595510 != nil:
    section.add "DeletionProtection", valid_595510
  var valid_595511 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_595511 = validateParameter(valid_595511, JBool, required = false, default = nil)
  if valid_595511 != nil:
    section.add "CopyTagsToSnapshot", valid_595511
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595512: Call_PostRestoreDBClusterToPointInTime_595483;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595512.validator(path, query, header, formData, body)
  let scheme = call_595512.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595512.url(scheme.get, call_595512.host, call_595512.base,
                         call_595512.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595512, url, valid)

proc call*(call_595513: Call_PostRestoreDBClusterToPointInTime_595483;
          SourceDBClusterIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; BacktrackWindow: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          RestoreType: string = ""; UseLatestRestorableTime: bool = false;
          RestoreToTime: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_595514 = newJObject()
  var formData_595515 = newJObject()
  add(formData_595515, "Port", newJInt(Port))
  add(formData_595515, "BacktrackWindow", newJInt(BacktrackWindow))
  if VpcSecurityGroupIds != nil:
    formData_595515.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_595515, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_595515, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_595515, "KmsKeyId", newJString(KmsKeyId))
  add(formData_595515, "RestoreType", newJString(RestoreType))
  add(formData_595515, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_595515, "RestoreToTime", newJString(RestoreToTime))
  if EnableCloudwatchLogsExports != nil:
    formData_595515.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_595514, "Action", newJString(Action))
  if Tags != nil:
    formData_595515.add "Tags", Tags
  add(formData_595515, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_595515, "OptionGroupName", newJString(OptionGroupName))
  add(formData_595515, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_595514, "Version", newJString(Version))
  add(formData_595515, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_595515, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_595515, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_595513.call(nil, query_595514, nil, formData_595515, nil)

var postRestoreDBClusterToPointInTime* = Call_PostRestoreDBClusterToPointInTime_595483(
    name: "postRestoreDBClusterToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_PostRestoreDBClusterToPointInTime_595484, base: "/",
    url: url_PostRestoreDBClusterToPointInTime_595485,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterToPointInTime_595451 = ref object of OpenApiRestCall_590348
proc url_GetRestoreDBClusterToPointInTime_595453(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBClusterToPointInTime_595452(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_595454 = query.getOrDefault("DeletionProtection")
  valid_595454 = validateParameter(valid_595454, JBool, required = false, default = nil)
  if valid_595454 != nil:
    section.add "DeletionProtection", valid_595454
  var valid_595455 = query.getOrDefault("RestoreType")
  valid_595455 = validateParameter(valid_595455, JString, required = false,
                                 default = nil)
  if valid_595455 != nil:
    section.add "RestoreType", valid_595455
  var valid_595456 = query.getOrDefault("UseLatestRestorableTime")
  valid_595456 = validateParameter(valid_595456, JBool, required = false, default = nil)
  if valid_595456 != nil:
    section.add "UseLatestRestorableTime", valid_595456
  var valid_595457 = query.getOrDefault("CopyTagsToSnapshot")
  valid_595457 = validateParameter(valid_595457, JBool, required = false, default = nil)
  if valid_595457 != nil:
    section.add "CopyTagsToSnapshot", valid_595457
  var valid_595458 = query.getOrDefault("Tags")
  valid_595458 = validateParameter(valid_595458, JArray, required = false,
                                 default = nil)
  if valid_595458 != nil:
    section.add "Tags", valid_595458
  var valid_595459 = query.getOrDefault("KmsKeyId")
  valid_595459 = validateParameter(valid_595459, JString, required = false,
                                 default = nil)
  if valid_595459 != nil:
    section.add "KmsKeyId", valid_595459
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_595460 = query.getOrDefault("DBClusterIdentifier")
  valid_595460 = validateParameter(valid_595460, JString, required = true,
                                 default = nil)
  if valid_595460 != nil:
    section.add "DBClusterIdentifier", valid_595460
  var valid_595461 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_595461 = validateParameter(valid_595461, JString, required = true,
                                 default = nil)
  if valid_595461 != nil:
    section.add "SourceDBClusterIdentifier", valid_595461
  var valid_595462 = query.getOrDefault("BacktrackWindow")
  valid_595462 = validateParameter(valid_595462, JInt, required = false, default = nil)
  if valid_595462 != nil:
    section.add "BacktrackWindow", valid_595462
  var valid_595463 = query.getOrDefault("DBClusterParameterGroupName")
  valid_595463 = validateParameter(valid_595463, JString, required = false,
                                 default = nil)
  if valid_595463 != nil:
    section.add "DBClusterParameterGroupName", valid_595463
  var valid_595464 = query.getOrDefault("RestoreToTime")
  valid_595464 = validateParameter(valid_595464, JString, required = false,
                                 default = nil)
  if valid_595464 != nil:
    section.add "RestoreToTime", valid_595464
  var valid_595465 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_595465 = validateParameter(valid_595465, JBool, required = false, default = nil)
  if valid_595465 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_595465
  var valid_595466 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_595466 = validateParameter(valid_595466, JArray, required = false,
                                 default = nil)
  if valid_595466 != nil:
    section.add "EnableCloudwatchLogsExports", valid_595466
  var valid_595467 = query.getOrDefault("Action")
  valid_595467 = validateParameter(valid_595467, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_595467 != nil:
    section.add "Action", valid_595467
  var valid_595468 = query.getOrDefault("Port")
  valid_595468 = validateParameter(valid_595468, JInt, required = false, default = nil)
  if valid_595468 != nil:
    section.add "Port", valid_595468
  var valid_595469 = query.getOrDefault("VpcSecurityGroupIds")
  valid_595469 = validateParameter(valid_595469, JArray, required = false,
                                 default = nil)
  if valid_595469 != nil:
    section.add "VpcSecurityGroupIds", valid_595469
  var valid_595470 = query.getOrDefault("OptionGroupName")
  valid_595470 = validateParameter(valid_595470, JString, required = false,
                                 default = nil)
  if valid_595470 != nil:
    section.add "OptionGroupName", valid_595470
  var valid_595471 = query.getOrDefault("DBSubnetGroupName")
  valid_595471 = validateParameter(valid_595471, JString, required = false,
                                 default = nil)
  if valid_595471 != nil:
    section.add "DBSubnetGroupName", valid_595471
  var valid_595472 = query.getOrDefault("Version")
  valid_595472 = validateParameter(valid_595472, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595472 != nil:
    section.add "Version", valid_595472
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595473 = header.getOrDefault("X-Amz-Signature")
  valid_595473 = validateParameter(valid_595473, JString, required = false,
                                 default = nil)
  if valid_595473 != nil:
    section.add "X-Amz-Signature", valid_595473
  var valid_595474 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595474 = validateParameter(valid_595474, JString, required = false,
                                 default = nil)
  if valid_595474 != nil:
    section.add "X-Amz-Content-Sha256", valid_595474
  var valid_595475 = header.getOrDefault("X-Amz-Date")
  valid_595475 = validateParameter(valid_595475, JString, required = false,
                                 default = nil)
  if valid_595475 != nil:
    section.add "X-Amz-Date", valid_595475
  var valid_595476 = header.getOrDefault("X-Amz-Credential")
  valid_595476 = validateParameter(valid_595476, JString, required = false,
                                 default = nil)
  if valid_595476 != nil:
    section.add "X-Amz-Credential", valid_595476
  var valid_595477 = header.getOrDefault("X-Amz-Security-Token")
  valid_595477 = validateParameter(valid_595477, JString, required = false,
                                 default = nil)
  if valid_595477 != nil:
    section.add "X-Amz-Security-Token", valid_595477
  var valid_595478 = header.getOrDefault("X-Amz-Algorithm")
  valid_595478 = validateParameter(valid_595478, JString, required = false,
                                 default = nil)
  if valid_595478 != nil:
    section.add "X-Amz-Algorithm", valid_595478
  var valid_595479 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595479 = validateParameter(valid_595479, JString, required = false,
                                 default = nil)
  if valid_595479 != nil:
    section.add "X-Amz-SignedHeaders", valid_595479
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595480: Call_GetRestoreDBClusterToPointInTime_595451;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595480.validator(path, query, header, formData, body)
  let scheme = call_595480.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595480.url(scheme.get, call_595480.host, call_595480.base,
                         call_595480.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595480, url, valid)

proc call*(call_595481: Call_GetRestoreDBClusterToPointInTime_595451;
          DBClusterIdentifier: string; SourceDBClusterIdentifier: string;
          DeletionProtection: bool = false; RestoreType: string = "";
          UseLatestRestorableTime: bool = false; CopyTagsToSnapshot: bool = false;
          Tags: JsonNode = nil; KmsKeyId: string = ""; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = ""; RestoreToTime: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_595482 = newJObject()
  add(query_595482, "DeletionProtection", newJBool(DeletionProtection))
  add(query_595482, "RestoreType", newJString(RestoreType))
  add(query_595482, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_595482, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  if Tags != nil:
    query_595482.add "Tags", Tags
  add(query_595482, "KmsKeyId", newJString(KmsKeyId))
  add(query_595482, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_595482, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_595482, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_595482, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_595482, "RestoreToTime", newJString(RestoreToTime))
  add(query_595482, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_595482.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_595482, "Action", newJString(Action))
  add(query_595482, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_595482.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_595482, "OptionGroupName", newJString(OptionGroupName))
  add(query_595482, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_595482, "Version", newJString(Version))
  result = call_595481.call(nil, query_595482, nil, nil, nil)

var getRestoreDBClusterToPointInTime* = Call_GetRestoreDBClusterToPointInTime_595451(
    name: "getRestoreDBClusterToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_GetRestoreDBClusterToPointInTime_595452, base: "/",
    url: url_GetRestoreDBClusterToPointInTime_595453,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromDBSnapshot_595559 = ref object of OpenApiRestCall_590348
proc url_PostRestoreDBInstanceFromDBSnapshot_595561(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBInstanceFromDBSnapshot_595560(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595562 = query.getOrDefault("Action")
  valid_595562 = validateParameter(valid_595562, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_595562 != nil:
    section.add "Action", valid_595562
  var valid_595563 = query.getOrDefault("Version")
  valid_595563 = validateParameter(valid_595563, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595563 != nil:
    section.add "Version", valid_595563
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595564 = header.getOrDefault("X-Amz-Signature")
  valid_595564 = validateParameter(valid_595564, JString, required = false,
                                 default = nil)
  if valid_595564 != nil:
    section.add "X-Amz-Signature", valid_595564
  var valid_595565 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595565 = validateParameter(valid_595565, JString, required = false,
                                 default = nil)
  if valid_595565 != nil:
    section.add "X-Amz-Content-Sha256", valid_595565
  var valid_595566 = header.getOrDefault("X-Amz-Date")
  valid_595566 = validateParameter(valid_595566, JString, required = false,
                                 default = nil)
  if valid_595566 != nil:
    section.add "X-Amz-Date", valid_595566
  var valid_595567 = header.getOrDefault("X-Amz-Credential")
  valid_595567 = validateParameter(valid_595567, JString, required = false,
                                 default = nil)
  if valid_595567 != nil:
    section.add "X-Amz-Credential", valid_595567
  var valid_595568 = header.getOrDefault("X-Amz-Security-Token")
  valid_595568 = validateParameter(valid_595568, JString, required = false,
                                 default = nil)
  if valid_595568 != nil:
    section.add "X-Amz-Security-Token", valid_595568
  var valid_595569 = header.getOrDefault("X-Amz-Algorithm")
  valid_595569 = validateParameter(valid_595569, JString, required = false,
                                 default = nil)
  if valid_595569 != nil:
    section.add "X-Amz-Algorithm", valid_595569
  var valid_595570 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595570 = validateParameter(valid_595570, JString, required = false,
                                 default = nil)
  if valid_595570 != nil:
    section.add "X-Amz-SignedHeaders", valid_595570
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter is not specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_595571 = formData.getOrDefault("Port")
  valid_595571 = validateParameter(valid_595571, JInt, required = false, default = nil)
  if valid_595571 != nil:
    section.add "Port", valid_595571
  var valid_595572 = formData.getOrDefault("DBInstanceClass")
  valid_595572 = validateParameter(valid_595572, JString, required = false,
                                 default = nil)
  if valid_595572 != nil:
    section.add "DBInstanceClass", valid_595572
  var valid_595573 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_595573 = validateParameter(valid_595573, JBool, required = false, default = nil)
  if valid_595573 != nil:
    section.add "UseDefaultProcessorFeatures", valid_595573
  var valid_595574 = formData.getOrDefault("MultiAZ")
  valid_595574 = validateParameter(valid_595574, JBool, required = false, default = nil)
  if valid_595574 != nil:
    section.add "MultiAZ", valid_595574
  var valid_595575 = formData.getOrDefault("Domain")
  valid_595575 = validateParameter(valid_595575, JString, required = false,
                                 default = nil)
  if valid_595575 != nil:
    section.add "Domain", valid_595575
  var valid_595576 = formData.getOrDefault("DBParameterGroupName")
  valid_595576 = validateParameter(valid_595576, JString, required = false,
                                 default = nil)
  if valid_595576 != nil:
    section.add "DBParameterGroupName", valid_595576
  var valid_595577 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_595577 = validateParameter(valid_595577, JArray, required = false,
                                 default = nil)
  if valid_595577 != nil:
    section.add "VpcSecurityGroupIds", valid_595577
  var valid_595578 = formData.getOrDefault("AvailabilityZone")
  valid_595578 = validateParameter(valid_595578, JString, required = false,
                                 default = nil)
  if valid_595578 != nil:
    section.add "AvailabilityZone", valid_595578
  var valid_595579 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_595579 = validateParameter(valid_595579, JBool, required = false, default = nil)
  if valid_595579 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_595579
  var valid_595580 = formData.getOrDefault("Engine")
  valid_595580 = validateParameter(valid_595580, JString, required = false,
                                 default = nil)
  if valid_595580 != nil:
    section.add "Engine", valid_595580
  var valid_595581 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_595581 = validateParameter(valid_595581, JBool, required = false, default = nil)
  if valid_595581 != nil:
    section.add "AutoMinorVersionUpgrade", valid_595581
  var valid_595582 = formData.getOrDefault("TdeCredentialPassword")
  valid_595582 = validateParameter(valid_595582, JString, required = false,
                                 default = nil)
  if valid_595582 != nil:
    section.add "TdeCredentialPassword", valid_595582
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_595583 = formData.getOrDefault("DBInstanceIdentifier")
  valid_595583 = validateParameter(valid_595583, JString, required = true,
                                 default = nil)
  if valid_595583 != nil:
    section.add "DBInstanceIdentifier", valid_595583
  var valid_595584 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_595584 = validateParameter(valid_595584, JString, required = true,
                                 default = nil)
  if valid_595584 != nil:
    section.add "DBSnapshotIdentifier", valid_595584
  var valid_595585 = formData.getOrDefault("DBName")
  valid_595585 = validateParameter(valid_595585, JString, required = false,
                                 default = nil)
  if valid_595585 != nil:
    section.add "DBName", valid_595585
  var valid_595586 = formData.getOrDefault("Iops")
  valid_595586 = validateParameter(valid_595586, JInt, required = false, default = nil)
  if valid_595586 != nil:
    section.add "Iops", valid_595586
  var valid_595587 = formData.getOrDefault("TdeCredentialArn")
  valid_595587 = validateParameter(valid_595587, JString, required = false,
                                 default = nil)
  if valid_595587 != nil:
    section.add "TdeCredentialArn", valid_595587
  var valid_595588 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_595588 = validateParameter(valid_595588, JArray, required = false,
                                 default = nil)
  if valid_595588 != nil:
    section.add "EnableCloudwatchLogsExports", valid_595588
  var valid_595589 = formData.getOrDefault("PubliclyAccessible")
  valid_595589 = validateParameter(valid_595589, JBool, required = false, default = nil)
  if valid_595589 != nil:
    section.add "PubliclyAccessible", valid_595589
  var valid_595590 = formData.getOrDefault("LicenseModel")
  valid_595590 = validateParameter(valid_595590, JString, required = false,
                                 default = nil)
  if valid_595590 != nil:
    section.add "LicenseModel", valid_595590
  var valid_595591 = formData.getOrDefault("Tags")
  valid_595591 = validateParameter(valid_595591, JArray, required = false,
                                 default = nil)
  if valid_595591 != nil:
    section.add "Tags", valid_595591
  var valid_595592 = formData.getOrDefault("DBSubnetGroupName")
  valid_595592 = validateParameter(valid_595592, JString, required = false,
                                 default = nil)
  if valid_595592 != nil:
    section.add "DBSubnetGroupName", valid_595592
  var valid_595593 = formData.getOrDefault("DomainIAMRoleName")
  valid_595593 = validateParameter(valid_595593, JString, required = false,
                                 default = nil)
  if valid_595593 != nil:
    section.add "DomainIAMRoleName", valid_595593
  var valid_595594 = formData.getOrDefault("OptionGroupName")
  valid_595594 = validateParameter(valid_595594, JString, required = false,
                                 default = nil)
  if valid_595594 != nil:
    section.add "OptionGroupName", valid_595594
  var valid_595595 = formData.getOrDefault("StorageType")
  valid_595595 = validateParameter(valid_595595, JString, required = false,
                                 default = nil)
  if valid_595595 != nil:
    section.add "StorageType", valid_595595
  var valid_595596 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_595596 = validateParameter(valid_595596, JBool, required = false, default = nil)
  if valid_595596 != nil:
    section.add "CopyTagsToSnapshot", valid_595596
  var valid_595597 = formData.getOrDefault("DeletionProtection")
  valid_595597 = validateParameter(valid_595597, JBool, required = false, default = nil)
  if valid_595597 != nil:
    section.add "DeletionProtection", valid_595597
  var valid_595598 = formData.getOrDefault("ProcessorFeatures")
  valid_595598 = validateParameter(valid_595598, JArray, required = false,
                                 default = nil)
  if valid_595598 != nil:
    section.add "ProcessorFeatures", valid_595598
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595599: Call_PostRestoreDBInstanceFromDBSnapshot_595559;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_595599.validator(path, query, header, formData, body)
  let scheme = call_595599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595599.url(scheme.get, call_595599.host, call_595599.base,
                         call_595599.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595599, url, valid)

proc call*(call_595600: Call_PostRestoreDBInstanceFromDBSnapshot_595559;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string; Port: int = 0;
          DBInstanceClass: string = ""; UseDefaultProcessorFeatures: bool = false;
          MultiAZ: bool = false; Domain: string = ""; DBParameterGroupName: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; Engine: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          DBName: string = ""; Iops: int = 0; TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "RestoreDBInstanceFromDBSnapshot";
          LicenseModel: string = ""; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          StorageType: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter is not specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_595601 = newJObject()
  var formData_595602 = newJObject()
  add(formData_595602, "Port", newJInt(Port))
  add(formData_595602, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_595602, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_595602, "MultiAZ", newJBool(MultiAZ))
  add(formData_595602, "Domain", newJString(Domain))
  add(formData_595602, "DBParameterGroupName", newJString(DBParameterGroupName))
  if VpcSecurityGroupIds != nil:
    formData_595602.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_595602, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_595602, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_595602, "Engine", newJString(Engine))
  add(formData_595602, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_595602, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_595602, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_595602, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(formData_595602, "DBName", newJString(DBName))
  add(formData_595602, "Iops", newJInt(Iops))
  add(formData_595602, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_595602.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_595602, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_595601, "Action", newJString(Action))
  add(formData_595602, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_595602.add "Tags", Tags
  add(formData_595602, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_595602, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_595602, "OptionGroupName", newJString(OptionGroupName))
  add(query_595601, "Version", newJString(Version))
  add(formData_595602, "StorageType", newJString(StorageType))
  add(formData_595602, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_595602, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_595602.add "ProcessorFeatures", ProcessorFeatures
  result = call_595600.call(nil, query_595601, nil, formData_595602, nil)

var postRestoreDBInstanceFromDBSnapshot* = Call_PostRestoreDBInstanceFromDBSnapshot_595559(
    name: "postRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_PostRestoreDBInstanceFromDBSnapshot_595560, base: "/",
    url: url_PostRestoreDBInstanceFromDBSnapshot_595561,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromDBSnapshot_595516 = ref object of OpenApiRestCall_590348
proc url_GetRestoreDBInstanceFromDBSnapshot_595518(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBInstanceFromDBSnapshot_595517(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter is not specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_595519 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_595519 = validateParameter(valid_595519, JBool, required = false, default = nil)
  if valid_595519 != nil:
    section.add "UseDefaultProcessorFeatures", valid_595519
  var valid_595520 = query.getOrDefault("DBName")
  valid_595520 = validateParameter(valid_595520, JString, required = false,
                                 default = nil)
  if valid_595520 != nil:
    section.add "DBName", valid_595520
  var valid_595521 = query.getOrDefault("TdeCredentialPassword")
  valid_595521 = validateParameter(valid_595521, JString, required = false,
                                 default = nil)
  if valid_595521 != nil:
    section.add "TdeCredentialPassword", valid_595521
  var valid_595522 = query.getOrDefault("DeletionProtection")
  valid_595522 = validateParameter(valid_595522, JBool, required = false, default = nil)
  if valid_595522 != nil:
    section.add "DeletionProtection", valid_595522
  var valid_595523 = query.getOrDefault("Engine")
  valid_595523 = validateParameter(valid_595523, JString, required = false,
                                 default = nil)
  if valid_595523 != nil:
    section.add "Engine", valid_595523
  var valid_595524 = query.getOrDefault("CopyTagsToSnapshot")
  valid_595524 = validateParameter(valid_595524, JBool, required = false, default = nil)
  if valid_595524 != nil:
    section.add "CopyTagsToSnapshot", valid_595524
  var valid_595525 = query.getOrDefault("DBParameterGroupName")
  valid_595525 = validateParameter(valid_595525, JString, required = false,
                                 default = nil)
  if valid_595525 != nil:
    section.add "DBParameterGroupName", valid_595525
  var valid_595526 = query.getOrDefault("Tags")
  valid_595526 = validateParameter(valid_595526, JArray, required = false,
                                 default = nil)
  if valid_595526 != nil:
    section.add "Tags", valid_595526
  var valid_595527 = query.getOrDefault("LicenseModel")
  valid_595527 = validateParameter(valid_595527, JString, required = false,
                                 default = nil)
  if valid_595527 != nil:
    section.add "LicenseModel", valid_595527
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_595528 = query.getOrDefault("DBInstanceIdentifier")
  valid_595528 = validateParameter(valid_595528, JString, required = true,
                                 default = nil)
  if valid_595528 != nil:
    section.add "DBInstanceIdentifier", valid_595528
  var valid_595529 = query.getOrDefault("DBSnapshotIdentifier")
  valid_595529 = validateParameter(valid_595529, JString, required = true,
                                 default = nil)
  if valid_595529 != nil:
    section.add "DBSnapshotIdentifier", valid_595529
  var valid_595530 = query.getOrDefault("TdeCredentialArn")
  valid_595530 = validateParameter(valid_595530, JString, required = false,
                                 default = nil)
  if valid_595530 != nil:
    section.add "TdeCredentialArn", valid_595530
  var valid_595531 = query.getOrDefault("ProcessorFeatures")
  valid_595531 = validateParameter(valid_595531, JArray, required = false,
                                 default = nil)
  if valid_595531 != nil:
    section.add "ProcessorFeatures", valid_595531
  var valid_595532 = query.getOrDefault("StorageType")
  valid_595532 = validateParameter(valid_595532, JString, required = false,
                                 default = nil)
  if valid_595532 != nil:
    section.add "StorageType", valid_595532
  var valid_595533 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_595533 = validateParameter(valid_595533, JBool, required = false, default = nil)
  if valid_595533 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_595533
  var valid_595534 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_595534 = validateParameter(valid_595534, JArray, required = false,
                                 default = nil)
  if valid_595534 != nil:
    section.add "EnableCloudwatchLogsExports", valid_595534
  var valid_595535 = query.getOrDefault("Action")
  valid_595535 = validateParameter(valid_595535, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_595535 != nil:
    section.add "Action", valid_595535
  var valid_595536 = query.getOrDefault("MultiAZ")
  valid_595536 = validateParameter(valid_595536, JBool, required = false, default = nil)
  if valid_595536 != nil:
    section.add "MultiAZ", valid_595536
  var valid_595537 = query.getOrDefault("Port")
  valid_595537 = validateParameter(valid_595537, JInt, required = false, default = nil)
  if valid_595537 != nil:
    section.add "Port", valid_595537
  var valid_595538 = query.getOrDefault("Domain")
  valid_595538 = validateParameter(valid_595538, JString, required = false,
                                 default = nil)
  if valid_595538 != nil:
    section.add "Domain", valid_595538
  var valid_595539 = query.getOrDefault("VpcSecurityGroupIds")
  valid_595539 = validateParameter(valid_595539, JArray, required = false,
                                 default = nil)
  if valid_595539 != nil:
    section.add "VpcSecurityGroupIds", valid_595539
  var valid_595540 = query.getOrDefault("AvailabilityZone")
  valid_595540 = validateParameter(valid_595540, JString, required = false,
                                 default = nil)
  if valid_595540 != nil:
    section.add "AvailabilityZone", valid_595540
  var valid_595541 = query.getOrDefault("OptionGroupName")
  valid_595541 = validateParameter(valid_595541, JString, required = false,
                                 default = nil)
  if valid_595541 != nil:
    section.add "OptionGroupName", valid_595541
  var valid_595542 = query.getOrDefault("DBSubnetGroupName")
  valid_595542 = validateParameter(valid_595542, JString, required = false,
                                 default = nil)
  if valid_595542 != nil:
    section.add "DBSubnetGroupName", valid_595542
  var valid_595543 = query.getOrDefault("Version")
  valid_595543 = validateParameter(valid_595543, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595543 != nil:
    section.add "Version", valid_595543
  var valid_595544 = query.getOrDefault("DBInstanceClass")
  valid_595544 = validateParameter(valid_595544, JString, required = false,
                                 default = nil)
  if valid_595544 != nil:
    section.add "DBInstanceClass", valid_595544
  var valid_595545 = query.getOrDefault("PubliclyAccessible")
  valid_595545 = validateParameter(valid_595545, JBool, required = false, default = nil)
  if valid_595545 != nil:
    section.add "PubliclyAccessible", valid_595545
  var valid_595546 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_595546 = validateParameter(valid_595546, JBool, required = false, default = nil)
  if valid_595546 != nil:
    section.add "AutoMinorVersionUpgrade", valid_595546
  var valid_595547 = query.getOrDefault("Iops")
  valid_595547 = validateParameter(valid_595547, JInt, required = false, default = nil)
  if valid_595547 != nil:
    section.add "Iops", valid_595547
  var valid_595548 = query.getOrDefault("DomainIAMRoleName")
  valid_595548 = validateParameter(valid_595548, JString, required = false,
                                 default = nil)
  if valid_595548 != nil:
    section.add "DomainIAMRoleName", valid_595548
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595549 = header.getOrDefault("X-Amz-Signature")
  valid_595549 = validateParameter(valid_595549, JString, required = false,
                                 default = nil)
  if valid_595549 != nil:
    section.add "X-Amz-Signature", valid_595549
  var valid_595550 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595550 = validateParameter(valid_595550, JString, required = false,
                                 default = nil)
  if valid_595550 != nil:
    section.add "X-Amz-Content-Sha256", valid_595550
  var valid_595551 = header.getOrDefault("X-Amz-Date")
  valid_595551 = validateParameter(valid_595551, JString, required = false,
                                 default = nil)
  if valid_595551 != nil:
    section.add "X-Amz-Date", valid_595551
  var valid_595552 = header.getOrDefault("X-Amz-Credential")
  valid_595552 = validateParameter(valid_595552, JString, required = false,
                                 default = nil)
  if valid_595552 != nil:
    section.add "X-Amz-Credential", valid_595552
  var valid_595553 = header.getOrDefault("X-Amz-Security-Token")
  valid_595553 = validateParameter(valid_595553, JString, required = false,
                                 default = nil)
  if valid_595553 != nil:
    section.add "X-Amz-Security-Token", valid_595553
  var valid_595554 = header.getOrDefault("X-Amz-Algorithm")
  valid_595554 = validateParameter(valid_595554, JString, required = false,
                                 default = nil)
  if valid_595554 != nil:
    section.add "X-Amz-Algorithm", valid_595554
  var valid_595555 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595555 = validateParameter(valid_595555, JString, required = false,
                                 default = nil)
  if valid_595555 != nil:
    section.add "X-Amz-SignedHeaders", valid_595555
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595556: Call_GetRestoreDBInstanceFromDBSnapshot_595516;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_595556.validator(path, query, header, formData, body)
  let scheme = call_595556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595556.url(scheme.get, call_595556.host, call_595556.base,
                         call_595556.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595556, url, valid)

proc call*(call_595557: Call_GetRestoreDBInstanceFromDBSnapshot_595516;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          UseDefaultProcessorFeatures: bool = false; DBName: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          Engine: string = ""; CopyTagsToSnapshot: bool = false;
          DBParameterGroupName: string = ""; Tags: JsonNode = nil;
          LicenseModel: string = ""; TdeCredentialArn: string = "";
          ProcessorFeatures: JsonNode = nil; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceFromDBSnapshot"; MultiAZ: bool = false;
          Port: int = 0; Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31";
          DBInstanceClass: string = ""; PubliclyAccessible: bool = false;
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter is not specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_595558 = newJObject()
  add(query_595558, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_595558, "DBName", newJString(DBName))
  add(query_595558, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_595558, "DeletionProtection", newJBool(DeletionProtection))
  add(query_595558, "Engine", newJString(Engine))
  add(query_595558, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_595558, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_595558.add "Tags", Tags
  add(query_595558, "LicenseModel", newJString(LicenseModel))
  add(query_595558, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_595558, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_595558, "TdeCredentialArn", newJString(TdeCredentialArn))
  if ProcessorFeatures != nil:
    query_595558.add "ProcessorFeatures", ProcessorFeatures
  add(query_595558, "StorageType", newJString(StorageType))
  add(query_595558, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_595558.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_595558, "Action", newJString(Action))
  add(query_595558, "MultiAZ", newJBool(MultiAZ))
  add(query_595558, "Port", newJInt(Port))
  add(query_595558, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_595558.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_595558, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_595558, "OptionGroupName", newJString(OptionGroupName))
  add(query_595558, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_595558, "Version", newJString(Version))
  add(query_595558, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_595558, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_595558, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_595558, "Iops", newJInt(Iops))
  add(query_595558, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_595557.call(nil, query_595558, nil, nil, nil)

var getRestoreDBInstanceFromDBSnapshot* = Call_GetRestoreDBInstanceFromDBSnapshot_595516(
    name: "getRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_GetRestoreDBInstanceFromDBSnapshot_595517, base: "/",
    url: url_GetRestoreDBInstanceFromDBSnapshot_595518,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromS3_595661 = ref object of OpenApiRestCall_590348
proc url_PostRestoreDBInstanceFromS3_595663(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBInstanceFromS3_595662(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595664 = query.getOrDefault("Action")
  valid_595664 = validateParameter(valid_595664, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_595664 != nil:
    section.add "Action", valid_595664
  var valid_595665 = query.getOrDefault("Version")
  valid_595665 = validateParameter(valid_595665, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595665 != nil:
    section.add "Version", valid_595665
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_595666 = header.getOrDefault("X-Amz-Security-Token")
  valid_595666 = validateParameter(valid_595666, JString, required = false,
                                 default = nil)
  if valid_595666 != nil:
    section.add "X-Amz-Security-Token", valid_595666
  var valid_595667 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595667 = validateParameter(valid_595667, JString, required = false,
                                 default = nil)
  if valid_595667 != nil:
    section.add "X-Amz-SignedHeaders", valid_595667
  var valid_595668 = header.getOrDefault("X-Amz-Signature")
  valid_595668 = validateParameter(valid_595668, JString, required = false,
                                 default = nil)
  if valid_595668 != nil:
    section.add "X-Amz-Signature", valid_595668
  var valid_595669 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595669 = validateParameter(valid_595669, JString, required = false,
                                 default = nil)
  if valid_595669 != nil:
    section.add "X-Amz-Content-Sha256", valid_595669
  var valid_595670 = header.getOrDefault("X-Amz-Date")
  valid_595670 = validateParameter(valid_595670, JString, required = false,
                                 default = nil)
  if valid_595670 != nil:
    section.add "X-Amz-Date", valid_595670
  var valid_595671 = header.getOrDefault("X-Amz-Credential")
  valid_595671 = validateParameter(valid_595671, JString, required = false,
                                 default = nil)
  if valid_595671 != nil:
    section.add "X-Amz-Credential", valid_595671
  var valid_595672 = header.getOrDefault("X-Amz-Algorithm")
  valid_595672 = validateParameter(valid_595672, JString, required = false,
                                 default = nil)
  if valid_595672 != nil:
    section.add "X-Amz-Algorithm", valid_595672
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 is not supported on the db.t2.micro DB instance class. </p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `S3IngestionRoleArn` field"
  var valid_595673 = formData.getOrDefault("S3IngestionRoleArn")
  valid_595673 = validateParameter(valid_595673, JString, required = true,
                                 default = nil)
  if valid_595673 != nil:
    section.add "S3IngestionRoleArn", valid_595673
  var valid_595674 = formData.getOrDefault("Port")
  valid_595674 = validateParameter(valid_595674, JInt, required = false, default = nil)
  if valid_595674 != nil:
    section.add "Port", valid_595674
  var valid_595675 = formData.getOrDefault("MultiAZ")
  valid_595675 = validateParameter(valid_595675, JBool, required = false, default = nil)
  if valid_595675 != nil:
    section.add "MultiAZ", valid_595675
  var valid_595676 = formData.getOrDefault("MasterUsername")
  valid_595676 = validateParameter(valid_595676, JString, required = false,
                                 default = nil)
  if valid_595676 != nil:
    section.add "MasterUsername", valid_595676
  var valid_595677 = formData.getOrDefault("MonitoringRoleArn")
  valid_595677 = validateParameter(valid_595677, JString, required = false,
                                 default = nil)
  if valid_595677 != nil:
    section.add "MonitoringRoleArn", valid_595677
  var valid_595678 = formData.getOrDefault("MonitoringInterval")
  valid_595678 = validateParameter(valid_595678, JInt, required = false, default = nil)
  if valid_595678 != nil:
    section.add "MonitoringInterval", valid_595678
  var valid_595679 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_595679 = validateParameter(valid_595679, JArray, required = false,
                                 default = nil)
  if valid_595679 != nil:
    section.add "VpcSecurityGroupIds", valid_595679
  var valid_595680 = formData.getOrDefault("AvailabilityZone")
  valid_595680 = validateParameter(valid_595680, JString, required = false,
                                 default = nil)
  if valid_595680 != nil:
    section.add "AvailabilityZone", valid_595680
  var valid_595681 = formData.getOrDefault("EnablePerformanceInsights")
  valid_595681 = validateParameter(valid_595681, JBool, required = false, default = nil)
  if valid_595681 != nil:
    section.add "EnablePerformanceInsights", valid_595681
  var valid_595682 = formData.getOrDefault("DBInstanceIdentifier")
  valid_595682 = validateParameter(valid_595682, JString, required = true,
                                 default = nil)
  if valid_595682 != nil:
    section.add "DBInstanceIdentifier", valid_595682
  var valid_595683 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_595683 = validateParameter(valid_595683, JArray, required = false,
                                 default = nil)
  if valid_595683 != nil:
    section.add "EnableCloudwatchLogsExports", valid_595683
  var valid_595684 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_595684 = validateParameter(valid_595684, JInt, required = false, default = nil)
  if valid_595684 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_595684
  var valid_595685 = formData.getOrDefault("DBSubnetGroupName")
  valid_595685 = validateParameter(valid_595685, JString, required = false,
                                 default = nil)
  if valid_595685 != nil:
    section.add "DBSubnetGroupName", valid_595685
  var valid_595686 = formData.getOrDefault("StorageType")
  valid_595686 = validateParameter(valid_595686, JString, required = false,
                                 default = nil)
  if valid_595686 != nil:
    section.add "StorageType", valid_595686
  var valid_595687 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_595687 = validateParameter(valid_595687, JBool, required = false, default = nil)
  if valid_595687 != nil:
    section.add "CopyTagsToSnapshot", valid_595687
  var valid_595688 = formData.getOrDefault("DeletionProtection")
  valid_595688 = validateParameter(valid_595688, JBool, required = false, default = nil)
  if valid_595688 != nil:
    section.add "DeletionProtection", valid_595688
  var valid_595689 = formData.getOrDefault("ProcessorFeatures")
  valid_595689 = validateParameter(valid_595689, JArray, required = false,
                                 default = nil)
  if valid_595689 != nil:
    section.add "ProcessorFeatures", valid_595689
  var valid_595690 = formData.getOrDefault("AllocatedStorage")
  valid_595690 = validateParameter(valid_595690, JInt, required = false, default = nil)
  if valid_595690 != nil:
    section.add "AllocatedStorage", valid_595690
  var valid_595691 = formData.getOrDefault("S3Prefix")
  valid_595691 = validateParameter(valid_595691, JString, required = false,
                                 default = nil)
  if valid_595691 != nil:
    section.add "S3Prefix", valid_595691
  var valid_595692 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_595692 = validateParameter(valid_595692, JString, required = false,
                                 default = nil)
  if valid_595692 != nil:
    section.add "PreferredMaintenanceWindow", valid_595692
  var valid_595693 = formData.getOrDefault("DBInstanceClass")
  valid_595693 = validateParameter(valid_595693, JString, required = true,
                                 default = nil)
  if valid_595693 != nil:
    section.add "DBInstanceClass", valid_595693
  var valid_595694 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_595694 = validateParameter(valid_595694, JBool, required = false, default = nil)
  if valid_595694 != nil:
    section.add "UseDefaultProcessorFeatures", valid_595694
  var valid_595695 = formData.getOrDefault("PreferredBackupWindow")
  valid_595695 = validateParameter(valid_595695, JString, required = false,
                                 default = nil)
  if valid_595695 != nil:
    section.add "PreferredBackupWindow", valid_595695
  var valid_595696 = formData.getOrDefault("MasterUserPassword")
  valid_595696 = validateParameter(valid_595696, JString, required = false,
                                 default = nil)
  if valid_595696 != nil:
    section.add "MasterUserPassword", valid_595696
  var valid_595697 = formData.getOrDefault("SourceEngine")
  valid_595697 = validateParameter(valid_595697, JString, required = true,
                                 default = nil)
  if valid_595697 != nil:
    section.add "SourceEngine", valid_595697
  var valid_595698 = formData.getOrDefault("DBParameterGroupName")
  valid_595698 = validateParameter(valid_595698, JString, required = false,
                                 default = nil)
  if valid_595698 != nil:
    section.add "DBParameterGroupName", valid_595698
  var valid_595699 = formData.getOrDefault("EngineVersion")
  valid_595699 = validateParameter(valid_595699, JString, required = false,
                                 default = nil)
  if valid_595699 != nil:
    section.add "EngineVersion", valid_595699
  var valid_595700 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_595700 = validateParameter(valid_595700, JBool, required = false, default = nil)
  if valid_595700 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_595700
  var valid_595701 = formData.getOrDefault("BackupRetentionPeriod")
  valid_595701 = validateParameter(valid_595701, JInt, required = false, default = nil)
  if valid_595701 != nil:
    section.add "BackupRetentionPeriod", valid_595701
  var valid_595702 = formData.getOrDefault("KmsKeyId")
  valid_595702 = validateParameter(valid_595702, JString, required = false,
                                 default = nil)
  if valid_595702 != nil:
    section.add "KmsKeyId", valid_595702
  var valid_595703 = formData.getOrDefault("Engine")
  valid_595703 = validateParameter(valid_595703, JString, required = true,
                                 default = nil)
  if valid_595703 != nil:
    section.add "Engine", valid_595703
  var valid_595704 = formData.getOrDefault("S3BucketName")
  valid_595704 = validateParameter(valid_595704, JString, required = true,
                                 default = nil)
  if valid_595704 != nil:
    section.add "S3BucketName", valid_595704
  var valid_595705 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_595705 = validateParameter(valid_595705, JBool, required = false, default = nil)
  if valid_595705 != nil:
    section.add "AutoMinorVersionUpgrade", valid_595705
  var valid_595706 = formData.getOrDefault("DBName")
  valid_595706 = validateParameter(valid_595706, JString, required = false,
                                 default = nil)
  if valid_595706 != nil:
    section.add "DBName", valid_595706
  var valid_595707 = formData.getOrDefault("Iops")
  valid_595707 = validateParameter(valid_595707, JInt, required = false, default = nil)
  if valid_595707 != nil:
    section.add "Iops", valid_595707
  var valid_595708 = formData.getOrDefault("PubliclyAccessible")
  valid_595708 = validateParameter(valid_595708, JBool, required = false, default = nil)
  if valid_595708 != nil:
    section.add "PubliclyAccessible", valid_595708
  var valid_595709 = formData.getOrDefault("SourceEngineVersion")
  valid_595709 = validateParameter(valid_595709, JString, required = true,
                                 default = nil)
  if valid_595709 != nil:
    section.add "SourceEngineVersion", valid_595709
  var valid_595710 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_595710 = validateParameter(valid_595710, JString, required = false,
                                 default = nil)
  if valid_595710 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_595710
  var valid_595711 = formData.getOrDefault("LicenseModel")
  valid_595711 = validateParameter(valid_595711, JString, required = false,
                                 default = nil)
  if valid_595711 != nil:
    section.add "LicenseModel", valid_595711
  var valid_595712 = formData.getOrDefault("Tags")
  valid_595712 = validateParameter(valid_595712, JArray, required = false,
                                 default = nil)
  if valid_595712 != nil:
    section.add "Tags", valid_595712
  var valid_595713 = formData.getOrDefault("OptionGroupName")
  valid_595713 = validateParameter(valid_595713, JString, required = false,
                                 default = nil)
  if valid_595713 != nil:
    section.add "OptionGroupName", valid_595713
  var valid_595714 = formData.getOrDefault("DBSecurityGroups")
  valid_595714 = validateParameter(valid_595714, JArray, required = false,
                                 default = nil)
  if valid_595714 != nil:
    section.add "DBSecurityGroups", valid_595714
  var valid_595715 = formData.getOrDefault("StorageEncrypted")
  valid_595715 = validateParameter(valid_595715, JBool, required = false, default = nil)
  if valid_595715 != nil:
    section.add "StorageEncrypted", valid_595715
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595716: Call_PostRestoreDBInstanceFromS3_595661; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_595716.validator(path, query, header, formData, body)
  let scheme = call_595716.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595716.url(scheme.get, call_595716.host, call_595716.base,
                         call_595716.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595716, url, valid)

proc call*(call_595717: Call_PostRestoreDBInstanceFromS3_595661;
          S3IngestionRoleArn: string; DBInstanceIdentifier: string;
          DBInstanceClass: string; SourceEngine: string; Engine: string;
          S3BucketName: string; SourceEngineVersion: string; Port: int = 0;
          MultiAZ: bool = false; MasterUsername: string = "";
          MonitoringRoleArn: string = ""; MonitoringInterval: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; AvailabilityZone: string = "";
          EnablePerformanceInsights: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceFromS3";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; StorageType: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          ProcessorFeatures: JsonNode = nil; AllocatedStorage: int = 0;
          S3Prefix: string = ""; PreferredMaintenanceWindow: string = "";
          UseDefaultProcessorFeatures: bool = false;
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          DBParameterGroupName: string = ""; EngineVersion: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          AutoMinorVersionUpgrade: bool = false; DBName: string = ""; Iops: int = 0;
          PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; OptionGroupName: string = "";
          Version: string = "2014-10-31"; DBSecurityGroups: JsonNode = nil;
          StorageEncrypted: bool = false): Recallable =
  ## postRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 is not supported on the db.t2.micro DB instance class. </p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  var query_595718 = newJObject()
  var formData_595719 = newJObject()
  add(formData_595719, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(formData_595719, "Port", newJInt(Port))
  add(formData_595719, "MultiAZ", newJBool(MultiAZ))
  add(formData_595719, "MasterUsername", newJString(MasterUsername))
  add(formData_595719, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_595719, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_595719.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_595719, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_595719, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_595719, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  if EnableCloudwatchLogsExports != nil:
    formData_595719.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_595718, "Action", newJString(Action))
  add(formData_595719, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_595719, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_595719, "StorageType", newJString(StorageType))
  add(formData_595719, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_595719, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_595719.add "ProcessorFeatures", ProcessorFeatures
  add(formData_595719, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_595719, "S3Prefix", newJString(S3Prefix))
  add(formData_595719, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_595719, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_595719, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_595719, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_595719, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_595719, "SourceEngine", newJString(SourceEngine))
  add(formData_595719, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_595719, "EngineVersion", newJString(EngineVersion))
  add(formData_595719, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_595719, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_595719, "KmsKeyId", newJString(KmsKeyId))
  add(formData_595719, "Engine", newJString(Engine))
  add(formData_595719, "S3BucketName", newJString(S3BucketName))
  add(formData_595719, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_595719, "DBName", newJString(DBName))
  add(formData_595719, "Iops", newJInt(Iops))
  add(formData_595719, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_595719, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(formData_595719, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_595719, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_595719.add "Tags", Tags
  add(formData_595719, "OptionGroupName", newJString(OptionGroupName))
  add(query_595718, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_595719.add "DBSecurityGroups", DBSecurityGroups
  add(formData_595719, "StorageEncrypted", newJBool(StorageEncrypted))
  result = call_595717.call(nil, query_595718, nil, formData_595719, nil)

var postRestoreDBInstanceFromS3* = Call_PostRestoreDBInstanceFromS3_595661(
    name: "postRestoreDBInstanceFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_PostRestoreDBInstanceFromS3_595662, base: "/",
    url: url_PostRestoreDBInstanceFromS3_595663,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromS3_595603 = ref object of OpenApiRestCall_590348
proc url_GetRestoreDBInstanceFromS3_595605(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBInstanceFromS3_595604(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   Action: JString (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 is not supported on the db.t2.micro DB instance class. </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_595606 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_595606 = validateParameter(valid_595606, JBool, required = false, default = nil)
  if valid_595606 != nil:
    section.add "UseDefaultProcessorFeatures", valid_595606
  assert query != nil, "query argument is necessary due to required `SourceEngineVersion` field"
  var valid_595607 = query.getOrDefault("SourceEngineVersion")
  valid_595607 = validateParameter(valid_595607, JString, required = true,
                                 default = nil)
  if valid_595607 != nil:
    section.add "SourceEngineVersion", valid_595607
  var valid_595608 = query.getOrDefault("SourceEngine")
  valid_595608 = validateParameter(valid_595608, JString, required = true,
                                 default = nil)
  if valid_595608 != nil:
    section.add "SourceEngine", valid_595608
  var valid_595609 = query.getOrDefault("Engine")
  valid_595609 = validateParameter(valid_595609, JString, required = true,
                                 default = nil)
  if valid_595609 != nil:
    section.add "Engine", valid_595609
  var valid_595610 = query.getOrDefault("CopyTagsToSnapshot")
  valid_595610 = validateParameter(valid_595610, JBool, required = false, default = nil)
  if valid_595610 != nil:
    section.add "CopyTagsToSnapshot", valid_595610
  var valid_595611 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_595611 = validateParameter(valid_595611, JInt, required = false, default = nil)
  if valid_595611 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_595611
  var valid_595612 = query.getOrDefault("MonitoringInterval")
  valid_595612 = validateParameter(valid_595612, JInt, required = false, default = nil)
  if valid_595612 != nil:
    section.add "MonitoringInterval", valid_595612
  var valid_595613 = query.getOrDefault("KmsKeyId")
  valid_595613 = validateParameter(valid_595613, JString, required = false,
                                 default = nil)
  if valid_595613 != nil:
    section.add "KmsKeyId", valid_595613
  var valid_595614 = query.getOrDefault("MonitoringRoleArn")
  valid_595614 = validateParameter(valid_595614, JString, required = false,
                                 default = nil)
  if valid_595614 != nil:
    section.add "MonitoringRoleArn", valid_595614
  var valid_595615 = query.getOrDefault("S3BucketName")
  valid_595615 = validateParameter(valid_595615, JString, required = true,
                                 default = nil)
  if valid_595615 != nil:
    section.add "S3BucketName", valid_595615
  var valid_595616 = query.getOrDefault("ProcessorFeatures")
  valid_595616 = validateParameter(valid_595616, JArray, required = false,
                                 default = nil)
  if valid_595616 != nil:
    section.add "ProcessorFeatures", valid_595616
  var valid_595617 = query.getOrDefault("MasterUsername")
  valid_595617 = validateParameter(valid_595617, JString, required = false,
                                 default = nil)
  if valid_595617 != nil:
    section.add "MasterUsername", valid_595617
  var valid_595618 = query.getOrDefault("BackupRetentionPeriod")
  valid_595618 = validateParameter(valid_595618, JInt, required = false, default = nil)
  if valid_595618 != nil:
    section.add "BackupRetentionPeriod", valid_595618
  var valid_595619 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_595619 = validateParameter(valid_595619, JArray, required = false,
                                 default = nil)
  if valid_595619 != nil:
    section.add "EnableCloudwatchLogsExports", valid_595619
  var valid_595620 = query.getOrDefault("EngineVersion")
  valid_595620 = validateParameter(valid_595620, JString, required = false,
                                 default = nil)
  if valid_595620 != nil:
    section.add "EngineVersion", valid_595620
  var valid_595621 = query.getOrDefault("Action")
  valid_595621 = validateParameter(valid_595621, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_595621 != nil:
    section.add "Action", valid_595621
  var valid_595622 = query.getOrDefault("VpcSecurityGroupIds")
  valid_595622 = validateParameter(valid_595622, JArray, required = false,
                                 default = nil)
  if valid_595622 != nil:
    section.add "VpcSecurityGroupIds", valid_595622
  var valid_595623 = query.getOrDefault("AllocatedStorage")
  valid_595623 = validateParameter(valid_595623, JInt, required = false, default = nil)
  if valid_595623 != nil:
    section.add "AllocatedStorage", valid_595623
  var valid_595624 = query.getOrDefault("EnablePerformanceInsights")
  valid_595624 = validateParameter(valid_595624, JBool, required = false, default = nil)
  if valid_595624 != nil:
    section.add "EnablePerformanceInsights", valid_595624
  var valid_595625 = query.getOrDefault("PubliclyAccessible")
  valid_595625 = validateParameter(valid_595625, JBool, required = false, default = nil)
  if valid_595625 != nil:
    section.add "PubliclyAccessible", valid_595625
  var valid_595626 = query.getOrDefault("S3IngestionRoleArn")
  valid_595626 = validateParameter(valid_595626, JString, required = true,
                                 default = nil)
  if valid_595626 != nil:
    section.add "S3IngestionRoleArn", valid_595626
  var valid_595627 = query.getOrDefault("DBName")
  valid_595627 = validateParameter(valid_595627, JString, required = false,
                                 default = nil)
  if valid_595627 != nil:
    section.add "DBName", valid_595627
  var valid_595628 = query.getOrDefault("StorageEncrypted")
  valid_595628 = validateParameter(valid_595628, JBool, required = false, default = nil)
  if valid_595628 != nil:
    section.add "StorageEncrypted", valid_595628
  var valid_595629 = query.getOrDefault("DBParameterGroupName")
  valid_595629 = validateParameter(valid_595629, JString, required = false,
                                 default = nil)
  if valid_595629 != nil:
    section.add "DBParameterGroupName", valid_595629
  var valid_595630 = query.getOrDefault("DeletionProtection")
  valid_595630 = validateParameter(valid_595630, JBool, required = false, default = nil)
  if valid_595630 != nil:
    section.add "DeletionProtection", valid_595630
  var valid_595631 = query.getOrDefault("S3Prefix")
  valid_595631 = validateParameter(valid_595631, JString, required = false,
                                 default = nil)
  if valid_595631 != nil:
    section.add "S3Prefix", valid_595631
  var valid_595632 = query.getOrDefault("Tags")
  valid_595632 = validateParameter(valid_595632, JArray, required = false,
                                 default = nil)
  if valid_595632 != nil:
    section.add "Tags", valid_595632
  var valid_595633 = query.getOrDefault("LicenseModel")
  valid_595633 = validateParameter(valid_595633, JString, required = false,
                                 default = nil)
  if valid_595633 != nil:
    section.add "LicenseModel", valid_595633
  var valid_595634 = query.getOrDefault("DBInstanceIdentifier")
  valid_595634 = validateParameter(valid_595634, JString, required = true,
                                 default = nil)
  if valid_595634 != nil:
    section.add "DBInstanceIdentifier", valid_595634
  var valid_595635 = query.getOrDefault("StorageType")
  valid_595635 = validateParameter(valid_595635, JString, required = false,
                                 default = nil)
  if valid_595635 != nil:
    section.add "StorageType", valid_595635
  var valid_595636 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_595636 = validateParameter(valid_595636, JBool, required = false, default = nil)
  if valid_595636 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_595636
  var valid_595637 = query.getOrDefault("MultiAZ")
  valid_595637 = validateParameter(valid_595637, JBool, required = false, default = nil)
  if valid_595637 != nil:
    section.add "MultiAZ", valid_595637
  var valid_595638 = query.getOrDefault("DBSecurityGroups")
  valid_595638 = validateParameter(valid_595638, JArray, required = false,
                                 default = nil)
  if valid_595638 != nil:
    section.add "DBSecurityGroups", valid_595638
  var valid_595639 = query.getOrDefault("Port")
  valid_595639 = validateParameter(valid_595639, JInt, required = false, default = nil)
  if valid_595639 != nil:
    section.add "Port", valid_595639
  var valid_595640 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_595640 = validateParameter(valid_595640, JString, required = false,
                                 default = nil)
  if valid_595640 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_595640
  var valid_595641 = query.getOrDefault("MasterUserPassword")
  valid_595641 = validateParameter(valid_595641, JString, required = false,
                                 default = nil)
  if valid_595641 != nil:
    section.add "MasterUserPassword", valid_595641
  var valid_595642 = query.getOrDefault("AvailabilityZone")
  valid_595642 = validateParameter(valid_595642, JString, required = false,
                                 default = nil)
  if valid_595642 != nil:
    section.add "AvailabilityZone", valid_595642
  var valid_595643 = query.getOrDefault("OptionGroupName")
  valid_595643 = validateParameter(valid_595643, JString, required = false,
                                 default = nil)
  if valid_595643 != nil:
    section.add "OptionGroupName", valid_595643
  var valid_595644 = query.getOrDefault("DBSubnetGroupName")
  valid_595644 = validateParameter(valid_595644, JString, required = false,
                                 default = nil)
  if valid_595644 != nil:
    section.add "DBSubnetGroupName", valid_595644
  var valid_595645 = query.getOrDefault("PreferredBackupWindow")
  valid_595645 = validateParameter(valid_595645, JString, required = false,
                                 default = nil)
  if valid_595645 != nil:
    section.add "PreferredBackupWindow", valid_595645
  var valid_595646 = query.getOrDefault("DBInstanceClass")
  valid_595646 = validateParameter(valid_595646, JString, required = true,
                                 default = nil)
  if valid_595646 != nil:
    section.add "DBInstanceClass", valid_595646
  var valid_595647 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_595647 = validateParameter(valid_595647, JString, required = false,
                                 default = nil)
  if valid_595647 != nil:
    section.add "PreferredMaintenanceWindow", valid_595647
  var valid_595648 = query.getOrDefault("Version")
  valid_595648 = validateParameter(valid_595648, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595648 != nil:
    section.add "Version", valid_595648
  var valid_595649 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_595649 = validateParameter(valid_595649, JBool, required = false, default = nil)
  if valid_595649 != nil:
    section.add "AutoMinorVersionUpgrade", valid_595649
  var valid_595650 = query.getOrDefault("Iops")
  valid_595650 = validateParameter(valid_595650, JInt, required = false, default = nil)
  if valid_595650 != nil:
    section.add "Iops", valid_595650
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_595651 = header.getOrDefault("X-Amz-Security-Token")
  valid_595651 = validateParameter(valid_595651, JString, required = false,
                                 default = nil)
  if valid_595651 != nil:
    section.add "X-Amz-Security-Token", valid_595651
  var valid_595652 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595652 = validateParameter(valid_595652, JString, required = false,
                                 default = nil)
  if valid_595652 != nil:
    section.add "X-Amz-SignedHeaders", valid_595652
  var valid_595653 = header.getOrDefault("X-Amz-Signature")
  valid_595653 = validateParameter(valid_595653, JString, required = false,
                                 default = nil)
  if valid_595653 != nil:
    section.add "X-Amz-Signature", valid_595653
  var valid_595654 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595654 = validateParameter(valid_595654, JString, required = false,
                                 default = nil)
  if valid_595654 != nil:
    section.add "X-Amz-Content-Sha256", valid_595654
  var valid_595655 = header.getOrDefault("X-Amz-Date")
  valid_595655 = validateParameter(valid_595655, JString, required = false,
                                 default = nil)
  if valid_595655 != nil:
    section.add "X-Amz-Date", valid_595655
  var valid_595656 = header.getOrDefault("X-Amz-Credential")
  valid_595656 = validateParameter(valid_595656, JString, required = false,
                                 default = nil)
  if valid_595656 != nil:
    section.add "X-Amz-Credential", valid_595656
  var valid_595657 = header.getOrDefault("X-Amz-Algorithm")
  valid_595657 = validateParameter(valid_595657, JString, required = false,
                                 default = nil)
  if valid_595657 != nil:
    section.add "X-Amz-Algorithm", valid_595657
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595658: Call_GetRestoreDBInstanceFromS3_595603; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_595658.validator(path, query, header, formData, body)
  let scheme = call_595658.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595658.url(scheme.get, call_595658.host, call_595658.base,
                         call_595658.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595658, url, valid)

proc call*(call_595659: Call_GetRestoreDBInstanceFromS3_595603;
          SourceEngineVersion: string; SourceEngine: string; Engine: string;
          S3BucketName: string; S3IngestionRoleArn: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          UseDefaultProcessorFeatures: bool = false;
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; MonitoringInterval: int = 0;
          KmsKeyId: string = ""; MonitoringRoleArn: string = "";
          ProcessorFeatures: JsonNode = nil; MasterUsername: string = "";
          BackupRetentionPeriod: int = 0;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBInstanceFromS3";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          DBName: string = ""; StorageEncrypted: bool = false;
          DBParameterGroupName: string = ""; DeletionProtection: bool = false;
          S3Prefix: string = ""; Tags: JsonNode = nil; LicenseModel: string = "";
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          MultiAZ: bool = false; DBSecurityGroups: JsonNode = nil; Port: int = 0;
          PerformanceInsightsKMSKeyId: string = ""; MasterUserPassword: string = "";
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0): Recallable =
  ## getRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   Action: string (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 is not supported on the db.t2.micro DB instance class. </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  var query_595660 = newJObject()
  add(query_595660, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_595660, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_595660, "SourceEngine", newJString(SourceEngine))
  add(query_595660, "Engine", newJString(Engine))
  add(query_595660, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_595660, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_595660, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_595660, "KmsKeyId", newJString(KmsKeyId))
  add(query_595660, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_595660, "S3BucketName", newJString(S3BucketName))
  if ProcessorFeatures != nil:
    query_595660.add "ProcessorFeatures", ProcessorFeatures
  add(query_595660, "MasterUsername", newJString(MasterUsername))
  add(query_595660, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if EnableCloudwatchLogsExports != nil:
    query_595660.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_595660, "EngineVersion", newJString(EngineVersion))
  add(query_595660, "Action", newJString(Action))
  if VpcSecurityGroupIds != nil:
    query_595660.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_595660, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_595660, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_595660, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_595660, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_595660, "DBName", newJString(DBName))
  add(query_595660, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_595660, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_595660, "DeletionProtection", newJBool(DeletionProtection))
  add(query_595660, "S3Prefix", newJString(S3Prefix))
  if Tags != nil:
    query_595660.add "Tags", Tags
  add(query_595660, "LicenseModel", newJString(LicenseModel))
  add(query_595660, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_595660, "StorageType", newJString(StorageType))
  add(query_595660, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_595660, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_595660.add "DBSecurityGroups", DBSecurityGroups
  add(query_595660, "Port", newJInt(Port))
  add(query_595660, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_595660, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_595660, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_595660, "OptionGroupName", newJString(OptionGroupName))
  add(query_595660, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_595660, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_595660, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_595660, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_595660, "Version", newJString(Version))
  add(query_595660, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_595660, "Iops", newJInt(Iops))
  result = call_595659.call(nil, query_595660, nil, nil, nil)

var getRestoreDBInstanceFromS3* = Call_GetRestoreDBInstanceFromS3_595603(
    name: "getRestoreDBInstanceFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_GetRestoreDBInstanceFromS3_595604, base: "/",
    url: url_GetRestoreDBInstanceFromS3_595605,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceToPointInTime_595766 = ref object of OpenApiRestCall_590348
proc url_PostRestoreDBInstanceToPointInTime_595768(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBInstanceToPointInTime_595767(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595769 = query.getOrDefault("Action")
  valid_595769 = validateParameter(valid_595769, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_595769 != nil:
    section.add "Action", valid_595769
  var valid_595770 = query.getOrDefault("Version")
  valid_595770 = validateParameter(valid_595770, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595770 != nil:
    section.add "Version", valid_595770
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595771 = header.getOrDefault("X-Amz-Signature")
  valid_595771 = validateParameter(valid_595771, JString, required = false,
                                 default = nil)
  if valid_595771 != nil:
    section.add "X-Amz-Signature", valid_595771
  var valid_595772 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595772 = validateParameter(valid_595772, JString, required = false,
                                 default = nil)
  if valid_595772 != nil:
    section.add "X-Amz-Content-Sha256", valid_595772
  var valid_595773 = header.getOrDefault("X-Amz-Date")
  valid_595773 = validateParameter(valid_595773, JString, required = false,
                                 default = nil)
  if valid_595773 != nil:
    section.add "X-Amz-Date", valid_595773
  var valid_595774 = header.getOrDefault("X-Amz-Credential")
  valid_595774 = validateParameter(valid_595774, JString, required = false,
                                 default = nil)
  if valid_595774 != nil:
    section.add "X-Amz-Credential", valid_595774
  var valid_595775 = header.getOrDefault("X-Amz-Security-Token")
  valid_595775 = validateParameter(valid_595775, JString, required = false,
                                 default = nil)
  if valid_595775 != nil:
    section.add "X-Amz-Security-Token", valid_595775
  var valid_595776 = header.getOrDefault("X-Amz-Algorithm")
  valid_595776 = validateParameter(valid_595776, JString, required = false,
                                 default = nil)
  if valid_595776 != nil:
    section.add "X-Amz-Algorithm", valid_595776
  var valid_595777 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595777 = validateParameter(valid_595777, JString, required = false,
                                 default = nil)
  if valid_595777 != nil:
    section.add "X-Amz-SignedHeaders", valid_595777
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance is not restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter is not used for the MySQL or MariaDB engines.</p> </note>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine is not supported.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_595778 = formData.getOrDefault("Port")
  valid_595778 = validateParameter(valid_595778, JInt, required = false, default = nil)
  if valid_595778 != nil:
    section.add "Port", valid_595778
  var valid_595779 = formData.getOrDefault("DBInstanceClass")
  valid_595779 = validateParameter(valid_595779, JString, required = false,
                                 default = nil)
  if valid_595779 != nil:
    section.add "DBInstanceClass", valid_595779
  var valid_595780 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_595780 = validateParameter(valid_595780, JBool, required = false, default = nil)
  if valid_595780 != nil:
    section.add "UseDefaultProcessorFeatures", valid_595780
  var valid_595781 = formData.getOrDefault("MultiAZ")
  valid_595781 = validateParameter(valid_595781, JBool, required = false, default = nil)
  if valid_595781 != nil:
    section.add "MultiAZ", valid_595781
  var valid_595782 = formData.getOrDefault("Domain")
  valid_595782 = validateParameter(valid_595782, JString, required = false,
                                 default = nil)
  if valid_595782 != nil:
    section.add "Domain", valid_595782
  var valid_595783 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_595783 = validateParameter(valid_595783, JString, required = false,
                                 default = nil)
  if valid_595783 != nil:
    section.add "SourceDBInstanceIdentifier", valid_595783
  var valid_595784 = formData.getOrDefault("DBParameterGroupName")
  valid_595784 = validateParameter(valid_595784, JString, required = false,
                                 default = nil)
  if valid_595784 != nil:
    section.add "DBParameterGroupName", valid_595784
  var valid_595785 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_595785 = validateParameter(valid_595785, JArray, required = false,
                                 default = nil)
  if valid_595785 != nil:
    section.add "VpcSecurityGroupIds", valid_595785
  var valid_595786 = formData.getOrDefault("AvailabilityZone")
  valid_595786 = validateParameter(valid_595786, JString, required = false,
                                 default = nil)
  if valid_595786 != nil:
    section.add "AvailabilityZone", valid_595786
  var valid_595787 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_595787 = validateParameter(valid_595787, JBool, required = false, default = nil)
  if valid_595787 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_595787
  var valid_595788 = formData.getOrDefault("Engine")
  valid_595788 = validateParameter(valid_595788, JString, required = false,
                                 default = nil)
  if valid_595788 != nil:
    section.add "Engine", valid_595788
  var valid_595789 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_595789 = validateParameter(valid_595789, JBool, required = false, default = nil)
  if valid_595789 != nil:
    section.add "AutoMinorVersionUpgrade", valid_595789
  var valid_595790 = formData.getOrDefault("TdeCredentialPassword")
  valid_595790 = validateParameter(valid_595790, JString, required = false,
                                 default = nil)
  if valid_595790 != nil:
    section.add "TdeCredentialPassword", valid_595790
  var valid_595791 = formData.getOrDefault("UseLatestRestorableTime")
  valid_595791 = validateParameter(valid_595791, JBool, required = false, default = nil)
  if valid_595791 != nil:
    section.add "UseLatestRestorableTime", valid_595791
  var valid_595792 = formData.getOrDefault("DBName")
  valid_595792 = validateParameter(valid_595792, JString, required = false,
                                 default = nil)
  if valid_595792 != nil:
    section.add "DBName", valid_595792
  var valid_595793 = formData.getOrDefault("Iops")
  valid_595793 = validateParameter(valid_595793, JInt, required = false, default = nil)
  if valid_595793 != nil:
    section.add "Iops", valid_595793
  var valid_595794 = formData.getOrDefault("TdeCredentialArn")
  valid_595794 = validateParameter(valid_595794, JString, required = false,
                                 default = nil)
  if valid_595794 != nil:
    section.add "TdeCredentialArn", valid_595794
  var valid_595795 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_595795 = validateParameter(valid_595795, JArray, required = false,
                                 default = nil)
  if valid_595795 != nil:
    section.add "EnableCloudwatchLogsExports", valid_595795
  var valid_595796 = formData.getOrDefault("PubliclyAccessible")
  valid_595796 = validateParameter(valid_595796, JBool, required = false, default = nil)
  if valid_595796 != nil:
    section.add "PubliclyAccessible", valid_595796
  var valid_595797 = formData.getOrDefault("LicenseModel")
  valid_595797 = validateParameter(valid_595797, JString, required = false,
                                 default = nil)
  if valid_595797 != nil:
    section.add "LicenseModel", valid_595797
  var valid_595798 = formData.getOrDefault("Tags")
  valid_595798 = validateParameter(valid_595798, JArray, required = false,
                                 default = nil)
  if valid_595798 != nil:
    section.add "Tags", valid_595798
  var valid_595799 = formData.getOrDefault("DBSubnetGroupName")
  valid_595799 = validateParameter(valid_595799, JString, required = false,
                                 default = nil)
  if valid_595799 != nil:
    section.add "DBSubnetGroupName", valid_595799
  var valid_595800 = formData.getOrDefault("DomainIAMRoleName")
  valid_595800 = validateParameter(valid_595800, JString, required = false,
                                 default = nil)
  if valid_595800 != nil:
    section.add "DomainIAMRoleName", valid_595800
  var valid_595801 = formData.getOrDefault("OptionGroupName")
  valid_595801 = validateParameter(valid_595801, JString, required = false,
                                 default = nil)
  if valid_595801 != nil:
    section.add "OptionGroupName", valid_595801
  var valid_595802 = formData.getOrDefault("RestoreTime")
  valid_595802 = validateParameter(valid_595802, JString, required = false,
                                 default = nil)
  if valid_595802 != nil:
    section.add "RestoreTime", valid_595802
  assert formData != nil, "formData argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_595803 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_595803 = validateParameter(valid_595803, JString, required = true,
                                 default = nil)
  if valid_595803 != nil:
    section.add "TargetDBInstanceIdentifier", valid_595803
  var valid_595804 = formData.getOrDefault("StorageType")
  valid_595804 = validateParameter(valid_595804, JString, required = false,
                                 default = nil)
  if valid_595804 != nil:
    section.add "StorageType", valid_595804
  var valid_595805 = formData.getOrDefault("SourceDbiResourceId")
  valid_595805 = validateParameter(valid_595805, JString, required = false,
                                 default = nil)
  if valid_595805 != nil:
    section.add "SourceDbiResourceId", valid_595805
  var valid_595806 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_595806 = validateParameter(valid_595806, JBool, required = false, default = nil)
  if valid_595806 != nil:
    section.add "CopyTagsToSnapshot", valid_595806
  var valid_595807 = formData.getOrDefault("DeletionProtection")
  valid_595807 = validateParameter(valid_595807, JBool, required = false, default = nil)
  if valid_595807 != nil:
    section.add "DeletionProtection", valid_595807
  var valid_595808 = formData.getOrDefault("ProcessorFeatures")
  valid_595808 = validateParameter(valid_595808, JArray, required = false,
                                 default = nil)
  if valid_595808 != nil:
    section.add "ProcessorFeatures", valid_595808
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595809: Call_PostRestoreDBInstanceToPointInTime_595766;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_595809.validator(path, query, header, formData, body)
  let scheme = call_595809.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595809.url(scheme.get, call_595809.host, call_595809.base,
                         call_595809.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595809, url, valid)

proc call*(call_595810: Call_PostRestoreDBInstanceToPointInTime_595766;
          TargetDBInstanceIdentifier: string; Port: int = 0;
          DBInstanceClass: string = ""; UseDefaultProcessorFeatures: bool = false;
          MultiAZ: bool = false; Domain: string = "";
          SourceDBInstanceIdentifier: string = "";
          DBParameterGroupName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; Engine: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          UseLatestRestorableTime: bool = false; DBName: string = ""; Iops: int = 0;
          TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "RestoreDBInstanceToPointInTime";
          LicenseModel: string = ""; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; RestoreTime: string = "";
          Version: string = "2014-10-31"; StorageType: string = "";
          SourceDbiResourceId: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance is not restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter is not used for the MySQL or MariaDB engines.</p> </note>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine is not supported.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_595811 = newJObject()
  var formData_595812 = newJObject()
  add(formData_595812, "Port", newJInt(Port))
  add(formData_595812, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_595812, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_595812, "MultiAZ", newJBool(MultiAZ))
  add(formData_595812, "Domain", newJString(Domain))
  add(formData_595812, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_595812, "DBParameterGroupName", newJString(DBParameterGroupName))
  if VpcSecurityGroupIds != nil:
    formData_595812.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_595812, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_595812, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_595812, "Engine", newJString(Engine))
  add(formData_595812, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_595812, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_595812, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_595812, "DBName", newJString(DBName))
  add(formData_595812, "Iops", newJInt(Iops))
  add(formData_595812, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_595812.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_595812, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_595811, "Action", newJString(Action))
  add(formData_595812, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_595812.add "Tags", Tags
  add(formData_595812, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_595812, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_595812, "OptionGroupName", newJString(OptionGroupName))
  add(formData_595812, "RestoreTime", newJString(RestoreTime))
  add(formData_595812, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_595811, "Version", newJString(Version))
  add(formData_595812, "StorageType", newJString(StorageType))
  add(formData_595812, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  add(formData_595812, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_595812, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_595812.add "ProcessorFeatures", ProcessorFeatures
  result = call_595810.call(nil, query_595811, nil, formData_595812, nil)

var postRestoreDBInstanceToPointInTime* = Call_PostRestoreDBInstanceToPointInTime_595766(
    name: "postRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_PostRestoreDBInstanceToPointInTime_595767, base: "/",
    url: url_PostRestoreDBInstanceToPointInTime_595768,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceToPointInTime_595720 = ref object of OpenApiRestCall_590348
proc url_GetRestoreDBInstanceToPointInTime_595722(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBInstanceToPointInTime_595721(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter is not used for the MySQL or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance is not restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine is not supported.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_595723 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_595723 = validateParameter(valid_595723, JBool, required = false, default = nil)
  if valid_595723 != nil:
    section.add "UseDefaultProcessorFeatures", valid_595723
  var valid_595724 = query.getOrDefault("DBName")
  valid_595724 = validateParameter(valid_595724, JString, required = false,
                                 default = nil)
  if valid_595724 != nil:
    section.add "DBName", valid_595724
  var valid_595725 = query.getOrDefault("TdeCredentialPassword")
  valid_595725 = validateParameter(valid_595725, JString, required = false,
                                 default = nil)
  if valid_595725 != nil:
    section.add "TdeCredentialPassword", valid_595725
  var valid_595726 = query.getOrDefault("DeletionProtection")
  valid_595726 = validateParameter(valid_595726, JBool, required = false, default = nil)
  if valid_595726 != nil:
    section.add "DeletionProtection", valid_595726
  var valid_595727 = query.getOrDefault("Engine")
  valid_595727 = validateParameter(valid_595727, JString, required = false,
                                 default = nil)
  if valid_595727 != nil:
    section.add "Engine", valid_595727
  var valid_595728 = query.getOrDefault("UseLatestRestorableTime")
  valid_595728 = validateParameter(valid_595728, JBool, required = false, default = nil)
  if valid_595728 != nil:
    section.add "UseLatestRestorableTime", valid_595728
  var valid_595729 = query.getOrDefault("CopyTagsToSnapshot")
  valid_595729 = validateParameter(valid_595729, JBool, required = false, default = nil)
  if valid_595729 != nil:
    section.add "CopyTagsToSnapshot", valid_595729
  var valid_595730 = query.getOrDefault("DBParameterGroupName")
  valid_595730 = validateParameter(valid_595730, JString, required = false,
                                 default = nil)
  if valid_595730 != nil:
    section.add "DBParameterGroupName", valid_595730
  var valid_595731 = query.getOrDefault("Tags")
  valid_595731 = validateParameter(valid_595731, JArray, required = false,
                                 default = nil)
  if valid_595731 != nil:
    section.add "Tags", valid_595731
  var valid_595732 = query.getOrDefault("LicenseModel")
  valid_595732 = validateParameter(valid_595732, JString, required = false,
                                 default = nil)
  if valid_595732 != nil:
    section.add "LicenseModel", valid_595732
  var valid_595733 = query.getOrDefault("TdeCredentialArn")
  valid_595733 = validateParameter(valid_595733, JString, required = false,
                                 default = nil)
  if valid_595733 != nil:
    section.add "TdeCredentialArn", valid_595733
  var valid_595734 = query.getOrDefault("ProcessorFeatures")
  valid_595734 = validateParameter(valid_595734, JArray, required = false,
                                 default = nil)
  if valid_595734 != nil:
    section.add "ProcessorFeatures", valid_595734
  var valid_595735 = query.getOrDefault("StorageType")
  valid_595735 = validateParameter(valid_595735, JString, required = false,
                                 default = nil)
  if valid_595735 != nil:
    section.add "StorageType", valid_595735
  assert query != nil, "query argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_595736 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_595736 = validateParameter(valid_595736, JString, required = true,
                                 default = nil)
  if valid_595736 != nil:
    section.add "TargetDBInstanceIdentifier", valid_595736
  var valid_595737 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_595737 = validateParameter(valid_595737, JBool, required = false, default = nil)
  if valid_595737 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_595737
  var valid_595738 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_595738 = validateParameter(valid_595738, JArray, required = false,
                                 default = nil)
  if valid_595738 != nil:
    section.add "EnableCloudwatchLogsExports", valid_595738
  var valid_595739 = query.getOrDefault("Action")
  valid_595739 = validateParameter(valid_595739, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_595739 != nil:
    section.add "Action", valid_595739
  var valid_595740 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_595740 = validateParameter(valid_595740, JString, required = false,
                                 default = nil)
  if valid_595740 != nil:
    section.add "SourceDBInstanceIdentifier", valid_595740
  var valid_595741 = query.getOrDefault("MultiAZ")
  valid_595741 = validateParameter(valid_595741, JBool, required = false, default = nil)
  if valid_595741 != nil:
    section.add "MultiAZ", valid_595741
  var valid_595742 = query.getOrDefault("Port")
  valid_595742 = validateParameter(valid_595742, JInt, required = false, default = nil)
  if valid_595742 != nil:
    section.add "Port", valid_595742
  var valid_595743 = query.getOrDefault("Domain")
  valid_595743 = validateParameter(valid_595743, JString, required = false,
                                 default = nil)
  if valid_595743 != nil:
    section.add "Domain", valid_595743
  var valid_595744 = query.getOrDefault("VpcSecurityGroupIds")
  valid_595744 = validateParameter(valid_595744, JArray, required = false,
                                 default = nil)
  if valid_595744 != nil:
    section.add "VpcSecurityGroupIds", valid_595744
  var valid_595745 = query.getOrDefault("SourceDbiResourceId")
  valid_595745 = validateParameter(valid_595745, JString, required = false,
                                 default = nil)
  if valid_595745 != nil:
    section.add "SourceDbiResourceId", valid_595745
  var valid_595746 = query.getOrDefault("AvailabilityZone")
  valid_595746 = validateParameter(valid_595746, JString, required = false,
                                 default = nil)
  if valid_595746 != nil:
    section.add "AvailabilityZone", valid_595746
  var valid_595747 = query.getOrDefault("OptionGroupName")
  valid_595747 = validateParameter(valid_595747, JString, required = false,
                                 default = nil)
  if valid_595747 != nil:
    section.add "OptionGroupName", valid_595747
  var valid_595748 = query.getOrDefault("DBSubnetGroupName")
  valid_595748 = validateParameter(valid_595748, JString, required = false,
                                 default = nil)
  if valid_595748 != nil:
    section.add "DBSubnetGroupName", valid_595748
  var valid_595749 = query.getOrDefault("RestoreTime")
  valid_595749 = validateParameter(valid_595749, JString, required = false,
                                 default = nil)
  if valid_595749 != nil:
    section.add "RestoreTime", valid_595749
  var valid_595750 = query.getOrDefault("DBInstanceClass")
  valid_595750 = validateParameter(valid_595750, JString, required = false,
                                 default = nil)
  if valid_595750 != nil:
    section.add "DBInstanceClass", valid_595750
  var valid_595751 = query.getOrDefault("PubliclyAccessible")
  valid_595751 = validateParameter(valid_595751, JBool, required = false, default = nil)
  if valid_595751 != nil:
    section.add "PubliclyAccessible", valid_595751
  var valid_595752 = query.getOrDefault("Version")
  valid_595752 = validateParameter(valid_595752, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595752 != nil:
    section.add "Version", valid_595752
  var valid_595753 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_595753 = validateParameter(valid_595753, JBool, required = false, default = nil)
  if valid_595753 != nil:
    section.add "AutoMinorVersionUpgrade", valid_595753
  var valid_595754 = query.getOrDefault("Iops")
  valid_595754 = validateParameter(valid_595754, JInt, required = false, default = nil)
  if valid_595754 != nil:
    section.add "Iops", valid_595754
  var valid_595755 = query.getOrDefault("DomainIAMRoleName")
  valid_595755 = validateParameter(valid_595755, JString, required = false,
                                 default = nil)
  if valid_595755 != nil:
    section.add "DomainIAMRoleName", valid_595755
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595756 = header.getOrDefault("X-Amz-Signature")
  valid_595756 = validateParameter(valid_595756, JString, required = false,
                                 default = nil)
  if valid_595756 != nil:
    section.add "X-Amz-Signature", valid_595756
  var valid_595757 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595757 = validateParameter(valid_595757, JString, required = false,
                                 default = nil)
  if valid_595757 != nil:
    section.add "X-Amz-Content-Sha256", valid_595757
  var valid_595758 = header.getOrDefault("X-Amz-Date")
  valid_595758 = validateParameter(valid_595758, JString, required = false,
                                 default = nil)
  if valid_595758 != nil:
    section.add "X-Amz-Date", valid_595758
  var valid_595759 = header.getOrDefault("X-Amz-Credential")
  valid_595759 = validateParameter(valid_595759, JString, required = false,
                                 default = nil)
  if valid_595759 != nil:
    section.add "X-Amz-Credential", valid_595759
  var valid_595760 = header.getOrDefault("X-Amz-Security-Token")
  valid_595760 = validateParameter(valid_595760, JString, required = false,
                                 default = nil)
  if valid_595760 != nil:
    section.add "X-Amz-Security-Token", valid_595760
  var valid_595761 = header.getOrDefault("X-Amz-Algorithm")
  valid_595761 = validateParameter(valid_595761, JString, required = false,
                                 default = nil)
  if valid_595761 != nil:
    section.add "X-Amz-Algorithm", valid_595761
  var valid_595762 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595762 = validateParameter(valid_595762, JString, required = false,
                                 default = nil)
  if valid_595762 != nil:
    section.add "X-Amz-SignedHeaders", valid_595762
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595763: Call_GetRestoreDBInstanceToPointInTime_595720;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_595763.validator(path, query, header, formData, body)
  let scheme = call_595763.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595763.url(scheme.get, call_595763.host, call_595763.base,
                         call_595763.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595763, url, valid)

proc call*(call_595764: Call_GetRestoreDBInstanceToPointInTime_595720;
          TargetDBInstanceIdentifier: string;
          UseDefaultProcessorFeatures: bool = false; DBName: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          Engine: string = ""; UseLatestRestorableTime: bool = false;
          CopyTagsToSnapshot: bool = false; DBParameterGroupName: string = "";
          Tags: JsonNode = nil; LicenseModel: string = "";
          TdeCredentialArn: string = ""; ProcessorFeatures: JsonNode = nil;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceToPointInTime";
          SourceDBInstanceIdentifier: string = ""; MultiAZ: bool = false; Port: int = 0;
          Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          SourceDbiResourceId: string = ""; AvailabilityZone: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          RestoreTime: string = ""; DBInstanceClass: string = "";
          PubliclyAccessible: bool = false; Version: string = "2014-10-31";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter is not used for the MySQL or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance is not restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine is not supported.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_595765 = newJObject()
  add(query_595765, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_595765, "DBName", newJString(DBName))
  add(query_595765, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_595765, "DeletionProtection", newJBool(DeletionProtection))
  add(query_595765, "Engine", newJString(Engine))
  add(query_595765, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_595765, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_595765, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_595765.add "Tags", Tags
  add(query_595765, "LicenseModel", newJString(LicenseModel))
  add(query_595765, "TdeCredentialArn", newJString(TdeCredentialArn))
  if ProcessorFeatures != nil:
    query_595765.add "ProcessorFeatures", ProcessorFeatures
  add(query_595765, "StorageType", newJString(StorageType))
  add(query_595765, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_595765, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_595765.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_595765, "Action", newJString(Action))
  add(query_595765, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_595765, "MultiAZ", newJBool(MultiAZ))
  add(query_595765, "Port", newJInt(Port))
  add(query_595765, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_595765.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_595765, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  add(query_595765, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_595765, "OptionGroupName", newJString(OptionGroupName))
  add(query_595765, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_595765, "RestoreTime", newJString(RestoreTime))
  add(query_595765, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_595765, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_595765, "Version", newJString(Version))
  add(query_595765, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_595765, "Iops", newJInt(Iops))
  add(query_595765, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_595764.call(nil, query_595765, nil, nil, nil)

var getRestoreDBInstanceToPointInTime* = Call_GetRestoreDBInstanceToPointInTime_595720(
    name: "getRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_GetRestoreDBInstanceToPointInTime_595721, base: "/",
    url: url_GetRestoreDBInstanceToPointInTime_595722,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeDBSecurityGroupIngress_595833 = ref object of OpenApiRestCall_590348
proc url_PostRevokeDBSecurityGroupIngress_595835(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRevokeDBSecurityGroupIngress_595834(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595836 = query.getOrDefault("Action")
  valid_595836 = validateParameter(valid_595836, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_595836 != nil:
    section.add "Action", valid_595836
  var valid_595837 = query.getOrDefault("Version")
  valid_595837 = validateParameter(valid_595837, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595837 != nil:
    section.add "Version", valid_595837
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595838 = header.getOrDefault("X-Amz-Signature")
  valid_595838 = validateParameter(valid_595838, JString, required = false,
                                 default = nil)
  if valid_595838 != nil:
    section.add "X-Amz-Signature", valid_595838
  var valid_595839 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595839 = validateParameter(valid_595839, JString, required = false,
                                 default = nil)
  if valid_595839 != nil:
    section.add "X-Amz-Content-Sha256", valid_595839
  var valid_595840 = header.getOrDefault("X-Amz-Date")
  valid_595840 = validateParameter(valid_595840, JString, required = false,
                                 default = nil)
  if valid_595840 != nil:
    section.add "X-Amz-Date", valid_595840
  var valid_595841 = header.getOrDefault("X-Amz-Credential")
  valid_595841 = validateParameter(valid_595841, JString, required = false,
                                 default = nil)
  if valid_595841 != nil:
    section.add "X-Amz-Credential", valid_595841
  var valid_595842 = header.getOrDefault("X-Amz-Security-Token")
  valid_595842 = validateParameter(valid_595842, JString, required = false,
                                 default = nil)
  if valid_595842 != nil:
    section.add "X-Amz-Security-Token", valid_595842
  var valid_595843 = header.getOrDefault("X-Amz-Algorithm")
  valid_595843 = validateParameter(valid_595843, JString, required = false,
                                 default = nil)
  if valid_595843 != nil:
    section.add "X-Amz-Algorithm", valid_595843
  var valid_595844 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595844 = validateParameter(valid_595844, JString, required = false,
                                 default = nil)
  if valid_595844 != nil:
    section.add "X-Amz-SignedHeaders", valid_595844
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS Account Number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_595845 = formData.getOrDefault("DBSecurityGroupName")
  valid_595845 = validateParameter(valid_595845, JString, required = true,
                                 default = nil)
  if valid_595845 != nil:
    section.add "DBSecurityGroupName", valid_595845
  var valid_595846 = formData.getOrDefault("EC2SecurityGroupName")
  valid_595846 = validateParameter(valid_595846, JString, required = false,
                                 default = nil)
  if valid_595846 != nil:
    section.add "EC2SecurityGroupName", valid_595846
  var valid_595847 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_595847 = validateParameter(valid_595847, JString, required = false,
                                 default = nil)
  if valid_595847 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_595847
  var valid_595848 = formData.getOrDefault("EC2SecurityGroupId")
  valid_595848 = validateParameter(valid_595848, JString, required = false,
                                 default = nil)
  if valid_595848 != nil:
    section.add "EC2SecurityGroupId", valid_595848
  var valid_595849 = formData.getOrDefault("CIDRIP")
  valid_595849 = validateParameter(valid_595849, JString, required = false,
                                 default = nil)
  if valid_595849 != nil:
    section.add "CIDRIP", valid_595849
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595850: Call_PostRevokeDBSecurityGroupIngress_595833;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_595850.validator(path, query, header, formData, body)
  let scheme = call_595850.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595850.url(scheme.get, call_595850.host, call_595850.base,
                         call_595850.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595850, url, valid)

proc call*(call_595851: Call_PostRevokeDBSecurityGroupIngress_595833;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupOwnerId: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Action: string = "RevokeDBSecurityGroupIngress";
          Version: string = "2014-10-31"): Recallable =
  ## postRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS Account Number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595852 = newJObject()
  var formData_595853 = newJObject()
  add(formData_595853, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_595853, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_595853, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(formData_595853, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_595853, "CIDRIP", newJString(CIDRIP))
  add(query_595852, "Action", newJString(Action))
  add(query_595852, "Version", newJString(Version))
  result = call_595851.call(nil, query_595852, nil, formData_595853, nil)

var postRevokeDBSecurityGroupIngress* = Call_PostRevokeDBSecurityGroupIngress_595833(
    name: "postRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_PostRevokeDBSecurityGroupIngress_595834, base: "/",
    url: url_PostRevokeDBSecurityGroupIngress_595835,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeDBSecurityGroupIngress_595813 = ref object of OpenApiRestCall_590348
proc url_GetRevokeDBSecurityGroupIngress_595815(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRevokeDBSecurityGroupIngress_595814(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS Account Number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  section = newJObject()
  var valid_595816 = query.getOrDefault("EC2SecurityGroupName")
  valid_595816 = validateParameter(valid_595816, JString, required = false,
                                 default = nil)
  if valid_595816 != nil:
    section.add "EC2SecurityGroupName", valid_595816
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_595817 = query.getOrDefault("DBSecurityGroupName")
  valid_595817 = validateParameter(valid_595817, JString, required = true,
                                 default = nil)
  if valid_595817 != nil:
    section.add "DBSecurityGroupName", valid_595817
  var valid_595818 = query.getOrDefault("EC2SecurityGroupId")
  valid_595818 = validateParameter(valid_595818, JString, required = false,
                                 default = nil)
  if valid_595818 != nil:
    section.add "EC2SecurityGroupId", valid_595818
  var valid_595819 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_595819 = validateParameter(valid_595819, JString, required = false,
                                 default = nil)
  if valid_595819 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_595819
  var valid_595820 = query.getOrDefault("Action")
  valid_595820 = validateParameter(valid_595820, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_595820 != nil:
    section.add "Action", valid_595820
  var valid_595821 = query.getOrDefault("Version")
  valid_595821 = validateParameter(valid_595821, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595821 != nil:
    section.add "Version", valid_595821
  var valid_595822 = query.getOrDefault("CIDRIP")
  valid_595822 = validateParameter(valid_595822, JString, required = false,
                                 default = nil)
  if valid_595822 != nil:
    section.add "CIDRIP", valid_595822
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595823 = header.getOrDefault("X-Amz-Signature")
  valid_595823 = validateParameter(valid_595823, JString, required = false,
                                 default = nil)
  if valid_595823 != nil:
    section.add "X-Amz-Signature", valid_595823
  var valid_595824 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595824 = validateParameter(valid_595824, JString, required = false,
                                 default = nil)
  if valid_595824 != nil:
    section.add "X-Amz-Content-Sha256", valid_595824
  var valid_595825 = header.getOrDefault("X-Amz-Date")
  valid_595825 = validateParameter(valid_595825, JString, required = false,
                                 default = nil)
  if valid_595825 != nil:
    section.add "X-Amz-Date", valid_595825
  var valid_595826 = header.getOrDefault("X-Amz-Credential")
  valid_595826 = validateParameter(valid_595826, JString, required = false,
                                 default = nil)
  if valid_595826 != nil:
    section.add "X-Amz-Credential", valid_595826
  var valid_595827 = header.getOrDefault("X-Amz-Security-Token")
  valid_595827 = validateParameter(valid_595827, JString, required = false,
                                 default = nil)
  if valid_595827 != nil:
    section.add "X-Amz-Security-Token", valid_595827
  var valid_595828 = header.getOrDefault("X-Amz-Algorithm")
  valid_595828 = validateParameter(valid_595828, JString, required = false,
                                 default = nil)
  if valid_595828 != nil:
    section.add "X-Amz-Algorithm", valid_595828
  var valid_595829 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595829 = validateParameter(valid_595829, JString, required = false,
                                 default = nil)
  if valid_595829 != nil:
    section.add "X-Amz-SignedHeaders", valid_595829
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595830: Call_GetRevokeDBSecurityGroupIngress_595813;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_595830.validator(path, query, header, formData, body)
  let scheme = call_595830.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595830.url(scheme.get, call_595830.host, call_595830.base,
                         call_595830.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595830, url, valid)

proc call*(call_595831: Call_GetRevokeDBSecurityGroupIngress_595813;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupId: string = ""; EC2SecurityGroupOwnerId: string = "";
          Action: string = "RevokeDBSecurityGroupIngress";
          Version: string = "2014-10-31"; CIDRIP: string = ""): Recallable =
  ## getRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS Account Number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  var query_595832 = newJObject()
  add(query_595832, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_595832, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_595832, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_595832, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_595832, "Action", newJString(Action))
  add(query_595832, "Version", newJString(Version))
  add(query_595832, "CIDRIP", newJString(CIDRIP))
  result = call_595831.call(nil, query_595832, nil, nil, nil)

var getRevokeDBSecurityGroupIngress* = Call_GetRevokeDBSecurityGroupIngress_595813(
    name: "getRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_GetRevokeDBSecurityGroupIngress_595814, base: "/",
    url: url_GetRevokeDBSecurityGroupIngress_595815,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartActivityStream_595873 = ref object of OpenApiRestCall_590348
proc url_PostStartActivityStream_595875(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostStartActivityStream_595874(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595876 = query.getOrDefault("Action")
  valid_595876 = validateParameter(valid_595876, JString, required = true,
                                 default = newJString("StartActivityStream"))
  if valid_595876 != nil:
    section.add "Action", valid_595876
  var valid_595877 = query.getOrDefault("Version")
  valid_595877 = validateParameter(valid_595877, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595877 != nil:
    section.add "Version", valid_595877
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595878 = header.getOrDefault("X-Amz-Signature")
  valid_595878 = validateParameter(valid_595878, JString, required = false,
                                 default = nil)
  if valid_595878 != nil:
    section.add "X-Amz-Signature", valid_595878
  var valid_595879 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595879 = validateParameter(valid_595879, JString, required = false,
                                 default = nil)
  if valid_595879 != nil:
    section.add "X-Amz-Content-Sha256", valid_595879
  var valid_595880 = header.getOrDefault("X-Amz-Date")
  valid_595880 = validateParameter(valid_595880, JString, required = false,
                                 default = nil)
  if valid_595880 != nil:
    section.add "X-Amz-Date", valid_595880
  var valid_595881 = header.getOrDefault("X-Amz-Credential")
  valid_595881 = validateParameter(valid_595881, JString, required = false,
                                 default = nil)
  if valid_595881 != nil:
    section.add "X-Amz-Credential", valid_595881
  var valid_595882 = header.getOrDefault("X-Amz-Security-Token")
  valid_595882 = validateParameter(valid_595882, JString, required = false,
                                 default = nil)
  if valid_595882 != nil:
    section.add "X-Amz-Security-Token", valid_595882
  var valid_595883 = header.getOrDefault("X-Amz-Algorithm")
  valid_595883 = validateParameter(valid_595883, JString, required = false,
                                 default = nil)
  if valid_595883 != nil:
    section.add "X-Amz-Algorithm", valid_595883
  var valid_595884 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595884 = validateParameter(valid_595884, JString, required = false,
                                 default = nil)
  if valid_595884 != nil:
    section.add "X-Amz-SignedHeaders", valid_595884
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceArn` field"
  var valid_595885 = formData.getOrDefault("ResourceArn")
  valid_595885 = validateParameter(valid_595885, JString, required = true,
                                 default = nil)
  if valid_595885 != nil:
    section.add "ResourceArn", valid_595885
  var valid_595886 = formData.getOrDefault("Mode")
  valid_595886 = validateParameter(valid_595886, JString, required = true,
                                 default = newJString("sync"))
  if valid_595886 != nil:
    section.add "Mode", valid_595886
  var valid_595887 = formData.getOrDefault("KmsKeyId")
  valid_595887 = validateParameter(valid_595887, JString, required = true,
                                 default = nil)
  if valid_595887 != nil:
    section.add "KmsKeyId", valid_595887
  var valid_595888 = formData.getOrDefault("ApplyImmediately")
  valid_595888 = validateParameter(valid_595888, JBool, required = false, default = nil)
  if valid_595888 != nil:
    section.add "ApplyImmediately", valid_595888
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595889: Call_PostStartActivityStream_595873; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_595889.validator(path, query, header, formData, body)
  let scheme = call_595889.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595889.url(scheme.get, call_595889.host, call_595889.base,
                         call_595889.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595889, url, valid)

proc call*(call_595890: Call_PostStartActivityStream_595873; ResourceArn: string;
          KmsKeyId: string; Mode: string = "sync"; ApplyImmediately: bool = false;
          Action: string = "StartActivityStream"; Version: string = "2014-10-31"): Recallable =
  ## postStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595891 = newJObject()
  var formData_595892 = newJObject()
  add(formData_595892, "ResourceArn", newJString(ResourceArn))
  add(formData_595892, "Mode", newJString(Mode))
  add(formData_595892, "KmsKeyId", newJString(KmsKeyId))
  add(formData_595892, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_595891, "Action", newJString(Action))
  add(query_595891, "Version", newJString(Version))
  result = call_595890.call(nil, query_595891, nil, formData_595892, nil)

var postStartActivityStream* = Call_PostStartActivityStream_595873(
    name: "postStartActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_PostStartActivityStream_595874, base: "/",
    url: url_PostStartActivityStream_595875, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartActivityStream_595854 = ref object of OpenApiRestCall_590348
proc url_GetStartActivityStream_595856(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetStartActivityStream_595855(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `KmsKeyId` field"
  var valid_595857 = query.getOrDefault("KmsKeyId")
  valid_595857 = validateParameter(valid_595857, JString, required = true,
                                 default = nil)
  if valid_595857 != nil:
    section.add "KmsKeyId", valid_595857
  var valid_595858 = query.getOrDefault("ResourceArn")
  valid_595858 = validateParameter(valid_595858, JString, required = true,
                                 default = nil)
  if valid_595858 != nil:
    section.add "ResourceArn", valid_595858
  var valid_595859 = query.getOrDefault("Mode")
  valid_595859 = validateParameter(valid_595859, JString, required = true,
                                 default = newJString("sync"))
  if valid_595859 != nil:
    section.add "Mode", valid_595859
  var valid_595860 = query.getOrDefault("Action")
  valid_595860 = validateParameter(valid_595860, JString, required = true,
                                 default = newJString("StartActivityStream"))
  if valid_595860 != nil:
    section.add "Action", valid_595860
  var valid_595861 = query.getOrDefault("ApplyImmediately")
  valid_595861 = validateParameter(valid_595861, JBool, required = false, default = nil)
  if valid_595861 != nil:
    section.add "ApplyImmediately", valid_595861
  var valid_595862 = query.getOrDefault("Version")
  valid_595862 = validateParameter(valid_595862, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595862 != nil:
    section.add "Version", valid_595862
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595863 = header.getOrDefault("X-Amz-Signature")
  valid_595863 = validateParameter(valid_595863, JString, required = false,
                                 default = nil)
  if valid_595863 != nil:
    section.add "X-Amz-Signature", valid_595863
  var valid_595864 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595864 = validateParameter(valid_595864, JString, required = false,
                                 default = nil)
  if valid_595864 != nil:
    section.add "X-Amz-Content-Sha256", valid_595864
  var valid_595865 = header.getOrDefault("X-Amz-Date")
  valid_595865 = validateParameter(valid_595865, JString, required = false,
                                 default = nil)
  if valid_595865 != nil:
    section.add "X-Amz-Date", valid_595865
  var valid_595866 = header.getOrDefault("X-Amz-Credential")
  valid_595866 = validateParameter(valid_595866, JString, required = false,
                                 default = nil)
  if valid_595866 != nil:
    section.add "X-Amz-Credential", valid_595866
  var valid_595867 = header.getOrDefault("X-Amz-Security-Token")
  valid_595867 = validateParameter(valid_595867, JString, required = false,
                                 default = nil)
  if valid_595867 != nil:
    section.add "X-Amz-Security-Token", valid_595867
  var valid_595868 = header.getOrDefault("X-Amz-Algorithm")
  valid_595868 = validateParameter(valid_595868, JString, required = false,
                                 default = nil)
  if valid_595868 != nil:
    section.add "X-Amz-Algorithm", valid_595868
  var valid_595869 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595869 = validateParameter(valid_595869, JString, required = false,
                                 default = nil)
  if valid_595869 != nil:
    section.add "X-Amz-SignedHeaders", valid_595869
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595870: Call_GetStartActivityStream_595854; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_595870.validator(path, query, header, formData, body)
  let scheme = call_595870.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595870.url(scheme.get, call_595870.host, call_595870.base,
                         call_595870.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595870, url, valid)

proc call*(call_595871: Call_GetStartActivityStream_595854; KmsKeyId: string;
          ResourceArn: string; Mode: string = "sync";
          Action: string = "StartActivityStream"; ApplyImmediately: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Version: string (required)
  var query_595872 = newJObject()
  add(query_595872, "KmsKeyId", newJString(KmsKeyId))
  add(query_595872, "ResourceArn", newJString(ResourceArn))
  add(query_595872, "Mode", newJString(Mode))
  add(query_595872, "Action", newJString(Action))
  add(query_595872, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_595872, "Version", newJString(Version))
  result = call_595871.call(nil, query_595872, nil, nil, nil)

var getStartActivityStream* = Call_GetStartActivityStream_595854(
    name: "getStartActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_GetStartActivityStream_595855, base: "/",
    url: url_GetStartActivityStream_595856, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBCluster_595909 = ref object of OpenApiRestCall_590348
proc url_PostStartDBCluster_595911(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostStartDBCluster_595910(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595912 = query.getOrDefault("Action")
  valid_595912 = validateParameter(valid_595912, JString, required = true,
                                 default = newJString("StartDBCluster"))
  if valid_595912 != nil:
    section.add "Action", valid_595912
  var valid_595913 = query.getOrDefault("Version")
  valid_595913 = validateParameter(valid_595913, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595913 != nil:
    section.add "Version", valid_595913
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595914 = header.getOrDefault("X-Amz-Signature")
  valid_595914 = validateParameter(valid_595914, JString, required = false,
                                 default = nil)
  if valid_595914 != nil:
    section.add "X-Amz-Signature", valid_595914
  var valid_595915 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595915 = validateParameter(valid_595915, JString, required = false,
                                 default = nil)
  if valid_595915 != nil:
    section.add "X-Amz-Content-Sha256", valid_595915
  var valid_595916 = header.getOrDefault("X-Amz-Date")
  valid_595916 = validateParameter(valid_595916, JString, required = false,
                                 default = nil)
  if valid_595916 != nil:
    section.add "X-Amz-Date", valid_595916
  var valid_595917 = header.getOrDefault("X-Amz-Credential")
  valid_595917 = validateParameter(valid_595917, JString, required = false,
                                 default = nil)
  if valid_595917 != nil:
    section.add "X-Amz-Credential", valid_595917
  var valid_595918 = header.getOrDefault("X-Amz-Security-Token")
  valid_595918 = validateParameter(valid_595918, JString, required = false,
                                 default = nil)
  if valid_595918 != nil:
    section.add "X-Amz-Security-Token", valid_595918
  var valid_595919 = header.getOrDefault("X-Amz-Algorithm")
  valid_595919 = validateParameter(valid_595919, JString, required = false,
                                 default = nil)
  if valid_595919 != nil:
    section.add "X-Amz-Algorithm", valid_595919
  var valid_595920 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595920 = validateParameter(valid_595920, JString, required = false,
                                 default = nil)
  if valid_595920 != nil:
    section.add "X-Amz-SignedHeaders", valid_595920
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_595921 = formData.getOrDefault("DBClusterIdentifier")
  valid_595921 = validateParameter(valid_595921, JString, required = true,
                                 default = nil)
  if valid_595921 != nil:
    section.add "DBClusterIdentifier", valid_595921
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595922: Call_PostStartDBCluster_595909; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595922.validator(path, query, header, formData, body)
  let scheme = call_595922.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595922.url(scheme.get, call_595922.host, call_595922.base,
                         call_595922.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595922, url, valid)

proc call*(call_595923: Call_PostStartDBCluster_595909;
          DBClusterIdentifier: string; Action: string = "StartDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  var query_595924 = newJObject()
  var formData_595925 = newJObject()
  add(query_595924, "Action", newJString(Action))
  add(query_595924, "Version", newJString(Version))
  add(formData_595925, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_595923.call(nil, query_595924, nil, formData_595925, nil)

var postStartDBCluster* = Call_PostStartDBCluster_595909(
    name: "postStartDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBCluster",
    validator: validate_PostStartDBCluster_595910, base: "/",
    url: url_PostStartDBCluster_595911, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBCluster_595893 = ref object of OpenApiRestCall_590348
proc url_GetStartDBCluster_595895(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetStartDBCluster_595894(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_595896 = query.getOrDefault("DBClusterIdentifier")
  valid_595896 = validateParameter(valid_595896, JString, required = true,
                                 default = nil)
  if valid_595896 != nil:
    section.add "DBClusterIdentifier", valid_595896
  var valid_595897 = query.getOrDefault("Action")
  valid_595897 = validateParameter(valid_595897, JString, required = true,
                                 default = newJString("StartDBCluster"))
  if valid_595897 != nil:
    section.add "Action", valid_595897
  var valid_595898 = query.getOrDefault("Version")
  valid_595898 = validateParameter(valid_595898, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595898 != nil:
    section.add "Version", valid_595898
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595899 = header.getOrDefault("X-Amz-Signature")
  valid_595899 = validateParameter(valid_595899, JString, required = false,
                                 default = nil)
  if valid_595899 != nil:
    section.add "X-Amz-Signature", valid_595899
  var valid_595900 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595900 = validateParameter(valid_595900, JString, required = false,
                                 default = nil)
  if valid_595900 != nil:
    section.add "X-Amz-Content-Sha256", valid_595900
  var valid_595901 = header.getOrDefault("X-Amz-Date")
  valid_595901 = validateParameter(valid_595901, JString, required = false,
                                 default = nil)
  if valid_595901 != nil:
    section.add "X-Amz-Date", valid_595901
  var valid_595902 = header.getOrDefault("X-Amz-Credential")
  valid_595902 = validateParameter(valid_595902, JString, required = false,
                                 default = nil)
  if valid_595902 != nil:
    section.add "X-Amz-Credential", valid_595902
  var valid_595903 = header.getOrDefault("X-Amz-Security-Token")
  valid_595903 = validateParameter(valid_595903, JString, required = false,
                                 default = nil)
  if valid_595903 != nil:
    section.add "X-Amz-Security-Token", valid_595903
  var valid_595904 = header.getOrDefault("X-Amz-Algorithm")
  valid_595904 = validateParameter(valid_595904, JString, required = false,
                                 default = nil)
  if valid_595904 != nil:
    section.add "X-Amz-Algorithm", valid_595904
  var valid_595905 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595905 = validateParameter(valid_595905, JString, required = false,
                                 default = nil)
  if valid_595905 != nil:
    section.add "X-Amz-SignedHeaders", valid_595905
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595906: Call_GetStartDBCluster_595893; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_595906.validator(path, query, header, formData, body)
  let scheme = call_595906.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595906.url(scheme.get, call_595906.host, call_595906.base,
                         call_595906.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595906, url, valid)

proc call*(call_595907: Call_GetStartDBCluster_595893; DBClusterIdentifier: string;
          Action: string = "StartDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595908 = newJObject()
  add(query_595908, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_595908, "Action", newJString(Action))
  add(query_595908, "Version", newJString(Version))
  result = call_595907.call(nil, query_595908, nil, nil, nil)

var getStartDBCluster* = Call_GetStartDBCluster_595893(name: "getStartDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBCluster", validator: validate_GetStartDBCluster_595894,
    base: "/", url: url_GetStartDBCluster_595895,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBInstance_595942 = ref object of OpenApiRestCall_590348
proc url_PostStartDBInstance_595944(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostStartDBInstance_595943(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595945 = query.getOrDefault("Action")
  valid_595945 = validateParameter(valid_595945, JString, required = true,
                                 default = newJString("StartDBInstance"))
  if valid_595945 != nil:
    section.add "Action", valid_595945
  var valid_595946 = query.getOrDefault("Version")
  valid_595946 = validateParameter(valid_595946, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595946 != nil:
    section.add "Version", valid_595946
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595947 = header.getOrDefault("X-Amz-Signature")
  valid_595947 = validateParameter(valid_595947, JString, required = false,
                                 default = nil)
  if valid_595947 != nil:
    section.add "X-Amz-Signature", valid_595947
  var valid_595948 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595948 = validateParameter(valid_595948, JString, required = false,
                                 default = nil)
  if valid_595948 != nil:
    section.add "X-Amz-Content-Sha256", valid_595948
  var valid_595949 = header.getOrDefault("X-Amz-Date")
  valid_595949 = validateParameter(valid_595949, JString, required = false,
                                 default = nil)
  if valid_595949 != nil:
    section.add "X-Amz-Date", valid_595949
  var valid_595950 = header.getOrDefault("X-Amz-Credential")
  valid_595950 = validateParameter(valid_595950, JString, required = false,
                                 default = nil)
  if valid_595950 != nil:
    section.add "X-Amz-Credential", valid_595950
  var valid_595951 = header.getOrDefault("X-Amz-Security-Token")
  valid_595951 = validateParameter(valid_595951, JString, required = false,
                                 default = nil)
  if valid_595951 != nil:
    section.add "X-Amz-Security-Token", valid_595951
  var valid_595952 = header.getOrDefault("X-Amz-Algorithm")
  valid_595952 = validateParameter(valid_595952, JString, required = false,
                                 default = nil)
  if valid_595952 != nil:
    section.add "X-Amz-Algorithm", valid_595952
  var valid_595953 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595953 = validateParameter(valid_595953, JString, required = false,
                                 default = nil)
  if valid_595953 != nil:
    section.add "X-Amz-SignedHeaders", valid_595953
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_595954 = formData.getOrDefault("DBInstanceIdentifier")
  valid_595954 = validateParameter(valid_595954, JString, required = true,
                                 default = nil)
  if valid_595954 != nil:
    section.add "DBInstanceIdentifier", valid_595954
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595955: Call_PostStartDBInstance_595942; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_595955.validator(path, query, header, formData, body)
  let scheme = call_595955.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595955.url(scheme.get, call_595955.host, call_595955.base,
                         call_595955.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595955, url, valid)

proc call*(call_595956: Call_PostStartDBInstance_595942;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595957 = newJObject()
  var formData_595958 = newJObject()
  add(formData_595958, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_595957, "Action", newJString(Action))
  add(query_595957, "Version", newJString(Version))
  result = call_595956.call(nil, query_595957, nil, formData_595958, nil)

var postStartDBInstance* = Call_PostStartDBInstance_595942(
    name: "postStartDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBInstance",
    validator: validate_PostStartDBInstance_595943, base: "/",
    url: url_PostStartDBInstance_595944, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBInstance_595926 = ref object of OpenApiRestCall_590348
proc url_GetStartDBInstance_595928(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetStartDBInstance_595927(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_595929 = query.getOrDefault("DBInstanceIdentifier")
  valid_595929 = validateParameter(valid_595929, JString, required = true,
                                 default = nil)
  if valid_595929 != nil:
    section.add "DBInstanceIdentifier", valid_595929
  var valid_595930 = query.getOrDefault("Action")
  valid_595930 = validateParameter(valid_595930, JString, required = true,
                                 default = newJString("StartDBInstance"))
  if valid_595930 != nil:
    section.add "Action", valid_595930
  var valid_595931 = query.getOrDefault("Version")
  valid_595931 = validateParameter(valid_595931, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595931 != nil:
    section.add "Version", valid_595931
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595932 = header.getOrDefault("X-Amz-Signature")
  valid_595932 = validateParameter(valid_595932, JString, required = false,
                                 default = nil)
  if valid_595932 != nil:
    section.add "X-Amz-Signature", valid_595932
  var valid_595933 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595933 = validateParameter(valid_595933, JString, required = false,
                                 default = nil)
  if valid_595933 != nil:
    section.add "X-Amz-Content-Sha256", valid_595933
  var valid_595934 = header.getOrDefault("X-Amz-Date")
  valid_595934 = validateParameter(valid_595934, JString, required = false,
                                 default = nil)
  if valid_595934 != nil:
    section.add "X-Amz-Date", valid_595934
  var valid_595935 = header.getOrDefault("X-Amz-Credential")
  valid_595935 = validateParameter(valid_595935, JString, required = false,
                                 default = nil)
  if valid_595935 != nil:
    section.add "X-Amz-Credential", valid_595935
  var valid_595936 = header.getOrDefault("X-Amz-Security-Token")
  valid_595936 = validateParameter(valid_595936, JString, required = false,
                                 default = nil)
  if valid_595936 != nil:
    section.add "X-Amz-Security-Token", valid_595936
  var valid_595937 = header.getOrDefault("X-Amz-Algorithm")
  valid_595937 = validateParameter(valid_595937, JString, required = false,
                                 default = nil)
  if valid_595937 != nil:
    section.add "X-Amz-Algorithm", valid_595937
  var valid_595938 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595938 = validateParameter(valid_595938, JString, required = false,
                                 default = nil)
  if valid_595938 != nil:
    section.add "X-Amz-SignedHeaders", valid_595938
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595939: Call_GetStartDBInstance_595926; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_595939.validator(path, query, header, formData, body)
  let scheme = call_595939.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595939.url(scheme.get, call_595939.host, call_595939.base,
                         call_595939.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595939, url, valid)

proc call*(call_595940: Call_GetStartDBInstance_595926;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595941 = newJObject()
  add(query_595941, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_595941, "Action", newJString(Action))
  add(query_595941, "Version", newJString(Version))
  result = call_595940.call(nil, query_595941, nil, nil, nil)

var getStartDBInstance* = Call_GetStartDBInstance_595926(
    name: "getStartDBInstance", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBInstance", validator: validate_GetStartDBInstance_595927,
    base: "/", url: url_GetStartDBInstance_595928,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopActivityStream_595976 = ref object of OpenApiRestCall_590348
proc url_PostStopActivityStream_595978(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostStopActivityStream_595977(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_595979 = query.getOrDefault("Action")
  valid_595979 = validateParameter(valid_595979, JString, required = true,
                                 default = newJString("StopActivityStream"))
  if valid_595979 != nil:
    section.add "Action", valid_595979
  var valid_595980 = query.getOrDefault("Version")
  valid_595980 = validateParameter(valid_595980, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595980 != nil:
    section.add "Version", valid_595980
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595981 = header.getOrDefault("X-Amz-Signature")
  valid_595981 = validateParameter(valid_595981, JString, required = false,
                                 default = nil)
  if valid_595981 != nil:
    section.add "X-Amz-Signature", valid_595981
  var valid_595982 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595982 = validateParameter(valid_595982, JString, required = false,
                                 default = nil)
  if valid_595982 != nil:
    section.add "X-Amz-Content-Sha256", valid_595982
  var valid_595983 = header.getOrDefault("X-Amz-Date")
  valid_595983 = validateParameter(valid_595983, JString, required = false,
                                 default = nil)
  if valid_595983 != nil:
    section.add "X-Amz-Date", valid_595983
  var valid_595984 = header.getOrDefault("X-Amz-Credential")
  valid_595984 = validateParameter(valid_595984, JString, required = false,
                                 default = nil)
  if valid_595984 != nil:
    section.add "X-Amz-Credential", valid_595984
  var valid_595985 = header.getOrDefault("X-Amz-Security-Token")
  valid_595985 = validateParameter(valid_595985, JString, required = false,
                                 default = nil)
  if valid_595985 != nil:
    section.add "X-Amz-Security-Token", valid_595985
  var valid_595986 = header.getOrDefault("X-Amz-Algorithm")
  valid_595986 = validateParameter(valid_595986, JString, required = false,
                                 default = nil)
  if valid_595986 != nil:
    section.add "X-Amz-Algorithm", valid_595986
  var valid_595987 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595987 = validateParameter(valid_595987, JString, required = false,
                                 default = nil)
  if valid_595987 != nil:
    section.add "X-Amz-SignedHeaders", valid_595987
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceArn` field"
  var valid_595988 = formData.getOrDefault("ResourceArn")
  valid_595988 = validateParameter(valid_595988, JString, required = true,
                                 default = nil)
  if valid_595988 != nil:
    section.add "ResourceArn", valid_595988
  var valid_595989 = formData.getOrDefault("ApplyImmediately")
  valid_595989 = validateParameter(valid_595989, JBool, required = false, default = nil)
  if valid_595989 != nil:
    section.add "ApplyImmediately", valid_595989
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595990: Call_PostStopActivityStream_595976; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_595990.validator(path, query, header, formData, body)
  let scheme = call_595990.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595990.url(scheme.get, call_595990.host, call_595990.base,
                         call_595990.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595990, url, valid)

proc call*(call_595991: Call_PostStopActivityStream_595976; ResourceArn: string;
          ApplyImmediately: bool = false; Action: string = "StopActivityStream";
          Version: string = "2014-10-31"): Recallable =
  ## postStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_595992 = newJObject()
  var formData_595993 = newJObject()
  add(formData_595993, "ResourceArn", newJString(ResourceArn))
  add(formData_595993, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_595992, "Action", newJString(Action))
  add(query_595992, "Version", newJString(Version))
  result = call_595991.call(nil, query_595992, nil, formData_595993, nil)

var postStopActivityStream* = Call_PostStopActivityStream_595976(
    name: "postStopActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_PostStopActivityStream_595977, base: "/",
    url: url_PostStopActivityStream_595978, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopActivityStream_595959 = ref object of OpenApiRestCall_590348
proc url_GetStopActivityStream_595961(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetStopActivityStream_595960(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceArn` field"
  var valid_595962 = query.getOrDefault("ResourceArn")
  valid_595962 = validateParameter(valid_595962, JString, required = true,
                                 default = nil)
  if valid_595962 != nil:
    section.add "ResourceArn", valid_595962
  var valid_595963 = query.getOrDefault("Action")
  valid_595963 = validateParameter(valid_595963, JString, required = true,
                                 default = newJString("StopActivityStream"))
  if valid_595963 != nil:
    section.add "Action", valid_595963
  var valid_595964 = query.getOrDefault("ApplyImmediately")
  valid_595964 = validateParameter(valid_595964, JBool, required = false, default = nil)
  if valid_595964 != nil:
    section.add "ApplyImmediately", valid_595964
  var valid_595965 = query.getOrDefault("Version")
  valid_595965 = validateParameter(valid_595965, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595965 != nil:
    section.add "Version", valid_595965
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_595966 = header.getOrDefault("X-Amz-Signature")
  valid_595966 = validateParameter(valid_595966, JString, required = false,
                                 default = nil)
  if valid_595966 != nil:
    section.add "X-Amz-Signature", valid_595966
  var valid_595967 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_595967 = validateParameter(valid_595967, JString, required = false,
                                 default = nil)
  if valid_595967 != nil:
    section.add "X-Amz-Content-Sha256", valid_595967
  var valid_595968 = header.getOrDefault("X-Amz-Date")
  valid_595968 = validateParameter(valid_595968, JString, required = false,
                                 default = nil)
  if valid_595968 != nil:
    section.add "X-Amz-Date", valid_595968
  var valid_595969 = header.getOrDefault("X-Amz-Credential")
  valid_595969 = validateParameter(valid_595969, JString, required = false,
                                 default = nil)
  if valid_595969 != nil:
    section.add "X-Amz-Credential", valid_595969
  var valid_595970 = header.getOrDefault("X-Amz-Security-Token")
  valid_595970 = validateParameter(valid_595970, JString, required = false,
                                 default = nil)
  if valid_595970 != nil:
    section.add "X-Amz-Security-Token", valid_595970
  var valid_595971 = header.getOrDefault("X-Amz-Algorithm")
  valid_595971 = validateParameter(valid_595971, JString, required = false,
                                 default = nil)
  if valid_595971 != nil:
    section.add "X-Amz-Algorithm", valid_595971
  var valid_595972 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_595972 = validateParameter(valid_595972, JString, required = false,
                                 default = nil)
  if valid_595972 != nil:
    section.add "X-Amz-SignedHeaders", valid_595972
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595973: Call_GetStopActivityStream_595959; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_595973.validator(path, query, header, formData, body)
  let scheme = call_595973.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595973.url(scheme.get, call_595973.host, call_595973.base,
                         call_595973.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595973, url, valid)

proc call*(call_595974: Call_GetStopActivityStream_595959; ResourceArn: string;
          Action: string = "StopActivityStream"; ApplyImmediately: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Version: string (required)
  var query_595975 = newJObject()
  add(query_595975, "ResourceArn", newJString(ResourceArn))
  add(query_595975, "Action", newJString(Action))
  add(query_595975, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_595975, "Version", newJString(Version))
  result = call_595974.call(nil, query_595975, nil, nil, nil)

var getStopActivityStream* = Call_GetStopActivityStream_595959(
    name: "getStopActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_GetStopActivityStream_595960, base: "/",
    url: url_GetStopActivityStream_595961, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBCluster_596010 = ref object of OpenApiRestCall_590348
proc url_PostStopDBCluster_596012(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostStopDBCluster_596011(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596013 = query.getOrDefault("Action")
  valid_596013 = validateParameter(valid_596013, JString, required = true,
                                 default = newJString("StopDBCluster"))
  if valid_596013 != nil:
    section.add "Action", valid_596013
  var valid_596014 = query.getOrDefault("Version")
  valid_596014 = validateParameter(valid_596014, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596014 != nil:
    section.add "Version", valid_596014
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596015 = header.getOrDefault("X-Amz-Signature")
  valid_596015 = validateParameter(valid_596015, JString, required = false,
                                 default = nil)
  if valid_596015 != nil:
    section.add "X-Amz-Signature", valid_596015
  var valid_596016 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596016 = validateParameter(valid_596016, JString, required = false,
                                 default = nil)
  if valid_596016 != nil:
    section.add "X-Amz-Content-Sha256", valid_596016
  var valid_596017 = header.getOrDefault("X-Amz-Date")
  valid_596017 = validateParameter(valid_596017, JString, required = false,
                                 default = nil)
  if valid_596017 != nil:
    section.add "X-Amz-Date", valid_596017
  var valid_596018 = header.getOrDefault("X-Amz-Credential")
  valid_596018 = validateParameter(valid_596018, JString, required = false,
                                 default = nil)
  if valid_596018 != nil:
    section.add "X-Amz-Credential", valid_596018
  var valid_596019 = header.getOrDefault("X-Amz-Security-Token")
  valid_596019 = validateParameter(valid_596019, JString, required = false,
                                 default = nil)
  if valid_596019 != nil:
    section.add "X-Amz-Security-Token", valid_596019
  var valid_596020 = header.getOrDefault("X-Amz-Algorithm")
  valid_596020 = validateParameter(valid_596020, JString, required = false,
                                 default = nil)
  if valid_596020 != nil:
    section.add "X-Amz-Algorithm", valid_596020
  var valid_596021 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596021 = validateParameter(valid_596021, JString, required = false,
                                 default = nil)
  if valid_596021 != nil:
    section.add "X-Amz-SignedHeaders", valid_596021
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_596022 = formData.getOrDefault("DBClusterIdentifier")
  valid_596022 = validateParameter(valid_596022, JString, required = true,
                                 default = nil)
  if valid_596022 != nil:
    section.add "DBClusterIdentifier", valid_596022
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596023: Call_PostStopDBCluster_596010; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596023.validator(path, query, header, formData, body)
  let scheme = call_596023.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596023.url(scheme.get, call_596023.host, call_596023.base,
                         call_596023.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596023, url, valid)

proc call*(call_596024: Call_PostStopDBCluster_596010; DBClusterIdentifier: string;
          Action: string = "StopDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  var query_596025 = newJObject()
  var formData_596026 = newJObject()
  add(query_596025, "Action", newJString(Action))
  add(query_596025, "Version", newJString(Version))
  add(formData_596026, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_596024.call(nil, query_596025, nil, formData_596026, nil)

var postStopDBCluster* = Call_PostStopDBCluster_596010(name: "postStopDBCluster",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_PostStopDBCluster_596011,
    base: "/", url: url_PostStopDBCluster_596012,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBCluster_595994 = ref object of OpenApiRestCall_590348
proc url_GetStopDBCluster_595996(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetStopDBCluster_595995(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_595997 = query.getOrDefault("DBClusterIdentifier")
  valid_595997 = validateParameter(valid_595997, JString, required = true,
                                 default = nil)
  if valid_595997 != nil:
    section.add "DBClusterIdentifier", valid_595997
  var valid_595998 = query.getOrDefault("Action")
  valid_595998 = validateParameter(valid_595998, JString, required = true,
                                 default = newJString("StopDBCluster"))
  if valid_595998 != nil:
    section.add "Action", valid_595998
  var valid_595999 = query.getOrDefault("Version")
  valid_595999 = validateParameter(valid_595999, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_595999 != nil:
    section.add "Version", valid_595999
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596000 = header.getOrDefault("X-Amz-Signature")
  valid_596000 = validateParameter(valid_596000, JString, required = false,
                                 default = nil)
  if valid_596000 != nil:
    section.add "X-Amz-Signature", valid_596000
  var valid_596001 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596001 = validateParameter(valid_596001, JString, required = false,
                                 default = nil)
  if valid_596001 != nil:
    section.add "X-Amz-Content-Sha256", valid_596001
  var valid_596002 = header.getOrDefault("X-Amz-Date")
  valid_596002 = validateParameter(valid_596002, JString, required = false,
                                 default = nil)
  if valid_596002 != nil:
    section.add "X-Amz-Date", valid_596002
  var valid_596003 = header.getOrDefault("X-Amz-Credential")
  valid_596003 = validateParameter(valid_596003, JString, required = false,
                                 default = nil)
  if valid_596003 != nil:
    section.add "X-Amz-Credential", valid_596003
  var valid_596004 = header.getOrDefault("X-Amz-Security-Token")
  valid_596004 = validateParameter(valid_596004, JString, required = false,
                                 default = nil)
  if valid_596004 != nil:
    section.add "X-Amz-Security-Token", valid_596004
  var valid_596005 = header.getOrDefault("X-Amz-Algorithm")
  valid_596005 = validateParameter(valid_596005, JString, required = false,
                                 default = nil)
  if valid_596005 != nil:
    section.add "X-Amz-Algorithm", valid_596005
  var valid_596006 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596006 = validateParameter(valid_596006, JString, required = false,
                                 default = nil)
  if valid_596006 != nil:
    section.add "X-Amz-SignedHeaders", valid_596006
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596007: Call_GetStopDBCluster_595994; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_596007.validator(path, query, header, formData, body)
  let scheme = call_596007.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596007.url(scheme.get, call_596007.host, call_596007.base,
                         call_596007.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596007, url, valid)

proc call*(call_596008: Call_GetStopDBCluster_595994; DBClusterIdentifier: string;
          Action: string = "StopDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596009 = newJObject()
  add(query_596009, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_596009, "Action", newJString(Action))
  add(query_596009, "Version", newJString(Version))
  result = call_596008.call(nil, query_596009, nil, nil, nil)

var getStopDBCluster* = Call_GetStopDBCluster_595994(name: "getStopDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_GetStopDBCluster_595995,
    base: "/", url: url_GetStopDBCluster_595996,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBInstance_596044 = ref object of OpenApiRestCall_590348
proc url_PostStopDBInstance_596046(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostStopDBInstance_596045(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_596047 = query.getOrDefault("Action")
  valid_596047 = validateParameter(valid_596047, JString, required = true,
                                 default = newJString("StopDBInstance"))
  if valid_596047 != nil:
    section.add "Action", valid_596047
  var valid_596048 = query.getOrDefault("Version")
  valid_596048 = validateParameter(valid_596048, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596048 != nil:
    section.add "Version", valid_596048
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596049 = header.getOrDefault("X-Amz-Signature")
  valid_596049 = validateParameter(valid_596049, JString, required = false,
                                 default = nil)
  if valid_596049 != nil:
    section.add "X-Amz-Signature", valid_596049
  var valid_596050 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596050 = validateParameter(valid_596050, JString, required = false,
                                 default = nil)
  if valid_596050 != nil:
    section.add "X-Amz-Content-Sha256", valid_596050
  var valid_596051 = header.getOrDefault("X-Amz-Date")
  valid_596051 = validateParameter(valid_596051, JString, required = false,
                                 default = nil)
  if valid_596051 != nil:
    section.add "X-Amz-Date", valid_596051
  var valid_596052 = header.getOrDefault("X-Amz-Credential")
  valid_596052 = validateParameter(valid_596052, JString, required = false,
                                 default = nil)
  if valid_596052 != nil:
    section.add "X-Amz-Credential", valid_596052
  var valid_596053 = header.getOrDefault("X-Amz-Security-Token")
  valid_596053 = validateParameter(valid_596053, JString, required = false,
                                 default = nil)
  if valid_596053 != nil:
    section.add "X-Amz-Security-Token", valid_596053
  var valid_596054 = header.getOrDefault("X-Amz-Algorithm")
  valid_596054 = validateParameter(valid_596054, JString, required = false,
                                 default = nil)
  if valid_596054 != nil:
    section.add "X-Amz-Algorithm", valid_596054
  var valid_596055 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596055 = validateParameter(valid_596055, JString, required = false,
                                 default = nil)
  if valid_596055 != nil:
    section.add "X-Amz-SignedHeaders", valid_596055
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_596056 = formData.getOrDefault("DBInstanceIdentifier")
  valid_596056 = validateParameter(valid_596056, JString, required = true,
                                 default = nil)
  if valid_596056 != nil:
    section.add "DBInstanceIdentifier", valid_596056
  var valid_596057 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_596057 = validateParameter(valid_596057, JString, required = false,
                                 default = nil)
  if valid_596057 != nil:
    section.add "DBSnapshotIdentifier", valid_596057
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596058: Call_PostStopDBInstance_596044; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_596058.validator(path, query, header, formData, body)
  let scheme = call_596058.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596058.url(scheme.get, call_596058.host, call_596058.base,
                         call_596058.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596058, url, valid)

proc call*(call_596059: Call_PostStopDBInstance_596044;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string = "";
          Action: string = "StopDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596060 = newJObject()
  var formData_596061 = newJObject()
  add(formData_596061, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_596061, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_596060, "Action", newJString(Action))
  add(query_596060, "Version", newJString(Version))
  result = call_596059.call(nil, query_596060, nil, formData_596061, nil)

var postStopDBInstance* = Call_PostStopDBInstance_596044(
    name: "postStopDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopDBInstance",
    validator: validate_PostStopDBInstance_596045, base: "/",
    url: url_PostStopDBInstance_596046, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBInstance_596027 = ref object of OpenApiRestCall_590348
proc url_GetStopDBInstance_596029(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetStopDBInstance_596028(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_596030 = query.getOrDefault("DBInstanceIdentifier")
  valid_596030 = validateParameter(valid_596030, JString, required = true,
                                 default = nil)
  if valid_596030 != nil:
    section.add "DBInstanceIdentifier", valid_596030
  var valid_596031 = query.getOrDefault("DBSnapshotIdentifier")
  valid_596031 = validateParameter(valid_596031, JString, required = false,
                                 default = nil)
  if valid_596031 != nil:
    section.add "DBSnapshotIdentifier", valid_596031
  var valid_596032 = query.getOrDefault("Action")
  valid_596032 = validateParameter(valid_596032, JString, required = true,
                                 default = newJString("StopDBInstance"))
  if valid_596032 != nil:
    section.add "Action", valid_596032
  var valid_596033 = query.getOrDefault("Version")
  valid_596033 = validateParameter(valid_596033, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_596033 != nil:
    section.add "Version", valid_596033
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_596034 = header.getOrDefault("X-Amz-Signature")
  valid_596034 = validateParameter(valid_596034, JString, required = false,
                                 default = nil)
  if valid_596034 != nil:
    section.add "X-Amz-Signature", valid_596034
  var valid_596035 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_596035 = validateParameter(valid_596035, JString, required = false,
                                 default = nil)
  if valid_596035 != nil:
    section.add "X-Amz-Content-Sha256", valid_596035
  var valid_596036 = header.getOrDefault("X-Amz-Date")
  valid_596036 = validateParameter(valid_596036, JString, required = false,
                                 default = nil)
  if valid_596036 != nil:
    section.add "X-Amz-Date", valid_596036
  var valid_596037 = header.getOrDefault("X-Amz-Credential")
  valid_596037 = validateParameter(valid_596037, JString, required = false,
                                 default = nil)
  if valid_596037 != nil:
    section.add "X-Amz-Credential", valid_596037
  var valid_596038 = header.getOrDefault("X-Amz-Security-Token")
  valid_596038 = validateParameter(valid_596038, JString, required = false,
                                 default = nil)
  if valid_596038 != nil:
    section.add "X-Amz-Security-Token", valid_596038
  var valid_596039 = header.getOrDefault("X-Amz-Algorithm")
  valid_596039 = validateParameter(valid_596039, JString, required = false,
                                 default = nil)
  if valid_596039 != nil:
    section.add "X-Amz-Algorithm", valid_596039
  var valid_596040 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_596040 = validateParameter(valid_596040, JString, required = false,
                                 default = nil)
  if valid_596040 != nil:
    section.add "X-Amz-SignedHeaders", valid_596040
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596041: Call_GetStopDBInstance_596027; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_596041.validator(path, query, header, formData, body)
  let scheme = call_596041.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596041.url(scheme.get, call_596041.host, call_596041.base,
                         call_596041.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596041, url, valid)

proc call*(call_596042: Call_GetStopDBInstance_596027;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string = "";
          Action: string = "StopDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_596043 = newJObject()
  add(query_596043, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_596043, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_596043, "Action", newJString(Action))
  add(query_596043, "Version", newJString(Version))
  result = call_596042.call(nil, query_596043, nil, nil, nil)

var getStopDBInstance* = Call_GetStopDBInstance_596027(name: "getStopDBInstance",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBInstance", validator: validate_GetStopDBInstance_596028,
    base: "/", url: url_GetStopDBInstance_596029,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
  result.sign(input.getOrDefault("query"), SHA256)
