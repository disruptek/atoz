
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, md5, base64,
  httpcore, sigv4

## auto-generated via openapi macro
## title: AWS Identity and Access Management
## version: 2010-05-08
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>AWS Identity and Access Management</fullname> <p>AWS Identity and Access Management (IAM) is a web service that you can use to manage users and user permissions under your AWS account. This guide provides descriptions of IAM actions that you can call programmatically. For general information about IAM, see <a href="http://aws.amazon.com/iam/">AWS Identity and Access Management (IAM)</a>. For the user guide for IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/">Using IAM</a>. </p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to IAM and AWS. For example, the SDKs take care of tasks such as cryptographically signing requests (see below), managing errors, and retrying requests automatically. For information about the AWS SDKs, including how to download and install them, see the <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a> page. </p> </note> <p>We recommend that you use the AWS SDKs to make programmatic API calls to IAM. However, you can also use the IAM Query API to make direct calls to the IAM web service. To learn more about the IAM Query API, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>Using IAM</i> guide. IAM supports GET and POST requests for all actions. That is, the API does not require you to use GET for some actions and POST for others. However, GET requests are subject to the limitation size of a URL. Therefore, for operations that require larger sizes, use a POST request. </p> <p> <b>Signing Requests</b> </p> <p>Requests must be signed using an access key ID and a secret access key. We strongly recommend that you do not use your AWS account access key ID and secret access key for everyday work with IAM. You can use the access key ID and secret access key for an IAM user or you can use the AWS Security Token Service to generate temporary security credentials and use those to sign requests.</p> <p>To sign requests, we recommend that you use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>. If you have an existing application that uses Signature Version 2, you do not have to update it to use Signature Version 4. However, some operations now require Signature Version 4. The documentation for operations that require version 4 indicate this requirement. </p> <p> <b>Additional Resources</b> </p> <p>For more information, see the following:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html">AWS Security Credentials</a>. This topic provides general information about the types of credentials used for accessing AWS. </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAMBestPractices.html">IAM Best Practices</a>. This topic presents a list of suggestions for using the IAM service to help secure your AWS resources. </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a>. This set of topics walk you through the process of signing a request using an access key ID and secret access key. </p> </li> </ul>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/iam/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (path: JsonNode = nil; query: JsonNode = nil;
                          header: JsonNode = nil; formData: JsonNode = nil;
                          body: JsonNode = nil; _: string = ""): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    makeUrl*: proc (protocol: Scheme; host: string; base: string; route: string;
                  path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_21625435 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_21625435](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_21625435): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low .. Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js == nil:
    if required:
      if default != nil:
        return validateParameter(default, kind, required = required)
  result = js
  if result == nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind == kind, $kind & " expected; received " & $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"cn-northwest-1": "iam.cn-northwest-1.amazonaws.com.cn",
                           "cn-north-1": "iam.cn-north-1.amazonaws.com.cn"}.toTable, Scheme.Https: {
      "cn-northwest-1": "iam.cn-northwest-1.amazonaws.com.cn",
      "cn-north-1": "iam.cn-north-1.amazonaws.com.cn"}.toTable}.toTable
const
  awsServiceName = "iam"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode; body: string = ""): Recallable {.
    base.}
type
  Call_PostAddClientIDToOpenIDConnectProvider_21626035 = ref object of OpenApiRestCall_21625435
proc url_PostAddClientIDToOpenIDConnectProvider_21626037(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddClientIDToOpenIDConnectProvider_21626036(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626038 = query.getOrDefault("Action")
  valid_21626038 = validateParameter(valid_21626038, JString, required = true, default = newJString(
      "AddClientIDToOpenIDConnectProvider"))
  if valid_21626038 != nil:
    section.add "Action", valid_21626038
  var valid_21626039 = query.getOrDefault("Version")
  valid_21626039 = validateParameter(valid_21626039, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626039 != nil:
    section.add "Version", valid_21626039
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626040 = header.getOrDefault("X-Amz-Date")
  valid_21626040 = validateParameter(valid_21626040, JString, required = false,
                                   default = nil)
  if valid_21626040 != nil:
    section.add "X-Amz-Date", valid_21626040
  var valid_21626041 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626041 = validateParameter(valid_21626041, JString, required = false,
                                   default = nil)
  if valid_21626041 != nil:
    section.add "X-Amz-Security-Token", valid_21626041
  var valid_21626042 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626042 = validateParameter(valid_21626042, JString, required = false,
                                   default = nil)
  if valid_21626042 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626042
  var valid_21626043 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626043 = validateParameter(valid_21626043, JString, required = false,
                                   default = nil)
  if valid_21626043 != nil:
    section.add "X-Amz-Algorithm", valid_21626043
  var valid_21626044 = header.getOrDefault("X-Amz-Signature")
  valid_21626044 = validateParameter(valid_21626044, JString, required = false,
                                   default = nil)
  if valid_21626044 != nil:
    section.add "X-Amz-Signature", valid_21626044
  var valid_21626045 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626045 = validateParameter(valid_21626045, JString, required = false,
                                   default = nil)
  if valid_21626045 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626045
  var valid_21626046 = header.getOrDefault("X-Amz-Credential")
  valid_21626046 = validateParameter(valid_21626046, JString, required = false,
                                   default = nil)
  if valid_21626046 != nil:
    section.add "X-Amz-Credential", valid_21626046
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_21626047 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_21626047 = validateParameter(valid_21626047, JString, required = true,
                                   default = nil)
  if valid_21626047 != nil:
    section.add "OpenIDConnectProviderArn", valid_21626047
  var valid_21626048 = formData.getOrDefault("ClientID")
  valid_21626048 = validateParameter(valid_21626048, JString, required = true,
                                   default = nil)
  if valid_21626048 != nil:
    section.add "ClientID", valid_21626048
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626049: Call_PostAddClientIDToOpenIDConnectProvider_21626035;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  let valid = call_21626049.validator(path, query, header, formData, body, _)
  let scheme = call_21626049.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626049.makeUrl(scheme.get, call_21626049.host, call_21626049.base,
                               call_21626049.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626049, uri, valid, _)

proc call*(call_21626050: Call_PostAddClientIDToOpenIDConnectProvider_21626035;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "AddClientIDToOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postAddClientIDToOpenIDConnectProvider
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  var query_21626051 = newJObject()
  var formData_21626052 = newJObject()
  add(formData_21626052, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_21626051, "Action", newJString(Action))
  add(query_21626051, "Version", newJString(Version))
  add(formData_21626052, "ClientID", newJString(ClientID))
  result = call_21626050.call(nil, query_21626051, nil, formData_21626052, nil)

var postAddClientIDToOpenIDConnectProvider* = Call_PostAddClientIDToOpenIDConnectProvider_21626035(
    name: "postAddClientIDToOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=AddClientIDToOpenIDConnectProvider",
    validator: validate_PostAddClientIDToOpenIDConnectProvider_21626036,
    base: "/", makeUrl: url_PostAddClientIDToOpenIDConnectProvider_21626037,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddClientIDToOpenIDConnectProvider_21625779 = ref object of OpenApiRestCall_21625435
proc url_GetAddClientIDToOpenIDConnectProvider_21625781(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddClientIDToOpenIDConnectProvider_21625780(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_21625882 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_21625882 = validateParameter(valid_21625882, JString, required = true,
                                   default = nil)
  if valid_21625882 != nil:
    section.add "OpenIDConnectProviderArn", valid_21625882
  var valid_21625897 = query.getOrDefault("Action")
  valid_21625897 = validateParameter(valid_21625897, JString, required = true, default = newJString(
      "AddClientIDToOpenIDConnectProvider"))
  if valid_21625897 != nil:
    section.add "Action", valid_21625897
  var valid_21625898 = query.getOrDefault("ClientID")
  valid_21625898 = validateParameter(valid_21625898, JString, required = true,
                                   default = nil)
  if valid_21625898 != nil:
    section.add "ClientID", valid_21625898
  var valid_21625899 = query.getOrDefault("Version")
  valid_21625899 = validateParameter(valid_21625899, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21625899 != nil:
    section.add "Version", valid_21625899
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21625900 = header.getOrDefault("X-Amz-Date")
  valid_21625900 = validateParameter(valid_21625900, JString, required = false,
                                   default = nil)
  if valid_21625900 != nil:
    section.add "X-Amz-Date", valid_21625900
  var valid_21625901 = header.getOrDefault("X-Amz-Security-Token")
  valid_21625901 = validateParameter(valid_21625901, JString, required = false,
                                   default = nil)
  if valid_21625901 != nil:
    section.add "X-Amz-Security-Token", valid_21625901
  var valid_21625902 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21625902 = validateParameter(valid_21625902, JString, required = false,
                                   default = nil)
  if valid_21625902 != nil:
    section.add "X-Amz-Content-Sha256", valid_21625902
  var valid_21625903 = header.getOrDefault("X-Amz-Algorithm")
  valid_21625903 = validateParameter(valid_21625903, JString, required = false,
                                   default = nil)
  if valid_21625903 != nil:
    section.add "X-Amz-Algorithm", valid_21625903
  var valid_21625904 = header.getOrDefault("X-Amz-Signature")
  valid_21625904 = validateParameter(valid_21625904, JString, required = false,
                                   default = nil)
  if valid_21625904 != nil:
    section.add "X-Amz-Signature", valid_21625904
  var valid_21625905 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21625905 = validateParameter(valid_21625905, JString, required = false,
                                   default = nil)
  if valid_21625905 != nil:
    section.add "X-Amz-SignedHeaders", valid_21625905
  var valid_21625906 = header.getOrDefault("X-Amz-Credential")
  valid_21625906 = validateParameter(valid_21625906, JString, required = false,
                                   default = nil)
  if valid_21625906 != nil:
    section.add "X-Amz-Credential", valid_21625906
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21625931: Call_GetAddClientIDToOpenIDConnectProvider_21625779;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  let valid = call_21625931.validator(path, query, header, formData, body, _)
  let scheme = call_21625931.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21625931.makeUrl(scheme.get, call_21625931.host, call_21625931.base,
                               call_21625931.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21625931, uri, valid, _)

proc call*(call_21625994: Call_GetAddClientIDToOpenIDConnectProvider_21625779;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "AddClientIDToOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getAddClientIDToOpenIDConnectProvider
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   Version: string (required)
  var query_21625996 = newJObject()
  add(query_21625996, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_21625996, "Action", newJString(Action))
  add(query_21625996, "ClientID", newJString(ClientID))
  add(query_21625996, "Version", newJString(Version))
  result = call_21625994.call(nil, query_21625996, nil, nil, nil)

var getAddClientIDToOpenIDConnectProvider* = Call_GetAddClientIDToOpenIDConnectProvider_21625779(
    name: "getAddClientIDToOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=AddClientIDToOpenIDConnectProvider",
    validator: validate_GetAddClientIDToOpenIDConnectProvider_21625780, base: "/",
    makeUrl: url_GetAddClientIDToOpenIDConnectProvider_21625781,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddRoleToInstanceProfile_21626070 = ref object of OpenApiRestCall_21625435
proc url_PostAddRoleToInstanceProfile_21626072(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToInstanceProfile_21626071(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626073 = query.getOrDefault("Action")
  valid_21626073 = validateParameter(valid_21626073, JString, required = true, default = newJString(
      "AddRoleToInstanceProfile"))
  if valid_21626073 != nil:
    section.add "Action", valid_21626073
  var valid_21626074 = query.getOrDefault("Version")
  valid_21626074 = validateParameter(valid_21626074, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626074 != nil:
    section.add "Version", valid_21626074
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626075 = header.getOrDefault("X-Amz-Date")
  valid_21626075 = validateParameter(valid_21626075, JString, required = false,
                                   default = nil)
  if valid_21626075 != nil:
    section.add "X-Amz-Date", valid_21626075
  var valid_21626076 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626076 = validateParameter(valid_21626076, JString, required = false,
                                   default = nil)
  if valid_21626076 != nil:
    section.add "X-Amz-Security-Token", valid_21626076
  var valid_21626077 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626077 = validateParameter(valid_21626077, JString, required = false,
                                   default = nil)
  if valid_21626077 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626077
  var valid_21626078 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626078 = validateParameter(valid_21626078, JString, required = false,
                                   default = nil)
  if valid_21626078 != nil:
    section.add "X-Amz-Algorithm", valid_21626078
  var valid_21626079 = header.getOrDefault("X-Amz-Signature")
  valid_21626079 = validateParameter(valid_21626079, JString, required = false,
                                   default = nil)
  if valid_21626079 != nil:
    section.add "X-Amz-Signature", valid_21626079
  var valid_21626080 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626080 = validateParameter(valid_21626080, JString, required = false,
                                   default = nil)
  if valid_21626080 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626080
  var valid_21626081 = header.getOrDefault("X-Amz-Credential")
  valid_21626081 = validateParameter(valid_21626081, JString, required = false,
                                   default = nil)
  if valid_21626081 != nil:
    section.add "X-Amz-Credential", valid_21626081
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_21626082 = formData.getOrDefault("RoleName")
  valid_21626082 = validateParameter(valid_21626082, JString, required = true,
                                   default = nil)
  if valid_21626082 != nil:
    section.add "RoleName", valid_21626082
  var valid_21626083 = formData.getOrDefault("InstanceProfileName")
  valid_21626083 = validateParameter(valid_21626083, JString, required = true,
                                   default = nil)
  if valid_21626083 != nil:
    section.add "InstanceProfileName", valid_21626083
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626084: Call_PostAddRoleToInstanceProfile_21626070;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_21626084.validator(path, query, header, formData, body, _)
  let scheme = call_21626084.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626084.makeUrl(scheme.get, call_21626084.host, call_21626084.base,
                               call_21626084.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626084, uri, valid, _)

proc call*(call_21626085: Call_PostAddRoleToInstanceProfile_21626070;
          RoleName: string; InstanceProfileName: string;
          Action: string = "AddRoleToInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postAddRoleToInstanceProfile
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21626086 = newJObject()
  var formData_21626087 = newJObject()
  add(formData_21626087, "RoleName", newJString(RoleName))
  add(query_21626086, "Action", newJString(Action))
  add(formData_21626087, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_21626086, "Version", newJString(Version))
  result = call_21626085.call(nil, query_21626086, nil, formData_21626087, nil)

var postAddRoleToInstanceProfile* = Call_PostAddRoleToInstanceProfile_21626070(
    name: "postAddRoleToInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AddRoleToInstanceProfile",
    validator: validate_PostAddRoleToInstanceProfile_21626071, base: "/",
    makeUrl: url_PostAddRoleToInstanceProfile_21626072,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToInstanceProfile_21626053 = ref object of OpenApiRestCall_21625435
proc url_GetAddRoleToInstanceProfile_21626055(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToInstanceProfile_21626054(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_21626056 = query.getOrDefault("InstanceProfileName")
  valid_21626056 = validateParameter(valid_21626056, JString, required = true,
                                   default = nil)
  if valid_21626056 != nil:
    section.add "InstanceProfileName", valid_21626056
  var valid_21626057 = query.getOrDefault("Action")
  valid_21626057 = validateParameter(valid_21626057, JString, required = true, default = newJString(
      "AddRoleToInstanceProfile"))
  if valid_21626057 != nil:
    section.add "Action", valid_21626057
  var valid_21626058 = query.getOrDefault("RoleName")
  valid_21626058 = validateParameter(valid_21626058, JString, required = true,
                                   default = nil)
  if valid_21626058 != nil:
    section.add "RoleName", valid_21626058
  var valid_21626059 = query.getOrDefault("Version")
  valid_21626059 = validateParameter(valid_21626059, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626059 != nil:
    section.add "Version", valid_21626059
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626060 = header.getOrDefault("X-Amz-Date")
  valid_21626060 = validateParameter(valid_21626060, JString, required = false,
                                   default = nil)
  if valid_21626060 != nil:
    section.add "X-Amz-Date", valid_21626060
  var valid_21626061 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626061 = validateParameter(valid_21626061, JString, required = false,
                                   default = nil)
  if valid_21626061 != nil:
    section.add "X-Amz-Security-Token", valid_21626061
  var valid_21626062 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626062 = validateParameter(valid_21626062, JString, required = false,
                                   default = nil)
  if valid_21626062 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626062
  var valid_21626063 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626063 = validateParameter(valid_21626063, JString, required = false,
                                   default = nil)
  if valid_21626063 != nil:
    section.add "X-Amz-Algorithm", valid_21626063
  var valid_21626064 = header.getOrDefault("X-Amz-Signature")
  valid_21626064 = validateParameter(valid_21626064, JString, required = false,
                                   default = nil)
  if valid_21626064 != nil:
    section.add "X-Amz-Signature", valid_21626064
  var valid_21626065 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626065 = validateParameter(valid_21626065, JString, required = false,
                                   default = nil)
  if valid_21626065 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626065
  var valid_21626066 = header.getOrDefault("X-Amz-Credential")
  valid_21626066 = validateParameter(valid_21626066, JString, required = false,
                                   default = nil)
  if valid_21626066 != nil:
    section.add "X-Amz-Credential", valid_21626066
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626067: Call_GetAddRoleToInstanceProfile_21626053;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_21626067.validator(path, query, header, formData, body, _)
  let scheme = call_21626067.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626067.makeUrl(scheme.get, call_21626067.host, call_21626067.base,
                               call_21626067.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626067, uri, valid, _)

proc call*(call_21626068: Call_GetAddRoleToInstanceProfile_21626053;
          InstanceProfileName: string; RoleName: string;
          Action: string = "AddRoleToInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getAddRoleToInstanceProfile
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21626069 = newJObject()
  add(query_21626069, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_21626069, "Action", newJString(Action))
  add(query_21626069, "RoleName", newJString(RoleName))
  add(query_21626069, "Version", newJString(Version))
  result = call_21626068.call(nil, query_21626069, nil, nil, nil)

var getAddRoleToInstanceProfile* = Call_GetAddRoleToInstanceProfile_21626053(
    name: "getAddRoleToInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AddRoleToInstanceProfile",
    validator: validate_GetAddRoleToInstanceProfile_21626054, base: "/",
    makeUrl: url_GetAddRoleToInstanceProfile_21626055,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddUserToGroup_21626105 = ref object of OpenApiRestCall_21625435
proc url_PostAddUserToGroup_21626107(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddUserToGroup_21626106(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Adds the specified user to the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626108 = query.getOrDefault("Action")
  valid_21626108 = validateParameter(valid_21626108, JString, required = true,
                                   default = newJString("AddUserToGroup"))
  if valid_21626108 != nil:
    section.add "Action", valid_21626108
  var valid_21626109 = query.getOrDefault("Version")
  valid_21626109 = validateParameter(valid_21626109, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626109 != nil:
    section.add "Version", valid_21626109
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626110 = header.getOrDefault("X-Amz-Date")
  valid_21626110 = validateParameter(valid_21626110, JString, required = false,
                                   default = nil)
  if valid_21626110 != nil:
    section.add "X-Amz-Date", valid_21626110
  var valid_21626111 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626111 = validateParameter(valid_21626111, JString, required = false,
                                   default = nil)
  if valid_21626111 != nil:
    section.add "X-Amz-Security-Token", valid_21626111
  var valid_21626112 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626112 = validateParameter(valid_21626112, JString, required = false,
                                   default = nil)
  if valid_21626112 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626112
  var valid_21626113 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626113 = validateParameter(valid_21626113, JString, required = false,
                                   default = nil)
  if valid_21626113 != nil:
    section.add "X-Amz-Algorithm", valid_21626113
  var valid_21626114 = header.getOrDefault("X-Amz-Signature")
  valid_21626114 = validateParameter(valid_21626114, JString, required = false,
                                   default = nil)
  if valid_21626114 != nil:
    section.add "X-Amz-Signature", valid_21626114
  var valid_21626115 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626115 = validateParameter(valid_21626115, JString, required = false,
                                   default = nil)
  if valid_21626115 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626115
  var valid_21626116 = header.getOrDefault("X-Amz-Credential")
  valid_21626116 = validateParameter(valid_21626116, JString, required = false,
                                   default = nil)
  if valid_21626116 != nil:
    section.add "X-Amz-Credential", valid_21626116
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21626117 = formData.getOrDefault("UserName")
  valid_21626117 = validateParameter(valid_21626117, JString, required = true,
                                   default = nil)
  if valid_21626117 != nil:
    section.add "UserName", valid_21626117
  var valid_21626118 = formData.getOrDefault("GroupName")
  valid_21626118 = validateParameter(valid_21626118, JString, required = true,
                                   default = nil)
  if valid_21626118 != nil:
    section.add "GroupName", valid_21626118
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626119: Call_PostAddUserToGroup_21626105; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds the specified user to the specified group.
  ## 
  let valid = call_21626119.validator(path, query, header, formData, body, _)
  let scheme = call_21626119.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626119.makeUrl(scheme.get, call_21626119.host, call_21626119.base,
                               call_21626119.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626119, uri, valid, _)

proc call*(call_21626120: Call_PostAddUserToGroup_21626105; UserName: string;
          GroupName: string; Action: string = "AddUserToGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postAddUserToGroup
  ## Adds the specified user to the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626121 = newJObject()
  var formData_21626122 = newJObject()
  add(formData_21626122, "UserName", newJString(UserName))
  add(formData_21626122, "GroupName", newJString(GroupName))
  add(query_21626121, "Action", newJString(Action))
  add(query_21626121, "Version", newJString(Version))
  result = call_21626120.call(nil, query_21626121, nil, formData_21626122, nil)

var postAddUserToGroup* = Call_PostAddUserToGroup_21626105(
    name: "postAddUserToGroup", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AddUserToGroup",
    validator: validate_PostAddUserToGroup_21626106, base: "/",
    makeUrl: url_PostAddUserToGroup_21626107, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddUserToGroup_21626088 = ref object of OpenApiRestCall_21625435
proc url_GetAddUserToGroup_21626090(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddUserToGroup_21626089(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Adds the specified user to the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_21626091 = query.getOrDefault("UserName")
  valid_21626091 = validateParameter(valid_21626091, JString, required = true,
                                   default = nil)
  if valid_21626091 != nil:
    section.add "UserName", valid_21626091
  var valid_21626092 = query.getOrDefault("Action")
  valid_21626092 = validateParameter(valid_21626092, JString, required = true,
                                   default = newJString("AddUserToGroup"))
  if valid_21626092 != nil:
    section.add "Action", valid_21626092
  var valid_21626093 = query.getOrDefault("GroupName")
  valid_21626093 = validateParameter(valid_21626093, JString, required = true,
                                   default = nil)
  if valid_21626093 != nil:
    section.add "GroupName", valid_21626093
  var valid_21626094 = query.getOrDefault("Version")
  valid_21626094 = validateParameter(valid_21626094, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626094 != nil:
    section.add "Version", valid_21626094
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626095 = header.getOrDefault("X-Amz-Date")
  valid_21626095 = validateParameter(valid_21626095, JString, required = false,
                                   default = nil)
  if valid_21626095 != nil:
    section.add "X-Amz-Date", valid_21626095
  var valid_21626096 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626096 = validateParameter(valid_21626096, JString, required = false,
                                   default = nil)
  if valid_21626096 != nil:
    section.add "X-Amz-Security-Token", valid_21626096
  var valid_21626097 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626097 = validateParameter(valid_21626097, JString, required = false,
                                   default = nil)
  if valid_21626097 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626097
  var valid_21626098 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626098 = validateParameter(valid_21626098, JString, required = false,
                                   default = nil)
  if valid_21626098 != nil:
    section.add "X-Amz-Algorithm", valid_21626098
  var valid_21626099 = header.getOrDefault("X-Amz-Signature")
  valid_21626099 = validateParameter(valid_21626099, JString, required = false,
                                   default = nil)
  if valid_21626099 != nil:
    section.add "X-Amz-Signature", valid_21626099
  var valid_21626100 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626100 = validateParameter(valid_21626100, JString, required = false,
                                   default = nil)
  if valid_21626100 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626100
  var valid_21626101 = header.getOrDefault("X-Amz-Credential")
  valid_21626101 = validateParameter(valid_21626101, JString, required = false,
                                   default = nil)
  if valid_21626101 != nil:
    section.add "X-Amz-Credential", valid_21626101
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626102: Call_GetAddUserToGroup_21626088; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds the specified user to the specified group.
  ## 
  let valid = call_21626102.validator(path, query, header, formData, body, _)
  let scheme = call_21626102.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626102.makeUrl(scheme.get, call_21626102.host, call_21626102.base,
                               call_21626102.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626102, uri, valid, _)

proc call*(call_21626103: Call_GetAddUserToGroup_21626088; UserName: string;
          GroupName: string; Action: string = "AddUserToGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getAddUserToGroup
  ## Adds the specified user to the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21626104 = newJObject()
  add(query_21626104, "UserName", newJString(UserName))
  add(query_21626104, "Action", newJString(Action))
  add(query_21626104, "GroupName", newJString(GroupName))
  add(query_21626104, "Version", newJString(Version))
  result = call_21626103.call(nil, query_21626104, nil, nil, nil)

var getAddUserToGroup* = Call_GetAddUserToGroup_21626088(name: "getAddUserToGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=AddUserToGroup", validator: validate_GetAddUserToGroup_21626089,
    base: "/", makeUrl: url_GetAddUserToGroup_21626090,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachGroupPolicy_21626140 = ref object of OpenApiRestCall_21625435
proc url_PostAttachGroupPolicy_21626142(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachGroupPolicy_21626141(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626143 = query.getOrDefault("Action")
  valid_21626143 = validateParameter(valid_21626143, JString, required = true,
                                   default = newJString("AttachGroupPolicy"))
  if valid_21626143 != nil:
    section.add "Action", valid_21626143
  var valid_21626144 = query.getOrDefault("Version")
  valid_21626144 = validateParameter(valid_21626144, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626144 != nil:
    section.add "Version", valid_21626144
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626145 = header.getOrDefault("X-Amz-Date")
  valid_21626145 = validateParameter(valid_21626145, JString, required = false,
                                   default = nil)
  if valid_21626145 != nil:
    section.add "X-Amz-Date", valid_21626145
  var valid_21626146 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626146 = validateParameter(valid_21626146, JString, required = false,
                                   default = nil)
  if valid_21626146 != nil:
    section.add "X-Amz-Security-Token", valid_21626146
  var valid_21626147 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626147 = validateParameter(valid_21626147, JString, required = false,
                                   default = nil)
  if valid_21626147 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626147
  var valid_21626148 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626148 = validateParameter(valid_21626148, JString, required = false,
                                   default = nil)
  if valid_21626148 != nil:
    section.add "X-Amz-Algorithm", valid_21626148
  var valid_21626149 = header.getOrDefault("X-Amz-Signature")
  valid_21626149 = validateParameter(valid_21626149, JString, required = false,
                                   default = nil)
  if valid_21626149 != nil:
    section.add "X-Amz-Signature", valid_21626149
  var valid_21626150 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626150 = validateParameter(valid_21626150, JString, required = false,
                                   default = nil)
  if valid_21626150 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626150
  var valid_21626151 = header.getOrDefault("X-Amz-Credential")
  valid_21626151 = validateParameter(valid_21626151, JString, required = false,
                                   default = nil)
  if valid_21626151 != nil:
    section.add "X-Amz-Credential", valid_21626151
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_21626152 = formData.getOrDefault("PolicyArn")
  valid_21626152 = validateParameter(valid_21626152, JString, required = true,
                                   default = nil)
  if valid_21626152 != nil:
    section.add "PolicyArn", valid_21626152
  var valid_21626153 = formData.getOrDefault("GroupName")
  valid_21626153 = validateParameter(valid_21626153, JString, required = true,
                                   default = nil)
  if valid_21626153 != nil:
    section.add "GroupName", valid_21626153
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626154: Call_PostAttachGroupPolicy_21626140;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626154.validator(path, query, header, formData, body, _)
  let scheme = call_21626154.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626154.makeUrl(scheme.get, call_21626154.host, call_21626154.base,
                               call_21626154.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626154, uri, valid, _)

proc call*(call_21626155: Call_PostAttachGroupPolicy_21626140; PolicyArn: string;
          GroupName: string; Action: string = "AttachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachGroupPolicy
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626156 = newJObject()
  var formData_21626157 = newJObject()
  add(formData_21626157, "PolicyArn", newJString(PolicyArn))
  add(formData_21626157, "GroupName", newJString(GroupName))
  add(query_21626156, "Action", newJString(Action))
  add(query_21626156, "Version", newJString(Version))
  result = call_21626155.call(nil, query_21626156, nil, formData_21626157, nil)

var postAttachGroupPolicy* = Call_PostAttachGroupPolicy_21626140(
    name: "postAttachGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachGroupPolicy",
    validator: validate_PostAttachGroupPolicy_21626141, base: "/",
    makeUrl: url_PostAttachGroupPolicy_21626142,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachGroupPolicy_21626123 = ref object of OpenApiRestCall_21625435
proc url_GetAttachGroupPolicy_21626125(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachGroupPolicy_21626124(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_21626126 = query.getOrDefault("PolicyArn")
  valid_21626126 = validateParameter(valid_21626126, JString, required = true,
                                   default = nil)
  if valid_21626126 != nil:
    section.add "PolicyArn", valid_21626126
  var valid_21626127 = query.getOrDefault("Action")
  valid_21626127 = validateParameter(valid_21626127, JString, required = true,
                                   default = newJString("AttachGroupPolicy"))
  if valid_21626127 != nil:
    section.add "Action", valid_21626127
  var valid_21626128 = query.getOrDefault("GroupName")
  valid_21626128 = validateParameter(valid_21626128, JString, required = true,
                                   default = nil)
  if valid_21626128 != nil:
    section.add "GroupName", valid_21626128
  var valid_21626129 = query.getOrDefault("Version")
  valid_21626129 = validateParameter(valid_21626129, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626129 != nil:
    section.add "Version", valid_21626129
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626130 = header.getOrDefault("X-Amz-Date")
  valid_21626130 = validateParameter(valid_21626130, JString, required = false,
                                   default = nil)
  if valid_21626130 != nil:
    section.add "X-Amz-Date", valid_21626130
  var valid_21626131 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626131 = validateParameter(valid_21626131, JString, required = false,
                                   default = nil)
  if valid_21626131 != nil:
    section.add "X-Amz-Security-Token", valid_21626131
  var valid_21626132 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626132 = validateParameter(valid_21626132, JString, required = false,
                                   default = nil)
  if valid_21626132 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626132
  var valid_21626133 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626133 = validateParameter(valid_21626133, JString, required = false,
                                   default = nil)
  if valid_21626133 != nil:
    section.add "X-Amz-Algorithm", valid_21626133
  var valid_21626134 = header.getOrDefault("X-Amz-Signature")
  valid_21626134 = validateParameter(valid_21626134, JString, required = false,
                                   default = nil)
  if valid_21626134 != nil:
    section.add "X-Amz-Signature", valid_21626134
  var valid_21626135 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626135 = validateParameter(valid_21626135, JString, required = false,
                                   default = nil)
  if valid_21626135 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626135
  var valid_21626136 = header.getOrDefault("X-Amz-Credential")
  valid_21626136 = validateParameter(valid_21626136, JString, required = false,
                                   default = nil)
  if valid_21626136 != nil:
    section.add "X-Amz-Credential", valid_21626136
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626137: Call_GetAttachGroupPolicy_21626123; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626137.validator(path, query, header, formData, body, _)
  let scheme = call_21626137.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626137.makeUrl(scheme.get, call_21626137.host, call_21626137.base,
                               call_21626137.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626137, uri, valid, _)

proc call*(call_21626138: Call_GetAttachGroupPolicy_21626123; PolicyArn: string;
          GroupName: string; Action: string = "AttachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachGroupPolicy
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21626139 = newJObject()
  add(query_21626139, "PolicyArn", newJString(PolicyArn))
  add(query_21626139, "Action", newJString(Action))
  add(query_21626139, "GroupName", newJString(GroupName))
  add(query_21626139, "Version", newJString(Version))
  result = call_21626138.call(nil, query_21626139, nil, nil, nil)

var getAttachGroupPolicy* = Call_GetAttachGroupPolicy_21626123(
    name: "getAttachGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachGroupPolicy",
    validator: validate_GetAttachGroupPolicy_21626124, base: "/",
    makeUrl: url_GetAttachGroupPolicy_21626125,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachRolePolicy_21626175 = ref object of OpenApiRestCall_21625435
proc url_PostAttachRolePolicy_21626177(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachRolePolicy_21626176(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626178 = query.getOrDefault("Action")
  valid_21626178 = validateParameter(valid_21626178, JString, required = true,
                                   default = newJString("AttachRolePolicy"))
  if valid_21626178 != nil:
    section.add "Action", valid_21626178
  var valid_21626179 = query.getOrDefault("Version")
  valid_21626179 = validateParameter(valid_21626179, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626179 != nil:
    section.add "Version", valid_21626179
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626180 = header.getOrDefault("X-Amz-Date")
  valid_21626180 = validateParameter(valid_21626180, JString, required = false,
                                   default = nil)
  if valid_21626180 != nil:
    section.add "X-Amz-Date", valid_21626180
  var valid_21626181 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626181 = validateParameter(valid_21626181, JString, required = false,
                                   default = nil)
  if valid_21626181 != nil:
    section.add "X-Amz-Security-Token", valid_21626181
  var valid_21626182 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626182 = validateParameter(valid_21626182, JString, required = false,
                                   default = nil)
  if valid_21626182 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626182
  var valid_21626183 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626183 = validateParameter(valid_21626183, JString, required = false,
                                   default = nil)
  if valid_21626183 != nil:
    section.add "X-Amz-Algorithm", valid_21626183
  var valid_21626184 = header.getOrDefault("X-Amz-Signature")
  valid_21626184 = validateParameter(valid_21626184, JString, required = false,
                                   default = nil)
  if valid_21626184 != nil:
    section.add "X-Amz-Signature", valid_21626184
  var valid_21626185 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626185 = validateParameter(valid_21626185, JString, required = false,
                                   default = nil)
  if valid_21626185 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626185
  var valid_21626186 = header.getOrDefault("X-Amz-Credential")
  valid_21626186 = validateParameter(valid_21626186, JString, required = false,
                                   default = nil)
  if valid_21626186 != nil:
    section.add "X-Amz-Credential", valid_21626186
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_21626187 = formData.getOrDefault("RoleName")
  valid_21626187 = validateParameter(valid_21626187, JString, required = true,
                                   default = nil)
  if valid_21626187 != nil:
    section.add "RoleName", valid_21626187
  var valid_21626188 = formData.getOrDefault("PolicyArn")
  valid_21626188 = validateParameter(valid_21626188, JString, required = true,
                                   default = nil)
  if valid_21626188 != nil:
    section.add "PolicyArn", valid_21626188
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626189: Call_PostAttachRolePolicy_21626175; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626189.validator(path, query, header, formData, body, _)
  let scheme = call_21626189.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626189.makeUrl(scheme.get, call_21626189.host, call_21626189.base,
                               call_21626189.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626189, uri, valid, _)

proc call*(call_21626190: Call_PostAttachRolePolicy_21626175; RoleName: string;
          PolicyArn: string; Action: string = "AttachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachRolePolicy
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626191 = newJObject()
  var formData_21626192 = newJObject()
  add(formData_21626192, "RoleName", newJString(RoleName))
  add(formData_21626192, "PolicyArn", newJString(PolicyArn))
  add(query_21626191, "Action", newJString(Action))
  add(query_21626191, "Version", newJString(Version))
  result = call_21626190.call(nil, query_21626191, nil, formData_21626192, nil)

var postAttachRolePolicy* = Call_PostAttachRolePolicy_21626175(
    name: "postAttachRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachRolePolicy",
    validator: validate_PostAttachRolePolicy_21626176, base: "/",
    makeUrl: url_PostAttachRolePolicy_21626177,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachRolePolicy_21626158 = ref object of OpenApiRestCall_21625435
proc url_GetAttachRolePolicy_21626160(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachRolePolicy_21626159(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_21626161 = query.getOrDefault("PolicyArn")
  valid_21626161 = validateParameter(valid_21626161, JString, required = true,
                                   default = nil)
  if valid_21626161 != nil:
    section.add "PolicyArn", valid_21626161
  var valid_21626162 = query.getOrDefault("Action")
  valid_21626162 = validateParameter(valid_21626162, JString, required = true,
                                   default = newJString("AttachRolePolicy"))
  if valid_21626162 != nil:
    section.add "Action", valid_21626162
  var valid_21626163 = query.getOrDefault("RoleName")
  valid_21626163 = validateParameter(valid_21626163, JString, required = true,
                                   default = nil)
  if valid_21626163 != nil:
    section.add "RoleName", valid_21626163
  var valid_21626164 = query.getOrDefault("Version")
  valid_21626164 = validateParameter(valid_21626164, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626164 != nil:
    section.add "Version", valid_21626164
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626165 = header.getOrDefault("X-Amz-Date")
  valid_21626165 = validateParameter(valid_21626165, JString, required = false,
                                   default = nil)
  if valid_21626165 != nil:
    section.add "X-Amz-Date", valid_21626165
  var valid_21626166 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626166 = validateParameter(valid_21626166, JString, required = false,
                                   default = nil)
  if valid_21626166 != nil:
    section.add "X-Amz-Security-Token", valid_21626166
  var valid_21626167 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626167 = validateParameter(valid_21626167, JString, required = false,
                                   default = nil)
  if valid_21626167 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626167
  var valid_21626168 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626168 = validateParameter(valid_21626168, JString, required = false,
                                   default = nil)
  if valid_21626168 != nil:
    section.add "X-Amz-Algorithm", valid_21626168
  var valid_21626169 = header.getOrDefault("X-Amz-Signature")
  valid_21626169 = validateParameter(valid_21626169, JString, required = false,
                                   default = nil)
  if valid_21626169 != nil:
    section.add "X-Amz-Signature", valid_21626169
  var valid_21626170 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626170 = validateParameter(valid_21626170, JString, required = false,
                                   default = nil)
  if valid_21626170 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626170
  var valid_21626171 = header.getOrDefault("X-Amz-Credential")
  valid_21626171 = validateParameter(valid_21626171, JString, required = false,
                                   default = nil)
  if valid_21626171 != nil:
    section.add "X-Amz-Credential", valid_21626171
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626172: Call_GetAttachRolePolicy_21626158; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626172.validator(path, query, header, formData, body, _)
  let scheme = call_21626172.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626172.makeUrl(scheme.get, call_21626172.host, call_21626172.base,
                               call_21626172.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626172, uri, valid, _)

proc call*(call_21626173: Call_GetAttachRolePolicy_21626158; PolicyArn: string;
          RoleName: string; Action: string = "AttachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachRolePolicy
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21626174 = newJObject()
  add(query_21626174, "PolicyArn", newJString(PolicyArn))
  add(query_21626174, "Action", newJString(Action))
  add(query_21626174, "RoleName", newJString(RoleName))
  add(query_21626174, "Version", newJString(Version))
  result = call_21626173.call(nil, query_21626174, nil, nil, nil)

var getAttachRolePolicy* = Call_GetAttachRolePolicy_21626158(
    name: "getAttachRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachRolePolicy",
    validator: validate_GetAttachRolePolicy_21626159, base: "/",
    makeUrl: url_GetAttachRolePolicy_21626160,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachUserPolicy_21626210 = ref object of OpenApiRestCall_21625435
proc url_PostAttachUserPolicy_21626212(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachUserPolicy_21626211(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626213 = query.getOrDefault("Action")
  valid_21626213 = validateParameter(valid_21626213, JString, required = true,
                                   default = newJString("AttachUserPolicy"))
  if valid_21626213 != nil:
    section.add "Action", valid_21626213
  var valid_21626214 = query.getOrDefault("Version")
  valid_21626214 = validateParameter(valid_21626214, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626214 != nil:
    section.add "Version", valid_21626214
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626215 = header.getOrDefault("X-Amz-Date")
  valid_21626215 = validateParameter(valid_21626215, JString, required = false,
                                   default = nil)
  if valid_21626215 != nil:
    section.add "X-Amz-Date", valid_21626215
  var valid_21626216 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626216 = validateParameter(valid_21626216, JString, required = false,
                                   default = nil)
  if valid_21626216 != nil:
    section.add "X-Amz-Security-Token", valid_21626216
  var valid_21626217 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626217 = validateParameter(valid_21626217, JString, required = false,
                                   default = nil)
  if valid_21626217 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626217
  var valid_21626218 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626218 = validateParameter(valid_21626218, JString, required = false,
                                   default = nil)
  if valid_21626218 != nil:
    section.add "X-Amz-Algorithm", valid_21626218
  var valid_21626219 = header.getOrDefault("X-Amz-Signature")
  valid_21626219 = validateParameter(valid_21626219, JString, required = false,
                                   default = nil)
  if valid_21626219 != nil:
    section.add "X-Amz-Signature", valid_21626219
  var valid_21626220 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626220 = validateParameter(valid_21626220, JString, required = false,
                                   default = nil)
  if valid_21626220 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626220
  var valid_21626221 = header.getOrDefault("X-Amz-Credential")
  valid_21626221 = validateParameter(valid_21626221, JString, required = false,
                                   default = nil)
  if valid_21626221 != nil:
    section.add "X-Amz-Credential", valid_21626221
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21626222 = formData.getOrDefault("UserName")
  valid_21626222 = validateParameter(valid_21626222, JString, required = true,
                                   default = nil)
  if valid_21626222 != nil:
    section.add "UserName", valid_21626222
  var valid_21626223 = formData.getOrDefault("PolicyArn")
  valid_21626223 = validateParameter(valid_21626223, JString, required = true,
                                   default = nil)
  if valid_21626223 != nil:
    section.add "PolicyArn", valid_21626223
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626224: Call_PostAttachUserPolicy_21626210; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626224.validator(path, query, header, formData, body, _)
  let scheme = call_21626224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626224.makeUrl(scheme.get, call_21626224.host, call_21626224.base,
                               call_21626224.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626224, uri, valid, _)

proc call*(call_21626225: Call_PostAttachUserPolicy_21626210; UserName: string;
          PolicyArn: string; Action: string = "AttachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachUserPolicy
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626226 = newJObject()
  var formData_21626227 = newJObject()
  add(formData_21626227, "UserName", newJString(UserName))
  add(formData_21626227, "PolicyArn", newJString(PolicyArn))
  add(query_21626226, "Action", newJString(Action))
  add(query_21626226, "Version", newJString(Version))
  result = call_21626225.call(nil, query_21626226, nil, formData_21626227, nil)

var postAttachUserPolicy* = Call_PostAttachUserPolicy_21626210(
    name: "postAttachUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachUserPolicy",
    validator: validate_PostAttachUserPolicy_21626211, base: "/",
    makeUrl: url_PostAttachUserPolicy_21626212,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachUserPolicy_21626193 = ref object of OpenApiRestCall_21625435
proc url_GetAttachUserPolicy_21626195(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachUserPolicy_21626194(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_21626196 = query.getOrDefault("PolicyArn")
  valid_21626196 = validateParameter(valid_21626196, JString, required = true,
                                   default = nil)
  if valid_21626196 != nil:
    section.add "PolicyArn", valid_21626196
  var valid_21626197 = query.getOrDefault("UserName")
  valid_21626197 = validateParameter(valid_21626197, JString, required = true,
                                   default = nil)
  if valid_21626197 != nil:
    section.add "UserName", valid_21626197
  var valid_21626198 = query.getOrDefault("Action")
  valid_21626198 = validateParameter(valid_21626198, JString, required = true,
                                   default = newJString("AttachUserPolicy"))
  if valid_21626198 != nil:
    section.add "Action", valid_21626198
  var valid_21626199 = query.getOrDefault("Version")
  valid_21626199 = validateParameter(valid_21626199, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626199 != nil:
    section.add "Version", valid_21626199
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626200 = header.getOrDefault("X-Amz-Date")
  valid_21626200 = validateParameter(valid_21626200, JString, required = false,
                                   default = nil)
  if valid_21626200 != nil:
    section.add "X-Amz-Date", valid_21626200
  var valid_21626201 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626201 = validateParameter(valid_21626201, JString, required = false,
                                   default = nil)
  if valid_21626201 != nil:
    section.add "X-Amz-Security-Token", valid_21626201
  var valid_21626202 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626202 = validateParameter(valid_21626202, JString, required = false,
                                   default = nil)
  if valid_21626202 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626202
  var valid_21626203 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626203 = validateParameter(valid_21626203, JString, required = false,
                                   default = nil)
  if valid_21626203 != nil:
    section.add "X-Amz-Algorithm", valid_21626203
  var valid_21626204 = header.getOrDefault("X-Amz-Signature")
  valid_21626204 = validateParameter(valid_21626204, JString, required = false,
                                   default = nil)
  if valid_21626204 != nil:
    section.add "X-Amz-Signature", valid_21626204
  var valid_21626205 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626205 = validateParameter(valid_21626205, JString, required = false,
                                   default = nil)
  if valid_21626205 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626205
  var valid_21626206 = header.getOrDefault("X-Amz-Credential")
  valid_21626206 = validateParameter(valid_21626206, JString, required = false,
                                   default = nil)
  if valid_21626206 != nil:
    section.add "X-Amz-Credential", valid_21626206
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626207: Call_GetAttachUserPolicy_21626193; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626207.validator(path, query, header, formData, body, _)
  let scheme = call_21626207.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626207.makeUrl(scheme.get, call_21626207.host, call_21626207.base,
                               call_21626207.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626207, uri, valid, _)

proc call*(call_21626208: Call_GetAttachUserPolicy_21626193; PolicyArn: string;
          UserName: string; Action: string = "AttachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachUserPolicy
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626209 = newJObject()
  add(query_21626209, "PolicyArn", newJString(PolicyArn))
  add(query_21626209, "UserName", newJString(UserName))
  add(query_21626209, "Action", newJString(Action))
  add(query_21626209, "Version", newJString(Version))
  result = call_21626208.call(nil, query_21626209, nil, nil, nil)

var getAttachUserPolicy* = Call_GetAttachUserPolicy_21626193(
    name: "getAttachUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachUserPolicy",
    validator: validate_GetAttachUserPolicy_21626194, base: "/",
    makeUrl: url_GetAttachUserPolicy_21626195,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostChangePassword_21626245 = ref object of OpenApiRestCall_21625435
proc url_PostChangePassword_21626247(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostChangePassword_21626246(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626248 = query.getOrDefault("Action")
  valid_21626248 = validateParameter(valid_21626248, JString, required = true,
                                   default = newJString("ChangePassword"))
  if valid_21626248 != nil:
    section.add "Action", valid_21626248
  var valid_21626249 = query.getOrDefault("Version")
  valid_21626249 = validateParameter(valid_21626249, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626249 != nil:
    section.add "Version", valid_21626249
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626250 = header.getOrDefault("X-Amz-Date")
  valid_21626250 = validateParameter(valid_21626250, JString, required = false,
                                   default = nil)
  if valid_21626250 != nil:
    section.add "X-Amz-Date", valid_21626250
  var valid_21626251 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626251 = validateParameter(valid_21626251, JString, required = false,
                                   default = nil)
  if valid_21626251 != nil:
    section.add "X-Amz-Security-Token", valid_21626251
  var valid_21626252 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626252 = validateParameter(valid_21626252, JString, required = false,
                                   default = nil)
  if valid_21626252 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626252
  var valid_21626253 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626253 = validateParameter(valid_21626253, JString, required = false,
                                   default = nil)
  if valid_21626253 != nil:
    section.add "X-Amz-Algorithm", valid_21626253
  var valid_21626254 = header.getOrDefault("X-Amz-Signature")
  valid_21626254 = validateParameter(valid_21626254, JString, required = false,
                                   default = nil)
  if valid_21626254 != nil:
    section.add "X-Amz-Signature", valid_21626254
  var valid_21626255 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626255 = validateParameter(valid_21626255, JString, required = false,
                                   default = nil)
  if valid_21626255 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626255
  var valid_21626256 = header.getOrDefault("X-Amz-Credential")
  valid_21626256 = validateParameter(valid_21626256, JString, required = false,
                                   default = nil)
  if valid_21626256 != nil:
    section.add "X-Amz-Credential", valid_21626256
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewPassword: JString (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   OldPassword: JString (required)
  ##              : The IAM user's current password.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `NewPassword` field"
  var valid_21626257 = formData.getOrDefault("NewPassword")
  valid_21626257 = validateParameter(valid_21626257, JString, required = true,
                                   default = nil)
  if valid_21626257 != nil:
    section.add "NewPassword", valid_21626257
  var valid_21626258 = formData.getOrDefault("OldPassword")
  valid_21626258 = validateParameter(valid_21626258, JString, required = true,
                                   default = nil)
  if valid_21626258 != nil:
    section.add "OldPassword", valid_21626258
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626259: Call_PostChangePassword_21626245; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626259.validator(path, query, header, formData, body, _)
  let scheme = call_21626259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626259.makeUrl(scheme.get, call_21626259.host, call_21626259.base,
                               call_21626259.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626259, uri, valid, _)

proc call*(call_21626260: Call_PostChangePassword_21626245; NewPassword: string;
          OldPassword: string; Action: string = "ChangePassword";
          Version: string = "2010-05-08"): Recallable =
  ## postChangePassword
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   NewPassword: string (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   OldPassword: string (required)
  ##              : The IAM user's current password.
  ##   Version: string (required)
  var query_21626261 = newJObject()
  var formData_21626262 = newJObject()
  add(query_21626261, "Action", newJString(Action))
  add(formData_21626262, "NewPassword", newJString(NewPassword))
  add(formData_21626262, "OldPassword", newJString(OldPassword))
  add(query_21626261, "Version", newJString(Version))
  result = call_21626260.call(nil, query_21626261, nil, formData_21626262, nil)

var postChangePassword* = Call_PostChangePassword_21626245(
    name: "postChangePassword", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ChangePassword",
    validator: validate_PostChangePassword_21626246, base: "/",
    makeUrl: url_PostChangePassword_21626247, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChangePassword_21626228 = ref object of OpenApiRestCall_21625435
proc url_GetChangePassword_21626230(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetChangePassword_21626229(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OldPassword: JString (required)
  ##              : The IAM user's current password.
  ##   Action: JString (required)
  ##   NewPassword: JString (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OldPassword` field"
  var valid_21626231 = query.getOrDefault("OldPassword")
  valid_21626231 = validateParameter(valid_21626231, JString, required = true,
                                   default = nil)
  if valid_21626231 != nil:
    section.add "OldPassword", valid_21626231
  var valid_21626232 = query.getOrDefault("Action")
  valid_21626232 = validateParameter(valid_21626232, JString, required = true,
                                   default = newJString("ChangePassword"))
  if valid_21626232 != nil:
    section.add "Action", valid_21626232
  var valid_21626233 = query.getOrDefault("NewPassword")
  valid_21626233 = validateParameter(valid_21626233, JString, required = true,
                                   default = nil)
  if valid_21626233 != nil:
    section.add "NewPassword", valid_21626233
  var valid_21626234 = query.getOrDefault("Version")
  valid_21626234 = validateParameter(valid_21626234, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626234 != nil:
    section.add "Version", valid_21626234
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626235 = header.getOrDefault("X-Amz-Date")
  valid_21626235 = validateParameter(valid_21626235, JString, required = false,
                                   default = nil)
  if valid_21626235 != nil:
    section.add "X-Amz-Date", valid_21626235
  var valid_21626236 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626236 = validateParameter(valid_21626236, JString, required = false,
                                   default = nil)
  if valid_21626236 != nil:
    section.add "X-Amz-Security-Token", valid_21626236
  var valid_21626237 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626237 = validateParameter(valid_21626237, JString, required = false,
                                   default = nil)
  if valid_21626237 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626237
  var valid_21626238 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626238 = validateParameter(valid_21626238, JString, required = false,
                                   default = nil)
  if valid_21626238 != nil:
    section.add "X-Amz-Algorithm", valid_21626238
  var valid_21626239 = header.getOrDefault("X-Amz-Signature")
  valid_21626239 = validateParameter(valid_21626239, JString, required = false,
                                   default = nil)
  if valid_21626239 != nil:
    section.add "X-Amz-Signature", valid_21626239
  var valid_21626240 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626240 = validateParameter(valid_21626240, JString, required = false,
                                   default = nil)
  if valid_21626240 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626240
  var valid_21626241 = header.getOrDefault("X-Amz-Credential")
  valid_21626241 = validateParameter(valid_21626241, JString, required = false,
                                   default = nil)
  if valid_21626241 != nil:
    section.add "X-Amz-Credential", valid_21626241
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626242: Call_GetChangePassword_21626228; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626242.validator(path, query, header, formData, body, _)
  let scheme = call_21626242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626242.makeUrl(scheme.get, call_21626242.host, call_21626242.base,
                               call_21626242.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626242, uri, valid, _)

proc call*(call_21626243: Call_GetChangePassword_21626228; OldPassword: string;
          NewPassword: string; Action: string = "ChangePassword";
          Version: string = "2010-05-08"): Recallable =
  ## getChangePassword
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   OldPassword: string (required)
  ##              : The IAM user's current password.
  ##   Action: string (required)
  ##   NewPassword: string (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: string (required)
  var query_21626244 = newJObject()
  add(query_21626244, "OldPassword", newJString(OldPassword))
  add(query_21626244, "Action", newJString(Action))
  add(query_21626244, "NewPassword", newJString(NewPassword))
  add(query_21626244, "Version", newJString(Version))
  result = call_21626243.call(nil, query_21626244, nil, nil, nil)

var getChangePassword* = Call_GetChangePassword_21626228(name: "getChangePassword",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ChangePassword", validator: validate_GetChangePassword_21626229,
    base: "/", makeUrl: url_GetChangePassword_21626230,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAccessKey_21626280 = ref object of OpenApiRestCall_21625435
proc url_PostCreateAccessKey_21626282(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateAccessKey_21626281(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626283 = query.getOrDefault("Action")
  valid_21626283 = validateParameter(valid_21626283, JString, required = true,
                                   default = newJString("CreateAccessKey"))
  if valid_21626283 != nil:
    section.add "Action", valid_21626283
  var valid_21626284 = query.getOrDefault("Version")
  valid_21626284 = validateParameter(valid_21626284, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626284 != nil:
    section.add "Version", valid_21626284
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626285 = header.getOrDefault("X-Amz-Date")
  valid_21626285 = validateParameter(valid_21626285, JString, required = false,
                                   default = nil)
  if valid_21626285 != nil:
    section.add "X-Amz-Date", valid_21626285
  var valid_21626286 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626286 = validateParameter(valid_21626286, JString, required = false,
                                   default = nil)
  if valid_21626286 != nil:
    section.add "X-Amz-Security-Token", valid_21626286
  var valid_21626287 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626287 = validateParameter(valid_21626287, JString, required = false,
                                   default = nil)
  if valid_21626287 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626287
  var valid_21626288 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626288 = validateParameter(valid_21626288, JString, required = false,
                                   default = nil)
  if valid_21626288 != nil:
    section.add "X-Amz-Algorithm", valid_21626288
  var valid_21626289 = header.getOrDefault("X-Amz-Signature")
  valid_21626289 = validateParameter(valid_21626289, JString, required = false,
                                   default = nil)
  if valid_21626289 != nil:
    section.add "X-Amz-Signature", valid_21626289
  var valid_21626290 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626290 = validateParameter(valid_21626290, JString, required = false,
                                   default = nil)
  if valid_21626290 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626290
  var valid_21626291 = header.getOrDefault("X-Amz-Credential")
  valid_21626291 = validateParameter(valid_21626291, JString, required = false,
                                   default = nil)
  if valid_21626291 != nil:
    section.add "X-Amz-Credential", valid_21626291
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_21626292 = formData.getOrDefault("UserName")
  valid_21626292 = validateParameter(valid_21626292, JString, required = false,
                                   default = nil)
  if valid_21626292 != nil:
    section.add "UserName", valid_21626292
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626293: Call_PostCreateAccessKey_21626280; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  let valid = call_21626293.validator(path, query, header, formData, body, _)
  let scheme = call_21626293.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626293.makeUrl(scheme.get, call_21626293.host, call_21626293.base,
                               call_21626293.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626293, uri, valid, _)

proc call*(call_21626294: Call_PostCreateAccessKey_21626280; UserName: string = "";
          Action: string = "CreateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## postCreateAccessKey
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ##   UserName: string
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626295 = newJObject()
  var formData_21626296 = newJObject()
  add(formData_21626296, "UserName", newJString(UserName))
  add(query_21626295, "Action", newJString(Action))
  add(query_21626295, "Version", newJString(Version))
  result = call_21626294.call(nil, query_21626295, nil, formData_21626296, nil)

var postCreateAccessKey* = Call_PostCreateAccessKey_21626280(
    name: "postCreateAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccessKey",
    validator: validate_PostCreateAccessKey_21626281, base: "/",
    makeUrl: url_PostCreateAccessKey_21626282,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAccessKey_21626263 = ref object of OpenApiRestCall_21625435
proc url_GetCreateAccessKey_21626265(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateAccessKey_21626264(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626266 = query.getOrDefault("UserName")
  valid_21626266 = validateParameter(valid_21626266, JString, required = false,
                                   default = nil)
  if valid_21626266 != nil:
    section.add "UserName", valid_21626266
  var valid_21626267 = query.getOrDefault("Action")
  valid_21626267 = validateParameter(valid_21626267, JString, required = true,
                                   default = newJString("CreateAccessKey"))
  if valid_21626267 != nil:
    section.add "Action", valid_21626267
  var valid_21626268 = query.getOrDefault("Version")
  valid_21626268 = validateParameter(valid_21626268, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626268 != nil:
    section.add "Version", valid_21626268
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626269 = header.getOrDefault("X-Amz-Date")
  valid_21626269 = validateParameter(valid_21626269, JString, required = false,
                                   default = nil)
  if valid_21626269 != nil:
    section.add "X-Amz-Date", valid_21626269
  var valid_21626270 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626270 = validateParameter(valid_21626270, JString, required = false,
                                   default = nil)
  if valid_21626270 != nil:
    section.add "X-Amz-Security-Token", valid_21626270
  var valid_21626271 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626271 = validateParameter(valid_21626271, JString, required = false,
                                   default = nil)
  if valid_21626271 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626271
  var valid_21626272 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626272 = validateParameter(valid_21626272, JString, required = false,
                                   default = nil)
  if valid_21626272 != nil:
    section.add "X-Amz-Algorithm", valid_21626272
  var valid_21626273 = header.getOrDefault("X-Amz-Signature")
  valid_21626273 = validateParameter(valid_21626273, JString, required = false,
                                   default = nil)
  if valid_21626273 != nil:
    section.add "X-Amz-Signature", valid_21626273
  var valid_21626274 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626274 = validateParameter(valid_21626274, JString, required = false,
                                   default = nil)
  if valid_21626274 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626274
  var valid_21626275 = header.getOrDefault("X-Amz-Credential")
  valid_21626275 = validateParameter(valid_21626275, JString, required = false,
                                   default = nil)
  if valid_21626275 != nil:
    section.add "X-Amz-Credential", valid_21626275
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626276: Call_GetCreateAccessKey_21626263; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  let valid = call_21626276.validator(path, query, header, formData, body, _)
  let scheme = call_21626276.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626276.makeUrl(scheme.get, call_21626276.host, call_21626276.base,
                               call_21626276.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626276, uri, valid, _)

proc call*(call_21626277: Call_GetCreateAccessKey_21626263; UserName: string = "";
          Action: string = "CreateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## getCreateAccessKey
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ##   UserName: string
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626278 = newJObject()
  add(query_21626278, "UserName", newJString(UserName))
  add(query_21626278, "Action", newJString(Action))
  add(query_21626278, "Version", newJString(Version))
  result = call_21626277.call(nil, query_21626278, nil, nil, nil)

var getCreateAccessKey* = Call_GetCreateAccessKey_21626263(
    name: "getCreateAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateAccessKey", validator: validate_GetCreateAccessKey_21626264,
    base: "/", makeUrl: url_GetCreateAccessKey_21626265,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAccountAlias_21626313 = ref object of OpenApiRestCall_21625435
proc url_PostCreateAccountAlias_21626315(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateAccountAlias_21626314(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626316 = query.getOrDefault("Action")
  valid_21626316 = validateParameter(valid_21626316, JString, required = true,
                                   default = newJString("CreateAccountAlias"))
  if valid_21626316 != nil:
    section.add "Action", valid_21626316
  var valid_21626317 = query.getOrDefault("Version")
  valid_21626317 = validateParameter(valid_21626317, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626317 != nil:
    section.add "Version", valid_21626317
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626318 = header.getOrDefault("X-Amz-Date")
  valid_21626318 = validateParameter(valid_21626318, JString, required = false,
                                   default = nil)
  if valid_21626318 != nil:
    section.add "X-Amz-Date", valid_21626318
  var valid_21626319 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626319 = validateParameter(valid_21626319, JString, required = false,
                                   default = nil)
  if valid_21626319 != nil:
    section.add "X-Amz-Security-Token", valid_21626319
  var valid_21626320 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626320 = validateParameter(valid_21626320, JString, required = false,
                                   default = nil)
  if valid_21626320 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626320
  var valid_21626321 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626321 = validateParameter(valid_21626321, JString, required = false,
                                   default = nil)
  if valid_21626321 != nil:
    section.add "X-Amz-Algorithm", valid_21626321
  var valid_21626322 = header.getOrDefault("X-Amz-Signature")
  valid_21626322 = validateParameter(valid_21626322, JString, required = false,
                                   default = nil)
  if valid_21626322 != nil:
    section.add "X-Amz-Signature", valid_21626322
  var valid_21626323 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626323 = validateParameter(valid_21626323, JString, required = false,
                                   default = nil)
  if valid_21626323 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626323
  var valid_21626324 = header.getOrDefault("X-Amz-Credential")
  valid_21626324 = validateParameter(valid_21626324, JString, required = false,
                                   default = nil)
  if valid_21626324 != nil:
    section.add "X-Amz-Credential", valid_21626324
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccountAlias` field"
  var valid_21626325 = formData.getOrDefault("AccountAlias")
  valid_21626325 = validateParameter(valid_21626325, JString, required = true,
                                   default = nil)
  if valid_21626325 != nil:
    section.add "AccountAlias", valid_21626325
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626326: Call_PostCreateAccountAlias_21626313;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21626326.validator(path, query, header, formData, body, _)
  let scheme = call_21626326.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626326.makeUrl(scheme.get, call_21626326.host, call_21626326.base,
                               call_21626326.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626326, uri, valid, _)

proc call*(call_21626327: Call_PostCreateAccountAlias_21626313;
          AccountAlias: string; Action: string = "CreateAccountAlias";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateAccountAlias
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626328 = newJObject()
  var formData_21626329 = newJObject()
  add(formData_21626329, "AccountAlias", newJString(AccountAlias))
  add(query_21626328, "Action", newJString(Action))
  add(query_21626328, "Version", newJString(Version))
  result = call_21626327.call(nil, query_21626328, nil, formData_21626329, nil)

var postCreateAccountAlias* = Call_PostCreateAccountAlias_21626313(
    name: "postCreateAccountAlias", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccountAlias",
    validator: validate_PostCreateAccountAlias_21626314, base: "/",
    makeUrl: url_PostCreateAccountAlias_21626315,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAccountAlias_21626297 = ref object of OpenApiRestCall_21625435
proc url_GetCreateAccountAlias_21626299(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateAccountAlias_21626298(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccountAlias` field"
  var valid_21626300 = query.getOrDefault("AccountAlias")
  valid_21626300 = validateParameter(valid_21626300, JString, required = true,
                                   default = nil)
  if valid_21626300 != nil:
    section.add "AccountAlias", valid_21626300
  var valid_21626301 = query.getOrDefault("Action")
  valid_21626301 = validateParameter(valid_21626301, JString, required = true,
                                   default = newJString("CreateAccountAlias"))
  if valid_21626301 != nil:
    section.add "Action", valid_21626301
  var valid_21626302 = query.getOrDefault("Version")
  valid_21626302 = validateParameter(valid_21626302, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626302 != nil:
    section.add "Version", valid_21626302
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626303 = header.getOrDefault("X-Amz-Date")
  valid_21626303 = validateParameter(valid_21626303, JString, required = false,
                                   default = nil)
  if valid_21626303 != nil:
    section.add "X-Amz-Date", valid_21626303
  var valid_21626304 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626304 = validateParameter(valid_21626304, JString, required = false,
                                   default = nil)
  if valid_21626304 != nil:
    section.add "X-Amz-Security-Token", valid_21626304
  var valid_21626305 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626305 = validateParameter(valid_21626305, JString, required = false,
                                   default = nil)
  if valid_21626305 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626305
  var valid_21626306 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626306 = validateParameter(valid_21626306, JString, required = false,
                                   default = nil)
  if valid_21626306 != nil:
    section.add "X-Amz-Algorithm", valid_21626306
  var valid_21626307 = header.getOrDefault("X-Amz-Signature")
  valid_21626307 = validateParameter(valid_21626307, JString, required = false,
                                   default = nil)
  if valid_21626307 != nil:
    section.add "X-Amz-Signature", valid_21626307
  var valid_21626308 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626308 = validateParameter(valid_21626308, JString, required = false,
                                   default = nil)
  if valid_21626308 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626308
  var valid_21626309 = header.getOrDefault("X-Amz-Credential")
  valid_21626309 = validateParameter(valid_21626309, JString, required = false,
                                   default = nil)
  if valid_21626309 != nil:
    section.add "X-Amz-Credential", valid_21626309
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626310: Call_GetCreateAccountAlias_21626297;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21626310.validator(path, query, header, formData, body, _)
  let scheme = call_21626310.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626310.makeUrl(scheme.get, call_21626310.host, call_21626310.base,
                               call_21626310.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626310, uri, valid, _)

proc call*(call_21626311: Call_GetCreateAccountAlias_21626297;
          AccountAlias: string; Action: string = "CreateAccountAlias";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateAccountAlias
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626312 = newJObject()
  add(query_21626312, "AccountAlias", newJString(AccountAlias))
  add(query_21626312, "Action", newJString(Action))
  add(query_21626312, "Version", newJString(Version))
  result = call_21626311.call(nil, query_21626312, nil, nil, nil)

var getCreateAccountAlias* = Call_GetCreateAccountAlias_21626297(
    name: "getCreateAccountAlias", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccountAlias",
    validator: validate_GetCreateAccountAlias_21626298, base: "/",
    makeUrl: url_GetCreateAccountAlias_21626299,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateGroup_21626347 = ref object of OpenApiRestCall_21625435
proc url_PostCreateGroup_21626349(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateGroup_21626348(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626350 = query.getOrDefault("Action")
  valid_21626350 = validateParameter(valid_21626350, JString, required = true,
                                   default = newJString("CreateGroup"))
  if valid_21626350 != nil:
    section.add "Action", valid_21626350
  var valid_21626351 = query.getOrDefault("Version")
  valid_21626351 = validateParameter(valid_21626351, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626351 != nil:
    section.add "Version", valid_21626351
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626352 = header.getOrDefault("X-Amz-Date")
  valid_21626352 = validateParameter(valid_21626352, JString, required = false,
                                   default = nil)
  if valid_21626352 != nil:
    section.add "X-Amz-Date", valid_21626352
  var valid_21626353 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626353 = validateParameter(valid_21626353, JString, required = false,
                                   default = nil)
  if valid_21626353 != nil:
    section.add "X-Amz-Security-Token", valid_21626353
  var valid_21626354 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626354 = validateParameter(valid_21626354, JString, required = false,
                                   default = nil)
  if valid_21626354 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626354
  var valid_21626355 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626355 = validateParameter(valid_21626355, JString, required = false,
                                   default = nil)
  if valid_21626355 != nil:
    section.add "X-Amz-Algorithm", valid_21626355
  var valid_21626356 = header.getOrDefault("X-Amz-Signature")
  valid_21626356 = validateParameter(valid_21626356, JString, required = false,
                                   default = nil)
  if valid_21626356 != nil:
    section.add "X-Amz-Signature", valid_21626356
  var valid_21626357 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626357 = validateParameter(valid_21626357, JString, required = false,
                                   default = nil)
  if valid_21626357 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626357
  var valid_21626358 = header.getOrDefault("X-Amz-Credential")
  valid_21626358 = validateParameter(valid_21626358, JString, required = false,
                                   default = nil)
  if valid_21626358 != nil:
    section.add "X-Amz-Credential", valid_21626358
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_21626359 = formData.getOrDefault("GroupName")
  valid_21626359 = validateParameter(valid_21626359, JString, required = true,
                                   default = nil)
  if valid_21626359 != nil:
    section.add "GroupName", valid_21626359
  var valid_21626360 = formData.getOrDefault("Path")
  valid_21626360 = validateParameter(valid_21626360, JString, required = false,
                                   default = nil)
  if valid_21626360 != nil:
    section.add "Path", valid_21626360
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626361: Call_PostCreateGroup_21626347; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626361.validator(path, query, header, formData, body, _)
  let scheme = call_21626361.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626361.makeUrl(scheme.get, call_21626361.host, call_21626361.base,
                               call_21626361.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626361, uri, valid, _)

proc call*(call_21626362: Call_PostCreateGroup_21626347; GroupName: string;
          Action: string = "CreateGroup"; Version: string = "2010-05-08";
          Path: string = ""): Recallable =
  ## postCreateGroup
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_21626363 = newJObject()
  var formData_21626364 = newJObject()
  add(formData_21626364, "GroupName", newJString(GroupName))
  add(query_21626363, "Action", newJString(Action))
  add(query_21626363, "Version", newJString(Version))
  add(formData_21626364, "Path", newJString(Path))
  result = call_21626362.call(nil, query_21626363, nil, formData_21626364, nil)

var postCreateGroup* = Call_PostCreateGroup_21626347(name: "postCreateGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateGroup", validator: validate_PostCreateGroup_21626348,
    base: "/", makeUrl: url_PostCreateGroup_21626349,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateGroup_21626330 = ref object of OpenApiRestCall_21625435
proc url_GetCreateGroup_21626332(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateGroup_21626331(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626333 = query.getOrDefault("Action")
  valid_21626333 = validateParameter(valid_21626333, JString, required = true,
                                   default = newJString("CreateGroup"))
  if valid_21626333 != nil:
    section.add "Action", valid_21626333
  var valid_21626334 = query.getOrDefault("GroupName")
  valid_21626334 = validateParameter(valid_21626334, JString, required = true,
                                   default = nil)
  if valid_21626334 != nil:
    section.add "GroupName", valid_21626334
  var valid_21626335 = query.getOrDefault("Path")
  valid_21626335 = validateParameter(valid_21626335, JString, required = false,
                                   default = nil)
  if valid_21626335 != nil:
    section.add "Path", valid_21626335
  var valid_21626336 = query.getOrDefault("Version")
  valid_21626336 = validateParameter(valid_21626336, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626336 != nil:
    section.add "Version", valid_21626336
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626337 = header.getOrDefault("X-Amz-Date")
  valid_21626337 = validateParameter(valid_21626337, JString, required = false,
                                   default = nil)
  if valid_21626337 != nil:
    section.add "X-Amz-Date", valid_21626337
  var valid_21626338 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626338 = validateParameter(valid_21626338, JString, required = false,
                                   default = nil)
  if valid_21626338 != nil:
    section.add "X-Amz-Security-Token", valid_21626338
  var valid_21626339 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626339 = validateParameter(valid_21626339, JString, required = false,
                                   default = nil)
  if valid_21626339 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626339
  var valid_21626340 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626340 = validateParameter(valid_21626340, JString, required = false,
                                   default = nil)
  if valid_21626340 != nil:
    section.add "X-Amz-Algorithm", valid_21626340
  var valid_21626341 = header.getOrDefault("X-Amz-Signature")
  valid_21626341 = validateParameter(valid_21626341, JString, required = false,
                                   default = nil)
  if valid_21626341 != nil:
    section.add "X-Amz-Signature", valid_21626341
  var valid_21626342 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626342 = validateParameter(valid_21626342, JString, required = false,
                                   default = nil)
  if valid_21626342 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626342
  var valid_21626343 = header.getOrDefault("X-Amz-Credential")
  valid_21626343 = validateParameter(valid_21626343, JString, required = false,
                                   default = nil)
  if valid_21626343 != nil:
    section.add "X-Amz-Credential", valid_21626343
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626344: Call_GetCreateGroup_21626330; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626344.validator(path, query, header, formData, body, _)
  let scheme = call_21626344.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626344.makeUrl(scheme.get, call_21626344.host, call_21626344.base,
                               call_21626344.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626344, uri, valid, _)

proc call*(call_21626345: Call_GetCreateGroup_21626330; GroupName: string;
          Action: string = "CreateGroup"; Path: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateGroup
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_21626346 = newJObject()
  add(query_21626346, "Action", newJString(Action))
  add(query_21626346, "GroupName", newJString(GroupName))
  add(query_21626346, "Path", newJString(Path))
  add(query_21626346, "Version", newJString(Version))
  result = call_21626345.call(nil, query_21626346, nil, nil, nil)

var getCreateGroup* = Call_GetCreateGroup_21626330(name: "getCreateGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateGroup", validator: validate_GetCreateGroup_21626331,
    base: "/", makeUrl: url_GetCreateGroup_21626332,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateInstanceProfile_21626382 = ref object of OpenApiRestCall_21625435
proc url_PostCreateInstanceProfile_21626384(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateInstanceProfile_21626383(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626385 = query.getOrDefault("Action")
  valid_21626385 = validateParameter(valid_21626385, JString, required = true, default = newJString(
      "CreateInstanceProfile"))
  if valid_21626385 != nil:
    section.add "Action", valid_21626385
  var valid_21626386 = query.getOrDefault("Version")
  valid_21626386 = validateParameter(valid_21626386, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626386 != nil:
    section.add "Version", valid_21626386
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626387 = header.getOrDefault("X-Amz-Date")
  valid_21626387 = validateParameter(valid_21626387, JString, required = false,
                                   default = nil)
  if valid_21626387 != nil:
    section.add "X-Amz-Date", valid_21626387
  var valid_21626388 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626388 = validateParameter(valid_21626388, JString, required = false,
                                   default = nil)
  if valid_21626388 != nil:
    section.add "X-Amz-Security-Token", valid_21626388
  var valid_21626389 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626389 = validateParameter(valid_21626389, JString, required = false,
                                   default = nil)
  if valid_21626389 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626389
  var valid_21626390 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626390 = validateParameter(valid_21626390, JString, required = false,
                                   default = nil)
  if valid_21626390 != nil:
    section.add "X-Amz-Algorithm", valid_21626390
  var valid_21626391 = header.getOrDefault("X-Amz-Signature")
  valid_21626391 = validateParameter(valid_21626391, JString, required = false,
                                   default = nil)
  if valid_21626391 != nil:
    section.add "X-Amz-Signature", valid_21626391
  var valid_21626392 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626392 = validateParameter(valid_21626392, JString, required = false,
                                   default = nil)
  if valid_21626392 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626392
  var valid_21626393 = header.getOrDefault("X-Amz-Credential")
  valid_21626393 = validateParameter(valid_21626393, JString, required = false,
                                   default = nil)
  if valid_21626393 != nil:
    section.add "X-Amz-Credential", valid_21626393
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: JString
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_21626394 = formData.getOrDefault("InstanceProfileName")
  valid_21626394 = validateParameter(valid_21626394, JString, required = true,
                                   default = nil)
  if valid_21626394 != nil:
    section.add "InstanceProfileName", valid_21626394
  var valid_21626395 = formData.getOrDefault("Path")
  valid_21626395 = validateParameter(valid_21626395, JString, required = false,
                                   default = nil)
  if valid_21626395 != nil:
    section.add "Path", valid_21626395
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626396: Call_PostCreateInstanceProfile_21626382;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626396.validator(path, query, header, formData, body, _)
  let scheme = call_21626396.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626396.makeUrl(scheme.get, call_21626396.host, call_21626396.base,
                               call_21626396.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626396, uri, valid, _)

proc call*(call_21626397: Call_PostCreateInstanceProfile_21626382;
          InstanceProfileName: string; Action: string = "CreateInstanceProfile";
          Version: string = "2010-05-08"; Path: string = ""): Recallable =
  ## postCreateInstanceProfile
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_21626398 = newJObject()
  var formData_21626399 = newJObject()
  add(query_21626398, "Action", newJString(Action))
  add(formData_21626399, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_21626398, "Version", newJString(Version))
  add(formData_21626399, "Path", newJString(Path))
  result = call_21626397.call(nil, query_21626398, nil, formData_21626399, nil)

var postCreateInstanceProfile* = Call_PostCreateInstanceProfile_21626382(
    name: "postCreateInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateInstanceProfile",
    validator: validate_PostCreateInstanceProfile_21626383, base: "/",
    makeUrl: url_PostCreateInstanceProfile_21626384,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateInstanceProfile_21626365 = ref object of OpenApiRestCall_21625435
proc url_GetCreateInstanceProfile_21626367(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateInstanceProfile_21626366(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_21626368 = query.getOrDefault("InstanceProfileName")
  valid_21626368 = validateParameter(valid_21626368, JString, required = true,
                                   default = nil)
  if valid_21626368 != nil:
    section.add "InstanceProfileName", valid_21626368
  var valid_21626369 = query.getOrDefault("Action")
  valid_21626369 = validateParameter(valid_21626369, JString, required = true, default = newJString(
      "CreateInstanceProfile"))
  if valid_21626369 != nil:
    section.add "Action", valid_21626369
  var valid_21626370 = query.getOrDefault("Path")
  valid_21626370 = validateParameter(valid_21626370, JString, required = false,
                                   default = nil)
  if valid_21626370 != nil:
    section.add "Path", valid_21626370
  var valid_21626371 = query.getOrDefault("Version")
  valid_21626371 = validateParameter(valid_21626371, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626371 != nil:
    section.add "Version", valid_21626371
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626372 = header.getOrDefault("X-Amz-Date")
  valid_21626372 = validateParameter(valid_21626372, JString, required = false,
                                   default = nil)
  if valid_21626372 != nil:
    section.add "X-Amz-Date", valid_21626372
  var valid_21626373 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626373 = validateParameter(valid_21626373, JString, required = false,
                                   default = nil)
  if valid_21626373 != nil:
    section.add "X-Amz-Security-Token", valid_21626373
  var valid_21626374 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626374 = validateParameter(valid_21626374, JString, required = false,
                                   default = nil)
  if valid_21626374 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626374
  var valid_21626375 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626375 = validateParameter(valid_21626375, JString, required = false,
                                   default = nil)
  if valid_21626375 != nil:
    section.add "X-Amz-Algorithm", valid_21626375
  var valid_21626376 = header.getOrDefault("X-Amz-Signature")
  valid_21626376 = validateParameter(valid_21626376, JString, required = false,
                                   default = nil)
  if valid_21626376 != nil:
    section.add "X-Amz-Signature", valid_21626376
  var valid_21626377 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626377 = validateParameter(valid_21626377, JString, required = false,
                                   default = nil)
  if valid_21626377 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626377
  var valid_21626378 = header.getOrDefault("X-Amz-Credential")
  valid_21626378 = validateParameter(valid_21626378, JString, required = false,
                                   default = nil)
  if valid_21626378 != nil:
    section.add "X-Amz-Credential", valid_21626378
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626379: Call_GetCreateInstanceProfile_21626365;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626379.validator(path, query, header, formData, body, _)
  let scheme = call_21626379.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626379.makeUrl(scheme.get, call_21626379.host, call_21626379.base,
                               call_21626379.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626379, uri, valid, _)

proc call*(call_21626380: Call_GetCreateInstanceProfile_21626365;
          InstanceProfileName: string; Action: string = "CreateInstanceProfile";
          Path: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateInstanceProfile
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_21626381 = newJObject()
  add(query_21626381, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_21626381, "Action", newJString(Action))
  add(query_21626381, "Path", newJString(Path))
  add(query_21626381, "Version", newJString(Version))
  result = call_21626380.call(nil, query_21626381, nil, nil, nil)

var getCreateInstanceProfile* = Call_GetCreateInstanceProfile_21626365(
    name: "getCreateInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateInstanceProfile",
    validator: validate_GetCreateInstanceProfile_21626366, base: "/",
    makeUrl: url_GetCreateInstanceProfile_21626367,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateLoginProfile_21626418 = ref object of OpenApiRestCall_21625435
proc url_PostCreateLoginProfile_21626420(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateLoginProfile_21626419(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626421 = query.getOrDefault("Action")
  valid_21626421 = validateParameter(valid_21626421, JString, required = true,
                                   default = newJString("CreateLoginProfile"))
  if valid_21626421 != nil:
    section.add "Action", valid_21626421
  var valid_21626422 = query.getOrDefault("Version")
  valid_21626422 = validateParameter(valid_21626422, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626422 != nil:
    section.add "Version", valid_21626422
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626423 = header.getOrDefault("X-Amz-Date")
  valid_21626423 = validateParameter(valid_21626423, JString, required = false,
                                   default = nil)
  if valid_21626423 != nil:
    section.add "X-Amz-Date", valid_21626423
  var valid_21626424 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626424 = validateParameter(valid_21626424, JString, required = false,
                                   default = nil)
  if valid_21626424 != nil:
    section.add "X-Amz-Security-Token", valid_21626424
  var valid_21626425 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626425 = validateParameter(valid_21626425, JString, required = false,
                                   default = nil)
  if valid_21626425 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626425
  var valid_21626426 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626426 = validateParameter(valid_21626426, JString, required = false,
                                   default = nil)
  if valid_21626426 != nil:
    section.add "X-Amz-Algorithm", valid_21626426
  var valid_21626427 = header.getOrDefault("X-Amz-Signature")
  valid_21626427 = validateParameter(valid_21626427, JString, required = false,
                                   default = nil)
  if valid_21626427 != nil:
    section.add "X-Amz-Signature", valid_21626427
  var valid_21626428 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626428 = validateParameter(valid_21626428, JString, required = false,
                                   default = nil)
  if valid_21626428 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626428
  var valid_21626429 = header.getOrDefault("X-Amz-Credential")
  valid_21626429 = validateParameter(valid_21626429, JString, required = false,
                                   default = nil)
  if valid_21626429 != nil:
    section.add "X-Amz-Credential", valid_21626429
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: JString (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   PasswordResetRequired: JBool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21626430 = formData.getOrDefault("UserName")
  valid_21626430 = validateParameter(valid_21626430, JString, required = true,
                                   default = nil)
  if valid_21626430 != nil:
    section.add "UserName", valid_21626430
  var valid_21626431 = formData.getOrDefault("Password")
  valid_21626431 = validateParameter(valid_21626431, JString, required = true,
                                   default = nil)
  if valid_21626431 != nil:
    section.add "Password", valid_21626431
  var valid_21626432 = formData.getOrDefault("PasswordResetRequired")
  valid_21626432 = validateParameter(valid_21626432, JBool, required = false,
                                   default = nil)
  if valid_21626432 != nil:
    section.add "PasswordResetRequired", valid_21626432
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626433: Call_PostCreateLoginProfile_21626418;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21626433.validator(path, query, header, formData, body, _)
  let scheme = call_21626433.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626433.makeUrl(scheme.get, call_21626433.host, call_21626433.base,
                               call_21626433.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626433, uri, valid, _)

proc call*(call_21626434: Call_PostCreateLoginProfile_21626418; UserName: string;
          Password: string; PasswordResetRequired: bool = false;
          Action: string = "CreateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postCreateLoginProfile
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: string (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   PasswordResetRequired: bool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626435 = newJObject()
  var formData_21626436 = newJObject()
  add(formData_21626436, "UserName", newJString(UserName))
  add(formData_21626436, "Password", newJString(Password))
  add(formData_21626436, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_21626435, "Action", newJString(Action))
  add(query_21626435, "Version", newJString(Version))
  result = call_21626434.call(nil, query_21626435, nil, formData_21626436, nil)

var postCreateLoginProfile* = Call_PostCreateLoginProfile_21626418(
    name: "postCreateLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateLoginProfile",
    validator: validate_PostCreateLoginProfile_21626419, base: "/",
    makeUrl: url_PostCreateLoginProfile_21626420,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateLoginProfile_21626400 = ref object of OpenApiRestCall_21625435
proc url_GetCreateLoginProfile_21626402(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateLoginProfile_21626401(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: JString (required)
  ##   Password: JString (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_21626403 = query.getOrDefault("UserName")
  valid_21626403 = validateParameter(valid_21626403, JString, required = true,
                                   default = nil)
  if valid_21626403 != nil:
    section.add "UserName", valid_21626403
  var valid_21626404 = query.getOrDefault("PasswordResetRequired")
  valid_21626404 = validateParameter(valid_21626404, JBool, required = false,
                                   default = nil)
  if valid_21626404 != nil:
    section.add "PasswordResetRequired", valid_21626404
  var valid_21626405 = query.getOrDefault("Action")
  valid_21626405 = validateParameter(valid_21626405, JString, required = true,
                                   default = newJString("CreateLoginProfile"))
  if valid_21626405 != nil:
    section.add "Action", valid_21626405
  var valid_21626406 = query.getOrDefault("Password")
  valid_21626406 = validateParameter(valid_21626406, JString, required = true,
                                   default = nil)
  if valid_21626406 != nil:
    section.add "Password", valid_21626406
  var valid_21626407 = query.getOrDefault("Version")
  valid_21626407 = validateParameter(valid_21626407, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626407 != nil:
    section.add "Version", valid_21626407
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626408 = header.getOrDefault("X-Amz-Date")
  valid_21626408 = validateParameter(valid_21626408, JString, required = false,
                                   default = nil)
  if valid_21626408 != nil:
    section.add "X-Amz-Date", valid_21626408
  var valid_21626409 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626409 = validateParameter(valid_21626409, JString, required = false,
                                   default = nil)
  if valid_21626409 != nil:
    section.add "X-Amz-Security-Token", valid_21626409
  var valid_21626410 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626410 = validateParameter(valid_21626410, JString, required = false,
                                   default = nil)
  if valid_21626410 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626410
  var valid_21626411 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626411 = validateParameter(valid_21626411, JString, required = false,
                                   default = nil)
  if valid_21626411 != nil:
    section.add "X-Amz-Algorithm", valid_21626411
  var valid_21626412 = header.getOrDefault("X-Amz-Signature")
  valid_21626412 = validateParameter(valid_21626412, JString, required = false,
                                   default = nil)
  if valid_21626412 != nil:
    section.add "X-Amz-Signature", valid_21626412
  var valid_21626413 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626413 = validateParameter(valid_21626413, JString, required = false,
                                   default = nil)
  if valid_21626413 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626413
  var valid_21626414 = header.getOrDefault("X-Amz-Credential")
  valid_21626414 = validateParameter(valid_21626414, JString, required = false,
                                   default = nil)
  if valid_21626414 != nil:
    section.add "X-Amz-Credential", valid_21626414
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626415: Call_GetCreateLoginProfile_21626400;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21626415.validator(path, query, header, formData, body, _)
  let scheme = call_21626415.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626415.makeUrl(scheme.get, call_21626415.host, call_21626415.base,
                               call_21626415.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626415, uri, valid, _)

proc call*(call_21626416: Call_GetCreateLoginProfile_21626400; UserName: string;
          Password: string; PasswordResetRequired: bool = false;
          Action: string = "CreateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getCreateLoginProfile
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: bool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Password: string (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: string (required)
  var query_21626417 = newJObject()
  add(query_21626417, "UserName", newJString(UserName))
  add(query_21626417, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_21626417, "Action", newJString(Action))
  add(query_21626417, "Password", newJString(Password))
  add(query_21626417, "Version", newJString(Version))
  result = call_21626416.call(nil, query_21626417, nil, nil, nil)

var getCreateLoginProfile* = Call_GetCreateLoginProfile_21626400(
    name: "getCreateLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateLoginProfile",
    validator: validate_GetCreateLoginProfile_21626401, base: "/",
    makeUrl: url_GetCreateLoginProfile_21626402,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOpenIDConnectProvider_21626455 = ref object of OpenApiRestCall_21625435
proc url_PostCreateOpenIDConnectProvider_21626457(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateOpenIDConnectProvider_21626456(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626458 = query.getOrDefault("Action")
  valid_21626458 = validateParameter(valid_21626458, JString, required = true, default = newJString(
      "CreateOpenIDConnectProvider"))
  if valid_21626458 != nil:
    section.add "Action", valid_21626458
  var valid_21626459 = query.getOrDefault("Version")
  valid_21626459 = validateParameter(valid_21626459, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626459 != nil:
    section.add "Version", valid_21626459
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626460 = header.getOrDefault("X-Amz-Date")
  valid_21626460 = validateParameter(valid_21626460, JString, required = false,
                                   default = nil)
  if valid_21626460 != nil:
    section.add "X-Amz-Date", valid_21626460
  var valid_21626461 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626461 = validateParameter(valid_21626461, JString, required = false,
                                   default = nil)
  if valid_21626461 != nil:
    section.add "X-Amz-Security-Token", valid_21626461
  var valid_21626462 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626462 = validateParameter(valid_21626462, JString, required = false,
                                   default = nil)
  if valid_21626462 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626462
  var valid_21626463 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626463 = validateParameter(valid_21626463, JString, required = false,
                                   default = nil)
  if valid_21626463 != nil:
    section.add "X-Amz-Algorithm", valid_21626463
  var valid_21626464 = header.getOrDefault("X-Amz-Signature")
  valid_21626464 = validateParameter(valid_21626464, JString, required = false,
                                   default = nil)
  if valid_21626464 != nil:
    section.add "X-Amz-Signature", valid_21626464
  var valid_21626465 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626465 = validateParameter(valid_21626465, JString, required = false,
                                   default = nil)
  if valid_21626465 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626465
  var valid_21626466 = header.getOrDefault("X-Amz-Credential")
  valid_21626466 = validateParameter(valid_21626466, JString, required = false,
                                   default = nil)
  if valid_21626466 != nil:
    section.add "X-Amz-Credential", valid_21626466
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Url: JString (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  section = newJObject()
  var valid_21626467 = formData.getOrDefault("ClientIDList")
  valid_21626467 = validateParameter(valid_21626467, JArray, required = false,
                                   default = nil)
  if valid_21626467 != nil:
    section.add "ClientIDList", valid_21626467
  assert formData != nil,
        "formData argument is necessary due to required `ThumbprintList` field"
  var valid_21626468 = formData.getOrDefault("ThumbprintList")
  valid_21626468 = validateParameter(valid_21626468, JArray, required = true,
                                   default = nil)
  if valid_21626468 != nil:
    section.add "ThumbprintList", valid_21626468
  var valid_21626469 = formData.getOrDefault("Url")
  valid_21626469 = validateParameter(valid_21626469, JString, required = true,
                                   default = nil)
  if valid_21626469 != nil:
    section.add "Url", valid_21626469
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626470: Call_PostCreateOpenIDConnectProvider_21626455;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_21626470.validator(path, query, header, formData, body, _)
  let scheme = call_21626470.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626470.makeUrl(scheme.get, call_21626470.host, call_21626470.base,
                               call_21626470.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626470, uri, valid, _)

proc call*(call_21626471: Call_PostCreateOpenIDConnectProvider_21626455;
          ThumbprintList: JsonNode; Url: string; ClientIDList: JsonNode = nil;
          Action: string = "CreateOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateOpenIDConnectProvider
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Url: string (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  var query_21626472 = newJObject()
  var formData_21626473 = newJObject()
  if ClientIDList != nil:
    formData_21626473.add "ClientIDList", ClientIDList
  if ThumbprintList != nil:
    formData_21626473.add "ThumbprintList", ThumbprintList
  add(query_21626472, "Action", newJString(Action))
  add(query_21626472, "Version", newJString(Version))
  add(formData_21626473, "Url", newJString(Url))
  result = call_21626471.call(nil, query_21626472, nil, formData_21626473, nil)

var postCreateOpenIDConnectProvider* = Call_PostCreateOpenIDConnectProvider_21626455(
    name: "postCreateOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateOpenIDConnectProvider",
    validator: validate_PostCreateOpenIDConnectProvider_21626456, base: "/",
    makeUrl: url_PostCreateOpenIDConnectProvider_21626457,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOpenIDConnectProvider_21626437 = ref object of OpenApiRestCall_21625435
proc url_GetCreateOpenIDConnectProvider_21626439(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateOpenIDConnectProvider_21626438(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: JString (required)
  ##   Url: JString (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626440 = query.getOrDefault("ClientIDList")
  valid_21626440 = validateParameter(valid_21626440, JArray, required = false,
                                   default = nil)
  if valid_21626440 != nil:
    section.add "ClientIDList", valid_21626440
  assert query != nil,
        "query argument is necessary due to required `ThumbprintList` field"
  var valid_21626441 = query.getOrDefault("ThumbprintList")
  valid_21626441 = validateParameter(valid_21626441, JArray, required = true,
                                   default = nil)
  if valid_21626441 != nil:
    section.add "ThumbprintList", valid_21626441
  var valid_21626442 = query.getOrDefault("Action")
  valid_21626442 = validateParameter(valid_21626442, JString, required = true, default = newJString(
      "CreateOpenIDConnectProvider"))
  if valid_21626442 != nil:
    section.add "Action", valid_21626442
  var valid_21626443 = query.getOrDefault("Url")
  valid_21626443 = validateParameter(valid_21626443, JString, required = true,
                                   default = nil)
  if valid_21626443 != nil:
    section.add "Url", valid_21626443
  var valid_21626444 = query.getOrDefault("Version")
  valid_21626444 = validateParameter(valid_21626444, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626444 != nil:
    section.add "Version", valid_21626444
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626445 = header.getOrDefault("X-Amz-Date")
  valid_21626445 = validateParameter(valid_21626445, JString, required = false,
                                   default = nil)
  if valid_21626445 != nil:
    section.add "X-Amz-Date", valid_21626445
  var valid_21626446 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626446 = validateParameter(valid_21626446, JString, required = false,
                                   default = nil)
  if valid_21626446 != nil:
    section.add "X-Amz-Security-Token", valid_21626446
  var valid_21626447 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626447 = validateParameter(valid_21626447, JString, required = false,
                                   default = nil)
  if valid_21626447 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626447
  var valid_21626448 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626448 = validateParameter(valid_21626448, JString, required = false,
                                   default = nil)
  if valid_21626448 != nil:
    section.add "X-Amz-Algorithm", valid_21626448
  var valid_21626449 = header.getOrDefault("X-Amz-Signature")
  valid_21626449 = validateParameter(valid_21626449, JString, required = false,
                                   default = nil)
  if valid_21626449 != nil:
    section.add "X-Amz-Signature", valid_21626449
  var valid_21626450 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626450 = validateParameter(valid_21626450, JString, required = false,
                                   default = nil)
  if valid_21626450 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626450
  var valid_21626451 = header.getOrDefault("X-Amz-Credential")
  valid_21626451 = validateParameter(valid_21626451, JString, required = false,
                                   default = nil)
  if valid_21626451 != nil:
    section.add "X-Amz-Credential", valid_21626451
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626452: Call_GetCreateOpenIDConnectProvider_21626437;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_21626452.validator(path, query, header, formData, body, _)
  let scheme = call_21626452.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626452.makeUrl(scheme.get, call_21626452.host, call_21626452.base,
                               call_21626452.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626452, uri, valid, _)

proc call*(call_21626453: Call_GetCreateOpenIDConnectProvider_21626437;
          ThumbprintList: JsonNode; Url: string; ClientIDList: JsonNode = nil;
          Action: string = "CreateOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateOpenIDConnectProvider
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Url: string (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   Version: string (required)
  var query_21626454 = newJObject()
  if ClientIDList != nil:
    query_21626454.add "ClientIDList", ClientIDList
  if ThumbprintList != nil:
    query_21626454.add "ThumbprintList", ThumbprintList
  add(query_21626454, "Action", newJString(Action))
  add(query_21626454, "Url", newJString(Url))
  add(query_21626454, "Version", newJString(Version))
  result = call_21626453.call(nil, query_21626454, nil, nil, nil)

var getCreateOpenIDConnectProvider* = Call_GetCreateOpenIDConnectProvider_21626437(
    name: "getCreateOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateOpenIDConnectProvider",
    validator: validate_GetCreateOpenIDConnectProvider_21626438, base: "/",
    makeUrl: url_GetCreateOpenIDConnectProvider_21626439,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreatePolicy_21626493 = ref object of OpenApiRestCall_21625435
proc url_PostCreatePolicy_21626495(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreatePolicy_21626494(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626496 = query.getOrDefault("Action")
  valid_21626496 = validateParameter(valid_21626496, JString, required = true,
                                   default = newJString("CreatePolicy"))
  if valid_21626496 != nil:
    section.add "Action", valid_21626496
  var valid_21626497 = query.getOrDefault("Version")
  valid_21626497 = validateParameter(valid_21626497, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626497 != nil:
    section.add "Version", valid_21626497
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626498 = header.getOrDefault("X-Amz-Date")
  valid_21626498 = validateParameter(valid_21626498, JString, required = false,
                                   default = nil)
  if valid_21626498 != nil:
    section.add "X-Amz-Date", valid_21626498
  var valid_21626499 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626499 = validateParameter(valid_21626499, JString, required = false,
                                   default = nil)
  if valid_21626499 != nil:
    section.add "X-Amz-Security-Token", valid_21626499
  var valid_21626500 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626500 = validateParameter(valid_21626500, JString, required = false,
                                   default = nil)
  if valid_21626500 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626500
  var valid_21626501 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626501 = validateParameter(valid_21626501, JString, required = false,
                                   default = nil)
  if valid_21626501 != nil:
    section.add "X-Amz-Algorithm", valid_21626501
  var valid_21626502 = header.getOrDefault("X-Amz-Signature")
  valid_21626502 = validateParameter(valid_21626502, JString, required = false,
                                   default = nil)
  if valid_21626502 != nil:
    section.add "X-Amz-Signature", valid_21626502
  var valid_21626503 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626503 = validateParameter(valid_21626503, JString, required = false,
                                   default = nil)
  if valid_21626503 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626503
  var valid_21626504 = header.getOrDefault("X-Amz-Credential")
  valid_21626504 = validateParameter(valid_21626504, JString, required = false,
                                   default = nil)
  if valid_21626504 != nil:
    section.add "X-Amz-Credential", valid_21626504
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Description: JString
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Path: JString
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_21626505 = formData.getOrDefault("PolicyName")
  valid_21626505 = validateParameter(valid_21626505, JString, required = true,
                                   default = nil)
  if valid_21626505 != nil:
    section.add "PolicyName", valid_21626505
  var valid_21626506 = formData.getOrDefault("PolicyDocument")
  valid_21626506 = validateParameter(valid_21626506, JString, required = true,
                                   default = nil)
  if valid_21626506 != nil:
    section.add "PolicyDocument", valid_21626506
  var valid_21626507 = formData.getOrDefault("Description")
  valid_21626507 = validateParameter(valid_21626507, JString, required = false,
                                   default = nil)
  if valid_21626507 != nil:
    section.add "Description", valid_21626507
  var valid_21626508 = formData.getOrDefault("Path")
  valid_21626508 = validateParameter(valid_21626508, JString, required = false,
                                   default = nil)
  if valid_21626508 != nil:
    section.add "Path", valid_21626508
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626509: Call_PostCreatePolicy_21626493; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626509.validator(path, query, header, formData, body, _)
  let scheme = call_21626509.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626509.makeUrl(scheme.get, call_21626509.host, call_21626509.base,
                               call_21626509.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626509, uri, valid, _)

proc call*(call_21626510: Call_PostCreatePolicy_21626493; PolicyName: string;
          PolicyDocument: string; Action: string = "CreatePolicy";
          Version: string = "2010-05-08"; Description: string = ""; Path: string = ""): Recallable =
  ## postCreatePolicy
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Path: string
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_21626511 = newJObject()
  var formData_21626512 = newJObject()
  add(formData_21626512, "PolicyName", newJString(PolicyName))
  add(formData_21626512, "PolicyDocument", newJString(PolicyDocument))
  add(query_21626511, "Action", newJString(Action))
  add(query_21626511, "Version", newJString(Version))
  add(formData_21626512, "Description", newJString(Description))
  add(formData_21626512, "Path", newJString(Path))
  result = call_21626510.call(nil, query_21626511, nil, formData_21626512, nil)

var postCreatePolicy* = Call_PostCreatePolicy_21626493(name: "postCreatePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreatePolicy", validator: validate_PostCreatePolicy_21626494,
    base: "/", makeUrl: url_PostCreatePolicy_21626495,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreatePolicy_21626474 = ref object of OpenApiRestCall_21625435
proc url_GetCreatePolicy_21626476(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreatePolicy_21626475(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Path: JString
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  section = newJObject()
  var valid_21626477 = query.getOrDefault("Description")
  valid_21626477 = validateParameter(valid_21626477, JString, required = false,
                                   default = nil)
  if valid_21626477 != nil:
    section.add "Description", valid_21626477
  var valid_21626478 = query.getOrDefault("Action")
  valid_21626478 = validateParameter(valid_21626478, JString, required = true,
                                   default = newJString("CreatePolicy"))
  if valid_21626478 != nil:
    section.add "Action", valid_21626478
  var valid_21626479 = query.getOrDefault("PolicyDocument")
  valid_21626479 = validateParameter(valid_21626479, JString, required = true,
                                   default = nil)
  if valid_21626479 != nil:
    section.add "PolicyDocument", valid_21626479
  var valid_21626480 = query.getOrDefault("Path")
  valid_21626480 = validateParameter(valid_21626480, JString, required = false,
                                   default = nil)
  if valid_21626480 != nil:
    section.add "Path", valid_21626480
  var valid_21626481 = query.getOrDefault("Version")
  valid_21626481 = validateParameter(valid_21626481, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626481 != nil:
    section.add "Version", valid_21626481
  var valid_21626482 = query.getOrDefault("PolicyName")
  valid_21626482 = validateParameter(valid_21626482, JString, required = true,
                                   default = nil)
  if valid_21626482 != nil:
    section.add "PolicyName", valid_21626482
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626483 = header.getOrDefault("X-Amz-Date")
  valid_21626483 = validateParameter(valid_21626483, JString, required = false,
                                   default = nil)
  if valid_21626483 != nil:
    section.add "X-Amz-Date", valid_21626483
  var valid_21626484 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626484 = validateParameter(valid_21626484, JString, required = false,
                                   default = nil)
  if valid_21626484 != nil:
    section.add "X-Amz-Security-Token", valid_21626484
  var valid_21626485 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626485 = validateParameter(valid_21626485, JString, required = false,
                                   default = nil)
  if valid_21626485 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626485
  var valid_21626486 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626486 = validateParameter(valid_21626486, JString, required = false,
                                   default = nil)
  if valid_21626486 != nil:
    section.add "X-Amz-Algorithm", valid_21626486
  var valid_21626487 = header.getOrDefault("X-Amz-Signature")
  valid_21626487 = validateParameter(valid_21626487, JString, required = false,
                                   default = nil)
  if valid_21626487 != nil:
    section.add "X-Amz-Signature", valid_21626487
  var valid_21626488 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626488 = validateParameter(valid_21626488, JString, required = false,
                                   default = nil)
  if valid_21626488 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626488
  var valid_21626489 = header.getOrDefault("X-Amz-Credential")
  valid_21626489 = validateParameter(valid_21626489, JString, required = false,
                                   default = nil)
  if valid_21626489 != nil:
    section.add "X-Amz-Credential", valid_21626489
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626490: Call_GetCreatePolicy_21626474; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626490.validator(path, query, header, formData, body, _)
  let scheme = call_21626490.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626490.makeUrl(scheme.get, call_21626490.host, call_21626490.base,
                               call_21626490.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626490, uri, valid, _)

proc call*(call_21626491: Call_GetCreatePolicy_21626474; PolicyDocument: string;
          PolicyName: string; Description: string = "";
          Action: string = "CreatePolicy"; Path: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getCreatePolicy
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Description: string
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Path: string
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  var query_21626492 = newJObject()
  add(query_21626492, "Description", newJString(Description))
  add(query_21626492, "Action", newJString(Action))
  add(query_21626492, "PolicyDocument", newJString(PolicyDocument))
  add(query_21626492, "Path", newJString(Path))
  add(query_21626492, "Version", newJString(Version))
  add(query_21626492, "PolicyName", newJString(PolicyName))
  result = call_21626491.call(nil, query_21626492, nil, nil, nil)

var getCreatePolicy* = Call_GetCreatePolicy_21626474(name: "getCreatePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreatePolicy", validator: validate_GetCreatePolicy_21626475,
    base: "/", makeUrl: url_GetCreatePolicy_21626476,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreatePolicyVersion_21626531 = ref object of OpenApiRestCall_21625435
proc url_PostCreatePolicyVersion_21626533(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreatePolicyVersion_21626532(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626534 = query.getOrDefault("Action")
  valid_21626534 = validateParameter(valid_21626534, JString, required = true,
                                   default = newJString("CreatePolicyVersion"))
  if valid_21626534 != nil:
    section.add "Action", valid_21626534
  var valid_21626535 = query.getOrDefault("Version")
  valid_21626535 = validateParameter(valid_21626535, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626535 != nil:
    section.add "Version", valid_21626535
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626536 = header.getOrDefault("X-Amz-Date")
  valid_21626536 = validateParameter(valid_21626536, JString, required = false,
                                   default = nil)
  if valid_21626536 != nil:
    section.add "X-Amz-Date", valid_21626536
  var valid_21626537 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626537 = validateParameter(valid_21626537, JString, required = false,
                                   default = nil)
  if valid_21626537 != nil:
    section.add "X-Amz-Security-Token", valid_21626537
  var valid_21626538 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626538 = validateParameter(valid_21626538, JString, required = false,
                                   default = nil)
  if valid_21626538 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626538
  var valid_21626539 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626539 = validateParameter(valid_21626539, JString, required = false,
                                   default = nil)
  if valid_21626539 != nil:
    section.add "X-Amz-Algorithm", valid_21626539
  var valid_21626540 = header.getOrDefault("X-Amz-Signature")
  valid_21626540 = validateParameter(valid_21626540, JString, required = false,
                                   default = nil)
  if valid_21626540 != nil:
    section.add "X-Amz-Signature", valid_21626540
  var valid_21626541 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626541 = validateParameter(valid_21626541, JString, required = false,
                                   default = nil)
  if valid_21626541 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626541
  var valid_21626542 = header.getOrDefault("X-Amz-Credential")
  valid_21626542 = validateParameter(valid_21626542, JString, required = false,
                                   default = nil)
  if valid_21626542 != nil:
    section.add "X-Amz-Credential", valid_21626542
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   SetAsDefault: JBool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_21626543 = formData.getOrDefault("PolicyArn")
  valid_21626543 = validateParameter(valid_21626543, JString, required = true,
                                   default = nil)
  if valid_21626543 != nil:
    section.add "PolicyArn", valid_21626543
  var valid_21626544 = formData.getOrDefault("PolicyDocument")
  valid_21626544 = validateParameter(valid_21626544, JString, required = true,
                                   default = nil)
  if valid_21626544 != nil:
    section.add "PolicyDocument", valid_21626544
  var valid_21626545 = formData.getOrDefault("SetAsDefault")
  valid_21626545 = validateParameter(valid_21626545, JBool, required = false,
                                   default = nil)
  if valid_21626545 != nil:
    section.add "SetAsDefault", valid_21626545
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626546: Call_PostCreatePolicyVersion_21626531;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626546.validator(path, query, header, formData, body, _)
  let scheme = call_21626546.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626546.makeUrl(scheme.get, call_21626546.host, call_21626546.base,
                               call_21626546.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626546, uri, valid, _)

proc call*(call_21626547: Call_PostCreatePolicyVersion_21626531; PolicyArn: string;
          PolicyDocument: string; Action: string = "CreatePolicyVersion";
          SetAsDefault: bool = false; Version: string = "2010-05-08"): Recallable =
  ## postCreatePolicyVersion
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   SetAsDefault: bool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  var query_21626548 = newJObject()
  var formData_21626549 = newJObject()
  add(formData_21626549, "PolicyArn", newJString(PolicyArn))
  add(formData_21626549, "PolicyDocument", newJString(PolicyDocument))
  add(query_21626548, "Action", newJString(Action))
  add(formData_21626549, "SetAsDefault", newJBool(SetAsDefault))
  add(query_21626548, "Version", newJString(Version))
  result = call_21626547.call(nil, query_21626548, nil, formData_21626549, nil)

var postCreatePolicyVersion* = Call_PostCreatePolicyVersion_21626531(
    name: "postCreatePolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreatePolicyVersion",
    validator: validate_PostCreatePolicyVersion_21626532, base: "/",
    makeUrl: url_PostCreatePolicyVersion_21626533,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreatePolicyVersion_21626513 = ref object of OpenApiRestCall_21625435
proc url_GetCreatePolicyVersion_21626515(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreatePolicyVersion_21626514(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SetAsDefault: JBool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_21626516 = query.getOrDefault("PolicyArn")
  valid_21626516 = validateParameter(valid_21626516, JString, required = true,
                                   default = nil)
  if valid_21626516 != nil:
    section.add "PolicyArn", valid_21626516
  var valid_21626517 = query.getOrDefault("SetAsDefault")
  valid_21626517 = validateParameter(valid_21626517, JBool, required = false,
                                   default = nil)
  if valid_21626517 != nil:
    section.add "SetAsDefault", valid_21626517
  var valid_21626518 = query.getOrDefault("Action")
  valid_21626518 = validateParameter(valid_21626518, JString, required = true,
                                   default = newJString("CreatePolicyVersion"))
  if valid_21626518 != nil:
    section.add "Action", valid_21626518
  var valid_21626519 = query.getOrDefault("PolicyDocument")
  valid_21626519 = validateParameter(valid_21626519, JString, required = true,
                                   default = nil)
  if valid_21626519 != nil:
    section.add "PolicyDocument", valid_21626519
  var valid_21626520 = query.getOrDefault("Version")
  valid_21626520 = validateParameter(valid_21626520, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626520 != nil:
    section.add "Version", valid_21626520
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626521 = header.getOrDefault("X-Amz-Date")
  valid_21626521 = validateParameter(valid_21626521, JString, required = false,
                                   default = nil)
  if valid_21626521 != nil:
    section.add "X-Amz-Date", valid_21626521
  var valid_21626522 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626522 = validateParameter(valid_21626522, JString, required = false,
                                   default = nil)
  if valid_21626522 != nil:
    section.add "X-Amz-Security-Token", valid_21626522
  var valid_21626523 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626523 = validateParameter(valid_21626523, JString, required = false,
                                   default = nil)
  if valid_21626523 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626523
  var valid_21626524 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626524 = validateParameter(valid_21626524, JString, required = false,
                                   default = nil)
  if valid_21626524 != nil:
    section.add "X-Amz-Algorithm", valid_21626524
  var valid_21626525 = header.getOrDefault("X-Amz-Signature")
  valid_21626525 = validateParameter(valid_21626525, JString, required = false,
                                   default = nil)
  if valid_21626525 != nil:
    section.add "X-Amz-Signature", valid_21626525
  var valid_21626526 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626526 = validateParameter(valid_21626526, JString, required = false,
                                   default = nil)
  if valid_21626526 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626526
  var valid_21626527 = header.getOrDefault("X-Amz-Credential")
  valid_21626527 = validateParameter(valid_21626527, JString, required = false,
                                   default = nil)
  if valid_21626527 != nil:
    section.add "X-Amz-Credential", valid_21626527
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626528: Call_GetCreatePolicyVersion_21626513;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626528.validator(path, query, header, formData, body, _)
  let scheme = call_21626528.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626528.makeUrl(scheme.get, call_21626528.host, call_21626528.base,
                               call_21626528.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626528, uri, valid, _)

proc call*(call_21626529: Call_GetCreatePolicyVersion_21626513; PolicyArn: string;
          PolicyDocument: string; SetAsDefault: bool = false;
          Action: string = "CreatePolicyVersion"; Version: string = "2010-05-08"): Recallable =
  ## getCreatePolicyVersion
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SetAsDefault: bool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Version: string (required)
  var query_21626530 = newJObject()
  add(query_21626530, "PolicyArn", newJString(PolicyArn))
  add(query_21626530, "SetAsDefault", newJBool(SetAsDefault))
  add(query_21626530, "Action", newJString(Action))
  add(query_21626530, "PolicyDocument", newJString(PolicyDocument))
  add(query_21626530, "Version", newJString(Version))
  result = call_21626529.call(nil, query_21626530, nil, nil, nil)

var getCreatePolicyVersion* = Call_GetCreatePolicyVersion_21626513(
    name: "getCreatePolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreatePolicyVersion",
    validator: validate_GetCreatePolicyVersion_21626514, base: "/",
    makeUrl: url_GetCreatePolicyVersion_21626515,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateRole_21626572 = ref object of OpenApiRestCall_21625435
proc url_PostCreateRole_21626574(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateRole_21626573(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626575 = query.getOrDefault("Action")
  valid_21626575 = validateParameter(valid_21626575, JString, required = true,
                                   default = newJString("CreateRole"))
  if valid_21626575 != nil:
    section.add "Action", valid_21626575
  var valid_21626576 = query.getOrDefault("Version")
  valid_21626576 = validateParameter(valid_21626576, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626576 != nil:
    section.add "Version", valid_21626576
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626577 = header.getOrDefault("X-Amz-Date")
  valid_21626577 = validateParameter(valid_21626577, JString, required = false,
                                   default = nil)
  if valid_21626577 != nil:
    section.add "X-Amz-Date", valid_21626577
  var valid_21626578 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626578 = validateParameter(valid_21626578, JString, required = false,
                                   default = nil)
  if valid_21626578 != nil:
    section.add "X-Amz-Security-Token", valid_21626578
  var valid_21626579 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626579 = validateParameter(valid_21626579, JString, required = false,
                                   default = nil)
  if valid_21626579 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626579
  var valid_21626580 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626580 = validateParameter(valid_21626580, JString, required = false,
                                   default = nil)
  if valid_21626580 != nil:
    section.add "X-Amz-Algorithm", valid_21626580
  var valid_21626581 = header.getOrDefault("X-Amz-Signature")
  valid_21626581 = validateParameter(valid_21626581, JString, required = false,
                                   default = nil)
  if valid_21626581 != nil:
    section.add "X-Amz-Signature", valid_21626581
  var valid_21626582 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626582 = validateParameter(valid_21626582, JString, required = false,
                                   default = nil)
  if valid_21626582 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626582
  var valid_21626583 = header.getOrDefault("X-Amz-Credential")
  valid_21626583 = validateParameter(valid_21626583, JString, required = false,
                                   default = nil)
  if valid_21626583 != nil:
    section.add "X-Amz-Credential", valid_21626583
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   AssumeRolePolicyDocument: JString (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Description: JString
  ##              : A description of the role.
  ##   Path: JString
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_21626584 = formData.getOrDefault("RoleName")
  valid_21626584 = validateParameter(valid_21626584, JString, required = true,
                                   default = nil)
  if valid_21626584 != nil:
    section.add "RoleName", valid_21626584
  var valid_21626585 = formData.getOrDefault("PermissionsBoundary")
  valid_21626585 = validateParameter(valid_21626585, JString, required = false,
                                   default = nil)
  if valid_21626585 != nil:
    section.add "PermissionsBoundary", valid_21626585
  var valid_21626586 = formData.getOrDefault("Tags")
  valid_21626586 = validateParameter(valid_21626586, JArray, required = false,
                                   default = nil)
  if valid_21626586 != nil:
    section.add "Tags", valid_21626586
  var valid_21626587 = formData.getOrDefault("AssumeRolePolicyDocument")
  valid_21626587 = validateParameter(valid_21626587, JString, required = true,
                                   default = nil)
  if valid_21626587 != nil:
    section.add "AssumeRolePolicyDocument", valid_21626587
  var valid_21626588 = formData.getOrDefault("MaxSessionDuration")
  valid_21626588 = validateParameter(valid_21626588, JInt, required = false,
                                   default = nil)
  if valid_21626588 != nil:
    section.add "MaxSessionDuration", valid_21626588
  var valid_21626589 = formData.getOrDefault("Description")
  valid_21626589 = validateParameter(valid_21626589, JString, required = false,
                                   default = nil)
  if valid_21626589 != nil:
    section.add "Description", valid_21626589
  var valid_21626590 = formData.getOrDefault("Path")
  valid_21626590 = validateParameter(valid_21626590, JString, required = false,
                                   default = nil)
  if valid_21626590 != nil:
    section.add "Path", valid_21626590
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626591: Call_PostCreateRole_21626572; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21626591.validator(path, query, header, formData, body, _)
  let scheme = call_21626591.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626591.makeUrl(scheme.get, call_21626591.host, call_21626591.base,
                               call_21626591.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626591, uri, valid, _)

proc call*(call_21626592: Call_PostCreateRole_21626572; RoleName: string;
          AssumeRolePolicyDocument: string; PermissionsBoundary: string = "";
          Tags: JsonNode = nil; Action: string = "CreateRole";
          MaxSessionDuration: int = 0; Version: string = "2010-05-08";
          Description: string = ""; Path: string = ""): Recallable =
  ## postCreateRole
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ##   RoleName: string (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   Action: string (required)
  ##   AssumeRolePolicyDocument: string (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  ##   Description: string
  ##              : A description of the role.
  ##   Path: string
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_21626593 = newJObject()
  var formData_21626594 = newJObject()
  add(formData_21626594, "RoleName", newJString(RoleName))
  add(formData_21626594, "PermissionsBoundary", newJString(PermissionsBoundary))
  if Tags != nil:
    formData_21626594.add "Tags", Tags
  add(query_21626593, "Action", newJString(Action))
  add(formData_21626594, "AssumeRolePolicyDocument",
      newJString(AssumeRolePolicyDocument))
  add(formData_21626594, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_21626593, "Version", newJString(Version))
  add(formData_21626594, "Description", newJString(Description))
  add(formData_21626594, "Path", newJString(Path))
  result = call_21626592.call(nil, query_21626593, nil, formData_21626594, nil)

var postCreateRole* = Call_PostCreateRole_21626572(name: "postCreateRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateRole", validator: validate_PostCreateRole_21626573,
    base: "/", makeUrl: url_PostCreateRole_21626574,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateRole_21626550 = ref object of OpenApiRestCall_21625435
proc url_GetCreateRole_21626552(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateRole_21626551(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AssumeRolePolicyDocument: JString (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   Description: JString
  ##              : A description of the role.
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AssumeRolePolicyDocument` field"
  var valid_21626553 = query.getOrDefault("AssumeRolePolicyDocument")
  valid_21626553 = validateParameter(valid_21626553, JString, required = true,
                                   default = nil)
  if valid_21626553 != nil:
    section.add "AssumeRolePolicyDocument", valid_21626553
  var valid_21626554 = query.getOrDefault("Description")
  valid_21626554 = validateParameter(valid_21626554, JString, required = false,
                                   default = nil)
  if valid_21626554 != nil:
    section.add "Description", valid_21626554
  var valid_21626555 = query.getOrDefault("Tags")
  valid_21626555 = validateParameter(valid_21626555, JArray, required = false,
                                   default = nil)
  if valid_21626555 != nil:
    section.add "Tags", valid_21626555
  var valid_21626556 = query.getOrDefault("MaxSessionDuration")
  valid_21626556 = validateParameter(valid_21626556, JInt, required = false,
                                   default = nil)
  if valid_21626556 != nil:
    section.add "MaxSessionDuration", valid_21626556
  var valid_21626557 = query.getOrDefault("Action")
  valid_21626557 = validateParameter(valid_21626557, JString, required = true,
                                   default = newJString("CreateRole"))
  if valid_21626557 != nil:
    section.add "Action", valid_21626557
  var valid_21626558 = query.getOrDefault("Path")
  valid_21626558 = validateParameter(valid_21626558, JString, required = false,
                                   default = nil)
  if valid_21626558 != nil:
    section.add "Path", valid_21626558
  var valid_21626559 = query.getOrDefault("PermissionsBoundary")
  valid_21626559 = validateParameter(valid_21626559, JString, required = false,
                                   default = nil)
  if valid_21626559 != nil:
    section.add "PermissionsBoundary", valid_21626559
  var valid_21626560 = query.getOrDefault("RoleName")
  valid_21626560 = validateParameter(valid_21626560, JString, required = true,
                                   default = nil)
  if valid_21626560 != nil:
    section.add "RoleName", valid_21626560
  var valid_21626561 = query.getOrDefault("Version")
  valid_21626561 = validateParameter(valid_21626561, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626561 != nil:
    section.add "Version", valid_21626561
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626562 = header.getOrDefault("X-Amz-Date")
  valid_21626562 = validateParameter(valid_21626562, JString, required = false,
                                   default = nil)
  if valid_21626562 != nil:
    section.add "X-Amz-Date", valid_21626562
  var valid_21626563 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626563 = validateParameter(valid_21626563, JString, required = false,
                                   default = nil)
  if valid_21626563 != nil:
    section.add "X-Amz-Security-Token", valid_21626563
  var valid_21626564 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626564 = validateParameter(valid_21626564, JString, required = false,
                                   default = nil)
  if valid_21626564 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626564
  var valid_21626565 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626565 = validateParameter(valid_21626565, JString, required = false,
                                   default = nil)
  if valid_21626565 != nil:
    section.add "X-Amz-Algorithm", valid_21626565
  var valid_21626566 = header.getOrDefault("X-Amz-Signature")
  valid_21626566 = validateParameter(valid_21626566, JString, required = false,
                                   default = nil)
  if valid_21626566 != nil:
    section.add "X-Amz-Signature", valid_21626566
  var valid_21626567 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626567 = validateParameter(valid_21626567, JString, required = false,
                                   default = nil)
  if valid_21626567 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626567
  var valid_21626568 = header.getOrDefault("X-Amz-Credential")
  valid_21626568 = validateParameter(valid_21626568, JString, required = false,
                                   default = nil)
  if valid_21626568 != nil:
    section.add "X-Amz-Credential", valid_21626568
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626569: Call_GetCreateRole_21626550; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21626569.validator(path, query, header, formData, body, _)
  let scheme = call_21626569.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626569.makeUrl(scheme.get, call_21626569.host, call_21626569.base,
                               call_21626569.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626569, uri, valid, _)

proc call*(call_21626570: Call_GetCreateRole_21626550;
          AssumeRolePolicyDocument: string; RoleName: string;
          Description: string = ""; Tags: JsonNode = nil; MaxSessionDuration: int = 0;
          Action: string = "CreateRole"; Path: string = "";
          PermissionsBoundary: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateRole
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ##   AssumeRolePolicyDocument: string (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   Description: string
  ##              : A description of the role.
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: string (required)
  var query_21626571 = newJObject()
  add(query_21626571, "AssumeRolePolicyDocument",
      newJString(AssumeRolePolicyDocument))
  add(query_21626571, "Description", newJString(Description))
  if Tags != nil:
    query_21626571.add "Tags", Tags
  add(query_21626571, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_21626571, "Action", newJString(Action))
  add(query_21626571, "Path", newJString(Path))
  add(query_21626571, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_21626571, "RoleName", newJString(RoleName))
  add(query_21626571, "Version", newJString(Version))
  result = call_21626570.call(nil, query_21626571, nil, nil, nil)

var getCreateRole* = Call_GetCreateRole_21626550(name: "getCreateRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateRole", validator: validate_GetCreateRole_21626551,
    base: "/", makeUrl: url_GetCreateRole_21626552,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateSAMLProvider_21626612 = ref object of OpenApiRestCall_21625435
proc url_PostCreateSAMLProvider_21626614(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateSAMLProvider_21626613(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626615 = query.getOrDefault("Action")
  valid_21626615 = validateParameter(valid_21626615, JString, required = true,
                                   default = newJString("CreateSAMLProvider"))
  if valid_21626615 != nil:
    section.add "Action", valid_21626615
  var valid_21626616 = query.getOrDefault("Version")
  valid_21626616 = validateParameter(valid_21626616, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626616 != nil:
    section.add "Version", valid_21626616
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626617 = header.getOrDefault("X-Amz-Date")
  valid_21626617 = validateParameter(valid_21626617, JString, required = false,
                                   default = nil)
  if valid_21626617 != nil:
    section.add "X-Amz-Date", valid_21626617
  var valid_21626618 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626618 = validateParameter(valid_21626618, JString, required = false,
                                   default = nil)
  if valid_21626618 != nil:
    section.add "X-Amz-Security-Token", valid_21626618
  var valid_21626619 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626619 = validateParameter(valid_21626619, JString, required = false,
                                   default = nil)
  if valid_21626619 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626619
  var valid_21626620 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626620 = validateParameter(valid_21626620, JString, required = false,
                                   default = nil)
  if valid_21626620 != nil:
    section.add "X-Amz-Algorithm", valid_21626620
  var valid_21626621 = header.getOrDefault("X-Amz-Signature")
  valid_21626621 = validateParameter(valid_21626621, JString, required = false,
                                   default = nil)
  if valid_21626621 != nil:
    section.add "X-Amz-Signature", valid_21626621
  var valid_21626622 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626622 = validateParameter(valid_21626622, JString, required = false,
                                   default = nil)
  if valid_21626622 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626622
  var valid_21626623 = header.getOrDefault("X-Amz-Credential")
  valid_21626623 = validateParameter(valid_21626623, JString, required = false,
                                   default = nil)
  if valid_21626623 != nil:
    section.add "X-Amz-Credential", valid_21626623
  result.add "header", section
  ## parameters in `formData` object:
  ##   Name: JString (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SAMLMetadataDocument: JString (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Name` field"
  var valid_21626624 = formData.getOrDefault("Name")
  valid_21626624 = validateParameter(valid_21626624, JString, required = true,
                                   default = nil)
  if valid_21626624 != nil:
    section.add "Name", valid_21626624
  var valid_21626625 = formData.getOrDefault("SAMLMetadataDocument")
  valid_21626625 = validateParameter(valid_21626625, JString, required = true,
                                   default = nil)
  if valid_21626625 != nil:
    section.add "SAMLMetadataDocument", valid_21626625
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626626: Call_PostCreateSAMLProvider_21626612;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626626.validator(path, query, header, formData, body, _)
  let scheme = call_21626626.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626626.makeUrl(scheme.get, call_21626626.host, call_21626626.base,
                               call_21626626.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626626, uri, valid, _)

proc call*(call_21626627: Call_PostCreateSAMLProvider_21626612; Name: string;
          SAMLMetadataDocument: string; Action: string = "CreateSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateSAMLProvider
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ##   Name: string (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   SAMLMetadataDocument: string (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Version: string (required)
  var query_21626628 = newJObject()
  var formData_21626629 = newJObject()
  add(formData_21626629, "Name", newJString(Name))
  add(query_21626628, "Action", newJString(Action))
  add(formData_21626629, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_21626628, "Version", newJString(Version))
  result = call_21626627.call(nil, query_21626628, nil, formData_21626629, nil)

var postCreateSAMLProvider* = Call_PostCreateSAMLProvider_21626612(
    name: "postCreateSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateSAMLProvider",
    validator: validate_PostCreateSAMLProvider_21626613, base: "/",
    makeUrl: url_PostCreateSAMLProvider_21626614,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateSAMLProvider_21626595 = ref object of OpenApiRestCall_21625435
proc url_GetCreateSAMLProvider_21626597(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateSAMLProvider_21626596(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Name: JString (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SAMLMetadataDocument: JString (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Name` field"
  var valid_21626598 = query.getOrDefault("Name")
  valid_21626598 = validateParameter(valid_21626598, JString, required = true,
                                   default = nil)
  if valid_21626598 != nil:
    section.add "Name", valid_21626598
  var valid_21626599 = query.getOrDefault("SAMLMetadataDocument")
  valid_21626599 = validateParameter(valid_21626599, JString, required = true,
                                   default = nil)
  if valid_21626599 != nil:
    section.add "SAMLMetadataDocument", valid_21626599
  var valid_21626600 = query.getOrDefault("Action")
  valid_21626600 = validateParameter(valid_21626600, JString, required = true,
                                   default = newJString("CreateSAMLProvider"))
  if valid_21626600 != nil:
    section.add "Action", valid_21626600
  var valid_21626601 = query.getOrDefault("Version")
  valid_21626601 = validateParameter(valid_21626601, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626601 != nil:
    section.add "Version", valid_21626601
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626602 = header.getOrDefault("X-Amz-Date")
  valid_21626602 = validateParameter(valid_21626602, JString, required = false,
                                   default = nil)
  if valid_21626602 != nil:
    section.add "X-Amz-Date", valid_21626602
  var valid_21626603 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626603 = validateParameter(valid_21626603, JString, required = false,
                                   default = nil)
  if valid_21626603 != nil:
    section.add "X-Amz-Security-Token", valid_21626603
  var valid_21626604 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626604 = validateParameter(valid_21626604, JString, required = false,
                                   default = nil)
  if valid_21626604 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626604
  var valid_21626605 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626605 = validateParameter(valid_21626605, JString, required = false,
                                   default = nil)
  if valid_21626605 != nil:
    section.add "X-Amz-Algorithm", valid_21626605
  var valid_21626606 = header.getOrDefault("X-Amz-Signature")
  valid_21626606 = validateParameter(valid_21626606, JString, required = false,
                                   default = nil)
  if valid_21626606 != nil:
    section.add "X-Amz-Signature", valid_21626606
  var valid_21626607 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626607 = validateParameter(valid_21626607, JString, required = false,
                                   default = nil)
  if valid_21626607 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626607
  var valid_21626608 = header.getOrDefault("X-Amz-Credential")
  valid_21626608 = validateParameter(valid_21626608, JString, required = false,
                                   default = nil)
  if valid_21626608 != nil:
    section.add "X-Amz-Credential", valid_21626608
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626609: Call_GetCreateSAMLProvider_21626595;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626609.validator(path, query, header, formData, body, _)
  let scheme = call_21626609.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626609.makeUrl(scheme.get, call_21626609.host, call_21626609.base,
                               call_21626609.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626609, uri, valid, _)

proc call*(call_21626610: Call_GetCreateSAMLProvider_21626595; Name: string;
          SAMLMetadataDocument: string; Action: string = "CreateSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateSAMLProvider
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ##   Name: string (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SAMLMetadataDocument: string (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626611 = newJObject()
  add(query_21626611, "Name", newJString(Name))
  add(query_21626611, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_21626611, "Action", newJString(Action))
  add(query_21626611, "Version", newJString(Version))
  result = call_21626610.call(nil, query_21626611, nil, nil, nil)

var getCreateSAMLProvider* = Call_GetCreateSAMLProvider_21626595(
    name: "getCreateSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateSAMLProvider",
    validator: validate_GetCreateSAMLProvider_21626596, base: "/",
    makeUrl: url_GetCreateSAMLProvider_21626597,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateServiceLinkedRole_21626648 = ref object of OpenApiRestCall_21625435
proc url_PostCreateServiceLinkedRole_21626650(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateServiceLinkedRole_21626649(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626651 = query.getOrDefault("Action")
  valid_21626651 = validateParameter(valid_21626651, JString, required = true, default = newJString(
      "CreateServiceLinkedRole"))
  if valid_21626651 != nil:
    section.add "Action", valid_21626651
  var valid_21626652 = query.getOrDefault("Version")
  valid_21626652 = validateParameter(valid_21626652, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626652 != nil:
    section.add "Version", valid_21626652
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626653 = header.getOrDefault("X-Amz-Date")
  valid_21626653 = validateParameter(valid_21626653, JString, required = false,
                                   default = nil)
  if valid_21626653 != nil:
    section.add "X-Amz-Date", valid_21626653
  var valid_21626654 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626654 = validateParameter(valid_21626654, JString, required = false,
                                   default = nil)
  if valid_21626654 != nil:
    section.add "X-Amz-Security-Token", valid_21626654
  var valid_21626655 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626655 = validateParameter(valid_21626655, JString, required = false,
                                   default = nil)
  if valid_21626655 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626655
  var valid_21626656 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626656 = validateParameter(valid_21626656, JString, required = false,
                                   default = nil)
  if valid_21626656 != nil:
    section.add "X-Amz-Algorithm", valid_21626656
  var valid_21626657 = header.getOrDefault("X-Amz-Signature")
  valid_21626657 = validateParameter(valid_21626657, JString, required = false,
                                   default = nil)
  if valid_21626657 != nil:
    section.add "X-Amz-Signature", valid_21626657
  var valid_21626658 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626658 = validateParameter(valid_21626658, JString, required = false,
                                   default = nil)
  if valid_21626658 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626658
  var valid_21626659 = header.getOrDefault("X-Amz-Credential")
  valid_21626659 = validateParameter(valid_21626659, JString, required = false,
                                   default = nil)
  if valid_21626659 != nil:
    section.add "X-Amz-Credential", valid_21626659
  result.add "header", section
  ## parameters in `formData` object:
  ##   AWSServiceName: JString (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   CustomSuffix: JString
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Description: JString
  ##              : The description of the role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AWSServiceName` field"
  var valid_21626660 = formData.getOrDefault("AWSServiceName")
  valid_21626660 = validateParameter(valid_21626660, JString, required = true,
                                   default = nil)
  if valid_21626660 != nil:
    section.add "AWSServiceName", valid_21626660
  var valid_21626661 = formData.getOrDefault("CustomSuffix")
  valid_21626661 = validateParameter(valid_21626661, JString, required = false,
                                   default = nil)
  if valid_21626661 != nil:
    section.add "CustomSuffix", valid_21626661
  var valid_21626662 = formData.getOrDefault("Description")
  valid_21626662 = validateParameter(valid_21626662, JString, required = false,
                                   default = nil)
  if valid_21626662 != nil:
    section.add "Description", valid_21626662
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626663: Call_PostCreateServiceLinkedRole_21626648;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  let valid = call_21626663.validator(path, query, header, formData, body, _)
  let scheme = call_21626663.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626663.makeUrl(scheme.get, call_21626663.host, call_21626663.base,
                               call_21626663.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626663, uri, valid, _)

proc call*(call_21626664: Call_PostCreateServiceLinkedRole_21626648;
          AWSServiceName: string; CustomSuffix: string = "";
          Action: string = "CreateServiceLinkedRole";
          Version: string = "2010-05-08"; Description: string = ""): Recallable =
  ## postCreateServiceLinkedRole
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ##   AWSServiceName: string (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   CustomSuffix: string
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string
  ##              : The description of the role.
  var query_21626665 = newJObject()
  var formData_21626666 = newJObject()
  add(formData_21626666, "AWSServiceName", newJString(AWSServiceName))
  add(formData_21626666, "CustomSuffix", newJString(CustomSuffix))
  add(query_21626665, "Action", newJString(Action))
  add(query_21626665, "Version", newJString(Version))
  add(formData_21626666, "Description", newJString(Description))
  result = call_21626664.call(nil, query_21626665, nil, formData_21626666, nil)

var postCreateServiceLinkedRole* = Call_PostCreateServiceLinkedRole_21626648(
    name: "postCreateServiceLinkedRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceLinkedRole",
    validator: validate_PostCreateServiceLinkedRole_21626649, base: "/",
    makeUrl: url_PostCreateServiceLinkedRole_21626650,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateServiceLinkedRole_21626630 = ref object of OpenApiRestCall_21625435
proc url_GetCreateServiceLinkedRole_21626632(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateServiceLinkedRole_21626631(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString
  ##              : The description of the role.
  ##   AWSServiceName: JString (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CustomSuffix: JString
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  section = newJObject()
  var valid_21626633 = query.getOrDefault("Description")
  valid_21626633 = validateParameter(valid_21626633, JString, required = false,
                                   default = nil)
  if valid_21626633 != nil:
    section.add "Description", valid_21626633
  assert query != nil,
        "query argument is necessary due to required `AWSServiceName` field"
  var valid_21626634 = query.getOrDefault("AWSServiceName")
  valid_21626634 = validateParameter(valid_21626634, JString, required = true,
                                   default = nil)
  if valid_21626634 != nil:
    section.add "AWSServiceName", valid_21626634
  var valid_21626635 = query.getOrDefault("Action")
  valid_21626635 = validateParameter(valid_21626635, JString, required = true, default = newJString(
      "CreateServiceLinkedRole"))
  if valid_21626635 != nil:
    section.add "Action", valid_21626635
  var valid_21626636 = query.getOrDefault("Version")
  valid_21626636 = validateParameter(valid_21626636, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626636 != nil:
    section.add "Version", valid_21626636
  var valid_21626637 = query.getOrDefault("CustomSuffix")
  valid_21626637 = validateParameter(valid_21626637, JString, required = false,
                                   default = nil)
  if valid_21626637 != nil:
    section.add "CustomSuffix", valid_21626637
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626638 = header.getOrDefault("X-Amz-Date")
  valid_21626638 = validateParameter(valid_21626638, JString, required = false,
                                   default = nil)
  if valid_21626638 != nil:
    section.add "X-Amz-Date", valid_21626638
  var valid_21626639 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626639 = validateParameter(valid_21626639, JString, required = false,
                                   default = nil)
  if valid_21626639 != nil:
    section.add "X-Amz-Security-Token", valid_21626639
  var valid_21626640 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626640 = validateParameter(valid_21626640, JString, required = false,
                                   default = nil)
  if valid_21626640 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626640
  var valid_21626641 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626641 = validateParameter(valid_21626641, JString, required = false,
                                   default = nil)
  if valid_21626641 != nil:
    section.add "X-Amz-Algorithm", valid_21626641
  var valid_21626642 = header.getOrDefault("X-Amz-Signature")
  valid_21626642 = validateParameter(valid_21626642, JString, required = false,
                                   default = nil)
  if valid_21626642 != nil:
    section.add "X-Amz-Signature", valid_21626642
  var valid_21626643 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626643 = validateParameter(valid_21626643, JString, required = false,
                                   default = nil)
  if valid_21626643 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626643
  var valid_21626644 = header.getOrDefault("X-Amz-Credential")
  valid_21626644 = validateParameter(valid_21626644, JString, required = false,
                                   default = nil)
  if valid_21626644 != nil:
    section.add "X-Amz-Credential", valid_21626644
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626645: Call_GetCreateServiceLinkedRole_21626630;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  let valid = call_21626645.validator(path, query, header, formData, body, _)
  let scheme = call_21626645.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626645.makeUrl(scheme.get, call_21626645.host, call_21626645.base,
                               call_21626645.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626645, uri, valid, _)

proc call*(call_21626646: Call_GetCreateServiceLinkedRole_21626630;
          AWSServiceName: string; Description: string = "";
          Action: string = "CreateServiceLinkedRole";
          Version: string = "2010-05-08"; CustomSuffix: string = ""): Recallable =
  ## getCreateServiceLinkedRole
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ##   Description: string
  ##              : The description of the role.
  ##   AWSServiceName: string (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CustomSuffix: string
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  var query_21626647 = newJObject()
  add(query_21626647, "Description", newJString(Description))
  add(query_21626647, "AWSServiceName", newJString(AWSServiceName))
  add(query_21626647, "Action", newJString(Action))
  add(query_21626647, "Version", newJString(Version))
  add(query_21626647, "CustomSuffix", newJString(CustomSuffix))
  result = call_21626646.call(nil, query_21626647, nil, nil, nil)

var getCreateServiceLinkedRole* = Call_GetCreateServiceLinkedRole_21626630(
    name: "getCreateServiceLinkedRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceLinkedRole",
    validator: validate_GetCreateServiceLinkedRole_21626631, base: "/",
    makeUrl: url_GetCreateServiceLinkedRole_21626632,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateServiceSpecificCredential_21626684 = ref object of OpenApiRestCall_21625435
proc url_PostCreateServiceSpecificCredential_21626686(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateServiceSpecificCredential_21626685(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626687 = query.getOrDefault("Action")
  valid_21626687 = validateParameter(valid_21626687, JString, required = true, default = newJString(
      "CreateServiceSpecificCredential"))
  if valid_21626687 != nil:
    section.add "Action", valid_21626687
  var valid_21626688 = query.getOrDefault("Version")
  valid_21626688 = validateParameter(valid_21626688, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626688 != nil:
    section.add "Version", valid_21626688
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626689 = header.getOrDefault("X-Amz-Date")
  valid_21626689 = validateParameter(valid_21626689, JString, required = false,
                                   default = nil)
  if valid_21626689 != nil:
    section.add "X-Amz-Date", valid_21626689
  var valid_21626690 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626690 = validateParameter(valid_21626690, JString, required = false,
                                   default = nil)
  if valid_21626690 != nil:
    section.add "X-Amz-Security-Token", valid_21626690
  var valid_21626691 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626691 = validateParameter(valid_21626691, JString, required = false,
                                   default = nil)
  if valid_21626691 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626691
  var valid_21626692 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626692 = validateParameter(valid_21626692, JString, required = false,
                                   default = nil)
  if valid_21626692 != nil:
    section.add "X-Amz-Algorithm", valid_21626692
  var valid_21626693 = header.getOrDefault("X-Amz-Signature")
  valid_21626693 = validateParameter(valid_21626693, JString, required = false,
                                   default = nil)
  if valid_21626693 != nil:
    section.add "X-Amz-Signature", valid_21626693
  var valid_21626694 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626694 = validateParameter(valid_21626694, JString, required = false,
                                   default = nil)
  if valid_21626694 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626694
  var valid_21626695 = header.getOrDefault("X-Amz-Credential")
  valid_21626695 = validateParameter(valid_21626695, JString, required = false,
                                   default = nil)
  if valid_21626695 != nil:
    section.add "X-Amz-Credential", valid_21626695
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: JString (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21626696 = formData.getOrDefault("UserName")
  valid_21626696 = validateParameter(valid_21626696, JString, required = true,
                                   default = nil)
  if valid_21626696 != nil:
    section.add "UserName", valid_21626696
  var valid_21626697 = formData.getOrDefault("ServiceName")
  valid_21626697 = validateParameter(valid_21626697, JString, required = true,
                                   default = nil)
  if valid_21626697 != nil:
    section.add "ServiceName", valid_21626697
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626698: Call_PostCreateServiceSpecificCredential_21626684;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626698.validator(path, query, header, formData, body, _)
  let scheme = call_21626698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626698.makeUrl(scheme.get, call_21626698.host, call_21626698.base,
                               call_21626698.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626698, uri, valid, _)

proc call*(call_21626699: Call_PostCreateServiceSpecificCredential_21626684;
          UserName: string; ServiceName: string;
          Action: string = "CreateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateServiceSpecificCredential
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ServiceName: string (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  var query_21626700 = newJObject()
  var formData_21626701 = newJObject()
  add(formData_21626701, "UserName", newJString(UserName))
  add(query_21626700, "Action", newJString(Action))
  add(query_21626700, "Version", newJString(Version))
  add(formData_21626701, "ServiceName", newJString(ServiceName))
  result = call_21626699.call(nil, query_21626700, nil, formData_21626701, nil)

var postCreateServiceSpecificCredential* = Call_PostCreateServiceSpecificCredential_21626684(
    name: "postCreateServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceSpecificCredential",
    validator: validate_PostCreateServiceSpecificCredential_21626685, base: "/",
    makeUrl: url_PostCreateServiceSpecificCredential_21626686,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateServiceSpecificCredential_21626667 = ref object of OpenApiRestCall_21625435
proc url_GetCreateServiceSpecificCredential_21626669(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateServiceSpecificCredential_21626668(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceName: JString (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceName` field"
  var valid_21626670 = query.getOrDefault("ServiceName")
  valid_21626670 = validateParameter(valid_21626670, JString, required = true,
                                   default = nil)
  if valid_21626670 != nil:
    section.add "ServiceName", valid_21626670
  var valid_21626671 = query.getOrDefault("UserName")
  valid_21626671 = validateParameter(valid_21626671, JString, required = true,
                                   default = nil)
  if valid_21626671 != nil:
    section.add "UserName", valid_21626671
  var valid_21626672 = query.getOrDefault("Action")
  valid_21626672 = validateParameter(valid_21626672, JString, required = true, default = newJString(
      "CreateServiceSpecificCredential"))
  if valid_21626672 != nil:
    section.add "Action", valid_21626672
  var valid_21626673 = query.getOrDefault("Version")
  valid_21626673 = validateParameter(valid_21626673, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626673 != nil:
    section.add "Version", valid_21626673
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626674 = header.getOrDefault("X-Amz-Date")
  valid_21626674 = validateParameter(valid_21626674, JString, required = false,
                                   default = nil)
  if valid_21626674 != nil:
    section.add "X-Amz-Date", valid_21626674
  var valid_21626675 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626675 = validateParameter(valid_21626675, JString, required = false,
                                   default = nil)
  if valid_21626675 != nil:
    section.add "X-Amz-Security-Token", valid_21626675
  var valid_21626676 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626676 = validateParameter(valid_21626676, JString, required = false,
                                   default = nil)
  if valid_21626676 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626676
  var valid_21626677 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626677 = validateParameter(valid_21626677, JString, required = false,
                                   default = nil)
  if valid_21626677 != nil:
    section.add "X-Amz-Algorithm", valid_21626677
  var valid_21626678 = header.getOrDefault("X-Amz-Signature")
  valid_21626678 = validateParameter(valid_21626678, JString, required = false,
                                   default = nil)
  if valid_21626678 != nil:
    section.add "X-Amz-Signature", valid_21626678
  var valid_21626679 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626679 = validateParameter(valid_21626679, JString, required = false,
                                   default = nil)
  if valid_21626679 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626679
  var valid_21626680 = header.getOrDefault("X-Amz-Credential")
  valid_21626680 = validateParameter(valid_21626680, JString, required = false,
                                   default = nil)
  if valid_21626680 != nil:
    section.add "X-Amz-Credential", valid_21626680
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626681: Call_GetCreateServiceSpecificCredential_21626667;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626681.validator(path, query, header, formData, body, _)
  let scheme = call_21626681.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626681.makeUrl(scheme.get, call_21626681.host, call_21626681.base,
                               call_21626681.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626681, uri, valid, _)

proc call*(call_21626682: Call_GetCreateServiceSpecificCredential_21626667;
          ServiceName: string; UserName: string;
          Action: string = "CreateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateServiceSpecificCredential
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ##   ServiceName: string (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626683 = newJObject()
  add(query_21626683, "ServiceName", newJString(ServiceName))
  add(query_21626683, "UserName", newJString(UserName))
  add(query_21626683, "Action", newJString(Action))
  add(query_21626683, "Version", newJString(Version))
  result = call_21626682.call(nil, query_21626683, nil, nil, nil)

var getCreateServiceSpecificCredential* = Call_GetCreateServiceSpecificCredential_21626667(
    name: "getCreateServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceSpecificCredential",
    validator: validate_GetCreateServiceSpecificCredential_21626668, base: "/",
    makeUrl: url_GetCreateServiceSpecificCredential_21626669,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateUser_21626721 = ref object of OpenApiRestCall_21625435
proc url_PostCreateUser_21626723(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateUser_21626722(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626724 = query.getOrDefault("Action")
  valid_21626724 = validateParameter(valid_21626724, JString, required = true,
                                   default = newJString("CreateUser"))
  if valid_21626724 != nil:
    section.add "Action", valid_21626724
  var valid_21626725 = query.getOrDefault("Version")
  valid_21626725 = validateParameter(valid_21626725, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626725 != nil:
    section.add "Version", valid_21626725
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626726 = header.getOrDefault("X-Amz-Date")
  valid_21626726 = validateParameter(valid_21626726, JString, required = false,
                                   default = nil)
  if valid_21626726 != nil:
    section.add "X-Amz-Date", valid_21626726
  var valid_21626727 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626727 = validateParameter(valid_21626727, JString, required = false,
                                   default = nil)
  if valid_21626727 != nil:
    section.add "X-Amz-Security-Token", valid_21626727
  var valid_21626728 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626728 = validateParameter(valid_21626728, JString, required = false,
                                   default = nil)
  if valid_21626728 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626728
  var valid_21626729 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626729 = validateParameter(valid_21626729, JString, required = false,
                                   default = nil)
  if valid_21626729 != nil:
    section.add "X-Amz-Algorithm", valid_21626729
  var valid_21626730 = header.getOrDefault("X-Amz-Signature")
  valid_21626730 = validateParameter(valid_21626730, JString, required = false,
                                   default = nil)
  if valid_21626730 != nil:
    section.add "X-Amz-Signature", valid_21626730
  var valid_21626731 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626731 = validateParameter(valid_21626731, JString, required = false,
                                   default = nil)
  if valid_21626731 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626731
  var valid_21626732 = header.getOrDefault("X-Amz-Credential")
  valid_21626732 = validateParameter(valid_21626732, JString, required = false,
                                   default = nil)
  if valid_21626732 != nil:
    section.add "X-Amz-Credential", valid_21626732
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   Path: JString
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21626733 = formData.getOrDefault("UserName")
  valid_21626733 = validateParameter(valid_21626733, JString, required = true,
                                   default = nil)
  if valid_21626733 != nil:
    section.add "UserName", valid_21626733
  var valid_21626734 = formData.getOrDefault("PermissionsBoundary")
  valid_21626734 = validateParameter(valid_21626734, JString, required = false,
                                   default = nil)
  if valid_21626734 != nil:
    section.add "PermissionsBoundary", valid_21626734
  var valid_21626735 = formData.getOrDefault("Tags")
  valid_21626735 = validateParameter(valid_21626735, JArray, required = false,
                                   default = nil)
  if valid_21626735 != nil:
    section.add "Tags", valid_21626735
  var valid_21626736 = formData.getOrDefault("Path")
  valid_21626736 = validateParameter(valid_21626736, JString, required = false,
                                   default = nil)
  if valid_21626736 != nil:
    section.add "Path", valid_21626736
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626737: Call_PostCreateUser_21626721; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626737.validator(path, query, header, formData, body, _)
  let scheme = call_21626737.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626737.makeUrl(scheme.get, call_21626737.host, call_21626737.base,
                               call_21626737.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626737, uri, valid, _)

proc call*(call_21626738: Call_PostCreateUser_21626721; UserName: string;
          PermissionsBoundary: string = ""; Tags: JsonNode = nil;
          Action: string = "CreateUser"; Version: string = "2010-05-08";
          Path: string = ""): Recallable =
  ## postCreateUser
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_21626739 = newJObject()
  var formData_21626740 = newJObject()
  add(formData_21626740, "UserName", newJString(UserName))
  add(formData_21626740, "PermissionsBoundary", newJString(PermissionsBoundary))
  if Tags != nil:
    formData_21626740.add "Tags", Tags
  add(query_21626739, "Action", newJString(Action))
  add(query_21626739, "Version", newJString(Version))
  add(formData_21626740, "Path", newJString(Path))
  result = call_21626738.call(nil, query_21626739, nil, formData_21626740, nil)

var postCreateUser* = Call_PostCreateUser_21626721(name: "postCreateUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateUser", validator: validate_PostCreateUser_21626722,
    base: "/", makeUrl: url_PostCreateUser_21626723,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateUser_21626702 = ref object of OpenApiRestCall_21625435
proc url_GetCreateUser_21626704(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateUser_21626703(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626705 = query.getOrDefault("Tags")
  valid_21626705 = validateParameter(valid_21626705, JArray, required = false,
                                   default = nil)
  if valid_21626705 != nil:
    section.add "Tags", valid_21626705
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_21626706 = query.getOrDefault("UserName")
  valid_21626706 = validateParameter(valid_21626706, JString, required = true,
                                   default = nil)
  if valid_21626706 != nil:
    section.add "UserName", valid_21626706
  var valid_21626707 = query.getOrDefault("Action")
  valid_21626707 = validateParameter(valid_21626707, JString, required = true,
                                   default = newJString("CreateUser"))
  if valid_21626707 != nil:
    section.add "Action", valid_21626707
  var valid_21626708 = query.getOrDefault("Path")
  valid_21626708 = validateParameter(valid_21626708, JString, required = false,
                                   default = nil)
  if valid_21626708 != nil:
    section.add "Path", valid_21626708
  var valid_21626709 = query.getOrDefault("PermissionsBoundary")
  valid_21626709 = validateParameter(valid_21626709, JString, required = false,
                                   default = nil)
  if valid_21626709 != nil:
    section.add "PermissionsBoundary", valid_21626709
  var valid_21626710 = query.getOrDefault("Version")
  valid_21626710 = validateParameter(valid_21626710, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626710 != nil:
    section.add "Version", valid_21626710
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626711 = header.getOrDefault("X-Amz-Date")
  valid_21626711 = validateParameter(valid_21626711, JString, required = false,
                                   default = nil)
  if valid_21626711 != nil:
    section.add "X-Amz-Date", valid_21626711
  var valid_21626712 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626712 = validateParameter(valid_21626712, JString, required = false,
                                   default = nil)
  if valid_21626712 != nil:
    section.add "X-Amz-Security-Token", valid_21626712
  var valid_21626713 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626713 = validateParameter(valid_21626713, JString, required = false,
                                   default = nil)
  if valid_21626713 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626713
  var valid_21626714 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626714 = validateParameter(valid_21626714, JString, required = false,
                                   default = nil)
  if valid_21626714 != nil:
    section.add "X-Amz-Algorithm", valid_21626714
  var valid_21626715 = header.getOrDefault("X-Amz-Signature")
  valid_21626715 = validateParameter(valid_21626715, JString, required = false,
                                   default = nil)
  if valid_21626715 != nil:
    section.add "X-Amz-Signature", valid_21626715
  var valid_21626716 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626716 = validateParameter(valid_21626716, JString, required = false,
                                   default = nil)
  if valid_21626716 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626716
  var valid_21626717 = header.getOrDefault("X-Amz-Credential")
  valid_21626717 = validateParameter(valid_21626717, JString, required = false,
                                   default = nil)
  if valid_21626717 != nil:
    section.add "X-Amz-Credential", valid_21626717
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626718: Call_GetCreateUser_21626702; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626718.validator(path, query, header, formData, body, _)
  let scheme = call_21626718.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626718.makeUrl(scheme.get, call_21626718.host, call_21626718.base,
                               call_21626718.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626718, uri, valid, _)

proc call*(call_21626719: Call_GetCreateUser_21626702; UserName: string;
          Tags: JsonNode = nil; Action: string = "CreateUser"; Path: string = "";
          PermissionsBoundary: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateUser
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   UserName: string (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_21626720 = newJObject()
  if Tags != nil:
    query_21626720.add "Tags", Tags
  add(query_21626720, "UserName", newJString(UserName))
  add(query_21626720, "Action", newJString(Action))
  add(query_21626720, "Path", newJString(Path))
  add(query_21626720, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_21626720, "Version", newJString(Version))
  result = call_21626719.call(nil, query_21626720, nil, nil, nil)

var getCreateUser* = Call_GetCreateUser_21626702(name: "getCreateUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateUser", validator: validate_GetCreateUser_21626703,
    base: "/", makeUrl: url_GetCreateUser_21626704,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateVirtualMFADevice_21626758 = ref object of OpenApiRestCall_21625435
proc url_PostCreateVirtualMFADevice_21626760(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateVirtualMFADevice_21626759(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626761 = query.getOrDefault("Action")
  valid_21626761 = validateParameter(valid_21626761, JString, required = true, default = newJString(
      "CreateVirtualMFADevice"))
  if valid_21626761 != nil:
    section.add "Action", valid_21626761
  var valid_21626762 = query.getOrDefault("Version")
  valid_21626762 = validateParameter(valid_21626762, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626762 != nil:
    section.add "Version", valid_21626762
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626763 = header.getOrDefault("X-Amz-Date")
  valid_21626763 = validateParameter(valid_21626763, JString, required = false,
                                   default = nil)
  if valid_21626763 != nil:
    section.add "X-Amz-Date", valid_21626763
  var valid_21626764 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626764 = validateParameter(valid_21626764, JString, required = false,
                                   default = nil)
  if valid_21626764 != nil:
    section.add "X-Amz-Security-Token", valid_21626764
  var valid_21626765 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626765 = validateParameter(valid_21626765, JString, required = false,
                                   default = nil)
  if valid_21626765 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626765
  var valid_21626766 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626766 = validateParameter(valid_21626766, JString, required = false,
                                   default = nil)
  if valid_21626766 != nil:
    section.add "X-Amz-Algorithm", valid_21626766
  var valid_21626767 = header.getOrDefault("X-Amz-Signature")
  valid_21626767 = validateParameter(valid_21626767, JString, required = false,
                                   default = nil)
  if valid_21626767 != nil:
    section.add "X-Amz-Signature", valid_21626767
  var valid_21626768 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626768 = validateParameter(valid_21626768, JString, required = false,
                                   default = nil)
  if valid_21626768 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626768
  var valid_21626769 = header.getOrDefault("X-Amz-Credential")
  valid_21626769 = validateParameter(valid_21626769, JString, required = false,
                                   default = nil)
  if valid_21626769 != nil:
    section.add "X-Amz-Credential", valid_21626769
  result.add "header", section
  ## parameters in `formData` object:
  ##   VirtualMFADeviceName: JString (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: JString
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `VirtualMFADeviceName` field"
  var valid_21626770 = formData.getOrDefault("VirtualMFADeviceName")
  valid_21626770 = validateParameter(valid_21626770, JString, required = true,
                                   default = nil)
  if valid_21626770 != nil:
    section.add "VirtualMFADeviceName", valid_21626770
  var valid_21626771 = formData.getOrDefault("Path")
  valid_21626771 = validateParameter(valid_21626771, JString, required = false,
                                   default = nil)
  if valid_21626771 != nil:
    section.add "Path", valid_21626771
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626772: Call_PostCreateVirtualMFADevice_21626758;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  let valid = call_21626772.validator(path, query, header, formData, body, _)
  let scheme = call_21626772.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626772.makeUrl(scheme.get, call_21626772.host, call_21626772.base,
                               call_21626772.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626772, uri, valid, _)

proc call*(call_21626773: Call_PostCreateVirtualMFADevice_21626758;
          VirtualMFADeviceName: string; Action: string = "CreateVirtualMFADevice";
          Version: string = "2010-05-08"; Path: string = ""): Recallable =
  ## postCreateVirtualMFADevice
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ##   VirtualMFADeviceName: string (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_21626774 = newJObject()
  var formData_21626775 = newJObject()
  add(formData_21626775, "VirtualMFADeviceName", newJString(VirtualMFADeviceName))
  add(query_21626774, "Action", newJString(Action))
  add(query_21626774, "Version", newJString(Version))
  add(formData_21626775, "Path", newJString(Path))
  result = call_21626773.call(nil, query_21626774, nil, formData_21626775, nil)

var postCreateVirtualMFADevice* = Call_PostCreateVirtualMFADevice_21626758(
    name: "postCreateVirtualMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateVirtualMFADevice",
    validator: validate_PostCreateVirtualMFADevice_21626759, base: "/",
    makeUrl: url_PostCreateVirtualMFADevice_21626760,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateVirtualMFADevice_21626741 = ref object of OpenApiRestCall_21625435
proc url_GetCreateVirtualMFADevice_21626743(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateVirtualMFADevice_21626742(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VirtualMFADeviceName: JString (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `VirtualMFADeviceName` field"
  var valid_21626744 = query.getOrDefault("VirtualMFADeviceName")
  valid_21626744 = validateParameter(valid_21626744, JString, required = true,
                                   default = nil)
  if valid_21626744 != nil:
    section.add "VirtualMFADeviceName", valid_21626744
  var valid_21626745 = query.getOrDefault("Action")
  valid_21626745 = validateParameter(valid_21626745, JString, required = true, default = newJString(
      "CreateVirtualMFADevice"))
  if valid_21626745 != nil:
    section.add "Action", valid_21626745
  var valid_21626746 = query.getOrDefault("Path")
  valid_21626746 = validateParameter(valid_21626746, JString, required = false,
                                   default = nil)
  if valid_21626746 != nil:
    section.add "Path", valid_21626746
  var valid_21626747 = query.getOrDefault("Version")
  valid_21626747 = validateParameter(valid_21626747, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626747 != nil:
    section.add "Version", valid_21626747
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626748 = header.getOrDefault("X-Amz-Date")
  valid_21626748 = validateParameter(valid_21626748, JString, required = false,
                                   default = nil)
  if valid_21626748 != nil:
    section.add "X-Amz-Date", valid_21626748
  var valid_21626749 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626749 = validateParameter(valid_21626749, JString, required = false,
                                   default = nil)
  if valid_21626749 != nil:
    section.add "X-Amz-Security-Token", valid_21626749
  var valid_21626750 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626750 = validateParameter(valid_21626750, JString, required = false,
                                   default = nil)
  if valid_21626750 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626750
  var valid_21626751 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626751 = validateParameter(valid_21626751, JString, required = false,
                                   default = nil)
  if valid_21626751 != nil:
    section.add "X-Amz-Algorithm", valid_21626751
  var valid_21626752 = header.getOrDefault("X-Amz-Signature")
  valid_21626752 = validateParameter(valid_21626752, JString, required = false,
                                   default = nil)
  if valid_21626752 != nil:
    section.add "X-Amz-Signature", valid_21626752
  var valid_21626753 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626753 = validateParameter(valid_21626753, JString, required = false,
                                   default = nil)
  if valid_21626753 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626753
  var valid_21626754 = header.getOrDefault("X-Amz-Credential")
  valid_21626754 = validateParameter(valid_21626754, JString, required = false,
                                   default = nil)
  if valid_21626754 != nil:
    section.add "X-Amz-Credential", valid_21626754
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626755: Call_GetCreateVirtualMFADevice_21626741;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  let valid = call_21626755.validator(path, query, header, formData, body, _)
  let scheme = call_21626755.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626755.makeUrl(scheme.get, call_21626755.host, call_21626755.base,
                               call_21626755.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626755, uri, valid, _)

proc call*(call_21626756: Call_GetCreateVirtualMFADevice_21626741;
          VirtualMFADeviceName: string; Action: string = "CreateVirtualMFADevice";
          Path: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateVirtualMFADevice
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ##   VirtualMFADeviceName: string (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_21626757 = newJObject()
  add(query_21626757, "VirtualMFADeviceName", newJString(VirtualMFADeviceName))
  add(query_21626757, "Action", newJString(Action))
  add(query_21626757, "Path", newJString(Path))
  add(query_21626757, "Version", newJString(Version))
  result = call_21626756.call(nil, query_21626757, nil, nil, nil)

var getCreateVirtualMFADevice* = Call_GetCreateVirtualMFADevice_21626741(
    name: "getCreateVirtualMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateVirtualMFADevice",
    validator: validate_GetCreateVirtualMFADevice_21626742, base: "/",
    makeUrl: url_GetCreateVirtualMFADevice_21626743,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeactivateMFADevice_21626793 = ref object of OpenApiRestCall_21625435
proc url_PostDeactivateMFADevice_21626795(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeactivateMFADevice_21626794(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626796 = query.getOrDefault("Action")
  valid_21626796 = validateParameter(valid_21626796, JString, required = true,
                                   default = newJString("DeactivateMFADevice"))
  if valid_21626796 != nil:
    section.add "Action", valid_21626796
  var valid_21626797 = query.getOrDefault("Version")
  valid_21626797 = validateParameter(valid_21626797, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626797 != nil:
    section.add "Version", valid_21626797
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626798 = header.getOrDefault("X-Amz-Date")
  valid_21626798 = validateParameter(valid_21626798, JString, required = false,
                                   default = nil)
  if valid_21626798 != nil:
    section.add "X-Amz-Date", valid_21626798
  var valid_21626799 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626799 = validateParameter(valid_21626799, JString, required = false,
                                   default = nil)
  if valid_21626799 != nil:
    section.add "X-Amz-Security-Token", valid_21626799
  var valid_21626800 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626800 = validateParameter(valid_21626800, JString, required = false,
                                   default = nil)
  if valid_21626800 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626800
  var valid_21626801 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626801 = validateParameter(valid_21626801, JString, required = false,
                                   default = nil)
  if valid_21626801 != nil:
    section.add "X-Amz-Algorithm", valid_21626801
  var valid_21626802 = header.getOrDefault("X-Amz-Signature")
  valid_21626802 = validateParameter(valid_21626802, JString, required = false,
                                   default = nil)
  if valid_21626802 != nil:
    section.add "X-Amz-Signature", valid_21626802
  var valid_21626803 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626803 = validateParameter(valid_21626803, JString, required = false,
                                   default = nil)
  if valid_21626803 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626803
  var valid_21626804 = header.getOrDefault("X-Amz-Credential")
  valid_21626804 = validateParameter(valid_21626804, JString, required = false,
                                   default = nil)
  if valid_21626804 != nil:
    section.add "X-Amz-Credential", valid_21626804
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_21626805 = formData.getOrDefault("SerialNumber")
  valid_21626805 = validateParameter(valid_21626805, JString, required = true,
                                   default = nil)
  if valid_21626805 != nil:
    section.add "SerialNumber", valid_21626805
  var valid_21626806 = formData.getOrDefault("UserName")
  valid_21626806 = validateParameter(valid_21626806, JString, required = true,
                                   default = nil)
  if valid_21626806 != nil:
    section.add "UserName", valid_21626806
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626807: Call_PostDeactivateMFADevice_21626793;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626807.validator(path, query, header, formData, body, _)
  let scheme = call_21626807.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626807.makeUrl(scheme.get, call_21626807.host, call_21626807.base,
                               call_21626807.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626807, uri, valid, _)

proc call*(call_21626808: Call_PostDeactivateMFADevice_21626793;
          SerialNumber: string; UserName: string;
          Action: string = "DeactivateMFADevice"; Version: string = "2010-05-08"): Recallable =
  ## postDeactivateMFADevice
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626809 = newJObject()
  var formData_21626810 = newJObject()
  add(formData_21626810, "SerialNumber", newJString(SerialNumber))
  add(formData_21626810, "UserName", newJString(UserName))
  add(query_21626809, "Action", newJString(Action))
  add(query_21626809, "Version", newJString(Version))
  result = call_21626808.call(nil, query_21626809, nil, formData_21626810, nil)

var postDeactivateMFADevice* = Call_PostDeactivateMFADevice_21626793(
    name: "postDeactivateMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeactivateMFADevice",
    validator: validate_PostDeactivateMFADevice_21626794, base: "/",
    makeUrl: url_PostDeactivateMFADevice_21626795,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeactivateMFADevice_21626776 = ref object of OpenApiRestCall_21625435
proc url_GetDeactivateMFADevice_21626778(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeactivateMFADevice_21626777(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_21626779 = query.getOrDefault("SerialNumber")
  valid_21626779 = validateParameter(valid_21626779, JString, required = true,
                                   default = nil)
  if valid_21626779 != nil:
    section.add "SerialNumber", valid_21626779
  var valid_21626780 = query.getOrDefault("UserName")
  valid_21626780 = validateParameter(valid_21626780, JString, required = true,
                                   default = nil)
  if valid_21626780 != nil:
    section.add "UserName", valid_21626780
  var valid_21626781 = query.getOrDefault("Action")
  valid_21626781 = validateParameter(valid_21626781, JString, required = true,
                                   default = newJString("DeactivateMFADevice"))
  if valid_21626781 != nil:
    section.add "Action", valid_21626781
  var valid_21626782 = query.getOrDefault("Version")
  valid_21626782 = validateParameter(valid_21626782, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626782 != nil:
    section.add "Version", valid_21626782
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626783 = header.getOrDefault("X-Amz-Date")
  valid_21626783 = validateParameter(valid_21626783, JString, required = false,
                                   default = nil)
  if valid_21626783 != nil:
    section.add "X-Amz-Date", valid_21626783
  var valid_21626784 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626784 = validateParameter(valid_21626784, JString, required = false,
                                   default = nil)
  if valid_21626784 != nil:
    section.add "X-Amz-Security-Token", valid_21626784
  var valid_21626785 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626785 = validateParameter(valid_21626785, JString, required = false,
                                   default = nil)
  if valid_21626785 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626785
  var valid_21626786 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626786 = validateParameter(valid_21626786, JString, required = false,
                                   default = nil)
  if valid_21626786 != nil:
    section.add "X-Amz-Algorithm", valid_21626786
  var valid_21626787 = header.getOrDefault("X-Amz-Signature")
  valid_21626787 = validateParameter(valid_21626787, JString, required = false,
                                   default = nil)
  if valid_21626787 != nil:
    section.add "X-Amz-Signature", valid_21626787
  var valid_21626788 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626788 = validateParameter(valid_21626788, JString, required = false,
                                   default = nil)
  if valid_21626788 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626788
  var valid_21626789 = header.getOrDefault("X-Amz-Credential")
  valid_21626789 = validateParameter(valid_21626789, JString, required = false,
                                   default = nil)
  if valid_21626789 != nil:
    section.add "X-Amz-Credential", valid_21626789
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626790: Call_GetDeactivateMFADevice_21626776;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626790.validator(path, query, header, formData, body, _)
  let scheme = call_21626790.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626790.makeUrl(scheme.get, call_21626790.host, call_21626790.base,
                               call_21626790.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626790, uri, valid, _)

proc call*(call_21626791: Call_GetDeactivateMFADevice_21626776;
          SerialNumber: string; UserName: string;
          Action: string = "DeactivateMFADevice"; Version: string = "2010-05-08"): Recallable =
  ## getDeactivateMFADevice
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626792 = newJObject()
  add(query_21626792, "SerialNumber", newJString(SerialNumber))
  add(query_21626792, "UserName", newJString(UserName))
  add(query_21626792, "Action", newJString(Action))
  add(query_21626792, "Version", newJString(Version))
  result = call_21626791.call(nil, query_21626792, nil, nil, nil)

var getDeactivateMFADevice* = Call_GetDeactivateMFADevice_21626776(
    name: "getDeactivateMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeactivateMFADevice",
    validator: validate_GetDeactivateMFADevice_21626777, base: "/",
    makeUrl: url_GetDeactivateMFADevice_21626778,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccessKey_21626828 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteAccessKey_21626830(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAccessKey_21626829(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626831 = query.getOrDefault("Action")
  valid_21626831 = validateParameter(valid_21626831, JString, required = true,
                                   default = newJString("DeleteAccessKey"))
  if valid_21626831 != nil:
    section.add "Action", valid_21626831
  var valid_21626832 = query.getOrDefault("Version")
  valid_21626832 = validateParameter(valid_21626832, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626832 != nil:
    section.add "Version", valid_21626832
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626833 = header.getOrDefault("X-Amz-Date")
  valid_21626833 = validateParameter(valid_21626833, JString, required = false,
                                   default = nil)
  if valid_21626833 != nil:
    section.add "X-Amz-Date", valid_21626833
  var valid_21626834 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626834 = validateParameter(valid_21626834, JString, required = false,
                                   default = nil)
  if valid_21626834 != nil:
    section.add "X-Amz-Security-Token", valid_21626834
  var valid_21626835 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626835 = validateParameter(valid_21626835, JString, required = false,
                                   default = nil)
  if valid_21626835 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626835
  var valid_21626836 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626836 = validateParameter(valid_21626836, JString, required = false,
                                   default = nil)
  if valid_21626836 != nil:
    section.add "X-Amz-Algorithm", valid_21626836
  var valid_21626837 = header.getOrDefault("X-Amz-Signature")
  valid_21626837 = validateParameter(valid_21626837, JString, required = false,
                                   default = nil)
  if valid_21626837 != nil:
    section.add "X-Amz-Signature", valid_21626837
  var valid_21626838 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626838 = validateParameter(valid_21626838, JString, required = false,
                                   default = nil)
  if valid_21626838 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626838
  var valid_21626839 = header.getOrDefault("X-Amz-Credential")
  valid_21626839 = validateParameter(valid_21626839, JString, required = false,
                                   default = nil)
  if valid_21626839 != nil:
    section.add "X-Amz-Credential", valid_21626839
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_21626840 = formData.getOrDefault("UserName")
  valid_21626840 = validateParameter(valid_21626840, JString, required = false,
                                   default = nil)
  if valid_21626840 != nil:
    section.add "UserName", valid_21626840
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_21626841 = formData.getOrDefault("AccessKeyId")
  valid_21626841 = validateParameter(valid_21626841, JString, required = true,
                                   default = nil)
  if valid_21626841 != nil:
    section.add "AccessKeyId", valid_21626841
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626842: Call_PostDeleteAccessKey_21626828; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_21626842.validator(path, query, header, formData, body, _)
  let scheme = call_21626842.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626842.makeUrl(scheme.get, call_21626842.host, call_21626842.base,
                               call_21626842.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626842, uri, valid, _)

proc call*(call_21626843: Call_PostDeleteAccessKey_21626828; AccessKeyId: string;
          UserName: string = ""; Action: string = "DeleteAccessKey";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccessKey
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626844 = newJObject()
  var formData_21626845 = newJObject()
  add(formData_21626845, "UserName", newJString(UserName))
  add(formData_21626845, "AccessKeyId", newJString(AccessKeyId))
  add(query_21626844, "Action", newJString(Action))
  add(query_21626844, "Version", newJString(Version))
  result = call_21626843.call(nil, query_21626844, nil, formData_21626845, nil)

var postDeleteAccessKey* = Call_PostDeleteAccessKey_21626828(
    name: "postDeleteAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccessKey",
    validator: validate_PostDeleteAccessKey_21626829, base: "/",
    makeUrl: url_PostDeleteAccessKey_21626830,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccessKey_21626811 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteAccessKey_21626813(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAccessKey_21626812(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccessKeyId` field"
  var valid_21626814 = query.getOrDefault("AccessKeyId")
  valid_21626814 = validateParameter(valid_21626814, JString, required = true,
                                   default = nil)
  if valid_21626814 != nil:
    section.add "AccessKeyId", valid_21626814
  var valid_21626815 = query.getOrDefault("UserName")
  valid_21626815 = validateParameter(valid_21626815, JString, required = false,
                                   default = nil)
  if valid_21626815 != nil:
    section.add "UserName", valid_21626815
  var valid_21626816 = query.getOrDefault("Action")
  valid_21626816 = validateParameter(valid_21626816, JString, required = true,
                                   default = newJString("DeleteAccessKey"))
  if valid_21626816 != nil:
    section.add "Action", valid_21626816
  var valid_21626817 = query.getOrDefault("Version")
  valid_21626817 = validateParameter(valid_21626817, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626817 != nil:
    section.add "Version", valid_21626817
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626818 = header.getOrDefault("X-Amz-Date")
  valid_21626818 = validateParameter(valid_21626818, JString, required = false,
                                   default = nil)
  if valid_21626818 != nil:
    section.add "X-Amz-Date", valid_21626818
  var valid_21626819 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626819 = validateParameter(valid_21626819, JString, required = false,
                                   default = nil)
  if valid_21626819 != nil:
    section.add "X-Amz-Security-Token", valid_21626819
  var valid_21626820 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626820 = validateParameter(valid_21626820, JString, required = false,
                                   default = nil)
  if valid_21626820 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626820
  var valid_21626821 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626821 = validateParameter(valid_21626821, JString, required = false,
                                   default = nil)
  if valid_21626821 != nil:
    section.add "X-Amz-Algorithm", valid_21626821
  var valid_21626822 = header.getOrDefault("X-Amz-Signature")
  valid_21626822 = validateParameter(valid_21626822, JString, required = false,
                                   default = nil)
  if valid_21626822 != nil:
    section.add "X-Amz-Signature", valid_21626822
  var valid_21626823 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626823 = validateParameter(valid_21626823, JString, required = false,
                                   default = nil)
  if valid_21626823 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626823
  var valid_21626824 = header.getOrDefault("X-Amz-Credential")
  valid_21626824 = validateParameter(valid_21626824, JString, required = false,
                                   default = nil)
  if valid_21626824 != nil:
    section.add "X-Amz-Credential", valid_21626824
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626825: Call_GetDeleteAccessKey_21626811; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_21626825.validator(path, query, header, formData, body, _)
  let scheme = call_21626825.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626825.makeUrl(scheme.get, call_21626825.host, call_21626825.base,
                               call_21626825.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626825, uri, valid, _)

proc call*(call_21626826: Call_GetDeleteAccessKey_21626811; AccessKeyId: string;
          UserName: string = ""; Action: string = "DeleteAccessKey";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccessKey
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626827 = newJObject()
  add(query_21626827, "AccessKeyId", newJString(AccessKeyId))
  add(query_21626827, "UserName", newJString(UserName))
  add(query_21626827, "Action", newJString(Action))
  add(query_21626827, "Version", newJString(Version))
  result = call_21626826.call(nil, query_21626827, nil, nil, nil)

var getDeleteAccessKey* = Call_GetDeleteAccessKey_21626811(
    name: "getDeleteAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteAccessKey", validator: validate_GetDeleteAccessKey_21626812,
    base: "/", makeUrl: url_GetDeleteAccessKey_21626813,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccountAlias_21626862 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteAccountAlias_21626864(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAccountAlias_21626863(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626865 = query.getOrDefault("Action")
  valid_21626865 = validateParameter(valid_21626865, JString, required = true,
                                   default = newJString("DeleteAccountAlias"))
  if valid_21626865 != nil:
    section.add "Action", valid_21626865
  var valid_21626866 = query.getOrDefault("Version")
  valid_21626866 = validateParameter(valid_21626866, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626866 != nil:
    section.add "Version", valid_21626866
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626867 = header.getOrDefault("X-Amz-Date")
  valid_21626867 = validateParameter(valid_21626867, JString, required = false,
                                   default = nil)
  if valid_21626867 != nil:
    section.add "X-Amz-Date", valid_21626867
  var valid_21626868 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626868 = validateParameter(valid_21626868, JString, required = false,
                                   default = nil)
  if valid_21626868 != nil:
    section.add "X-Amz-Security-Token", valid_21626868
  var valid_21626869 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626869 = validateParameter(valid_21626869, JString, required = false,
                                   default = nil)
  if valid_21626869 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626869
  var valid_21626870 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626870 = validateParameter(valid_21626870, JString, required = false,
                                   default = nil)
  if valid_21626870 != nil:
    section.add "X-Amz-Algorithm", valid_21626870
  var valid_21626871 = header.getOrDefault("X-Amz-Signature")
  valid_21626871 = validateParameter(valid_21626871, JString, required = false,
                                   default = nil)
  if valid_21626871 != nil:
    section.add "X-Amz-Signature", valid_21626871
  var valid_21626872 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626872 = validateParameter(valid_21626872, JString, required = false,
                                   default = nil)
  if valid_21626872 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626872
  var valid_21626873 = header.getOrDefault("X-Amz-Credential")
  valid_21626873 = validateParameter(valid_21626873, JString, required = false,
                                   default = nil)
  if valid_21626873 != nil:
    section.add "X-Amz-Credential", valid_21626873
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccountAlias` field"
  var valid_21626874 = formData.getOrDefault("AccountAlias")
  valid_21626874 = validateParameter(valid_21626874, JString, required = true,
                                   default = nil)
  if valid_21626874 != nil:
    section.add "AccountAlias", valid_21626874
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626875: Call_PostDeleteAccountAlias_21626862;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21626875.validator(path, query, header, formData, body, _)
  let scheme = call_21626875.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626875.makeUrl(scheme.get, call_21626875.host, call_21626875.base,
                               call_21626875.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626875, uri, valid, _)

proc call*(call_21626876: Call_PostDeleteAccountAlias_21626862;
          AccountAlias: string; Action: string = "DeleteAccountAlias";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccountAlias
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626877 = newJObject()
  var formData_21626878 = newJObject()
  add(formData_21626878, "AccountAlias", newJString(AccountAlias))
  add(query_21626877, "Action", newJString(Action))
  add(query_21626877, "Version", newJString(Version))
  result = call_21626876.call(nil, query_21626877, nil, formData_21626878, nil)

var postDeleteAccountAlias* = Call_PostDeleteAccountAlias_21626862(
    name: "postDeleteAccountAlias", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountAlias",
    validator: validate_PostDeleteAccountAlias_21626863, base: "/",
    makeUrl: url_PostDeleteAccountAlias_21626864,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccountAlias_21626846 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteAccountAlias_21626848(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAccountAlias_21626847(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccountAlias` field"
  var valid_21626849 = query.getOrDefault("AccountAlias")
  valid_21626849 = validateParameter(valid_21626849, JString, required = true,
                                   default = nil)
  if valid_21626849 != nil:
    section.add "AccountAlias", valid_21626849
  var valid_21626850 = query.getOrDefault("Action")
  valid_21626850 = validateParameter(valid_21626850, JString, required = true,
                                   default = newJString("DeleteAccountAlias"))
  if valid_21626850 != nil:
    section.add "Action", valid_21626850
  var valid_21626851 = query.getOrDefault("Version")
  valid_21626851 = validateParameter(valid_21626851, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626851 != nil:
    section.add "Version", valid_21626851
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626852 = header.getOrDefault("X-Amz-Date")
  valid_21626852 = validateParameter(valid_21626852, JString, required = false,
                                   default = nil)
  if valid_21626852 != nil:
    section.add "X-Amz-Date", valid_21626852
  var valid_21626853 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626853 = validateParameter(valid_21626853, JString, required = false,
                                   default = nil)
  if valid_21626853 != nil:
    section.add "X-Amz-Security-Token", valid_21626853
  var valid_21626854 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626854 = validateParameter(valid_21626854, JString, required = false,
                                   default = nil)
  if valid_21626854 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626854
  var valid_21626855 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626855 = validateParameter(valid_21626855, JString, required = false,
                                   default = nil)
  if valid_21626855 != nil:
    section.add "X-Amz-Algorithm", valid_21626855
  var valid_21626856 = header.getOrDefault("X-Amz-Signature")
  valid_21626856 = validateParameter(valid_21626856, JString, required = false,
                                   default = nil)
  if valid_21626856 != nil:
    section.add "X-Amz-Signature", valid_21626856
  var valid_21626857 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626857 = validateParameter(valid_21626857, JString, required = false,
                                   default = nil)
  if valid_21626857 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626857
  var valid_21626858 = header.getOrDefault("X-Amz-Credential")
  valid_21626858 = validateParameter(valid_21626858, JString, required = false,
                                   default = nil)
  if valid_21626858 != nil:
    section.add "X-Amz-Credential", valid_21626858
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626859: Call_GetDeleteAccountAlias_21626846;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21626859.validator(path, query, header, formData, body, _)
  let scheme = call_21626859.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626859.makeUrl(scheme.get, call_21626859.host, call_21626859.base,
                               call_21626859.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626859, uri, valid, _)

proc call*(call_21626860: Call_GetDeleteAccountAlias_21626846;
          AccountAlias: string; Action: string = "DeleteAccountAlias";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccountAlias
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626861 = newJObject()
  add(query_21626861, "AccountAlias", newJString(AccountAlias))
  add(query_21626861, "Action", newJString(Action))
  add(query_21626861, "Version", newJString(Version))
  result = call_21626860.call(nil, query_21626861, nil, nil, nil)

var getDeleteAccountAlias* = Call_GetDeleteAccountAlias_21626846(
    name: "getDeleteAccountAlias", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountAlias",
    validator: validate_GetDeleteAccountAlias_21626847, base: "/",
    makeUrl: url_GetDeleteAccountAlias_21626848,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccountPasswordPolicy_21626894 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteAccountPasswordPolicy_21626896(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAccountPasswordPolicy_21626895(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626897 = query.getOrDefault("Action")
  valid_21626897 = validateParameter(valid_21626897, JString, required = true, default = newJString(
      "DeleteAccountPasswordPolicy"))
  if valid_21626897 != nil:
    section.add "Action", valid_21626897
  var valid_21626898 = query.getOrDefault("Version")
  valid_21626898 = validateParameter(valid_21626898, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626898 != nil:
    section.add "Version", valid_21626898
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626899 = header.getOrDefault("X-Amz-Date")
  valid_21626899 = validateParameter(valid_21626899, JString, required = false,
                                   default = nil)
  if valid_21626899 != nil:
    section.add "X-Amz-Date", valid_21626899
  var valid_21626900 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626900 = validateParameter(valid_21626900, JString, required = false,
                                   default = nil)
  if valid_21626900 != nil:
    section.add "X-Amz-Security-Token", valid_21626900
  var valid_21626901 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626901 = validateParameter(valid_21626901, JString, required = false,
                                   default = nil)
  if valid_21626901 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626901
  var valid_21626902 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626902 = validateParameter(valid_21626902, JString, required = false,
                                   default = nil)
  if valid_21626902 != nil:
    section.add "X-Amz-Algorithm", valid_21626902
  var valid_21626903 = header.getOrDefault("X-Amz-Signature")
  valid_21626903 = validateParameter(valid_21626903, JString, required = false,
                                   default = nil)
  if valid_21626903 != nil:
    section.add "X-Amz-Signature", valid_21626903
  var valid_21626904 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626904 = validateParameter(valid_21626904, JString, required = false,
                                   default = nil)
  if valid_21626904 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626904
  var valid_21626905 = header.getOrDefault("X-Amz-Credential")
  valid_21626905 = validateParameter(valid_21626905, JString, required = false,
                                   default = nil)
  if valid_21626905 != nil:
    section.add "X-Amz-Credential", valid_21626905
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626906: Call_PostDeleteAccountPasswordPolicy_21626894;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  let valid = call_21626906.validator(path, query, header, formData, body, _)
  let scheme = call_21626906.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626906.makeUrl(scheme.get, call_21626906.host, call_21626906.base,
                               call_21626906.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626906, uri, valid, _)

proc call*(call_21626907: Call_PostDeleteAccountPasswordPolicy_21626894;
          Action: string = "DeleteAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccountPasswordPolicy
  ## Deletes the password policy for the AWS account. There are no parameters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626908 = newJObject()
  add(query_21626908, "Action", newJString(Action))
  add(query_21626908, "Version", newJString(Version))
  result = call_21626907.call(nil, query_21626908, nil, nil, nil)

var postDeleteAccountPasswordPolicy* = Call_PostDeleteAccountPasswordPolicy_21626894(
    name: "postDeleteAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountPasswordPolicy",
    validator: validate_PostDeleteAccountPasswordPolicy_21626895, base: "/",
    makeUrl: url_PostDeleteAccountPasswordPolicy_21626896,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccountPasswordPolicy_21626879 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteAccountPasswordPolicy_21626881(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAccountPasswordPolicy_21626880(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626882 = query.getOrDefault("Action")
  valid_21626882 = validateParameter(valid_21626882, JString, required = true, default = newJString(
      "DeleteAccountPasswordPolicy"))
  if valid_21626882 != nil:
    section.add "Action", valid_21626882
  var valid_21626883 = query.getOrDefault("Version")
  valid_21626883 = validateParameter(valid_21626883, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626883 != nil:
    section.add "Version", valid_21626883
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626884 = header.getOrDefault("X-Amz-Date")
  valid_21626884 = validateParameter(valid_21626884, JString, required = false,
                                   default = nil)
  if valid_21626884 != nil:
    section.add "X-Amz-Date", valid_21626884
  var valid_21626885 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626885 = validateParameter(valid_21626885, JString, required = false,
                                   default = nil)
  if valid_21626885 != nil:
    section.add "X-Amz-Security-Token", valid_21626885
  var valid_21626886 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626886 = validateParameter(valid_21626886, JString, required = false,
                                   default = nil)
  if valid_21626886 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626886
  var valid_21626887 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626887 = validateParameter(valid_21626887, JString, required = false,
                                   default = nil)
  if valid_21626887 != nil:
    section.add "X-Amz-Algorithm", valid_21626887
  var valid_21626888 = header.getOrDefault("X-Amz-Signature")
  valid_21626888 = validateParameter(valid_21626888, JString, required = false,
                                   default = nil)
  if valid_21626888 != nil:
    section.add "X-Amz-Signature", valid_21626888
  var valid_21626889 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626889 = validateParameter(valid_21626889, JString, required = false,
                                   default = nil)
  if valid_21626889 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626889
  var valid_21626890 = header.getOrDefault("X-Amz-Credential")
  valid_21626890 = validateParameter(valid_21626890, JString, required = false,
                                   default = nil)
  if valid_21626890 != nil:
    section.add "X-Amz-Credential", valid_21626890
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626891: Call_GetDeleteAccountPasswordPolicy_21626879;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  let valid = call_21626891.validator(path, query, header, formData, body, _)
  let scheme = call_21626891.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626891.makeUrl(scheme.get, call_21626891.host, call_21626891.base,
                               call_21626891.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626891, uri, valid, _)

proc call*(call_21626892: Call_GetDeleteAccountPasswordPolicy_21626879;
          Action: string = "DeleteAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccountPasswordPolicy
  ## Deletes the password policy for the AWS account. There are no parameters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626893 = newJObject()
  add(query_21626893, "Action", newJString(Action))
  add(query_21626893, "Version", newJString(Version))
  result = call_21626892.call(nil, query_21626893, nil, nil, nil)

var getDeleteAccountPasswordPolicy* = Call_GetDeleteAccountPasswordPolicy_21626879(
    name: "getDeleteAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountPasswordPolicy",
    validator: validate_GetDeleteAccountPasswordPolicy_21626880, base: "/",
    makeUrl: url_GetDeleteAccountPasswordPolicy_21626881,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGroup_21626925 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteGroup_21626927(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteGroup_21626926(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626928 = query.getOrDefault("Action")
  valid_21626928 = validateParameter(valid_21626928, JString, required = true,
                                   default = newJString("DeleteGroup"))
  if valid_21626928 != nil:
    section.add "Action", valid_21626928
  var valid_21626929 = query.getOrDefault("Version")
  valid_21626929 = validateParameter(valid_21626929, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626929 != nil:
    section.add "Version", valid_21626929
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626930 = header.getOrDefault("X-Amz-Date")
  valid_21626930 = validateParameter(valid_21626930, JString, required = false,
                                   default = nil)
  if valid_21626930 != nil:
    section.add "X-Amz-Date", valid_21626930
  var valid_21626931 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626931 = validateParameter(valid_21626931, JString, required = false,
                                   default = nil)
  if valid_21626931 != nil:
    section.add "X-Amz-Security-Token", valid_21626931
  var valid_21626932 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626932 = validateParameter(valid_21626932, JString, required = false,
                                   default = nil)
  if valid_21626932 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626932
  var valid_21626933 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626933 = validateParameter(valid_21626933, JString, required = false,
                                   default = nil)
  if valid_21626933 != nil:
    section.add "X-Amz-Algorithm", valid_21626933
  var valid_21626934 = header.getOrDefault("X-Amz-Signature")
  valid_21626934 = validateParameter(valid_21626934, JString, required = false,
                                   default = nil)
  if valid_21626934 != nil:
    section.add "X-Amz-Signature", valid_21626934
  var valid_21626935 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626935 = validateParameter(valid_21626935, JString, required = false,
                                   default = nil)
  if valid_21626935 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626935
  var valid_21626936 = header.getOrDefault("X-Amz-Credential")
  valid_21626936 = validateParameter(valid_21626936, JString, required = false,
                                   default = nil)
  if valid_21626936 != nil:
    section.add "X-Amz-Credential", valid_21626936
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_21626937 = formData.getOrDefault("GroupName")
  valid_21626937 = validateParameter(valid_21626937, JString, required = true,
                                   default = nil)
  if valid_21626937 != nil:
    section.add "GroupName", valid_21626937
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626938: Call_PostDeleteGroup_21626925; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  let valid = call_21626938.validator(path, query, header, formData, body, _)
  let scheme = call_21626938.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626938.makeUrl(scheme.get, call_21626938.host, call_21626938.base,
                               call_21626938.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626938, uri, valid, _)

proc call*(call_21626939: Call_PostDeleteGroup_21626925; GroupName: string;
          Action: string = "DeleteGroup"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteGroup
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ##   GroupName: string (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626940 = newJObject()
  var formData_21626941 = newJObject()
  add(formData_21626941, "GroupName", newJString(GroupName))
  add(query_21626940, "Action", newJString(Action))
  add(query_21626940, "Version", newJString(Version))
  result = call_21626939.call(nil, query_21626940, nil, formData_21626941, nil)

var postDeleteGroup* = Call_PostDeleteGroup_21626925(name: "postDeleteGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteGroup", validator: validate_PostDeleteGroup_21626926,
    base: "/", makeUrl: url_PostDeleteGroup_21626927,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGroup_21626909 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteGroup_21626911(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteGroup_21626910(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626912 = query.getOrDefault("Action")
  valid_21626912 = validateParameter(valid_21626912, JString, required = true,
                                   default = newJString("DeleteGroup"))
  if valid_21626912 != nil:
    section.add "Action", valid_21626912
  var valid_21626913 = query.getOrDefault("GroupName")
  valid_21626913 = validateParameter(valid_21626913, JString, required = true,
                                   default = nil)
  if valid_21626913 != nil:
    section.add "GroupName", valid_21626913
  var valid_21626914 = query.getOrDefault("Version")
  valid_21626914 = validateParameter(valid_21626914, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626914 != nil:
    section.add "Version", valid_21626914
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626915 = header.getOrDefault("X-Amz-Date")
  valid_21626915 = validateParameter(valid_21626915, JString, required = false,
                                   default = nil)
  if valid_21626915 != nil:
    section.add "X-Amz-Date", valid_21626915
  var valid_21626916 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626916 = validateParameter(valid_21626916, JString, required = false,
                                   default = nil)
  if valid_21626916 != nil:
    section.add "X-Amz-Security-Token", valid_21626916
  var valid_21626917 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626917 = validateParameter(valid_21626917, JString, required = false,
                                   default = nil)
  if valid_21626917 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626917
  var valid_21626918 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626918 = validateParameter(valid_21626918, JString, required = false,
                                   default = nil)
  if valid_21626918 != nil:
    section.add "X-Amz-Algorithm", valid_21626918
  var valid_21626919 = header.getOrDefault("X-Amz-Signature")
  valid_21626919 = validateParameter(valid_21626919, JString, required = false,
                                   default = nil)
  if valid_21626919 != nil:
    section.add "X-Amz-Signature", valid_21626919
  var valid_21626920 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626920 = validateParameter(valid_21626920, JString, required = false,
                                   default = nil)
  if valid_21626920 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626920
  var valid_21626921 = header.getOrDefault("X-Amz-Credential")
  valid_21626921 = validateParameter(valid_21626921, JString, required = false,
                                   default = nil)
  if valid_21626921 != nil:
    section.add "X-Amz-Credential", valid_21626921
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626922: Call_GetDeleteGroup_21626909; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  let valid = call_21626922.validator(path, query, header, formData, body, _)
  let scheme = call_21626922.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626922.makeUrl(scheme.get, call_21626922.host, call_21626922.base,
                               call_21626922.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626922, uri, valid, _)

proc call*(call_21626923: Call_GetDeleteGroup_21626909; GroupName: string;
          Action: string = "DeleteGroup"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteGroup
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21626924 = newJObject()
  add(query_21626924, "Action", newJString(Action))
  add(query_21626924, "GroupName", newJString(GroupName))
  add(query_21626924, "Version", newJString(Version))
  result = call_21626923.call(nil, query_21626924, nil, nil, nil)

var getDeleteGroup* = Call_GetDeleteGroup_21626909(name: "getDeleteGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteGroup", validator: validate_GetDeleteGroup_21626910,
    base: "/", makeUrl: url_GetDeleteGroup_21626911,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGroupPolicy_21626959 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteGroupPolicy_21626961(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteGroupPolicy_21626960(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626962 = query.getOrDefault("Action")
  valid_21626962 = validateParameter(valid_21626962, JString, required = true,
                                   default = newJString("DeleteGroupPolicy"))
  if valid_21626962 != nil:
    section.add "Action", valid_21626962
  var valid_21626963 = query.getOrDefault("Version")
  valid_21626963 = validateParameter(valid_21626963, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626963 != nil:
    section.add "Version", valid_21626963
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626964 = header.getOrDefault("X-Amz-Date")
  valid_21626964 = validateParameter(valid_21626964, JString, required = false,
                                   default = nil)
  if valid_21626964 != nil:
    section.add "X-Amz-Date", valid_21626964
  var valid_21626965 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626965 = validateParameter(valid_21626965, JString, required = false,
                                   default = nil)
  if valid_21626965 != nil:
    section.add "X-Amz-Security-Token", valid_21626965
  var valid_21626966 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626966 = validateParameter(valid_21626966, JString, required = false,
                                   default = nil)
  if valid_21626966 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626966
  var valid_21626967 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626967 = validateParameter(valid_21626967, JString, required = false,
                                   default = nil)
  if valid_21626967 != nil:
    section.add "X-Amz-Algorithm", valid_21626967
  var valid_21626968 = header.getOrDefault("X-Amz-Signature")
  valid_21626968 = validateParameter(valid_21626968, JString, required = false,
                                   default = nil)
  if valid_21626968 != nil:
    section.add "X-Amz-Signature", valid_21626968
  var valid_21626969 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626969 = validateParameter(valid_21626969, JString, required = false,
                                   default = nil)
  if valid_21626969 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626969
  var valid_21626970 = header.getOrDefault("X-Amz-Credential")
  valid_21626970 = validateParameter(valid_21626970, JString, required = false,
                                   default = nil)
  if valid_21626970 != nil:
    section.add "X-Amz-Credential", valid_21626970
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_21626971 = formData.getOrDefault("PolicyName")
  valid_21626971 = validateParameter(valid_21626971, JString, required = true,
                                   default = nil)
  if valid_21626971 != nil:
    section.add "PolicyName", valid_21626971
  var valid_21626972 = formData.getOrDefault("GroupName")
  valid_21626972 = validateParameter(valid_21626972, JString, required = true,
                                   default = nil)
  if valid_21626972 != nil:
    section.add "GroupName", valid_21626972
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626973: Call_PostDeleteGroupPolicy_21626959;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626973.validator(path, query, header, formData, body, _)
  let scheme = call_21626973.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626973.makeUrl(scheme.get, call_21626973.host, call_21626973.base,
                               call_21626973.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626973, uri, valid, _)

proc call*(call_21626974: Call_PostDeleteGroupPolicy_21626959; PolicyName: string;
          GroupName: string; Action: string = "DeleteGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteGroupPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626975 = newJObject()
  var formData_21626976 = newJObject()
  add(formData_21626976, "PolicyName", newJString(PolicyName))
  add(formData_21626976, "GroupName", newJString(GroupName))
  add(query_21626975, "Action", newJString(Action))
  add(query_21626975, "Version", newJString(Version))
  result = call_21626974.call(nil, query_21626975, nil, formData_21626976, nil)

var postDeleteGroupPolicy* = Call_PostDeleteGroupPolicy_21626959(
    name: "postDeleteGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteGroupPolicy",
    validator: validate_PostDeleteGroupPolicy_21626960, base: "/",
    makeUrl: url_PostDeleteGroupPolicy_21626961,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGroupPolicy_21626942 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteGroupPolicy_21626944(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteGroupPolicy_21626943(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_21626945 = query.getOrDefault("Action")
  valid_21626945 = validateParameter(valid_21626945, JString, required = true,
                                   default = newJString("DeleteGroupPolicy"))
  if valid_21626945 != nil:
    section.add "Action", valid_21626945
  var valid_21626946 = query.getOrDefault("GroupName")
  valid_21626946 = validateParameter(valid_21626946, JString, required = true,
                                   default = nil)
  if valid_21626946 != nil:
    section.add "GroupName", valid_21626946
  var valid_21626947 = query.getOrDefault("Version")
  valid_21626947 = validateParameter(valid_21626947, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626947 != nil:
    section.add "Version", valid_21626947
  var valid_21626948 = query.getOrDefault("PolicyName")
  valid_21626948 = validateParameter(valid_21626948, JString, required = true,
                                   default = nil)
  if valid_21626948 != nil:
    section.add "PolicyName", valid_21626948
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626949 = header.getOrDefault("X-Amz-Date")
  valid_21626949 = validateParameter(valid_21626949, JString, required = false,
                                   default = nil)
  if valid_21626949 != nil:
    section.add "X-Amz-Date", valid_21626949
  var valid_21626950 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626950 = validateParameter(valid_21626950, JString, required = false,
                                   default = nil)
  if valid_21626950 != nil:
    section.add "X-Amz-Security-Token", valid_21626950
  var valid_21626951 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626951 = validateParameter(valid_21626951, JString, required = false,
                                   default = nil)
  if valid_21626951 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626951
  var valid_21626952 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626952 = validateParameter(valid_21626952, JString, required = false,
                                   default = nil)
  if valid_21626952 != nil:
    section.add "X-Amz-Algorithm", valid_21626952
  var valid_21626953 = header.getOrDefault("X-Amz-Signature")
  valid_21626953 = validateParameter(valid_21626953, JString, required = false,
                                   default = nil)
  if valid_21626953 != nil:
    section.add "X-Amz-Signature", valid_21626953
  var valid_21626954 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626954 = validateParameter(valid_21626954, JString, required = false,
                                   default = nil)
  if valid_21626954 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626954
  var valid_21626955 = header.getOrDefault("X-Amz-Credential")
  valid_21626955 = validateParameter(valid_21626955, JString, required = false,
                                   default = nil)
  if valid_21626955 != nil:
    section.add "X-Amz-Credential", valid_21626955
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626956: Call_GetDeleteGroupPolicy_21626942; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21626956.validator(path, query, header, formData, body, _)
  let scheme = call_21626956.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626956.makeUrl(scheme.get, call_21626956.host, call_21626956.base,
                               call_21626956.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626956, uri, valid, _)

proc call*(call_21626957: Call_GetDeleteGroupPolicy_21626942; GroupName: string;
          PolicyName: string; Action: string = "DeleteGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteGroupPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_21626958 = newJObject()
  add(query_21626958, "Action", newJString(Action))
  add(query_21626958, "GroupName", newJString(GroupName))
  add(query_21626958, "Version", newJString(Version))
  add(query_21626958, "PolicyName", newJString(PolicyName))
  result = call_21626957.call(nil, query_21626958, nil, nil, nil)

var getDeleteGroupPolicy* = Call_GetDeleteGroupPolicy_21626942(
    name: "getDeleteGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteGroupPolicy",
    validator: validate_GetDeleteGroupPolicy_21626943, base: "/",
    makeUrl: url_GetDeleteGroupPolicy_21626944,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteInstanceProfile_21626993 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteInstanceProfile_21626995(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteInstanceProfile_21626994(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626996 = query.getOrDefault("Action")
  valid_21626996 = validateParameter(valid_21626996, JString, required = true, default = newJString(
      "DeleteInstanceProfile"))
  if valid_21626996 != nil:
    section.add "Action", valid_21626996
  var valid_21626997 = query.getOrDefault("Version")
  valid_21626997 = validateParameter(valid_21626997, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626997 != nil:
    section.add "Version", valid_21626997
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626998 = header.getOrDefault("X-Amz-Date")
  valid_21626998 = validateParameter(valid_21626998, JString, required = false,
                                   default = nil)
  if valid_21626998 != nil:
    section.add "X-Amz-Date", valid_21626998
  var valid_21626999 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626999 = validateParameter(valid_21626999, JString, required = false,
                                   default = nil)
  if valid_21626999 != nil:
    section.add "X-Amz-Security-Token", valid_21626999
  var valid_21627000 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627000 = validateParameter(valid_21627000, JString, required = false,
                                   default = nil)
  if valid_21627000 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627000
  var valid_21627001 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627001 = validateParameter(valid_21627001, JString, required = false,
                                   default = nil)
  if valid_21627001 != nil:
    section.add "X-Amz-Algorithm", valid_21627001
  var valid_21627002 = header.getOrDefault("X-Amz-Signature")
  valid_21627002 = validateParameter(valid_21627002, JString, required = false,
                                   default = nil)
  if valid_21627002 != nil:
    section.add "X-Amz-Signature", valid_21627002
  var valid_21627003 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627003 = validateParameter(valid_21627003, JString, required = false,
                                   default = nil)
  if valid_21627003 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627003
  var valid_21627004 = header.getOrDefault("X-Amz-Credential")
  valid_21627004 = validateParameter(valid_21627004, JString, required = false,
                                   default = nil)
  if valid_21627004 != nil:
    section.add "X-Amz-Credential", valid_21627004
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_21627005 = formData.getOrDefault("InstanceProfileName")
  valid_21627005 = validateParameter(valid_21627005, JString, required = true,
                                   default = nil)
  if valid_21627005 != nil:
    section.add "InstanceProfileName", valid_21627005
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627006: Call_PostDeleteInstanceProfile_21626993;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_21627006.validator(path, query, header, formData, body, _)
  let scheme = call_21627006.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627006.makeUrl(scheme.get, call_21627006.host, call_21627006.base,
                               call_21627006.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627006, uri, valid, _)

proc call*(call_21627007: Call_PostDeleteInstanceProfile_21626993;
          InstanceProfileName: string; Action: string = "DeleteInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteInstanceProfile
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21627008 = newJObject()
  var formData_21627009 = newJObject()
  add(query_21627008, "Action", newJString(Action))
  add(formData_21627009, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_21627008, "Version", newJString(Version))
  result = call_21627007.call(nil, query_21627008, nil, formData_21627009, nil)

var postDeleteInstanceProfile* = Call_PostDeleteInstanceProfile_21626993(
    name: "postDeleteInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteInstanceProfile",
    validator: validate_PostDeleteInstanceProfile_21626994, base: "/",
    makeUrl: url_PostDeleteInstanceProfile_21626995,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteInstanceProfile_21626977 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteInstanceProfile_21626979(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteInstanceProfile_21626978(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_21626980 = query.getOrDefault("InstanceProfileName")
  valid_21626980 = validateParameter(valid_21626980, JString, required = true,
                                   default = nil)
  if valid_21626980 != nil:
    section.add "InstanceProfileName", valid_21626980
  var valid_21626981 = query.getOrDefault("Action")
  valid_21626981 = validateParameter(valid_21626981, JString, required = true, default = newJString(
      "DeleteInstanceProfile"))
  if valid_21626981 != nil:
    section.add "Action", valid_21626981
  var valid_21626982 = query.getOrDefault("Version")
  valid_21626982 = validateParameter(valid_21626982, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21626982 != nil:
    section.add "Version", valid_21626982
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626983 = header.getOrDefault("X-Amz-Date")
  valid_21626983 = validateParameter(valid_21626983, JString, required = false,
                                   default = nil)
  if valid_21626983 != nil:
    section.add "X-Amz-Date", valid_21626983
  var valid_21626984 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626984 = validateParameter(valid_21626984, JString, required = false,
                                   default = nil)
  if valid_21626984 != nil:
    section.add "X-Amz-Security-Token", valid_21626984
  var valid_21626985 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626985 = validateParameter(valid_21626985, JString, required = false,
                                   default = nil)
  if valid_21626985 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626985
  var valid_21626986 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626986 = validateParameter(valid_21626986, JString, required = false,
                                   default = nil)
  if valid_21626986 != nil:
    section.add "X-Amz-Algorithm", valid_21626986
  var valid_21626987 = header.getOrDefault("X-Amz-Signature")
  valid_21626987 = validateParameter(valid_21626987, JString, required = false,
                                   default = nil)
  if valid_21626987 != nil:
    section.add "X-Amz-Signature", valid_21626987
  var valid_21626988 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626988 = validateParameter(valid_21626988, JString, required = false,
                                   default = nil)
  if valid_21626988 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626988
  var valid_21626989 = header.getOrDefault("X-Amz-Credential")
  valid_21626989 = validateParameter(valid_21626989, JString, required = false,
                                   default = nil)
  if valid_21626989 != nil:
    section.add "X-Amz-Credential", valid_21626989
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626990: Call_GetDeleteInstanceProfile_21626977;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_21626990.validator(path, query, header, formData, body, _)
  let scheme = call_21626990.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626990.makeUrl(scheme.get, call_21626990.host, call_21626990.base,
                               call_21626990.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626990, uri, valid, _)

proc call*(call_21626991: Call_GetDeleteInstanceProfile_21626977;
          InstanceProfileName: string; Action: string = "DeleteInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteInstanceProfile
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626992 = newJObject()
  add(query_21626992, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_21626992, "Action", newJString(Action))
  add(query_21626992, "Version", newJString(Version))
  result = call_21626991.call(nil, query_21626992, nil, nil, nil)

var getDeleteInstanceProfile* = Call_GetDeleteInstanceProfile_21626977(
    name: "getDeleteInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteInstanceProfile",
    validator: validate_GetDeleteInstanceProfile_21626978, base: "/",
    makeUrl: url_GetDeleteInstanceProfile_21626979,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLoginProfile_21627026 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteLoginProfile_21627028(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteLoginProfile_21627027(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627029 = query.getOrDefault("Action")
  valid_21627029 = validateParameter(valid_21627029, JString, required = true,
                                   default = newJString("DeleteLoginProfile"))
  if valid_21627029 != nil:
    section.add "Action", valid_21627029
  var valid_21627030 = query.getOrDefault("Version")
  valid_21627030 = validateParameter(valid_21627030, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627030 != nil:
    section.add "Version", valid_21627030
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627031 = header.getOrDefault("X-Amz-Date")
  valid_21627031 = validateParameter(valid_21627031, JString, required = false,
                                   default = nil)
  if valid_21627031 != nil:
    section.add "X-Amz-Date", valid_21627031
  var valid_21627032 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627032 = validateParameter(valid_21627032, JString, required = false,
                                   default = nil)
  if valid_21627032 != nil:
    section.add "X-Amz-Security-Token", valid_21627032
  var valid_21627033 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627033 = validateParameter(valid_21627033, JString, required = false,
                                   default = nil)
  if valid_21627033 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627033
  var valid_21627034 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627034 = validateParameter(valid_21627034, JString, required = false,
                                   default = nil)
  if valid_21627034 != nil:
    section.add "X-Amz-Algorithm", valid_21627034
  var valid_21627035 = header.getOrDefault("X-Amz-Signature")
  valid_21627035 = validateParameter(valid_21627035, JString, required = false,
                                   default = nil)
  if valid_21627035 != nil:
    section.add "X-Amz-Signature", valid_21627035
  var valid_21627036 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627036 = validateParameter(valid_21627036, JString, required = false,
                                   default = nil)
  if valid_21627036 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627036
  var valid_21627037 = header.getOrDefault("X-Amz-Credential")
  valid_21627037 = validateParameter(valid_21627037, JString, required = false,
                                   default = nil)
  if valid_21627037 != nil:
    section.add "X-Amz-Credential", valid_21627037
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21627038 = formData.getOrDefault("UserName")
  valid_21627038 = validateParameter(valid_21627038, JString, required = true,
                                   default = nil)
  if valid_21627038 != nil:
    section.add "UserName", valid_21627038
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627039: Call_PostDeleteLoginProfile_21627026;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  let valid = call_21627039.validator(path, query, header, formData, body, _)
  let scheme = call_21627039.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627039.makeUrl(scheme.get, call_21627039.host, call_21627039.base,
                               call_21627039.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627039, uri, valid, _)

proc call*(call_21627040: Call_PostDeleteLoginProfile_21627026; UserName: string;
          Action: string = "DeleteLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteLoginProfile
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627041 = newJObject()
  var formData_21627042 = newJObject()
  add(formData_21627042, "UserName", newJString(UserName))
  add(query_21627041, "Action", newJString(Action))
  add(query_21627041, "Version", newJString(Version))
  result = call_21627040.call(nil, query_21627041, nil, formData_21627042, nil)

var postDeleteLoginProfile* = Call_PostDeleteLoginProfile_21627026(
    name: "postDeleteLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteLoginProfile",
    validator: validate_PostDeleteLoginProfile_21627027, base: "/",
    makeUrl: url_PostDeleteLoginProfile_21627028,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLoginProfile_21627010 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteLoginProfile_21627012(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteLoginProfile_21627011(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_21627013 = query.getOrDefault("UserName")
  valid_21627013 = validateParameter(valid_21627013, JString, required = true,
                                   default = nil)
  if valid_21627013 != nil:
    section.add "UserName", valid_21627013
  var valid_21627014 = query.getOrDefault("Action")
  valid_21627014 = validateParameter(valid_21627014, JString, required = true,
                                   default = newJString("DeleteLoginProfile"))
  if valid_21627014 != nil:
    section.add "Action", valid_21627014
  var valid_21627015 = query.getOrDefault("Version")
  valid_21627015 = validateParameter(valid_21627015, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627015 != nil:
    section.add "Version", valid_21627015
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627016 = header.getOrDefault("X-Amz-Date")
  valid_21627016 = validateParameter(valid_21627016, JString, required = false,
                                   default = nil)
  if valid_21627016 != nil:
    section.add "X-Amz-Date", valid_21627016
  var valid_21627017 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627017 = validateParameter(valid_21627017, JString, required = false,
                                   default = nil)
  if valid_21627017 != nil:
    section.add "X-Amz-Security-Token", valid_21627017
  var valid_21627018 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627018 = validateParameter(valid_21627018, JString, required = false,
                                   default = nil)
  if valid_21627018 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627018
  var valid_21627019 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627019 = validateParameter(valid_21627019, JString, required = false,
                                   default = nil)
  if valid_21627019 != nil:
    section.add "X-Amz-Algorithm", valid_21627019
  var valid_21627020 = header.getOrDefault("X-Amz-Signature")
  valid_21627020 = validateParameter(valid_21627020, JString, required = false,
                                   default = nil)
  if valid_21627020 != nil:
    section.add "X-Amz-Signature", valid_21627020
  var valid_21627021 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627021 = validateParameter(valid_21627021, JString, required = false,
                                   default = nil)
  if valid_21627021 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627021
  var valid_21627022 = header.getOrDefault("X-Amz-Credential")
  valid_21627022 = validateParameter(valid_21627022, JString, required = false,
                                   default = nil)
  if valid_21627022 != nil:
    section.add "X-Amz-Credential", valid_21627022
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627023: Call_GetDeleteLoginProfile_21627010;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  let valid = call_21627023.validator(path, query, header, formData, body, _)
  let scheme = call_21627023.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627023.makeUrl(scheme.get, call_21627023.host, call_21627023.base,
                               call_21627023.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627023, uri, valid, _)

proc call*(call_21627024: Call_GetDeleteLoginProfile_21627010; UserName: string;
          Action: string = "DeleteLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteLoginProfile
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627025 = newJObject()
  add(query_21627025, "UserName", newJString(UserName))
  add(query_21627025, "Action", newJString(Action))
  add(query_21627025, "Version", newJString(Version))
  result = call_21627024.call(nil, query_21627025, nil, nil, nil)

var getDeleteLoginProfile* = Call_GetDeleteLoginProfile_21627010(
    name: "getDeleteLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteLoginProfile",
    validator: validate_GetDeleteLoginProfile_21627011, base: "/",
    makeUrl: url_GetDeleteLoginProfile_21627012,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteOpenIDConnectProvider_21627059 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteOpenIDConnectProvider_21627061(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteOpenIDConnectProvider_21627060(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627062 = query.getOrDefault("Action")
  valid_21627062 = validateParameter(valid_21627062, JString, required = true, default = newJString(
      "DeleteOpenIDConnectProvider"))
  if valid_21627062 != nil:
    section.add "Action", valid_21627062
  var valid_21627063 = query.getOrDefault("Version")
  valid_21627063 = validateParameter(valid_21627063, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627063 != nil:
    section.add "Version", valid_21627063
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627064 = header.getOrDefault("X-Amz-Date")
  valid_21627064 = validateParameter(valid_21627064, JString, required = false,
                                   default = nil)
  if valid_21627064 != nil:
    section.add "X-Amz-Date", valid_21627064
  var valid_21627065 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627065 = validateParameter(valid_21627065, JString, required = false,
                                   default = nil)
  if valid_21627065 != nil:
    section.add "X-Amz-Security-Token", valid_21627065
  var valid_21627066 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627066 = validateParameter(valid_21627066, JString, required = false,
                                   default = nil)
  if valid_21627066 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627066
  var valid_21627067 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627067 = validateParameter(valid_21627067, JString, required = false,
                                   default = nil)
  if valid_21627067 != nil:
    section.add "X-Amz-Algorithm", valid_21627067
  var valid_21627068 = header.getOrDefault("X-Amz-Signature")
  valid_21627068 = validateParameter(valid_21627068, JString, required = false,
                                   default = nil)
  if valid_21627068 != nil:
    section.add "X-Amz-Signature", valid_21627068
  var valid_21627069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627069 = validateParameter(valid_21627069, JString, required = false,
                                   default = nil)
  if valid_21627069 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627069
  var valid_21627070 = header.getOrDefault("X-Amz-Credential")
  valid_21627070 = validateParameter(valid_21627070, JString, required = false,
                                   default = nil)
  if valid_21627070 != nil:
    section.add "X-Amz-Credential", valid_21627070
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_21627071 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_21627071 = validateParameter(valid_21627071, JString, required = true,
                                   default = nil)
  if valid_21627071 != nil:
    section.add "OpenIDConnectProviderArn", valid_21627071
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627072: Call_PostDeleteOpenIDConnectProvider_21627059;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  let valid = call_21627072.validator(path, query, header, formData, body, _)
  let scheme = call_21627072.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627072.makeUrl(scheme.get, call_21627072.host, call_21627072.base,
                               call_21627072.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627072, uri, valid, _)

proc call*(call_21627073: Call_PostDeleteOpenIDConnectProvider_21627059;
          OpenIDConnectProviderArn: string;
          Action: string = "DeleteOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteOpenIDConnectProvider
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627074 = newJObject()
  var formData_21627075 = newJObject()
  add(formData_21627075, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_21627074, "Action", newJString(Action))
  add(query_21627074, "Version", newJString(Version))
  result = call_21627073.call(nil, query_21627074, nil, formData_21627075, nil)

var postDeleteOpenIDConnectProvider* = Call_PostDeleteOpenIDConnectProvider_21627059(
    name: "postDeleteOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteOpenIDConnectProvider",
    validator: validate_PostDeleteOpenIDConnectProvider_21627060, base: "/",
    makeUrl: url_PostDeleteOpenIDConnectProvider_21627061,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteOpenIDConnectProvider_21627043 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteOpenIDConnectProvider_21627045(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteOpenIDConnectProvider_21627044(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_21627046 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_21627046 = validateParameter(valid_21627046, JString, required = true,
                                   default = nil)
  if valid_21627046 != nil:
    section.add "OpenIDConnectProviderArn", valid_21627046
  var valid_21627047 = query.getOrDefault("Action")
  valid_21627047 = validateParameter(valid_21627047, JString, required = true, default = newJString(
      "DeleteOpenIDConnectProvider"))
  if valid_21627047 != nil:
    section.add "Action", valid_21627047
  var valid_21627048 = query.getOrDefault("Version")
  valid_21627048 = validateParameter(valid_21627048, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627048 != nil:
    section.add "Version", valid_21627048
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627049 = header.getOrDefault("X-Amz-Date")
  valid_21627049 = validateParameter(valid_21627049, JString, required = false,
                                   default = nil)
  if valid_21627049 != nil:
    section.add "X-Amz-Date", valid_21627049
  var valid_21627050 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627050 = validateParameter(valid_21627050, JString, required = false,
                                   default = nil)
  if valid_21627050 != nil:
    section.add "X-Amz-Security-Token", valid_21627050
  var valid_21627051 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627051 = validateParameter(valid_21627051, JString, required = false,
                                   default = nil)
  if valid_21627051 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627051
  var valid_21627052 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627052 = validateParameter(valid_21627052, JString, required = false,
                                   default = nil)
  if valid_21627052 != nil:
    section.add "X-Amz-Algorithm", valid_21627052
  var valid_21627053 = header.getOrDefault("X-Amz-Signature")
  valid_21627053 = validateParameter(valid_21627053, JString, required = false,
                                   default = nil)
  if valid_21627053 != nil:
    section.add "X-Amz-Signature", valid_21627053
  var valid_21627054 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627054 = validateParameter(valid_21627054, JString, required = false,
                                   default = nil)
  if valid_21627054 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627054
  var valid_21627055 = header.getOrDefault("X-Amz-Credential")
  valid_21627055 = validateParameter(valid_21627055, JString, required = false,
                                   default = nil)
  if valid_21627055 != nil:
    section.add "X-Amz-Credential", valid_21627055
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627056: Call_GetDeleteOpenIDConnectProvider_21627043;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  let valid = call_21627056.validator(path, query, header, formData, body, _)
  let scheme = call_21627056.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627056.makeUrl(scheme.get, call_21627056.host, call_21627056.base,
                               call_21627056.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627056, uri, valid, _)

proc call*(call_21627057: Call_GetDeleteOpenIDConnectProvider_21627043;
          OpenIDConnectProviderArn: string;
          Action: string = "DeleteOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteOpenIDConnectProvider
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627058 = newJObject()
  add(query_21627058, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_21627058, "Action", newJString(Action))
  add(query_21627058, "Version", newJString(Version))
  result = call_21627057.call(nil, query_21627058, nil, nil, nil)

var getDeleteOpenIDConnectProvider* = Call_GetDeleteOpenIDConnectProvider_21627043(
    name: "getDeleteOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteOpenIDConnectProvider",
    validator: validate_GetDeleteOpenIDConnectProvider_21627044, base: "/",
    makeUrl: url_GetDeleteOpenIDConnectProvider_21627045,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicy_21627092 = ref object of OpenApiRestCall_21625435
proc url_PostDeletePolicy_21627094(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeletePolicy_21627093(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627095 = query.getOrDefault("Action")
  valid_21627095 = validateParameter(valid_21627095, JString, required = true,
                                   default = newJString("DeletePolicy"))
  if valid_21627095 != nil:
    section.add "Action", valid_21627095
  var valid_21627096 = query.getOrDefault("Version")
  valid_21627096 = validateParameter(valid_21627096, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627096 != nil:
    section.add "Version", valid_21627096
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627097 = header.getOrDefault("X-Amz-Date")
  valid_21627097 = validateParameter(valid_21627097, JString, required = false,
                                   default = nil)
  if valid_21627097 != nil:
    section.add "X-Amz-Date", valid_21627097
  var valid_21627098 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627098 = validateParameter(valid_21627098, JString, required = false,
                                   default = nil)
  if valid_21627098 != nil:
    section.add "X-Amz-Security-Token", valid_21627098
  var valid_21627099 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627099 = validateParameter(valid_21627099, JString, required = false,
                                   default = nil)
  if valid_21627099 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627099
  var valid_21627100 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627100 = validateParameter(valid_21627100, JString, required = false,
                                   default = nil)
  if valid_21627100 != nil:
    section.add "X-Amz-Algorithm", valid_21627100
  var valid_21627101 = header.getOrDefault("X-Amz-Signature")
  valid_21627101 = validateParameter(valid_21627101, JString, required = false,
                                   default = nil)
  if valid_21627101 != nil:
    section.add "X-Amz-Signature", valid_21627101
  var valid_21627102 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627102 = validateParameter(valid_21627102, JString, required = false,
                                   default = nil)
  if valid_21627102 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627102
  var valid_21627103 = header.getOrDefault("X-Amz-Credential")
  valid_21627103 = validateParameter(valid_21627103, JString, required = false,
                                   default = nil)
  if valid_21627103 != nil:
    section.add "X-Amz-Credential", valid_21627103
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_21627104 = formData.getOrDefault("PolicyArn")
  valid_21627104 = validateParameter(valid_21627104, JString, required = true,
                                   default = nil)
  if valid_21627104 != nil:
    section.add "PolicyArn", valid_21627104
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627105: Call_PostDeletePolicy_21627092; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627105.validator(path, query, header, formData, body, _)
  let scheme = call_21627105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627105.makeUrl(scheme.get, call_21627105.host, call_21627105.base,
                               call_21627105.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627105, uri, valid, _)

proc call*(call_21627106: Call_PostDeletePolicy_21627092; PolicyArn: string;
          Action: string = "DeletePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postDeletePolicy
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627107 = newJObject()
  var formData_21627108 = newJObject()
  add(formData_21627108, "PolicyArn", newJString(PolicyArn))
  add(query_21627107, "Action", newJString(Action))
  add(query_21627107, "Version", newJString(Version))
  result = call_21627106.call(nil, query_21627107, nil, formData_21627108, nil)

var postDeletePolicy* = Call_PostDeletePolicy_21627092(name: "postDeletePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_PostDeletePolicy_21627093,
    base: "/", makeUrl: url_PostDeletePolicy_21627094,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicy_21627076 = ref object of OpenApiRestCall_21625435
proc url_GetDeletePolicy_21627078(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeletePolicy_21627077(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_21627079 = query.getOrDefault("PolicyArn")
  valid_21627079 = validateParameter(valid_21627079, JString, required = true,
                                   default = nil)
  if valid_21627079 != nil:
    section.add "PolicyArn", valid_21627079
  var valid_21627080 = query.getOrDefault("Action")
  valid_21627080 = validateParameter(valid_21627080, JString, required = true,
                                   default = newJString("DeletePolicy"))
  if valid_21627080 != nil:
    section.add "Action", valid_21627080
  var valid_21627081 = query.getOrDefault("Version")
  valid_21627081 = validateParameter(valid_21627081, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627081 != nil:
    section.add "Version", valid_21627081
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627082 = header.getOrDefault("X-Amz-Date")
  valid_21627082 = validateParameter(valid_21627082, JString, required = false,
                                   default = nil)
  if valid_21627082 != nil:
    section.add "X-Amz-Date", valid_21627082
  var valid_21627083 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627083 = validateParameter(valid_21627083, JString, required = false,
                                   default = nil)
  if valid_21627083 != nil:
    section.add "X-Amz-Security-Token", valid_21627083
  var valid_21627084 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627084 = validateParameter(valid_21627084, JString, required = false,
                                   default = nil)
  if valid_21627084 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627084
  var valid_21627085 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627085 = validateParameter(valid_21627085, JString, required = false,
                                   default = nil)
  if valid_21627085 != nil:
    section.add "X-Amz-Algorithm", valid_21627085
  var valid_21627086 = header.getOrDefault("X-Amz-Signature")
  valid_21627086 = validateParameter(valid_21627086, JString, required = false,
                                   default = nil)
  if valid_21627086 != nil:
    section.add "X-Amz-Signature", valid_21627086
  var valid_21627087 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627087 = validateParameter(valid_21627087, JString, required = false,
                                   default = nil)
  if valid_21627087 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627087
  var valid_21627088 = header.getOrDefault("X-Amz-Credential")
  valid_21627088 = validateParameter(valid_21627088, JString, required = false,
                                   default = nil)
  if valid_21627088 != nil:
    section.add "X-Amz-Credential", valid_21627088
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627089: Call_GetDeletePolicy_21627076; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627089.validator(path, query, header, formData, body, _)
  let scheme = call_21627089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627089.makeUrl(scheme.get, call_21627089.host, call_21627089.base,
                               call_21627089.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627089, uri, valid, _)

proc call*(call_21627090: Call_GetDeletePolicy_21627076; PolicyArn: string;
          Action: string = "DeletePolicy"; Version: string = "2010-05-08"): Recallable =
  ## getDeletePolicy
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627091 = newJObject()
  add(query_21627091, "PolicyArn", newJString(PolicyArn))
  add(query_21627091, "Action", newJString(Action))
  add(query_21627091, "Version", newJString(Version))
  result = call_21627090.call(nil, query_21627091, nil, nil, nil)

var getDeletePolicy* = Call_GetDeletePolicy_21627076(name: "getDeletePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_GetDeletePolicy_21627077,
    base: "/", makeUrl: url_GetDeletePolicy_21627078,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicyVersion_21627126 = ref object of OpenApiRestCall_21625435
proc url_PostDeletePolicyVersion_21627128(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeletePolicyVersion_21627127(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627129 = query.getOrDefault("Action")
  valid_21627129 = validateParameter(valid_21627129, JString, required = true,
                                   default = newJString("DeletePolicyVersion"))
  if valid_21627129 != nil:
    section.add "Action", valid_21627129
  var valid_21627130 = query.getOrDefault("Version")
  valid_21627130 = validateParameter(valid_21627130, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627130 != nil:
    section.add "Version", valid_21627130
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627131 = header.getOrDefault("X-Amz-Date")
  valid_21627131 = validateParameter(valid_21627131, JString, required = false,
                                   default = nil)
  if valid_21627131 != nil:
    section.add "X-Amz-Date", valid_21627131
  var valid_21627132 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627132 = validateParameter(valid_21627132, JString, required = false,
                                   default = nil)
  if valid_21627132 != nil:
    section.add "X-Amz-Security-Token", valid_21627132
  var valid_21627133 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627133 = validateParameter(valid_21627133, JString, required = false,
                                   default = nil)
  if valid_21627133 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627133
  var valid_21627134 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627134 = validateParameter(valid_21627134, JString, required = false,
                                   default = nil)
  if valid_21627134 != nil:
    section.add "X-Amz-Algorithm", valid_21627134
  var valid_21627135 = header.getOrDefault("X-Amz-Signature")
  valid_21627135 = validateParameter(valid_21627135, JString, required = false,
                                   default = nil)
  if valid_21627135 != nil:
    section.add "X-Amz-Signature", valid_21627135
  var valid_21627136 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627136 = validateParameter(valid_21627136, JString, required = false,
                                   default = nil)
  if valid_21627136 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627136
  var valid_21627137 = header.getOrDefault("X-Amz-Credential")
  valid_21627137 = validateParameter(valid_21627137, JString, required = false,
                                   default = nil)
  if valid_21627137 != nil:
    section.add "X-Amz-Credential", valid_21627137
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_21627138 = formData.getOrDefault("PolicyArn")
  valid_21627138 = validateParameter(valid_21627138, JString, required = true,
                                   default = nil)
  if valid_21627138 != nil:
    section.add "PolicyArn", valid_21627138
  var valid_21627139 = formData.getOrDefault("VersionId")
  valid_21627139 = validateParameter(valid_21627139, JString, required = true,
                                   default = nil)
  if valid_21627139 != nil:
    section.add "VersionId", valid_21627139
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627140: Call_PostDeletePolicyVersion_21627126;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627140.validator(path, query, header, formData, body, _)
  let scheme = call_21627140.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627140.makeUrl(scheme.get, call_21627140.host, call_21627140.base,
                               call_21627140.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627140, uri, valid, _)

proc call*(call_21627141: Call_PostDeletePolicyVersion_21627126; PolicyArn: string;
          VersionId: string; Action: string = "DeletePolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postDeletePolicyVersion
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   VersionId: string (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  var query_21627142 = newJObject()
  var formData_21627143 = newJObject()
  add(formData_21627143, "PolicyArn", newJString(PolicyArn))
  add(query_21627142, "Action", newJString(Action))
  add(query_21627142, "Version", newJString(Version))
  add(formData_21627143, "VersionId", newJString(VersionId))
  result = call_21627141.call(nil, query_21627142, nil, formData_21627143, nil)

var postDeletePolicyVersion* = Call_PostDeletePolicyVersion_21627126(
    name: "postDeletePolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeletePolicyVersion",
    validator: validate_PostDeletePolicyVersion_21627127, base: "/",
    makeUrl: url_PostDeletePolicyVersion_21627128,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicyVersion_21627109 = ref object of OpenApiRestCall_21625435
proc url_GetDeletePolicyVersion_21627111(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeletePolicyVersion_21627110(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_21627112 = query.getOrDefault("PolicyArn")
  valid_21627112 = validateParameter(valid_21627112, JString, required = true,
                                   default = nil)
  if valid_21627112 != nil:
    section.add "PolicyArn", valid_21627112
  var valid_21627113 = query.getOrDefault("VersionId")
  valid_21627113 = validateParameter(valid_21627113, JString, required = true,
                                   default = nil)
  if valid_21627113 != nil:
    section.add "VersionId", valid_21627113
  var valid_21627114 = query.getOrDefault("Action")
  valid_21627114 = validateParameter(valid_21627114, JString, required = true,
                                   default = newJString("DeletePolicyVersion"))
  if valid_21627114 != nil:
    section.add "Action", valid_21627114
  var valid_21627115 = query.getOrDefault("Version")
  valid_21627115 = validateParameter(valid_21627115, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627115 != nil:
    section.add "Version", valid_21627115
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627116 = header.getOrDefault("X-Amz-Date")
  valid_21627116 = validateParameter(valid_21627116, JString, required = false,
                                   default = nil)
  if valid_21627116 != nil:
    section.add "X-Amz-Date", valid_21627116
  var valid_21627117 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627117 = validateParameter(valid_21627117, JString, required = false,
                                   default = nil)
  if valid_21627117 != nil:
    section.add "X-Amz-Security-Token", valid_21627117
  var valid_21627118 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627118 = validateParameter(valid_21627118, JString, required = false,
                                   default = nil)
  if valid_21627118 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627118
  var valid_21627119 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627119 = validateParameter(valid_21627119, JString, required = false,
                                   default = nil)
  if valid_21627119 != nil:
    section.add "X-Amz-Algorithm", valid_21627119
  var valid_21627120 = header.getOrDefault("X-Amz-Signature")
  valid_21627120 = validateParameter(valid_21627120, JString, required = false,
                                   default = nil)
  if valid_21627120 != nil:
    section.add "X-Amz-Signature", valid_21627120
  var valid_21627121 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627121 = validateParameter(valid_21627121, JString, required = false,
                                   default = nil)
  if valid_21627121 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627121
  var valid_21627122 = header.getOrDefault("X-Amz-Credential")
  valid_21627122 = validateParameter(valid_21627122, JString, required = false,
                                   default = nil)
  if valid_21627122 != nil:
    section.add "X-Amz-Credential", valid_21627122
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627123: Call_GetDeletePolicyVersion_21627109;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627123.validator(path, query, header, formData, body, _)
  let scheme = call_21627123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627123.makeUrl(scheme.get, call_21627123.host, call_21627123.base,
                               call_21627123.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627123, uri, valid, _)

proc call*(call_21627124: Call_GetDeletePolicyVersion_21627109; PolicyArn: string;
          VersionId: string; Action: string = "DeletePolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getDeletePolicyVersion
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: string (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627125 = newJObject()
  add(query_21627125, "PolicyArn", newJString(PolicyArn))
  add(query_21627125, "VersionId", newJString(VersionId))
  add(query_21627125, "Action", newJString(Action))
  add(query_21627125, "Version", newJString(Version))
  result = call_21627124.call(nil, query_21627125, nil, nil, nil)

var getDeletePolicyVersion* = Call_GetDeletePolicyVersion_21627109(
    name: "getDeletePolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeletePolicyVersion",
    validator: validate_GetDeletePolicyVersion_21627110, base: "/",
    makeUrl: url_GetDeletePolicyVersion_21627111,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRole_21627160 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteRole_21627162(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteRole_21627161(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627163 = query.getOrDefault("Action")
  valid_21627163 = validateParameter(valid_21627163, JString, required = true,
                                   default = newJString("DeleteRole"))
  if valid_21627163 != nil:
    section.add "Action", valid_21627163
  var valid_21627164 = query.getOrDefault("Version")
  valid_21627164 = validateParameter(valid_21627164, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627164 != nil:
    section.add "Version", valid_21627164
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627165 = header.getOrDefault("X-Amz-Date")
  valid_21627165 = validateParameter(valid_21627165, JString, required = false,
                                   default = nil)
  if valid_21627165 != nil:
    section.add "X-Amz-Date", valid_21627165
  var valid_21627166 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627166 = validateParameter(valid_21627166, JString, required = false,
                                   default = nil)
  if valid_21627166 != nil:
    section.add "X-Amz-Security-Token", valid_21627166
  var valid_21627167 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627167 = validateParameter(valid_21627167, JString, required = false,
                                   default = nil)
  if valid_21627167 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627167
  var valid_21627168 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627168 = validateParameter(valid_21627168, JString, required = false,
                                   default = nil)
  if valid_21627168 != nil:
    section.add "X-Amz-Algorithm", valid_21627168
  var valid_21627169 = header.getOrDefault("X-Amz-Signature")
  valid_21627169 = validateParameter(valid_21627169, JString, required = false,
                                   default = nil)
  if valid_21627169 != nil:
    section.add "X-Amz-Signature", valid_21627169
  var valid_21627170 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627170 = validateParameter(valid_21627170, JString, required = false,
                                   default = nil)
  if valid_21627170 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627170
  var valid_21627171 = header.getOrDefault("X-Amz-Credential")
  valid_21627171 = validateParameter(valid_21627171, JString, required = false,
                                   default = nil)
  if valid_21627171 != nil:
    section.add "X-Amz-Credential", valid_21627171
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_21627172 = formData.getOrDefault("RoleName")
  valid_21627172 = validateParameter(valid_21627172, JString, required = true,
                                   default = nil)
  if valid_21627172 != nil:
    section.add "RoleName", valid_21627172
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627173: Call_PostDeleteRole_21627160; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  let valid = call_21627173.validator(path, query, header, formData, body, _)
  let scheme = call_21627173.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627173.makeUrl(scheme.get, call_21627173.host, call_21627173.base,
                               call_21627173.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627173, uri, valid, _)

proc call*(call_21627174: Call_PostDeleteRole_21627160; RoleName: string;
          Action: string = "DeleteRole"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteRole
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627175 = newJObject()
  var formData_21627176 = newJObject()
  add(formData_21627176, "RoleName", newJString(RoleName))
  add(query_21627175, "Action", newJString(Action))
  add(query_21627175, "Version", newJString(Version))
  result = call_21627174.call(nil, query_21627175, nil, formData_21627176, nil)

var postDeleteRole* = Call_PostDeleteRole_21627160(name: "postDeleteRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteRole", validator: validate_PostDeleteRole_21627161,
    base: "/", makeUrl: url_PostDeleteRole_21627162,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRole_21627144 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteRole_21627146(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteRole_21627145(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627147 = query.getOrDefault("Action")
  valid_21627147 = validateParameter(valid_21627147, JString, required = true,
                                   default = newJString("DeleteRole"))
  if valid_21627147 != nil:
    section.add "Action", valid_21627147
  var valid_21627148 = query.getOrDefault("RoleName")
  valid_21627148 = validateParameter(valid_21627148, JString, required = true,
                                   default = nil)
  if valid_21627148 != nil:
    section.add "RoleName", valid_21627148
  var valid_21627149 = query.getOrDefault("Version")
  valid_21627149 = validateParameter(valid_21627149, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627149 != nil:
    section.add "Version", valid_21627149
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627150 = header.getOrDefault("X-Amz-Date")
  valid_21627150 = validateParameter(valid_21627150, JString, required = false,
                                   default = nil)
  if valid_21627150 != nil:
    section.add "X-Amz-Date", valid_21627150
  var valid_21627151 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627151 = validateParameter(valid_21627151, JString, required = false,
                                   default = nil)
  if valid_21627151 != nil:
    section.add "X-Amz-Security-Token", valid_21627151
  var valid_21627152 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627152 = validateParameter(valid_21627152, JString, required = false,
                                   default = nil)
  if valid_21627152 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627152
  var valid_21627153 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627153 = validateParameter(valid_21627153, JString, required = false,
                                   default = nil)
  if valid_21627153 != nil:
    section.add "X-Amz-Algorithm", valid_21627153
  var valid_21627154 = header.getOrDefault("X-Amz-Signature")
  valid_21627154 = validateParameter(valid_21627154, JString, required = false,
                                   default = nil)
  if valid_21627154 != nil:
    section.add "X-Amz-Signature", valid_21627154
  var valid_21627155 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627155 = validateParameter(valid_21627155, JString, required = false,
                                   default = nil)
  if valid_21627155 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627155
  var valid_21627156 = header.getOrDefault("X-Amz-Credential")
  valid_21627156 = validateParameter(valid_21627156, JString, required = false,
                                   default = nil)
  if valid_21627156 != nil:
    section.add "X-Amz-Credential", valid_21627156
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627157: Call_GetDeleteRole_21627144; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  let valid = call_21627157.validator(path, query, header, formData, body, _)
  let scheme = call_21627157.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627157.makeUrl(scheme.get, call_21627157.host, call_21627157.base,
                               call_21627157.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627157, uri, valid, _)

proc call*(call_21627158: Call_GetDeleteRole_21627144; RoleName: string;
          Action: string = "DeleteRole"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteRole
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21627159 = newJObject()
  add(query_21627159, "Action", newJString(Action))
  add(query_21627159, "RoleName", newJString(RoleName))
  add(query_21627159, "Version", newJString(Version))
  result = call_21627158.call(nil, query_21627159, nil, nil, nil)

var getDeleteRole* = Call_GetDeleteRole_21627144(name: "getDeleteRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteRole", validator: validate_GetDeleteRole_21627145,
    base: "/", makeUrl: url_GetDeleteRole_21627146,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRolePermissionsBoundary_21627193 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteRolePermissionsBoundary_21627195(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteRolePermissionsBoundary_21627194(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627196 = query.getOrDefault("Action")
  valid_21627196 = validateParameter(valid_21627196, JString, required = true, default = newJString(
      "DeleteRolePermissionsBoundary"))
  if valid_21627196 != nil:
    section.add "Action", valid_21627196
  var valid_21627197 = query.getOrDefault("Version")
  valid_21627197 = validateParameter(valid_21627197, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627197 != nil:
    section.add "Version", valid_21627197
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627198 = header.getOrDefault("X-Amz-Date")
  valid_21627198 = validateParameter(valid_21627198, JString, required = false,
                                   default = nil)
  if valid_21627198 != nil:
    section.add "X-Amz-Date", valid_21627198
  var valid_21627199 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627199 = validateParameter(valid_21627199, JString, required = false,
                                   default = nil)
  if valid_21627199 != nil:
    section.add "X-Amz-Security-Token", valid_21627199
  var valid_21627200 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627200 = validateParameter(valid_21627200, JString, required = false,
                                   default = nil)
  if valid_21627200 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627200
  var valid_21627201 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627201 = validateParameter(valid_21627201, JString, required = false,
                                   default = nil)
  if valid_21627201 != nil:
    section.add "X-Amz-Algorithm", valid_21627201
  var valid_21627202 = header.getOrDefault("X-Amz-Signature")
  valid_21627202 = validateParameter(valid_21627202, JString, required = false,
                                   default = nil)
  if valid_21627202 != nil:
    section.add "X-Amz-Signature", valid_21627202
  var valid_21627203 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627203 = validateParameter(valid_21627203, JString, required = false,
                                   default = nil)
  if valid_21627203 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627203
  var valid_21627204 = header.getOrDefault("X-Amz-Credential")
  valid_21627204 = validateParameter(valid_21627204, JString, required = false,
                                   default = nil)
  if valid_21627204 != nil:
    section.add "X-Amz-Credential", valid_21627204
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_21627205 = formData.getOrDefault("RoleName")
  valid_21627205 = validateParameter(valid_21627205, JString, required = true,
                                   default = nil)
  if valid_21627205 != nil:
    section.add "RoleName", valid_21627205
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627206: Call_PostDeleteRolePermissionsBoundary_21627193;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_21627206.validator(path, query, header, formData, body, _)
  let scheme = call_21627206.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627206.makeUrl(scheme.get, call_21627206.host, call_21627206.base,
                               call_21627206.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627206, uri, valid, _)

proc call*(call_21627207: Call_PostDeleteRolePermissionsBoundary_21627193;
          RoleName: string; Action: string = "DeleteRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteRolePermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627208 = newJObject()
  var formData_21627209 = newJObject()
  add(formData_21627209, "RoleName", newJString(RoleName))
  add(query_21627208, "Action", newJString(Action))
  add(query_21627208, "Version", newJString(Version))
  result = call_21627207.call(nil, query_21627208, nil, formData_21627209, nil)

var postDeleteRolePermissionsBoundary* = Call_PostDeleteRolePermissionsBoundary_21627193(
    name: "postDeleteRolePermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePermissionsBoundary",
    validator: validate_PostDeleteRolePermissionsBoundary_21627194, base: "/",
    makeUrl: url_PostDeleteRolePermissionsBoundary_21627195,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRolePermissionsBoundary_21627177 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteRolePermissionsBoundary_21627179(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteRolePermissionsBoundary_21627178(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627180 = query.getOrDefault("Action")
  valid_21627180 = validateParameter(valid_21627180, JString, required = true, default = newJString(
      "DeleteRolePermissionsBoundary"))
  if valid_21627180 != nil:
    section.add "Action", valid_21627180
  var valid_21627181 = query.getOrDefault("RoleName")
  valid_21627181 = validateParameter(valid_21627181, JString, required = true,
                                   default = nil)
  if valid_21627181 != nil:
    section.add "RoleName", valid_21627181
  var valid_21627182 = query.getOrDefault("Version")
  valid_21627182 = validateParameter(valid_21627182, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627182 != nil:
    section.add "Version", valid_21627182
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627183 = header.getOrDefault("X-Amz-Date")
  valid_21627183 = validateParameter(valid_21627183, JString, required = false,
                                   default = nil)
  if valid_21627183 != nil:
    section.add "X-Amz-Date", valid_21627183
  var valid_21627184 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627184 = validateParameter(valid_21627184, JString, required = false,
                                   default = nil)
  if valid_21627184 != nil:
    section.add "X-Amz-Security-Token", valid_21627184
  var valid_21627185 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627185 = validateParameter(valid_21627185, JString, required = false,
                                   default = nil)
  if valid_21627185 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627185
  var valid_21627186 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627186 = validateParameter(valid_21627186, JString, required = false,
                                   default = nil)
  if valid_21627186 != nil:
    section.add "X-Amz-Algorithm", valid_21627186
  var valid_21627187 = header.getOrDefault("X-Amz-Signature")
  valid_21627187 = validateParameter(valid_21627187, JString, required = false,
                                   default = nil)
  if valid_21627187 != nil:
    section.add "X-Amz-Signature", valid_21627187
  var valid_21627188 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627188 = validateParameter(valid_21627188, JString, required = false,
                                   default = nil)
  if valid_21627188 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627188
  var valid_21627189 = header.getOrDefault("X-Amz-Credential")
  valid_21627189 = validateParameter(valid_21627189, JString, required = false,
                                   default = nil)
  if valid_21627189 != nil:
    section.add "X-Amz-Credential", valid_21627189
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627190: Call_GetDeleteRolePermissionsBoundary_21627177;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_21627190.validator(path, query, header, formData, body, _)
  let scheme = call_21627190.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627190.makeUrl(scheme.get, call_21627190.host, call_21627190.base,
                               call_21627190.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627190, uri, valid, _)

proc call*(call_21627191: Call_GetDeleteRolePermissionsBoundary_21627177;
          RoleName: string; Action: string = "DeleteRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteRolePermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Version: string (required)
  var query_21627192 = newJObject()
  add(query_21627192, "Action", newJString(Action))
  add(query_21627192, "RoleName", newJString(RoleName))
  add(query_21627192, "Version", newJString(Version))
  result = call_21627191.call(nil, query_21627192, nil, nil, nil)

var getDeleteRolePermissionsBoundary* = Call_GetDeleteRolePermissionsBoundary_21627177(
    name: "getDeleteRolePermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePermissionsBoundary",
    validator: validate_GetDeleteRolePermissionsBoundary_21627178, base: "/",
    makeUrl: url_GetDeleteRolePermissionsBoundary_21627179,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRolePolicy_21627227 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteRolePolicy_21627229(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteRolePolicy_21627228(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627230 = query.getOrDefault("Action")
  valid_21627230 = validateParameter(valid_21627230, JString, required = true,
                                   default = newJString("DeleteRolePolicy"))
  if valid_21627230 != nil:
    section.add "Action", valid_21627230
  var valid_21627231 = query.getOrDefault("Version")
  valid_21627231 = validateParameter(valid_21627231, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627231 != nil:
    section.add "Version", valid_21627231
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627232 = header.getOrDefault("X-Amz-Date")
  valid_21627232 = validateParameter(valid_21627232, JString, required = false,
                                   default = nil)
  if valid_21627232 != nil:
    section.add "X-Amz-Date", valid_21627232
  var valid_21627233 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627233 = validateParameter(valid_21627233, JString, required = false,
                                   default = nil)
  if valid_21627233 != nil:
    section.add "X-Amz-Security-Token", valid_21627233
  var valid_21627234 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627234 = validateParameter(valid_21627234, JString, required = false,
                                   default = nil)
  if valid_21627234 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627234
  var valid_21627235 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627235 = validateParameter(valid_21627235, JString, required = false,
                                   default = nil)
  if valid_21627235 != nil:
    section.add "X-Amz-Algorithm", valid_21627235
  var valid_21627236 = header.getOrDefault("X-Amz-Signature")
  valid_21627236 = validateParameter(valid_21627236, JString, required = false,
                                   default = nil)
  if valid_21627236 != nil:
    section.add "X-Amz-Signature", valid_21627236
  var valid_21627237 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627237 = validateParameter(valid_21627237, JString, required = false,
                                   default = nil)
  if valid_21627237 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627237
  var valid_21627238 = header.getOrDefault("X-Amz-Credential")
  valid_21627238 = validateParameter(valid_21627238, JString, required = false,
                                   default = nil)
  if valid_21627238 != nil:
    section.add "X-Amz-Credential", valid_21627238
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_21627239 = formData.getOrDefault("PolicyName")
  valid_21627239 = validateParameter(valid_21627239, JString, required = true,
                                   default = nil)
  if valid_21627239 != nil:
    section.add "PolicyName", valid_21627239
  var valid_21627240 = formData.getOrDefault("RoleName")
  valid_21627240 = validateParameter(valid_21627240, JString, required = true,
                                   default = nil)
  if valid_21627240 != nil:
    section.add "RoleName", valid_21627240
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627241: Call_PostDeleteRolePolicy_21627227; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627241.validator(path, query, header, formData, body, _)
  let scheme = call_21627241.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627241.makeUrl(scheme.get, call_21627241.host, call_21627241.base,
                               call_21627241.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627241, uri, valid, _)

proc call*(call_21627242: Call_PostDeleteRolePolicy_21627227; PolicyName: string;
          RoleName: string; Action: string = "DeleteRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteRolePolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627243 = newJObject()
  var formData_21627244 = newJObject()
  add(formData_21627244, "PolicyName", newJString(PolicyName))
  add(formData_21627244, "RoleName", newJString(RoleName))
  add(query_21627243, "Action", newJString(Action))
  add(query_21627243, "Version", newJString(Version))
  result = call_21627242.call(nil, query_21627243, nil, formData_21627244, nil)

var postDeleteRolePolicy* = Call_PostDeleteRolePolicy_21627227(
    name: "postDeleteRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePolicy",
    validator: validate_PostDeleteRolePolicy_21627228, base: "/",
    makeUrl: url_PostDeleteRolePolicy_21627229,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRolePolicy_21627210 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteRolePolicy_21627212(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteRolePolicy_21627211(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_21627213 = query.getOrDefault("Action")
  valid_21627213 = validateParameter(valid_21627213, JString, required = true,
                                   default = newJString("DeleteRolePolicy"))
  if valid_21627213 != nil:
    section.add "Action", valid_21627213
  var valid_21627214 = query.getOrDefault("RoleName")
  valid_21627214 = validateParameter(valid_21627214, JString, required = true,
                                   default = nil)
  if valid_21627214 != nil:
    section.add "RoleName", valid_21627214
  var valid_21627215 = query.getOrDefault("Version")
  valid_21627215 = validateParameter(valid_21627215, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627215 != nil:
    section.add "Version", valid_21627215
  var valid_21627216 = query.getOrDefault("PolicyName")
  valid_21627216 = validateParameter(valid_21627216, JString, required = true,
                                   default = nil)
  if valid_21627216 != nil:
    section.add "PolicyName", valid_21627216
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627217 = header.getOrDefault("X-Amz-Date")
  valid_21627217 = validateParameter(valid_21627217, JString, required = false,
                                   default = nil)
  if valid_21627217 != nil:
    section.add "X-Amz-Date", valid_21627217
  var valid_21627218 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627218 = validateParameter(valid_21627218, JString, required = false,
                                   default = nil)
  if valid_21627218 != nil:
    section.add "X-Amz-Security-Token", valid_21627218
  var valid_21627219 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627219 = validateParameter(valid_21627219, JString, required = false,
                                   default = nil)
  if valid_21627219 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627219
  var valid_21627220 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627220 = validateParameter(valid_21627220, JString, required = false,
                                   default = nil)
  if valid_21627220 != nil:
    section.add "X-Amz-Algorithm", valid_21627220
  var valid_21627221 = header.getOrDefault("X-Amz-Signature")
  valid_21627221 = validateParameter(valid_21627221, JString, required = false,
                                   default = nil)
  if valid_21627221 != nil:
    section.add "X-Amz-Signature", valid_21627221
  var valid_21627222 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627222 = validateParameter(valid_21627222, JString, required = false,
                                   default = nil)
  if valid_21627222 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627222
  var valid_21627223 = header.getOrDefault("X-Amz-Credential")
  valid_21627223 = validateParameter(valid_21627223, JString, required = false,
                                   default = nil)
  if valid_21627223 != nil:
    section.add "X-Amz-Credential", valid_21627223
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627224: Call_GetDeleteRolePolicy_21627210; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627224.validator(path, query, header, formData, body, _)
  let scheme = call_21627224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627224.makeUrl(scheme.get, call_21627224.host, call_21627224.base,
                               call_21627224.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627224, uri, valid, _)

proc call*(call_21627225: Call_GetDeleteRolePolicy_21627210; RoleName: string;
          PolicyName: string; Action: string = "DeleteRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteRolePolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_21627226 = newJObject()
  add(query_21627226, "Action", newJString(Action))
  add(query_21627226, "RoleName", newJString(RoleName))
  add(query_21627226, "Version", newJString(Version))
  add(query_21627226, "PolicyName", newJString(PolicyName))
  result = call_21627225.call(nil, query_21627226, nil, nil, nil)

var getDeleteRolePolicy* = Call_GetDeleteRolePolicy_21627210(
    name: "getDeleteRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePolicy",
    validator: validate_GetDeleteRolePolicy_21627211, base: "/",
    makeUrl: url_GetDeleteRolePolicy_21627212,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSAMLProvider_21627261 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteSAMLProvider_21627263(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSAMLProvider_21627262(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627264 = query.getOrDefault("Action")
  valid_21627264 = validateParameter(valid_21627264, JString, required = true,
                                   default = newJString("DeleteSAMLProvider"))
  if valid_21627264 != nil:
    section.add "Action", valid_21627264
  var valid_21627265 = query.getOrDefault("Version")
  valid_21627265 = validateParameter(valid_21627265, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627265 != nil:
    section.add "Version", valid_21627265
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627266 = header.getOrDefault("X-Amz-Date")
  valid_21627266 = validateParameter(valid_21627266, JString, required = false,
                                   default = nil)
  if valid_21627266 != nil:
    section.add "X-Amz-Date", valid_21627266
  var valid_21627267 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627267 = validateParameter(valid_21627267, JString, required = false,
                                   default = nil)
  if valid_21627267 != nil:
    section.add "X-Amz-Security-Token", valid_21627267
  var valid_21627268 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627268 = validateParameter(valid_21627268, JString, required = false,
                                   default = nil)
  if valid_21627268 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627268
  var valid_21627269 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627269 = validateParameter(valid_21627269, JString, required = false,
                                   default = nil)
  if valid_21627269 != nil:
    section.add "X-Amz-Algorithm", valid_21627269
  var valid_21627270 = header.getOrDefault("X-Amz-Signature")
  valid_21627270 = validateParameter(valid_21627270, JString, required = false,
                                   default = nil)
  if valid_21627270 != nil:
    section.add "X-Amz-Signature", valid_21627270
  var valid_21627271 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627271 = validateParameter(valid_21627271, JString, required = false,
                                   default = nil)
  if valid_21627271 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627271
  var valid_21627272 = header.getOrDefault("X-Amz-Credential")
  valid_21627272 = validateParameter(valid_21627272, JString, required = false,
                                   default = nil)
  if valid_21627272 != nil:
    section.add "X-Amz-Credential", valid_21627272
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_21627273 = formData.getOrDefault("SAMLProviderArn")
  valid_21627273 = validateParameter(valid_21627273, JString, required = true,
                                   default = nil)
  if valid_21627273 != nil:
    section.add "SAMLProviderArn", valid_21627273
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627274: Call_PostDeleteSAMLProvider_21627261;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_21627274.validator(path, query, header, formData, body, _)
  let scheme = call_21627274.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627274.makeUrl(scheme.get, call_21627274.host, call_21627274.base,
                               call_21627274.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627274, uri, valid, _)

proc call*(call_21627275: Call_PostDeleteSAMLProvider_21627261;
          SAMLProviderArn: string; Action: string = "DeleteSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSAMLProvider
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627276 = newJObject()
  var formData_21627277 = newJObject()
  add(formData_21627277, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_21627276, "Action", newJString(Action))
  add(query_21627276, "Version", newJString(Version))
  result = call_21627275.call(nil, query_21627276, nil, formData_21627277, nil)

var postDeleteSAMLProvider* = Call_PostDeleteSAMLProvider_21627261(
    name: "postDeleteSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSAMLProvider",
    validator: validate_PostDeleteSAMLProvider_21627262, base: "/",
    makeUrl: url_PostDeleteSAMLProvider_21627263,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSAMLProvider_21627245 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteSAMLProvider_21627247(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSAMLProvider_21627246(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627248 = query.getOrDefault("Action")
  valid_21627248 = validateParameter(valid_21627248, JString, required = true,
                                   default = newJString("DeleteSAMLProvider"))
  if valid_21627248 != nil:
    section.add "Action", valid_21627248
  var valid_21627249 = query.getOrDefault("SAMLProviderArn")
  valid_21627249 = validateParameter(valid_21627249, JString, required = true,
                                   default = nil)
  if valid_21627249 != nil:
    section.add "SAMLProviderArn", valid_21627249
  var valid_21627250 = query.getOrDefault("Version")
  valid_21627250 = validateParameter(valid_21627250, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627250 != nil:
    section.add "Version", valid_21627250
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627251 = header.getOrDefault("X-Amz-Date")
  valid_21627251 = validateParameter(valid_21627251, JString, required = false,
                                   default = nil)
  if valid_21627251 != nil:
    section.add "X-Amz-Date", valid_21627251
  var valid_21627252 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627252 = validateParameter(valid_21627252, JString, required = false,
                                   default = nil)
  if valid_21627252 != nil:
    section.add "X-Amz-Security-Token", valid_21627252
  var valid_21627253 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627253 = validateParameter(valid_21627253, JString, required = false,
                                   default = nil)
  if valid_21627253 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627253
  var valid_21627254 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627254 = validateParameter(valid_21627254, JString, required = false,
                                   default = nil)
  if valid_21627254 != nil:
    section.add "X-Amz-Algorithm", valid_21627254
  var valid_21627255 = header.getOrDefault("X-Amz-Signature")
  valid_21627255 = validateParameter(valid_21627255, JString, required = false,
                                   default = nil)
  if valid_21627255 != nil:
    section.add "X-Amz-Signature", valid_21627255
  var valid_21627256 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627256 = validateParameter(valid_21627256, JString, required = false,
                                   default = nil)
  if valid_21627256 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627256
  var valid_21627257 = header.getOrDefault("X-Amz-Credential")
  valid_21627257 = validateParameter(valid_21627257, JString, required = false,
                                   default = nil)
  if valid_21627257 != nil:
    section.add "X-Amz-Credential", valid_21627257
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627258: Call_GetDeleteSAMLProvider_21627245;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_21627258.validator(path, query, header, formData, body, _)
  let scheme = call_21627258.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627258.makeUrl(scheme.get, call_21627258.host, call_21627258.base,
                               call_21627258.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627258, uri, valid, _)

proc call*(call_21627259: Call_GetDeleteSAMLProvider_21627245;
          SAMLProviderArn: string; Action: string = "DeleteSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteSAMLProvider
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_21627260 = newJObject()
  add(query_21627260, "Action", newJString(Action))
  add(query_21627260, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_21627260, "Version", newJString(Version))
  result = call_21627259.call(nil, query_21627260, nil, nil, nil)

var getDeleteSAMLProvider* = Call_GetDeleteSAMLProvider_21627245(
    name: "getDeleteSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSAMLProvider",
    validator: validate_GetDeleteSAMLProvider_21627246, base: "/",
    makeUrl: url_GetDeleteSAMLProvider_21627247,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSSHPublicKey_21627295 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteSSHPublicKey_21627297(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSSHPublicKey_21627296(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627298 = query.getOrDefault("Action")
  valid_21627298 = validateParameter(valid_21627298, JString, required = true,
                                   default = newJString("DeleteSSHPublicKey"))
  if valid_21627298 != nil:
    section.add "Action", valid_21627298
  var valid_21627299 = query.getOrDefault("Version")
  valid_21627299 = validateParameter(valid_21627299, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627299 != nil:
    section.add "Version", valid_21627299
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627300 = header.getOrDefault("X-Amz-Date")
  valid_21627300 = validateParameter(valid_21627300, JString, required = false,
                                   default = nil)
  if valid_21627300 != nil:
    section.add "X-Amz-Date", valid_21627300
  var valid_21627301 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627301 = validateParameter(valid_21627301, JString, required = false,
                                   default = nil)
  if valid_21627301 != nil:
    section.add "X-Amz-Security-Token", valid_21627301
  var valid_21627302 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627302 = validateParameter(valid_21627302, JString, required = false,
                                   default = nil)
  if valid_21627302 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627302
  var valid_21627303 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627303 = validateParameter(valid_21627303, JString, required = false,
                                   default = nil)
  if valid_21627303 != nil:
    section.add "X-Amz-Algorithm", valid_21627303
  var valid_21627304 = header.getOrDefault("X-Amz-Signature")
  valid_21627304 = validateParameter(valid_21627304, JString, required = false,
                                   default = nil)
  if valid_21627304 != nil:
    section.add "X-Amz-Signature", valid_21627304
  var valid_21627305 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627305 = validateParameter(valid_21627305, JString, required = false,
                                   default = nil)
  if valid_21627305 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627305
  var valid_21627306 = header.getOrDefault("X-Amz-Credential")
  valid_21627306 = validateParameter(valid_21627306, JString, required = false,
                                   default = nil)
  if valid_21627306 != nil:
    section.add "X-Amz-Credential", valid_21627306
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21627307 = formData.getOrDefault("UserName")
  valid_21627307 = validateParameter(valid_21627307, JString, required = true,
                                   default = nil)
  if valid_21627307 != nil:
    section.add "UserName", valid_21627307
  var valid_21627308 = formData.getOrDefault("SSHPublicKeyId")
  valid_21627308 = validateParameter(valid_21627308, JString, required = true,
                                   default = nil)
  if valid_21627308 != nil:
    section.add "SSHPublicKeyId", valid_21627308
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627309: Call_PostDeleteSSHPublicKey_21627295;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_21627309.validator(path, query, header, formData, body, _)
  let scheme = call_21627309.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627309.makeUrl(scheme.get, call_21627309.host, call_21627309.base,
                               call_21627309.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627309, uri, valid, _)

proc call*(call_21627310: Call_PostDeleteSSHPublicKey_21627295; UserName: string;
          SSHPublicKeyId: string; Action: string = "DeleteSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSSHPublicKey
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627311 = newJObject()
  var formData_21627312 = newJObject()
  add(formData_21627312, "UserName", newJString(UserName))
  add(formData_21627312, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_21627311, "Action", newJString(Action))
  add(query_21627311, "Version", newJString(Version))
  result = call_21627310.call(nil, query_21627311, nil, formData_21627312, nil)

var postDeleteSSHPublicKey* = Call_PostDeleteSSHPublicKey_21627295(
    name: "postDeleteSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSSHPublicKey",
    validator: validate_PostDeleteSSHPublicKey_21627296, base: "/",
    makeUrl: url_PostDeleteSSHPublicKey_21627297,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSSHPublicKey_21627278 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteSSHPublicKey_21627280(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSSHPublicKey_21627279(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_21627281 = query.getOrDefault("SSHPublicKeyId")
  valid_21627281 = validateParameter(valid_21627281, JString, required = true,
                                   default = nil)
  if valid_21627281 != nil:
    section.add "SSHPublicKeyId", valid_21627281
  var valid_21627282 = query.getOrDefault("UserName")
  valid_21627282 = validateParameter(valid_21627282, JString, required = true,
                                   default = nil)
  if valid_21627282 != nil:
    section.add "UserName", valid_21627282
  var valid_21627283 = query.getOrDefault("Action")
  valid_21627283 = validateParameter(valid_21627283, JString, required = true,
                                   default = newJString("DeleteSSHPublicKey"))
  if valid_21627283 != nil:
    section.add "Action", valid_21627283
  var valid_21627284 = query.getOrDefault("Version")
  valid_21627284 = validateParameter(valid_21627284, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627284 != nil:
    section.add "Version", valid_21627284
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627285 = header.getOrDefault("X-Amz-Date")
  valid_21627285 = validateParameter(valid_21627285, JString, required = false,
                                   default = nil)
  if valid_21627285 != nil:
    section.add "X-Amz-Date", valid_21627285
  var valid_21627286 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627286 = validateParameter(valid_21627286, JString, required = false,
                                   default = nil)
  if valid_21627286 != nil:
    section.add "X-Amz-Security-Token", valid_21627286
  var valid_21627287 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627287 = validateParameter(valid_21627287, JString, required = false,
                                   default = nil)
  if valid_21627287 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627287
  var valid_21627288 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627288 = validateParameter(valid_21627288, JString, required = false,
                                   default = nil)
  if valid_21627288 != nil:
    section.add "X-Amz-Algorithm", valid_21627288
  var valid_21627289 = header.getOrDefault("X-Amz-Signature")
  valid_21627289 = validateParameter(valid_21627289, JString, required = false,
                                   default = nil)
  if valid_21627289 != nil:
    section.add "X-Amz-Signature", valid_21627289
  var valid_21627290 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627290 = validateParameter(valid_21627290, JString, required = false,
                                   default = nil)
  if valid_21627290 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627290
  var valid_21627291 = header.getOrDefault("X-Amz-Credential")
  valid_21627291 = validateParameter(valid_21627291, JString, required = false,
                                   default = nil)
  if valid_21627291 != nil:
    section.add "X-Amz-Credential", valid_21627291
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627292: Call_GetDeleteSSHPublicKey_21627278;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_21627292.validator(path, query, header, formData, body, _)
  let scheme = call_21627292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627292.makeUrl(scheme.get, call_21627292.host, call_21627292.base,
                               call_21627292.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627292, uri, valid, _)

proc call*(call_21627293: Call_GetDeleteSSHPublicKey_21627278;
          SSHPublicKeyId: string; UserName: string;
          Action: string = "DeleteSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteSSHPublicKey
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627294 = newJObject()
  add(query_21627294, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_21627294, "UserName", newJString(UserName))
  add(query_21627294, "Action", newJString(Action))
  add(query_21627294, "Version", newJString(Version))
  result = call_21627293.call(nil, query_21627294, nil, nil, nil)

var getDeleteSSHPublicKey* = Call_GetDeleteSSHPublicKey_21627278(
    name: "getDeleteSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSSHPublicKey",
    validator: validate_GetDeleteSSHPublicKey_21627279, base: "/",
    makeUrl: url_GetDeleteSSHPublicKey_21627280,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServerCertificate_21627329 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteServerCertificate_21627331(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteServerCertificate_21627330(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627332 = query.getOrDefault("Action")
  valid_21627332 = validateParameter(valid_21627332, JString, required = true, default = newJString(
      "DeleteServerCertificate"))
  if valid_21627332 != nil:
    section.add "Action", valid_21627332
  var valid_21627333 = query.getOrDefault("Version")
  valid_21627333 = validateParameter(valid_21627333, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627333 != nil:
    section.add "Version", valid_21627333
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627334 = header.getOrDefault("X-Amz-Date")
  valid_21627334 = validateParameter(valid_21627334, JString, required = false,
                                   default = nil)
  if valid_21627334 != nil:
    section.add "X-Amz-Date", valid_21627334
  var valid_21627335 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627335 = validateParameter(valid_21627335, JString, required = false,
                                   default = nil)
  if valid_21627335 != nil:
    section.add "X-Amz-Security-Token", valid_21627335
  var valid_21627336 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627336 = validateParameter(valid_21627336, JString, required = false,
                                   default = nil)
  if valid_21627336 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627336
  var valid_21627337 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627337 = validateParameter(valid_21627337, JString, required = false,
                                   default = nil)
  if valid_21627337 != nil:
    section.add "X-Amz-Algorithm", valid_21627337
  var valid_21627338 = header.getOrDefault("X-Amz-Signature")
  valid_21627338 = validateParameter(valid_21627338, JString, required = false,
                                   default = nil)
  if valid_21627338 != nil:
    section.add "X-Amz-Signature", valid_21627338
  var valid_21627339 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627339 = validateParameter(valid_21627339, JString, required = false,
                                   default = nil)
  if valid_21627339 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627339
  var valid_21627340 = header.getOrDefault("X-Amz-Credential")
  valid_21627340 = validateParameter(valid_21627340, JString, required = false,
                                   default = nil)
  if valid_21627340 != nil:
    section.add "X-Amz-Credential", valid_21627340
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_21627341 = formData.getOrDefault("ServerCertificateName")
  valid_21627341 = validateParameter(valid_21627341, JString, required = true,
                                   default = nil)
  if valid_21627341 != nil:
    section.add "ServerCertificateName", valid_21627341
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627342: Call_PostDeleteServerCertificate_21627329;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  let valid = call_21627342.validator(path, query, header, formData, body, _)
  let scheme = call_21627342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627342.makeUrl(scheme.get, call_21627342.host, call_21627342.base,
                               call_21627342.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627342, uri, valid, _)

proc call*(call_21627343: Call_PostDeleteServerCertificate_21627329;
          ServerCertificateName: string;
          Action: string = "DeleteServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteServerCertificate
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627344 = newJObject()
  var formData_21627345 = newJObject()
  add(formData_21627345, "ServerCertificateName",
      newJString(ServerCertificateName))
  add(query_21627344, "Action", newJString(Action))
  add(query_21627344, "Version", newJString(Version))
  result = call_21627343.call(nil, query_21627344, nil, formData_21627345, nil)

var postDeleteServerCertificate* = Call_PostDeleteServerCertificate_21627329(
    name: "postDeleteServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServerCertificate",
    validator: validate_PostDeleteServerCertificate_21627330, base: "/",
    makeUrl: url_PostDeleteServerCertificate_21627331,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServerCertificate_21627313 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteServerCertificate_21627315(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteServerCertificate_21627314(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_21627316 = query.getOrDefault("ServerCertificateName")
  valid_21627316 = validateParameter(valid_21627316, JString, required = true,
                                   default = nil)
  if valid_21627316 != nil:
    section.add "ServerCertificateName", valid_21627316
  var valid_21627317 = query.getOrDefault("Action")
  valid_21627317 = validateParameter(valid_21627317, JString, required = true, default = newJString(
      "DeleteServerCertificate"))
  if valid_21627317 != nil:
    section.add "Action", valid_21627317
  var valid_21627318 = query.getOrDefault("Version")
  valid_21627318 = validateParameter(valid_21627318, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627318 != nil:
    section.add "Version", valid_21627318
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627319 = header.getOrDefault("X-Amz-Date")
  valid_21627319 = validateParameter(valid_21627319, JString, required = false,
                                   default = nil)
  if valid_21627319 != nil:
    section.add "X-Amz-Date", valid_21627319
  var valid_21627320 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627320 = validateParameter(valid_21627320, JString, required = false,
                                   default = nil)
  if valid_21627320 != nil:
    section.add "X-Amz-Security-Token", valid_21627320
  var valid_21627321 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627321 = validateParameter(valid_21627321, JString, required = false,
                                   default = nil)
  if valid_21627321 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627321
  var valid_21627322 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627322 = validateParameter(valid_21627322, JString, required = false,
                                   default = nil)
  if valid_21627322 != nil:
    section.add "X-Amz-Algorithm", valid_21627322
  var valid_21627323 = header.getOrDefault("X-Amz-Signature")
  valid_21627323 = validateParameter(valid_21627323, JString, required = false,
                                   default = nil)
  if valid_21627323 != nil:
    section.add "X-Amz-Signature", valid_21627323
  var valid_21627324 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627324 = validateParameter(valid_21627324, JString, required = false,
                                   default = nil)
  if valid_21627324 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627324
  var valid_21627325 = header.getOrDefault("X-Amz-Credential")
  valid_21627325 = validateParameter(valid_21627325, JString, required = false,
                                   default = nil)
  if valid_21627325 != nil:
    section.add "X-Amz-Credential", valid_21627325
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627326: Call_GetDeleteServerCertificate_21627313;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  let valid = call_21627326.validator(path, query, header, formData, body, _)
  let scheme = call_21627326.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627326.makeUrl(scheme.get, call_21627326.host, call_21627326.base,
                               call_21627326.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627326, uri, valid, _)

proc call*(call_21627327: Call_GetDeleteServerCertificate_21627313;
          ServerCertificateName: string;
          Action: string = "DeleteServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteServerCertificate
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627328 = newJObject()
  add(query_21627328, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_21627328, "Action", newJString(Action))
  add(query_21627328, "Version", newJString(Version))
  result = call_21627327.call(nil, query_21627328, nil, nil, nil)

var getDeleteServerCertificate* = Call_GetDeleteServerCertificate_21627313(
    name: "getDeleteServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServerCertificate",
    validator: validate_GetDeleteServerCertificate_21627314, base: "/",
    makeUrl: url_GetDeleteServerCertificate_21627315,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServiceLinkedRole_21627362 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteServiceLinkedRole_21627364(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteServiceLinkedRole_21627363(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627365 = query.getOrDefault("Action")
  valid_21627365 = validateParameter(valid_21627365, JString, required = true, default = newJString(
      "DeleteServiceLinkedRole"))
  if valid_21627365 != nil:
    section.add "Action", valid_21627365
  var valid_21627366 = query.getOrDefault("Version")
  valid_21627366 = validateParameter(valid_21627366, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627366 != nil:
    section.add "Version", valid_21627366
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627367 = header.getOrDefault("X-Amz-Date")
  valid_21627367 = validateParameter(valid_21627367, JString, required = false,
                                   default = nil)
  if valid_21627367 != nil:
    section.add "X-Amz-Date", valid_21627367
  var valid_21627368 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627368 = validateParameter(valid_21627368, JString, required = false,
                                   default = nil)
  if valid_21627368 != nil:
    section.add "X-Amz-Security-Token", valid_21627368
  var valid_21627369 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627369 = validateParameter(valid_21627369, JString, required = false,
                                   default = nil)
  if valid_21627369 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627369
  var valid_21627370 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627370 = validateParameter(valid_21627370, JString, required = false,
                                   default = nil)
  if valid_21627370 != nil:
    section.add "X-Amz-Algorithm", valid_21627370
  var valid_21627371 = header.getOrDefault("X-Amz-Signature")
  valid_21627371 = validateParameter(valid_21627371, JString, required = false,
                                   default = nil)
  if valid_21627371 != nil:
    section.add "X-Amz-Signature", valid_21627371
  var valid_21627372 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627372 = validateParameter(valid_21627372, JString, required = false,
                                   default = nil)
  if valid_21627372 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627372
  var valid_21627373 = header.getOrDefault("X-Amz-Credential")
  valid_21627373 = validateParameter(valid_21627373, JString, required = false,
                                   default = nil)
  if valid_21627373 != nil:
    section.add "X-Amz-Credential", valid_21627373
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name of the service-linked role to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_21627374 = formData.getOrDefault("RoleName")
  valid_21627374 = validateParameter(valid_21627374, JString, required = true,
                                   default = nil)
  if valid_21627374 != nil:
    section.add "RoleName", valid_21627374
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627375: Call_PostDeleteServiceLinkedRole_21627362;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627375.validator(path, query, header, formData, body, _)
  let scheme = call_21627375.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627375.makeUrl(scheme.get, call_21627375.host, call_21627375.base,
                               call_21627375.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627375, uri, valid, _)

proc call*(call_21627376: Call_PostDeleteServiceLinkedRole_21627362;
          RoleName: string; Action: string = "DeleteServiceLinkedRole";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteServiceLinkedRole
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627377 = newJObject()
  var formData_21627378 = newJObject()
  add(formData_21627378, "RoleName", newJString(RoleName))
  add(query_21627377, "Action", newJString(Action))
  add(query_21627377, "Version", newJString(Version))
  result = call_21627376.call(nil, query_21627377, nil, formData_21627378, nil)

var postDeleteServiceLinkedRole* = Call_PostDeleteServiceLinkedRole_21627362(
    name: "postDeleteServiceLinkedRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceLinkedRole",
    validator: validate_PostDeleteServiceLinkedRole_21627363, base: "/",
    makeUrl: url_PostDeleteServiceLinkedRole_21627364,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServiceLinkedRole_21627346 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteServiceLinkedRole_21627348(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteServiceLinkedRole_21627347(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627349 = query.getOrDefault("Action")
  valid_21627349 = validateParameter(valid_21627349, JString, required = true, default = newJString(
      "DeleteServiceLinkedRole"))
  if valid_21627349 != nil:
    section.add "Action", valid_21627349
  var valid_21627350 = query.getOrDefault("RoleName")
  valid_21627350 = validateParameter(valid_21627350, JString, required = true,
                                   default = nil)
  if valid_21627350 != nil:
    section.add "RoleName", valid_21627350
  var valid_21627351 = query.getOrDefault("Version")
  valid_21627351 = validateParameter(valid_21627351, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627351 != nil:
    section.add "Version", valid_21627351
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627352 = header.getOrDefault("X-Amz-Date")
  valid_21627352 = validateParameter(valid_21627352, JString, required = false,
                                   default = nil)
  if valid_21627352 != nil:
    section.add "X-Amz-Date", valid_21627352
  var valid_21627353 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627353 = validateParameter(valid_21627353, JString, required = false,
                                   default = nil)
  if valid_21627353 != nil:
    section.add "X-Amz-Security-Token", valid_21627353
  var valid_21627354 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627354 = validateParameter(valid_21627354, JString, required = false,
                                   default = nil)
  if valid_21627354 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627354
  var valid_21627355 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627355 = validateParameter(valid_21627355, JString, required = false,
                                   default = nil)
  if valid_21627355 != nil:
    section.add "X-Amz-Algorithm", valid_21627355
  var valid_21627356 = header.getOrDefault("X-Amz-Signature")
  valid_21627356 = validateParameter(valid_21627356, JString, required = false,
                                   default = nil)
  if valid_21627356 != nil:
    section.add "X-Amz-Signature", valid_21627356
  var valid_21627357 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627357 = validateParameter(valid_21627357, JString, required = false,
                                   default = nil)
  if valid_21627357 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627357
  var valid_21627358 = header.getOrDefault("X-Amz-Credential")
  valid_21627358 = validateParameter(valid_21627358, JString, required = false,
                                   default = nil)
  if valid_21627358 != nil:
    section.add "X-Amz-Credential", valid_21627358
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627359: Call_GetDeleteServiceLinkedRole_21627346;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627359.validator(path, query, header, formData, body, _)
  let scheme = call_21627359.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627359.makeUrl(scheme.get, call_21627359.host, call_21627359.base,
                               call_21627359.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627359, uri, valid, _)

proc call*(call_21627360: Call_GetDeleteServiceLinkedRole_21627346;
          RoleName: string; Action: string = "DeleteServiceLinkedRole";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteServiceLinkedRole
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Version: string (required)
  var query_21627361 = newJObject()
  add(query_21627361, "Action", newJString(Action))
  add(query_21627361, "RoleName", newJString(RoleName))
  add(query_21627361, "Version", newJString(Version))
  result = call_21627360.call(nil, query_21627361, nil, nil, nil)

var getDeleteServiceLinkedRole* = Call_GetDeleteServiceLinkedRole_21627346(
    name: "getDeleteServiceLinkedRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceLinkedRole",
    validator: validate_GetDeleteServiceLinkedRole_21627347, base: "/",
    makeUrl: url_GetDeleteServiceLinkedRole_21627348,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServiceSpecificCredential_21627396 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteServiceSpecificCredential_21627398(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteServiceSpecificCredential_21627397(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes the specified service-specific credential.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627399 = query.getOrDefault("Action")
  valid_21627399 = validateParameter(valid_21627399, JString, required = true, default = newJString(
      "DeleteServiceSpecificCredential"))
  if valid_21627399 != nil:
    section.add "Action", valid_21627399
  var valid_21627400 = query.getOrDefault("Version")
  valid_21627400 = validateParameter(valid_21627400, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627400 != nil:
    section.add "Version", valid_21627400
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627401 = header.getOrDefault("X-Amz-Date")
  valid_21627401 = validateParameter(valid_21627401, JString, required = false,
                                   default = nil)
  if valid_21627401 != nil:
    section.add "X-Amz-Date", valid_21627401
  var valid_21627402 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627402 = validateParameter(valid_21627402, JString, required = false,
                                   default = nil)
  if valid_21627402 != nil:
    section.add "X-Amz-Security-Token", valid_21627402
  var valid_21627403 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627403 = validateParameter(valid_21627403, JString, required = false,
                                   default = nil)
  if valid_21627403 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627403
  var valid_21627404 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627404 = validateParameter(valid_21627404, JString, required = false,
                                   default = nil)
  if valid_21627404 != nil:
    section.add "X-Amz-Algorithm", valid_21627404
  var valid_21627405 = header.getOrDefault("X-Amz-Signature")
  valid_21627405 = validateParameter(valid_21627405, JString, required = false,
                                   default = nil)
  if valid_21627405 != nil:
    section.add "X-Amz-Signature", valid_21627405
  var valid_21627406 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627406 = validateParameter(valid_21627406, JString, required = false,
                                   default = nil)
  if valid_21627406 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627406
  var valid_21627407 = header.getOrDefault("X-Amz-Credential")
  valid_21627407 = validateParameter(valid_21627407, JString, required = false,
                                   default = nil)
  if valid_21627407 != nil:
    section.add "X-Amz-Credential", valid_21627407
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_21627408 = formData.getOrDefault("UserName")
  valid_21627408 = validateParameter(valid_21627408, JString, required = false,
                                   default = nil)
  if valid_21627408 != nil:
    section.add "UserName", valid_21627408
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_21627409 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_21627409 = validateParameter(valid_21627409, JString, required = true,
                                   default = nil)
  if valid_21627409 != nil:
    section.add "ServiceSpecificCredentialId", valid_21627409
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627410: Call_PostDeleteServiceSpecificCredential_21627396;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified service-specific credential.
  ## 
  let valid = call_21627410.validator(path, query, header, formData, body, _)
  let scheme = call_21627410.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627410.makeUrl(scheme.get, call_21627410.host, call_21627410.base,
                               call_21627410.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627410, uri, valid, _)

proc call*(call_21627411: Call_PostDeleteServiceSpecificCredential_21627396;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "DeleteServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteServiceSpecificCredential
  ## Deletes the specified service-specific credential.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627412 = newJObject()
  var formData_21627413 = newJObject()
  add(formData_21627413, "UserName", newJString(UserName))
  add(formData_21627413, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_21627412, "Action", newJString(Action))
  add(query_21627412, "Version", newJString(Version))
  result = call_21627411.call(nil, query_21627412, nil, formData_21627413, nil)

var postDeleteServiceSpecificCredential* = Call_PostDeleteServiceSpecificCredential_21627396(
    name: "postDeleteServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceSpecificCredential",
    validator: validate_PostDeleteServiceSpecificCredential_21627397, base: "/",
    makeUrl: url_PostDeleteServiceSpecificCredential_21627398,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServiceSpecificCredential_21627379 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteServiceSpecificCredential_21627381(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteServiceSpecificCredential_21627380(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes the specified service-specific credential.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627382 = query.getOrDefault("UserName")
  valid_21627382 = validateParameter(valid_21627382, JString, required = false,
                                   default = nil)
  if valid_21627382 != nil:
    section.add "UserName", valid_21627382
  var valid_21627383 = query.getOrDefault("Action")
  valid_21627383 = validateParameter(valid_21627383, JString, required = true, default = newJString(
      "DeleteServiceSpecificCredential"))
  if valid_21627383 != nil:
    section.add "Action", valid_21627383
  var valid_21627384 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_21627384 = validateParameter(valid_21627384, JString, required = true,
                                   default = nil)
  if valid_21627384 != nil:
    section.add "ServiceSpecificCredentialId", valid_21627384
  var valid_21627385 = query.getOrDefault("Version")
  valid_21627385 = validateParameter(valid_21627385, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627385 != nil:
    section.add "Version", valid_21627385
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627386 = header.getOrDefault("X-Amz-Date")
  valid_21627386 = validateParameter(valid_21627386, JString, required = false,
                                   default = nil)
  if valid_21627386 != nil:
    section.add "X-Amz-Date", valid_21627386
  var valid_21627387 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627387 = validateParameter(valid_21627387, JString, required = false,
                                   default = nil)
  if valid_21627387 != nil:
    section.add "X-Amz-Security-Token", valid_21627387
  var valid_21627388 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627388 = validateParameter(valid_21627388, JString, required = false,
                                   default = nil)
  if valid_21627388 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627388
  var valid_21627389 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627389 = validateParameter(valid_21627389, JString, required = false,
                                   default = nil)
  if valid_21627389 != nil:
    section.add "X-Amz-Algorithm", valid_21627389
  var valid_21627390 = header.getOrDefault("X-Amz-Signature")
  valid_21627390 = validateParameter(valid_21627390, JString, required = false,
                                   default = nil)
  if valid_21627390 != nil:
    section.add "X-Amz-Signature", valid_21627390
  var valid_21627391 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627391 = validateParameter(valid_21627391, JString, required = false,
                                   default = nil)
  if valid_21627391 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627391
  var valid_21627392 = header.getOrDefault("X-Amz-Credential")
  valid_21627392 = validateParameter(valid_21627392, JString, required = false,
                                   default = nil)
  if valid_21627392 != nil:
    section.add "X-Amz-Credential", valid_21627392
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627393: Call_GetDeleteServiceSpecificCredential_21627379;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified service-specific credential.
  ## 
  let valid = call_21627393.validator(path, query, header, formData, body, _)
  let scheme = call_21627393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627393.makeUrl(scheme.get, call_21627393.host, call_21627393.base,
                               call_21627393.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627393, uri, valid, _)

proc call*(call_21627394: Call_GetDeleteServiceSpecificCredential_21627379;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "DeleteServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteServiceSpecificCredential
  ## Deletes the specified service-specific credential.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_21627395 = newJObject()
  add(query_21627395, "UserName", newJString(UserName))
  add(query_21627395, "Action", newJString(Action))
  add(query_21627395, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_21627395, "Version", newJString(Version))
  result = call_21627394.call(nil, query_21627395, nil, nil, nil)

var getDeleteServiceSpecificCredential* = Call_GetDeleteServiceSpecificCredential_21627379(
    name: "getDeleteServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceSpecificCredential",
    validator: validate_GetDeleteServiceSpecificCredential_21627380, base: "/",
    makeUrl: url_GetDeleteServiceSpecificCredential_21627381,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSigningCertificate_21627431 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteSigningCertificate_21627433(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSigningCertificate_21627432(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627434 = query.getOrDefault("Action")
  valid_21627434 = validateParameter(valid_21627434, JString, required = true, default = newJString(
      "DeleteSigningCertificate"))
  if valid_21627434 != nil:
    section.add "Action", valid_21627434
  var valid_21627435 = query.getOrDefault("Version")
  valid_21627435 = validateParameter(valid_21627435, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627435 != nil:
    section.add "Version", valid_21627435
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627436 = header.getOrDefault("X-Amz-Date")
  valid_21627436 = validateParameter(valid_21627436, JString, required = false,
                                   default = nil)
  if valid_21627436 != nil:
    section.add "X-Amz-Date", valid_21627436
  var valid_21627437 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627437 = validateParameter(valid_21627437, JString, required = false,
                                   default = nil)
  if valid_21627437 != nil:
    section.add "X-Amz-Security-Token", valid_21627437
  var valid_21627438 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627438 = validateParameter(valid_21627438, JString, required = false,
                                   default = nil)
  if valid_21627438 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627438
  var valid_21627439 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627439 = validateParameter(valid_21627439, JString, required = false,
                                   default = nil)
  if valid_21627439 != nil:
    section.add "X-Amz-Algorithm", valid_21627439
  var valid_21627440 = header.getOrDefault("X-Amz-Signature")
  valid_21627440 = validateParameter(valid_21627440, JString, required = false,
                                   default = nil)
  if valid_21627440 != nil:
    section.add "X-Amz-Signature", valid_21627440
  var valid_21627441 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627441 = validateParameter(valid_21627441, JString, required = false,
                                   default = nil)
  if valid_21627441 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627441
  var valid_21627442 = header.getOrDefault("X-Amz-Credential")
  valid_21627442 = validateParameter(valid_21627442, JString, required = false,
                                   default = nil)
  if valid_21627442 != nil:
    section.add "X-Amz-Credential", valid_21627442
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  section = newJObject()
  var valid_21627443 = formData.getOrDefault("UserName")
  valid_21627443 = validateParameter(valid_21627443, JString, required = false,
                                   default = nil)
  if valid_21627443 != nil:
    section.add "UserName", valid_21627443
  assert formData != nil,
        "formData argument is necessary due to required `CertificateId` field"
  var valid_21627444 = formData.getOrDefault("CertificateId")
  valid_21627444 = validateParameter(valid_21627444, JString, required = true,
                                   default = nil)
  if valid_21627444 != nil:
    section.add "CertificateId", valid_21627444
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627445: Call_PostDeleteSigningCertificate_21627431;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  let valid = call_21627445.validator(path, query, header, formData, body, _)
  let scheme = call_21627445.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627445.makeUrl(scheme.get, call_21627445.host, call_21627445.base,
                               call_21627445.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627445, uri, valid, _)

proc call*(call_21627446: Call_PostDeleteSigningCertificate_21627431;
          CertificateId: string; UserName: string = "";
          Action: string = "DeleteSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSigningCertificate
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627447 = newJObject()
  var formData_21627448 = newJObject()
  add(formData_21627448, "UserName", newJString(UserName))
  add(formData_21627448, "CertificateId", newJString(CertificateId))
  add(query_21627447, "Action", newJString(Action))
  add(query_21627447, "Version", newJString(Version))
  result = call_21627446.call(nil, query_21627447, nil, formData_21627448, nil)

var postDeleteSigningCertificate* = Call_PostDeleteSigningCertificate_21627431(
    name: "postDeleteSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSigningCertificate",
    validator: validate_PostDeleteSigningCertificate_21627432, base: "/",
    makeUrl: url_PostDeleteSigningCertificate_21627433,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSigningCertificate_21627414 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteSigningCertificate_21627416(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSigningCertificate_21627415(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `CertificateId` field"
  var valid_21627417 = query.getOrDefault("CertificateId")
  valid_21627417 = validateParameter(valid_21627417, JString, required = true,
                                   default = nil)
  if valid_21627417 != nil:
    section.add "CertificateId", valid_21627417
  var valid_21627418 = query.getOrDefault("UserName")
  valid_21627418 = validateParameter(valid_21627418, JString, required = false,
                                   default = nil)
  if valid_21627418 != nil:
    section.add "UserName", valid_21627418
  var valid_21627419 = query.getOrDefault("Action")
  valid_21627419 = validateParameter(valid_21627419, JString, required = true, default = newJString(
      "DeleteSigningCertificate"))
  if valid_21627419 != nil:
    section.add "Action", valid_21627419
  var valid_21627420 = query.getOrDefault("Version")
  valid_21627420 = validateParameter(valid_21627420, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627420 != nil:
    section.add "Version", valid_21627420
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627421 = header.getOrDefault("X-Amz-Date")
  valid_21627421 = validateParameter(valid_21627421, JString, required = false,
                                   default = nil)
  if valid_21627421 != nil:
    section.add "X-Amz-Date", valid_21627421
  var valid_21627422 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627422 = validateParameter(valid_21627422, JString, required = false,
                                   default = nil)
  if valid_21627422 != nil:
    section.add "X-Amz-Security-Token", valid_21627422
  var valid_21627423 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627423 = validateParameter(valid_21627423, JString, required = false,
                                   default = nil)
  if valid_21627423 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627423
  var valid_21627424 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627424 = validateParameter(valid_21627424, JString, required = false,
                                   default = nil)
  if valid_21627424 != nil:
    section.add "X-Amz-Algorithm", valid_21627424
  var valid_21627425 = header.getOrDefault("X-Amz-Signature")
  valid_21627425 = validateParameter(valid_21627425, JString, required = false,
                                   default = nil)
  if valid_21627425 != nil:
    section.add "X-Amz-Signature", valid_21627425
  var valid_21627426 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627426 = validateParameter(valid_21627426, JString, required = false,
                                   default = nil)
  if valid_21627426 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627426
  var valid_21627427 = header.getOrDefault("X-Amz-Credential")
  valid_21627427 = validateParameter(valid_21627427, JString, required = false,
                                   default = nil)
  if valid_21627427 != nil:
    section.add "X-Amz-Credential", valid_21627427
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627428: Call_GetDeleteSigningCertificate_21627414;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  let valid = call_21627428.validator(path, query, header, formData, body, _)
  let scheme = call_21627428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627428.makeUrl(scheme.get, call_21627428.host, call_21627428.base,
                               call_21627428.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627428, uri, valid, _)

proc call*(call_21627429: Call_GetDeleteSigningCertificate_21627414;
          CertificateId: string; UserName: string = "";
          Action: string = "DeleteSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteSigningCertificate
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627430 = newJObject()
  add(query_21627430, "CertificateId", newJString(CertificateId))
  add(query_21627430, "UserName", newJString(UserName))
  add(query_21627430, "Action", newJString(Action))
  add(query_21627430, "Version", newJString(Version))
  result = call_21627429.call(nil, query_21627430, nil, nil, nil)

var getDeleteSigningCertificate* = Call_GetDeleteSigningCertificate_21627414(
    name: "getDeleteSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSigningCertificate",
    validator: validate_GetDeleteSigningCertificate_21627415, base: "/",
    makeUrl: url_GetDeleteSigningCertificate_21627416,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUser_21627465 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteUser_21627467(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteUser_21627466(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627468 = query.getOrDefault("Action")
  valid_21627468 = validateParameter(valid_21627468, JString, required = true,
                                   default = newJString("DeleteUser"))
  if valid_21627468 != nil:
    section.add "Action", valid_21627468
  var valid_21627469 = query.getOrDefault("Version")
  valid_21627469 = validateParameter(valid_21627469, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627469 != nil:
    section.add "Version", valid_21627469
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627470 = header.getOrDefault("X-Amz-Date")
  valid_21627470 = validateParameter(valid_21627470, JString, required = false,
                                   default = nil)
  if valid_21627470 != nil:
    section.add "X-Amz-Date", valid_21627470
  var valid_21627471 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627471 = validateParameter(valid_21627471, JString, required = false,
                                   default = nil)
  if valid_21627471 != nil:
    section.add "X-Amz-Security-Token", valid_21627471
  var valid_21627472 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627472 = validateParameter(valid_21627472, JString, required = false,
                                   default = nil)
  if valid_21627472 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627472
  var valid_21627473 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627473 = validateParameter(valid_21627473, JString, required = false,
                                   default = nil)
  if valid_21627473 != nil:
    section.add "X-Amz-Algorithm", valid_21627473
  var valid_21627474 = header.getOrDefault("X-Amz-Signature")
  valid_21627474 = validateParameter(valid_21627474, JString, required = false,
                                   default = nil)
  if valid_21627474 != nil:
    section.add "X-Amz-Signature", valid_21627474
  var valid_21627475 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627475 = validateParameter(valid_21627475, JString, required = false,
                                   default = nil)
  if valid_21627475 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627475
  var valid_21627476 = header.getOrDefault("X-Amz-Credential")
  valid_21627476 = validateParameter(valid_21627476, JString, required = false,
                                   default = nil)
  if valid_21627476 != nil:
    section.add "X-Amz-Credential", valid_21627476
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21627477 = formData.getOrDefault("UserName")
  valid_21627477 = validateParameter(valid_21627477, JString, required = true,
                                   default = nil)
  if valid_21627477 != nil:
    section.add "UserName", valid_21627477
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627478: Call_PostDeleteUser_21627465; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  let valid = call_21627478.validator(path, query, header, formData, body, _)
  let scheme = call_21627478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627478.makeUrl(scheme.get, call_21627478.host, call_21627478.base,
                               call_21627478.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627478, uri, valid, _)

proc call*(call_21627479: Call_PostDeleteUser_21627465; UserName: string;
          Action: string = "DeleteUser"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteUser
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627480 = newJObject()
  var formData_21627481 = newJObject()
  add(formData_21627481, "UserName", newJString(UserName))
  add(query_21627480, "Action", newJString(Action))
  add(query_21627480, "Version", newJString(Version))
  result = call_21627479.call(nil, query_21627480, nil, formData_21627481, nil)

var postDeleteUser* = Call_PostDeleteUser_21627465(name: "postDeleteUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteUser", validator: validate_PostDeleteUser_21627466,
    base: "/", makeUrl: url_PostDeleteUser_21627467,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUser_21627449 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteUser_21627451(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteUser_21627450(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_21627452 = query.getOrDefault("UserName")
  valid_21627452 = validateParameter(valid_21627452, JString, required = true,
                                   default = nil)
  if valid_21627452 != nil:
    section.add "UserName", valid_21627452
  var valid_21627453 = query.getOrDefault("Action")
  valid_21627453 = validateParameter(valid_21627453, JString, required = true,
                                   default = newJString("DeleteUser"))
  if valid_21627453 != nil:
    section.add "Action", valid_21627453
  var valid_21627454 = query.getOrDefault("Version")
  valid_21627454 = validateParameter(valid_21627454, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627454 != nil:
    section.add "Version", valid_21627454
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627455 = header.getOrDefault("X-Amz-Date")
  valid_21627455 = validateParameter(valid_21627455, JString, required = false,
                                   default = nil)
  if valid_21627455 != nil:
    section.add "X-Amz-Date", valid_21627455
  var valid_21627456 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627456 = validateParameter(valid_21627456, JString, required = false,
                                   default = nil)
  if valid_21627456 != nil:
    section.add "X-Amz-Security-Token", valid_21627456
  var valid_21627457 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627457 = validateParameter(valid_21627457, JString, required = false,
                                   default = nil)
  if valid_21627457 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627457
  var valid_21627458 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627458 = validateParameter(valid_21627458, JString, required = false,
                                   default = nil)
  if valid_21627458 != nil:
    section.add "X-Amz-Algorithm", valid_21627458
  var valid_21627459 = header.getOrDefault("X-Amz-Signature")
  valid_21627459 = validateParameter(valid_21627459, JString, required = false,
                                   default = nil)
  if valid_21627459 != nil:
    section.add "X-Amz-Signature", valid_21627459
  var valid_21627460 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627460 = validateParameter(valid_21627460, JString, required = false,
                                   default = nil)
  if valid_21627460 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627460
  var valid_21627461 = header.getOrDefault("X-Amz-Credential")
  valid_21627461 = validateParameter(valid_21627461, JString, required = false,
                                   default = nil)
  if valid_21627461 != nil:
    section.add "X-Amz-Credential", valid_21627461
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627462: Call_GetDeleteUser_21627449; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  let valid = call_21627462.validator(path, query, header, formData, body, _)
  let scheme = call_21627462.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627462.makeUrl(scheme.get, call_21627462.host, call_21627462.base,
                               call_21627462.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627462, uri, valid, _)

proc call*(call_21627463: Call_GetDeleteUser_21627449; UserName: string;
          Action: string = "DeleteUser"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteUser
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627464 = newJObject()
  add(query_21627464, "UserName", newJString(UserName))
  add(query_21627464, "Action", newJString(Action))
  add(query_21627464, "Version", newJString(Version))
  result = call_21627463.call(nil, query_21627464, nil, nil, nil)

var getDeleteUser* = Call_GetDeleteUser_21627449(name: "getDeleteUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteUser", validator: validate_GetDeleteUser_21627450,
    base: "/", makeUrl: url_GetDeleteUser_21627451,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUserPermissionsBoundary_21627498 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteUserPermissionsBoundary_21627500(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteUserPermissionsBoundary_21627499(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627501 = query.getOrDefault("Action")
  valid_21627501 = validateParameter(valid_21627501, JString, required = true, default = newJString(
      "DeleteUserPermissionsBoundary"))
  if valid_21627501 != nil:
    section.add "Action", valid_21627501
  var valid_21627502 = query.getOrDefault("Version")
  valid_21627502 = validateParameter(valid_21627502, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627502 != nil:
    section.add "Version", valid_21627502
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627503 = header.getOrDefault("X-Amz-Date")
  valid_21627503 = validateParameter(valid_21627503, JString, required = false,
                                   default = nil)
  if valid_21627503 != nil:
    section.add "X-Amz-Date", valid_21627503
  var valid_21627504 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627504 = validateParameter(valid_21627504, JString, required = false,
                                   default = nil)
  if valid_21627504 != nil:
    section.add "X-Amz-Security-Token", valid_21627504
  var valid_21627505 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627505 = validateParameter(valid_21627505, JString, required = false,
                                   default = nil)
  if valid_21627505 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627505
  var valid_21627506 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627506 = validateParameter(valid_21627506, JString, required = false,
                                   default = nil)
  if valid_21627506 != nil:
    section.add "X-Amz-Algorithm", valid_21627506
  var valid_21627507 = header.getOrDefault("X-Amz-Signature")
  valid_21627507 = validateParameter(valid_21627507, JString, required = false,
                                   default = nil)
  if valid_21627507 != nil:
    section.add "X-Amz-Signature", valid_21627507
  var valid_21627508 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627508 = validateParameter(valid_21627508, JString, required = false,
                                   default = nil)
  if valid_21627508 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627508
  var valid_21627509 = header.getOrDefault("X-Amz-Credential")
  valid_21627509 = validateParameter(valid_21627509, JString, required = false,
                                   default = nil)
  if valid_21627509 != nil:
    section.add "X-Amz-Credential", valid_21627509
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21627510 = formData.getOrDefault("UserName")
  valid_21627510 = validateParameter(valid_21627510, JString, required = true,
                                   default = nil)
  if valid_21627510 != nil:
    section.add "UserName", valid_21627510
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627511: Call_PostDeleteUserPermissionsBoundary_21627498;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_21627511.validator(path, query, header, formData, body, _)
  let scheme = call_21627511.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627511.makeUrl(scheme.get, call_21627511.host, call_21627511.base,
                               call_21627511.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627511, uri, valid, _)

proc call*(call_21627512: Call_PostDeleteUserPermissionsBoundary_21627498;
          UserName: string; Action: string = "DeleteUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteUserPermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627513 = newJObject()
  var formData_21627514 = newJObject()
  add(formData_21627514, "UserName", newJString(UserName))
  add(query_21627513, "Action", newJString(Action))
  add(query_21627513, "Version", newJString(Version))
  result = call_21627512.call(nil, query_21627513, nil, formData_21627514, nil)

var postDeleteUserPermissionsBoundary* = Call_PostDeleteUserPermissionsBoundary_21627498(
    name: "postDeleteUserPermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPermissionsBoundary",
    validator: validate_PostDeleteUserPermissionsBoundary_21627499, base: "/",
    makeUrl: url_PostDeleteUserPermissionsBoundary_21627500,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUserPermissionsBoundary_21627482 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteUserPermissionsBoundary_21627484(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteUserPermissionsBoundary_21627483(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_21627485 = query.getOrDefault("UserName")
  valid_21627485 = validateParameter(valid_21627485, JString, required = true,
                                   default = nil)
  if valid_21627485 != nil:
    section.add "UserName", valid_21627485
  var valid_21627486 = query.getOrDefault("Action")
  valid_21627486 = validateParameter(valid_21627486, JString, required = true, default = newJString(
      "DeleteUserPermissionsBoundary"))
  if valid_21627486 != nil:
    section.add "Action", valid_21627486
  var valid_21627487 = query.getOrDefault("Version")
  valid_21627487 = validateParameter(valid_21627487, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627487 != nil:
    section.add "Version", valid_21627487
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627488 = header.getOrDefault("X-Amz-Date")
  valid_21627488 = validateParameter(valid_21627488, JString, required = false,
                                   default = nil)
  if valid_21627488 != nil:
    section.add "X-Amz-Date", valid_21627488
  var valid_21627489 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627489 = validateParameter(valid_21627489, JString, required = false,
                                   default = nil)
  if valid_21627489 != nil:
    section.add "X-Amz-Security-Token", valid_21627489
  var valid_21627490 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627490 = validateParameter(valid_21627490, JString, required = false,
                                   default = nil)
  if valid_21627490 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627490
  var valid_21627491 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627491 = validateParameter(valid_21627491, JString, required = false,
                                   default = nil)
  if valid_21627491 != nil:
    section.add "X-Amz-Algorithm", valid_21627491
  var valid_21627492 = header.getOrDefault("X-Amz-Signature")
  valid_21627492 = validateParameter(valid_21627492, JString, required = false,
                                   default = nil)
  if valid_21627492 != nil:
    section.add "X-Amz-Signature", valid_21627492
  var valid_21627493 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627493 = validateParameter(valid_21627493, JString, required = false,
                                   default = nil)
  if valid_21627493 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627493
  var valid_21627494 = header.getOrDefault("X-Amz-Credential")
  valid_21627494 = validateParameter(valid_21627494, JString, required = false,
                                   default = nil)
  if valid_21627494 != nil:
    section.add "X-Amz-Credential", valid_21627494
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627495: Call_GetDeleteUserPermissionsBoundary_21627482;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_21627495.validator(path, query, header, formData, body, _)
  let scheme = call_21627495.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627495.makeUrl(scheme.get, call_21627495.host, call_21627495.base,
                               call_21627495.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627495, uri, valid, _)

proc call*(call_21627496: Call_GetDeleteUserPermissionsBoundary_21627482;
          UserName: string; Action: string = "DeleteUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteUserPermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627497 = newJObject()
  add(query_21627497, "UserName", newJString(UserName))
  add(query_21627497, "Action", newJString(Action))
  add(query_21627497, "Version", newJString(Version))
  result = call_21627496.call(nil, query_21627497, nil, nil, nil)

var getDeleteUserPermissionsBoundary* = Call_GetDeleteUserPermissionsBoundary_21627482(
    name: "getDeleteUserPermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPermissionsBoundary",
    validator: validate_GetDeleteUserPermissionsBoundary_21627483, base: "/",
    makeUrl: url_GetDeleteUserPermissionsBoundary_21627484,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUserPolicy_21627532 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteUserPolicy_21627534(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteUserPolicy_21627533(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627535 = query.getOrDefault("Action")
  valid_21627535 = validateParameter(valid_21627535, JString, required = true,
                                   default = newJString("DeleteUserPolicy"))
  if valid_21627535 != nil:
    section.add "Action", valid_21627535
  var valid_21627536 = query.getOrDefault("Version")
  valid_21627536 = validateParameter(valid_21627536, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627536 != nil:
    section.add "Version", valid_21627536
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627537 = header.getOrDefault("X-Amz-Date")
  valid_21627537 = validateParameter(valid_21627537, JString, required = false,
                                   default = nil)
  if valid_21627537 != nil:
    section.add "X-Amz-Date", valid_21627537
  var valid_21627538 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627538 = validateParameter(valid_21627538, JString, required = false,
                                   default = nil)
  if valid_21627538 != nil:
    section.add "X-Amz-Security-Token", valid_21627538
  var valid_21627539 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627539 = validateParameter(valid_21627539, JString, required = false,
                                   default = nil)
  if valid_21627539 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627539
  var valid_21627540 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627540 = validateParameter(valid_21627540, JString, required = false,
                                   default = nil)
  if valid_21627540 != nil:
    section.add "X-Amz-Algorithm", valid_21627540
  var valid_21627541 = header.getOrDefault("X-Amz-Signature")
  valid_21627541 = validateParameter(valid_21627541, JString, required = false,
                                   default = nil)
  if valid_21627541 != nil:
    section.add "X-Amz-Signature", valid_21627541
  var valid_21627542 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627542 = validateParameter(valid_21627542, JString, required = false,
                                   default = nil)
  if valid_21627542 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627542
  var valid_21627543 = header.getOrDefault("X-Amz-Credential")
  valid_21627543 = validateParameter(valid_21627543, JString, required = false,
                                   default = nil)
  if valid_21627543 != nil:
    section.add "X-Amz-Credential", valid_21627543
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_21627544 = formData.getOrDefault("PolicyName")
  valid_21627544 = validateParameter(valid_21627544, JString, required = true,
                                   default = nil)
  if valid_21627544 != nil:
    section.add "PolicyName", valid_21627544
  var valid_21627545 = formData.getOrDefault("UserName")
  valid_21627545 = validateParameter(valid_21627545, JString, required = true,
                                   default = nil)
  if valid_21627545 != nil:
    section.add "UserName", valid_21627545
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627546: Call_PostDeleteUserPolicy_21627532; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627546.validator(path, query, header, formData, body, _)
  let scheme = call_21627546.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627546.makeUrl(scheme.get, call_21627546.host, call_21627546.base,
                               call_21627546.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627546, uri, valid, _)

proc call*(call_21627547: Call_PostDeleteUserPolicy_21627532; PolicyName: string;
          UserName: string; Action: string = "DeleteUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteUserPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627548 = newJObject()
  var formData_21627549 = newJObject()
  add(formData_21627549, "PolicyName", newJString(PolicyName))
  add(formData_21627549, "UserName", newJString(UserName))
  add(query_21627548, "Action", newJString(Action))
  add(query_21627548, "Version", newJString(Version))
  result = call_21627547.call(nil, query_21627548, nil, formData_21627549, nil)

var postDeleteUserPolicy* = Call_PostDeleteUserPolicy_21627532(
    name: "postDeleteUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPolicy",
    validator: validate_PostDeleteUserPolicy_21627533, base: "/",
    makeUrl: url_PostDeleteUserPolicy_21627534,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUserPolicy_21627515 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteUserPolicy_21627517(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteUserPolicy_21627516(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_21627518 = query.getOrDefault("UserName")
  valid_21627518 = validateParameter(valid_21627518, JString, required = true,
                                   default = nil)
  if valid_21627518 != nil:
    section.add "UserName", valid_21627518
  var valid_21627519 = query.getOrDefault("Action")
  valid_21627519 = validateParameter(valid_21627519, JString, required = true,
                                   default = newJString("DeleteUserPolicy"))
  if valid_21627519 != nil:
    section.add "Action", valid_21627519
  var valid_21627520 = query.getOrDefault("Version")
  valid_21627520 = validateParameter(valid_21627520, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627520 != nil:
    section.add "Version", valid_21627520
  var valid_21627521 = query.getOrDefault("PolicyName")
  valid_21627521 = validateParameter(valid_21627521, JString, required = true,
                                   default = nil)
  if valid_21627521 != nil:
    section.add "PolicyName", valid_21627521
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627522 = header.getOrDefault("X-Amz-Date")
  valid_21627522 = validateParameter(valid_21627522, JString, required = false,
                                   default = nil)
  if valid_21627522 != nil:
    section.add "X-Amz-Date", valid_21627522
  var valid_21627523 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627523 = validateParameter(valid_21627523, JString, required = false,
                                   default = nil)
  if valid_21627523 != nil:
    section.add "X-Amz-Security-Token", valid_21627523
  var valid_21627524 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627524 = validateParameter(valid_21627524, JString, required = false,
                                   default = nil)
  if valid_21627524 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627524
  var valid_21627525 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627525 = validateParameter(valid_21627525, JString, required = false,
                                   default = nil)
  if valid_21627525 != nil:
    section.add "X-Amz-Algorithm", valid_21627525
  var valid_21627526 = header.getOrDefault("X-Amz-Signature")
  valid_21627526 = validateParameter(valid_21627526, JString, required = false,
                                   default = nil)
  if valid_21627526 != nil:
    section.add "X-Amz-Signature", valid_21627526
  var valid_21627527 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627527 = validateParameter(valid_21627527, JString, required = false,
                                   default = nil)
  if valid_21627527 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627527
  var valid_21627528 = header.getOrDefault("X-Amz-Credential")
  valid_21627528 = validateParameter(valid_21627528, JString, required = false,
                                   default = nil)
  if valid_21627528 != nil:
    section.add "X-Amz-Credential", valid_21627528
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627529: Call_GetDeleteUserPolicy_21627515; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627529.validator(path, query, header, formData, body, _)
  let scheme = call_21627529.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627529.makeUrl(scheme.get, call_21627529.host, call_21627529.base,
                               call_21627529.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627529, uri, valid, _)

proc call*(call_21627530: Call_GetDeleteUserPolicy_21627515; UserName: string;
          PolicyName: string; Action: string = "DeleteUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteUserPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_21627531 = newJObject()
  add(query_21627531, "UserName", newJString(UserName))
  add(query_21627531, "Action", newJString(Action))
  add(query_21627531, "Version", newJString(Version))
  add(query_21627531, "PolicyName", newJString(PolicyName))
  result = call_21627530.call(nil, query_21627531, nil, nil, nil)

var getDeleteUserPolicy* = Call_GetDeleteUserPolicy_21627515(
    name: "getDeleteUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPolicy",
    validator: validate_GetDeleteUserPolicy_21627516, base: "/",
    makeUrl: url_GetDeleteUserPolicy_21627517,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteVirtualMFADevice_21627566 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteVirtualMFADevice_21627568(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteVirtualMFADevice_21627567(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627569 = query.getOrDefault("Action")
  valid_21627569 = validateParameter(valid_21627569, JString, required = true, default = newJString(
      "DeleteVirtualMFADevice"))
  if valid_21627569 != nil:
    section.add "Action", valid_21627569
  var valid_21627570 = query.getOrDefault("Version")
  valid_21627570 = validateParameter(valid_21627570, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627570 != nil:
    section.add "Version", valid_21627570
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627571 = header.getOrDefault("X-Amz-Date")
  valid_21627571 = validateParameter(valid_21627571, JString, required = false,
                                   default = nil)
  if valid_21627571 != nil:
    section.add "X-Amz-Date", valid_21627571
  var valid_21627572 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627572 = validateParameter(valid_21627572, JString, required = false,
                                   default = nil)
  if valid_21627572 != nil:
    section.add "X-Amz-Security-Token", valid_21627572
  var valid_21627573 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627573 = validateParameter(valid_21627573, JString, required = false,
                                   default = nil)
  if valid_21627573 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627573
  var valid_21627574 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627574 = validateParameter(valid_21627574, JString, required = false,
                                   default = nil)
  if valid_21627574 != nil:
    section.add "X-Amz-Algorithm", valid_21627574
  var valid_21627575 = header.getOrDefault("X-Amz-Signature")
  valid_21627575 = validateParameter(valid_21627575, JString, required = false,
                                   default = nil)
  if valid_21627575 != nil:
    section.add "X-Amz-Signature", valid_21627575
  var valid_21627576 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627576 = validateParameter(valid_21627576, JString, required = false,
                                   default = nil)
  if valid_21627576 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627576
  var valid_21627577 = header.getOrDefault("X-Amz-Credential")
  valid_21627577 = validateParameter(valid_21627577, JString, required = false,
                                   default = nil)
  if valid_21627577 != nil:
    section.add "X-Amz-Credential", valid_21627577
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_21627578 = formData.getOrDefault("SerialNumber")
  valid_21627578 = validateParameter(valid_21627578, JString, required = true,
                                   default = nil)
  if valid_21627578 != nil:
    section.add "SerialNumber", valid_21627578
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627579: Call_PostDeleteVirtualMFADevice_21627566;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  let valid = call_21627579.validator(path, query, header, formData, body, _)
  let scheme = call_21627579.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627579.makeUrl(scheme.get, call_21627579.host, call_21627579.base,
                               call_21627579.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627579, uri, valid, _)

proc call*(call_21627580: Call_PostDeleteVirtualMFADevice_21627566;
          SerialNumber: string; Action: string = "DeleteVirtualMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteVirtualMFADevice
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627581 = newJObject()
  var formData_21627582 = newJObject()
  add(formData_21627582, "SerialNumber", newJString(SerialNumber))
  add(query_21627581, "Action", newJString(Action))
  add(query_21627581, "Version", newJString(Version))
  result = call_21627580.call(nil, query_21627581, nil, formData_21627582, nil)

var postDeleteVirtualMFADevice* = Call_PostDeleteVirtualMFADevice_21627566(
    name: "postDeleteVirtualMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteVirtualMFADevice",
    validator: validate_PostDeleteVirtualMFADevice_21627567, base: "/",
    makeUrl: url_PostDeleteVirtualMFADevice_21627568,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteVirtualMFADevice_21627550 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteVirtualMFADevice_21627552(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteVirtualMFADevice_21627551(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_21627553 = query.getOrDefault("SerialNumber")
  valid_21627553 = validateParameter(valid_21627553, JString, required = true,
                                   default = nil)
  if valid_21627553 != nil:
    section.add "SerialNumber", valid_21627553
  var valid_21627554 = query.getOrDefault("Action")
  valid_21627554 = validateParameter(valid_21627554, JString, required = true, default = newJString(
      "DeleteVirtualMFADevice"))
  if valid_21627554 != nil:
    section.add "Action", valid_21627554
  var valid_21627555 = query.getOrDefault("Version")
  valid_21627555 = validateParameter(valid_21627555, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627555 != nil:
    section.add "Version", valid_21627555
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627556 = header.getOrDefault("X-Amz-Date")
  valid_21627556 = validateParameter(valid_21627556, JString, required = false,
                                   default = nil)
  if valid_21627556 != nil:
    section.add "X-Amz-Date", valid_21627556
  var valid_21627557 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627557 = validateParameter(valid_21627557, JString, required = false,
                                   default = nil)
  if valid_21627557 != nil:
    section.add "X-Amz-Security-Token", valid_21627557
  var valid_21627558 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627558 = validateParameter(valid_21627558, JString, required = false,
                                   default = nil)
  if valid_21627558 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627558
  var valid_21627559 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627559 = validateParameter(valid_21627559, JString, required = false,
                                   default = nil)
  if valid_21627559 != nil:
    section.add "X-Amz-Algorithm", valid_21627559
  var valid_21627560 = header.getOrDefault("X-Amz-Signature")
  valid_21627560 = validateParameter(valid_21627560, JString, required = false,
                                   default = nil)
  if valid_21627560 != nil:
    section.add "X-Amz-Signature", valid_21627560
  var valid_21627561 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627561 = validateParameter(valid_21627561, JString, required = false,
                                   default = nil)
  if valid_21627561 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627561
  var valid_21627562 = header.getOrDefault("X-Amz-Credential")
  valid_21627562 = validateParameter(valid_21627562, JString, required = false,
                                   default = nil)
  if valid_21627562 != nil:
    section.add "X-Amz-Credential", valid_21627562
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627563: Call_GetDeleteVirtualMFADevice_21627550;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  let valid = call_21627563.validator(path, query, header, formData, body, _)
  let scheme = call_21627563.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627563.makeUrl(scheme.get, call_21627563.host, call_21627563.base,
                               call_21627563.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627563, uri, valid, _)

proc call*(call_21627564: Call_GetDeleteVirtualMFADevice_21627550;
          SerialNumber: string; Action: string = "DeleteVirtualMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteVirtualMFADevice
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627565 = newJObject()
  add(query_21627565, "SerialNumber", newJString(SerialNumber))
  add(query_21627565, "Action", newJString(Action))
  add(query_21627565, "Version", newJString(Version))
  result = call_21627564.call(nil, query_21627565, nil, nil, nil)

var getDeleteVirtualMFADevice* = Call_GetDeleteVirtualMFADevice_21627550(
    name: "getDeleteVirtualMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteVirtualMFADevice",
    validator: validate_GetDeleteVirtualMFADevice_21627551, base: "/",
    makeUrl: url_GetDeleteVirtualMFADevice_21627552,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachGroupPolicy_21627600 = ref object of OpenApiRestCall_21625435
proc url_PostDetachGroupPolicy_21627602(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachGroupPolicy_21627601(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627603 = query.getOrDefault("Action")
  valid_21627603 = validateParameter(valid_21627603, JString, required = true,
                                   default = newJString("DetachGroupPolicy"))
  if valid_21627603 != nil:
    section.add "Action", valid_21627603
  var valid_21627604 = query.getOrDefault("Version")
  valid_21627604 = validateParameter(valid_21627604, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627604 != nil:
    section.add "Version", valid_21627604
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627605 = header.getOrDefault("X-Amz-Date")
  valid_21627605 = validateParameter(valid_21627605, JString, required = false,
                                   default = nil)
  if valid_21627605 != nil:
    section.add "X-Amz-Date", valid_21627605
  var valid_21627606 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627606 = validateParameter(valid_21627606, JString, required = false,
                                   default = nil)
  if valid_21627606 != nil:
    section.add "X-Amz-Security-Token", valid_21627606
  var valid_21627607 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627607 = validateParameter(valid_21627607, JString, required = false,
                                   default = nil)
  if valid_21627607 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627607
  var valid_21627608 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627608 = validateParameter(valid_21627608, JString, required = false,
                                   default = nil)
  if valid_21627608 != nil:
    section.add "X-Amz-Algorithm", valid_21627608
  var valid_21627609 = header.getOrDefault("X-Amz-Signature")
  valid_21627609 = validateParameter(valid_21627609, JString, required = false,
                                   default = nil)
  if valid_21627609 != nil:
    section.add "X-Amz-Signature", valid_21627609
  var valid_21627610 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627610 = validateParameter(valid_21627610, JString, required = false,
                                   default = nil)
  if valid_21627610 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627610
  var valid_21627611 = header.getOrDefault("X-Amz-Credential")
  valid_21627611 = validateParameter(valid_21627611, JString, required = false,
                                   default = nil)
  if valid_21627611 != nil:
    section.add "X-Amz-Credential", valid_21627611
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_21627612 = formData.getOrDefault("PolicyArn")
  valid_21627612 = validateParameter(valid_21627612, JString, required = true,
                                   default = nil)
  if valid_21627612 != nil:
    section.add "PolicyArn", valid_21627612
  var valid_21627613 = formData.getOrDefault("GroupName")
  valid_21627613 = validateParameter(valid_21627613, JString, required = true,
                                   default = nil)
  if valid_21627613 != nil:
    section.add "GroupName", valid_21627613
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627614: Call_PostDetachGroupPolicy_21627600;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627614.validator(path, query, header, formData, body, _)
  let scheme = call_21627614.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627614.makeUrl(scheme.get, call_21627614.host, call_21627614.base,
                               call_21627614.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627614, uri, valid, _)

proc call*(call_21627615: Call_PostDetachGroupPolicy_21627600; PolicyArn: string;
          GroupName: string; Action: string = "DetachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachGroupPolicy
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627616 = newJObject()
  var formData_21627617 = newJObject()
  add(formData_21627617, "PolicyArn", newJString(PolicyArn))
  add(formData_21627617, "GroupName", newJString(GroupName))
  add(query_21627616, "Action", newJString(Action))
  add(query_21627616, "Version", newJString(Version))
  result = call_21627615.call(nil, query_21627616, nil, formData_21627617, nil)

var postDetachGroupPolicy* = Call_PostDetachGroupPolicy_21627600(
    name: "postDetachGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachGroupPolicy",
    validator: validate_PostDetachGroupPolicy_21627601, base: "/",
    makeUrl: url_PostDetachGroupPolicy_21627602,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachGroupPolicy_21627583 = ref object of OpenApiRestCall_21625435
proc url_GetDetachGroupPolicy_21627585(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachGroupPolicy_21627584(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_21627586 = query.getOrDefault("PolicyArn")
  valid_21627586 = validateParameter(valid_21627586, JString, required = true,
                                   default = nil)
  if valid_21627586 != nil:
    section.add "PolicyArn", valid_21627586
  var valid_21627587 = query.getOrDefault("Action")
  valid_21627587 = validateParameter(valid_21627587, JString, required = true,
                                   default = newJString("DetachGroupPolicy"))
  if valid_21627587 != nil:
    section.add "Action", valid_21627587
  var valid_21627588 = query.getOrDefault("GroupName")
  valid_21627588 = validateParameter(valid_21627588, JString, required = true,
                                   default = nil)
  if valid_21627588 != nil:
    section.add "GroupName", valid_21627588
  var valid_21627589 = query.getOrDefault("Version")
  valid_21627589 = validateParameter(valid_21627589, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627589 != nil:
    section.add "Version", valid_21627589
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627590 = header.getOrDefault("X-Amz-Date")
  valid_21627590 = validateParameter(valid_21627590, JString, required = false,
                                   default = nil)
  if valid_21627590 != nil:
    section.add "X-Amz-Date", valid_21627590
  var valid_21627591 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627591 = validateParameter(valid_21627591, JString, required = false,
                                   default = nil)
  if valid_21627591 != nil:
    section.add "X-Amz-Security-Token", valid_21627591
  var valid_21627592 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627592 = validateParameter(valid_21627592, JString, required = false,
                                   default = nil)
  if valid_21627592 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627592
  var valid_21627593 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627593 = validateParameter(valid_21627593, JString, required = false,
                                   default = nil)
  if valid_21627593 != nil:
    section.add "X-Amz-Algorithm", valid_21627593
  var valid_21627594 = header.getOrDefault("X-Amz-Signature")
  valid_21627594 = validateParameter(valid_21627594, JString, required = false,
                                   default = nil)
  if valid_21627594 != nil:
    section.add "X-Amz-Signature", valid_21627594
  var valid_21627595 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627595 = validateParameter(valid_21627595, JString, required = false,
                                   default = nil)
  if valid_21627595 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627595
  var valid_21627596 = header.getOrDefault("X-Amz-Credential")
  valid_21627596 = validateParameter(valid_21627596, JString, required = false,
                                   default = nil)
  if valid_21627596 != nil:
    section.add "X-Amz-Credential", valid_21627596
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627597: Call_GetDetachGroupPolicy_21627583; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627597.validator(path, query, header, formData, body, _)
  let scheme = call_21627597.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627597.makeUrl(scheme.get, call_21627597.host, call_21627597.base,
                               call_21627597.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627597, uri, valid, _)

proc call*(call_21627598: Call_GetDetachGroupPolicy_21627583; PolicyArn: string;
          GroupName: string; Action: string = "DetachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachGroupPolicy
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21627599 = newJObject()
  add(query_21627599, "PolicyArn", newJString(PolicyArn))
  add(query_21627599, "Action", newJString(Action))
  add(query_21627599, "GroupName", newJString(GroupName))
  add(query_21627599, "Version", newJString(Version))
  result = call_21627598.call(nil, query_21627599, nil, nil, nil)

var getDetachGroupPolicy* = Call_GetDetachGroupPolicy_21627583(
    name: "getDetachGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachGroupPolicy",
    validator: validate_GetDetachGroupPolicy_21627584, base: "/",
    makeUrl: url_GetDetachGroupPolicy_21627585,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachRolePolicy_21627635 = ref object of OpenApiRestCall_21625435
proc url_PostDetachRolePolicy_21627637(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachRolePolicy_21627636(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627638 = query.getOrDefault("Action")
  valid_21627638 = validateParameter(valid_21627638, JString, required = true,
                                   default = newJString("DetachRolePolicy"))
  if valid_21627638 != nil:
    section.add "Action", valid_21627638
  var valid_21627639 = query.getOrDefault("Version")
  valid_21627639 = validateParameter(valid_21627639, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627639 != nil:
    section.add "Version", valid_21627639
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627640 = header.getOrDefault("X-Amz-Date")
  valid_21627640 = validateParameter(valid_21627640, JString, required = false,
                                   default = nil)
  if valid_21627640 != nil:
    section.add "X-Amz-Date", valid_21627640
  var valid_21627641 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627641 = validateParameter(valid_21627641, JString, required = false,
                                   default = nil)
  if valid_21627641 != nil:
    section.add "X-Amz-Security-Token", valid_21627641
  var valid_21627642 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627642 = validateParameter(valid_21627642, JString, required = false,
                                   default = nil)
  if valid_21627642 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627642
  var valid_21627643 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627643 = validateParameter(valid_21627643, JString, required = false,
                                   default = nil)
  if valid_21627643 != nil:
    section.add "X-Amz-Algorithm", valid_21627643
  var valid_21627644 = header.getOrDefault("X-Amz-Signature")
  valid_21627644 = validateParameter(valid_21627644, JString, required = false,
                                   default = nil)
  if valid_21627644 != nil:
    section.add "X-Amz-Signature", valid_21627644
  var valid_21627645 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627645 = validateParameter(valid_21627645, JString, required = false,
                                   default = nil)
  if valid_21627645 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627645
  var valid_21627646 = header.getOrDefault("X-Amz-Credential")
  valid_21627646 = validateParameter(valid_21627646, JString, required = false,
                                   default = nil)
  if valid_21627646 != nil:
    section.add "X-Amz-Credential", valid_21627646
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_21627647 = formData.getOrDefault("RoleName")
  valid_21627647 = validateParameter(valid_21627647, JString, required = true,
                                   default = nil)
  if valid_21627647 != nil:
    section.add "RoleName", valid_21627647
  var valid_21627648 = formData.getOrDefault("PolicyArn")
  valid_21627648 = validateParameter(valid_21627648, JString, required = true,
                                   default = nil)
  if valid_21627648 != nil:
    section.add "PolicyArn", valid_21627648
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627649: Call_PostDetachRolePolicy_21627635; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627649.validator(path, query, header, formData, body, _)
  let scheme = call_21627649.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627649.makeUrl(scheme.get, call_21627649.host, call_21627649.base,
                               call_21627649.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627649, uri, valid, _)

proc call*(call_21627650: Call_PostDetachRolePolicy_21627635; RoleName: string;
          PolicyArn: string; Action: string = "DetachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachRolePolicy
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627651 = newJObject()
  var formData_21627652 = newJObject()
  add(formData_21627652, "RoleName", newJString(RoleName))
  add(formData_21627652, "PolicyArn", newJString(PolicyArn))
  add(query_21627651, "Action", newJString(Action))
  add(query_21627651, "Version", newJString(Version))
  result = call_21627650.call(nil, query_21627651, nil, formData_21627652, nil)

var postDetachRolePolicy* = Call_PostDetachRolePolicy_21627635(
    name: "postDetachRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachRolePolicy",
    validator: validate_PostDetachRolePolicy_21627636, base: "/",
    makeUrl: url_PostDetachRolePolicy_21627637,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachRolePolicy_21627618 = ref object of OpenApiRestCall_21625435
proc url_GetDetachRolePolicy_21627620(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachRolePolicy_21627619(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_21627621 = query.getOrDefault("PolicyArn")
  valid_21627621 = validateParameter(valid_21627621, JString, required = true,
                                   default = nil)
  if valid_21627621 != nil:
    section.add "PolicyArn", valid_21627621
  var valid_21627622 = query.getOrDefault("Action")
  valid_21627622 = validateParameter(valid_21627622, JString, required = true,
                                   default = newJString("DetachRolePolicy"))
  if valid_21627622 != nil:
    section.add "Action", valid_21627622
  var valid_21627623 = query.getOrDefault("RoleName")
  valid_21627623 = validateParameter(valid_21627623, JString, required = true,
                                   default = nil)
  if valid_21627623 != nil:
    section.add "RoleName", valid_21627623
  var valid_21627624 = query.getOrDefault("Version")
  valid_21627624 = validateParameter(valid_21627624, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627624 != nil:
    section.add "Version", valid_21627624
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627625 = header.getOrDefault("X-Amz-Date")
  valid_21627625 = validateParameter(valid_21627625, JString, required = false,
                                   default = nil)
  if valid_21627625 != nil:
    section.add "X-Amz-Date", valid_21627625
  var valid_21627626 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627626 = validateParameter(valid_21627626, JString, required = false,
                                   default = nil)
  if valid_21627626 != nil:
    section.add "X-Amz-Security-Token", valid_21627626
  var valid_21627627 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627627 = validateParameter(valid_21627627, JString, required = false,
                                   default = nil)
  if valid_21627627 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627627
  var valid_21627628 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627628 = validateParameter(valid_21627628, JString, required = false,
                                   default = nil)
  if valid_21627628 != nil:
    section.add "X-Amz-Algorithm", valid_21627628
  var valid_21627629 = header.getOrDefault("X-Amz-Signature")
  valid_21627629 = validateParameter(valid_21627629, JString, required = false,
                                   default = nil)
  if valid_21627629 != nil:
    section.add "X-Amz-Signature", valid_21627629
  var valid_21627630 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627630 = validateParameter(valid_21627630, JString, required = false,
                                   default = nil)
  if valid_21627630 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627630
  var valid_21627631 = header.getOrDefault("X-Amz-Credential")
  valid_21627631 = validateParameter(valid_21627631, JString, required = false,
                                   default = nil)
  if valid_21627631 != nil:
    section.add "X-Amz-Credential", valid_21627631
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627632: Call_GetDetachRolePolicy_21627618; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627632.validator(path, query, header, formData, body, _)
  let scheme = call_21627632.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627632.makeUrl(scheme.get, call_21627632.host, call_21627632.base,
                               call_21627632.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627632, uri, valid, _)

proc call*(call_21627633: Call_GetDetachRolePolicy_21627618; PolicyArn: string;
          RoleName: string; Action: string = "DetachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachRolePolicy
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21627634 = newJObject()
  add(query_21627634, "PolicyArn", newJString(PolicyArn))
  add(query_21627634, "Action", newJString(Action))
  add(query_21627634, "RoleName", newJString(RoleName))
  add(query_21627634, "Version", newJString(Version))
  result = call_21627633.call(nil, query_21627634, nil, nil, nil)

var getDetachRolePolicy* = Call_GetDetachRolePolicy_21627618(
    name: "getDetachRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachRolePolicy",
    validator: validate_GetDetachRolePolicy_21627619, base: "/",
    makeUrl: url_GetDetachRolePolicy_21627620,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachUserPolicy_21627670 = ref object of OpenApiRestCall_21625435
proc url_PostDetachUserPolicy_21627672(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachUserPolicy_21627671(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627673 = query.getOrDefault("Action")
  valid_21627673 = validateParameter(valid_21627673, JString, required = true,
                                   default = newJString("DetachUserPolicy"))
  if valid_21627673 != nil:
    section.add "Action", valid_21627673
  var valid_21627674 = query.getOrDefault("Version")
  valid_21627674 = validateParameter(valid_21627674, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627674 != nil:
    section.add "Version", valid_21627674
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627675 = header.getOrDefault("X-Amz-Date")
  valid_21627675 = validateParameter(valid_21627675, JString, required = false,
                                   default = nil)
  if valid_21627675 != nil:
    section.add "X-Amz-Date", valid_21627675
  var valid_21627676 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627676 = validateParameter(valid_21627676, JString, required = false,
                                   default = nil)
  if valid_21627676 != nil:
    section.add "X-Amz-Security-Token", valid_21627676
  var valid_21627677 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627677 = validateParameter(valid_21627677, JString, required = false,
                                   default = nil)
  if valid_21627677 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627677
  var valid_21627678 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627678 = validateParameter(valid_21627678, JString, required = false,
                                   default = nil)
  if valid_21627678 != nil:
    section.add "X-Amz-Algorithm", valid_21627678
  var valid_21627679 = header.getOrDefault("X-Amz-Signature")
  valid_21627679 = validateParameter(valid_21627679, JString, required = false,
                                   default = nil)
  if valid_21627679 != nil:
    section.add "X-Amz-Signature", valid_21627679
  var valid_21627680 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627680 = validateParameter(valid_21627680, JString, required = false,
                                   default = nil)
  if valid_21627680 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627680
  var valid_21627681 = header.getOrDefault("X-Amz-Credential")
  valid_21627681 = validateParameter(valid_21627681, JString, required = false,
                                   default = nil)
  if valid_21627681 != nil:
    section.add "X-Amz-Credential", valid_21627681
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21627682 = formData.getOrDefault("UserName")
  valid_21627682 = validateParameter(valid_21627682, JString, required = true,
                                   default = nil)
  if valid_21627682 != nil:
    section.add "UserName", valid_21627682
  var valid_21627683 = formData.getOrDefault("PolicyArn")
  valid_21627683 = validateParameter(valid_21627683, JString, required = true,
                                   default = nil)
  if valid_21627683 != nil:
    section.add "PolicyArn", valid_21627683
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627684: Call_PostDetachUserPolicy_21627670; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627684.validator(path, query, header, formData, body, _)
  let scheme = call_21627684.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627684.makeUrl(scheme.get, call_21627684.host, call_21627684.base,
                               call_21627684.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627684, uri, valid, _)

proc call*(call_21627685: Call_PostDetachUserPolicy_21627670; UserName: string;
          PolicyArn: string; Action: string = "DetachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachUserPolicy
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627686 = newJObject()
  var formData_21627687 = newJObject()
  add(formData_21627687, "UserName", newJString(UserName))
  add(formData_21627687, "PolicyArn", newJString(PolicyArn))
  add(query_21627686, "Action", newJString(Action))
  add(query_21627686, "Version", newJString(Version))
  result = call_21627685.call(nil, query_21627686, nil, formData_21627687, nil)

var postDetachUserPolicy* = Call_PostDetachUserPolicy_21627670(
    name: "postDetachUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachUserPolicy",
    validator: validate_PostDetachUserPolicy_21627671, base: "/",
    makeUrl: url_PostDetachUserPolicy_21627672,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachUserPolicy_21627653 = ref object of OpenApiRestCall_21625435
proc url_GetDetachUserPolicy_21627655(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachUserPolicy_21627654(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_21627656 = query.getOrDefault("PolicyArn")
  valid_21627656 = validateParameter(valid_21627656, JString, required = true,
                                   default = nil)
  if valid_21627656 != nil:
    section.add "PolicyArn", valid_21627656
  var valid_21627657 = query.getOrDefault("UserName")
  valid_21627657 = validateParameter(valid_21627657, JString, required = true,
                                   default = nil)
  if valid_21627657 != nil:
    section.add "UserName", valid_21627657
  var valid_21627658 = query.getOrDefault("Action")
  valid_21627658 = validateParameter(valid_21627658, JString, required = true,
                                   default = newJString("DetachUserPolicy"))
  if valid_21627658 != nil:
    section.add "Action", valid_21627658
  var valid_21627659 = query.getOrDefault("Version")
  valid_21627659 = validateParameter(valid_21627659, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627659 != nil:
    section.add "Version", valid_21627659
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627660 = header.getOrDefault("X-Amz-Date")
  valid_21627660 = validateParameter(valid_21627660, JString, required = false,
                                   default = nil)
  if valid_21627660 != nil:
    section.add "X-Amz-Date", valid_21627660
  var valid_21627661 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627661 = validateParameter(valid_21627661, JString, required = false,
                                   default = nil)
  if valid_21627661 != nil:
    section.add "X-Amz-Security-Token", valid_21627661
  var valid_21627662 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627662 = validateParameter(valid_21627662, JString, required = false,
                                   default = nil)
  if valid_21627662 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627662
  var valid_21627663 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627663 = validateParameter(valid_21627663, JString, required = false,
                                   default = nil)
  if valid_21627663 != nil:
    section.add "X-Amz-Algorithm", valid_21627663
  var valid_21627664 = header.getOrDefault("X-Amz-Signature")
  valid_21627664 = validateParameter(valid_21627664, JString, required = false,
                                   default = nil)
  if valid_21627664 != nil:
    section.add "X-Amz-Signature", valid_21627664
  var valid_21627665 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627665 = validateParameter(valid_21627665, JString, required = false,
                                   default = nil)
  if valid_21627665 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627665
  var valid_21627666 = header.getOrDefault("X-Amz-Credential")
  valid_21627666 = validateParameter(valid_21627666, JString, required = false,
                                   default = nil)
  if valid_21627666 != nil:
    section.add "X-Amz-Credential", valid_21627666
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627667: Call_GetDetachUserPolicy_21627653; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627667.validator(path, query, header, formData, body, _)
  let scheme = call_21627667.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627667.makeUrl(scheme.get, call_21627667.host, call_21627667.base,
                               call_21627667.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627667, uri, valid, _)

proc call*(call_21627668: Call_GetDetachUserPolicy_21627653; PolicyArn: string;
          UserName: string; Action: string = "DetachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachUserPolicy
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627669 = newJObject()
  add(query_21627669, "PolicyArn", newJString(PolicyArn))
  add(query_21627669, "UserName", newJString(UserName))
  add(query_21627669, "Action", newJString(Action))
  add(query_21627669, "Version", newJString(Version))
  result = call_21627668.call(nil, query_21627669, nil, nil, nil)

var getDetachUserPolicy* = Call_GetDetachUserPolicy_21627653(
    name: "getDetachUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachUserPolicy",
    validator: validate_GetDetachUserPolicy_21627654, base: "/",
    makeUrl: url_GetDetachUserPolicy_21627655,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnableMFADevice_21627707 = ref object of OpenApiRestCall_21625435
proc url_PostEnableMFADevice_21627709(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostEnableMFADevice_21627708(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627710 = query.getOrDefault("Action")
  valid_21627710 = validateParameter(valid_21627710, JString, required = true,
                                   default = newJString("EnableMFADevice"))
  if valid_21627710 != nil:
    section.add "Action", valid_21627710
  var valid_21627711 = query.getOrDefault("Version")
  valid_21627711 = validateParameter(valid_21627711, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627711 != nil:
    section.add "Version", valid_21627711
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627712 = header.getOrDefault("X-Amz-Date")
  valid_21627712 = validateParameter(valid_21627712, JString, required = false,
                                   default = nil)
  if valid_21627712 != nil:
    section.add "X-Amz-Date", valid_21627712
  var valid_21627713 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627713 = validateParameter(valid_21627713, JString, required = false,
                                   default = nil)
  if valid_21627713 != nil:
    section.add "X-Amz-Security-Token", valid_21627713
  var valid_21627714 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627714 = validateParameter(valid_21627714, JString, required = false,
                                   default = nil)
  if valid_21627714 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627714
  var valid_21627715 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627715 = validateParameter(valid_21627715, JString, required = false,
                                   default = nil)
  if valid_21627715 != nil:
    section.add "X-Amz-Algorithm", valid_21627715
  var valid_21627716 = header.getOrDefault("X-Amz-Signature")
  valid_21627716 = validateParameter(valid_21627716, JString, required = false,
                                   default = nil)
  if valid_21627716 != nil:
    section.add "X-Amz-Signature", valid_21627716
  var valid_21627717 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627717 = validateParameter(valid_21627717, JString, required = false,
                                   default = nil)
  if valid_21627717 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627717
  var valid_21627718 = header.getOrDefault("X-Amz-Credential")
  valid_21627718 = validateParameter(valid_21627718, JString, required = false,
                                   default = nil)
  if valid_21627718 != nil:
    section.add "X-Amz-Credential", valid_21627718
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_21627719 = formData.getOrDefault("SerialNumber")
  valid_21627719 = validateParameter(valid_21627719, JString, required = true,
                                   default = nil)
  if valid_21627719 != nil:
    section.add "SerialNumber", valid_21627719
  var valid_21627720 = formData.getOrDefault("UserName")
  valid_21627720 = validateParameter(valid_21627720, JString, required = true,
                                   default = nil)
  if valid_21627720 != nil:
    section.add "UserName", valid_21627720
  var valid_21627721 = formData.getOrDefault("AuthenticationCode2")
  valid_21627721 = validateParameter(valid_21627721, JString, required = true,
                                   default = nil)
  if valid_21627721 != nil:
    section.add "AuthenticationCode2", valid_21627721
  var valid_21627722 = formData.getOrDefault("AuthenticationCode1")
  valid_21627722 = validateParameter(valid_21627722, JString, required = true,
                                   default = nil)
  if valid_21627722 != nil:
    section.add "AuthenticationCode1", valid_21627722
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627723: Call_PostEnableMFADevice_21627707; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  let valid = call_21627723.validator(path, query, header, formData, body, _)
  let scheme = call_21627723.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627723.makeUrl(scheme.get, call_21627723.host, call_21627723.base,
                               call_21627723.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627723, uri, valid, _)

proc call*(call_21627724: Call_PostEnableMFADevice_21627707; SerialNumber: string;
          UserName: string; AuthenticationCode2: string;
          AuthenticationCode1: string; Action: string = "EnableMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postEnableMFADevice
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   Action: string (required)
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   Version: string (required)
  var query_21627725 = newJObject()
  var formData_21627726 = newJObject()
  add(formData_21627726, "SerialNumber", newJString(SerialNumber))
  add(formData_21627726, "UserName", newJString(UserName))
  add(formData_21627726, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_21627725, "Action", newJString(Action))
  add(formData_21627726, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_21627725, "Version", newJString(Version))
  result = call_21627724.call(nil, query_21627725, nil, formData_21627726, nil)

var postEnableMFADevice* = Call_PostEnableMFADevice_21627707(
    name: "postEnableMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=EnableMFADevice",
    validator: validate_PostEnableMFADevice_21627708, base: "/",
    makeUrl: url_PostEnableMFADevice_21627709,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnableMFADevice_21627688 = ref object of OpenApiRestCall_21625435
proc url_GetEnableMFADevice_21627690(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetEnableMFADevice_21627689(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_21627691 = query.getOrDefault("SerialNumber")
  valid_21627691 = validateParameter(valid_21627691, JString, required = true,
                                   default = nil)
  if valid_21627691 != nil:
    section.add "SerialNumber", valid_21627691
  var valid_21627692 = query.getOrDefault("AuthenticationCode2")
  valid_21627692 = validateParameter(valid_21627692, JString, required = true,
                                   default = nil)
  if valid_21627692 != nil:
    section.add "AuthenticationCode2", valid_21627692
  var valid_21627693 = query.getOrDefault("AuthenticationCode1")
  valid_21627693 = validateParameter(valid_21627693, JString, required = true,
                                   default = nil)
  if valid_21627693 != nil:
    section.add "AuthenticationCode1", valid_21627693
  var valid_21627694 = query.getOrDefault("UserName")
  valid_21627694 = validateParameter(valid_21627694, JString, required = true,
                                   default = nil)
  if valid_21627694 != nil:
    section.add "UserName", valid_21627694
  var valid_21627695 = query.getOrDefault("Action")
  valid_21627695 = validateParameter(valid_21627695, JString, required = true,
                                   default = newJString("EnableMFADevice"))
  if valid_21627695 != nil:
    section.add "Action", valid_21627695
  var valid_21627696 = query.getOrDefault("Version")
  valid_21627696 = validateParameter(valid_21627696, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627696 != nil:
    section.add "Version", valid_21627696
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627697 = header.getOrDefault("X-Amz-Date")
  valid_21627697 = validateParameter(valid_21627697, JString, required = false,
                                   default = nil)
  if valid_21627697 != nil:
    section.add "X-Amz-Date", valid_21627697
  var valid_21627698 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627698 = validateParameter(valid_21627698, JString, required = false,
                                   default = nil)
  if valid_21627698 != nil:
    section.add "X-Amz-Security-Token", valid_21627698
  var valid_21627699 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627699 = validateParameter(valid_21627699, JString, required = false,
                                   default = nil)
  if valid_21627699 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627699
  var valid_21627700 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627700 = validateParameter(valid_21627700, JString, required = false,
                                   default = nil)
  if valid_21627700 != nil:
    section.add "X-Amz-Algorithm", valid_21627700
  var valid_21627701 = header.getOrDefault("X-Amz-Signature")
  valid_21627701 = validateParameter(valid_21627701, JString, required = false,
                                   default = nil)
  if valid_21627701 != nil:
    section.add "X-Amz-Signature", valid_21627701
  var valid_21627702 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627702 = validateParameter(valid_21627702, JString, required = false,
                                   default = nil)
  if valid_21627702 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627702
  var valid_21627703 = header.getOrDefault("X-Amz-Credential")
  valid_21627703 = validateParameter(valid_21627703, JString, required = false,
                                   default = nil)
  if valid_21627703 != nil:
    section.add "X-Amz-Credential", valid_21627703
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627704: Call_GetEnableMFADevice_21627688; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  let valid = call_21627704.validator(path, query, header, formData, body, _)
  let scheme = call_21627704.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627704.makeUrl(scheme.get, call_21627704.host, call_21627704.base,
                               call_21627704.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627704, uri, valid, _)

proc call*(call_21627705: Call_GetEnableMFADevice_21627688; SerialNumber: string;
          AuthenticationCode2: string; AuthenticationCode1: string;
          UserName: string; Action: string = "EnableMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getEnableMFADevice
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627706 = newJObject()
  add(query_21627706, "SerialNumber", newJString(SerialNumber))
  add(query_21627706, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_21627706, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_21627706, "UserName", newJString(UserName))
  add(query_21627706, "Action", newJString(Action))
  add(query_21627706, "Version", newJString(Version))
  result = call_21627705.call(nil, query_21627706, nil, nil, nil)

var getEnableMFADevice* = Call_GetEnableMFADevice_21627688(
    name: "getEnableMFADevice", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=EnableMFADevice", validator: validate_GetEnableMFADevice_21627689,
    base: "/", makeUrl: url_GetEnableMFADevice_21627690,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateCredentialReport_21627742 = ref object of OpenApiRestCall_21625435
proc url_PostGenerateCredentialReport_21627744(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGenerateCredentialReport_21627743(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627745 = query.getOrDefault("Action")
  valid_21627745 = validateParameter(valid_21627745, JString, required = true, default = newJString(
      "GenerateCredentialReport"))
  if valid_21627745 != nil:
    section.add "Action", valid_21627745
  var valid_21627746 = query.getOrDefault("Version")
  valid_21627746 = validateParameter(valid_21627746, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627746 != nil:
    section.add "Version", valid_21627746
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627747 = header.getOrDefault("X-Amz-Date")
  valid_21627747 = validateParameter(valid_21627747, JString, required = false,
                                   default = nil)
  if valid_21627747 != nil:
    section.add "X-Amz-Date", valid_21627747
  var valid_21627748 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627748 = validateParameter(valid_21627748, JString, required = false,
                                   default = nil)
  if valid_21627748 != nil:
    section.add "X-Amz-Security-Token", valid_21627748
  var valid_21627749 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627749 = validateParameter(valid_21627749, JString, required = false,
                                   default = nil)
  if valid_21627749 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627749
  var valid_21627750 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627750 = validateParameter(valid_21627750, JString, required = false,
                                   default = nil)
  if valid_21627750 != nil:
    section.add "X-Amz-Algorithm", valid_21627750
  var valid_21627751 = header.getOrDefault("X-Amz-Signature")
  valid_21627751 = validateParameter(valid_21627751, JString, required = false,
                                   default = nil)
  if valid_21627751 != nil:
    section.add "X-Amz-Signature", valid_21627751
  var valid_21627752 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627752 = validateParameter(valid_21627752, JString, required = false,
                                   default = nil)
  if valid_21627752 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627752
  var valid_21627753 = header.getOrDefault("X-Amz-Credential")
  valid_21627753 = validateParameter(valid_21627753, JString, required = false,
                                   default = nil)
  if valid_21627753 != nil:
    section.add "X-Amz-Credential", valid_21627753
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627754: Call_PostGenerateCredentialReport_21627742;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21627754.validator(path, query, header, formData, body, _)
  let scheme = call_21627754.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627754.makeUrl(scheme.get, call_21627754.host, call_21627754.base,
                               call_21627754.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627754, uri, valid, _)

proc call*(call_21627755: Call_PostGenerateCredentialReport_21627742;
          Action: string = "GenerateCredentialReport";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateCredentialReport
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627756 = newJObject()
  add(query_21627756, "Action", newJString(Action))
  add(query_21627756, "Version", newJString(Version))
  result = call_21627755.call(nil, query_21627756, nil, nil, nil)

var postGenerateCredentialReport* = Call_PostGenerateCredentialReport_21627742(
    name: "postGenerateCredentialReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GenerateCredentialReport",
    validator: validate_PostGenerateCredentialReport_21627743, base: "/",
    makeUrl: url_PostGenerateCredentialReport_21627744,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateCredentialReport_21627727 = ref object of OpenApiRestCall_21625435
proc url_GetGenerateCredentialReport_21627729(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGenerateCredentialReport_21627728(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627730 = query.getOrDefault("Action")
  valid_21627730 = validateParameter(valid_21627730, JString, required = true, default = newJString(
      "GenerateCredentialReport"))
  if valid_21627730 != nil:
    section.add "Action", valid_21627730
  var valid_21627731 = query.getOrDefault("Version")
  valid_21627731 = validateParameter(valid_21627731, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627731 != nil:
    section.add "Version", valid_21627731
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627732 = header.getOrDefault("X-Amz-Date")
  valid_21627732 = validateParameter(valid_21627732, JString, required = false,
                                   default = nil)
  if valid_21627732 != nil:
    section.add "X-Amz-Date", valid_21627732
  var valid_21627733 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627733 = validateParameter(valid_21627733, JString, required = false,
                                   default = nil)
  if valid_21627733 != nil:
    section.add "X-Amz-Security-Token", valid_21627733
  var valid_21627734 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627734 = validateParameter(valid_21627734, JString, required = false,
                                   default = nil)
  if valid_21627734 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627734
  var valid_21627735 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627735 = validateParameter(valid_21627735, JString, required = false,
                                   default = nil)
  if valid_21627735 != nil:
    section.add "X-Amz-Algorithm", valid_21627735
  var valid_21627736 = header.getOrDefault("X-Amz-Signature")
  valid_21627736 = validateParameter(valid_21627736, JString, required = false,
                                   default = nil)
  if valid_21627736 != nil:
    section.add "X-Amz-Signature", valid_21627736
  var valid_21627737 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627737 = validateParameter(valid_21627737, JString, required = false,
                                   default = nil)
  if valid_21627737 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627737
  var valid_21627738 = header.getOrDefault("X-Amz-Credential")
  valid_21627738 = validateParameter(valid_21627738, JString, required = false,
                                   default = nil)
  if valid_21627738 != nil:
    section.add "X-Amz-Credential", valid_21627738
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627739: Call_GetGenerateCredentialReport_21627727;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21627739.validator(path, query, header, formData, body, _)
  let scheme = call_21627739.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627739.makeUrl(scheme.get, call_21627739.host, call_21627739.base,
                               call_21627739.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627739, uri, valid, _)

proc call*(call_21627740: Call_GetGenerateCredentialReport_21627727;
          Action: string = "GenerateCredentialReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateCredentialReport
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627741 = newJObject()
  add(query_21627741, "Action", newJString(Action))
  add(query_21627741, "Version", newJString(Version))
  result = call_21627740.call(nil, query_21627741, nil, nil, nil)

var getGenerateCredentialReport* = Call_GetGenerateCredentialReport_21627727(
    name: "getGenerateCredentialReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GenerateCredentialReport",
    validator: validate_GetGenerateCredentialReport_21627728, base: "/",
    makeUrl: url_GetGenerateCredentialReport_21627729,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateOrganizationsAccessReport_21627774 = ref object of OpenApiRestCall_21625435
proc url_PostGenerateOrganizationsAccessReport_21627776(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGenerateOrganizationsAccessReport_21627775(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627777 = query.getOrDefault("Action")
  valid_21627777 = validateParameter(valid_21627777, JString, required = true, default = newJString(
      "GenerateOrganizationsAccessReport"))
  if valid_21627777 != nil:
    section.add "Action", valid_21627777
  var valid_21627778 = query.getOrDefault("Version")
  valid_21627778 = validateParameter(valid_21627778, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627778 != nil:
    section.add "Version", valid_21627778
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627779 = header.getOrDefault("X-Amz-Date")
  valid_21627779 = validateParameter(valid_21627779, JString, required = false,
                                   default = nil)
  if valid_21627779 != nil:
    section.add "X-Amz-Date", valid_21627779
  var valid_21627780 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627780 = validateParameter(valid_21627780, JString, required = false,
                                   default = nil)
  if valid_21627780 != nil:
    section.add "X-Amz-Security-Token", valid_21627780
  var valid_21627781 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627781 = validateParameter(valid_21627781, JString, required = false,
                                   default = nil)
  if valid_21627781 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627781
  var valid_21627782 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627782 = validateParameter(valid_21627782, JString, required = false,
                                   default = nil)
  if valid_21627782 != nil:
    section.add "X-Amz-Algorithm", valid_21627782
  var valid_21627783 = header.getOrDefault("X-Amz-Signature")
  valid_21627783 = validateParameter(valid_21627783, JString, required = false,
                                   default = nil)
  if valid_21627783 != nil:
    section.add "X-Amz-Signature", valid_21627783
  var valid_21627784 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627784 = validateParameter(valid_21627784, JString, required = false,
                                   default = nil)
  if valid_21627784 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627784
  var valid_21627785 = header.getOrDefault("X-Amz-Credential")
  valid_21627785 = validateParameter(valid_21627785, JString, required = false,
                                   default = nil)
  if valid_21627785 != nil:
    section.add "X-Amz-Credential", valid_21627785
  result.add "header", section
  ## parameters in `formData` object:
  ##   OrganizationsPolicyId: JString
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   EntityPath: JString (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  section = newJObject()
  var valid_21627786 = formData.getOrDefault("OrganizationsPolicyId")
  valid_21627786 = validateParameter(valid_21627786, JString, required = false,
                                   default = nil)
  if valid_21627786 != nil:
    section.add "OrganizationsPolicyId", valid_21627786
  assert formData != nil,
        "formData argument is necessary due to required `EntityPath` field"
  var valid_21627787 = formData.getOrDefault("EntityPath")
  valid_21627787 = validateParameter(valid_21627787, JString, required = true,
                                   default = nil)
  if valid_21627787 != nil:
    section.add "EntityPath", valid_21627787
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627788: Call_PostGenerateOrganizationsAccessReport_21627774;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627788.validator(path, query, header, formData, body, _)
  let scheme = call_21627788.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627788.makeUrl(scheme.get, call_21627788.host, call_21627788.base,
                               call_21627788.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627788, uri, valid, _)

proc call*(call_21627789: Call_PostGenerateOrganizationsAccessReport_21627774;
          EntityPath: string; OrganizationsPolicyId: string = "";
          Action: string = "GenerateOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateOrganizationsAccessReport
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   OrganizationsPolicyId: string
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: string (required)
  ##   EntityPath: string (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   Version: string (required)
  var query_21627790 = newJObject()
  var formData_21627791 = newJObject()
  add(formData_21627791, "OrganizationsPolicyId",
      newJString(OrganizationsPolicyId))
  add(query_21627790, "Action", newJString(Action))
  add(formData_21627791, "EntityPath", newJString(EntityPath))
  add(query_21627790, "Version", newJString(Version))
  result = call_21627789.call(nil, query_21627790, nil, formData_21627791, nil)

var postGenerateOrganizationsAccessReport* = Call_PostGenerateOrganizationsAccessReport_21627774(
    name: "postGenerateOrganizationsAccessReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateOrganizationsAccessReport",
    validator: validate_PostGenerateOrganizationsAccessReport_21627775, base: "/",
    makeUrl: url_PostGenerateOrganizationsAccessReport_21627776,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateOrganizationsAccessReport_21627757 = ref object of OpenApiRestCall_21625435
proc url_GetGenerateOrganizationsAccessReport_21627759(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGenerateOrganizationsAccessReport_21627758(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EntityPath: JString (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   OrganizationsPolicyId: JString
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EntityPath` field"
  var valid_21627760 = query.getOrDefault("EntityPath")
  valid_21627760 = validateParameter(valid_21627760, JString, required = true,
                                   default = nil)
  if valid_21627760 != nil:
    section.add "EntityPath", valid_21627760
  var valid_21627761 = query.getOrDefault("OrganizationsPolicyId")
  valid_21627761 = validateParameter(valid_21627761, JString, required = false,
                                   default = nil)
  if valid_21627761 != nil:
    section.add "OrganizationsPolicyId", valid_21627761
  var valid_21627762 = query.getOrDefault("Action")
  valid_21627762 = validateParameter(valid_21627762, JString, required = true, default = newJString(
      "GenerateOrganizationsAccessReport"))
  if valid_21627762 != nil:
    section.add "Action", valid_21627762
  var valid_21627763 = query.getOrDefault("Version")
  valid_21627763 = validateParameter(valid_21627763, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627763 != nil:
    section.add "Version", valid_21627763
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627764 = header.getOrDefault("X-Amz-Date")
  valid_21627764 = validateParameter(valid_21627764, JString, required = false,
                                   default = nil)
  if valid_21627764 != nil:
    section.add "X-Amz-Date", valid_21627764
  var valid_21627765 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627765 = validateParameter(valid_21627765, JString, required = false,
                                   default = nil)
  if valid_21627765 != nil:
    section.add "X-Amz-Security-Token", valid_21627765
  var valid_21627766 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627766 = validateParameter(valid_21627766, JString, required = false,
                                   default = nil)
  if valid_21627766 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627766
  var valid_21627767 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627767 = validateParameter(valid_21627767, JString, required = false,
                                   default = nil)
  if valid_21627767 != nil:
    section.add "X-Amz-Algorithm", valid_21627767
  var valid_21627768 = header.getOrDefault("X-Amz-Signature")
  valid_21627768 = validateParameter(valid_21627768, JString, required = false,
                                   default = nil)
  if valid_21627768 != nil:
    section.add "X-Amz-Signature", valid_21627768
  var valid_21627769 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627769 = validateParameter(valid_21627769, JString, required = false,
                                   default = nil)
  if valid_21627769 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627769
  var valid_21627770 = header.getOrDefault("X-Amz-Credential")
  valid_21627770 = validateParameter(valid_21627770, JString, required = false,
                                   default = nil)
  if valid_21627770 != nil:
    section.add "X-Amz-Credential", valid_21627770
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627771: Call_GetGenerateOrganizationsAccessReport_21627757;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627771.validator(path, query, header, formData, body, _)
  let scheme = call_21627771.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627771.makeUrl(scheme.get, call_21627771.host, call_21627771.base,
                               call_21627771.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627771, uri, valid, _)

proc call*(call_21627772: Call_GetGenerateOrganizationsAccessReport_21627757;
          EntityPath: string; OrganizationsPolicyId: string = "";
          Action: string = "GenerateOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateOrganizationsAccessReport
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   EntityPath: string (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   OrganizationsPolicyId: string
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627773 = newJObject()
  add(query_21627773, "EntityPath", newJString(EntityPath))
  add(query_21627773, "OrganizationsPolicyId", newJString(OrganizationsPolicyId))
  add(query_21627773, "Action", newJString(Action))
  add(query_21627773, "Version", newJString(Version))
  result = call_21627772.call(nil, query_21627773, nil, nil, nil)

var getGenerateOrganizationsAccessReport* = Call_GetGenerateOrganizationsAccessReport_21627757(
    name: "getGenerateOrganizationsAccessReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateOrganizationsAccessReport",
    validator: validate_GetGenerateOrganizationsAccessReport_21627758, base: "/",
    makeUrl: url_GetGenerateOrganizationsAccessReport_21627759,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateServiceLastAccessedDetails_21627808 = ref object of OpenApiRestCall_21625435
proc url_PostGenerateServiceLastAccessedDetails_21627810(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGenerateServiceLastAccessedDetails_21627809(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627811 = query.getOrDefault("Action")
  valid_21627811 = validateParameter(valid_21627811, JString, required = true, default = newJString(
      "GenerateServiceLastAccessedDetails"))
  if valid_21627811 != nil:
    section.add "Action", valid_21627811
  var valid_21627812 = query.getOrDefault("Version")
  valid_21627812 = validateParameter(valid_21627812, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627812 != nil:
    section.add "Version", valid_21627812
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627813 = header.getOrDefault("X-Amz-Date")
  valid_21627813 = validateParameter(valid_21627813, JString, required = false,
                                   default = nil)
  if valid_21627813 != nil:
    section.add "X-Amz-Date", valid_21627813
  var valid_21627814 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627814 = validateParameter(valid_21627814, JString, required = false,
                                   default = nil)
  if valid_21627814 != nil:
    section.add "X-Amz-Security-Token", valid_21627814
  var valid_21627815 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627815 = validateParameter(valid_21627815, JString, required = false,
                                   default = nil)
  if valid_21627815 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627815
  var valid_21627816 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627816 = validateParameter(valid_21627816, JString, required = false,
                                   default = nil)
  if valid_21627816 != nil:
    section.add "X-Amz-Algorithm", valid_21627816
  var valid_21627817 = header.getOrDefault("X-Amz-Signature")
  valid_21627817 = validateParameter(valid_21627817, JString, required = false,
                                   default = nil)
  if valid_21627817 != nil:
    section.add "X-Amz-Signature", valid_21627817
  var valid_21627818 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627818 = validateParameter(valid_21627818, JString, required = false,
                                   default = nil)
  if valid_21627818 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627818
  var valid_21627819 = header.getOrDefault("X-Amz-Credential")
  valid_21627819 = validateParameter(valid_21627819, JString, required = false,
                                   default = nil)
  if valid_21627819 != nil:
    section.add "X-Amz-Credential", valid_21627819
  result.add "header", section
  ## parameters in `formData` object:
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Arn` field"
  var valid_21627820 = formData.getOrDefault("Arn")
  valid_21627820 = validateParameter(valid_21627820, JString, required = true,
                                   default = nil)
  if valid_21627820 != nil:
    section.add "Arn", valid_21627820
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627821: Call_PostGenerateServiceLastAccessedDetails_21627808;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627821.validator(path, query, header, formData, body, _)
  let scheme = call_21627821.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627821.makeUrl(scheme.get, call_21627821.host, call_21627821.base,
                               call_21627821.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627821, uri, valid, _)

proc call*(call_21627822: Call_PostGenerateServiceLastAccessedDetails_21627808;
          Arn: string; Action: string = "GenerateServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateServiceLastAccessedDetails
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627823 = newJObject()
  var formData_21627824 = newJObject()
  add(formData_21627824, "Arn", newJString(Arn))
  add(query_21627823, "Action", newJString(Action))
  add(query_21627823, "Version", newJString(Version))
  result = call_21627822.call(nil, query_21627823, nil, formData_21627824, nil)

var postGenerateServiceLastAccessedDetails* = Call_PostGenerateServiceLastAccessedDetails_21627808(
    name: "postGenerateServiceLastAccessedDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateServiceLastAccessedDetails",
    validator: validate_PostGenerateServiceLastAccessedDetails_21627809,
    base: "/", makeUrl: url_PostGenerateServiceLastAccessedDetails_21627810,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateServiceLastAccessedDetails_21627792 = ref object of OpenApiRestCall_21625435
proc url_GetGenerateServiceLastAccessedDetails_21627794(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGenerateServiceLastAccessedDetails_21627793(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627795 = query.getOrDefault("Action")
  valid_21627795 = validateParameter(valid_21627795, JString, required = true, default = newJString(
      "GenerateServiceLastAccessedDetails"))
  if valid_21627795 != nil:
    section.add "Action", valid_21627795
  var valid_21627796 = query.getOrDefault("Arn")
  valid_21627796 = validateParameter(valid_21627796, JString, required = true,
                                   default = nil)
  if valid_21627796 != nil:
    section.add "Arn", valid_21627796
  var valid_21627797 = query.getOrDefault("Version")
  valid_21627797 = validateParameter(valid_21627797, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627797 != nil:
    section.add "Version", valid_21627797
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627798 = header.getOrDefault("X-Amz-Date")
  valid_21627798 = validateParameter(valid_21627798, JString, required = false,
                                   default = nil)
  if valid_21627798 != nil:
    section.add "X-Amz-Date", valid_21627798
  var valid_21627799 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627799 = validateParameter(valid_21627799, JString, required = false,
                                   default = nil)
  if valid_21627799 != nil:
    section.add "X-Amz-Security-Token", valid_21627799
  var valid_21627800 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627800 = validateParameter(valid_21627800, JString, required = false,
                                   default = nil)
  if valid_21627800 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627800
  var valid_21627801 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627801 = validateParameter(valid_21627801, JString, required = false,
                                   default = nil)
  if valid_21627801 != nil:
    section.add "X-Amz-Algorithm", valid_21627801
  var valid_21627802 = header.getOrDefault("X-Amz-Signature")
  valid_21627802 = validateParameter(valid_21627802, JString, required = false,
                                   default = nil)
  if valid_21627802 != nil:
    section.add "X-Amz-Signature", valid_21627802
  var valid_21627803 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627803 = validateParameter(valid_21627803, JString, required = false,
                                   default = nil)
  if valid_21627803 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627803
  var valid_21627804 = header.getOrDefault("X-Amz-Credential")
  valid_21627804 = validateParameter(valid_21627804, JString, required = false,
                                   default = nil)
  if valid_21627804 != nil:
    section.add "X-Amz-Credential", valid_21627804
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627805: Call_GetGenerateServiceLastAccessedDetails_21627792;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627805.validator(path, query, header, formData, body, _)
  let scheme = call_21627805.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627805.makeUrl(scheme.get, call_21627805.host, call_21627805.base,
                               call_21627805.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627805, uri, valid, _)

proc call*(call_21627806: Call_GetGenerateServiceLastAccessedDetails_21627792;
          Arn: string; Action: string = "GenerateServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateServiceLastAccessedDetails
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_21627807 = newJObject()
  add(query_21627807, "Action", newJString(Action))
  add(query_21627807, "Arn", newJString(Arn))
  add(query_21627807, "Version", newJString(Version))
  result = call_21627806.call(nil, query_21627807, nil, nil, nil)

var getGenerateServiceLastAccessedDetails* = Call_GetGenerateServiceLastAccessedDetails_21627792(
    name: "getGenerateServiceLastAccessedDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateServiceLastAccessedDetails",
    validator: validate_GetGenerateServiceLastAccessedDetails_21627793, base: "/",
    makeUrl: url_GetGenerateServiceLastAccessedDetails_21627794,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccessKeyLastUsed_21627841 = ref object of OpenApiRestCall_21625435
proc url_PostGetAccessKeyLastUsed_21627843(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccessKeyLastUsed_21627842(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627844 = query.getOrDefault("Action")
  valid_21627844 = validateParameter(valid_21627844, JString, required = true,
                                   default = newJString("GetAccessKeyLastUsed"))
  if valid_21627844 != nil:
    section.add "Action", valid_21627844
  var valid_21627845 = query.getOrDefault("Version")
  valid_21627845 = validateParameter(valid_21627845, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627845 != nil:
    section.add "Version", valid_21627845
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627846 = header.getOrDefault("X-Amz-Date")
  valid_21627846 = validateParameter(valid_21627846, JString, required = false,
                                   default = nil)
  if valid_21627846 != nil:
    section.add "X-Amz-Date", valid_21627846
  var valid_21627847 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627847 = validateParameter(valid_21627847, JString, required = false,
                                   default = nil)
  if valid_21627847 != nil:
    section.add "X-Amz-Security-Token", valid_21627847
  var valid_21627848 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627848 = validateParameter(valid_21627848, JString, required = false,
                                   default = nil)
  if valid_21627848 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627848
  var valid_21627849 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627849 = validateParameter(valid_21627849, JString, required = false,
                                   default = nil)
  if valid_21627849 != nil:
    section.add "X-Amz-Algorithm", valid_21627849
  var valid_21627850 = header.getOrDefault("X-Amz-Signature")
  valid_21627850 = validateParameter(valid_21627850, JString, required = false,
                                   default = nil)
  if valid_21627850 != nil:
    section.add "X-Amz-Signature", valid_21627850
  var valid_21627851 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627851 = validateParameter(valid_21627851, JString, required = false,
                                   default = nil)
  if valid_21627851 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627851
  var valid_21627852 = header.getOrDefault("X-Amz-Credential")
  valid_21627852 = validateParameter(valid_21627852, JString, required = false,
                                   default = nil)
  if valid_21627852 != nil:
    section.add "X-Amz-Credential", valid_21627852
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_21627853 = formData.getOrDefault("AccessKeyId")
  valid_21627853 = validateParameter(valid_21627853, JString, required = true,
                                   default = nil)
  if valid_21627853 != nil:
    section.add "AccessKeyId", valid_21627853
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627854: Call_PostGetAccessKeyLastUsed_21627841;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  let valid = call_21627854.validator(path, query, header, formData, body, _)
  let scheme = call_21627854.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627854.makeUrl(scheme.get, call_21627854.host, call_21627854.base,
                               call_21627854.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627854, uri, valid, _)

proc call*(call_21627855: Call_PostGetAccessKeyLastUsed_21627841;
          AccessKeyId: string; Action: string = "GetAccessKeyLastUsed";
          Version: string = "2010-05-08"): Recallable =
  ## postGetAccessKeyLastUsed
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ##   AccessKeyId: string (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627856 = newJObject()
  var formData_21627857 = newJObject()
  add(formData_21627857, "AccessKeyId", newJString(AccessKeyId))
  add(query_21627856, "Action", newJString(Action))
  add(query_21627856, "Version", newJString(Version))
  result = call_21627855.call(nil, query_21627856, nil, formData_21627857, nil)

var postGetAccessKeyLastUsed* = Call_PostGetAccessKeyLastUsed_21627841(
    name: "postGetAccessKeyLastUsed", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccessKeyLastUsed",
    validator: validate_PostGetAccessKeyLastUsed_21627842, base: "/",
    makeUrl: url_PostGetAccessKeyLastUsed_21627843,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccessKeyLastUsed_21627825 = ref object of OpenApiRestCall_21625435
proc url_GetGetAccessKeyLastUsed_21627827(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccessKeyLastUsed_21627826(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccessKeyId` field"
  var valid_21627828 = query.getOrDefault("AccessKeyId")
  valid_21627828 = validateParameter(valid_21627828, JString, required = true,
                                   default = nil)
  if valid_21627828 != nil:
    section.add "AccessKeyId", valid_21627828
  var valid_21627829 = query.getOrDefault("Action")
  valid_21627829 = validateParameter(valid_21627829, JString, required = true,
                                   default = newJString("GetAccessKeyLastUsed"))
  if valid_21627829 != nil:
    section.add "Action", valid_21627829
  var valid_21627830 = query.getOrDefault("Version")
  valid_21627830 = validateParameter(valid_21627830, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627830 != nil:
    section.add "Version", valid_21627830
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627831 = header.getOrDefault("X-Amz-Date")
  valid_21627831 = validateParameter(valid_21627831, JString, required = false,
                                   default = nil)
  if valid_21627831 != nil:
    section.add "X-Amz-Date", valid_21627831
  var valid_21627832 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627832 = validateParameter(valid_21627832, JString, required = false,
                                   default = nil)
  if valid_21627832 != nil:
    section.add "X-Amz-Security-Token", valid_21627832
  var valid_21627833 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627833 = validateParameter(valid_21627833, JString, required = false,
                                   default = nil)
  if valid_21627833 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627833
  var valid_21627834 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627834 = validateParameter(valid_21627834, JString, required = false,
                                   default = nil)
  if valid_21627834 != nil:
    section.add "X-Amz-Algorithm", valid_21627834
  var valid_21627835 = header.getOrDefault("X-Amz-Signature")
  valid_21627835 = validateParameter(valid_21627835, JString, required = false,
                                   default = nil)
  if valid_21627835 != nil:
    section.add "X-Amz-Signature", valid_21627835
  var valid_21627836 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627836 = validateParameter(valid_21627836, JString, required = false,
                                   default = nil)
  if valid_21627836 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627836
  var valid_21627837 = header.getOrDefault("X-Amz-Credential")
  valid_21627837 = validateParameter(valid_21627837, JString, required = false,
                                   default = nil)
  if valid_21627837 != nil:
    section.add "X-Amz-Credential", valid_21627837
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627838: Call_GetGetAccessKeyLastUsed_21627825;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  let valid = call_21627838.validator(path, query, header, formData, body, _)
  let scheme = call_21627838.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627838.makeUrl(scheme.get, call_21627838.host, call_21627838.base,
                               call_21627838.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627838, uri, valid, _)

proc call*(call_21627839: Call_GetGetAccessKeyLastUsed_21627825;
          AccessKeyId: string; Action: string = "GetAccessKeyLastUsed";
          Version: string = "2010-05-08"): Recallable =
  ## getGetAccessKeyLastUsed
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ##   AccessKeyId: string (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627840 = newJObject()
  add(query_21627840, "AccessKeyId", newJString(AccessKeyId))
  add(query_21627840, "Action", newJString(Action))
  add(query_21627840, "Version", newJString(Version))
  result = call_21627839.call(nil, query_21627840, nil, nil, nil)

var getGetAccessKeyLastUsed* = Call_GetGetAccessKeyLastUsed_21627825(
    name: "getGetAccessKeyLastUsed", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccessKeyLastUsed",
    validator: validate_GetGetAccessKeyLastUsed_21627826, base: "/",
    makeUrl: url_GetGetAccessKeyLastUsed_21627827,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountAuthorizationDetails_21627876 = ref object of OpenApiRestCall_21625435
proc url_PostGetAccountAuthorizationDetails_21627878(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccountAuthorizationDetails_21627877(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627879 = query.getOrDefault("Action")
  valid_21627879 = validateParameter(valid_21627879, JString, required = true, default = newJString(
      "GetAccountAuthorizationDetails"))
  if valid_21627879 != nil:
    section.add "Action", valid_21627879
  var valid_21627880 = query.getOrDefault("Version")
  valid_21627880 = validateParameter(valid_21627880, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627880 != nil:
    section.add "Version", valid_21627880
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627881 = header.getOrDefault("X-Amz-Date")
  valid_21627881 = validateParameter(valid_21627881, JString, required = false,
                                   default = nil)
  if valid_21627881 != nil:
    section.add "X-Amz-Date", valid_21627881
  var valid_21627882 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627882 = validateParameter(valid_21627882, JString, required = false,
                                   default = nil)
  if valid_21627882 != nil:
    section.add "X-Amz-Security-Token", valid_21627882
  var valid_21627883 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627883 = validateParameter(valid_21627883, JString, required = false,
                                   default = nil)
  if valid_21627883 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627883
  var valid_21627884 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627884 = validateParameter(valid_21627884, JString, required = false,
                                   default = nil)
  if valid_21627884 != nil:
    section.add "X-Amz-Algorithm", valid_21627884
  var valid_21627885 = header.getOrDefault("X-Amz-Signature")
  valid_21627885 = validateParameter(valid_21627885, JString, required = false,
                                   default = nil)
  if valid_21627885 != nil:
    section.add "X-Amz-Signature", valid_21627885
  var valid_21627886 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627886 = validateParameter(valid_21627886, JString, required = false,
                                   default = nil)
  if valid_21627886 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627886
  var valid_21627887 = header.getOrDefault("X-Amz-Credential")
  valid_21627887 = validateParameter(valid_21627887, JString, required = false,
                                   default = nil)
  if valid_21627887 != nil:
    section.add "X-Amz-Credential", valid_21627887
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_21627888 = formData.getOrDefault("Filter")
  valid_21627888 = validateParameter(valid_21627888, JArray, required = false,
                                   default = nil)
  if valid_21627888 != nil:
    section.add "Filter", valid_21627888
  var valid_21627889 = formData.getOrDefault("Marker")
  valid_21627889 = validateParameter(valid_21627889, JString, required = false,
                                   default = nil)
  if valid_21627889 != nil:
    section.add "Marker", valid_21627889
  var valid_21627890 = formData.getOrDefault("MaxItems")
  valid_21627890 = validateParameter(valid_21627890, JInt, required = false,
                                   default = nil)
  if valid_21627890 != nil:
    section.add "MaxItems", valid_21627890
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627891: Call_PostGetAccountAuthorizationDetails_21627876;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21627891.validator(path, query, header, formData, body, _)
  let scheme = call_21627891.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627891.makeUrl(scheme.get, call_21627891.host, call_21627891.base,
                               call_21627891.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627891, uri, valid, _)

proc call*(call_21627892: Call_PostGetAccountAuthorizationDetails_21627876;
          Filter: JsonNode = nil; Marker: string = "";
          Action: string = "GetAccountAuthorizationDetails"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetAccountAuthorizationDetails
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21627893 = newJObject()
  var formData_21627894 = newJObject()
  if Filter != nil:
    formData_21627894.add "Filter", Filter
  add(formData_21627894, "Marker", newJString(Marker))
  add(query_21627893, "Action", newJString(Action))
  add(formData_21627894, "MaxItems", newJInt(MaxItems))
  add(query_21627893, "Version", newJString(Version))
  result = call_21627892.call(nil, query_21627893, nil, formData_21627894, nil)

var postGetAccountAuthorizationDetails* = Call_PostGetAccountAuthorizationDetails_21627876(
    name: "postGetAccountAuthorizationDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountAuthorizationDetails",
    validator: validate_PostGetAccountAuthorizationDetails_21627877, base: "/",
    makeUrl: url_PostGetAccountAuthorizationDetails_21627878,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountAuthorizationDetails_21627858 = ref object of OpenApiRestCall_21625435
proc url_GetGetAccountAuthorizationDetails_21627860(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccountAuthorizationDetails_21627859(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627861 = query.getOrDefault("Filter")
  valid_21627861 = validateParameter(valid_21627861, JArray, required = false,
                                   default = nil)
  if valid_21627861 != nil:
    section.add "Filter", valid_21627861
  var valid_21627862 = query.getOrDefault("Action")
  valid_21627862 = validateParameter(valid_21627862, JString, required = true, default = newJString(
      "GetAccountAuthorizationDetails"))
  if valid_21627862 != nil:
    section.add "Action", valid_21627862
  var valid_21627863 = query.getOrDefault("Marker")
  valid_21627863 = validateParameter(valid_21627863, JString, required = false,
                                   default = nil)
  if valid_21627863 != nil:
    section.add "Marker", valid_21627863
  var valid_21627864 = query.getOrDefault("MaxItems")
  valid_21627864 = validateParameter(valid_21627864, JInt, required = false,
                                   default = nil)
  if valid_21627864 != nil:
    section.add "MaxItems", valid_21627864
  var valid_21627865 = query.getOrDefault("Version")
  valid_21627865 = validateParameter(valid_21627865, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627865 != nil:
    section.add "Version", valid_21627865
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627866 = header.getOrDefault("X-Amz-Date")
  valid_21627866 = validateParameter(valid_21627866, JString, required = false,
                                   default = nil)
  if valid_21627866 != nil:
    section.add "X-Amz-Date", valid_21627866
  var valid_21627867 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627867 = validateParameter(valid_21627867, JString, required = false,
                                   default = nil)
  if valid_21627867 != nil:
    section.add "X-Amz-Security-Token", valid_21627867
  var valid_21627868 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627868 = validateParameter(valid_21627868, JString, required = false,
                                   default = nil)
  if valid_21627868 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627868
  var valid_21627869 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627869 = validateParameter(valid_21627869, JString, required = false,
                                   default = nil)
  if valid_21627869 != nil:
    section.add "X-Amz-Algorithm", valid_21627869
  var valid_21627870 = header.getOrDefault("X-Amz-Signature")
  valid_21627870 = validateParameter(valid_21627870, JString, required = false,
                                   default = nil)
  if valid_21627870 != nil:
    section.add "X-Amz-Signature", valid_21627870
  var valid_21627871 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627871 = validateParameter(valid_21627871, JString, required = false,
                                   default = nil)
  if valid_21627871 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627871
  var valid_21627872 = header.getOrDefault("X-Amz-Credential")
  valid_21627872 = validateParameter(valid_21627872, JString, required = false,
                                   default = nil)
  if valid_21627872 != nil:
    section.add "X-Amz-Credential", valid_21627872
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627873: Call_GetGetAccountAuthorizationDetails_21627858;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21627873.validator(path, query, header, formData, body, _)
  let scheme = call_21627873.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627873.makeUrl(scheme.get, call_21627873.host, call_21627873.base,
                               call_21627873.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627873, uri, valid, _)

proc call*(call_21627874: Call_GetGetAccountAuthorizationDetails_21627858;
          Filter: JsonNode = nil; Action: string = "GetAccountAuthorizationDetails";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetAccountAuthorizationDetails
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21627875 = newJObject()
  if Filter != nil:
    query_21627875.add "Filter", Filter
  add(query_21627875, "Action", newJString(Action))
  add(query_21627875, "Marker", newJString(Marker))
  add(query_21627875, "MaxItems", newJInt(MaxItems))
  add(query_21627875, "Version", newJString(Version))
  result = call_21627874.call(nil, query_21627875, nil, nil, nil)

var getGetAccountAuthorizationDetails* = Call_GetGetAccountAuthorizationDetails_21627858(
    name: "getGetAccountAuthorizationDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountAuthorizationDetails",
    validator: validate_GetGetAccountAuthorizationDetails_21627859, base: "/",
    makeUrl: url_GetGetAccountAuthorizationDetails_21627860,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountPasswordPolicy_21627910 = ref object of OpenApiRestCall_21625435
proc url_PostGetAccountPasswordPolicy_21627912(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccountPasswordPolicy_21627911(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627913 = query.getOrDefault("Action")
  valid_21627913 = validateParameter(valid_21627913, JString, required = true, default = newJString(
      "GetAccountPasswordPolicy"))
  if valid_21627913 != nil:
    section.add "Action", valid_21627913
  var valid_21627914 = query.getOrDefault("Version")
  valid_21627914 = validateParameter(valid_21627914, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627914 != nil:
    section.add "Version", valid_21627914
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627915 = header.getOrDefault("X-Amz-Date")
  valid_21627915 = validateParameter(valid_21627915, JString, required = false,
                                   default = nil)
  if valid_21627915 != nil:
    section.add "X-Amz-Date", valid_21627915
  var valid_21627916 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627916 = validateParameter(valid_21627916, JString, required = false,
                                   default = nil)
  if valid_21627916 != nil:
    section.add "X-Amz-Security-Token", valid_21627916
  var valid_21627917 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627917 = validateParameter(valid_21627917, JString, required = false,
                                   default = nil)
  if valid_21627917 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627917
  var valid_21627918 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627918 = validateParameter(valid_21627918, JString, required = false,
                                   default = nil)
  if valid_21627918 != nil:
    section.add "X-Amz-Algorithm", valid_21627918
  var valid_21627919 = header.getOrDefault("X-Amz-Signature")
  valid_21627919 = validateParameter(valid_21627919, JString, required = false,
                                   default = nil)
  if valid_21627919 != nil:
    section.add "X-Amz-Signature", valid_21627919
  var valid_21627920 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627920 = validateParameter(valid_21627920, JString, required = false,
                                   default = nil)
  if valid_21627920 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627920
  var valid_21627921 = header.getOrDefault("X-Amz-Credential")
  valid_21627921 = validateParameter(valid_21627921, JString, required = false,
                                   default = nil)
  if valid_21627921 != nil:
    section.add "X-Amz-Credential", valid_21627921
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627922: Call_PostGetAccountPasswordPolicy_21627910;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  let valid = call_21627922.validator(path, query, header, formData, body, _)
  let scheme = call_21627922.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627922.makeUrl(scheme.get, call_21627922.host, call_21627922.base,
                               call_21627922.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627922, uri, valid, _)

proc call*(call_21627923: Call_PostGetAccountPasswordPolicy_21627910;
          Action: string = "GetAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetAccountPasswordPolicy
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627924 = newJObject()
  add(query_21627924, "Action", newJString(Action))
  add(query_21627924, "Version", newJString(Version))
  result = call_21627923.call(nil, query_21627924, nil, nil, nil)

var postGetAccountPasswordPolicy* = Call_PostGetAccountPasswordPolicy_21627910(
    name: "postGetAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountPasswordPolicy",
    validator: validate_PostGetAccountPasswordPolicy_21627911, base: "/",
    makeUrl: url_PostGetAccountPasswordPolicy_21627912,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountPasswordPolicy_21627895 = ref object of OpenApiRestCall_21625435
proc url_GetGetAccountPasswordPolicy_21627897(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccountPasswordPolicy_21627896(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627898 = query.getOrDefault("Action")
  valid_21627898 = validateParameter(valid_21627898, JString, required = true, default = newJString(
      "GetAccountPasswordPolicy"))
  if valid_21627898 != nil:
    section.add "Action", valid_21627898
  var valid_21627899 = query.getOrDefault("Version")
  valid_21627899 = validateParameter(valid_21627899, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627899 != nil:
    section.add "Version", valid_21627899
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627900 = header.getOrDefault("X-Amz-Date")
  valid_21627900 = validateParameter(valid_21627900, JString, required = false,
                                   default = nil)
  if valid_21627900 != nil:
    section.add "X-Amz-Date", valid_21627900
  var valid_21627901 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627901 = validateParameter(valid_21627901, JString, required = false,
                                   default = nil)
  if valid_21627901 != nil:
    section.add "X-Amz-Security-Token", valid_21627901
  var valid_21627902 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627902 = validateParameter(valid_21627902, JString, required = false,
                                   default = nil)
  if valid_21627902 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627902
  var valid_21627903 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627903 = validateParameter(valid_21627903, JString, required = false,
                                   default = nil)
  if valid_21627903 != nil:
    section.add "X-Amz-Algorithm", valid_21627903
  var valid_21627904 = header.getOrDefault("X-Amz-Signature")
  valid_21627904 = validateParameter(valid_21627904, JString, required = false,
                                   default = nil)
  if valid_21627904 != nil:
    section.add "X-Amz-Signature", valid_21627904
  var valid_21627905 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627905 = validateParameter(valid_21627905, JString, required = false,
                                   default = nil)
  if valid_21627905 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627905
  var valid_21627906 = header.getOrDefault("X-Amz-Credential")
  valid_21627906 = validateParameter(valid_21627906, JString, required = false,
                                   default = nil)
  if valid_21627906 != nil:
    section.add "X-Amz-Credential", valid_21627906
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627907: Call_GetGetAccountPasswordPolicy_21627895;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  let valid = call_21627907.validator(path, query, header, formData, body, _)
  let scheme = call_21627907.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627907.makeUrl(scheme.get, call_21627907.host, call_21627907.base,
                               call_21627907.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627907, uri, valid, _)

proc call*(call_21627908: Call_GetGetAccountPasswordPolicy_21627895;
          Action: string = "GetAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetAccountPasswordPolicy
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627909 = newJObject()
  add(query_21627909, "Action", newJString(Action))
  add(query_21627909, "Version", newJString(Version))
  result = call_21627908.call(nil, query_21627909, nil, nil, nil)

var getGetAccountPasswordPolicy* = Call_GetGetAccountPasswordPolicy_21627895(
    name: "getGetAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountPasswordPolicy",
    validator: validate_GetGetAccountPasswordPolicy_21627896, base: "/",
    makeUrl: url_GetGetAccountPasswordPolicy_21627897,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountSummary_21627940 = ref object of OpenApiRestCall_21625435
proc url_PostGetAccountSummary_21627942(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccountSummary_21627941(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627943 = query.getOrDefault("Action")
  valid_21627943 = validateParameter(valid_21627943, JString, required = true,
                                   default = newJString("GetAccountSummary"))
  if valid_21627943 != nil:
    section.add "Action", valid_21627943
  var valid_21627944 = query.getOrDefault("Version")
  valid_21627944 = validateParameter(valid_21627944, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627944 != nil:
    section.add "Version", valid_21627944
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627945 = header.getOrDefault("X-Amz-Date")
  valid_21627945 = validateParameter(valid_21627945, JString, required = false,
                                   default = nil)
  if valid_21627945 != nil:
    section.add "X-Amz-Date", valid_21627945
  var valid_21627946 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627946 = validateParameter(valid_21627946, JString, required = false,
                                   default = nil)
  if valid_21627946 != nil:
    section.add "X-Amz-Security-Token", valid_21627946
  var valid_21627947 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627947 = validateParameter(valid_21627947, JString, required = false,
                                   default = nil)
  if valid_21627947 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627947
  var valid_21627948 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627948 = validateParameter(valid_21627948, JString, required = false,
                                   default = nil)
  if valid_21627948 != nil:
    section.add "X-Amz-Algorithm", valid_21627948
  var valid_21627949 = header.getOrDefault("X-Amz-Signature")
  valid_21627949 = validateParameter(valid_21627949, JString, required = false,
                                   default = nil)
  if valid_21627949 != nil:
    section.add "X-Amz-Signature", valid_21627949
  var valid_21627950 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627950 = validateParameter(valid_21627950, JString, required = false,
                                   default = nil)
  if valid_21627950 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627950
  var valid_21627951 = header.getOrDefault("X-Amz-Credential")
  valid_21627951 = validateParameter(valid_21627951, JString, required = false,
                                   default = nil)
  if valid_21627951 != nil:
    section.add "X-Amz-Credential", valid_21627951
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627952: Call_PostGetAccountSummary_21627940;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627952.validator(path, query, header, formData, body, _)
  let scheme = call_21627952.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627952.makeUrl(scheme.get, call_21627952.host, call_21627952.base,
                               call_21627952.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627952, uri, valid, _)

proc call*(call_21627953: Call_PostGetAccountSummary_21627940;
          Action: string = "GetAccountSummary"; Version: string = "2010-05-08"): Recallable =
  ## postGetAccountSummary
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627954 = newJObject()
  add(query_21627954, "Action", newJString(Action))
  add(query_21627954, "Version", newJString(Version))
  result = call_21627953.call(nil, query_21627954, nil, nil, nil)

var postGetAccountSummary* = Call_PostGetAccountSummary_21627940(
    name: "postGetAccountSummary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountSummary",
    validator: validate_PostGetAccountSummary_21627941, base: "/",
    makeUrl: url_PostGetAccountSummary_21627942,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountSummary_21627925 = ref object of OpenApiRestCall_21625435
proc url_GetGetAccountSummary_21627927(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccountSummary_21627926(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627928 = query.getOrDefault("Action")
  valid_21627928 = validateParameter(valid_21627928, JString, required = true,
                                   default = newJString("GetAccountSummary"))
  if valid_21627928 != nil:
    section.add "Action", valid_21627928
  var valid_21627929 = query.getOrDefault("Version")
  valid_21627929 = validateParameter(valid_21627929, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627929 != nil:
    section.add "Version", valid_21627929
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627930 = header.getOrDefault("X-Amz-Date")
  valid_21627930 = validateParameter(valid_21627930, JString, required = false,
                                   default = nil)
  if valid_21627930 != nil:
    section.add "X-Amz-Date", valid_21627930
  var valid_21627931 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627931 = validateParameter(valid_21627931, JString, required = false,
                                   default = nil)
  if valid_21627931 != nil:
    section.add "X-Amz-Security-Token", valid_21627931
  var valid_21627932 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627932 = validateParameter(valid_21627932, JString, required = false,
                                   default = nil)
  if valid_21627932 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627932
  var valid_21627933 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627933 = validateParameter(valid_21627933, JString, required = false,
                                   default = nil)
  if valid_21627933 != nil:
    section.add "X-Amz-Algorithm", valid_21627933
  var valid_21627934 = header.getOrDefault("X-Amz-Signature")
  valid_21627934 = validateParameter(valid_21627934, JString, required = false,
                                   default = nil)
  if valid_21627934 != nil:
    section.add "X-Amz-Signature", valid_21627934
  var valid_21627935 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627935 = validateParameter(valid_21627935, JString, required = false,
                                   default = nil)
  if valid_21627935 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627935
  var valid_21627936 = header.getOrDefault("X-Amz-Credential")
  valid_21627936 = validateParameter(valid_21627936, JString, required = false,
                                   default = nil)
  if valid_21627936 != nil:
    section.add "X-Amz-Credential", valid_21627936
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627937: Call_GetGetAccountSummary_21627925; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21627937.validator(path, query, header, formData, body, _)
  let scheme = call_21627937.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627937.makeUrl(scheme.get, call_21627937.host, call_21627937.base,
                               call_21627937.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627937, uri, valid, _)

proc call*(call_21627938: Call_GetGetAccountSummary_21627925;
          Action: string = "GetAccountSummary"; Version: string = "2010-05-08"): Recallable =
  ## getGetAccountSummary
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627939 = newJObject()
  add(query_21627939, "Action", newJString(Action))
  add(query_21627939, "Version", newJString(Version))
  result = call_21627938.call(nil, query_21627939, nil, nil, nil)

var getGetAccountSummary* = Call_GetGetAccountSummary_21627925(
    name: "getGetAccountSummary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountSummary",
    validator: validate_GetGetAccountSummary_21627926, base: "/",
    makeUrl: url_GetGetAccountSummary_21627927,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetContextKeysForCustomPolicy_21627971 = ref object of OpenApiRestCall_21625435
proc url_PostGetContextKeysForCustomPolicy_21627973(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetContextKeysForCustomPolicy_21627972(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627974 = query.getOrDefault("Action")
  valid_21627974 = validateParameter(valid_21627974, JString, required = true, default = newJString(
      "GetContextKeysForCustomPolicy"))
  if valid_21627974 != nil:
    section.add "Action", valid_21627974
  var valid_21627975 = query.getOrDefault("Version")
  valid_21627975 = validateParameter(valid_21627975, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627975 != nil:
    section.add "Version", valid_21627975
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627976 = header.getOrDefault("X-Amz-Date")
  valid_21627976 = validateParameter(valid_21627976, JString, required = false,
                                   default = nil)
  if valid_21627976 != nil:
    section.add "X-Amz-Date", valid_21627976
  var valid_21627977 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627977 = validateParameter(valid_21627977, JString, required = false,
                                   default = nil)
  if valid_21627977 != nil:
    section.add "X-Amz-Security-Token", valid_21627977
  var valid_21627978 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627978 = validateParameter(valid_21627978, JString, required = false,
                                   default = nil)
  if valid_21627978 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627978
  var valid_21627979 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627979 = validateParameter(valid_21627979, JString, required = false,
                                   default = nil)
  if valid_21627979 != nil:
    section.add "X-Amz-Algorithm", valid_21627979
  var valid_21627980 = header.getOrDefault("X-Amz-Signature")
  valid_21627980 = validateParameter(valid_21627980, JString, required = false,
                                   default = nil)
  if valid_21627980 != nil:
    section.add "X-Amz-Signature", valid_21627980
  var valid_21627981 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627981 = validateParameter(valid_21627981, JString, required = false,
                                   default = nil)
  if valid_21627981 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627981
  var valid_21627982 = header.getOrDefault("X-Amz-Credential")
  valid_21627982 = validateParameter(valid_21627982, JString, required = false,
                                   default = nil)
  if valid_21627982 != nil:
    section.add "X-Amz-Credential", valid_21627982
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `PolicyInputList` field"
  var valid_21627983 = formData.getOrDefault("PolicyInputList")
  valid_21627983 = validateParameter(valid_21627983, JArray, required = true,
                                   default = nil)
  if valid_21627983 != nil:
    section.add "PolicyInputList", valid_21627983
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627984: Call_PostGetContextKeysForCustomPolicy_21627971;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  let valid = call_21627984.validator(path, query, header, formData, body, _)
  let scheme = call_21627984.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627984.makeUrl(scheme.get, call_21627984.host, call_21627984.base,
                               call_21627984.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627984, uri, valid, _)

proc call*(call_21627985: Call_PostGetContextKeysForCustomPolicy_21627971;
          PolicyInputList: JsonNode;
          Action: string = "GetContextKeysForCustomPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetContextKeysForCustomPolicy
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ##   Action: string (required)
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Version: string (required)
  var query_21627986 = newJObject()
  var formData_21627987 = newJObject()
  add(query_21627986, "Action", newJString(Action))
  if PolicyInputList != nil:
    formData_21627987.add "PolicyInputList", PolicyInputList
  add(query_21627986, "Version", newJString(Version))
  result = call_21627985.call(nil, query_21627986, nil, formData_21627987, nil)

var postGetContextKeysForCustomPolicy* = Call_PostGetContextKeysForCustomPolicy_21627971(
    name: "postGetContextKeysForCustomPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForCustomPolicy",
    validator: validate_PostGetContextKeysForCustomPolicy_21627972, base: "/",
    makeUrl: url_PostGetContextKeysForCustomPolicy_21627973,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetContextKeysForCustomPolicy_21627955 = ref object of OpenApiRestCall_21625435
proc url_GetGetContextKeysForCustomPolicy_21627957(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetContextKeysForCustomPolicy_21627956(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyInputList` field"
  var valid_21627958 = query.getOrDefault("PolicyInputList")
  valid_21627958 = validateParameter(valid_21627958, JArray, required = true,
                                   default = nil)
  if valid_21627958 != nil:
    section.add "PolicyInputList", valid_21627958
  var valid_21627959 = query.getOrDefault("Action")
  valid_21627959 = validateParameter(valid_21627959, JString, required = true, default = newJString(
      "GetContextKeysForCustomPolicy"))
  if valid_21627959 != nil:
    section.add "Action", valid_21627959
  var valid_21627960 = query.getOrDefault("Version")
  valid_21627960 = validateParameter(valid_21627960, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627960 != nil:
    section.add "Version", valid_21627960
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627961 = header.getOrDefault("X-Amz-Date")
  valid_21627961 = validateParameter(valid_21627961, JString, required = false,
                                   default = nil)
  if valid_21627961 != nil:
    section.add "X-Amz-Date", valid_21627961
  var valid_21627962 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627962 = validateParameter(valid_21627962, JString, required = false,
                                   default = nil)
  if valid_21627962 != nil:
    section.add "X-Amz-Security-Token", valid_21627962
  var valid_21627963 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627963 = validateParameter(valid_21627963, JString, required = false,
                                   default = nil)
  if valid_21627963 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627963
  var valid_21627964 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627964 = validateParameter(valid_21627964, JString, required = false,
                                   default = nil)
  if valid_21627964 != nil:
    section.add "X-Amz-Algorithm", valid_21627964
  var valid_21627965 = header.getOrDefault("X-Amz-Signature")
  valid_21627965 = validateParameter(valid_21627965, JString, required = false,
                                   default = nil)
  if valid_21627965 != nil:
    section.add "X-Amz-Signature", valid_21627965
  var valid_21627966 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627966 = validateParameter(valid_21627966, JString, required = false,
                                   default = nil)
  if valid_21627966 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627966
  var valid_21627967 = header.getOrDefault("X-Amz-Credential")
  valid_21627967 = validateParameter(valid_21627967, JString, required = false,
                                   default = nil)
  if valid_21627967 != nil:
    section.add "X-Amz-Credential", valid_21627967
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627968: Call_GetGetContextKeysForCustomPolicy_21627955;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  let valid = call_21627968.validator(path, query, header, formData, body, _)
  let scheme = call_21627968.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627968.makeUrl(scheme.get, call_21627968.host, call_21627968.base,
                               call_21627968.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627968, uri, valid, _)

proc call*(call_21627969: Call_GetGetContextKeysForCustomPolicy_21627955;
          PolicyInputList: JsonNode;
          Action: string = "GetContextKeysForCustomPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetContextKeysForCustomPolicy
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627970 = newJObject()
  if PolicyInputList != nil:
    query_21627970.add "PolicyInputList", PolicyInputList
  add(query_21627970, "Action", newJString(Action))
  add(query_21627970, "Version", newJString(Version))
  result = call_21627969.call(nil, query_21627970, nil, nil, nil)

var getGetContextKeysForCustomPolicy* = Call_GetGetContextKeysForCustomPolicy_21627955(
    name: "getGetContextKeysForCustomPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForCustomPolicy",
    validator: validate_GetGetContextKeysForCustomPolicy_21627956, base: "/",
    makeUrl: url_GetGetContextKeysForCustomPolicy_21627957,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetContextKeysForPrincipalPolicy_21628005 = ref object of OpenApiRestCall_21625435
proc url_PostGetContextKeysForPrincipalPolicy_21628007(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetContextKeysForPrincipalPolicy_21628006(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628008 = query.getOrDefault("Action")
  valid_21628008 = validateParameter(valid_21628008, JString, required = true, default = newJString(
      "GetContextKeysForPrincipalPolicy"))
  if valid_21628008 != nil:
    section.add "Action", valid_21628008
  var valid_21628009 = query.getOrDefault("Version")
  valid_21628009 = validateParameter(valid_21628009, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628009 != nil:
    section.add "Version", valid_21628009
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628010 = header.getOrDefault("X-Amz-Date")
  valid_21628010 = validateParameter(valid_21628010, JString, required = false,
                                   default = nil)
  if valid_21628010 != nil:
    section.add "X-Amz-Date", valid_21628010
  var valid_21628011 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628011 = validateParameter(valid_21628011, JString, required = false,
                                   default = nil)
  if valid_21628011 != nil:
    section.add "X-Amz-Security-Token", valid_21628011
  var valid_21628012 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628012 = validateParameter(valid_21628012, JString, required = false,
                                   default = nil)
  if valid_21628012 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628012
  var valid_21628013 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628013 = validateParameter(valid_21628013, JString, required = false,
                                   default = nil)
  if valid_21628013 != nil:
    section.add "X-Amz-Algorithm", valid_21628013
  var valid_21628014 = header.getOrDefault("X-Amz-Signature")
  valid_21628014 = validateParameter(valid_21628014, JString, required = false,
                                   default = nil)
  if valid_21628014 != nil:
    section.add "X-Amz-Signature", valid_21628014
  var valid_21628015 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628015 = validateParameter(valid_21628015, JString, required = false,
                                   default = nil)
  if valid_21628015 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628015
  var valid_21628016 = header.getOrDefault("X-Amz-Credential")
  valid_21628016 = validateParameter(valid_21628016, JString, required = false,
                                   default = nil)
  if valid_21628016 != nil:
    section.add "X-Amz-Credential", valid_21628016
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  var valid_21628017 = formData.getOrDefault("PolicyInputList")
  valid_21628017 = validateParameter(valid_21628017, JArray, required = false,
                                   default = nil)
  if valid_21628017 != nil:
    section.add "PolicyInputList", valid_21628017
  assert formData != nil, "formData argument is necessary due to required `PolicySourceArn` field"
  var valid_21628018 = formData.getOrDefault("PolicySourceArn")
  valid_21628018 = validateParameter(valid_21628018, JString, required = true,
                                   default = nil)
  if valid_21628018 != nil:
    section.add "PolicySourceArn", valid_21628018
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628019: Call_PostGetContextKeysForPrincipalPolicy_21628005;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  let valid = call_21628019.validator(path, query, header, formData, body, _)
  let scheme = call_21628019.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628019.makeUrl(scheme.get, call_21628019.host, call_21628019.base,
                               call_21628019.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628019, uri, valid, _)

proc call*(call_21628020: Call_PostGetContextKeysForPrincipalPolicy_21628005;
          PolicySourceArn: string;
          Action: string = "GetContextKeysForPrincipalPolicy";
          PolicyInputList: JsonNode = nil; Version: string = "2010-05-08"): Recallable =
  ## postGetContextKeysForPrincipalPolicy
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ##   Action: string (required)
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_21628021 = newJObject()
  var formData_21628022 = newJObject()
  add(query_21628021, "Action", newJString(Action))
  if PolicyInputList != nil:
    formData_21628022.add "PolicyInputList", PolicyInputList
  add(formData_21628022, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_21628021, "Version", newJString(Version))
  result = call_21628020.call(nil, query_21628021, nil, formData_21628022, nil)

var postGetContextKeysForPrincipalPolicy* = Call_PostGetContextKeysForPrincipalPolicy_21628005(
    name: "postGetContextKeysForPrincipalPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForPrincipalPolicy",
    validator: validate_PostGetContextKeysForPrincipalPolicy_21628006, base: "/",
    makeUrl: url_PostGetContextKeysForPrincipalPolicy_21628007,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetContextKeysForPrincipalPolicy_21627988 = ref object of OpenApiRestCall_21625435
proc url_GetGetContextKeysForPrincipalPolicy_21627990(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetContextKeysForPrincipalPolicy_21627989(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627991 = query.getOrDefault("PolicyInputList")
  valid_21627991 = validateParameter(valid_21627991, JArray, required = false,
                                   default = nil)
  if valid_21627991 != nil:
    section.add "PolicyInputList", valid_21627991
  assert query != nil,
        "query argument is necessary due to required `PolicySourceArn` field"
  var valid_21627992 = query.getOrDefault("PolicySourceArn")
  valid_21627992 = validateParameter(valid_21627992, JString, required = true,
                                   default = nil)
  if valid_21627992 != nil:
    section.add "PolicySourceArn", valid_21627992
  var valid_21627993 = query.getOrDefault("Action")
  valid_21627993 = validateParameter(valid_21627993, JString, required = true, default = newJString(
      "GetContextKeysForPrincipalPolicy"))
  if valid_21627993 != nil:
    section.add "Action", valid_21627993
  var valid_21627994 = query.getOrDefault("Version")
  valid_21627994 = validateParameter(valid_21627994, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21627994 != nil:
    section.add "Version", valid_21627994
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627995 = header.getOrDefault("X-Amz-Date")
  valid_21627995 = validateParameter(valid_21627995, JString, required = false,
                                   default = nil)
  if valid_21627995 != nil:
    section.add "X-Amz-Date", valid_21627995
  var valid_21627996 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627996 = validateParameter(valid_21627996, JString, required = false,
                                   default = nil)
  if valid_21627996 != nil:
    section.add "X-Amz-Security-Token", valid_21627996
  var valid_21627997 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627997 = validateParameter(valid_21627997, JString, required = false,
                                   default = nil)
  if valid_21627997 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627997
  var valid_21627998 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627998 = validateParameter(valid_21627998, JString, required = false,
                                   default = nil)
  if valid_21627998 != nil:
    section.add "X-Amz-Algorithm", valid_21627998
  var valid_21627999 = header.getOrDefault("X-Amz-Signature")
  valid_21627999 = validateParameter(valid_21627999, JString, required = false,
                                   default = nil)
  if valid_21627999 != nil:
    section.add "X-Amz-Signature", valid_21627999
  var valid_21628000 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628000 = validateParameter(valid_21628000, JString, required = false,
                                   default = nil)
  if valid_21628000 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628000
  var valid_21628001 = header.getOrDefault("X-Amz-Credential")
  valid_21628001 = validateParameter(valid_21628001, JString, required = false,
                                   default = nil)
  if valid_21628001 != nil:
    section.add "X-Amz-Credential", valid_21628001
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628002: Call_GetGetContextKeysForPrincipalPolicy_21627988;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  let valid = call_21628002.validator(path, query, header, formData, body, _)
  let scheme = call_21628002.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628002.makeUrl(scheme.get, call_21628002.host, call_21628002.base,
                               call_21628002.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628002, uri, valid, _)

proc call*(call_21628003: Call_GetGetContextKeysForPrincipalPolicy_21627988;
          PolicySourceArn: string; PolicyInputList: JsonNode = nil;
          Action: string = "GetContextKeysForPrincipalPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetContextKeysForPrincipalPolicy
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628004 = newJObject()
  if PolicyInputList != nil:
    query_21628004.add "PolicyInputList", PolicyInputList
  add(query_21628004, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_21628004, "Action", newJString(Action))
  add(query_21628004, "Version", newJString(Version))
  result = call_21628003.call(nil, query_21628004, nil, nil, nil)

var getGetContextKeysForPrincipalPolicy* = Call_GetGetContextKeysForPrincipalPolicy_21627988(
    name: "getGetContextKeysForPrincipalPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForPrincipalPolicy",
    validator: validate_GetGetContextKeysForPrincipalPolicy_21627989, base: "/",
    makeUrl: url_GetGetContextKeysForPrincipalPolicy_21627990,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetCredentialReport_21628038 = ref object of OpenApiRestCall_21625435
proc url_PostGetCredentialReport_21628040(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetCredentialReport_21628039(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628041 = query.getOrDefault("Action")
  valid_21628041 = validateParameter(valid_21628041, JString, required = true,
                                   default = newJString("GetCredentialReport"))
  if valid_21628041 != nil:
    section.add "Action", valid_21628041
  var valid_21628042 = query.getOrDefault("Version")
  valid_21628042 = validateParameter(valid_21628042, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628042 != nil:
    section.add "Version", valid_21628042
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628043 = header.getOrDefault("X-Amz-Date")
  valid_21628043 = validateParameter(valid_21628043, JString, required = false,
                                   default = nil)
  if valid_21628043 != nil:
    section.add "X-Amz-Date", valid_21628043
  var valid_21628044 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628044 = validateParameter(valid_21628044, JString, required = false,
                                   default = nil)
  if valid_21628044 != nil:
    section.add "X-Amz-Security-Token", valid_21628044
  var valid_21628045 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628045 = validateParameter(valid_21628045, JString, required = false,
                                   default = nil)
  if valid_21628045 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628045
  var valid_21628046 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628046 = validateParameter(valid_21628046, JString, required = false,
                                   default = nil)
  if valid_21628046 != nil:
    section.add "X-Amz-Algorithm", valid_21628046
  var valid_21628047 = header.getOrDefault("X-Amz-Signature")
  valid_21628047 = validateParameter(valid_21628047, JString, required = false,
                                   default = nil)
  if valid_21628047 != nil:
    section.add "X-Amz-Signature", valid_21628047
  var valid_21628048 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628048 = validateParameter(valid_21628048, JString, required = false,
                                   default = nil)
  if valid_21628048 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628048
  var valid_21628049 = header.getOrDefault("X-Amz-Credential")
  valid_21628049 = validateParameter(valid_21628049, JString, required = false,
                                   default = nil)
  if valid_21628049 != nil:
    section.add "X-Amz-Credential", valid_21628049
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628050: Call_PostGetCredentialReport_21628038;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21628050.validator(path, query, header, formData, body, _)
  let scheme = call_21628050.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628050.makeUrl(scheme.get, call_21628050.host, call_21628050.base,
                               call_21628050.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628050, uri, valid, _)

proc call*(call_21628051: Call_PostGetCredentialReport_21628038;
          Action: string = "GetCredentialReport"; Version: string = "2010-05-08"): Recallable =
  ## postGetCredentialReport
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628052 = newJObject()
  add(query_21628052, "Action", newJString(Action))
  add(query_21628052, "Version", newJString(Version))
  result = call_21628051.call(nil, query_21628052, nil, nil, nil)

var postGetCredentialReport* = Call_PostGetCredentialReport_21628038(
    name: "postGetCredentialReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetCredentialReport",
    validator: validate_PostGetCredentialReport_21628039, base: "/",
    makeUrl: url_PostGetCredentialReport_21628040,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetCredentialReport_21628023 = ref object of OpenApiRestCall_21625435
proc url_GetGetCredentialReport_21628025(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetCredentialReport_21628024(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628026 = query.getOrDefault("Action")
  valid_21628026 = validateParameter(valid_21628026, JString, required = true,
                                   default = newJString("GetCredentialReport"))
  if valid_21628026 != nil:
    section.add "Action", valid_21628026
  var valid_21628027 = query.getOrDefault("Version")
  valid_21628027 = validateParameter(valid_21628027, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628027 != nil:
    section.add "Version", valid_21628027
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628028 = header.getOrDefault("X-Amz-Date")
  valid_21628028 = validateParameter(valid_21628028, JString, required = false,
                                   default = nil)
  if valid_21628028 != nil:
    section.add "X-Amz-Date", valid_21628028
  var valid_21628029 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628029 = validateParameter(valid_21628029, JString, required = false,
                                   default = nil)
  if valid_21628029 != nil:
    section.add "X-Amz-Security-Token", valid_21628029
  var valid_21628030 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628030 = validateParameter(valid_21628030, JString, required = false,
                                   default = nil)
  if valid_21628030 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628030
  var valid_21628031 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628031 = validateParameter(valid_21628031, JString, required = false,
                                   default = nil)
  if valid_21628031 != nil:
    section.add "X-Amz-Algorithm", valid_21628031
  var valid_21628032 = header.getOrDefault("X-Amz-Signature")
  valid_21628032 = validateParameter(valid_21628032, JString, required = false,
                                   default = nil)
  if valid_21628032 != nil:
    section.add "X-Amz-Signature", valid_21628032
  var valid_21628033 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628033 = validateParameter(valid_21628033, JString, required = false,
                                   default = nil)
  if valid_21628033 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628033
  var valid_21628034 = header.getOrDefault("X-Amz-Credential")
  valid_21628034 = validateParameter(valid_21628034, JString, required = false,
                                   default = nil)
  if valid_21628034 != nil:
    section.add "X-Amz-Credential", valid_21628034
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628035: Call_GetGetCredentialReport_21628023;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21628035.validator(path, query, header, formData, body, _)
  let scheme = call_21628035.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628035.makeUrl(scheme.get, call_21628035.host, call_21628035.base,
                               call_21628035.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628035, uri, valid, _)

proc call*(call_21628036: Call_GetGetCredentialReport_21628023;
          Action: string = "GetCredentialReport"; Version: string = "2010-05-08"): Recallable =
  ## getGetCredentialReport
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628037 = newJObject()
  add(query_21628037, "Action", newJString(Action))
  add(query_21628037, "Version", newJString(Version))
  result = call_21628036.call(nil, query_21628037, nil, nil, nil)

var getGetCredentialReport* = Call_GetGetCredentialReport_21628023(
    name: "getGetCredentialReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetCredentialReport",
    validator: validate_GetGetCredentialReport_21628024, base: "/",
    makeUrl: url_GetGetCredentialReport_21628025,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetGroup_21628071 = ref object of OpenApiRestCall_21625435
proc url_PostGetGroup_21628073(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetGroup_21628072(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628074 = query.getOrDefault("Action")
  valid_21628074 = validateParameter(valid_21628074, JString, required = true,
                                   default = newJString("GetGroup"))
  if valid_21628074 != nil:
    section.add "Action", valid_21628074
  var valid_21628075 = query.getOrDefault("Version")
  valid_21628075 = validateParameter(valid_21628075, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628075 != nil:
    section.add "Version", valid_21628075
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628076 = header.getOrDefault("X-Amz-Date")
  valid_21628076 = validateParameter(valid_21628076, JString, required = false,
                                   default = nil)
  if valid_21628076 != nil:
    section.add "X-Amz-Date", valid_21628076
  var valid_21628077 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628077 = validateParameter(valid_21628077, JString, required = false,
                                   default = nil)
  if valid_21628077 != nil:
    section.add "X-Amz-Security-Token", valid_21628077
  var valid_21628078 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628078 = validateParameter(valid_21628078, JString, required = false,
                                   default = nil)
  if valid_21628078 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628078
  var valid_21628079 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628079 = validateParameter(valid_21628079, JString, required = false,
                                   default = nil)
  if valid_21628079 != nil:
    section.add "X-Amz-Algorithm", valid_21628079
  var valid_21628080 = header.getOrDefault("X-Amz-Signature")
  valid_21628080 = validateParameter(valid_21628080, JString, required = false,
                                   default = nil)
  if valid_21628080 != nil:
    section.add "X-Amz-Signature", valid_21628080
  var valid_21628081 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628081 = validateParameter(valid_21628081, JString, required = false,
                                   default = nil)
  if valid_21628081 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628081
  var valid_21628082 = header.getOrDefault("X-Amz-Credential")
  valid_21628082 = validateParameter(valid_21628082, JString, required = false,
                                   default = nil)
  if valid_21628082 != nil:
    section.add "X-Amz-Credential", valid_21628082
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_21628083 = formData.getOrDefault("GroupName")
  valid_21628083 = validateParameter(valid_21628083, JString, required = true,
                                   default = nil)
  if valid_21628083 != nil:
    section.add "GroupName", valid_21628083
  var valid_21628084 = formData.getOrDefault("Marker")
  valid_21628084 = validateParameter(valid_21628084, JString, required = false,
                                   default = nil)
  if valid_21628084 != nil:
    section.add "Marker", valid_21628084
  var valid_21628085 = formData.getOrDefault("MaxItems")
  valid_21628085 = validateParameter(valid_21628085, JInt, required = false,
                                   default = nil)
  if valid_21628085 != nil:
    section.add "MaxItems", valid_21628085
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628086: Call_PostGetGroup_21628071; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  let valid = call_21628086.validator(path, query, header, formData, body, _)
  let scheme = call_21628086.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628086.makeUrl(scheme.get, call_21628086.host, call_21628086.base,
                               call_21628086.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628086, uri, valid, _)

proc call*(call_21628087: Call_PostGetGroup_21628071; GroupName: string;
          Marker: string = ""; Action: string = "GetGroup"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetGroup
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ##   GroupName: string (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628088 = newJObject()
  var formData_21628089 = newJObject()
  add(formData_21628089, "GroupName", newJString(GroupName))
  add(formData_21628089, "Marker", newJString(Marker))
  add(query_21628088, "Action", newJString(Action))
  add(formData_21628089, "MaxItems", newJInt(MaxItems))
  add(query_21628088, "Version", newJString(Version))
  result = call_21628087.call(nil, query_21628088, nil, formData_21628089, nil)

var postGetGroup* = Call_PostGetGroup_21628071(name: "postGetGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetGroup", validator: validate_PostGetGroup_21628072,
    base: "/", makeUrl: url_PostGetGroup_21628073,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetGroup_21628053 = ref object of OpenApiRestCall_21625435
proc url_GetGetGroup_21628055(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetGroup_21628054(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628056 = query.getOrDefault("Action")
  valid_21628056 = validateParameter(valid_21628056, JString, required = true,
                                   default = newJString("GetGroup"))
  if valid_21628056 != nil:
    section.add "Action", valid_21628056
  var valid_21628057 = query.getOrDefault("Marker")
  valid_21628057 = validateParameter(valid_21628057, JString, required = false,
                                   default = nil)
  if valid_21628057 != nil:
    section.add "Marker", valid_21628057
  var valid_21628058 = query.getOrDefault("GroupName")
  valid_21628058 = validateParameter(valid_21628058, JString, required = true,
                                   default = nil)
  if valid_21628058 != nil:
    section.add "GroupName", valid_21628058
  var valid_21628059 = query.getOrDefault("MaxItems")
  valid_21628059 = validateParameter(valid_21628059, JInt, required = false,
                                   default = nil)
  if valid_21628059 != nil:
    section.add "MaxItems", valid_21628059
  var valid_21628060 = query.getOrDefault("Version")
  valid_21628060 = validateParameter(valid_21628060, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628060 != nil:
    section.add "Version", valid_21628060
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628061 = header.getOrDefault("X-Amz-Date")
  valid_21628061 = validateParameter(valid_21628061, JString, required = false,
                                   default = nil)
  if valid_21628061 != nil:
    section.add "X-Amz-Date", valid_21628061
  var valid_21628062 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628062 = validateParameter(valid_21628062, JString, required = false,
                                   default = nil)
  if valid_21628062 != nil:
    section.add "X-Amz-Security-Token", valid_21628062
  var valid_21628063 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628063 = validateParameter(valid_21628063, JString, required = false,
                                   default = nil)
  if valid_21628063 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628063
  var valid_21628064 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628064 = validateParameter(valid_21628064, JString, required = false,
                                   default = nil)
  if valid_21628064 != nil:
    section.add "X-Amz-Algorithm", valid_21628064
  var valid_21628065 = header.getOrDefault("X-Amz-Signature")
  valid_21628065 = validateParameter(valid_21628065, JString, required = false,
                                   default = nil)
  if valid_21628065 != nil:
    section.add "X-Amz-Signature", valid_21628065
  var valid_21628066 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628066 = validateParameter(valid_21628066, JString, required = false,
                                   default = nil)
  if valid_21628066 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628066
  var valid_21628067 = header.getOrDefault("X-Amz-Credential")
  valid_21628067 = validateParameter(valid_21628067, JString, required = false,
                                   default = nil)
  if valid_21628067 != nil:
    section.add "X-Amz-Credential", valid_21628067
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628068: Call_GetGetGroup_21628053; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  let valid = call_21628068.validator(path, query, header, formData, body, _)
  let scheme = call_21628068.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628068.makeUrl(scheme.get, call_21628068.host, call_21628068.base,
                               call_21628068.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628068, uri, valid, _)

proc call*(call_21628069: Call_GetGetGroup_21628053; GroupName: string;
          Action: string = "GetGroup"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getGetGroup
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628070 = newJObject()
  add(query_21628070, "Action", newJString(Action))
  add(query_21628070, "Marker", newJString(Marker))
  add(query_21628070, "GroupName", newJString(GroupName))
  add(query_21628070, "MaxItems", newJInt(MaxItems))
  add(query_21628070, "Version", newJString(Version))
  result = call_21628069.call(nil, query_21628070, nil, nil, nil)

var getGetGroup* = Call_GetGetGroup_21628053(name: "getGetGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com", route: "/#Action=GetGroup",
    validator: validate_GetGetGroup_21628054, base: "/", makeUrl: url_GetGetGroup_21628055,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetGroupPolicy_21628107 = ref object of OpenApiRestCall_21625435
proc url_PostGetGroupPolicy_21628109(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetGroupPolicy_21628108(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628110 = query.getOrDefault("Action")
  valid_21628110 = validateParameter(valid_21628110, JString, required = true,
                                   default = newJString("GetGroupPolicy"))
  if valid_21628110 != nil:
    section.add "Action", valid_21628110
  var valid_21628111 = query.getOrDefault("Version")
  valid_21628111 = validateParameter(valid_21628111, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628111 != nil:
    section.add "Version", valid_21628111
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628112 = header.getOrDefault("X-Amz-Date")
  valid_21628112 = validateParameter(valid_21628112, JString, required = false,
                                   default = nil)
  if valid_21628112 != nil:
    section.add "X-Amz-Date", valid_21628112
  var valid_21628113 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628113 = validateParameter(valid_21628113, JString, required = false,
                                   default = nil)
  if valid_21628113 != nil:
    section.add "X-Amz-Security-Token", valid_21628113
  var valid_21628114 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628114 = validateParameter(valid_21628114, JString, required = false,
                                   default = nil)
  if valid_21628114 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628114
  var valid_21628115 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628115 = validateParameter(valid_21628115, JString, required = false,
                                   default = nil)
  if valid_21628115 != nil:
    section.add "X-Amz-Algorithm", valid_21628115
  var valid_21628116 = header.getOrDefault("X-Amz-Signature")
  valid_21628116 = validateParameter(valid_21628116, JString, required = false,
                                   default = nil)
  if valid_21628116 != nil:
    section.add "X-Amz-Signature", valid_21628116
  var valid_21628117 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628117 = validateParameter(valid_21628117, JString, required = false,
                                   default = nil)
  if valid_21628117 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628117
  var valid_21628118 = header.getOrDefault("X-Amz-Credential")
  valid_21628118 = validateParameter(valid_21628118, JString, required = false,
                                   default = nil)
  if valid_21628118 != nil:
    section.add "X-Amz-Credential", valid_21628118
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_21628119 = formData.getOrDefault("PolicyName")
  valid_21628119 = validateParameter(valid_21628119, JString, required = true,
                                   default = nil)
  if valid_21628119 != nil:
    section.add "PolicyName", valid_21628119
  var valid_21628120 = formData.getOrDefault("GroupName")
  valid_21628120 = validateParameter(valid_21628120, JString, required = true,
                                   default = nil)
  if valid_21628120 != nil:
    section.add "GroupName", valid_21628120
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628121: Call_PostGetGroupPolicy_21628107; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21628121.validator(path, query, header, formData, body, _)
  let scheme = call_21628121.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628121.makeUrl(scheme.get, call_21628121.host, call_21628121.base,
                               call_21628121.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628121, uri, valid, _)

proc call*(call_21628122: Call_PostGetGroupPolicy_21628107; PolicyName: string;
          GroupName: string; Action: string = "GetGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetGroupPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628123 = newJObject()
  var formData_21628124 = newJObject()
  add(formData_21628124, "PolicyName", newJString(PolicyName))
  add(formData_21628124, "GroupName", newJString(GroupName))
  add(query_21628123, "Action", newJString(Action))
  add(query_21628123, "Version", newJString(Version))
  result = call_21628122.call(nil, query_21628123, nil, formData_21628124, nil)

var postGetGroupPolicy* = Call_PostGetGroupPolicy_21628107(
    name: "postGetGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetGroupPolicy",
    validator: validate_PostGetGroupPolicy_21628108, base: "/",
    makeUrl: url_PostGetGroupPolicy_21628109, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetGroupPolicy_21628090 = ref object of OpenApiRestCall_21625435
proc url_GetGetGroupPolicy_21628092(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetGroupPolicy_21628091(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_21628093 = query.getOrDefault("Action")
  valid_21628093 = validateParameter(valid_21628093, JString, required = true,
                                   default = newJString("GetGroupPolicy"))
  if valid_21628093 != nil:
    section.add "Action", valid_21628093
  var valid_21628094 = query.getOrDefault("GroupName")
  valid_21628094 = validateParameter(valid_21628094, JString, required = true,
                                   default = nil)
  if valid_21628094 != nil:
    section.add "GroupName", valid_21628094
  var valid_21628095 = query.getOrDefault("Version")
  valid_21628095 = validateParameter(valid_21628095, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628095 != nil:
    section.add "Version", valid_21628095
  var valid_21628096 = query.getOrDefault("PolicyName")
  valid_21628096 = validateParameter(valid_21628096, JString, required = true,
                                   default = nil)
  if valid_21628096 != nil:
    section.add "PolicyName", valid_21628096
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628097 = header.getOrDefault("X-Amz-Date")
  valid_21628097 = validateParameter(valid_21628097, JString, required = false,
                                   default = nil)
  if valid_21628097 != nil:
    section.add "X-Amz-Date", valid_21628097
  var valid_21628098 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628098 = validateParameter(valid_21628098, JString, required = false,
                                   default = nil)
  if valid_21628098 != nil:
    section.add "X-Amz-Security-Token", valid_21628098
  var valid_21628099 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628099 = validateParameter(valid_21628099, JString, required = false,
                                   default = nil)
  if valid_21628099 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628099
  var valid_21628100 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628100 = validateParameter(valid_21628100, JString, required = false,
                                   default = nil)
  if valid_21628100 != nil:
    section.add "X-Amz-Algorithm", valid_21628100
  var valid_21628101 = header.getOrDefault("X-Amz-Signature")
  valid_21628101 = validateParameter(valid_21628101, JString, required = false,
                                   default = nil)
  if valid_21628101 != nil:
    section.add "X-Amz-Signature", valid_21628101
  var valid_21628102 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628102 = validateParameter(valid_21628102, JString, required = false,
                                   default = nil)
  if valid_21628102 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628102
  var valid_21628103 = header.getOrDefault("X-Amz-Credential")
  valid_21628103 = validateParameter(valid_21628103, JString, required = false,
                                   default = nil)
  if valid_21628103 != nil:
    section.add "X-Amz-Credential", valid_21628103
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628104: Call_GetGetGroupPolicy_21628090; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21628104.validator(path, query, header, formData, body, _)
  let scheme = call_21628104.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628104.makeUrl(scheme.get, call_21628104.host, call_21628104.base,
                               call_21628104.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628104, uri, valid, _)

proc call*(call_21628105: Call_GetGetGroupPolicy_21628090; GroupName: string;
          PolicyName: string; Action: string = "GetGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetGroupPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_21628106 = newJObject()
  add(query_21628106, "Action", newJString(Action))
  add(query_21628106, "GroupName", newJString(GroupName))
  add(query_21628106, "Version", newJString(Version))
  add(query_21628106, "PolicyName", newJString(PolicyName))
  result = call_21628105.call(nil, query_21628106, nil, nil, nil)

var getGetGroupPolicy* = Call_GetGetGroupPolicy_21628090(name: "getGetGroupPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetGroupPolicy", validator: validate_GetGetGroupPolicy_21628091,
    base: "/", makeUrl: url_GetGetGroupPolicy_21628092,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetInstanceProfile_21628141 = ref object of OpenApiRestCall_21625435
proc url_PostGetInstanceProfile_21628143(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetInstanceProfile_21628142(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628144 = query.getOrDefault("Action")
  valid_21628144 = validateParameter(valid_21628144, JString, required = true,
                                   default = newJString("GetInstanceProfile"))
  if valid_21628144 != nil:
    section.add "Action", valid_21628144
  var valid_21628145 = query.getOrDefault("Version")
  valid_21628145 = validateParameter(valid_21628145, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628145 != nil:
    section.add "Version", valid_21628145
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628146 = header.getOrDefault("X-Amz-Date")
  valid_21628146 = validateParameter(valid_21628146, JString, required = false,
                                   default = nil)
  if valid_21628146 != nil:
    section.add "X-Amz-Date", valid_21628146
  var valid_21628147 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628147 = validateParameter(valid_21628147, JString, required = false,
                                   default = nil)
  if valid_21628147 != nil:
    section.add "X-Amz-Security-Token", valid_21628147
  var valid_21628148 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628148 = validateParameter(valid_21628148, JString, required = false,
                                   default = nil)
  if valid_21628148 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628148
  var valid_21628149 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628149 = validateParameter(valid_21628149, JString, required = false,
                                   default = nil)
  if valid_21628149 != nil:
    section.add "X-Amz-Algorithm", valid_21628149
  var valid_21628150 = header.getOrDefault("X-Amz-Signature")
  valid_21628150 = validateParameter(valid_21628150, JString, required = false,
                                   default = nil)
  if valid_21628150 != nil:
    section.add "X-Amz-Signature", valid_21628150
  var valid_21628151 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628151 = validateParameter(valid_21628151, JString, required = false,
                                   default = nil)
  if valid_21628151 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628151
  var valid_21628152 = header.getOrDefault("X-Amz-Credential")
  valid_21628152 = validateParameter(valid_21628152, JString, required = false,
                                   default = nil)
  if valid_21628152 != nil:
    section.add "X-Amz-Credential", valid_21628152
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_21628153 = formData.getOrDefault("InstanceProfileName")
  valid_21628153 = validateParameter(valid_21628153, JString, required = true,
                                   default = nil)
  if valid_21628153 != nil:
    section.add "InstanceProfileName", valid_21628153
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628154: Call_PostGetInstanceProfile_21628141;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21628154.validator(path, query, header, formData, body, _)
  let scheme = call_21628154.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628154.makeUrl(scheme.get, call_21628154.host, call_21628154.base,
                               call_21628154.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628154, uri, valid, _)

proc call*(call_21628155: Call_PostGetInstanceProfile_21628141;
          InstanceProfileName: string; Action: string = "GetInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postGetInstanceProfile
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21628156 = newJObject()
  var formData_21628157 = newJObject()
  add(query_21628156, "Action", newJString(Action))
  add(formData_21628157, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_21628156, "Version", newJString(Version))
  result = call_21628155.call(nil, query_21628156, nil, formData_21628157, nil)

var postGetInstanceProfile* = Call_PostGetInstanceProfile_21628141(
    name: "postGetInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetInstanceProfile",
    validator: validate_PostGetInstanceProfile_21628142, base: "/",
    makeUrl: url_PostGetInstanceProfile_21628143,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetInstanceProfile_21628125 = ref object of OpenApiRestCall_21625435
proc url_GetGetInstanceProfile_21628127(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetInstanceProfile_21628126(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_21628128 = query.getOrDefault("InstanceProfileName")
  valid_21628128 = validateParameter(valid_21628128, JString, required = true,
                                   default = nil)
  if valid_21628128 != nil:
    section.add "InstanceProfileName", valid_21628128
  var valid_21628129 = query.getOrDefault("Action")
  valid_21628129 = validateParameter(valid_21628129, JString, required = true,
                                   default = newJString("GetInstanceProfile"))
  if valid_21628129 != nil:
    section.add "Action", valid_21628129
  var valid_21628130 = query.getOrDefault("Version")
  valid_21628130 = validateParameter(valid_21628130, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628130 != nil:
    section.add "Version", valid_21628130
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628131 = header.getOrDefault("X-Amz-Date")
  valid_21628131 = validateParameter(valid_21628131, JString, required = false,
                                   default = nil)
  if valid_21628131 != nil:
    section.add "X-Amz-Date", valid_21628131
  var valid_21628132 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628132 = validateParameter(valid_21628132, JString, required = false,
                                   default = nil)
  if valid_21628132 != nil:
    section.add "X-Amz-Security-Token", valid_21628132
  var valid_21628133 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628133 = validateParameter(valid_21628133, JString, required = false,
                                   default = nil)
  if valid_21628133 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628133
  var valid_21628134 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628134 = validateParameter(valid_21628134, JString, required = false,
                                   default = nil)
  if valid_21628134 != nil:
    section.add "X-Amz-Algorithm", valid_21628134
  var valid_21628135 = header.getOrDefault("X-Amz-Signature")
  valid_21628135 = validateParameter(valid_21628135, JString, required = false,
                                   default = nil)
  if valid_21628135 != nil:
    section.add "X-Amz-Signature", valid_21628135
  var valid_21628136 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628136 = validateParameter(valid_21628136, JString, required = false,
                                   default = nil)
  if valid_21628136 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628136
  var valid_21628137 = header.getOrDefault("X-Amz-Credential")
  valid_21628137 = validateParameter(valid_21628137, JString, required = false,
                                   default = nil)
  if valid_21628137 != nil:
    section.add "X-Amz-Credential", valid_21628137
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628138: Call_GetGetInstanceProfile_21628125;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21628138.validator(path, query, header, formData, body, _)
  let scheme = call_21628138.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628138.makeUrl(scheme.get, call_21628138.host, call_21628138.base,
                               call_21628138.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628138, uri, valid, _)

proc call*(call_21628139: Call_GetGetInstanceProfile_21628125;
          InstanceProfileName: string; Action: string = "GetInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getGetInstanceProfile
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628140 = newJObject()
  add(query_21628140, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_21628140, "Action", newJString(Action))
  add(query_21628140, "Version", newJString(Version))
  result = call_21628139.call(nil, query_21628140, nil, nil, nil)

var getGetInstanceProfile* = Call_GetGetInstanceProfile_21628125(
    name: "getGetInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetInstanceProfile",
    validator: validate_GetGetInstanceProfile_21628126, base: "/",
    makeUrl: url_GetGetInstanceProfile_21628127,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetLoginProfile_21628174 = ref object of OpenApiRestCall_21625435
proc url_PostGetLoginProfile_21628176(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetLoginProfile_21628175(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628177 = query.getOrDefault("Action")
  valid_21628177 = validateParameter(valid_21628177, JString, required = true,
                                   default = newJString("GetLoginProfile"))
  if valid_21628177 != nil:
    section.add "Action", valid_21628177
  var valid_21628178 = query.getOrDefault("Version")
  valid_21628178 = validateParameter(valid_21628178, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628178 != nil:
    section.add "Version", valid_21628178
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628179 = header.getOrDefault("X-Amz-Date")
  valid_21628179 = validateParameter(valid_21628179, JString, required = false,
                                   default = nil)
  if valid_21628179 != nil:
    section.add "X-Amz-Date", valid_21628179
  var valid_21628180 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628180 = validateParameter(valid_21628180, JString, required = false,
                                   default = nil)
  if valid_21628180 != nil:
    section.add "X-Amz-Security-Token", valid_21628180
  var valid_21628181 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628181 = validateParameter(valid_21628181, JString, required = false,
                                   default = nil)
  if valid_21628181 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628181
  var valid_21628182 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628182 = validateParameter(valid_21628182, JString, required = false,
                                   default = nil)
  if valid_21628182 != nil:
    section.add "X-Amz-Algorithm", valid_21628182
  var valid_21628183 = header.getOrDefault("X-Amz-Signature")
  valid_21628183 = validateParameter(valid_21628183, JString, required = false,
                                   default = nil)
  if valid_21628183 != nil:
    section.add "X-Amz-Signature", valid_21628183
  var valid_21628184 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628184 = validateParameter(valid_21628184, JString, required = false,
                                   default = nil)
  if valid_21628184 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628184
  var valid_21628185 = header.getOrDefault("X-Amz-Credential")
  valid_21628185 = validateParameter(valid_21628185, JString, required = false,
                                   default = nil)
  if valid_21628185 != nil:
    section.add "X-Amz-Credential", valid_21628185
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21628186 = formData.getOrDefault("UserName")
  valid_21628186 = validateParameter(valid_21628186, JString, required = true,
                                   default = nil)
  if valid_21628186 != nil:
    section.add "UserName", valid_21628186
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628187: Call_PostGetLoginProfile_21628174; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  let valid = call_21628187.validator(path, query, header, formData, body, _)
  let scheme = call_21628187.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628187.makeUrl(scheme.get, call_21628187.host, call_21628187.base,
                               call_21628187.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628187, uri, valid, _)

proc call*(call_21628188: Call_PostGetLoginProfile_21628174; UserName: string;
          Action: string = "GetLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postGetLoginProfile
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ##   UserName: string (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628189 = newJObject()
  var formData_21628190 = newJObject()
  add(formData_21628190, "UserName", newJString(UserName))
  add(query_21628189, "Action", newJString(Action))
  add(query_21628189, "Version", newJString(Version))
  result = call_21628188.call(nil, query_21628189, nil, formData_21628190, nil)

var postGetLoginProfile* = Call_PostGetLoginProfile_21628174(
    name: "postGetLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetLoginProfile",
    validator: validate_PostGetLoginProfile_21628175, base: "/",
    makeUrl: url_PostGetLoginProfile_21628176,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetLoginProfile_21628158 = ref object of OpenApiRestCall_21625435
proc url_GetGetLoginProfile_21628160(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetLoginProfile_21628159(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_21628161 = query.getOrDefault("UserName")
  valid_21628161 = validateParameter(valid_21628161, JString, required = true,
                                   default = nil)
  if valid_21628161 != nil:
    section.add "UserName", valid_21628161
  var valid_21628162 = query.getOrDefault("Action")
  valid_21628162 = validateParameter(valid_21628162, JString, required = true,
                                   default = newJString("GetLoginProfile"))
  if valid_21628162 != nil:
    section.add "Action", valid_21628162
  var valid_21628163 = query.getOrDefault("Version")
  valid_21628163 = validateParameter(valid_21628163, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628163 != nil:
    section.add "Version", valid_21628163
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628164 = header.getOrDefault("X-Amz-Date")
  valid_21628164 = validateParameter(valid_21628164, JString, required = false,
                                   default = nil)
  if valid_21628164 != nil:
    section.add "X-Amz-Date", valid_21628164
  var valid_21628165 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628165 = validateParameter(valid_21628165, JString, required = false,
                                   default = nil)
  if valid_21628165 != nil:
    section.add "X-Amz-Security-Token", valid_21628165
  var valid_21628166 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628166 = validateParameter(valid_21628166, JString, required = false,
                                   default = nil)
  if valid_21628166 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628166
  var valid_21628167 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628167 = validateParameter(valid_21628167, JString, required = false,
                                   default = nil)
  if valid_21628167 != nil:
    section.add "X-Amz-Algorithm", valid_21628167
  var valid_21628168 = header.getOrDefault("X-Amz-Signature")
  valid_21628168 = validateParameter(valid_21628168, JString, required = false,
                                   default = nil)
  if valid_21628168 != nil:
    section.add "X-Amz-Signature", valid_21628168
  var valid_21628169 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628169 = validateParameter(valid_21628169, JString, required = false,
                                   default = nil)
  if valid_21628169 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628169
  var valid_21628170 = header.getOrDefault("X-Amz-Credential")
  valid_21628170 = validateParameter(valid_21628170, JString, required = false,
                                   default = nil)
  if valid_21628170 != nil:
    section.add "X-Amz-Credential", valid_21628170
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628171: Call_GetGetLoginProfile_21628158; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  let valid = call_21628171.validator(path, query, header, formData, body, _)
  let scheme = call_21628171.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628171.makeUrl(scheme.get, call_21628171.host, call_21628171.base,
                               call_21628171.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628171, uri, valid, _)

proc call*(call_21628172: Call_GetGetLoginProfile_21628158; UserName: string;
          Action: string = "GetLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getGetLoginProfile
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ##   UserName: string (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628173 = newJObject()
  add(query_21628173, "UserName", newJString(UserName))
  add(query_21628173, "Action", newJString(Action))
  add(query_21628173, "Version", newJString(Version))
  result = call_21628172.call(nil, query_21628173, nil, nil, nil)

var getGetLoginProfile* = Call_GetGetLoginProfile_21628158(
    name: "getGetLoginProfile", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetLoginProfile", validator: validate_GetGetLoginProfile_21628159,
    base: "/", makeUrl: url_GetGetLoginProfile_21628160,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetOpenIDConnectProvider_21628207 = ref object of OpenApiRestCall_21625435
proc url_PostGetOpenIDConnectProvider_21628209(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetOpenIDConnectProvider_21628208(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628210 = query.getOrDefault("Action")
  valid_21628210 = validateParameter(valid_21628210, JString, required = true, default = newJString(
      "GetOpenIDConnectProvider"))
  if valid_21628210 != nil:
    section.add "Action", valid_21628210
  var valid_21628211 = query.getOrDefault("Version")
  valid_21628211 = validateParameter(valid_21628211, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628211 != nil:
    section.add "Version", valid_21628211
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628212 = header.getOrDefault("X-Amz-Date")
  valid_21628212 = validateParameter(valid_21628212, JString, required = false,
                                   default = nil)
  if valid_21628212 != nil:
    section.add "X-Amz-Date", valid_21628212
  var valid_21628213 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628213 = validateParameter(valid_21628213, JString, required = false,
                                   default = nil)
  if valid_21628213 != nil:
    section.add "X-Amz-Security-Token", valid_21628213
  var valid_21628214 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628214 = validateParameter(valid_21628214, JString, required = false,
                                   default = nil)
  if valid_21628214 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628214
  var valid_21628215 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628215 = validateParameter(valid_21628215, JString, required = false,
                                   default = nil)
  if valid_21628215 != nil:
    section.add "X-Amz-Algorithm", valid_21628215
  var valid_21628216 = header.getOrDefault("X-Amz-Signature")
  valid_21628216 = validateParameter(valid_21628216, JString, required = false,
                                   default = nil)
  if valid_21628216 != nil:
    section.add "X-Amz-Signature", valid_21628216
  var valid_21628217 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628217 = validateParameter(valid_21628217, JString, required = false,
                                   default = nil)
  if valid_21628217 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628217
  var valid_21628218 = header.getOrDefault("X-Amz-Credential")
  valid_21628218 = validateParameter(valid_21628218, JString, required = false,
                                   default = nil)
  if valid_21628218 != nil:
    section.add "X-Amz-Credential", valid_21628218
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_21628219 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_21628219 = validateParameter(valid_21628219, JString, required = true,
                                   default = nil)
  if valid_21628219 != nil:
    section.add "OpenIDConnectProviderArn", valid_21628219
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628220: Call_PostGetOpenIDConnectProvider_21628207;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  let valid = call_21628220.validator(path, query, header, formData, body, _)
  let scheme = call_21628220.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628220.makeUrl(scheme.get, call_21628220.host, call_21628220.base,
                               call_21628220.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628220, uri, valid, _)

proc call*(call_21628221: Call_PostGetOpenIDConnectProvider_21628207;
          OpenIDConnectProviderArn: string;
          Action: string = "GetOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postGetOpenIDConnectProvider
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628222 = newJObject()
  var formData_21628223 = newJObject()
  add(formData_21628223, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_21628222, "Action", newJString(Action))
  add(query_21628222, "Version", newJString(Version))
  result = call_21628221.call(nil, query_21628222, nil, formData_21628223, nil)

var postGetOpenIDConnectProvider* = Call_PostGetOpenIDConnectProvider_21628207(
    name: "postGetOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetOpenIDConnectProvider",
    validator: validate_PostGetOpenIDConnectProvider_21628208, base: "/",
    makeUrl: url_PostGetOpenIDConnectProvider_21628209,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetOpenIDConnectProvider_21628191 = ref object of OpenApiRestCall_21625435
proc url_GetGetOpenIDConnectProvider_21628193(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetOpenIDConnectProvider_21628192(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_21628194 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_21628194 = validateParameter(valid_21628194, JString, required = true,
                                   default = nil)
  if valid_21628194 != nil:
    section.add "OpenIDConnectProviderArn", valid_21628194
  var valid_21628195 = query.getOrDefault("Action")
  valid_21628195 = validateParameter(valid_21628195, JString, required = true, default = newJString(
      "GetOpenIDConnectProvider"))
  if valid_21628195 != nil:
    section.add "Action", valid_21628195
  var valid_21628196 = query.getOrDefault("Version")
  valid_21628196 = validateParameter(valid_21628196, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628196 != nil:
    section.add "Version", valid_21628196
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628197 = header.getOrDefault("X-Amz-Date")
  valid_21628197 = validateParameter(valid_21628197, JString, required = false,
                                   default = nil)
  if valid_21628197 != nil:
    section.add "X-Amz-Date", valid_21628197
  var valid_21628198 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628198 = validateParameter(valid_21628198, JString, required = false,
                                   default = nil)
  if valid_21628198 != nil:
    section.add "X-Amz-Security-Token", valid_21628198
  var valid_21628199 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628199 = validateParameter(valid_21628199, JString, required = false,
                                   default = nil)
  if valid_21628199 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628199
  var valid_21628200 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628200 = validateParameter(valid_21628200, JString, required = false,
                                   default = nil)
  if valid_21628200 != nil:
    section.add "X-Amz-Algorithm", valid_21628200
  var valid_21628201 = header.getOrDefault("X-Amz-Signature")
  valid_21628201 = validateParameter(valid_21628201, JString, required = false,
                                   default = nil)
  if valid_21628201 != nil:
    section.add "X-Amz-Signature", valid_21628201
  var valid_21628202 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628202 = validateParameter(valid_21628202, JString, required = false,
                                   default = nil)
  if valid_21628202 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628202
  var valid_21628203 = header.getOrDefault("X-Amz-Credential")
  valid_21628203 = validateParameter(valid_21628203, JString, required = false,
                                   default = nil)
  if valid_21628203 != nil:
    section.add "X-Amz-Credential", valid_21628203
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628204: Call_GetGetOpenIDConnectProvider_21628191;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  let valid = call_21628204.validator(path, query, header, formData, body, _)
  let scheme = call_21628204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628204.makeUrl(scheme.get, call_21628204.host, call_21628204.base,
                               call_21628204.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628204, uri, valid, _)

proc call*(call_21628205: Call_GetGetOpenIDConnectProvider_21628191;
          OpenIDConnectProviderArn: string;
          Action: string = "GetOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getGetOpenIDConnectProvider
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628206 = newJObject()
  add(query_21628206, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_21628206, "Action", newJString(Action))
  add(query_21628206, "Version", newJString(Version))
  result = call_21628205.call(nil, query_21628206, nil, nil, nil)

var getGetOpenIDConnectProvider* = Call_GetGetOpenIDConnectProvider_21628191(
    name: "getGetOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetOpenIDConnectProvider",
    validator: validate_GetGetOpenIDConnectProvider_21628192, base: "/",
    makeUrl: url_GetGetOpenIDConnectProvider_21628193,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetOrganizationsAccessReport_21628243 = ref object of OpenApiRestCall_21625435
proc url_PostGetOrganizationsAccessReport_21628245(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetOrganizationsAccessReport_21628244(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628246 = query.getOrDefault("Action")
  valid_21628246 = validateParameter(valid_21628246, JString, required = true, default = newJString(
      "GetOrganizationsAccessReport"))
  if valid_21628246 != nil:
    section.add "Action", valid_21628246
  var valid_21628247 = query.getOrDefault("Version")
  valid_21628247 = validateParameter(valid_21628247, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628247 != nil:
    section.add "Version", valid_21628247
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628248 = header.getOrDefault("X-Amz-Date")
  valid_21628248 = validateParameter(valid_21628248, JString, required = false,
                                   default = nil)
  if valid_21628248 != nil:
    section.add "X-Amz-Date", valid_21628248
  var valid_21628249 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628249 = validateParameter(valid_21628249, JString, required = false,
                                   default = nil)
  if valid_21628249 != nil:
    section.add "X-Amz-Security-Token", valid_21628249
  var valid_21628250 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628250 = validateParameter(valid_21628250, JString, required = false,
                                   default = nil)
  if valid_21628250 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628250
  var valid_21628251 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628251 = validateParameter(valid_21628251, JString, required = false,
                                   default = nil)
  if valid_21628251 != nil:
    section.add "X-Amz-Algorithm", valid_21628251
  var valid_21628252 = header.getOrDefault("X-Amz-Signature")
  valid_21628252 = validateParameter(valid_21628252, JString, required = false,
                                   default = nil)
  if valid_21628252 != nil:
    section.add "X-Amz-Signature", valid_21628252
  var valid_21628253 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628253 = validateParameter(valid_21628253, JString, required = false,
                                   default = nil)
  if valid_21628253 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628253
  var valid_21628254 = header.getOrDefault("X-Amz-Credential")
  valid_21628254 = validateParameter(valid_21628254, JString, required = false,
                                   default = nil)
  if valid_21628254 != nil:
    section.add "X-Amz-Credential", valid_21628254
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   SortKey: JString
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   JobId: JString (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_21628255 = formData.getOrDefault("Marker")
  valid_21628255 = validateParameter(valid_21628255, JString, required = false,
                                   default = nil)
  if valid_21628255 != nil:
    section.add "Marker", valid_21628255
  var valid_21628256 = formData.getOrDefault("SortKey")
  valid_21628256 = validateParameter(valid_21628256, JString, required = false, default = newJString(
      "SERVICE_NAMESPACE_ASCENDING"))
  if valid_21628256 != nil:
    section.add "SortKey", valid_21628256
  assert formData != nil,
        "formData argument is necessary due to required `JobId` field"
  var valid_21628257 = formData.getOrDefault("JobId")
  valid_21628257 = validateParameter(valid_21628257, JString, required = true,
                                   default = nil)
  if valid_21628257 != nil:
    section.add "JobId", valid_21628257
  var valid_21628258 = formData.getOrDefault("MaxItems")
  valid_21628258 = validateParameter(valid_21628258, JInt, required = false,
                                   default = nil)
  if valid_21628258 != nil:
    section.add "MaxItems", valid_21628258
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628259: Call_PostGetOrganizationsAccessReport_21628243;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_21628259.validator(path, query, header, formData, body, _)
  let scheme = call_21628259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628259.makeUrl(scheme.get, call_21628259.host, call_21628259.base,
                               call_21628259.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628259, uri, valid, _)

proc call*(call_21628260: Call_PostGetOrganizationsAccessReport_21628243;
          JobId: string; Marker: string = "";
          SortKey: string = "SERVICE_NAMESPACE_ASCENDING";
          Action: string = "GetOrganizationsAccessReport"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetOrganizationsAccessReport
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   SortKey: string
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   Action: string (required)
  ##   JobId: string (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628261 = newJObject()
  var formData_21628262 = newJObject()
  add(formData_21628262, "Marker", newJString(Marker))
  add(formData_21628262, "SortKey", newJString(SortKey))
  add(query_21628261, "Action", newJString(Action))
  add(formData_21628262, "JobId", newJString(JobId))
  add(formData_21628262, "MaxItems", newJInt(MaxItems))
  add(query_21628261, "Version", newJString(Version))
  result = call_21628260.call(nil, query_21628261, nil, formData_21628262, nil)

var postGetOrganizationsAccessReport* = Call_PostGetOrganizationsAccessReport_21628243(
    name: "postGetOrganizationsAccessReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetOrganizationsAccessReport",
    validator: validate_PostGetOrganizationsAccessReport_21628244, base: "/",
    makeUrl: url_PostGetOrganizationsAccessReport_21628245,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetOrganizationsAccessReport_21628224 = ref object of OpenApiRestCall_21625435
proc url_GetGetOrganizationsAccessReport_21628226(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetOrganizationsAccessReport_21628225(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SortKey: JString
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   JobId: JString (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628227 = query.getOrDefault("SortKey")
  valid_21628227 = validateParameter(valid_21628227, JString, required = false, default = newJString(
      "SERVICE_NAMESPACE_ASCENDING"))
  if valid_21628227 != nil:
    section.add "SortKey", valid_21628227
  assert query != nil, "query argument is necessary due to required `JobId` field"
  var valid_21628228 = query.getOrDefault("JobId")
  valid_21628228 = validateParameter(valid_21628228, JString, required = true,
                                   default = nil)
  if valid_21628228 != nil:
    section.add "JobId", valid_21628228
  var valid_21628229 = query.getOrDefault("Action")
  valid_21628229 = validateParameter(valid_21628229, JString, required = true, default = newJString(
      "GetOrganizationsAccessReport"))
  if valid_21628229 != nil:
    section.add "Action", valid_21628229
  var valid_21628230 = query.getOrDefault("Marker")
  valid_21628230 = validateParameter(valid_21628230, JString, required = false,
                                   default = nil)
  if valid_21628230 != nil:
    section.add "Marker", valid_21628230
  var valid_21628231 = query.getOrDefault("MaxItems")
  valid_21628231 = validateParameter(valid_21628231, JInt, required = false,
                                   default = nil)
  if valid_21628231 != nil:
    section.add "MaxItems", valid_21628231
  var valid_21628232 = query.getOrDefault("Version")
  valid_21628232 = validateParameter(valid_21628232, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628232 != nil:
    section.add "Version", valid_21628232
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628233 = header.getOrDefault("X-Amz-Date")
  valid_21628233 = validateParameter(valid_21628233, JString, required = false,
                                   default = nil)
  if valid_21628233 != nil:
    section.add "X-Amz-Date", valid_21628233
  var valid_21628234 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628234 = validateParameter(valid_21628234, JString, required = false,
                                   default = nil)
  if valid_21628234 != nil:
    section.add "X-Amz-Security-Token", valid_21628234
  var valid_21628235 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628235 = validateParameter(valid_21628235, JString, required = false,
                                   default = nil)
  if valid_21628235 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628235
  var valid_21628236 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628236 = validateParameter(valid_21628236, JString, required = false,
                                   default = nil)
  if valid_21628236 != nil:
    section.add "X-Amz-Algorithm", valid_21628236
  var valid_21628237 = header.getOrDefault("X-Amz-Signature")
  valid_21628237 = validateParameter(valid_21628237, JString, required = false,
                                   default = nil)
  if valid_21628237 != nil:
    section.add "X-Amz-Signature", valid_21628237
  var valid_21628238 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628238 = validateParameter(valid_21628238, JString, required = false,
                                   default = nil)
  if valid_21628238 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628238
  var valid_21628239 = header.getOrDefault("X-Amz-Credential")
  valid_21628239 = validateParameter(valid_21628239, JString, required = false,
                                   default = nil)
  if valid_21628239 != nil:
    section.add "X-Amz-Credential", valid_21628239
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628240: Call_GetGetOrganizationsAccessReport_21628224;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_21628240.validator(path, query, header, formData, body, _)
  let scheme = call_21628240.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628240.makeUrl(scheme.get, call_21628240.host, call_21628240.base,
                               call_21628240.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628240, uri, valid, _)

proc call*(call_21628241: Call_GetGetOrganizationsAccessReport_21628224;
          JobId: string; SortKey: string = "SERVICE_NAMESPACE_ASCENDING";
          Action: string = "GetOrganizationsAccessReport"; Marker: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetOrganizationsAccessReport
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ##   SortKey: string
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   JobId: string (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628242 = newJObject()
  add(query_21628242, "SortKey", newJString(SortKey))
  add(query_21628242, "JobId", newJString(JobId))
  add(query_21628242, "Action", newJString(Action))
  add(query_21628242, "Marker", newJString(Marker))
  add(query_21628242, "MaxItems", newJInt(MaxItems))
  add(query_21628242, "Version", newJString(Version))
  result = call_21628241.call(nil, query_21628242, nil, nil, nil)

var getGetOrganizationsAccessReport* = Call_GetGetOrganizationsAccessReport_21628224(
    name: "getGetOrganizationsAccessReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetOrganizationsAccessReport",
    validator: validate_GetGetOrganizationsAccessReport_21628225, base: "/",
    makeUrl: url_GetGetOrganizationsAccessReport_21628226,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetPolicy_21628279 = ref object of OpenApiRestCall_21625435
proc url_PostGetPolicy_21628281(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetPolicy_21628280(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628282 = query.getOrDefault("Action")
  valid_21628282 = validateParameter(valid_21628282, JString, required = true,
                                   default = newJString("GetPolicy"))
  if valid_21628282 != nil:
    section.add "Action", valid_21628282
  var valid_21628283 = query.getOrDefault("Version")
  valid_21628283 = validateParameter(valid_21628283, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628283 != nil:
    section.add "Version", valid_21628283
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628284 = header.getOrDefault("X-Amz-Date")
  valid_21628284 = validateParameter(valid_21628284, JString, required = false,
                                   default = nil)
  if valid_21628284 != nil:
    section.add "X-Amz-Date", valid_21628284
  var valid_21628285 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628285 = validateParameter(valid_21628285, JString, required = false,
                                   default = nil)
  if valid_21628285 != nil:
    section.add "X-Amz-Security-Token", valid_21628285
  var valid_21628286 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628286 = validateParameter(valid_21628286, JString, required = false,
                                   default = nil)
  if valid_21628286 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628286
  var valid_21628287 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628287 = validateParameter(valid_21628287, JString, required = false,
                                   default = nil)
  if valid_21628287 != nil:
    section.add "X-Amz-Algorithm", valid_21628287
  var valid_21628288 = header.getOrDefault("X-Amz-Signature")
  valid_21628288 = validateParameter(valid_21628288, JString, required = false,
                                   default = nil)
  if valid_21628288 != nil:
    section.add "X-Amz-Signature", valid_21628288
  var valid_21628289 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628289 = validateParameter(valid_21628289, JString, required = false,
                                   default = nil)
  if valid_21628289 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628289
  var valid_21628290 = header.getOrDefault("X-Amz-Credential")
  valid_21628290 = validateParameter(valid_21628290, JString, required = false,
                                   default = nil)
  if valid_21628290 != nil:
    section.add "X-Amz-Credential", valid_21628290
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_21628291 = formData.getOrDefault("PolicyArn")
  valid_21628291 = validateParameter(valid_21628291, JString, required = true,
                                   default = nil)
  if valid_21628291 != nil:
    section.add "PolicyArn", valid_21628291
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628292: Call_PostGetPolicy_21628279; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21628292.validator(path, query, header, formData, body, _)
  let scheme = call_21628292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628292.makeUrl(scheme.get, call_21628292.host, call_21628292.base,
                               call_21628292.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628292, uri, valid, _)

proc call*(call_21628293: Call_PostGetPolicy_21628279; PolicyArn: string;
          Action: string = "GetPolicy"; Version: string = "2010-05-08"): Recallable =
  ## postGetPolicy
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628294 = newJObject()
  var formData_21628295 = newJObject()
  add(formData_21628295, "PolicyArn", newJString(PolicyArn))
  add(query_21628294, "Action", newJString(Action))
  add(query_21628294, "Version", newJString(Version))
  result = call_21628293.call(nil, query_21628294, nil, formData_21628295, nil)

var postGetPolicy* = Call_PostGetPolicy_21628279(name: "postGetPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetPolicy", validator: validate_PostGetPolicy_21628280,
    base: "/", makeUrl: url_PostGetPolicy_21628281,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetPolicy_21628263 = ref object of OpenApiRestCall_21625435
proc url_GetGetPolicy_21628265(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetPolicy_21628264(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_21628266 = query.getOrDefault("PolicyArn")
  valid_21628266 = validateParameter(valid_21628266, JString, required = true,
                                   default = nil)
  if valid_21628266 != nil:
    section.add "PolicyArn", valid_21628266
  var valid_21628267 = query.getOrDefault("Action")
  valid_21628267 = validateParameter(valid_21628267, JString, required = true,
                                   default = newJString("GetPolicy"))
  if valid_21628267 != nil:
    section.add "Action", valid_21628267
  var valid_21628268 = query.getOrDefault("Version")
  valid_21628268 = validateParameter(valid_21628268, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628268 != nil:
    section.add "Version", valid_21628268
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628269 = header.getOrDefault("X-Amz-Date")
  valid_21628269 = validateParameter(valid_21628269, JString, required = false,
                                   default = nil)
  if valid_21628269 != nil:
    section.add "X-Amz-Date", valid_21628269
  var valid_21628270 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628270 = validateParameter(valid_21628270, JString, required = false,
                                   default = nil)
  if valid_21628270 != nil:
    section.add "X-Amz-Security-Token", valid_21628270
  var valid_21628271 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628271 = validateParameter(valid_21628271, JString, required = false,
                                   default = nil)
  if valid_21628271 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628271
  var valid_21628272 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628272 = validateParameter(valid_21628272, JString, required = false,
                                   default = nil)
  if valid_21628272 != nil:
    section.add "X-Amz-Algorithm", valid_21628272
  var valid_21628273 = header.getOrDefault("X-Amz-Signature")
  valid_21628273 = validateParameter(valid_21628273, JString, required = false,
                                   default = nil)
  if valid_21628273 != nil:
    section.add "X-Amz-Signature", valid_21628273
  var valid_21628274 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628274 = validateParameter(valid_21628274, JString, required = false,
                                   default = nil)
  if valid_21628274 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628274
  var valid_21628275 = header.getOrDefault("X-Amz-Credential")
  valid_21628275 = validateParameter(valid_21628275, JString, required = false,
                                   default = nil)
  if valid_21628275 != nil:
    section.add "X-Amz-Credential", valid_21628275
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628276: Call_GetGetPolicy_21628263; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21628276.validator(path, query, header, formData, body, _)
  let scheme = call_21628276.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628276.makeUrl(scheme.get, call_21628276.host, call_21628276.base,
                               call_21628276.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628276, uri, valid, _)

proc call*(call_21628277: Call_GetGetPolicy_21628263; PolicyArn: string;
          Action: string = "GetPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getGetPolicy
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628278 = newJObject()
  add(query_21628278, "PolicyArn", newJString(PolicyArn))
  add(query_21628278, "Action", newJString(Action))
  add(query_21628278, "Version", newJString(Version))
  result = call_21628277.call(nil, query_21628278, nil, nil, nil)

var getGetPolicy* = Call_GetGetPolicy_21628263(name: "getGetPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetPolicy", validator: validate_GetGetPolicy_21628264,
    base: "/", makeUrl: url_GetGetPolicy_21628265,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetPolicyVersion_21628313 = ref object of OpenApiRestCall_21625435
proc url_PostGetPolicyVersion_21628315(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetPolicyVersion_21628314(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628316 = query.getOrDefault("Action")
  valid_21628316 = validateParameter(valid_21628316, JString, required = true,
                                   default = newJString("GetPolicyVersion"))
  if valid_21628316 != nil:
    section.add "Action", valid_21628316
  var valid_21628317 = query.getOrDefault("Version")
  valid_21628317 = validateParameter(valid_21628317, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628317 != nil:
    section.add "Version", valid_21628317
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628318 = header.getOrDefault("X-Amz-Date")
  valid_21628318 = validateParameter(valid_21628318, JString, required = false,
                                   default = nil)
  if valid_21628318 != nil:
    section.add "X-Amz-Date", valid_21628318
  var valid_21628319 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628319 = validateParameter(valid_21628319, JString, required = false,
                                   default = nil)
  if valid_21628319 != nil:
    section.add "X-Amz-Security-Token", valid_21628319
  var valid_21628320 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628320 = validateParameter(valid_21628320, JString, required = false,
                                   default = nil)
  if valid_21628320 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628320
  var valid_21628321 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628321 = validateParameter(valid_21628321, JString, required = false,
                                   default = nil)
  if valid_21628321 != nil:
    section.add "X-Amz-Algorithm", valid_21628321
  var valid_21628322 = header.getOrDefault("X-Amz-Signature")
  valid_21628322 = validateParameter(valid_21628322, JString, required = false,
                                   default = nil)
  if valid_21628322 != nil:
    section.add "X-Amz-Signature", valid_21628322
  var valid_21628323 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628323 = validateParameter(valid_21628323, JString, required = false,
                                   default = nil)
  if valid_21628323 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628323
  var valid_21628324 = header.getOrDefault("X-Amz-Credential")
  valid_21628324 = validateParameter(valid_21628324, JString, required = false,
                                   default = nil)
  if valid_21628324 != nil:
    section.add "X-Amz-Credential", valid_21628324
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_21628325 = formData.getOrDefault("PolicyArn")
  valid_21628325 = validateParameter(valid_21628325, JString, required = true,
                                   default = nil)
  if valid_21628325 != nil:
    section.add "PolicyArn", valid_21628325
  var valid_21628326 = formData.getOrDefault("VersionId")
  valid_21628326 = validateParameter(valid_21628326, JString, required = true,
                                   default = nil)
  if valid_21628326 != nil:
    section.add "VersionId", valid_21628326
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628327: Call_PostGetPolicyVersion_21628313; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21628327.validator(path, query, header, formData, body, _)
  let scheme = call_21628327.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628327.makeUrl(scheme.get, call_21628327.host, call_21628327.base,
                               call_21628327.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628327, uri, valid, _)

proc call*(call_21628328: Call_PostGetPolicyVersion_21628313; PolicyArn: string;
          VersionId: string; Action: string = "GetPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postGetPolicyVersion
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   VersionId: string (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  var query_21628329 = newJObject()
  var formData_21628330 = newJObject()
  add(formData_21628330, "PolicyArn", newJString(PolicyArn))
  add(query_21628329, "Action", newJString(Action))
  add(query_21628329, "Version", newJString(Version))
  add(formData_21628330, "VersionId", newJString(VersionId))
  result = call_21628328.call(nil, query_21628329, nil, formData_21628330, nil)

var postGetPolicyVersion* = Call_PostGetPolicyVersion_21628313(
    name: "postGetPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetPolicyVersion",
    validator: validate_PostGetPolicyVersion_21628314, base: "/",
    makeUrl: url_PostGetPolicyVersion_21628315,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetPolicyVersion_21628296 = ref object of OpenApiRestCall_21625435
proc url_GetGetPolicyVersion_21628298(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetPolicyVersion_21628297(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_21628299 = query.getOrDefault("PolicyArn")
  valid_21628299 = validateParameter(valid_21628299, JString, required = true,
                                   default = nil)
  if valid_21628299 != nil:
    section.add "PolicyArn", valid_21628299
  var valid_21628300 = query.getOrDefault("VersionId")
  valid_21628300 = validateParameter(valid_21628300, JString, required = true,
                                   default = nil)
  if valid_21628300 != nil:
    section.add "VersionId", valid_21628300
  var valid_21628301 = query.getOrDefault("Action")
  valid_21628301 = validateParameter(valid_21628301, JString, required = true,
                                   default = newJString("GetPolicyVersion"))
  if valid_21628301 != nil:
    section.add "Action", valid_21628301
  var valid_21628302 = query.getOrDefault("Version")
  valid_21628302 = validateParameter(valid_21628302, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628302 != nil:
    section.add "Version", valid_21628302
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628303 = header.getOrDefault("X-Amz-Date")
  valid_21628303 = validateParameter(valid_21628303, JString, required = false,
                                   default = nil)
  if valid_21628303 != nil:
    section.add "X-Amz-Date", valid_21628303
  var valid_21628304 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628304 = validateParameter(valid_21628304, JString, required = false,
                                   default = nil)
  if valid_21628304 != nil:
    section.add "X-Amz-Security-Token", valid_21628304
  var valid_21628305 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628305 = validateParameter(valid_21628305, JString, required = false,
                                   default = nil)
  if valid_21628305 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628305
  var valid_21628306 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628306 = validateParameter(valid_21628306, JString, required = false,
                                   default = nil)
  if valid_21628306 != nil:
    section.add "X-Amz-Algorithm", valid_21628306
  var valid_21628307 = header.getOrDefault("X-Amz-Signature")
  valid_21628307 = validateParameter(valid_21628307, JString, required = false,
                                   default = nil)
  if valid_21628307 != nil:
    section.add "X-Amz-Signature", valid_21628307
  var valid_21628308 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628308 = validateParameter(valid_21628308, JString, required = false,
                                   default = nil)
  if valid_21628308 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628308
  var valid_21628309 = header.getOrDefault("X-Amz-Credential")
  valid_21628309 = validateParameter(valid_21628309, JString, required = false,
                                   default = nil)
  if valid_21628309 != nil:
    section.add "X-Amz-Credential", valid_21628309
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628310: Call_GetGetPolicyVersion_21628296; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21628310.validator(path, query, header, formData, body, _)
  let scheme = call_21628310.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628310.makeUrl(scheme.get, call_21628310.host, call_21628310.base,
                               call_21628310.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628310, uri, valid, _)

proc call*(call_21628311: Call_GetGetPolicyVersion_21628296; PolicyArn: string;
          VersionId: string; Action: string = "GetPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getGetPolicyVersion
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: string (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628312 = newJObject()
  add(query_21628312, "PolicyArn", newJString(PolicyArn))
  add(query_21628312, "VersionId", newJString(VersionId))
  add(query_21628312, "Action", newJString(Action))
  add(query_21628312, "Version", newJString(Version))
  result = call_21628311.call(nil, query_21628312, nil, nil, nil)

var getGetPolicyVersion* = Call_GetGetPolicyVersion_21628296(
    name: "getGetPolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetPolicyVersion",
    validator: validate_GetGetPolicyVersion_21628297, base: "/",
    makeUrl: url_GetGetPolicyVersion_21628298,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetRole_21628347 = ref object of OpenApiRestCall_21625435
proc url_PostGetRole_21628349(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetRole_21628348(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628350 = query.getOrDefault("Action")
  valid_21628350 = validateParameter(valid_21628350, JString, required = true,
                                   default = newJString("GetRole"))
  if valid_21628350 != nil:
    section.add "Action", valid_21628350
  var valid_21628351 = query.getOrDefault("Version")
  valid_21628351 = validateParameter(valid_21628351, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628351 != nil:
    section.add "Version", valid_21628351
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628352 = header.getOrDefault("X-Amz-Date")
  valid_21628352 = validateParameter(valid_21628352, JString, required = false,
                                   default = nil)
  if valid_21628352 != nil:
    section.add "X-Amz-Date", valid_21628352
  var valid_21628353 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628353 = validateParameter(valid_21628353, JString, required = false,
                                   default = nil)
  if valid_21628353 != nil:
    section.add "X-Amz-Security-Token", valid_21628353
  var valid_21628354 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628354 = validateParameter(valid_21628354, JString, required = false,
                                   default = nil)
  if valid_21628354 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628354
  var valid_21628355 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628355 = validateParameter(valid_21628355, JString, required = false,
                                   default = nil)
  if valid_21628355 != nil:
    section.add "X-Amz-Algorithm", valid_21628355
  var valid_21628356 = header.getOrDefault("X-Amz-Signature")
  valid_21628356 = validateParameter(valid_21628356, JString, required = false,
                                   default = nil)
  if valid_21628356 != nil:
    section.add "X-Amz-Signature", valid_21628356
  var valid_21628357 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628357 = validateParameter(valid_21628357, JString, required = false,
                                   default = nil)
  if valid_21628357 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628357
  var valid_21628358 = header.getOrDefault("X-Amz-Credential")
  valid_21628358 = validateParameter(valid_21628358, JString, required = false,
                                   default = nil)
  if valid_21628358 != nil:
    section.add "X-Amz-Credential", valid_21628358
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_21628359 = formData.getOrDefault("RoleName")
  valid_21628359 = validateParameter(valid_21628359, JString, required = true,
                                   default = nil)
  if valid_21628359 != nil:
    section.add "RoleName", valid_21628359
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628360: Call_PostGetRole_21628347; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  let valid = call_21628360.validator(path, query, header, formData, body, _)
  let scheme = call_21628360.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628360.makeUrl(scheme.get, call_21628360.host, call_21628360.base,
                               call_21628360.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628360, uri, valid, _)

proc call*(call_21628361: Call_PostGetRole_21628347; RoleName: string;
          Action: string = "GetRole"; Version: string = "2010-05-08"): Recallable =
  ## postGetRole
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628362 = newJObject()
  var formData_21628363 = newJObject()
  add(formData_21628363, "RoleName", newJString(RoleName))
  add(query_21628362, "Action", newJString(Action))
  add(query_21628362, "Version", newJString(Version))
  result = call_21628361.call(nil, query_21628362, nil, formData_21628363, nil)

var postGetRole* = Call_PostGetRole_21628347(name: "postGetRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com", route: "/#Action=GetRole",
    validator: validate_PostGetRole_21628348, base: "/", makeUrl: url_PostGetRole_21628349,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetRole_21628331 = ref object of OpenApiRestCall_21625435
proc url_GetGetRole_21628333(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetRole_21628332(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628334 = query.getOrDefault("Action")
  valid_21628334 = validateParameter(valid_21628334, JString, required = true,
                                   default = newJString("GetRole"))
  if valid_21628334 != nil:
    section.add "Action", valid_21628334
  var valid_21628335 = query.getOrDefault("RoleName")
  valid_21628335 = validateParameter(valid_21628335, JString, required = true,
                                   default = nil)
  if valid_21628335 != nil:
    section.add "RoleName", valid_21628335
  var valid_21628336 = query.getOrDefault("Version")
  valid_21628336 = validateParameter(valid_21628336, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628336 != nil:
    section.add "Version", valid_21628336
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628337 = header.getOrDefault("X-Amz-Date")
  valid_21628337 = validateParameter(valid_21628337, JString, required = false,
                                   default = nil)
  if valid_21628337 != nil:
    section.add "X-Amz-Date", valid_21628337
  var valid_21628338 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628338 = validateParameter(valid_21628338, JString, required = false,
                                   default = nil)
  if valid_21628338 != nil:
    section.add "X-Amz-Security-Token", valid_21628338
  var valid_21628339 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628339 = validateParameter(valid_21628339, JString, required = false,
                                   default = nil)
  if valid_21628339 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628339
  var valid_21628340 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628340 = validateParameter(valid_21628340, JString, required = false,
                                   default = nil)
  if valid_21628340 != nil:
    section.add "X-Amz-Algorithm", valid_21628340
  var valid_21628341 = header.getOrDefault("X-Amz-Signature")
  valid_21628341 = validateParameter(valid_21628341, JString, required = false,
                                   default = nil)
  if valid_21628341 != nil:
    section.add "X-Amz-Signature", valid_21628341
  var valid_21628342 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628342 = validateParameter(valid_21628342, JString, required = false,
                                   default = nil)
  if valid_21628342 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628342
  var valid_21628343 = header.getOrDefault("X-Amz-Credential")
  valid_21628343 = validateParameter(valid_21628343, JString, required = false,
                                   default = nil)
  if valid_21628343 != nil:
    section.add "X-Amz-Credential", valid_21628343
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628344: Call_GetGetRole_21628331; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  let valid = call_21628344.validator(path, query, header, formData, body, _)
  let scheme = call_21628344.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628344.makeUrl(scheme.get, call_21628344.host, call_21628344.base,
                               call_21628344.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628344, uri, valid, _)

proc call*(call_21628345: Call_GetGetRole_21628331; RoleName: string;
          Action: string = "GetRole"; Version: string = "2010-05-08"): Recallable =
  ## getGetRole
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21628346 = newJObject()
  add(query_21628346, "Action", newJString(Action))
  add(query_21628346, "RoleName", newJString(RoleName))
  add(query_21628346, "Version", newJString(Version))
  result = call_21628345.call(nil, query_21628346, nil, nil, nil)

var getGetRole* = Call_GetGetRole_21628331(name: "getGetRole",
                                        meth: HttpMethod.HttpGet,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetRole",
                                        validator: validate_GetGetRole_21628332,
                                        base: "/", makeUrl: url_GetGetRole_21628333,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetRolePolicy_21628381 = ref object of OpenApiRestCall_21625435
proc url_PostGetRolePolicy_21628383(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetRolePolicy_21628382(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628384 = query.getOrDefault("Action")
  valid_21628384 = validateParameter(valid_21628384, JString, required = true,
                                   default = newJString("GetRolePolicy"))
  if valid_21628384 != nil:
    section.add "Action", valid_21628384
  var valid_21628385 = query.getOrDefault("Version")
  valid_21628385 = validateParameter(valid_21628385, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628385 != nil:
    section.add "Version", valid_21628385
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628386 = header.getOrDefault("X-Amz-Date")
  valid_21628386 = validateParameter(valid_21628386, JString, required = false,
                                   default = nil)
  if valid_21628386 != nil:
    section.add "X-Amz-Date", valid_21628386
  var valid_21628387 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628387 = validateParameter(valid_21628387, JString, required = false,
                                   default = nil)
  if valid_21628387 != nil:
    section.add "X-Amz-Security-Token", valid_21628387
  var valid_21628388 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628388 = validateParameter(valid_21628388, JString, required = false,
                                   default = nil)
  if valid_21628388 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628388
  var valid_21628389 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628389 = validateParameter(valid_21628389, JString, required = false,
                                   default = nil)
  if valid_21628389 != nil:
    section.add "X-Amz-Algorithm", valid_21628389
  var valid_21628390 = header.getOrDefault("X-Amz-Signature")
  valid_21628390 = validateParameter(valid_21628390, JString, required = false,
                                   default = nil)
  if valid_21628390 != nil:
    section.add "X-Amz-Signature", valid_21628390
  var valid_21628391 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628391 = validateParameter(valid_21628391, JString, required = false,
                                   default = nil)
  if valid_21628391 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628391
  var valid_21628392 = header.getOrDefault("X-Amz-Credential")
  valid_21628392 = validateParameter(valid_21628392, JString, required = false,
                                   default = nil)
  if valid_21628392 != nil:
    section.add "X-Amz-Credential", valid_21628392
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_21628393 = formData.getOrDefault("PolicyName")
  valid_21628393 = validateParameter(valid_21628393, JString, required = true,
                                   default = nil)
  if valid_21628393 != nil:
    section.add "PolicyName", valid_21628393
  var valid_21628394 = formData.getOrDefault("RoleName")
  valid_21628394 = validateParameter(valid_21628394, JString, required = true,
                                   default = nil)
  if valid_21628394 != nil:
    section.add "RoleName", valid_21628394
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628395: Call_PostGetRolePolicy_21628381; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  let valid = call_21628395.validator(path, query, header, formData, body, _)
  let scheme = call_21628395.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628395.makeUrl(scheme.get, call_21628395.host, call_21628395.base,
                               call_21628395.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628395, uri, valid, _)

proc call*(call_21628396: Call_PostGetRolePolicy_21628381; PolicyName: string;
          RoleName: string; Action: string = "GetRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetRolePolicy
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628397 = newJObject()
  var formData_21628398 = newJObject()
  add(formData_21628398, "PolicyName", newJString(PolicyName))
  add(formData_21628398, "RoleName", newJString(RoleName))
  add(query_21628397, "Action", newJString(Action))
  add(query_21628397, "Version", newJString(Version))
  result = call_21628396.call(nil, query_21628397, nil, formData_21628398, nil)

var postGetRolePolicy* = Call_PostGetRolePolicy_21628381(name: "postGetRolePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetRolePolicy", validator: validate_PostGetRolePolicy_21628382,
    base: "/", makeUrl: url_PostGetRolePolicy_21628383,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetRolePolicy_21628364 = ref object of OpenApiRestCall_21625435
proc url_GetGetRolePolicy_21628366(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetRolePolicy_21628365(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_21628367 = query.getOrDefault("Action")
  valid_21628367 = validateParameter(valid_21628367, JString, required = true,
                                   default = newJString("GetRolePolicy"))
  if valid_21628367 != nil:
    section.add "Action", valid_21628367
  var valid_21628368 = query.getOrDefault("RoleName")
  valid_21628368 = validateParameter(valid_21628368, JString, required = true,
                                   default = nil)
  if valid_21628368 != nil:
    section.add "RoleName", valid_21628368
  var valid_21628369 = query.getOrDefault("Version")
  valid_21628369 = validateParameter(valid_21628369, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628369 != nil:
    section.add "Version", valid_21628369
  var valid_21628370 = query.getOrDefault("PolicyName")
  valid_21628370 = validateParameter(valid_21628370, JString, required = true,
                                   default = nil)
  if valid_21628370 != nil:
    section.add "PolicyName", valid_21628370
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628371 = header.getOrDefault("X-Amz-Date")
  valid_21628371 = validateParameter(valid_21628371, JString, required = false,
                                   default = nil)
  if valid_21628371 != nil:
    section.add "X-Amz-Date", valid_21628371
  var valid_21628372 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628372 = validateParameter(valid_21628372, JString, required = false,
                                   default = nil)
  if valid_21628372 != nil:
    section.add "X-Amz-Security-Token", valid_21628372
  var valid_21628373 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628373 = validateParameter(valid_21628373, JString, required = false,
                                   default = nil)
  if valid_21628373 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628373
  var valid_21628374 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628374 = validateParameter(valid_21628374, JString, required = false,
                                   default = nil)
  if valid_21628374 != nil:
    section.add "X-Amz-Algorithm", valid_21628374
  var valid_21628375 = header.getOrDefault("X-Amz-Signature")
  valid_21628375 = validateParameter(valid_21628375, JString, required = false,
                                   default = nil)
  if valid_21628375 != nil:
    section.add "X-Amz-Signature", valid_21628375
  var valid_21628376 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628376 = validateParameter(valid_21628376, JString, required = false,
                                   default = nil)
  if valid_21628376 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628376
  var valid_21628377 = header.getOrDefault("X-Amz-Credential")
  valid_21628377 = validateParameter(valid_21628377, JString, required = false,
                                   default = nil)
  if valid_21628377 != nil:
    section.add "X-Amz-Credential", valid_21628377
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628378: Call_GetGetRolePolicy_21628364; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  let valid = call_21628378.validator(path, query, header, formData, body, _)
  let scheme = call_21628378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628378.makeUrl(scheme.get, call_21628378.host, call_21628378.base,
                               call_21628378.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628378, uri, valid, _)

proc call*(call_21628379: Call_GetGetRolePolicy_21628364; RoleName: string;
          PolicyName: string; Action: string = "GetRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetRolePolicy
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_21628380 = newJObject()
  add(query_21628380, "Action", newJString(Action))
  add(query_21628380, "RoleName", newJString(RoleName))
  add(query_21628380, "Version", newJString(Version))
  add(query_21628380, "PolicyName", newJString(PolicyName))
  result = call_21628379.call(nil, query_21628380, nil, nil, nil)

var getGetRolePolicy* = Call_GetGetRolePolicy_21628364(name: "getGetRolePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetRolePolicy", validator: validate_GetGetRolePolicy_21628365,
    base: "/", makeUrl: url_GetGetRolePolicy_21628366,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSAMLProvider_21628415 = ref object of OpenApiRestCall_21625435
proc url_PostGetSAMLProvider_21628417(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetSAMLProvider_21628416(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628418 = query.getOrDefault("Action")
  valid_21628418 = validateParameter(valid_21628418, JString, required = true,
                                   default = newJString("GetSAMLProvider"))
  if valid_21628418 != nil:
    section.add "Action", valid_21628418
  var valid_21628419 = query.getOrDefault("Version")
  valid_21628419 = validateParameter(valid_21628419, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628419 != nil:
    section.add "Version", valid_21628419
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628420 = header.getOrDefault("X-Amz-Date")
  valid_21628420 = validateParameter(valid_21628420, JString, required = false,
                                   default = nil)
  if valid_21628420 != nil:
    section.add "X-Amz-Date", valid_21628420
  var valid_21628421 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628421 = validateParameter(valid_21628421, JString, required = false,
                                   default = nil)
  if valid_21628421 != nil:
    section.add "X-Amz-Security-Token", valid_21628421
  var valid_21628422 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628422 = validateParameter(valid_21628422, JString, required = false,
                                   default = nil)
  if valid_21628422 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628422
  var valid_21628423 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628423 = validateParameter(valid_21628423, JString, required = false,
                                   default = nil)
  if valid_21628423 != nil:
    section.add "X-Amz-Algorithm", valid_21628423
  var valid_21628424 = header.getOrDefault("X-Amz-Signature")
  valid_21628424 = validateParameter(valid_21628424, JString, required = false,
                                   default = nil)
  if valid_21628424 != nil:
    section.add "X-Amz-Signature", valid_21628424
  var valid_21628425 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628425 = validateParameter(valid_21628425, JString, required = false,
                                   default = nil)
  if valid_21628425 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628425
  var valid_21628426 = header.getOrDefault("X-Amz-Credential")
  valid_21628426 = validateParameter(valid_21628426, JString, required = false,
                                   default = nil)
  if valid_21628426 != nil:
    section.add "X-Amz-Credential", valid_21628426
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_21628427 = formData.getOrDefault("SAMLProviderArn")
  valid_21628427 = validateParameter(valid_21628427, JString, required = true,
                                   default = nil)
  if valid_21628427 != nil:
    section.add "SAMLProviderArn", valid_21628427
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628428: Call_PostGetSAMLProvider_21628415; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_21628428.validator(path, query, header, formData, body, _)
  let scheme = call_21628428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628428.makeUrl(scheme.get, call_21628428.host, call_21628428.base,
                               call_21628428.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628428, uri, valid, _)

proc call*(call_21628429: Call_PostGetSAMLProvider_21628415;
          SAMLProviderArn: string; Action: string = "GetSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postGetSAMLProvider
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628430 = newJObject()
  var formData_21628431 = newJObject()
  add(formData_21628431, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_21628430, "Action", newJString(Action))
  add(query_21628430, "Version", newJString(Version))
  result = call_21628429.call(nil, query_21628430, nil, formData_21628431, nil)

var postGetSAMLProvider* = Call_PostGetSAMLProvider_21628415(
    name: "postGetSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetSAMLProvider",
    validator: validate_PostGetSAMLProvider_21628416, base: "/",
    makeUrl: url_PostGetSAMLProvider_21628417,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSAMLProvider_21628399 = ref object of OpenApiRestCall_21625435
proc url_GetGetSAMLProvider_21628401(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetSAMLProvider_21628400(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628402 = query.getOrDefault("Action")
  valid_21628402 = validateParameter(valid_21628402, JString, required = true,
                                   default = newJString("GetSAMLProvider"))
  if valid_21628402 != nil:
    section.add "Action", valid_21628402
  var valid_21628403 = query.getOrDefault("SAMLProviderArn")
  valid_21628403 = validateParameter(valid_21628403, JString, required = true,
                                   default = nil)
  if valid_21628403 != nil:
    section.add "SAMLProviderArn", valid_21628403
  var valid_21628404 = query.getOrDefault("Version")
  valid_21628404 = validateParameter(valid_21628404, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628404 != nil:
    section.add "Version", valid_21628404
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628405 = header.getOrDefault("X-Amz-Date")
  valid_21628405 = validateParameter(valid_21628405, JString, required = false,
                                   default = nil)
  if valid_21628405 != nil:
    section.add "X-Amz-Date", valid_21628405
  var valid_21628406 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628406 = validateParameter(valid_21628406, JString, required = false,
                                   default = nil)
  if valid_21628406 != nil:
    section.add "X-Amz-Security-Token", valid_21628406
  var valid_21628407 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628407 = validateParameter(valid_21628407, JString, required = false,
                                   default = nil)
  if valid_21628407 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628407
  var valid_21628408 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628408 = validateParameter(valid_21628408, JString, required = false,
                                   default = nil)
  if valid_21628408 != nil:
    section.add "X-Amz-Algorithm", valid_21628408
  var valid_21628409 = header.getOrDefault("X-Amz-Signature")
  valid_21628409 = validateParameter(valid_21628409, JString, required = false,
                                   default = nil)
  if valid_21628409 != nil:
    section.add "X-Amz-Signature", valid_21628409
  var valid_21628410 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628410 = validateParameter(valid_21628410, JString, required = false,
                                   default = nil)
  if valid_21628410 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628410
  var valid_21628411 = header.getOrDefault("X-Amz-Credential")
  valid_21628411 = validateParameter(valid_21628411, JString, required = false,
                                   default = nil)
  if valid_21628411 != nil:
    section.add "X-Amz-Credential", valid_21628411
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628412: Call_GetGetSAMLProvider_21628399; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_21628412.validator(path, query, header, formData, body, _)
  let scheme = call_21628412.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628412.makeUrl(scheme.get, call_21628412.host, call_21628412.base,
                               call_21628412.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628412, uri, valid, _)

proc call*(call_21628413: Call_GetGetSAMLProvider_21628399;
          SAMLProviderArn: string; Action: string = "GetSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getGetSAMLProvider
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_21628414 = newJObject()
  add(query_21628414, "Action", newJString(Action))
  add(query_21628414, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_21628414, "Version", newJString(Version))
  result = call_21628413.call(nil, query_21628414, nil, nil, nil)

var getGetSAMLProvider* = Call_GetGetSAMLProvider_21628399(
    name: "getGetSAMLProvider", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetSAMLProvider", validator: validate_GetGetSAMLProvider_21628400,
    base: "/", makeUrl: url_GetGetSAMLProvider_21628401,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSSHPublicKey_21628450 = ref object of OpenApiRestCall_21625435
proc url_PostGetSSHPublicKey_21628452(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetSSHPublicKey_21628451(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628453 = query.getOrDefault("Action")
  valid_21628453 = validateParameter(valid_21628453, JString, required = true,
                                   default = newJString("GetSSHPublicKey"))
  if valid_21628453 != nil:
    section.add "Action", valid_21628453
  var valid_21628454 = query.getOrDefault("Version")
  valid_21628454 = validateParameter(valid_21628454, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628454 != nil:
    section.add "Version", valid_21628454
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628455 = header.getOrDefault("X-Amz-Date")
  valid_21628455 = validateParameter(valid_21628455, JString, required = false,
                                   default = nil)
  if valid_21628455 != nil:
    section.add "X-Amz-Date", valid_21628455
  var valid_21628456 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628456 = validateParameter(valid_21628456, JString, required = false,
                                   default = nil)
  if valid_21628456 != nil:
    section.add "X-Amz-Security-Token", valid_21628456
  var valid_21628457 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628457 = validateParameter(valid_21628457, JString, required = false,
                                   default = nil)
  if valid_21628457 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628457
  var valid_21628458 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628458 = validateParameter(valid_21628458, JString, required = false,
                                   default = nil)
  if valid_21628458 != nil:
    section.add "X-Amz-Algorithm", valid_21628458
  var valid_21628459 = header.getOrDefault("X-Amz-Signature")
  valid_21628459 = validateParameter(valid_21628459, JString, required = false,
                                   default = nil)
  if valid_21628459 != nil:
    section.add "X-Amz-Signature", valid_21628459
  var valid_21628460 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628460 = validateParameter(valid_21628460, JString, required = false,
                                   default = nil)
  if valid_21628460 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628460
  var valid_21628461 = header.getOrDefault("X-Amz-Credential")
  valid_21628461 = validateParameter(valid_21628461, JString, required = false,
                                   default = nil)
  if valid_21628461 != nil:
    section.add "X-Amz-Credential", valid_21628461
  result.add "header", section
  ## parameters in `formData` object:
  ##   Encoding: JString (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_21628462 = formData.getOrDefault("Encoding")
  valid_21628462 = validateParameter(valid_21628462, JString, required = true,
                                   default = newJString("SSH"))
  if valid_21628462 != nil:
    section.add "Encoding", valid_21628462
  var valid_21628463 = formData.getOrDefault("UserName")
  valid_21628463 = validateParameter(valid_21628463, JString, required = true,
                                   default = nil)
  if valid_21628463 != nil:
    section.add "UserName", valid_21628463
  var valid_21628464 = formData.getOrDefault("SSHPublicKeyId")
  valid_21628464 = validateParameter(valid_21628464, JString, required = true,
                                   default = nil)
  if valid_21628464 != nil:
    section.add "SSHPublicKeyId", valid_21628464
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628465: Call_PostGetSSHPublicKey_21628450; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_21628465.validator(path, query, header, formData, body, _)
  let scheme = call_21628465.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628465.makeUrl(scheme.get, call_21628465.host, call_21628465.base,
                               call_21628465.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628465, uri, valid, _)

proc call*(call_21628466: Call_PostGetSSHPublicKey_21628450; UserName: string;
          SSHPublicKeyId: string; Encoding: string = "SSH";
          Action: string = "GetSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## postGetSSHPublicKey
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   Encoding: string (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628467 = newJObject()
  var formData_21628468 = newJObject()
  add(formData_21628468, "Encoding", newJString(Encoding))
  add(formData_21628468, "UserName", newJString(UserName))
  add(formData_21628468, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_21628467, "Action", newJString(Action))
  add(query_21628467, "Version", newJString(Version))
  result = call_21628466.call(nil, query_21628467, nil, formData_21628468, nil)

var postGetSSHPublicKey* = Call_PostGetSSHPublicKey_21628450(
    name: "postGetSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetSSHPublicKey",
    validator: validate_PostGetSSHPublicKey_21628451, base: "/",
    makeUrl: url_PostGetSSHPublicKey_21628452,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSSHPublicKey_21628432 = ref object of OpenApiRestCall_21625435
proc url_GetGetSSHPublicKey_21628434(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetSSHPublicKey_21628433(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Encoding: JString (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_21628435 = query.getOrDefault("SSHPublicKeyId")
  valid_21628435 = validateParameter(valid_21628435, JString, required = true,
                                   default = nil)
  if valid_21628435 != nil:
    section.add "SSHPublicKeyId", valid_21628435
  var valid_21628436 = query.getOrDefault("UserName")
  valid_21628436 = validateParameter(valid_21628436, JString, required = true,
                                   default = nil)
  if valid_21628436 != nil:
    section.add "UserName", valid_21628436
  var valid_21628437 = query.getOrDefault("Action")
  valid_21628437 = validateParameter(valid_21628437, JString, required = true,
                                   default = newJString("GetSSHPublicKey"))
  if valid_21628437 != nil:
    section.add "Action", valid_21628437
  var valid_21628438 = query.getOrDefault("Encoding")
  valid_21628438 = validateParameter(valid_21628438, JString, required = true,
                                   default = newJString("SSH"))
  if valid_21628438 != nil:
    section.add "Encoding", valid_21628438
  var valid_21628439 = query.getOrDefault("Version")
  valid_21628439 = validateParameter(valid_21628439, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628439 != nil:
    section.add "Version", valid_21628439
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628440 = header.getOrDefault("X-Amz-Date")
  valid_21628440 = validateParameter(valid_21628440, JString, required = false,
                                   default = nil)
  if valid_21628440 != nil:
    section.add "X-Amz-Date", valid_21628440
  var valid_21628441 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628441 = validateParameter(valid_21628441, JString, required = false,
                                   default = nil)
  if valid_21628441 != nil:
    section.add "X-Amz-Security-Token", valid_21628441
  var valid_21628442 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628442 = validateParameter(valid_21628442, JString, required = false,
                                   default = nil)
  if valid_21628442 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628442
  var valid_21628443 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628443 = validateParameter(valid_21628443, JString, required = false,
                                   default = nil)
  if valid_21628443 != nil:
    section.add "X-Amz-Algorithm", valid_21628443
  var valid_21628444 = header.getOrDefault("X-Amz-Signature")
  valid_21628444 = validateParameter(valid_21628444, JString, required = false,
                                   default = nil)
  if valid_21628444 != nil:
    section.add "X-Amz-Signature", valid_21628444
  var valid_21628445 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628445 = validateParameter(valid_21628445, JString, required = false,
                                   default = nil)
  if valid_21628445 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628445
  var valid_21628446 = header.getOrDefault("X-Amz-Credential")
  valid_21628446 = validateParameter(valid_21628446, JString, required = false,
                                   default = nil)
  if valid_21628446 != nil:
    section.add "X-Amz-Credential", valid_21628446
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628447: Call_GetGetSSHPublicKey_21628432; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_21628447.validator(path, query, header, formData, body, _)
  let scheme = call_21628447.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628447.makeUrl(scheme.get, call_21628447.host, call_21628447.base,
                               call_21628447.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628447, uri, valid, _)

proc call*(call_21628448: Call_GetGetSSHPublicKey_21628432; SSHPublicKeyId: string;
          UserName: string; Action: string = "GetSSHPublicKey";
          Encoding: string = "SSH"; Version: string = "2010-05-08"): Recallable =
  ## getGetSSHPublicKey
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Encoding: string (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   Version: string (required)
  var query_21628449 = newJObject()
  add(query_21628449, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_21628449, "UserName", newJString(UserName))
  add(query_21628449, "Action", newJString(Action))
  add(query_21628449, "Encoding", newJString(Encoding))
  add(query_21628449, "Version", newJString(Version))
  result = call_21628448.call(nil, query_21628449, nil, nil, nil)

var getGetSSHPublicKey* = Call_GetGetSSHPublicKey_21628432(
    name: "getGetSSHPublicKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetSSHPublicKey", validator: validate_GetGetSSHPublicKey_21628433,
    base: "/", makeUrl: url_GetGetSSHPublicKey_21628434,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServerCertificate_21628485 = ref object of OpenApiRestCall_21625435
proc url_PostGetServerCertificate_21628487(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServerCertificate_21628486(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628488 = query.getOrDefault("Action")
  valid_21628488 = validateParameter(valid_21628488, JString, required = true,
                                   default = newJString("GetServerCertificate"))
  if valid_21628488 != nil:
    section.add "Action", valid_21628488
  var valid_21628489 = query.getOrDefault("Version")
  valid_21628489 = validateParameter(valid_21628489, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628489 != nil:
    section.add "Version", valid_21628489
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628490 = header.getOrDefault("X-Amz-Date")
  valid_21628490 = validateParameter(valid_21628490, JString, required = false,
                                   default = nil)
  if valid_21628490 != nil:
    section.add "X-Amz-Date", valid_21628490
  var valid_21628491 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628491 = validateParameter(valid_21628491, JString, required = false,
                                   default = nil)
  if valid_21628491 != nil:
    section.add "X-Amz-Security-Token", valid_21628491
  var valid_21628492 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628492 = validateParameter(valid_21628492, JString, required = false,
                                   default = nil)
  if valid_21628492 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628492
  var valid_21628493 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628493 = validateParameter(valid_21628493, JString, required = false,
                                   default = nil)
  if valid_21628493 != nil:
    section.add "X-Amz-Algorithm", valid_21628493
  var valid_21628494 = header.getOrDefault("X-Amz-Signature")
  valid_21628494 = validateParameter(valid_21628494, JString, required = false,
                                   default = nil)
  if valid_21628494 != nil:
    section.add "X-Amz-Signature", valid_21628494
  var valid_21628495 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628495 = validateParameter(valid_21628495, JString, required = false,
                                   default = nil)
  if valid_21628495 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628495
  var valid_21628496 = header.getOrDefault("X-Amz-Credential")
  valid_21628496 = validateParameter(valid_21628496, JString, required = false,
                                   default = nil)
  if valid_21628496 != nil:
    section.add "X-Amz-Credential", valid_21628496
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_21628497 = formData.getOrDefault("ServerCertificateName")
  valid_21628497 = validateParameter(valid_21628497, JString, required = true,
                                   default = nil)
  if valid_21628497 != nil:
    section.add "ServerCertificateName", valid_21628497
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628498: Call_PostGetServerCertificate_21628485;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_21628498.validator(path, query, header, formData, body, _)
  let scheme = call_21628498.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628498.makeUrl(scheme.get, call_21628498.host, call_21628498.base,
                               call_21628498.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628498, uri, valid, _)

proc call*(call_21628499: Call_PostGetServerCertificate_21628485;
          ServerCertificateName: string; Action: string = "GetServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postGetServerCertificate
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628500 = newJObject()
  var formData_21628501 = newJObject()
  add(formData_21628501, "ServerCertificateName",
      newJString(ServerCertificateName))
  add(query_21628500, "Action", newJString(Action))
  add(query_21628500, "Version", newJString(Version))
  result = call_21628499.call(nil, query_21628500, nil, formData_21628501, nil)

var postGetServerCertificate* = Call_PostGetServerCertificate_21628485(
    name: "postGetServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetServerCertificate",
    validator: validate_PostGetServerCertificate_21628486, base: "/",
    makeUrl: url_PostGetServerCertificate_21628487,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServerCertificate_21628469 = ref object of OpenApiRestCall_21625435
proc url_GetGetServerCertificate_21628471(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServerCertificate_21628470(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_21628472 = query.getOrDefault("ServerCertificateName")
  valid_21628472 = validateParameter(valid_21628472, JString, required = true,
                                   default = nil)
  if valid_21628472 != nil:
    section.add "ServerCertificateName", valid_21628472
  var valid_21628473 = query.getOrDefault("Action")
  valid_21628473 = validateParameter(valid_21628473, JString, required = true,
                                   default = newJString("GetServerCertificate"))
  if valid_21628473 != nil:
    section.add "Action", valid_21628473
  var valid_21628474 = query.getOrDefault("Version")
  valid_21628474 = validateParameter(valid_21628474, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628474 != nil:
    section.add "Version", valid_21628474
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628475 = header.getOrDefault("X-Amz-Date")
  valid_21628475 = validateParameter(valid_21628475, JString, required = false,
                                   default = nil)
  if valid_21628475 != nil:
    section.add "X-Amz-Date", valid_21628475
  var valid_21628476 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628476 = validateParameter(valid_21628476, JString, required = false,
                                   default = nil)
  if valid_21628476 != nil:
    section.add "X-Amz-Security-Token", valid_21628476
  var valid_21628477 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628477 = validateParameter(valid_21628477, JString, required = false,
                                   default = nil)
  if valid_21628477 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628477
  var valid_21628478 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628478 = validateParameter(valid_21628478, JString, required = false,
                                   default = nil)
  if valid_21628478 != nil:
    section.add "X-Amz-Algorithm", valid_21628478
  var valid_21628479 = header.getOrDefault("X-Amz-Signature")
  valid_21628479 = validateParameter(valid_21628479, JString, required = false,
                                   default = nil)
  if valid_21628479 != nil:
    section.add "X-Amz-Signature", valid_21628479
  var valid_21628480 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628480 = validateParameter(valid_21628480, JString, required = false,
                                   default = nil)
  if valid_21628480 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628480
  var valid_21628481 = header.getOrDefault("X-Amz-Credential")
  valid_21628481 = validateParameter(valid_21628481, JString, required = false,
                                   default = nil)
  if valid_21628481 != nil:
    section.add "X-Amz-Credential", valid_21628481
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628482: Call_GetGetServerCertificate_21628469;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_21628482.validator(path, query, header, formData, body, _)
  let scheme = call_21628482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628482.makeUrl(scheme.get, call_21628482.host, call_21628482.base,
                               call_21628482.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628482, uri, valid, _)

proc call*(call_21628483: Call_GetGetServerCertificate_21628469;
          ServerCertificateName: string; Action: string = "GetServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServerCertificate
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628484 = newJObject()
  add(query_21628484, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_21628484, "Action", newJString(Action))
  add(query_21628484, "Version", newJString(Version))
  result = call_21628483.call(nil, query_21628484, nil, nil, nil)

var getGetServerCertificate* = Call_GetGetServerCertificate_21628469(
    name: "getGetServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetServerCertificate",
    validator: validate_GetGetServerCertificate_21628470, base: "/",
    makeUrl: url_GetGetServerCertificate_21628471,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLastAccessedDetails_21628520 = ref object of OpenApiRestCall_21625435
proc url_PostGetServiceLastAccessedDetails_21628522(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServiceLastAccessedDetails_21628521(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628523 = query.getOrDefault("Action")
  valid_21628523 = validateParameter(valid_21628523, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetails"))
  if valid_21628523 != nil:
    section.add "Action", valid_21628523
  var valid_21628524 = query.getOrDefault("Version")
  valid_21628524 = validateParameter(valid_21628524, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628524 != nil:
    section.add "Version", valid_21628524
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628525 = header.getOrDefault("X-Amz-Date")
  valid_21628525 = validateParameter(valid_21628525, JString, required = false,
                                   default = nil)
  if valid_21628525 != nil:
    section.add "X-Amz-Date", valid_21628525
  var valid_21628526 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628526 = validateParameter(valid_21628526, JString, required = false,
                                   default = nil)
  if valid_21628526 != nil:
    section.add "X-Amz-Security-Token", valid_21628526
  var valid_21628527 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628527 = validateParameter(valid_21628527, JString, required = false,
                                   default = nil)
  if valid_21628527 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628527
  var valid_21628528 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628528 = validateParameter(valid_21628528, JString, required = false,
                                   default = nil)
  if valid_21628528 != nil:
    section.add "X-Amz-Algorithm", valid_21628528
  var valid_21628529 = header.getOrDefault("X-Amz-Signature")
  valid_21628529 = validateParameter(valid_21628529, JString, required = false,
                                   default = nil)
  if valid_21628529 != nil:
    section.add "X-Amz-Signature", valid_21628529
  var valid_21628530 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628530 = validateParameter(valid_21628530, JString, required = false,
                                   default = nil)
  if valid_21628530 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628530
  var valid_21628531 = header.getOrDefault("X-Amz-Credential")
  valid_21628531 = validateParameter(valid_21628531, JString, required = false,
                                   default = nil)
  if valid_21628531 != nil:
    section.add "X-Amz-Credential", valid_21628531
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_21628532 = formData.getOrDefault("Marker")
  valid_21628532 = validateParameter(valid_21628532, JString, required = false,
                                   default = nil)
  if valid_21628532 != nil:
    section.add "Marker", valid_21628532
  assert formData != nil,
        "formData argument is necessary due to required `JobId` field"
  var valid_21628533 = formData.getOrDefault("JobId")
  valid_21628533 = validateParameter(valid_21628533, JString, required = true,
                                   default = nil)
  if valid_21628533 != nil:
    section.add "JobId", valid_21628533
  var valid_21628534 = formData.getOrDefault("MaxItems")
  valid_21628534 = validateParameter(valid_21628534, JInt, required = false,
                                   default = nil)
  if valid_21628534 != nil:
    section.add "MaxItems", valid_21628534
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628535: Call_PostGetServiceLastAccessedDetails_21628520;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_21628535.validator(path, query, header, formData, body, _)
  let scheme = call_21628535.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628535.makeUrl(scheme.get, call_21628535.host, call_21628535.base,
                               call_21628535.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628535, uri, valid, _)

proc call*(call_21628536: Call_PostGetServiceLastAccessedDetails_21628520;
          JobId: string; Marker: string = "";
          Action: string = "GetServiceLastAccessedDetails"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLastAccessedDetails
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628537 = newJObject()
  var formData_21628538 = newJObject()
  add(formData_21628538, "Marker", newJString(Marker))
  add(query_21628537, "Action", newJString(Action))
  add(formData_21628538, "JobId", newJString(JobId))
  add(formData_21628538, "MaxItems", newJInt(MaxItems))
  add(query_21628537, "Version", newJString(Version))
  result = call_21628536.call(nil, query_21628537, nil, formData_21628538, nil)

var postGetServiceLastAccessedDetails* = Call_PostGetServiceLastAccessedDetails_21628520(
    name: "postGetServiceLastAccessedDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetServiceLastAccessedDetails",
    validator: validate_PostGetServiceLastAccessedDetails_21628521, base: "/",
    makeUrl: url_PostGetServiceLastAccessedDetails_21628522,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLastAccessedDetails_21628502 = ref object of OpenApiRestCall_21625435
proc url_GetGetServiceLastAccessedDetails_21628504(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServiceLastAccessedDetails_21628503(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `JobId` field"
  var valid_21628505 = query.getOrDefault("JobId")
  valid_21628505 = validateParameter(valid_21628505, JString, required = true,
                                   default = nil)
  if valid_21628505 != nil:
    section.add "JobId", valid_21628505
  var valid_21628506 = query.getOrDefault("Action")
  valid_21628506 = validateParameter(valid_21628506, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetails"))
  if valid_21628506 != nil:
    section.add "Action", valid_21628506
  var valid_21628507 = query.getOrDefault("Marker")
  valid_21628507 = validateParameter(valid_21628507, JString, required = false,
                                   default = nil)
  if valid_21628507 != nil:
    section.add "Marker", valid_21628507
  var valid_21628508 = query.getOrDefault("MaxItems")
  valid_21628508 = validateParameter(valid_21628508, JInt, required = false,
                                   default = nil)
  if valid_21628508 != nil:
    section.add "MaxItems", valid_21628508
  var valid_21628509 = query.getOrDefault("Version")
  valid_21628509 = validateParameter(valid_21628509, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628509 != nil:
    section.add "Version", valid_21628509
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628510 = header.getOrDefault("X-Amz-Date")
  valid_21628510 = validateParameter(valid_21628510, JString, required = false,
                                   default = nil)
  if valid_21628510 != nil:
    section.add "X-Amz-Date", valid_21628510
  var valid_21628511 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628511 = validateParameter(valid_21628511, JString, required = false,
                                   default = nil)
  if valid_21628511 != nil:
    section.add "X-Amz-Security-Token", valid_21628511
  var valid_21628512 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628512 = validateParameter(valid_21628512, JString, required = false,
                                   default = nil)
  if valid_21628512 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628512
  var valid_21628513 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628513 = validateParameter(valid_21628513, JString, required = false,
                                   default = nil)
  if valid_21628513 != nil:
    section.add "X-Amz-Algorithm", valid_21628513
  var valid_21628514 = header.getOrDefault("X-Amz-Signature")
  valid_21628514 = validateParameter(valid_21628514, JString, required = false,
                                   default = nil)
  if valid_21628514 != nil:
    section.add "X-Amz-Signature", valid_21628514
  var valid_21628515 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628515 = validateParameter(valid_21628515, JString, required = false,
                                   default = nil)
  if valid_21628515 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628515
  var valid_21628516 = header.getOrDefault("X-Amz-Credential")
  valid_21628516 = validateParameter(valid_21628516, JString, required = false,
                                   default = nil)
  if valid_21628516 != nil:
    section.add "X-Amz-Credential", valid_21628516
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628517: Call_GetGetServiceLastAccessedDetails_21628502;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_21628517.validator(path, query, header, formData, body, _)
  let scheme = call_21628517.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628517.makeUrl(scheme.get, call_21628517.host, call_21628517.base,
                               call_21628517.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628517, uri, valid, _)

proc call*(call_21628518: Call_GetGetServiceLastAccessedDetails_21628502;
          JobId: string; Action: string = "GetServiceLastAccessedDetails";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLastAccessedDetails
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628519 = newJObject()
  add(query_21628519, "JobId", newJString(JobId))
  add(query_21628519, "Action", newJString(Action))
  add(query_21628519, "Marker", newJString(Marker))
  add(query_21628519, "MaxItems", newJInt(MaxItems))
  add(query_21628519, "Version", newJString(Version))
  result = call_21628518.call(nil, query_21628519, nil, nil, nil)

var getGetServiceLastAccessedDetails* = Call_GetGetServiceLastAccessedDetails_21628502(
    name: "getGetServiceLastAccessedDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetServiceLastAccessedDetails",
    validator: validate_GetGetServiceLastAccessedDetails_21628503, base: "/",
    makeUrl: url_GetGetServiceLastAccessedDetails_21628504,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLastAccessedDetailsWithEntities_21628558 = ref object of OpenApiRestCall_21625435
proc url_PostGetServiceLastAccessedDetailsWithEntities_21628560(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServiceLastAccessedDetailsWithEntities_21628559(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628561 = query.getOrDefault("Action")
  valid_21628561 = validateParameter(valid_21628561, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetailsWithEntities"))
  if valid_21628561 != nil:
    section.add "Action", valid_21628561
  var valid_21628562 = query.getOrDefault("Version")
  valid_21628562 = validateParameter(valid_21628562, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628562 != nil:
    section.add "Version", valid_21628562
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628563 = header.getOrDefault("X-Amz-Date")
  valid_21628563 = validateParameter(valid_21628563, JString, required = false,
                                   default = nil)
  if valid_21628563 != nil:
    section.add "X-Amz-Date", valid_21628563
  var valid_21628564 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628564 = validateParameter(valid_21628564, JString, required = false,
                                   default = nil)
  if valid_21628564 != nil:
    section.add "X-Amz-Security-Token", valid_21628564
  var valid_21628565 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628565 = validateParameter(valid_21628565, JString, required = false,
                                   default = nil)
  if valid_21628565 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628565
  var valid_21628566 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628566 = validateParameter(valid_21628566, JString, required = false,
                                   default = nil)
  if valid_21628566 != nil:
    section.add "X-Amz-Algorithm", valid_21628566
  var valid_21628567 = header.getOrDefault("X-Amz-Signature")
  valid_21628567 = validateParameter(valid_21628567, JString, required = false,
                                   default = nil)
  if valid_21628567 != nil:
    section.add "X-Amz-Signature", valid_21628567
  var valid_21628568 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628568 = validateParameter(valid_21628568, JString, required = false,
                                   default = nil)
  if valid_21628568 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628568
  var valid_21628569 = header.getOrDefault("X-Amz-Credential")
  valid_21628569 = validateParameter(valid_21628569, JString, required = false,
                                   default = nil)
  if valid_21628569 != nil:
    section.add "X-Amz-Credential", valid_21628569
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceNamespace: JString (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceNamespace` field"
  var valid_21628570 = formData.getOrDefault("ServiceNamespace")
  valid_21628570 = validateParameter(valid_21628570, JString, required = true,
                                   default = nil)
  if valid_21628570 != nil:
    section.add "ServiceNamespace", valid_21628570
  var valid_21628571 = formData.getOrDefault("Marker")
  valid_21628571 = validateParameter(valid_21628571, JString, required = false,
                                   default = nil)
  if valid_21628571 != nil:
    section.add "Marker", valid_21628571
  var valid_21628572 = formData.getOrDefault("JobId")
  valid_21628572 = validateParameter(valid_21628572, JString, required = true,
                                   default = nil)
  if valid_21628572 != nil:
    section.add "JobId", valid_21628572
  var valid_21628573 = formData.getOrDefault("MaxItems")
  valid_21628573 = validateParameter(valid_21628573, JInt, required = false,
                                   default = nil)
  if valid_21628573 != nil:
    section.add "MaxItems", valid_21628573
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628574: Call_PostGetServiceLastAccessedDetailsWithEntities_21628558;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  let valid = call_21628574.validator(path, query, header, formData, body, _)
  let scheme = call_21628574.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628574.makeUrl(scheme.get, call_21628574.host, call_21628574.base,
                               call_21628574.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628574, uri, valid, _)

proc call*(call_21628575: Call_PostGetServiceLastAccessedDetailsWithEntities_21628558;
          ServiceNamespace: string; JobId: string; Marker: string = "";
          Action: string = "GetServiceLastAccessedDetailsWithEntities";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLastAccessedDetailsWithEntities
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ##   ServiceNamespace: string (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628576 = newJObject()
  var formData_21628577 = newJObject()
  add(formData_21628577, "ServiceNamespace", newJString(ServiceNamespace))
  add(formData_21628577, "Marker", newJString(Marker))
  add(query_21628576, "Action", newJString(Action))
  add(formData_21628577, "JobId", newJString(JobId))
  add(formData_21628577, "MaxItems", newJInt(MaxItems))
  add(query_21628576, "Version", newJString(Version))
  result = call_21628575.call(nil, query_21628576, nil, formData_21628577, nil)

var postGetServiceLastAccessedDetailsWithEntities* = Call_PostGetServiceLastAccessedDetailsWithEntities_21628558(
    name: "postGetServiceLastAccessedDetailsWithEntities",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLastAccessedDetailsWithEntities",
    validator: validate_PostGetServiceLastAccessedDetailsWithEntities_21628559,
    base: "/", makeUrl: url_PostGetServiceLastAccessedDetailsWithEntities_21628560,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLastAccessedDetailsWithEntities_21628539 = ref object of OpenApiRestCall_21625435
proc url_GetGetServiceLastAccessedDetailsWithEntities_21628541(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServiceLastAccessedDetailsWithEntities_21628540(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  ##   ServiceNamespace: JString (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `JobId` field"
  var valid_21628542 = query.getOrDefault("JobId")
  valid_21628542 = validateParameter(valid_21628542, JString, required = true,
                                   default = nil)
  if valid_21628542 != nil:
    section.add "JobId", valid_21628542
  var valid_21628543 = query.getOrDefault("Action")
  valid_21628543 = validateParameter(valid_21628543, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetailsWithEntities"))
  if valid_21628543 != nil:
    section.add "Action", valid_21628543
  var valid_21628544 = query.getOrDefault("Marker")
  valid_21628544 = validateParameter(valid_21628544, JString, required = false,
                                   default = nil)
  if valid_21628544 != nil:
    section.add "Marker", valid_21628544
  var valid_21628545 = query.getOrDefault("MaxItems")
  valid_21628545 = validateParameter(valid_21628545, JInt, required = false,
                                   default = nil)
  if valid_21628545 != nil:
    section.add "MaxItems", valid_21628545
  var valid_21628546 = query.getOrDefault("Version")
  valid_21628546 = validateParameter(valid_21628546, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628546 != nil:
    section.add "Version", valid_21628546
  var valid_21628547 = query.getOrDefault("ServiceNamespace")
  valid_21628547 = validateParameter(valid_21628547, JString, required = true,
                                   default = nil)
  if valid_21628547 != nil:
    section.add "ServiceNamespace", valid_21628547
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628548 = header.getOrDefault("X-Amz-Date")
  valid_21628548 = validateParameter(valid_21628548, JString, required = false,
                                   default = nil)
  if valid_21628548 != nil:
    section.add "X-Amz-Date", valid_21628548
  var valid_21628549 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628549 = validateParameter(valid_21628549, JString, required = false,
                                   default = nil)
  if valid_21628549 != nil:
    section.add "X-Amz-Security-Token", valid_21628549
  var valid_21628550 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628550 = validateParameter(valid_21628550, JString, required = false,
                                   default = nil)
  if valid_21628550 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628550
  var valid_21628551 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628551 = validateParameter(valid_21628551, JString, required = false,
                                   default = nil)
  if valid_21628551 != nil:
    section.add "X-Amz-Algorithm", valid_21628551
  var valid_21628552 = header.getOrDefault("X-Amz-Signature")
  valid_21628552 = validateParameter(valid_21628552, JString, required = false,
                                   default = nil)
  if valid_21628552 != nil:
    section.add "X-Amz-Signature", valid_21628552
  var valid_21628553 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628553 = validateParameter(valid_21628553, JString, required = false,
                                   default = nil)
  if valid_21628553 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628553
  var valid_21628554 = header.getOrDefault("X-Amz-Credential")
  valid_21628554 = validateParameter(valid_21628554, JString, required = false,
                                   default = nil)
  if valid_21628554 != nil:
    section.add "X-Amz-Credential", valid_21628554
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628555: Call_GetGetServiceLastAccessedDetailsWithEntities_21628539;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  let valid = call_21628555.validator(path, query, header, formData, body, _)
  let scheme = call_21628555.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628555.makeUrl(scheme.get, call_21628555.host, call_21628555.base,
                               call_21628555.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628555, uri, valid, _)

proc call*(call_21628556: Call_GetGetServiceLastAccessedDetailsWithEntities_21628539;
          JobId: string; ServiceNamespace: string;
          Action: string = "GetServiceLastAccessedDetailsWithEntities";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLastAccessedDetailsWithEntities
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  ##   ServiceNamespace: string (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  var query_21628557 = newJObject()
  add(query_21628557, "JobId", newJString(JobId))
  add(query_21628557, "Action", newJString(Action))
  add(query_21628557, "Marker", newJString(Marker))
  add(query_21628557, "MaxItems", newJInt(MaxItems))
  add(query_21628557, "Version", newJString(Version))
  add(query_21628557, "ServiceNamespace", newJString(ServiceNamespace))
  result = call_21628556.call(nil, query_21628557, nil, nil, nil)

var getGetServiceLastAccessedDetailsWithEntities* = Call_GetGetServiceLastAccessedDetailsWithEntities_21628539(
    name: "getGetServiceLastAccessedDetailsWithEntities",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLastAccessedDetailsWithEntities",
    validator: validate_GetGetServiceLastAccessedDetailsWithEntities_21628540,
    base: "/", makeUrl: url_GetGetServiceLastAccessedDetailsWithEntities_21628541,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLinkedRoleDeletionStatus_21628594 = ref object of OpenApiRestCall_21625435
proc url_PostGetServiceLinkedRoleDeletionStatus_21628596(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServiceLinkedRoleDeletionStatus_21628595(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628597 = query.getOrDefault("Action")
  valid_21628597 = validateParameter(valid_21628597, JString, required = true, default = newJString(
      "GetServiceLinkedRoleDeletionStatus"))
  if valid_21628597 != nil:
    section.add "Action", valid_21628597
  var valid_21628598 = query.getOrDefault("Version")
  valid_21628598 = validateParameter(valid_21628598, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628598 != nil:
    section.add "Version", valid_21628598
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628599 = header.getOrDefault("X-Amz-Date")
  valid_21628599 = validateParameter(valid_21628599, JString, required = false,
                                   default = nil)
  if valid_21628599 != nil:
    section.add "X-Amz-Date", valid_21628599
  var valid_21628600 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628600 = validateParameter(valid_21628600, JString, required = false,
                                   default = nil)
  if valid_21628600 != nil:
    section.add "X-Amz-Security-Token", valid_21628600
  var valid_21628601 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628601 = validateParameter(valid_21628601, JString, required = false,
                                   default = nil)
  if valid_21628601 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628601
  var valid_21628602 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628602 = validateParameter(valid_21628602, JString, required = false,
                                   default = nil)
  if valid_21628602 != nil:
    section.add "X-Amz-Algorithm", valid_21628602
  var valid_21628603 = header.getOrDefault("X-Amz-Signature")
  valid_21628603 = validateParameter(valid_21628603, JString, required = false,
                                   default = nil)
  if valid_21628603 != nil:
    section.add "X-Amz-Signature", valid_21628603
  var valid_21628604 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628604 = validateParameter(valid_21628604, JString, required = false,
                                   default = nil)
  if valid_21628604 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628604
  var valid_21628605 = header.getOrDefault("X-Amz-Credential")
  valid_21628605 = validateParameter(valid_21628605, JString, required = false,
                                   default = nil)
  if valid_21628605 != nil:
    section.add "X-Amz-Credential", valid_21628605
  result.add "header", section
  ## parameters in `formData` object:
  ##   DeletionTaskId: JString (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DeletionTaskId` field"
  var valid_21628606 = formData.getOrDefault("DeletionTaskId")
  valid_21628606 = validateParameter(valid_21628606, JString, required = true,
                                   default = nil)
  if valid_21628606 != nil:
    section.add "DeletionTaskId", valid_21628606
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628607: Call_PostGetServiceLinkedRoleDeletionStatus_21628594;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  let valid = call_21628607.validator(path, query, header, formData, body, _)
  let scheme = call_21628607.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628607.makeUrl(scheme.get, call_21628607.host, call_21628607.base,
                               call_21628607.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628607, uri, valid, _)

proc call*(call_21628608: Call_PostGetServiceLinkedRoleDeletionStatus_21628594;
          DeletionTaskId: string;
          Action: string = "GetServiceLinkedRoleDeletionStatus";
          Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLinkedRoleDeletionStatus
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ##   Action: string (required)
  ##   DeletionTaskId: string (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Version: string (required)
  var query_21628609 = newJObject()
  var formData_21628610 = newJObject()
  add(query_21628609, "Action", newJString(Action))
  add(formData_21628610, "DeletionTaskId", newJString(DeletionTaskId))
  add(query_21628609, "Version", newJString(Version))
  result = call_21628608.call(nil, query_21628609, nil, formData_21628610, nil)

var postGetServiceLinkedRoleDeletionStatus* = Call_PostGetServiceLinkedRoleDeletionStatus_21628594(
    name: "postGetServiceLinkedRoleDeletionStatus", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLinkedRoleDeletionStatus",
    validator: validate_PostGetServiceLinkedRoleDeletionStatus_21628595,
    base: "/", makeUrl: url_PostGetServiceLinkedRoleDeletionStatus_21628596,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLinkedRoleDeletionStatus_21628578 = ref object of OpenApiRestCall_21625435
proc url_GetGetServiceLinkedRoleDeletionStatus_21628580(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServiceLinkedRoleDeletionStatus_21628579(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DeletionTaskId: JString (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628581 = query.getOrDefault("Action")
  valid_21628581 = validateParameter(valid_21628581, JString, required = true, default = newJString(
      "GetServiceLinkedRoleDeletionStatus"))
  if valid_21628581 != nil:
    section.add "Action", valid_21628581
  var valid_21628582 = query.getOrDefault("DeletionTaskId")
  valid_21628582 = validateParameter(valid_21628582, JString, required = true,
                                   default = nil)
  if valid_21628582 != nil:
    section.add "DeletionTaskId", valid_21628582
  var valid_21628583 = query.getOrDefault("Version")
  valid_21628583 = validateParameter(valid_21628583, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628583 != nil:
    section.add "Version", valid_21628583
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628584 = header.getOrDefault("X-Amz-Date")
  valid_21628584 = validateParameter(valid_21628584, JString, required = false,
                                   default = nil)
  if valid_21628584 != nil:
    section.add "X-Amz-Date", valid_21628584
  var valid_21628585 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628585 = validateParameter(valid_21628585, JString, required = false,
                                   default = nil)
  if valid_21628585 != nil:
    section.add "X-Amz-Security-Token", valid_21628585
  var valid_21628586 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628586 = validateParameter(valid_21628586, JString, required = false,
                                   default = nil)
  if valid_21628586 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628586
  var valid_21628587 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628587 = validateParameter(valid_21628587, JString, required = false,
                                   default = nil)
  if valid_21628587 != nil:
    section.add "X-Amz-Algorithm", valid_21628587
  var valid_21628588 = header.getOrDefault("X-Amz-Signature")
  valid_21628588 = validateParameter(valid_21628588, JString, required = false,
                                   default = nil)
  if valid_21628588 != nil:
    section.add "X-Amz-Signature", valid_21628588
  var valid_21628589 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628589 = validateParameter(valid_21628589, JString, required = false,
                                   default = nil)
  if valid_21628589 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628589
  var valid_21628590 = header.getOrDefault("X-Amz-Credential")
  valid_21628590 = validateParameter(valid_21628590, JString, required = false,
                                   default = nil)
  if valid_21628590 != nil:
    section.add "X-Amz-Credential", valid_21628590
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628591: Call_GetGetServiceLinkedRoleDeletionStatus_21628578;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  let valid = call_21628591.validator(path, query, header, formData, body, _)
  let scheme = call_21628591.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628591.makeUrl(scheme.get, call_21628591.host, call_21628591.base,
                               call_21628591.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628591, uri, valid, _)

proc call*(call_21628592: Call_GetGetServiceLinkedRoleDeletionStatus_21628578;
          DeletionTaskId: string;
          Action: string = "GetServiceLinkedRoleDeletionStatus";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLinkedRoleDeletionStatus
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ##   Action: string (required)
  ##   DeletionTaskId: string (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Version: string (required)
  var query_21628593 = newJObject()
  add(query_21628593, "Action", newJString(Action))
  add(query_21628593, "DeletionTaskId", newJString(DeletionTaskId))
  add(query_21628593, "Version", newJString(Version))
  result = call_21628592.call(nil, query_21628593, nil, nil, nil)

var getGetServiceLinkedRoleDeletionStatus* = Call_GetGetServiceLinkedRoleDeletionStatus_21628578(
    name: "getGetServiceLinkedRoleDeletionStatus", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLinkedRoleDeletionStatus",
    validator: validate_GetGetServiceLinkedRoleDeletionStatus_21628579, base: "/",
    makeUrl: url_GetGetServiceLinkedRoleDeletionStatus_21628580,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetUser_21628627 = ref object of OpenApiRestCall_21625435
proc url_PostGetUser_21628629(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetUser_21628628(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628630 = query.getOrDefault("Action")
  valid_21628630 = validateParameter(valid_21628630, JString, required = true,
                                   default = newJString("GetUser"))
  if valid_21628630 != nil:
    section.add "Action", valid_21628630
  var valid_21628631 = query.getOrDefault("Version")
  valid_21628631 = validateParameter(valid_21628631, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628631 != nil:
    section.add "Version", valid_21628631
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628632 = header.getOrDefault("X-Amz-Date")
  valid_21628632 = validateParameter(valid_21628632, JString, required = false,
                                   default = nil)
  if valid_21628632 != nil:
    section.add "X-Amz-Date", valid_21628632
  var valid_21628633 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628633 = validateParameter(valid_21628633, JString, required = false,
                                   default = nil)
  if valid_21628633 != nil:
    section.add "X-Amz-Security-Token", valid_21628633
  var valid_21628634 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628634 = validateParameter(valid_21628634, JString, required = false,
                                   default = nil)
  if valid_21628634 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628634
  var valid_21628635 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628635 = validateParameter(valid_21628635, JString, required = false,
                                   default = nil)
  if valid_21628635 != nil:
    section.add "X-Amz-Algorithm", valid_21628635
  var valid_21628636 = header.getOrDefault("X-Amz-Signature")
  valid_21628636 = validateParameter(valid_21628636, JString, required = false,
                                   default = nil)
  if valid_21628636 != nil:
    section.add "X-Amz-Signature", valid_21628636
  var valid_21628637 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628637 = validateParameter(valid_21628637, JString, required = false,
                                   default = nil)
  if valid_21628637 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628637
  var valid_21628638 = header.getOrDefault("X-Amz-Credential")
  valid_21628638 = validateParameter(valid_21628638, JString, required = false,
                                   default = nil)
  if valid_21628638 != nil:
    section.add "X-Amz-Credential", valid_21628638
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_21628639 = formData.getOrDefault("UserName")
  valid_21628639 = validateParameter(valid_21628639, JString, required = false,
                                   default = nil)
  if valid_21628639 != nil:
    section.add "UserName", valid_21628639
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628640: Call_PostGetUser_21628627; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  let valid = call_21628640.validator(path, query, header, formData, body, _)
  let scheme = call_21628640.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628640.makeUrl(scheme.get, call_21628640.host, call_21628640.base,
                               call_21628640.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628640, uri, valid, _)

proc call*(call_21628641: Call_PostGetUser_21628627; UserName: string = "";
          Action: string = "GetUser"; Version: string = "2010-05-08"): Recallable =
  ## postGetUser
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ##   UserName: string
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628642 = newJObject()
  var formData_21628643 = newJObject()
  add(formData_21628643, "UserName", newJString(UserName))
  add(query_21628642, "Action", newJString(Action))
  add(query_21628642, "Version", newJString(Version))
  result = call_21628641.call(nil, query_21628642, nil, formData_21628643, nil)

var postGetUser* = Call_PostGetUser_21628627(name: "postGetUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com", route: "/#Action=GetUser",
    validator: validate_PostGetUser_21628628, base: "/", makeUrl: url_PostGetUser_21628629,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetUser_21628611 = ref object of OpenApiRestCall_21625435
proc url_GetGetUser_21628613(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetUser_21628612(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628614 = query.getOrDefault("UserName")
  valid_21628614 = validateParameter(valid_21628614, JString, required = false,
                                   default = nil)
  if valid_21628614 != nil:
    section.add "UserName", valid_21628614
  var valid_21628615 = query.getOrDefault("Action")
  valid_21628615 = validateParameter(valid_21628615, JString, required = true,
                                   default = newJString("GetUser"))
  if valid_21628615 != nil:
    section.add "Action", valid_21628615
  var valid_21628616 = query.getOrDefault("Version")
  valid_21628616 = validateParameter(valid_21628616, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628616 != nil:
    section.add "Version", valid_21628616
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628617 = header.getOrDefault("X-Amz-Date")
  valid_21628617 = validateParameter(valid_21628617, JString, required = false,
                                   default = nil)
  if valid_21628617 != nil:
    section.add "X-Amz-Date", valid_21628617
  var valid_21628618 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628618 = validateParameter(valid_21628618, JString, required = false,
                                   default = nil)
  if valid_21628618 != nil:
    section.add "X-Amz-Security-Token", valid_21628618
  var valid_21628619 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628619 = validateParameter(valid_21628619, JString, required = false,
                                   default = nil)
  if valid_21628619 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628619
  var valid_21628620 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628620 = validateParameter(valid_21628620, JString, required = false,
                                   default = nil)
  if valid_21628620 != nil:
    section.add "X-Amz-Algorithm", valid_21628620
  var valid_21628621 = header.getOrDefault("X-Amz-Signature")
  valid_21628621 = validateParameter(valid_21628621, JString, required = false,
                                   default = nil)
  if valid_21628621 != nil:
    section.add "X-Amz-Signature", valid_21628621
  var valid_21628622 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628622 = validateParameter(valid_21628622, JString, required = false,
                                   default = nil)
  if valid_21628622 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628622
  var valid_21628623 = header.getOrDefault("X-Amz-Credential")
  valid_21628623 = validateParameter(valid_21628623, JString, required = false,
                                   default = nil)
  if valid_21628623 != nil:
    section.add "X-Amz-Credential", valid_21628623
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628624: Call_GetGetUser_21628611; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  let valid = call_21628624.validator(path, query, header, formData, body, _)
  let scheme = call_21628624.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628624.makeUrl(scheme.get, call_21628624.host, call_21628624.base,
                               call_21628624.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628624, uri, valid, _)

proc call*(call_21628625: Call_GetGetUser_21628611; UserName: string = "";
          Action: string = "GetUser"; Version: string = "2010-05-08"): Recallable =
  ## getGetUser
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ##   UserName: string
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628626 = newJObject()
  add(query_21628626, "UserName", newJString(UserName))
  add(query_21628626, "Action", newJString(Action))
  add(query_21628626, "Version", newJString(Version))
  result = call_21628625.call(nil, query_21628626, nil, nil, nil)

var getGetUser* = Call_GetGetUser_21628611(name: "getGetUser",
                                        meth: HttpMethod.HttpGet,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetUser",
                                        validator: validate_GetGetUser_21628612,
                                        base: "/", makeUrl: url_GetGetUser_21628613,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetUserPolicy_21628661 = ref object of OpenApiRestCall_21625435
proc url_PostGetUserPolicy_21628663(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetUserPolicy_21628662(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628664 = query.getOrDefault("Action")
  valid_21628664 = validateParameter(valid_21628664, JString, required = true,
                                   default = newJString("GetUserPolicy"))
  if valid_21628664 != nil:
    section.add "Action", valid_21628664
  var valid_21628665 = query.getOrDefault("Version")
  valid_21628665 = validateParameter(valid_21628665, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628665 != nil:
    section.add "Version", valid_21628665
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628666 = header.getOrDefault("X-Amz-Date")
  valid_21628666 = validateParameter(valid_21628666, JString, required = false,
                                   default = nil)
  if valid_21628666 != nil:
    section.add "X-Amz-Date", valid_21628666
  var valid_21628667 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628667 = validateParameter(valid_21628667, JString, required = false,
                                   default = nil)
  if valid_21628667 != nil:
    section.add "X-Amz-Security-Token", valid_21628667
  var valid_21628668 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628668 = validateParameter(valid_21628668, JString, required = false,
                                   default = nil)
  if valid_21628668 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628668
  var valid_21628669 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628669 = validateParameter(valid_21628669, JString, required = false,
                                   default = nil)
  if valid_21628669 != nil:
    section.add "X-Amz-Algorithm", valid_21628669
  var valid_21628670 = header.getOrDefault("X-Amz-Signature")
  valid_21628670 = validateParameter(valid_21628670, JString, required = false,
                                   default = nil)
  if valid_21628670 != nil:
    section.add "X-Amz-Signature", valid_21628670
  var valid_21628671 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628671 = validateParameter(valid_21628671, JString, required = false,
                                   default = nil)
  if valid_21628671 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628671
  var valid_21628672 = header.getOrDefault("X-Amz-Credential")
  valid_21628672 = validateParameter(valid_21628672, JString, required = false,
                                   default = nil)
  if valid_21628672 != nil:
    section.add "X-Amz-Credential", valid_21628672
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_21628673 = formData.getOrDefault("PolicyName")
  valid_21628673 = validateParameter(valid_21628673, JString, required = true,
                                   default = nil)
  if valid_21628673 != nil:
    section.add "PolicyName", valid_21628673
  var valid_21628674 = formData.getOrDefault("UserName")
  valid_21628674 = validateParameter(valid_21628674, JString, required = true,
                                   default = nil)
  if valid_21628674 != nil:
    section.add "UserName", valid_21628674
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628675: Call_PostGetUserPolicy_21628661; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21628675.validator(path, query, header, formData, body, _)
  let scheme = call_21628675.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628675.makeUrl(scheme.get, call_21628675.host, call_21628675.base,
                               call_21628675.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628675, uri, valid, _)

proc call*(call_21628676: Call_PostGetUserPolicy_21628661; PolicyName: string;
          UserName: string; Action: string = "GetUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetUserPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628677 = newJObject()
  var formData_21628678 = newJObject()
  add(formData_21628678, "PolicyName", newJString(PolicyName))
  add(formData_21628678, "UserName", newJString(UserName))
  add(query_21628677, "Action", newJString(Action))
  add(query_21628677, "Version", newJString(Version))
  result = call_21628676.call(nil, query_21628677, nil, formData_21628678, nil)

var postGetUserPolicy* = Call_PostGetUserPolicy_21628661(name: "postGetUserPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetUserPolicy", validator: validate_PostGetUserPolicy_21628662,
    base: "/", makeUrl: url_PostGetUserPolicy_21628663,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetUserPolicy_21628644 = ref object of OpenApiRestCall_21625435
proc url_GetGetUserPolicy_21628646(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetUserPolicy_21628645(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_21628647 = query.getOrDefault("UserName")
  valid_21628647 = validateParameter(valid_21628647, JString, required = true,
                                   default = nil)
  if valid_21628647 != nil:
    section.add "UserName", valid_21628647
  var valid_21628648 = query.getOrDefault("Action")
  valid_21628648 = validateParameter(valid_21628648, JString, required = true,
                                   default = newJString("GetUserPolicy"))
  if valid_21628648 != nil:
    section.add "Action", valid_21628648
  var valid_21628649 = query.getOrDefault("Version")
  valid_21628649 = validateParameter(valid_21628649, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628649 != nil:
    section.add "Version", valid_21628649
  var valid_21628650 = query.getOrDefault("PolicyName")
  valid_21628650 = validateParameter(valid_21628650, JString, required = true,
                                   default = nil)
  if valid_21628650 != nil:
    section.add "PolicyName", valid_21628650
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628651 = header.getOrDefault("X-Amz-Date")
  valid_21628651 = validateParameter(valid_21628651, JString, required = false,
                                   default = nil)
  if valid_21628651 != nil:
    section.add "X-Amz-Date", valid_21628651
  var valid_21628652 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628652 = validateParameter(valid_21628652, JString, required = false,
                                   default = nil)
  if valid_21628652 != nil:
    section.add "X-Amz-Security-Token", valid_21628652
  var valid_21628653 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628653 = validateParameter(valid_21628653, JString, required = false,
                                   default = nil)
  if valid_21628653 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628653
  var valid_21628654 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628654 = validateParameter(valid_21628654, JString, required = false,
                                   default = nil)
  if valid_21628654 != nil:
    section.add "X-Amz-Algorithm", valid_21628654
  var valid_21628655 = header.getOrDefault("X-Amz-Signature")
  valid_21628655 = validateParameter(valid_21628655, JString, required = false,
                                   default = nil)
  if valid_21628655 != nil:
    section.add "X-Amz-Signature", valid_21628655
  var valid_21628656 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628656 = validateParameter(valid_21628656, JString, required = false,
                                   default = nil)
  if valid_21628656 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628656
  var valid_21628657 = header.getOrDefault("X-Amz-Credential")
  valid_21628657 = validateParameter(valid_21628657, JString, required = false,
                                   default = nil)
  if valid_21628657 != nil:
    section.add "X-Amz-Credential", valid_21628657
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628658: Call_GetGetUserPolicy_21628644; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21628658.validator(path, query, header, formData, body, _)
  let scheme = call_21628658.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628658.makeUrl(scheme.get, call_21628658.host, call_21628658.base,
                               call_21628658.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628658, uri, valid, _)

proc call*(call_21628659: Call_GetGetUserPolicy_21628644; UserName: string;
          PolicyName: string; Action: string = "GetUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetUserPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_21628660 = newJObject()
  add(query_21628660, "UserName", newJString(UserName))
  add(query_21628660, "Action", newJString(Action))
  add(query_21628660, "Version", newJString(Version))
  add(query_21628660, "PolicyName", newJString(PolicyName))
  result = call_21628659.call(nil, query_21628660, nil, nil, nil)

var getGetUserPolicy* = Call_GetGetUserPolicy_21628644(name: "getGetUserPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetUserPolicy", validator: validate_GetGetUserPolicy_21628645,
    base: "/", makeUrl: url_GetGetUserPolicy_21628646,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAccessKeys_21628697 = ref object of OpenApiRestCall_21625435
proc url_PostListAccessKeys_21628699(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAccessKeys_21628698(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628700 = query.getOrDefault("Action")
  valid_21628700 = validateParameter(valid_21628700, JString, required = true,
                                   default = newJString("ListAccessKeys"))
  if valid_21628700 != nil:
    section.add "Action", valid_21628700
  var valid_21628701 = query.getOrDefault("Version")
  valid_21628701 = validateParameter(valid_21628701, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628701 != nil:
    section.add "Version", valid_21628701
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628702 = header.getOrDefault("X-Amz-Date")
  valid_21628702 = validateParameter(valid_21628702, JString, required = false,
                                   default = nil)
  if valid_21628702 != nil:
    section.add "X-Amz-Date", valid_21628702
  var valid_21628703 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628703 = validateParameter(valid_21628703, JString, required = false,
                                   default = nil)
  if valid_21628703 != nil:
    section.add "X-Amz-Security-Token", valid_21628703
  var valid_21628704 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628704 = validateParameter(valid_21628704, JString, required = false,
                                   default = nil)
  if valid_21628704 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628704
  var valid_21628705 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628705 = validateParameter(valid_21628705, JString, required = false,
                                   default = nil)
  if valid_21628705 != nil:
    section.add "X-Amz-Algorithm", valid_21628705
  var valid_21628706 = header.getOrDefault("X-Amz-Signature")
  valid_21628706 = validateParameter(valid_21628706, JString, required = false,
                                   default = nil)
  if valid_21628706 != nil:
    section.add "X-Amz-Signature", valid_21628706
  var valid_21628707 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628707 = validateParameter(valid_21628707, JString, required = false,
                                   default = nil)
  if valid_21628707 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628707
  var valid_21628708 = header.getOrDefault("X-Amz-Credential")
  valid_21628708 = validateParameter(valid_21628708, JString, required = false,
                                   default = nil)
  if valid_21628708 != nil:
    section.add "X-Amz-Credential", valid_21628708
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_21628709 = formData.getOrDefault("UserName")
  valid_21628709 = validateParameter(valid_21628709, JString, required = false,
                                   default = nil)
  if valid_21628709 != nil:
    section.add "UserName", valid_21628709
  var valid_21628710 = formData.getOrDefault("Marker")
  valid_21628710 = validateParameter(valid_21628710, JString, required = false,
                                   default = nil)
  if valid_21628710 != nil:
    section.add "Marker", valid_21628710
  var valid_21628711 = formData.getOrDefault("MaxItems")
  valid_21628711 = validateParameter(valid_21628711, JInt, required = false,
                                   default = nil)
  if valid_21628711 != nil:
    section.add "MaxItems", valid_21628711
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628712: Call_PostListAccessKeys_21628697; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  let valid = call_21628712.validator(path, query, header, formData, body, _)
  let scheme = call_21628712.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628712.makeUrl(scheme.get, call_21628712.host, call_21628712.base,
                               call_21628712.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628712, uri, valid, _)

proc call*(call_21628713: Call_PostListAccessKeys_21628697; UserName: string = "";
          Marker: string = ""; Action: string = "ListAccessKeys"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAccessKeys
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ##   UserName: string
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628714 = newJObject()
  var formData_21628715 = newJObject()
  add(formData_21628715, "UserName", newJString(UserName))
  add(formData_21628715, "Marker", newJString(Marker))
  add(query_21628714, "Action", newJString(Action))
  add(formData_21628715, "MaxItems", newJInt(MaxItems))
  add(query_21628714, "Version", newJString(Version))
  result = call_21628713.call(nil, query_21628714, nil, formData_21628715, nil)

var postListAccessKeys* = Call_PostListAccessKeys_21628697(
    name: "postListAccessKeys", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAccessKeys",
    validator: validate_PostListAccessKeys_21628698, base: "/",
    makeUrl: url_PostListAccessKeys_21628699, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAccessKeys_21628679 = ref object of OpenApiRestCall_21625435
proc url_GetListAccessKeys_21628681(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAccessKeys_21628680(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628682 = query.getOrDefault("UserName")
  valid_21628682 = validateParameter(valid_21628682, JString, required = false,
                                   default = nil)
  if valid_21628682 != nil:
    section.add "UserName", valid_21628682
  var valid_21628683 = query.getOrDefault("Action")
  valid_21628683 = validateParameter(valid_21628683, JString, required = true,
                                   default = newJString("ListAccessKeys"))
  if valid_21628683 != nil:
    section.add "Action", valid_21628683
  var valid_21628684 = query.getOrDefault("Marker")
  valid_21628684 = validateParameter(valid_21628684, JString, required = false,
                                   default = nil)
  if valid_21628684 != nil:
    section.add "Marker", valid_21628684
  var valid_21628685 = query.getOrDefault("MaxItems")
  valid_21628685 = validateParameter(valid_21628685, JInt, required = false,
                                   default = nil)
  if valid_21628685 != nil:
    section.add "MaxItems", valid_21628685
  var valid_21628686 = query.getOrDefault("Version")
  valid_21628686 = validateParameter(valid_21628686, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628686 != nil:
    section.add "Version", valid_21628686
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628687 = header.getOrDefault("X-Amz-Date")
  valid_21628687 = validateParameter(valid_21628687, JString, required = false,
                                   default = nil)
  if valid_21628687 != nil:
    section.add "X-Amz-Date", valid_21628687
  var valid_21628688 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628688 = validateParameter(valid_21628688, JString, required = false,
                                   default = nil)
  if valid_21628688 != nil:
    section.add "X-Amz-Security-Token", valid_21628688
  var valid_21628689 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628689 = validateParameter(valid_21628689, JString, required = false,
                                   default = nil)
  if valid_21628689 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628689
  var valid_21628690 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628690 = validateParameter(valid_21628690, JString, required = false,
                                   default = nil)
  if valid_21628690 != nil:
    section.add "X-Amz-Algorithm", valid_21628690
  var valid_21628691 = header.getOrDefault("X-Amz-Signature")
  valid_21628691 = validateParameter(valid_21628691, JString, required = false,
                                   default = nil)
  if valid_21628691 != nil:
    section.add "X-Amz-Signature", valid_21628691
  var valid_21628692 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628692 = validateParameter(valid_21628692, JString, required = false,
                                   default = nil)
  if valid_21628692 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628692
  var valid_21628693 = header.getOrDefault("X-Amz-Credential")
  valid_21628693 = validateParameter(valid_21628693, JString, required = false,
                                   default = nil)
  if valid_21628693 != nil:
    section.add "X-Amz-Credential", valid_21628693
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628694: Call_GetListAccessKeys_21628679; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  let valid = call_21628694.validator(path, query, header, formData, body, _)
  let scheme = call_21628694.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628694.makeUrl(scheme.get, call_21628694.host, call_21628694.base,
                               call_21628694.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628694, uri, valid, _)

proc call*(call_21628695: Call_GetListAccessKeys_21628679; UserName: string = "";
          Action: string = "ListAccessKeys"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListAccessKeys
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ##   UserName: string
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628696 = newJObject()
  add(query_21628696, "UserName", newJString(UserName))
  add(query_21628696, "Action", newJString(Action))
  add(query_21628696, "Marker", newJString(Marker))
  add(query_21628696, "MaxItems", newJInt(MaxItems))
  add(query_21628696, "Version", newJString(Version))
  result = call_21628695.call(nil, query_21628696, nil, nil, nil)

var getListAccessKeys* = Call_GetListAccessKeys_21628679(name: "getListAccessKeys",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListAccessKeys", validator: validate_GetListAccessKeys_21628680,
    base: "/", makeUrl: url_GetListAccessKeys_21628681,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAccountAliases_21628733 = ref object of OpenApiRestCall_21625435
proc url_PostListAccountAliases_21628735(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAccountAliases_21628734(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628736 = query.getOrDefault("Action")
  valid_21628736 = validateParameter(valid_21628736, JString, required = true,
                                   default = newJString("ListAccountAliases"))
  if valid_21628736 != nil:
    section.add "Action", valid_21628736
  var valid_21628737 = query.getOrDefault("Version")
  valid_21628737 = validateParameter(valid_21628737, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628737 != nil:
    section.add "Version", valid_21628737
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628738 = header.getOrDefault("X-Amz-Date")
  valid_21628738 = validateParameter(valid_21628738, JString, required = false,
                                   default = nil)
  if valid_21628738 != nil:
    section.add "X-Amz-Date", valid_21628738
  var valid_21628739 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628739 = validateParameter(valid_21628739, JString, required = false,
                                   default = nil)
  if valid_21628739 != nil:
    section.add "X-Amz-Security-Token", valid_21628739
  var valid_21628740 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628740 = validateParameter(valid_21628740, JString, required = false,
                                   default = nil)
  if valid_21628740 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628740
  var valid_21628741 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628741 = validateParameter(valid_21628741, JString, required = false,
                                   default = nil)
  if valid_21628741 != nil:
    section.add "X-Amz-Algorithm", valid_21628741
  var valid_21628742 = header.getOrDefault("X-Amz-Signature")
  valid_21628742 = validateParameter(valid_21628742, JString, required = false,
                                   default = nil)
  if valid_21628742 != nil:
    section.add "X-Amz-Signature", valid_21628742
  var valid_21628743 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628743 = validateParameter(valid_21628743, JString, required = false,
                                   default = nil)
  if valid_21628743 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628743
  var valid_21628744 = header.getOrDefault("X-Amz-Credential")
  valid_21628744 = validateParameter(valid_21628744, JString, required = false,
                                   default = nil)
  if valid_21628744 != nil:
    section.add "X-Amz-Credential", valid_21628744
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_21628745 = formData.getOrDefault("Marker")
  valid_21628745 = validateParameter(valid_21628745, JString, required = false,
                                   default = nil)
  if valid_21628745 != nil:
    section.add "Marker", valid_21628745
  var valid_21628746 = formData.getOrDefault("MaxItems")
  valid_21628746 = validateParameter(valid_21628746, JInt, required = false,
                                   default = nil)
  if valid_21628746 != nil:
    section.add "MaxItems", valid_21628746
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628747: Call_PostListAccountAliases_21628733;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21628747.validator(path, query, header, formData, body, _)
  let scheme = call_21628747.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628747.makeUrl(scheme.get, call_21628747.host, call_21628747.base,
                               call_21628747.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628747, uri, valid, _)

proc call*(call_21628748: Call_PostListAccountAliases_21628733;
          Marker: string = ""; Action: string = "ListAccountAliases"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAccountAliases
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628749 = newJObject()
  var formData_21628750 = newJObject()
  add(formData_21628750, "Marker", newJString(Marker))
  add(query_21628749, "Action", newJString(Action))
  add(formData_21628750, "MaxItems", newJInt(MaxItems))
  add(query_21628749, "Version", newJString(Version))
  result = call_21628748.call(nil, query_21628749, nil, formData_21628750, nil)

var postListAccountAliases* = Call_PostListAccountAliases_21628733(
    name: "postListAccountAliases", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAccountAliases",
    validator: validate_PostListAccountAliases_21628734, base: "/",
    makeUrl: url_PostListAccountAliases_21628735,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAccountAliases_21628716 = ref object of OpenApiRestCall_21625435
proc url_GetListAccountAliases_21628718(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAccountAliases_21628717(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628719 = query.getOrDefault("Action")
  valid_21628719 = validateParameter(valid_21628719, JString, required = true,
                                   default = newJString("ListAccountAliases"))
  if valid_21628719 != nil:
    section.add "Action", valid_21628719
  var valid_21628720 = query.getOrDefault("Marker")
  valid_21628720 = validateParameter(valid_21628720, JString, required = false,
                                   default = nil)
  if valid_21628720 != nil:
    section.add "Marker", valid_21628720
  var valid_21628721 = query.getOrDefault("MaxItems")
  valid_21628721 = validateParameter(valid_21628721, JInt, required = false,
                                   default = nil)
  if valid_21628721 != nil:
    section.add "MaxItems", valid_21628721
  var valid_21628722 = query.getOrDefault("Version")
  valid_21628722 = validateParameter(valid_21628722, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628722 != nil:
    section.add "Version", valid_21628722
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628723 = header.getOrDefault("X-Amz-Date")
  valid_21628723 = validateParameter(valid_21628723, JString, required = false,
                                   default = nil)
  if valid_21628723 != nil:
    section.add "X-Amz-Date", valid_21628723
  var valid_21628724 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628724 = validateParameter(valid_21628724, JString, required = false,
                                   default = nil)
  if valid_21628724 != nil:
    section.add "X-Amz-Security-Token", valid_21628724
  var valid_21628725 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628725 = validateParameter(valid_21628725, JString, required = false,
                                   default = nil)
  if valid_21628725 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628725
  var valid_21628726 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628726 = validateParameter(valid_21628726, JString, required = false,
                                   default = nil)
  if valid_21628726 != nil:
    section.add "X-Amz-Algorithm", valid_21628726
  var valid_21628727 = header.getOrDefault("X-Amz-Signature")
  valid_21628727 = validateParameter(valid_21628727, JString, required = false,
                                   default = nil)
  if valid_21628727 != nil:
    section.add "X-Amz-Signature", valid_21628727
  var valid_21628728 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628728 = validateParameter(valid_21628728, JString, required = false,
                                   default = nil)
  if valid_21628728 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628728
  var valid_21628729 = header.getOrDefault("X-Amz-Credential")
  valid_21628729 = validateParameter(valid_21628729, JString, required = false,
                                   default = nil)
  if valid_21628729 != nil:
    section.add "X-Amz-Credential", valid_21628729
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628730: Call_GetListAccountAliases_21628716;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21628730.validator(path, query, header, formData, body, _)
  let scheme = call_21628730.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628730.makeUrl(scheme.get, call_21628730.host, call_21628730.base,
                               call_21628730.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628730, uri, valid, _)

proc call*(call_21628731: Call_GetListAccountAliases_21628716;
          Action: string = "ListAccountAliases"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListAccountAliases
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628732 = newJObject()
  add(query_21628732, "Action", newJString(Action))
  add(query_21628732, "Marker", newJString(Marker))
  add(query_21628732, "MaxItems", newJInt(MaxItems))
  add(query_21628732, "Version", newJString(Version))
  result = call_21628731.call(nil, query_21628732, nil, nil, nil)

var getListAccountAliases* = Call_GetListAccountAliases_21628716(
    name: "getListAccountAliases", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAccountAliases",
    validator: validate_GetListAccountAliases_21628717, base: "/",
    makeUrl: url_GetListAccountAliases_21628718,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedGroupPolicies_21628770 = ref object of OpenApiRestCall_21625435
proc url_PostListAttachedGroupPolicies_21628772(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAttachedGroupPolicies_21628771(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628773 = query.getOrDefault("Action")
  valid_21628773 = validateParameter(valid_21628773, JString, required = true, default = newJString(
      "ListAttachedGroupPolicies"))
  if valid_21628773 != nil:
    section.add "Action", valid_21628773
  var valid_21628774 = query.getOrDefault("Version")
  valid_21628774 = validateParameter(valid_21628774, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628774 != nil:
    section.add "Version", valid_21628774
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628775 = header.getOrDefault("X-Amz-Date")
  valid_21628775 = validateParameter(valid_21628775, JString, required = false,
                                   default = nil)
  if valid_21628775 != nil:
    section.add "X-Amz-Date", valid_21628775
  var valid_21628776 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628776 = validateParameter(valid_21628776, JString, required = false,
                                   default = nil)
  if valid_21628776 != nil:
    section.add "X-Amz-Security-Token", valid_21628776
  var valid_21628777 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628777 = validateParameter(valid_21628777, JString, required = false,
                                   default = nil)
  if valid_21628777 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628777
  var valid_21628778 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628778 = validateParameter(valid_21628778, JString, required = false,
                                   default = nil)
  if valid_21628778 != nil:
    section.add "X-Amz-Algorithm", valid_21628778
  var valid_21628779 = header.getOrDefault("X-Amz-Signature")
  valid_21628779 = validateParameter(valid_21628779, JString, required = false,
                                   default = nil)
  if valid_21628779 != nil:
    section.add "X-Amz-Signature", valid_21628779
  var valid_21628780 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628780 = validateParameter(valid_21628780, JString, required = false,
                                   default = nil)
  if valid_21628780 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628780
  var valid_21628781 = header.getOrDefault("X-Amz-Credential")
  valid_21628781 = validateParameter(valid_21628781, JString, required = false,
                                   default = nil)
  if valid_21628781 != nil:
    section.add "X-Amz-Credential", valid_21628781
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_21628782 = formData.getOrDefault("PathPrefix")
  valid_21628782 = validateParameter(valid_21628782, JString, required = false,
                                   default = nil)
  if valid_21628782 != nil:
    section.add "PathPrefix", valid_21628782
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_21628783 = formData.getOrDefault("GroupName")
  valid_21628783 = validateParameter(valid_21628783, JString, required = true,
                                   default = nil)
  if valid_21628783 != nil:
    section.add "GroupName", valid_21628783
  var valid_21628784 = formData.getOrDefault("Marker")
  valid_21628784 = validateParameter(valid_21628784, JString, required = false,
                                   default = nil)
  if valid_21628784 != nil:
    section.add "Marker", valid_21628784
  var valid_21628785 = formData.getOrDefault("MaxItems")
  valid_21628785 = validateParameter(valid_21628785, JInt, required = false,
                                   default = nil)
  if valid_21628785 != nil:
    section.add "MaxItems", valid_21628785
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628786: Call_PostListAttachedGroupPolicies_21628770;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_21628786.validator(path, query, header, formData, body, _)
  let scheme = call_21628786.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628786.makeUrl(scheme.get, call_21628786.host, call_21628786.base,
                               call_21628786.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628786, uri, valid, _)

proc call*(call_21628787: Call_PostListAttachedGroupPolicies_21628770;
          GroupName: string; PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListAttachedGroupPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedGroupPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628788 = newJObject()
  var formData_21628789 = newJObject()
  add(formData_21628789, "PathPrefix", newJString(PathPrefix))
  add(formData_21628789, "GroupName", newJString(GroupName))
  add(formData_21628789, "Marker", newJString(Marker))
  add(query_21628788, "Action", newJString(Action))
  add(formData_21628789, "MaxItems", newJInt(MaxItems))
  add(query_21628788, "Version", newJString(Version))
  result = call_21628787.call(nil, query_21628788, nil, formData_21628789, nil)

var postListAttachedGroupPolicies* = Call_PostListAttachedGroupPolicies_21628770(
    name: "postListAttachedGroupPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedGroupPolicies",
    validator: validate_PostListAttachedGroupPolicies_21628771, base: "/",
    makeUrl: url_PostListAttachedGroupPolicies_21628772,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedGroupPolicies_21628751 = ref object of OpenApiRestCall_21625435
proc url_GetListAttachedGroupPolicies_21628753(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAttachedGroupPolicies_21628752(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628754 = query.getOrDefault("PathPrefix")
  valid_21628754 = validateParameter(valid_21628754, JString, required = false,
                                   default = nil)
  if valid_21628754 != nil:
    section.add "PathPrefix", valid_21628754
  var valid_21628755 = query.getOrDefault("Action")
  valid_21628755 = validateParameter(valid_21628755, JString, required = true, default = newJString(
      "ListAttachedGroupPolicies"))
  if valid_21628755 != nil:
    section.add "Action", valid_21628755
  var valid_21628756 = query.getOrDefault("Marker")
  valid_21628756 = validateParameter(valid_21628756, JString, required = false,
                                   default = nil)
  if valid_21628756 != nil:
    section.add "Marker", valid_21628756
  var valid_21628757 = query.getOrDefault("GroupName")
  valid_21628757 = validateParameter(valid_21628757, JString, required = true,
                                   default = nil)
  if valid_21628757 != nil:
    section.add "GroupName", valid_21628757
  var valid_21628758 = query.getOrDefault("MaxItems")
  valid_21628758 = validateParameter(valid_21628758, JInt, required = false,
                                   default = nil)
  if valid_21628758 != nil:
    section.add "MaxItems", valid_21628758
  var valid_21628759 = query.getOrDefault("Version")
  valid_21628759 = validateParameter(valid_21628759, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628759 != nil:
    section.add "Version", valid_21628759
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628760 = header.getOrDefault("X-Amz-Date")
  valid_21628760 = validateParameter(valid_21628760, JString, required = false,
                                   default = nil)
  if valid_21628760 != nil:
    section.add "X-Amz-Date", valid_21628760
  var valid_21628761 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628761 = validateParameter(valid_21628761, JString, required = false,
                                   default = nil)
  if valid_21628761 != nil:
    section.add "X-Amz-Security-Token", valid_21628761
  var valid_21628762 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628762 = validateParameter(valid_21628762, JString, required = false,
                                   default = nil)
  if valid_21628762 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628762
  var valid_21628763 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628763 = validateParameter(valid_21628763, JString, required = false,
                                   default = nil)
  if valid_21628763 != nil:
    section.add "X-Amz-Algorithm", valid_21628763
  var valid_21628764 = header.getOrDefault("X-Amz-Signature")
  valid_21628764 = validateParameter(valid_21628764, JString, required = false,
                                   default = nil)
  if valid_21628764 != nil:
    section.add "X-Amz-Signature", valid_21628764
  var valid_21628765 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628765 = validateParameter(valid_21628765, JString, required = false,
                                   default = nil)
  if valid_21628765 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628765
  var valid_21628766 = header.getOrDefault("X-Amz-Credential")
  valid_21628766 = validateParameter(valid_21628766, JString, required = false,
                                   default = nil)
  if valid_21628766 != nil:
    section.add "X-Amz-Credential", valid_21628766
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628767: Call_GetListAttachedGroupPolicies_21628751;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_21628767.validator(path, query, header, formData, body, _)
  let scheme = call_21628767.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628767.makeUrl(scheme.get, call_21628767.host, call_21628767.base,
                               call_21628767.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628767, uri, valid, _)

proc call*(call_21628768: Call_GetListAttachedGroupPolicies_21628751;
          GroupName: string; PathPrefix: string = "";
          Action: string = "ListAttachedGroupPolicies"; Marker: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListAttachedGroupPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628769 = newJObject()
  add(query_21628769, "PathPrefix", newJString(PathPrefix))
  add(query_21628769, "Action", newJString(Action))
  add(query_21628769, "Marker", newJString(Marker))
  add(query_21628769, "GroupName", newJString(GroupName))
  add(query_21628769, "MaxItems", newJInt(MaxItems))
  add(query_21628769, "Version", newJString(Version))
  result = call_21628768.call(nil, query_21628769, nil, nil, nil)

var getListAttachedGroupPolicies* = Call_GetListAttachedGroupPolicies_21628751(
    name: "getListAttachedGroupPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedGroupPolicies",
    validator: validate_GetListAttachedGroupPolicies_21628752, base: "/",
    makeUrl: url_GetListAttachedGroupPolicies_21628753,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedRolePolicies_21628809 = ref object of OpenApiRestCall_21625435
proc url_PostListAttachedRolePolicies_21628811(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAttachedRolePolicies_21628810(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628812 = query.getOrDefault("Action")
  valid_21628812 = validateParameter(valid_21628812, JString, required = true, default = newJString(
      "ListAttachedRolePolicies"))
  if valid_21628812 != nil:
    section.add "Action", valid_21628812
  var valid_21628813 = query.getOrDefault("Version")
  valid_21628813 = validateParameter(valid_21628813, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628813 != nil:
    section.add "Version", valid_21628813
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628814 = header.getOrDefault("X-Amz-Date")
  valid_21628814 = validateParameter(valid_21628814, JString, required = false,
                                   default = nil)
  if valid_21628814 != nil:
    section.add "X-Amz-Date", valid_21628814
  var valid_21628815 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628815 = validateParameter(valid_21628815, JString, required = false,
                                   default = nil)
  if valid_21628815 != nil:
    section.add "X-Amz-Security-Token", valid_21628815
  var valid_21628816 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628816 = validateParameter(valid_21628816, JString, required = false,
                                   default = nil)
  if valid_21628816 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628816
  var valid_21628817 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628817 = validateParameter(valid_21628817, JString, required = false,
                                   default = nil)
  if valid_21628817 != nil:
    section.add "X-Amz-Algorithm", valid_21628817
  var valid_21628818 = header.getOrDefault("X-Amz-Signature")
  valid_21628818 = validateParameter(valid_21628818, JString, required = false,
                                   default = nil)
  if valid_21628818 != nil:
    section.add "X-Amz-Signature", valid_21628818
  var valid_21628819 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628819 = validateParameter(valid_21628819, JString, required = false,
                                   default = nil)
  if valid_21628819 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628819
  var valid_21628820 = header.getOrDefault("X-Amz-Credential")
  valid_21628820 = validateParameter(valid_21628820, JString, required = false,
                                   default = nil)
  if valid_21628820 != nil:
    section.add "X-Amz-Credential", valid_21628820
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_21628821 = formData.getOrDefault("PathPrefix")
  valid_21628821 = validateParameter(valid_21628821, JString, required = false,
                                   default = nil)
  if valid_21628821 != nil:
    section.add "PathPrefix", valid_21628821
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_21628822 = formData.getOrDefault("RoleName")
  valid_21628822 = validateParameter(valid_21628822, JString, required = true,
                                   default = nil)
  if valid_21628822 != nil:
    section.add "RoleName", valid_21628822
  var valid_21628823 = formData.getOrDefault("Marker")
  valid_21628823 = validateParameter(valid_21628823, JString, required = false,
                                   default = nil)
  if valid_21628823 != nil:
    section.add "Marker", valid_21628823
  var valid_21628824 = formData.getOrDefault("MaxItems")
  valid_21628824 = validateParameter(valid_21628824, JInt, required = false,
                                   default = nil)
  if valid_21628824 != nil:
    section.add "MaxItems", valid_21628824
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628825: Call_PostListAttachedRolePolicies_21628809;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_21628825.validator(path, query, header, formData, body, _)
  let scheme = call_21628825.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628825.makeUrl(scheme.get, call_21628825.host, call_21628825.base,
                               call_21628825.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628825, uri, valid, _)

proc call*(call_21628826: Call_PostListAttachedRolePolicies_21628809;
          RoleName: string; PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListAttachedRolePolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedRolePolicies
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628827 = newJObject()
  var formData_21628828 = newJObject()
  add(formData_21628828, "PathPrefix", newJString(PathPrefix))
  add(formData_21628828, "RoleName", newJString(RoleName))
  add(formData_21628828, "Marker", newJString(Marker))
  add(query_21628827, "Action", newJString(Action))
  add(formData_21628828, "MaxItems", newJInt(MaxItems))
  add(query_21628827, "Version", newJString(Version))
  result = call_21628826.call(nil, query_21628827, nil, formData_21628828, nil)

var postListAttachedRolePolicies* = Call_PostListAttachedRolePolicies_21628809(
    name: "postListAttachedRolePolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedRolePolicies",
    validator: validate_PostListAttachedRolePolicies_21628810, base: "/",
    makeUrl: url_PostListAttachedRolePolicies_21628811,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedRolePolicies_21628790 = ref object of OpenApiRestCall_21625435
proc url_GetListAttachedRolePolicies_21628792(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAttachedRolePolicies_21628791(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628793 = query.getOrDefault("PathPrefix")
  valid_21628793 = validateParameter(valid_21628793, JString, required = false,
                                   default = nil)
  if valid_21628793 != nil:
    section.add "PathPrefix", valid_21628793
  var valid_21628794 = query.getOrDefault("Action")
  valid_21628794 = validateParameter(valid_21628794, JString, required = true, default = newJString(
      "ListAttachedRolePolicies"))
  if valid_21628794 != nil:
    section.add "Action", valid_21628794
  var valid_21628795 = query.getOrDefault("Marker")
  valid_21628795 = validateParameter(valid_21628795, JString, required = false,
                                   default = nil)
  if valid_21628795 != nil:
    section.add "Marker", valid_21628795
  var valid_21628796 = query.getOrDefault("MaxItems")
  valid_21628796 = validateParameter(valid_21628796, JInt, required = false,
                                   default = nil)
  if valid_21628796 != nil:
    section.add "MaxItems", valid_21628796
  var valid_21628797 = query.getOrDefault("RoleName")
  valid_21628797 = validateParameter(valid_21628797, JString, required = true,
                                   default = nil)
  if valid_21628797 != nil:
    section.add "RoleName", valid_21628797
  var valid_21628798 = query.getOrDefault("Version")
  valid_21628798 = validateParameter(valid_21628798, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628798 != nil:
    section.add "Version", valid_21628798
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628799 = header.getOrDefault("X-Amz-Date")
  valid_21628799 = validateParameter(valid_21628799, JString, required = false,
                                   default = nil)
  if valid_21628799 != nil:
    section.add "X-Amz-Date", valid_21628799
  var valid_21628800 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628800 = validateParameter(valid_21628800, JString, required = false,
                                   default = nil)
  if valid_21628800 != nil:
    section.add "X-Amz-Security-Token", valid_21628800
  var valid_21628801 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628801 = validateParameter(valid_21628801, JString, required = false,
                                   default = nil)
  if valid_21628801 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628801
  var valid_21628802 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628802 = validateParameter(valid_21628802, JString, required = false,
                                   default = nil)
  if valid_21628802 != nil:
    section.add "X-Amz-Algorithm", valid_21628802
  var valid_21628803 = header.getOrDefault("X-Amz-Signature")
  valid_21628803 = validateParameter(valid_21628803, JString, required = false,
                                   default = nil)
  if valid_21628803 != nil:
    section.add "X-Amz-Signature", valid_21628803
  var valid_21628804 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628804 = validateParameter(valid_21628804, JString, required = false,
                                   default = nil)
  if valid_21628804 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628804
  var valid_21628805 = header.getOrDefault("X-Amz-Credential")
  valid_21628805 = validateParameter(valid_21628805, JString, required = false,
                                   default = nil)
  if valid_21628805 != nil:
    section.add "X-Amz-Credential", valid_21628805
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628806: Call_GetListAttachedRolePolicies_21628790;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_21628806.validator(path, query, header, formData, body, _)
  let scheme = call_21628806.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628806.makeUrl(scheme.get, call_21628806.host, call_21628806.base,
                               call_21628806.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628806, uri, valid, _)

proc call*(call_21628807: Call_GetListAttachedRolePolicies_21628790;
          RoleName: string; PathPrefix: string = "";
          Action: string = "ListAttachedRolePolicies"; Marker: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListAttachedRolePolicies
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21628808 = newJObject()
  add(query_21628808, "PathPrefix", newJString(PathPrefix))
  add(query_21628808, "Action", newJString(Action))
  add(query_21628808, "Marker", newJString(Marker))
  add(query_21628808, "MaxItems", newJInt(MaxItems))
  add(query_21628808, "RoleName", newJString(RoleName))
  add(query_21628808, "Version", newJString(Version))
  result = call_21628807.call(nil, query_21628808, nil, nil, nil)

var getListAttachedRolePolicies* = Call_GetListAttachedRolePolicies_21628790(
    name: "getListAttachedRolePolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedRolePolicies",
    validator: validate_GetListAttachedRolePolicies_21628791, base: "/",
    makeUrl: url_GetListAttachedRolePolicies_21628792,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedUserPolicies_21628848 = ref object of OpenApiRestCall_21625435
proc url_PostListAttachedUserPolicies_21628850(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAttachedUserPolicies_21628849(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628851 = query.getOrDefault("Action")
  valid_21628851 = validateParameter(valid_21628851, JString, required = true, default = newJString(
      "ListAttachedUserPolicies"))
  if valid_21628851 != nil:
    section.add "Action", valid_21628851
  var valid_21628852 = query.getOrDefault("Version")
  valid_21628852 = validateParameter(valid_21628852, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628852 != nil:
    section.add "Version", valid_21628852
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628853 = header.getOrDefault("X-Amz-Date")
  valid_21628853 = validateParameter(valid_21628853, JString, required = false,
                                   default = nil)
  if valid_21628853 != nil:
    section.add "X-Amz-Date", valid_21628853
  var valid_21628854 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628854 = validateParameter(valid_21628854, JString, required = false,
                                   default = nil)
  if valid_21628854 != nil:
    section.add "X-Amz-Security-Token", valid_21628854
  var valid_21628855 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628855 = validateParameter(valid_21628855, JString, required = false,
                                   default = nil)
  if valid_21628855 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628855
  var valid_21628856 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628856 = validateParameter(valid_21628856, JString, required = false,
                                   default = nil)
  if valid_21628856 != nil:
    section.add "X-Amz-Algorithm", valid_21628856
  var valid_21628857 = header.getOrDefault("X-Amz-Signature")
  valid_21628857 = validateParameter(valid_21628857, JString, required = false,
                                   default = nil)
  if valid_21628857 != nil:
    section.add "X-Amz-Signature", valid_21628857
  var valid_21628858 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628858 = validateParameter(valid_21628858, JString, required = false,
                                   default = nil)
  if valid_21628858 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628858
  var valid_21628859 = header.getOrDefault("X-Amz-Credential")
  valid_21628859 = validateParameter(valid_21628859, JString, required = false,
                                   default = nil)
  if valid_21628859 != nil:
    section.add "X-Amz-Credential", valid_21628859
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_21628860 = formData.getOrDefault("PathPrefix")
  valid_21628860 = validateParameter(valid_21628860, JString, required = false,
                                   default = nil)
  if valid_21628860 != nil:
    section.add "PathPrefix", valid_21628860
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21628861 = formData.getOrDefault("UserName")
  valid_21628861 = validateParameter(valid_21628861, JString, required = true,
                                   default = nil)
  if valid_21628861 != nil:
    section.add "UserName", valid_21628861
  var valid_21628862 = formData.getOrDefault("Marker")
  valid_21628862 = validateParameter(valid_21628862, JString, required = false,
                                   default = nil)
  if valid_21628862 != nil:
    section.add "Marker", valid_21628862
  var valid_21628863 = formData.getOrDefault("MaxItems")
  valid_21628863 = validateParameter(valid_21628863, JInt, required = false,
                                   default = nil)
  if valid_21628863 != nil:
    section.add "MaxItems", valid_21628863
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628864: Call_PostListAttachedUserPolicies_21628848;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_21628864.validator(path, query, header, formData, body, _)
  let scheme = call_21628864.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628864.makeUrl(scheme.get, call_21628864.host, call_21628864.base,
                               call_21628864.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628864, uri, valid, _)

proc call*(call_21628865: Call_PostListAttachedUserPolicies_21628848;
          UserName: string; PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListAttachedUserPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedUserPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628866 = newJObject()
  var formData_21628867 = newJObject()
  add(formData_21628867, "PathPrefix", newJString(PathPrefix))
  add(formData_21628867, "UserName", newJString(UserName))
  add(formData_21628867, "Marker", newJString(Marker))
  add(query_21628866, "Action", newJString(Action))
  add(formData_21628867, "MaxItems", newJInt(MaxItems))
  add(query_21628866, "Version", newJString(Version))
  result = call_21628865.call(nil, query_21628866, nil, formData_21628867, nil)

var postListAttachedUserPolicies* = Call_PostListAttachedUserPolicies_21628848(
    name: "postListAttachedUserPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedUserPolicies",
    validator: validate_PostListAttachedUserPolicies_21628849, base: "/",
    makeUrl: url_PostListAttachedUserPolicies_21628850,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedUserPolicies_21628829 = ref object of OpenApiRestCall_21625435
proc url_GetListAttachedUserPolicies_21628831(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAttachedUserPolicies_21628830(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628832 = query.getOrDefault("PathPrefix")
  valid_21628832 = validateParameter(valid_21628832, JString, required = false,
                                   default = nil)
  if valid_21628832 != nil:
    section.add "PathPrefix", valid_21628832
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_21628833 = query.getOrDefault("UserName")
  valid_21628833 = validateParameter(valid_21628833, JString, required = true,
                                   default = nil)
  if valid_21628833 != nil:
    section.add "UserName", valid_21628833
  var valid_21628834 = query.getOrDefault("Action")
  valid_21628834 = validateParameter(valid_21628834, JString, required = true, default = newJString(
      "ListAttachedUserPolicies"))
  if valid_21628834 != nil:
    section.add "Action", valid_21628834
  var valid_21628835 = query.getOrDefault("Marker")
  valid_21628835 = validateParameter(valid_21628835, JString, required = false,
                                   default = nil)
  if valid_21628835 != nil:
    section.add "Marker", valid_21628835
  var valid_21628836 = query.getOrDefault("MaxItems")
  valid_21628836 = validateParameter(valid_21628836, JInt, required = false,
                                   default = nil)
  if valid_21628836 != nil:
    section.add "MaxItems", valid_21628836
  var valid_21628837 = query.getOrDefault("Version")
  valid_21628837 = validateParameter(valid_21628837, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628837 != nil:
    section.add "Version", valid_21628837
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628838 = header.getOrDefault("X-Amz-Date")
  valid_21628838 = validateParameter(valid_21628838, JString, required = false,
                                   default = nil)
  if valid_21628838 != nil:
    section.add "X-Amz-Date", valid_21628838
  var valid_21628839 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628839 = validateParameter(valid_21628839, JString, required = false,
                                   default = nil)
  if valid_21628839 != nil:
    section.add "X-Amz-Security-Token", valid_21628839
  var valid_21628840 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628840 = validateParameter(valid_21628840, JString, required = false,
                                   default = nil)
  if valid_21628840 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628840
  var valid_21628841 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628841 = validateParameter(valid_21628841, JString, required = false,
                                   default = nil)
  if valid_21628841 != nil:
    section.add "X-Amz-Algorithm", valid_21628841
  var valid_21628842 = header.getOrDefault("X-Amz-Signature")
  valid_21628842 = validateParameter(valid_21628842, JString, required = false,
                                   default = nil)
  if valid_21628842 != nil:
    section.add "X-Amz-Signature", valid_21628842
  var valid_21628843 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628843 = validateParameter(valid_21628843, JString, required = false,
                                   default = nil)
  if valid_21628843 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628843
  var valid_21628844 = header.getOrDefault("X-Amz-Credential")
  valid_21628844 = validateParameter(valid_21628844, JString, required = false,
                                   default = nil)
  if valid_21628844 != nil:
    section.add "X-Amz-Credential", valid_21628844
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628845: Call_GetListAttachedUserPolicies_21628829;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_21628845.validator(path, query, header, formData, body, _)
  let scheme = call_21628845.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628845.makeUrl(scheme.get, call_21628845.host, call_21628845.base,
                               call_21628845.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628845, uri, valid, _)

proc call*(call_21628846: Call_GetListAttachedUserPolicies_21628829;
          UserName: string; PathPrefix: string = "";
          Action: string = "ListAttachedUserPolicies"; Marker: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListAttachedUserPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628847 = newJObject()
  add(query_21628847, "PathPrefix", newJString(PathPrefix))
  add(query_21628847, "UserName", newJString(UserName))
  add(query_21628847, "Action", newJString(Action))
  add(query_21628847, "Marker", newJString(Marker))
  add(query_21628847, "MaxItems", newJInt(MaxItems))
  add(query_21628847, "Version", newJString(Version))
  result = call_21628846.call(nil, query_21628847, nil, nil, nil)

var getListAttachedUserPolicies* = Call_GetListAttachedUserPolicies_21628829(
    name: "getListAttachedUserPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedUserPolicies",
    validator: validate_GetListAttachedUserPolicies_21628830, base: "/",
    makeUrl: url_GetListAttachedUserPolicies_21628831,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListEntitiesForPolicy_21628889 = ref object of OpenApiRestCall_21625435
proc url_PostListEntitiesForPolicy_21628891(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListEntitiesForPolicy_21628890(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628892 = query.getOrDefault("Action")
  valid_21628892 = validateParameter(valid_21628892, JString, required = true, default = newJString(
      "ListEntitiesForPolicy"))
  if valid_21628892 != nil:
    section.add "Action", valid_21628892
  var valid_21628893 = query.getOrDefault("Version")
  valid_21628893 = validateParameter(valid_21628893, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628893 != nil:
    section.add "Version", valid_21628893
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628894 = header.getOrDefault("X-Amz-Date")
  valid_21628894 = validateParameter(valid_21628894, JString, required = false,
                                   default = nil)
  if valid_21628894 != nil:
    section.add "X-Amz-Date", valid_21628894
  var valid_21628895 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628895 = validateParameter(valid_21628895, JString, required = false,
                                   default = nil)
  if valid_21628895 != nil:
    section.add "X-Amz-Security-Token", valid_21628895
  var valid_21628896 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628896 = validateParameter(valid_21628896, JString, required = false,
                                   default = nil)
  if valid_21628896 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628896
  var valid_21628897 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628897 = validateParameter(valid_21628897, JString, required = false,
                                   default = nil)
  if valid_21628897 != nil:
    section.add "X-Amz-Algorithm", valid_21628897
  var valid_21628898 = header.getOrDefault("X-Amz-Signature")
  valid_21628898 = validateParameter(valid_21628898, JString, required = false,
                                   default = nil)
  if valid_21628898 != nil:
    section.add "X-Amz-Signature", valid_21628898
  var valid_21628899 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628899 = validateParameter(valid_21628899, JString, required = false,
                                   default = nil)
  if valid_21628899 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628899
  var valid_21628900 = header.getOrDefault("X-Amz-Credential")
  valid_21628900 = validateParameter(valid_21628900, JString, required = false,
                                   default = nil)
  if valid_21628900 != nil:
    section.add "X-Amz-Credential", valid_21628900
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   EntityFilter: JString
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_21628901 = formData.getOrDefault("PathPrefix")
  valid_21628901 = validateParameter(valid_21628901, JString, required = false,
                                   default = nil)
  if valid_21628901 != nil:
    section.add "PathPrefix", valid_21628901
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_21628902 = formData.getOrDefault("PolicyArn")
  valid_21628902 = validateParameter(valid_21628902, JString, required = true,
                                   default = nil)
  if valid_21628902 != nil:
    section.add "PolicyArn", valid_21628902
  var valid_21628903 = formData.getOrDefault("EntityFilter")
  valid_21628903 = validateParameter(valid_21628903, JString, required = false,
                                   default = newJString("User"))
  if valid_21628903 != nil:
    section.add "EntityFilter", valid_21628903
  var valid_21628904 = formData.getOrDefault("Marker")
  valid_21628904 = validateParameter(valid_21628904, JString, required = false,
                                   default = nil)
  if valid_21628904 != nil:
    section.add "Marker", valid_21628904
  var valid_21628905 = formData.getOrDefault("PolicyUsageFilter")
  valid_21628905 = validateParameter(valid_21628905, JString, required = false,
                                   default = newJString("PermissionsPolicy"))
  if valid_21628905 != nil:
    section.add "PolicyUsageFilter", valid_21628905
  var valid_21628906 = formData.getOrDefault("MaxItems")
  valid_21628906 = validateParameter(valid_21628906, JInt, required = false,
                                   default = nil)
  if valid_21628906 != nil:
    section.add "MaxItems", valid_21628906
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628907: Call_PostListEntitiesForPolicy_21628889;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21628907.validator(path, query, header, formData, body, _)
  let scheme = call_21628907.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628907.makeUrl(scheme.get, call_21628907.host, call_21628907.base,
                               call_21628907.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628907, uri, valid, _)

proc call*(call_21628908: Call_PostListEntitiesForPolicy_21628889;
          PolicyArn: string; PathPrefix: string = ""; EntityFilter: string = "User";
          Marker: string = ""; PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListEntitiesForPolicy"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListEntitiesForPolicy
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   EntityFilter: string
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628909 = newJObject()
  var formData_21628910 = newJObject()
  add(formData_21628910, "PathPrefix", newJString(PathPrefix))
  add(formData_21628910, "PolicyArn", newJString(PolicyArn))
  add(formData_21628910, "EntityFilter", newJString(EntityFilter))
  add(formData_21628910, "Marker", newJString(Marker))
  add(formData_21628910, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_21628909, "Action", newJString(Action))
  add(formData_21628910, "MaxItems", newJInt(MaxItems))
  add(query_21628909, "Version", newJString(Version))
  result = call_21628908.call(nil, query_21628909, nil, formData_21628910, nil)

var postListEntitiesForPolicy* = Call_PostListEntitiesForPolicy_21628889(
    name: "postListEntitiesForPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListEntitiesForPolicy",
    validator: validate_PostListEntitiesForPolicy_21628890, base: "/",
    makeUrl: url_PostListEntitiesForPolicy_21628891,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListEntitiesForPolicy_21628868 = ref object of OpenApiRestCall_21625435
proc url_GetListEntitiesForPolicy_21628870(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListEntitiesForPolicy_21628869(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   EntityFilter: JString
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628871 = query.getOrDefault("PathPrefix")
  valid_21628871 = validateParameter(valid_21628871, JString, required = false,
                                   default = nil)
  if valid_21628871 != nil:
    section.add "PathPrefix", valid_21628871
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_21628872 = query.getOrDefault("PolicyArn")
  valid_21628872 = validateParameter(valid_21628872, JString, required = true,
                                   default = nil)
  if valid_21628872 != nil:
    section.add "PolicyArn", valid_21628872
  var valid_21628873 = query.getOrDefault("PolicyUsageFilter")
  valid_21628873 = validateParameter(valid_21628873, JString, required = false,
                                   default = newJString("PermissionsPolicy"))
  if valid_21628873 != nil:
    section.add "PolicyUsageFilter", valid_21628873
  var valid_21628874 = query.getOrDefault("Action")
  valid_21628874 = validateParameter(valid_21628874, JString, required = true, default = newJString(
      "ListEntitiesForPolicy"))
  if valid_21628874 != nil:
    section.add "Action", valid_21628874
  var valid_21628875 = query.getOrDefault("Marker")
  valid_21628875 = validateParameter(valid_21628875, JString, required = false,
                                   default = nil)
  if valid_21628875 != nil:
    section.add "Marker", valid_21628875
  var valid_21628876 = query.getOrDefault("EntityFilter")
  valid_21628876 = validateParameter(valid_21628876, JString, required = false,
                                   default = newJString("User"))
  if valid_21628876 != nil:
    section.add "EntityFilter", valid_21628876
  var valid_21628877 = query.getOrDefault("MaxItems")
  valid_21628877 = validateParameter(valid_21628877, JInt, required = false,
                                   default = nil)
  if valid_21628877 != nil:
    section.add "MaxItems", valid_21628877
  var valid_21628878 = query.getOrDefault("Version")
  valid_21628878 = validateParameter(valid_21628878, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628878 != nil:
    section.add "Version", valid_21628878
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628879 = header.getOrDefault("X-Amz-Date")
  valid_21628879 = validateParameter(valid_21628879, JString, required = false,
                                   default = nil)
  if valid_21628879 != nil:
    section.add "X-Amz-Date", valid_21628879
  var valid_21628880 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628880 = validateParameter(valid_21628880, JString, required = false,
                                   default = nil)
  if valid_21628880 != nil:
    section.add "X-Amz-Security-Token", valid_21628880
  var valid_21628881 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628881 = validateParameter(valid_21628881, JString, required = false,
                                   default = nil)
  if valid_21628881 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628881
  var valid_21628882 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628882 = validateParameter(valid_21628882, JString, required = false,
                                   default = nil)
  if valid_21628882 != nil:
    section.add "X-Amz-Algorithm", valid_21628882
  var valid_21628883 = header.getOrDefault("X-Amz-Signature")
  valid_21628883 = validateParameter(valid_21628883, JString, required = false,
                                   default = nil)
  if valid_21628883 != nil:
    section.add "X-Amz-Signature", valid_21628883
  var valid_21628884 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628884 = validateParameter(valid_21628884, JString, required = false,
                                   default = nil)
  if valid_21628884 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628884
  var valid_21628885 = header.getOrDefault("X-Amz-Credential")
  valid_21628885 = validateParameter(valid_21628885, JString, required = false,
                                   default = nil)
  if valid_21628885 != nil:
    section.add "X-Amz-Credential", valid_21628885
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628886: Call_GetListEntitiesForPolicy_21628868;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21628886.validator(path, query, header, formData, body, _)
  let scheme = call_21628886.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628886.makeUrl(scheme.get, call_21628886.host, call_21628886.base,
                               call_21628886.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628886, uri, valid, _)

proc call*(call_21628887: Call_GetListEntitiesForPolicy_21628868;
          PolicyArn: string; PathPrefix: string = "";
          PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListEntitiesForPolicy"; Marker: string = "";
          EntityFilter: string = "User"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListEntitiesForPolicy
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   EntityFilter: string
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628888 = newJObject()
  add(query_21628888, "PathPrefix", newJString(PathPrefix))
  add(query_21628888, "PolicyArn", newJString(PolicyArn))
  add(query_21628888, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_21628888, "Action", newJString(Action))
  add(query_21628888, "Marker", newJString(Marker))
  add(query_21628888, "EntityFilter", newJString(EntityFilter))
  add(query_21628888, "MaxItems", newJInt(MaxItems))
  add(query_21628888, "Version", newJString(Version))
  result = call_21628887.call(nil, query_21628888, nil, nil, nil)

var getListEntitiesForPolicy* = Call_GetListEntitiesForPolicy_21628868(
    name: "getListEntitiesForPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListEntitiesForPolicy",
    validator: validate_GetListEntitiesForPolicy_21628869, base: "/",
    makeUrl: url_GetListEntitiesForPolicy_21628870,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroupPolicies_21628929 = ref object of OpenApiRestCall_21625435
proc url_PostListGroupPolicies_21628931(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListGroupPolicies_21628930(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628932 = query.getOrDefault("Action")
  valid_21628932 = validateParameter(valid_21628932, JString, required = true,
                                   default = newJString("ListGroupPolicies"))
  if valid_21628932 != nil:
    section.add "Action", valid_21628932
  var valid_21628933 = query.getOrDefault("Version")
  valid_21628933 = validateParameter(valid_21628933, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628933 != nil:
    section.add "Version", valid_21628933
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628934 = header.getOrDefault("X-Amz-Date")
  valid_21628934 = validateParameter(valid_21628934, JString, required = false,
                                   default = nil)
  if valid_21628934 != nil:
    section.add "X-Amz-Date", valid_21628934
  var valid_21628935 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628935 = validateParameter(valid_21628935, JString, required = false,
                                   default = nil)
  if valid_21628935 != nil:
    section.add "X-Amz-Security-Token", valid_21628935
  var valid_21628936 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628936 = validateParameter(valid_21628936, JString, required = false,
                                   default = nil)
  if valid_21628936 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628936
  var valid_21628937 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628937 = validateParameter(valid_21628937, JString, required = false,
                                   default = nil)
  if valid_21628937 != nil:
    section.add "X-Amz-Algorithm", valid_21628937
  var valid_21628938 = header.getOrDefault("X-Amz-Signature")
  valid_21628938 = validateParameter(valid_21628938, JString, required = false,
                                   default = nil)
  if valid_21628938 != nil:
    section.add "X-Amz-Signature", valid_21628938
  var valid_21628939 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628939 = validateParameter(valid_21628939, JString, required = false,
                                   default = nil)
  if valid_21628939 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628939
  var valid_21628940 = header.getOrDefault("X-Amz-Credential")
  valid_21628940 = validateParameter(valid_21628940, JString, required = false,
                                   default = nil)
  if valid_21628940 != nil:
    section.add "X-Amz-Credential", valid_21628940
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_21628941 = formData.getOrDefault("GroupName")
  valid_21628941 = validateParameter(valid_21628941, JString, required = true,
                                   default = nil)
  if valid_21628941 != nil:
    section.add "GroupName", valid_21628941
  var valid_21628942 = formData.getOrDefault("Marker")
  valid_21628942 = validateParameter(valid_21628942, JString, required = false,
                                   default = nil)
  if valid_21628942 != nil:
    section.add "Marker", valid_21628942
  var valid_21628943 = formData.getOrDefault("MaxItems")
  valid_21628943 = validateParameter(valid_21628943, JInt, required = false,
                                   default = nil)
  if valid_21628943 != nil:
    section.add "MaxItems", valid_21628943
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628944: Call_PostListGroupPolicies_21628929;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  let valid = call_21628944.validator(path, query, header, formData, body, _)
  let scheme = call_21628944.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628944.makeUrl(scheme.get, call_21628944.host, call_21628944.base,
                               call_21628944.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628944, uri, valid, _)

proc call*(call_21628945: Call_PostListGroupPolicies_21628929; GroupName: string;
          Marker: string = ""; Action: string = "ListGroupPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroupPolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628946 = newJObject()
  var formData_21628947 = newJObject()
  add(formData_21628947, "GroupName", newJString(GroupName))
  add(formData_21628947, "Marker", newJString(Marker))
  add(query_21628946, "Action", newJString(Action))
  add(formData_21628947, "MaxItems", newJInt(MaxItems))
  add(query_21628946, "Version", newJString(Version))
  result = call_21628945.call(nil, query_21628946, nil, formData_21628947, nil)

var postListGroupPolicies* = Call_PostListGroupPolicies_21628929(
    name: "postListGroupPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupPolicies",
    validator: validate_PostListGroupPolicies_21628930, base: "/",
    makeUrl: url_PostListGroupPolicies_21628931,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroupPolicies_21628911 = ref object of OpenApiRestCall_21625435
proc url_GetListGroupPolicies_21628913(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListGroupPolicies_21628912(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628914 = query.getOrDefault("Action")
  valid_21628914 = validateParameter(valid_21628914, JString, required = true,
                                   default = newJString("ListGroupPolicies"))
  if valid_21628914 != nil:
    section.add "Action", valid_21628914
  var valid_21628915 = query.getOrDefault("Marker")
  valid_21628915 = validateParameter(valid_21628915, JString, required = false,
                                   default = nil)
  if valid_21628915 != nil:
    section.add "Marker", valid_21628915
  var valid_21628916 = query.getOrDefault("GroupName")
  valid_21628916 = validateParameter(valid_21628916, JString, required = true,
                                   default = nil)
  if valid_21628916 != nil:
    section.add "GroupName", valid_21628916
  var valid_21628917 = query.getOrDefault("MaxItems")
  valid_21628917 = validateParameter(valid_21628917, JInt, required = false,
                                   default = nil)
  if valid_21628917 != nil:
    section.add "MaxItems", valid_21628917
  var valid_21628918 = query.getOrDefault("Version")
  valid_21628918 = validateParameter(valid_21628918, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628918 != nil:
    section.add "Version", valid_21628918
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628919 = header.getOrDefault("X-Amz-Date")
  valid_21628919 = validateParameter(valid_21628919, JString, required = false,
                                   default = nil)
  if valid_21628919 != nil:
    section.add "X-Amz-Date", valid_21628919
  var valid_21628920 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628920 = validateParameter(valid_21628920, JString, required = false,
                                   default = nil)
  if valid_21628920 != nil:
    section.add "X-Amz-Security-Token", valid_21628920
  var valid_21628921 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628921 = validateParameter(valid_21628921, JString, required = false,
                                   default = nil)
  if valid_21628921 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628921
  var valid_21628922 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628922 = validateParameter(valid_21628922, JString, required = false,
                                   default = nil)
  if valid_21628922 != nil:
    section.add "X-Amz-Algorithm", valid_21628922
  var valid_21628923 = header.getOrDefault("X-Amz-Signature")
  valid_21628923 = validateParameter(valid_21628923, JString, required = false,
                                   default = nil)
  if valid_21628923 != nil:
    section.add "X-Amz-Signature", valid_21628923
  var valid_21628924 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628924 = validateParameter(valid_21628924, JString, required = false,
                                   default = nil)
  if valid_21628924 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628924
  var valid_21628925 = header.getOrDefault("X-Amz-Credential")
  valid_21628925 = validateParameter(valid_21628925, JString, required = false,
                                   default = nil)
  if valid_21628925 != nil:
    section.add "X-Amz-Credential", valid_21628925
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628926: Call_GetListGroupPolicies_21628911; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  let valid = call_21628926.validator(path, query, header, formData, body, _)
  let scheme = call_21628926.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628926.makeUrl(scheme.get, call_21628926.host, call_21628926.base,
                               call_21628926.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628926, uri, valid, _)

proc call*(call_21628927: Call_GetListGroupPolicies_21628911; GroupName: string;
          Action: string = "ListGroupPolicies"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListGroupPolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628928 = newJObject()
  add(query_21628928, "Action", newJString(Action))
  add(query_21628928, "Marker", newJString(Marker))
  add(query_21628928, "GroupName", newJString(GroupName))
  add(query_21628928, "MaxItems", newJInt(MaxItems))
  add(query_21628928, "Version", newJString(Version))
  result = call_21628927.call(nil, query_21628928, nil, nil, nil)

var getListGroupPolicies* = Call_GetListGroupPolicies_21628911(
    name: "getListGroupPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupPolicies",
    validator: validate_GetListGroupPolicies_21628912, base: "/",
    makeUrl: url_GetListGroupPolicies_21628913,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroups_21628966 = ref object of OpenApiRestCall_21625435
proc url_PostListGroups_21628968(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListGroups_21628967(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628969 = query.getOrDefault("Action")
  valid_21628969 = validateParameter(valid_21628969, JString, required = true,
                                   default = newJString("ListGroups"))
  if valid_21628969 != nil:
    section.add "Action", valid_21628969
  var valid_21628970 = query.getOrDefault("Version")
  valid_21628970 = validateParameter(valid_21628970, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628970 != nil:
    section.add "Version", valid_21628970
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628971 = header.getOrDefault("X-Amz-Date")
  valid_21628971 = validateParameter(valid_21628971, JString, required = false,
                                   default = nil)
  if valid_21628971 != nil:
    section.add "X-Amz-Date", valid_21628971
  var valid_21628972 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628972 = validateParameter(valid_21628972, JString, required = false,
                                   default = nil)
  if valid_21628972 != nil:
    section.add "X-Amz-Security-Token", valid_21628972
  var valid_21628973 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628973 = validateParameter(valid_21628973, JString, required = false,
                                   default = nil)
  if valid_21628973 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628973
  var valid_21628974 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628974 = validateParameter(valid_21628974, JString, required = false,
                                   default = nil)
  if valid_21628974 != nil:
    section.add "X-Amz-Algorithm", valid_21628974
  var valid_21628975 = header.getOrDefault("X-Amz-Signature")
  valid_21628975 = validateParameter(valid_21628975, JString, required = false,
                                   default = nil)
  if valid_21628975 != nil:
    section.add "X-Amz-Signature", valid_21628975
  var valid_21628976 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628976 = validateParameter(valid_21628976, JString, required = false,
                                   default = nil)
  if valid_21628976 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628976
  var valid_21628977 = header.getOrDefault("X-Amz-Credential")
  valid_21628977 = validateParameter(valid_21628977, JString, required = false,
                                   default = nil)
  if valid_21628977 != nil:
    section.add "X-Amz-Credential", valid_21628977
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_21628978 = formData.getOrDefault("PathPrefix")
  valid_21628978 = validateParameter(valid_21628978, JString, required = false,
                                   default = nil)
  if valid_21628978 != nil:
    section.add "PathPrefix", valid_21628978
  var valid_21628979 = formData.getOrDefault("Marker")
  valid_21628979 = validateParameter(valid_21628979, JString, required = false,
                                   default = nil)
  if valid_21628979 != nil:
    section.add "Marker", valid_21628979
  var valid_21628980 = formData.getOrDefault("MaxItems")
  valid_21628980 = validateParameter(valid_21628980, JInt, required = false,
                                   default = nil)
  if valid_21628980 != nil:
    section.add "MaxItems", valid_21628980
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628981: Call_PostListGroups_21628966; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21628981.validator(path, query, header, formData, body, _)
  let scheme = call_21628981.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628981.makeUrl(scheme.get, call_21628981.host, call_21628981.base,
                               call_21628981.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628981, uri, valid, _)

proc call*(call_21628982: Call_PostListGroups_21628966; PathPrefix: string = "";
          Marker: string = ""; Action: string = "ListGroups"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroups
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628983 = newJObject()
  var formData_21628984 = newJObject()
  add(formData_21628984, "PathPrefix", newJString(PathPrefix))
  add(formData_21628984, "Marker", newJString(Marker))
  add(query_21628983, "Action", newJString(Action))
  add(formData_21628984, "MaxItems", newJInt(MaxItems))
  add(query_21628983, "Version", newJString(Version))
  result = call_21628982.call(nil, query_21628983, nil, formData_21628984, nil)

var postListGroups* = Call_PostListGroups_21628966(name: "postListGroups",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListGroups", validator: validate_PostListGroups_21628967,
    base: "/", makeUrl: url_PostListGroups_21628968,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroups_21628948 = ref object of OpenApiRestCall_21625435
proc url_GetListGroups_21628950(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListGroups_21628949(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628951 = query.getOrDefault("PathPrefix")
  valid_21628951 = validateParameter(valid_21628951, JString, required = false,
                                   default = nil)
  if valid_21628951 != nil:
    section.add "PathPrefix", valid_21628951
  var valid_21628952 = query.getOrDefault("Action")
  valid_21628952 = validateParameter(valid_21628952, JString, required = true,
                                   default = newJString("ListGroups"))
  if valid_21628952 != nil:
    section.add "Action", valid_21628952
  var valid_21628953 = query.getOrDefault("Marker")
  valid_21628953 = validateParameter(valid_21628953, JString, required = false,
                                   default = nil)
  if valid_21628953 != nil:
    section.add "Marker", valid_21628953
  var valid_21628954 = query.getOrDefault("MaxItems")
  valid_21628954 = validateParameter(valid_21628954, JInt, required = false,
                                   default = nil)
  if valid_21628954 != nil:
    section.add "MaxItems", valid_21628954
  var valid_21628955 = query.getOrDefault("Version")
  valid_21628955 = validateParameter(valid_21628955, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628955 != nil:
    section.add "Version", valid_21628955
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628956 = header.getOrDefault("X-Amz-Date")
  valid_21628956 = validateParameter(valid_21628956, JString, required = false,
                                   default = nil)
  if valid_21628956 != nil:
    section.add "X-Amz-Date", valid_21628956
  var valid_21628957 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628957 = validateParameter(valid_21628957, JString, required = false,
                                   default = nil)
  if valid_21628957 != nil:
    section.add "X-Amz-Security-Token", valid_21628957
  var valid_21628958 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628958 = validateParameter(valid_21628958, JString, required = false,
                                   default = nil)
  if valid_21628958 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628958
  var valid_21628959 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628959 = validateParameter(valid_21628959, JString, required = false,
                                   default = nil)
  if valid_21628959 != nil:
    section.add "X-Amz-Algorithm", valid_21628959
  var valid_21628960 = header.getOrDefault("X-Amz-Signature")
  valid_21628960 = validateParameter(valid_21628960, JString, required = false,
                                   default = nil)
  if valid_21628960 != nil:
    section.add "X-Amz-Signature", valid_21628960
  var valid_21628961 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628961 = validateParameter(valid_21628961, JString, required = false,
                                   default = nil)
  if valid_21628961 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628961
  var valid_21628962 = header.getOrDefault("X-Amz-Credential")
  valid_21628962 = validateParameter(valid_21628962, JString, required = false,
                                   default = nil)
  if valid_21628962 != nil:
    section.add "X-Amz-Credential", valid_21628962
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628963: Call_GetListGroups_21628948; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21628963.validator(path, query, header, formData, body, _)
  let scheme = call_21628963.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628963.makeUrl(scheme.get, call_21628963.host, call_21628963.base,
                               call_21628963.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628963, uri, valid, _)

proc call*(call_21628964: Call_GetListGroups_21628948; PathPrefix: string = "";
          Action: string = "ListGroups"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListGroups
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21628965 = newJObject()
  add(query_21628965, "PathPrefix", newJString(PathPrefix))
  add(query_21628965, "Action", newJString(Action))
  add(query_21628965, "Marker", newJString(Marker))
  add(query_21628965, "MaxItems", newJInt(MaxItems))
  add(query_21628965, "Version", newJString(Version))
  result = call_21628964.call(nil, query_21628965, nil, nil, nil)

var getListGroups* = Call_GetListGroups_21628948(name: "getListGroups",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListGroups", validator: validate_GetListGroups_21628949,
    base: "/", makeUrl: url_GetListGroups_21628950,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroupsForUser_21629003 = ref object of OpenApiRestCall_21625435
proc url_PostListGroupsForUser_21629005(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListGroupsForUser_21629004(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629006 = query.getOrDefault("Action")
  valid_21629006 = validateParameter(valid_21629006, JString, required = true,
                                   default = newJString("ListGroupsForUser"))
  if valid_21629006 != nil:
    section.add "Action", valid_21629006
  var valid_21629007 = query.getOrDefault("Version")
  valid_21629007 = validateParameter(valid_21629007, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629007 != nil:
    section.add "Version", valid_21629007
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629008 = header.getOrDefault("X-Amz-Date")
  valid_21629008 = validateParameter(valid_21629008, JString, required = false,
                                   default = nil)
  if valid_21629008 != nil:
    section.add "X-Amz-Date", valid_21629008
  var valid_21629009 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629009 = validateParameter(valid_21629009, JString, required = false,
                                   default = nil)
  if valid_21629009 != nil:
    section.add "X-Amz-Security-Token", valid_21629009
  var valid_21629010 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629010 = validateParameter(valid_21629010, JString, required = false,
                                   default = nil)
  if valid_21629010 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629010
  var valid_21629011 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629011 = validateParameter(valid_21629011, JString, required = false,
                                   default = nil)
  if valid_21629011 != nil:
    section.add "X-Amz-Algorithm", valid_21629011
  var valid_21629012 = header.getOrDefault("X-Amz-Signature")
  valid_21629012 = validateParameter(valid_21629012, JString, required = false,
                                   default = nil)
  if valid_21629012 != nil:
    section.add "X-Amz-Signature", valid_21629012
  var valid_21629013 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629013 = validateParameter(valid_21629013, JString, required = false,
                                   default = nil)
  if valid_21629013 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629013
  var valid_21629014 = header.getOrDefault("X-Amz-Credential")
  valid_21629014 = validateParameter(valid_21629014, JString, required = false,
                                   default = nil)
  if valid_21629014 != nil:
    section.add "X-Amz-Credential", valid_21629014
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21629015 = formData.getOrDefault("UserName")
  valid_21629015 = validateParameter(valid_21629015, JString, required = true,
                                   default = nil)
  if valid_21629015 != nil:
    section.add "UserName", valid_21629015
  var valid_21629016 = formData.getOrDefault("Marker")
  valid_21629016 = validateParameter(valid_21629016, JString, required = false,
                                   default = nil)
  if valid_21629016 != nil:
    section.add "Marker", valid_21629016
  var valid_21629017 = formData.getOrDefault("MaxItems")
  valid_21629017 = validateParameter(valid_21629017, JInt, required = false,
                                   default = nil)
  if valid_21629017 != nil:
    section.add "MaxItems", valid_21629017
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629018: Call_PostListGroupsForUser_21629003;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21629018.validator(path, query, header, formData, body, _)
  let scheme = call_21629018.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629018.makeUrl(scheme.get, call_21629018.host, call_21629018.base,
                               call_21629018.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629018, uri, valid, _)

proc call*(call_21629019: Call_PostListGroupsForUser_21629003; UserName: string;
          Marker: string = ""; Action: string = "ListGroupsForUser"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroupsForUser
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629020 = newJObject()
  var formData_21629021 = newJObject()
  add(formData_21629021, "UserName", newJString(UserName))
  add(formData_21629021, "Marker", newJString(Marker))
  add(query_21629020, "Action", newJString(Action))
  add(formData_21629021, "MaxItems", newJInt(MaxItems))
  add(query_21629020, "Version", newJString(Version))
  result = call_21629019.call(nil, query_21629020, nil, formData_21629021, nil)

var postListGroupsForUser* = Call_PostListGroupsForUser_21629003(
    name: "postListGroupsForUser", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupsForUser",
    validator: validate_PostListGroupsForUser_21629004, base: "/",
    makeUrl: url_PostListGroupsForUser_21629005,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroupsForUser_21628985 = ref object of OpenApiRestCall_21625435
proc url_GetListGroupsForUser_21628987(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListGroupsForUser_21628986(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_21628988 = query.getOrDefault("UserName")
  valid_21628988 = validateParameter(valid_21628988, JString, required = true,
                                   default = nil)
  if valid_21628988 != nil:
    section.add "UserName", valid_21628988
  var valid_21628989 = query.getOrDefault("Action")
  valid_21628989 = validateParameter(valid_21628989, JString, required = true,
                                   default = newJString("ListGroupsForUser"))
  if valid_21628989 != nil:
    section.add "Action", valid_21628989
  var valid_21628990 = query.getOrDefault("Marker")
  valid_21628990 = validateParameter(valid_21628990, JString, required = false,
                                   default = nil)
  if valid_21628990 != nil:
    section.add "Marker", valid_21628990
  var valid_21628991 = query.getOrDefault("MaxItems")
  valid_21628991 = validateParameter(valid_21628991, JInt, required = false,
                                   default = nil)
  if valid_21628991 != nil:
    section.add "MaxItems", valid_21628991
  var valid_21628992 = query.getOrDefault("Version")
  valid_21628992 = validateParameter(valid_21628992, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21628992 != nil:
    section.add "Version", valid_21628992
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628993 = header.getOrDefault("X-Amz-Date")
  valid_21628993 = validateParameter(valid_21628993, JString, required = false,
                                   default = nil)
  if valid_21628993 != nil:
    section.add "X-Amz-Date", valid_21628993
  var valid_21628994 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628994 = validateParameter(valid_21628994, JString, required = false,
                                   default = nil)
  if valid_21628994 != nil:
    section.add "X-Amz-Security-Token", valid_21628994
  var valid_21628995 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628995 = validateParameter(valid_21628995, JString, required = false,
                                   default = nil)
  if valid_21628995 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628995
  var valid_21628996 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628996 = validateParameter(valid_21628996, JString, required = false,
                                   default = nil)
  if valid_21628996 != nil:
    section.add "X-Amz-Algorithm", valid_21628996
  var valid_21628997 = header.getOrDefault("X-Amz-Signature")
  valid_21628997 = validateParameter(valid_21628997, JString, required = false,
                                   default = nil)
  if valid_21628997 != nil:
    section.add "X-Amz-Signature", valid_21628997
  var valid_21628998 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628998 = validateParameter(valid_21628998, JString, required = false,
                                   default = nil)
  if valid_21628998 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628998
  var valid_21628999 = header.getOrDefault("X-Amz-Credential")
  valid_21628999 = validateParameter(valid_21628999, JString, required = false,
                                   default = nil)
  if valid_21628999 != nil:
    section.add "X-Amz-Credential", valid_21628999
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629000: Call_GetListGroupsForUser_21628985; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21629000.validator(path, query, header, formData, body, _)
  let scheme = call_21629000.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629000.makeUrl(scheme.get, call_21629000.host, call_21629000.base,
                               call_21629000.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629000, uri, valid, _)

proc call*(call_21629001: Call_GetListGroupsForUser_21628985; UserName: string;
          Action: string = "ListGroupsForUser"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListGroupsForUser
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629002 = newJObject()
  add(query_21629002, "UserName", newJString(UserName))
  add(query_21629002, "Action", newJString(Action))
  add(query_21629002, "Marker", newJString(Marker))
  add(query_21629002, "MaxItems", newJInt(MaxItems))
  add(query_21629002, "Version", newJString(Version))
  result = call_21629001.call(nil, query_21629002, nil, nil, nil)

var getListGroupsForUser* = Call_GetListGroupsForUser_21628985(
    name: "getListGroupsForUser", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupsForUser",
    validator: validate_GetListGroupsForUser_21628986, base: "/",
    makeUrl: url_GetListGroupsForUser_21628987,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListInstanceProfiles_21629040 = ref object of OpenApiRestCall_21625435
proc url_PostListInstanceProfiles_21629042(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListInstanceProfiles_21629041(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629043 = query.getOrDefault("Action")
  valid_21629043 = validateParameter(valid_21629043, JString, required = true,
                                   default = newJString("ListInstanceProfiles"))
  if valid_21629043 != nil:
    section.add "Action", valid_21629043
  var valid_21629044 = query.getOrDefault("Version")
  valid_21629044 = validateParameter(valid_21629044, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629044 != nil:
    section.add "Version", valid_21629044
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629045 = header.getOrDefault("X-Amz-Date")
  valid_21629045 = validateParameter(valid_21629045, JString, required = false,
                                   default = nil)
  if valid_21629045 != nil:
    section.add "X-Amz-Date", valid_21629045
  var valid_21629046 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629046 = validateParameter(valid_21629046, JString, required = false,
                                   default = nil)
  if valid_21629046 != nil:
    section.add "X-Amz-Security-Token", valid_21629046
  var valid_21629047 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629047 = validateParameter(valid_21629047, JString, required = false,
                                   default = nil)
  if valid_21629047 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629047
  var valid_21629048 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629048 = validateParameter(valid_21629048, JString, required = false,
                                   default = nil)
  if valid_21629048 != nil:
    section.add "X-Amz-Algorithm", valid_21629048
  var valid_21629049 = header.getOrDefault("X-Amz-Signature")
  valid_21629049 = validateParameter(valid_21629049, JString, required = false,
                                   default = nil)
  if valid_21629049 != nil:
    section.add "X-Amz-Signature", valid_21629049
  var valid_21629050 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629050 = validateParameter(valid_21629050, JString, required = false,
                                   default = nil)
  if valid_21629050 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629050
  var valid_21629051 = header.getOrDefault("X-Amz-Credential")
  valid_21629051 = validateParameter(valid_21629051, JString, required = false,
                                   default = nil)
  if valid_21629051 != nil:
    section.add "X-Amz-Credential", valid_21629051
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_21629052 = formData.getOrDefault("PathPrefix")
  valid_21629052 = validateParameter(valid_21629052, JString, required = false,
                                   default = nil)
  if valid_21629052 != nil:
    section.add "PathPrefix", valid_21629052
  var valid_21629053 = formData.getOrDefault("Marker")
  valid_21629053 = validateParameter(valid_21629053, JString, required = false,
                                   default = nil)
  if valid_21629053 != nil:
    section.add "Marker", valid_21629053
  var valid_21629054 = formData.getOrDefault("MaxItems")
  valid_21629054 = validateParameter(valid_21629054, JInt, required = false,
                                   default = nil)
  if valid_21629054 != nil:
    section.add "MaxItems", valid_21629054
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629055: Call_PostListInstanceProfiles_21629040;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21629055.validator(path, query, header, formData, body, _)
  let scheme = call_21629055.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629055.makeUrl(scheme.get, call_21629055.host, call_21629055.base,
                               call_21629055.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629055, uri, valid, _)

proc call*(call_21629056: Call_PostListInstanceProfiles_21629040;
          PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListInstanceProfiles"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListInstanceProfiles
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629057 = newJObject()
  var formData_21629058 = newJObject()
  add(formData_21629058, "PathPrefix", newJString(PathPrefix))
  add(formData_21629058, "Marker", newJString(Marker))
  add(query_21629057, "Action", newJString(Action))
  add(formData_21629058, "MaxItems", newJInt(MaxItems))
  add(query_21629057, "Version", newJString(Version))
  result = call_21629056.call(nil, query_21629057, nil, formData_21629058, nil)

var postListInstanceProfiles* = Call_PostListInstanceProfiles_21629040(
    name: "postListInstanceProfiles", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfiles",
    validator: validate_PostListInstanceProfiles_21629041, base: "/",
    makeUrl: url_PostListInstanceProfiles_21629042,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListInstanceProfiles_21629022 = ref object of OpenApiRestCall_21625435
proc url_GetListInstanceProfiles_21629024(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListInstanceProfiles_21629023(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629025 = query.getOrDefault("PathPrefix")
  valid_21629025 = validateParameter(valid_21629025, JString, required = false,
                                   default = nil)
  if valid_21629025 != nil:
    section.add "PathPrefix", valid_21629025
  var valid_21629026 = query.getOrDefault("Action")
  valid_21629026 = validateParameter(valid_21629026, JString, required = true,
                                   default = newJString("ListInstanceProfiles"))
  if valid_21629026 != nil:
    section.add "Action", valid_21629026
  var valid_21629027 = query.getOrDefault("Marker")
  valid_21629027 = validateParameter(valid_21629027, JString, required = false,
                                   default = nil)
  if valid_21629027 != nil:
    section.add "Marker", valid_21629027
  var valid_21629028 = query.getOrDefault("MaxItems")
  valid_21629028 = validateParameter(valid_21629028, JInt, required = false,
                                   default = nil)
  if valid_21629028 != nil:
    section.add "MaxItems", valid_21629028
  var valid_21629029 = query.getOrDefault("Version")
  valid_21629029 = validateParameter(valid_21629029, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629029 != nil:
    section.add "Version", valid_21629029
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629030 = header.getOrDefault("X-Amz-Date")
  valid_21629030 = validateParameter(valid_21629030, JString, required = false,
                                   default = nil)
  if valid_21629030 != nil:
    section.add "X-Amz-Date", valid_21629030
  var valid_21629031 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629031 = validateParameter(valid_21629031, JString, required = false,
                                   default = nil)
  if valid_21629031 != nil:
    section.add "X-Amz-Security-Token", valid_21629031
  var valid_21629032 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629032 = validateParameter(valid_21629032, JString, required = false,
                                   default = nil)
  if valid_21629032 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629032
  var valid_21629033 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629033 = validateParameter(valid_21629033, JString, required = false,
                                   default = nil)
  if valid_21629033 != nil:
    section.add "X-Amz-Algorithm", valid_21629033
  var valid_21629034 = header.getOrDefault("X-Amz-Signature")
  valid_21629034 = validateParameter(valid_21629034, JString, required = false,
                                   default = nil)
  if valid_21629034 != nil:
    section.add "X-Amz-Signature", valid_21629034
  var valid_21629035 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629035 = validateParameter(valid_21629035, JString, required = false,
                                   default = nil)
  if valid_21629035 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629035
  var valid_21629036 = header.getOrDefault("X-Amz-Credential")
  valid_21629036 = validateParameter(valid_21629036, JString, required = false,
                                   default = nil)
  if valid_21629036 != nil:
    section.add "X-Amz-Credential", valid_21629036
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629037: Call_GetListInstanceProfiles_21629022;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21629037.validator(path, query, header, formData, body, _)
  let scheme = call_21629037.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629037.makeUrl(scheme.get, call_21629037.host, call_21629037.base,
                               call_21629037.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629037, uri, valid, _)

proc call*(call_21629038: Call_GetListInstanceProfiles_21629022;
          PathPrefix: string = ""; Action: string = "ListInstanceProfiles";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListInstanceProfiles
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629039 = newJObject()
  add(query_21629039, "PathPrefix", newJString(PathPrefix))
  add(query_21629039, "Action", newJString(Action))
  add(query_21629039, "Marker", newJString(Marker))
  add(query_21629039, "MaxItems", newJInt(MaxItems))
  add(query_21629039, "Version", newJString(Version))
  result = call_21629038.call(nil, query_21629039, nil, nil, nil)

var getListInstanceProfiles* = Call_GetListInstanceProfiles_21629022(
    name: "getListInstanceProfiles", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfiles",
    validator: validate_GetListInstanceProfiles_21629023, base: "/",
    makeUrl: url_GetListInstanceProfiles_21629024,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListInstanceProfilesForRole_21629077 = ref object of OpenApiRestCall_21625435
proc url_PostListInstanceProfilesForRole_21629079(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListInstanceProfilesForRole_21629078(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629080 = query.getOrDefault("Action")
  valid_21629080 = validateParameter(valid_21629080, JString, required = true, default = newJString(
      "ListInstanceProfilesForRole"))
  if valid_21629080 != nil:
    section.add "Action", valid_21629080
  var valid_21629081 = query.getOrDefault("Version")
  valid_21629081 = validateParameter(valid_21629081, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629081 != nil:
    section.add "Version", valid_21629081
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629082 = header.getOrDefault("X-Amz-Date")
  valid_21629082 = validateParameter(valid_21629082, JString, required = false,
                                   default = nil)
  if valid_21629082 != nil:
    section.add "X-Amz-Date", valid_21629082
  var valid_21629083 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629083 = validateParameter(valid_21629083, JString, required = false,
                                   default = nil)
  if valid_21629083 != nil:
    section.add "X-Amz-Security-Token", valid_21629083
  var valid_21629084 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629084 = validateParameter(valid_21629084, JString, required = false,
                                   default = nil)
  if valid_21629084 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629084
  var valid_21629085 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629085 = validateParameter(valid_21629085, JString, required = false,
                                   default = nil)
  if valid_21629085 != nil:
    section.add "X-Amz-Algorithm", valid_21629085
  var valid_21629086 = header.getOrDefault("X-Amz-Signature")
  valid_21629086 = validateParameter(valid_21629086, JString, required = false,
                                   default = nil)
  if valid_21629086 != nil:
    section.add "X-Amz-Signature", valid_21629086
  var valid_21629087 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629087 = validateParameter(valid_21629087, JString, required = false,
                                   default = nil)
  if valid_21629087 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629087
  var valid_21629088 = header.getOrDefault("X-Amz-Credential")
  valid_21629088 = validateParameter(valid_21629088, JString, required = false,
                                   default = nil)
  if valid_21629088 != nil:
    section.add "X-Amz-Credential", valid_21629088
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_21629089 = formData.getOrDefault("RoleName")
  valid_21629089 = validateParameter(valid_21629089, JString, required = true,
                                   default = nil)
  if valid_21629089 != nil:
    section.add "RoleName", valid_21629089
  var valid_21629090 = formData.getOrDefault("Marker")
  valid_21629090 = validateParameter(valid_21629090, JString, required = false,
                                   default = nil)
  if valid_21629090 != nil:
    section.add "Marker", valid_21629090
  var valid_21629091 = formData.getOrDefault("MaxItems")
  valid_21629091 = validateParameter(valid_21629091, JInt, required = false,
                                   default = nil)
  if valid_21629091 != nil:
    section.add "MaxItems", valid_21629091
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629092: Call_PostListInstanceProfilesForRole_21629077;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21629092.validator(path, query, header, formData, body, _)
  let scheme = call_21629092.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629092.makeUrl(scheme.get, call_21629092.host, call_21629092.base,
                               call_21629092.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629092, uri, valid, _)

proc call*(call_21629093: Call_PostListInstanceProfilesForRole_21629077;
          RoleName: string; Marker: string = "";
          Action: string = "ListInstanceProfilesForRole"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListInstanceProfilesForRole
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629094 = newJObject()
  var formData_21629095 = newJObject()
  add(formData_21629095, "RoleName", newJString(RoleName))
  add(formData_21629095, "Marker", newJString(Marker))
  add(query_21629094, "Action", newJString(Action))
  add(formData_21629095, "MaxItems", newJInt(MaxItems))
  add(query_21629094, "Version", newJString(Version))
  result = call_21629093.call(nil, query_21629094, nil, formData_21629095, nil)

var postListInstanceProfilesForRole* = Call_PostListInstanceProfilesForRole_21629077(
    name: "postListInstanceProfilesForRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfilesForRole",
    validator: validate_PostListInstanceProfilesForRole_21629078, base: "/",
    makeUrl: url_PostListInstanceProfilesForRole_21629079,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListInstanceProfilesForRole_21629059 = ref object of OpenApiRestCall_21625435
proc url_GetListInstanceProfilesForRole_21629061(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListInstanceProfilesForRole_21629060(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629062 = query.getOrDefault("Action")
  valid_21629062 = validateParameter(valid_21629062, JString, required = true, default = newJString(
      "ListInstanceProfilesForRole"))
  if valid_21629062 != nil:
    section.add "Action", valid_21629062
  var valid_21629063 = query.getOrDefault("Marker")
  valid_21629063 = validateParameter(valid_21629063, JString, required = false,
                                   default = nil)
  if valid_21629063 != nil:
    section.add "Marker", valid_21629063
  var valid_21629064 = query.getOrDefault("MaxItems")
  valid_21629064 = validateParameter(valid_21629064, JInt, required = false,
                                   default = nil)
  if valid_21629064 != nil:
    section.add "MaxItems", valid_21629064
  var valid_21629065 = query.getOrDefault("RoleName")
  valid_21629065 = validateParameter(valid_21629065, JString, required = true,
                                   default = nil)
  if valid_21629065 != nil:
    section.add "RoleName", valid_21629065
  var valid_21629066 = query.getOrDefault("Version")
  valid_21629066 = validateParameter(valid_21629066, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629066 != nil:
    section.add "Version", valid_21629066
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629067 = header.getOrDefault("X-Amz-Date")
  valid_21629067 = validateParameter(valid_21629067, JString, required = false,
                                   default = nil)
  if valid_21629067 != nil:
    section.add "X-Amz-Date", valid_21629067
  var valid_21629068 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629068 = validateParameter(valid_21629068, JString, required = false,
                                   default = nil)
  if valid_21629068 != nil:
    section.add "X-Amz-Security-Token", valid_21629068
  var valid_21629069 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629069 = validateParameter(valid_21629069, JString, required = false,
                                   default = nil)
  if valid_21629069 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629069
  var valid_21629070 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629070 = validateParameter(valid_21629070, JString, required = false,
                                   default = nil)
  if valid_21629070 != nil:
    section.add "X-Amz-Algorithm", valid_21629070
  var valid_21629071 = header.getOrDefault("X-Amz-Signature")
  valid_21629071 = validateParameter(valid_21629071, JString, required = false,
                                   default = nil)
  if valid_21629071 != nil:
    section.add "X-Amz-Signature", valid_21629071
  var valid_21629072 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629072 = validateParameter(valid_21629072, JString, required = false,
                                   default = nil)
  if valid_21629072 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629072
  var valid_21629073 = header.getOrDefault("X-Amz-Credential")
  valid_21629073 = validateParameter(valid_21629073, JString, required = false,
                                   default = nil)
  if valid_21629073 != nil:
    section.add "X-Amz-Credential", valid_21629073
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629074: Call_GetListInstanceProfilesForRole_21629059;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21629074.validator(path, query, header, formData, body, _)
  let scheme = call_21629074.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629074.makeUrl(scheme.get, call_21629074.host, call_21629074.base,
                               call_21629074.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629074, uri, valid, _)

proc call*(call_21629075: Call_GetListInstanceProfilesForRole_21629059;
          RoleName: string; Action: string = "ListInstanceProfilesForRole";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListInstanceProfilesForRole
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21629076 = newJObject()
  add(query_21629076, "Action", newJString(Action))
  add(query_21629076, "Marker", newJString(Marker))
  add(query_21629076, "MaxItems", newJInt(MaxItems))
  add(query_21629076, "RoleName", newJString(RoleName))
  add(query_21629076, "Version", newJString(Version))
  result = call_21629075.call(nil, query_21629076, nil, nil, nil)

var getListInstanceProfilesForRole* = Call_GetListInstanceProfilesForRole_21629059(
    name: "getListInstanceProfilesForRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfilesForRole",
    validator: validate_GetListInstanceProfilesForRole_21629060, base: "/",
    makeUrl: url_GetListInstanceProfilesForRole_21629061,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListMFADevices_21629114 = ref object of OpenApiRestCall_21625435
proc url_PostListMFADevices_21629116(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListMFADevices_21629115(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629117 = query.getOrDefault("Action")
  valid_21629117 = validateParameter(valid_21629117, JString, required = true,
                                   default = newJString("ListMFADevices"))
  if valid_21629117 != nil:
    section.add "Action", valid_21629117
  var valid_21629118 = query.getOrDefault("Version")
  valid_21629118 = validateParameter(valid_21629118, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629118 != nil:
    section.add "Version", valid_21629118
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629119 = header.getOrDefault("X-Amz-Date")
  valid_21629119 = validateParameter(valid_21629119, JString, required = false,
                                   default = nil)
  if valid_21629119 != nil:
    section.add "X-Amz-Date", valid_21629119
  var valid_21629120 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629120 = validateParameter(valid_21629120, JString, required = false,
                                   default = nil)
  if valid_21629120 != nil:
    section.add "X-Amz-Security-Token", valid_21629120
  var valid_21629121 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629121 = validateParameter(valid_21629121, JString, required = false,
                                   default = nil)
  if valid_21629121 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629121
  var valid_21629122 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629122 = validateParameter(valid_21629122, JString, required = false,
                                   default = nil)
  if valid_21629122 != nil:
    section.add "X-Amz-Algorithm", valid_21629122
  var valid_21629123 = header.getOrDefault("X-Amz-Signature")
  valid_21629123 = validateParameter(valid_21629123, JString, required = false,
                                   default = nil)
  if valid_21629123 != nil:
    section.add "X-Amz-Signature", valid_21629123
  var valid_21629124 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629124 = validateParameter(valid_21629124, JString, required = false,
                                   default = nil)
  if valid_21629124 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629124
  var valid_21629125 = header.getOrDefault("X-Amz-Credential")
  valid_21629125 = validateParameter(valid_21629125, JString, required = false,
                                   default = nil)
  if valid_21629125 != nil:
    section.add "X-Amz-Credential", valid_21629125
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_21629126 = formData.getOrDefault("UserName")
  valid_21629126 = validateParameter(valid_21629126, JString, required = false,
                                   default = nil)
  if valid_21629126 != nil:
    section.add "UserName", valid_21629126
  var valid_21629127 = formData.getOrDefault("Marker")
  valid_21629127 = validateParameter(valid_21629127, JString, required = false,
                                   default = nil)
  if valid_21629127 != nil:
    section.add "Marker", valid_21629127
  var valid_21629128 = formData.getOrDefault("MaxItems")
  valid_21629128 = validateParameter(valid_21629128, JInt, required = false,
                                   default = nil)
  if valid_21629128 != nil:
    section.add "MaxItems", valid_21629128
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629129: Call_PostListMFADevices_21629114; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21629129.validator(path, query, header, formData, body, _)
  let scheme = call_21629129.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629129.makeUrl(scheme.get, call_21629129.host, call_21629129.base,
                               call_21629129.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629129, uri, valid, _)

proc call*(call_21629130: Call_PostListMFADevices_21629114; UserName: string = "";
          Marker: string = ""; Action: string = "ListMFADevices"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListMFADevices
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629131 = newJObject()
  var formData_21629132 = newJObject()
  add(formData_21629132, "UserName", newJString(UserName))
  add(formData_21629132, "Marker", newJString(Marker))
  add(query_21629131, "Action", newJString(Action))
  add(formData_21629132, "MaxItems", newJInt(MaxItems))
  add(query_21629131, "Version", newJString(Version))
  result = call_21629130.call(nil, query_21629131, nil, formData_21629132, nil)

var postListMFADevices* = Call_PostListMFADevices_21629114(
    name: "postListMFADevices", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListMFADevices",
    validator: validate_PostListMFADevices_21629115, base: "/",
    makeUrl: url_PostListMFADevices_21629116, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListMFADevices_21629096 = ref object of OpenApiRestCall_21625435
proc url_GetListMFADevices_21629098(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListMFADevices_21629097(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629099 = query.getOrDefault("UserName")
  valid_21629099 = validateParameter(valid_21629099, JString, required = false,
                                   default = nil)
  if valid_21629099 != nil:
    section.add "UserName", valid_21629099
  var valid_21629100 = query.getOrDefault("Action")
  valid_21629100 = validateParameter(valid_21629100, JString, required = true,
                                   default = newJString("ListMFADevices"))
  if valid_21629100 != nil:
    section.add "Action", valid_21629100
  var valid_21629101 = query.getOrDefault("Marker")
  valid_21629101 = validateParameter(valid_21629101, JString, required = false,
                                   default = nil)
  if valid_21629101 != nil:
    section.add "Marker", valid_21629101
  var valid_21629102 = query.getOrDefault("MaxItems")
  valid_21629102 = validateParameter(valid_21629102, JInt, required = false,
                                   default = nil)
  if valid_21629102 != nil:
    section.add "MaxItems", valid_21629102
  var valid_21629103 = query.getOrDefault("Version")
  valid_21629103 = validateParameter(valid_21629103, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629103 != nil:
    section.add "Version", valid_21629103
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629104 = header.getOrDefault("X-Amz-Date")
  valid_21629104 = validateParameter(valid_21629104, JString, required = false,
                                   default = nil)
  if valid_21629104 != nil:
    section.add "X-Amz-Date", valid_21629104
  var valid_21629105 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629105 = validateParameter(valid_21629105, JString, required = false,
                                   default = nil)
  if valid_21629105 != nil:
    section.add "X-Amz-Security-Token", valid_21629105
  var valid_21629106 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629106 = validateParameter(valid_21629106, JString, required = false,
                                   default = nil)
  if valid_21629106 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629106
  var valid_21629107 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629107 = validateParameter(valid_21629107, JString, required = false,
                                   default = nil)
  if valid_21629107 != nil:
    section.add "X-Amz-Algorithm", valid_21629107
  var valid_21629108 = header.getOrDefault("X-Amz-Signature")
  valid_21629108 = validateParameter(valid_21629108, JString, required = false,
                                   default = nil)
  if valid_21629108 != nil:
    section.add "X-Amz-Signature", valid_21629108
  var valid_21629109 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629109 = validateParameter(valid_21629109, JString, required = false,
                                   default = nil)
  if valid_21629109 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629109
  var valid_21629110 = header.getOrDefault("X-Amz-Credential")
  valid_21629110 = validateParameter(valid_21629110, JString, required = false,
                                   default = nil)
  if valid_21629110 != nil:
    section.add "X-Amz-Credential", valid_21629110
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629111: Call_GetListMFADevices_21629096; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21629111.validator(path, query, header, formData, body, _)
  let scheme = call_21629111.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629111.makeUrl(scheme.get, call_21629111.host, call_21629111.base,
                               call_21629111.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629111, uri, valid, _)

proc call*(call_21629112: Call_GetListMFADevices_21629096; UserName: string = "";
          Action: string = "ListMFADevices"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListMFADevices
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629113 = newJObject()
  add(query_21629113, "UserName", newJString(UserName))
  add(query_21629113, "Action", newJString(Action))
  add(query_21629113, "Marker", newJString(Marker))
  add(query_21629113, "MaxItems", newJInt(MaxItems))
  add(query_21629113, "Version", newJString(Version))
  result = call_21629112.call(nil, query_21629113, nil, nil, nil)

var getListMFADevices* = Call_GetListMFADevices_21629096(name: "getListMFADevices",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListMFADevices", validator: validate_GetListMFADevices_21629097,
    base: "/", makeUrl: url_GetListMFADevices_21629098,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListOpenIDConnectProviders_21629148 = ref object of OpenApiRestCall_21625435
proc url_PostListOpenIDConnectProviders_21629150(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListOpenIDConnectProviders_21629149(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629151 = query.getOrDefault("Action")
  valid_21629151 = validateParameter(valid_21629151, JString, required = true, default = newJString(
      "ListOpenIDConnectProviders"))
  if valid_21629151 != nil:
    section.add "Action", valid_21629151
  var valid_21629152 = query.getOrDefault("Version")
  valid_21629152 = validateParameter(valid_21629152, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629152 != nil:
    section.add "Version", valid_21629152
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629153 = header.getOrDefault("X-Amz-Date")
  valid_21629153 = validateParameter(valid_21629153, JString, required = false,
                                   default = nil)
  if valid_21629153 != nil:
    section.add "X-Amz-Date", valid_21629153
  var valid_21629154 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629154 = validateParameter(valid_21629154, JString, required = false,
                                   default = nil)
  if valid_21629154 != nil:
    section.add "X-Amz-Security-Token", valid_21629154
  var valid_21629155 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629155 = validateParameter(valid_21629155, JString, required = false,
                                   default = nil)
  if valid_21629155 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629155
  var valid_21629156 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629156 = validateParameter(valid_21629156, JString, required = false,
                                   default = nil)
  if valid_21629156 != nil:
    section.add "X-Amz-Algorithm", valid_21629156
  var valid_21629157 = header.getOrDefault("X-Amz-Signature")
  valid_21629157 = validateParameter(valid_21629157, JString, required = false,
                                   default = nil)
  if valid_21629157 != nil:
    section.add "X-Amz-Signature", valid_21629157
  var valid_21629158 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629158 = validateParameter(valid_21629158, JString, required = false,
                                   default = nil)
  if valid_21629158 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629158
  var valid_21629159 = header.getOrDefault("X-Amz-Credential")
  valid_21629159 = validateParameter(valid_21629159, JString, required = false,
                                   default = nil)
  if valid_21629159 != nil:
    section.add "X-Amz-Credential", valid_21629159
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629160: Call_PostListOpenIDConnectProviders_21629148;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  let valid = call_21629160.validator(path, query, header, formData, body, _)
  let scheme = call_21629160.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629160.makeUrl(scheme.get, call_21629160.host, call_21629160.base,
                               call_21629160.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629160, uri, valid, _)

proc call*(call_21629161: Call_PostListOpenIDConnectProviders_21629148;
          Action: string = "ListOpenIDConnectProviders";
          Version: string = "2010-05-08"): Recallable =
  ## postListOpenIDConnectProviders
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21629162 = newJObject()
  add(query_21629162, "Action", newJString(Action))
  add(query_21629162, "Version", newJString(Version))
  result = call_21629161.call(nil, query_21629162, nil, nil, nil)

var postListOpenIDConnectProviders* = Call_PostListOpenIDConnectProviders_21629148(
    name: "postListOpenIDConnectProviders", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListOpenIDConnectProviders",
    validator: validate_PostListOpenIDConnectProviders_21629149, base: "/",
    makeUrl: url_PostListOpenIDConnectProviders_21629150,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListOpenIDConnectProviders_21629133 = ref object of OpenApiRestCall_21625435
proc url_GetListOpenIDConnectProviders_21629135(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListOpenIDConnectProviders_21629134(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629136 = query.getOrDefault("Action")
  valid_21629136 = validateParameter(valid_21629136, JString, required = true, default = newJString(
      "ListOpenIDConnectProviders"))
  if valid_21629136 != nil:
    section.add "Action", valid_21629136
  var valid_21629137 = query.getOrDefault("Version")
  valid_21629137 = validateParameter(valid_21629137, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629137 != nil:
    section.add "Version", valid_21629137
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629138 = header.getOrDefault("X-Amz-Date")
  valid_21629138 = validateParameter(valid_21629138, JString, required = false,
                                   default = nil)
  if valid_21629138 != nil:
    section.add "X-Amz-Date", valid_21629138
  var valid_21629139 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629139 = validateParameter(valid_21629139, JString, required = false,
                                   default = nil)
  if valid_21629139 != nil:
    section.add "X-Amz-Security-Token", valid_21629139
  var valid_21629140 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629140 = validateParameter(valid_21629140, JString, required = false,
                                   default = nil)
  if valid_21629140 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629140
  var valid_21629141 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629141 = validateParameter(valid_21629141, JString, required = false,
                                   default = nil)
  if valid_21629141 != nil:
    section.add "X-Amz-Algorithm", valid_21629141
  var valid_21629142 = header.getOrDefault("X-Amz-Signature")
  valid_21629142 = validateParameter(valid_21629142, JString, required = false,
                                   default = nil)
  if valid_21629142 != nil:
    section.add "X-Amz-Signature", valid_21629142
  var valid_21629143 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629143 = validateParameter(valid_21629143, JString, required = false,
                                   default = nil)
  if valid_21629143 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629143
  var valid_21629144 = header.getOrDefault("X-Amz-Credential")
  valid_21629144 = validateParameter(valid_21629144, JString, required = false,
                                   default = nil)
  if valid_21629144 != nil:
    section.add "X-Amz-Credential", valid_21629144
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629145: Call_GetListOpenIDConnectProviders_21629133;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  let valid = call_21629145.validator(path, query, header, formData, body, _)
  let scheme = call_21629145.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629145.makeUrl(scheme.get, call_21629145.host, call_21629145.base,
                               call_21629145.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629145, uri, valid, _)

proc call*(call_21629146: Call_GetListOpenIDConnectProviders_21629133;
          Action: string = "ListOpenIDConnectProviders";
          Version: string = "2010-05-08"): Recallable =
  ## getListOpenIDConnectProviders
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21629147 = newJObject()
  add(query_21629147, "Action", newJString(Action))
  add(query_21629147, "Version", newJString(Version))
  result = call_21629146.call(nil, query_21629147, nil, nil, nil)

var getListOpenIDConnectProviders* = Call_GetListOpenIDConnectProviders_21629133(
    name: "getListOpenIDConnectProviders", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListOpenIDConnectProviders",
    validator: validate_GetListOpenIDConnectProviders_21629134, base: "/",
    makeUrl: url_GetListOpenIDConnectProviders_21629135,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPolicies_21629184 = ref object of OpenApiRestCall_21625435
proc url_PostListPolicies_21629186(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListPolicies_21629185(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629187 = query.getOrDefault("Action")
  valid_21629187 = validateParameter(valid_21629187, JString, required = true,
                                   default = newJString("ListPolicies"))
  if valid_21629187 != nil:
    section.add "Action", valid_21629187
  var valid_21629188 = query.getOrDefault("Version")
  valid_21629188 = validateParameter(valid_21629188, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629188 != nil:
    section.add "Version", valid_21629188
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629189 = header.getOrDefault("X-Amz-Date")
  valid_21629189 = validateParameter(valid_21629189, JString, required = false,
                                   default = nil)
  if valid_21629189 != nil:
    section.add "X-Amz-Date", valid_21629189
  var valid_21629190 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629190 = validateParameter(valid_21629190, JString, required = false,
                                   default = nil)
  if valid_21629190 != nil:
    section.add "X-Amz-Security-Token", valid_21629190
  var valid_21629191 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629191 = validateParameter(valid_21629191, JString, required = false,
                                   default = nil)
  if valid_21629191 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629191
  var valid_21629192 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629192 = validateParameter(valid_21629192, JString, required = false,
                                   default = nil)
  if valid_21629192 != nil:
    section.add "X-Amz-Algorithm", valid_21629192
  var valid_21629193 = header.getOrDefault("X-Amz-Signature")
  valid_21629193 = validateParameter(valid_21629193, JString, required = false,
                                   default = nil)
  if valid_21629193 != nil:
    section.add "X-Amz-Signature", valid_21629193
  var valid_21629194 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629194 = validateParameter(valid_21629194, JString, required = false,
                                   default = nil)
  if valid_21629194 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629194
  var valid_21629195 = header.getOrDefault("X-Amz-Credential")
  valid_21629195 = validateParameter(valid_21629195, JString, required = false,
                                   default = nil)
  if valid_21629195 != nil:
    section.add "X-Amz-Credential", valid_21629195
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Scope: JString
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   OnlyAttached: JBool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_21629196 = formData.getOrDefault("PathPrefix")
  valid_21629196 = validateParameter(valid_21629196, JString, required = false,
                                   default = nil)
  if valid_21629196 != nil:
    section.add "PathPrefix", valid_21629196
  var valid_21629197 = formData.getOrDefault("Marker")
  valid_21629197 = validateParameter(valid_21629197, JString, required = false,
                                   default = nil)
  if valid_21629197 != nil:
    section.add "Marker", valid_21629197
  var valid_21629198 = formData.getOrDefault("PolicyUsageFilter")
  valid_21629198 = validateParameter(valid_21629198, JString, required = false,
                                   default = newJString("PermissionsPolicy"))
  if valid_21629198 != nil:
    section.add "PolicyUsageFilter", valid_21629198
  var valid_21629199 = formData.getOrDefault("Scope")
  valid_21629199 = validateParameter(valid_21629199, JString, required = false,
                                   default = newJString("All"))
  if valid_21629199 != nil:
    section.add "Scope", valid_21629199
  var valid_21629200 = formData.getOrDefault("OnlyAttached")
  valid_21629200 = validateParameter(valid_21629200, JBool, required = false,
                                   default = nil)
  if valid_21629200 != nil:
    section.add "OnlyAttached", valid_21629200
  var valid_21629201 = formData.getOrDefault("MaxItems")
  valid_21629201 = validateParameter(valid_21629201, JInt, required = false,
                                   default = nil)
  if valid_21629201 != nil:
    section.add "MaxItems", valid_21629201
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629202: Call_PostListPolicies_21629184; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21629202.validator(path, query, header, formData, body, _)
  let scheme = call_21629202.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629202.makeUrl(scheme.get, call_21629202.host, call_21629202.base,
                               call_21629202.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629202, uri, valid, _)

proc call*(call_21629203: Call_PostListPolicies_21629184; PathPrefix: string = "";
          Marker: string = ""; PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListPolicies"; Scope: string = "All";
          OnlyAttached: bool = false; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postListPolicies
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PathPrefix: string
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Scope: string
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   OnlyAttached: bool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629204 = newJObject()
  var formData_21629205 = newJObject()
  add(formData_21629205, "PathPrefix", newJString(PathPrefix))
  add(formData_21629205, "Marker", newJString(Marker))
  add(formData_21629205, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_21629204, "Action", newJString(Action))
  add(formData_21629205, "Scope", newJString(Scope))
  add(formData_21629205, "OnlyAttached", newJBool(OnlyAttached))
  add(formData_21629205, "MaxItems", newJInt(MaxItems))
  add(query_21629204, "Version", newJString(Version))
  result = call_21629203.call(nil, query_21629204, nil, formData_21629205, nil)

var postListPolicies* = Call_PostListPolicies_21629184(name: "postListPolicies",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListPolicies", validator: validate_PostListPolicies_21629185,
    base: "/", makeUrl: url_PostListPolicies_21629186,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPolicies_21629163 = ref object of OpenApiRestCall_21625435
proc url_GetListPolicies_21629165(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListPolicies_21629164(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Scope: JString
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   OnlyAttached: JBool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629166 = query.getOrDefault("PathPrefix")
  valid_21629166 = validateParameter(valid_21629166, JString, required = false,
                                   default = nil)
  if valid_21629166 != nil:
    section.add "PathPrefix", valid_21629166
  var valid_21629167 = query.getOrDefault("PolicyUsageFilter")
  valid_21629167 = validateParameter(valid_21629167, JString, required = false,
                                   default = newJString("PermissionsPolicy"))
  if valid_21629167 != nil:
    section.add "PolicyUsageFilter", valid_21629167
  var valid_21629168 = query.getOrDefault("Action")
  valid_21629168 = validateParameter(valid_21629168, JString, required = true,
                                   default = newJString("ListPolicies"))
  if valid_21629168 != nil:
    section.add "Action", valid_21629168
  var valid_21629169 = query.getOrDefault("Marker")
  valid_21629169 = validateParameter(valid_21629169, JString, required = false,
                                   default = nil)
  if valid_21629169 != nil:
    section.add "Marker", valid_21629169
  var valid_21629170 = query.getOrDefault("Scope")
  valid_21629170 = validateParameter(valid_21629170, JString, required = false,
                                   default = newJString("All"))
  if valid_21629170 != nil:
    section.add "Scope", valid_21629170
  var valid_21629171 = query.getOrDefault("MaxItems")
  valid_21629171 = validateParameter(valid_21629171, JInt, required = false,
                                   default = nil)
  if valid_21629171 != nil:
    section.add "MaxItems", valid_21629171
  var valid_21629172 = query.getOrDefault("OnlyAttached")
  valid_21629172 = validateParameter(valid_21629172, JBool, required = false,
                                   default = nil)
  if valid_21629172 != nil:
    section.add "OnlyAttached", valid_21629172
  var valid_21629173 = query.getOrDefault("Version")
  valid_21629173 = validateParameter(valid_21629173, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629173 != nil:
    section.add "Version", valid_21629173
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629174 = header.getOrDefault("X-Amz-Date")
  valid_21629174 = validateParameter(valid_21629174, JString, required = false,
                                   default = nil)
  if valid_21629174 != nil:
    section.add "X-Amz-Date", valid_21629174
  var valid_21629175 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629175 = validateParameter(valid_21629175, JString, required = false,
                                   default = nil)
  if valid_21629175 != nil:
    section.add "X-Amz-Security-Token", valid_21629175
  var valid_21629176 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629176 = validateParameter(valid_21629176, JString, required = false,
                                   default = nil)
  if valid_21629176 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629176
  var valid_21629177 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629177 = validateParameter(valid_21629177, JString, required = false,
                                   default = nil)
  if valid_21629177 != nil:
    section.add "X-Amz-Algorithm", valid_21629177
  var valid_21629178 = header.getOrDefault("X-Amz-Signature")
  valid_21629178 = validateParameter(valid_21629178, JString, required = false,
                                   default = nil)
  if valid_21629178 != nil:
    section.add "X-Amz-Signature", valid_21629178
  var valid_21629179 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629179 = validateParameter(valid_21629179, JString, required = false,
                                   default = nil)
  if valid_21629179 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629179
  var valid_21629180 = header.getOrDefault("X-Amz-Credential")
  valid_21629180 = validateParameter(valid_21629180, JString, required = false,
                                   default = nil)
  if valid_21629180 != nil:
    section.add "X-Amz-Credential", valid_21629180
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629181: Call_GetListPolicies_21629163; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21629181.validator(path, query, header, formData, body, _)
  let scheme = call_21629181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629181.makeUrl(scheme.get, call_21629181.host, call_21629181.base,
                               call_21629181.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629181, uri, valid, _)

proc call*(call_21629182: Call_GetListPolicies_21629163; PathPrefix: string = "";
          PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListPolicies"; Marker: string = ""; Scope: string = "All";
          MaxItems: int = 0; OnlyAttached: bool = false; Version: string = "2010-05-08"): Recallable =
  ## getListPolicies
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PathPrefix: string
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Scope: string
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   OnlyAttached: bool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   Version: string (required)
  var query_21629183 = newJObject()
  add(query_21629183, "PathPrefix", newJString(PathPrefix))
  add(query_21629183, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_21629183, "Action", newJString(Action))
  add(query_21629183, "Marker", newJString(Marker))
  add(query_21629183, "Scope", newJString(Scope))
  add(query_21629183, "MaxItems", newJInt(MaxItems))
  add(query_21629183, "OnlyAttached", newJBool(OnlyAttached))
  add(query_21629183, "Version", newJString(Version))
  result = call_21629182.call(nil, query_21629183, nil, nil, nil)

var getListPolicies* = Call_GetListPolicies_21629163(name: "getListPolicies",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListPolicies", validator: validate_GetListPolicies_21629164,
    base: "/", makeUrl: url_GetListPolicies_21629165,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPoliciesGrantingServiceAccess_21629224 = ref object of OpenApiRestCall_21625435
proc url_PostListPoliciesGrantingServiceAccess_21629226(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListPoliciesGrantingServiceAccess_21629225(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629227 = query.getOrDefault("Action")
  valid_21629227 = validateParameter(valid_21629227, JString, required = true, default = newJString(
      "ListPoliciesGrantingServiceAccess"))
  if valid_21629227 != nil:
    section.add "Action", valid_21629227
  var valid_21629228 = query.getOrDefault("Version")
  valid_21629228 = validateParameter(valid_21629228, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629228 != nil:
    section.add "Version", valid_21629228
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629229 = header.getOrDefault("X-Amz-Date")
  valid_21629229 = validateParameter(valid_21629229, JString, required = false,
                                   default = nil)
  if valid_21629229 != nil:
    section.add "X-Amz-Date", valid_21629229
  var valid_21629230 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629230 = validateParameter(valid_21629230, JString, required = false,
                                   default = nil)
  if valid_21629230 != nil:
    section.add "X-Amz-Security-Token", valid_21629230
  var valid_21629231 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629231 = validateParameter(valid_21629231, JString, required = false,
                                   default = nil)
  if valid_21629231 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629231
  var valid_21629232 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629232 = validateParameter(valid_21629232, JString, required = false,
                                   default = nil)
  if valid_21629232 != nil:
    section.add "X-Amz-Algorithm", valid_21629232
  var valid_21629233 = header.getOrDefault("X-Amz-Signature")
  valid_21629233 = validateParameter(valid_21629233, JString, required = false,
                                   default = nil)
  if valid_21629233 != nil:
    section.add "X-Amz-Signature", valid_21629233
  var valid_21629234 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629234 = validateParameter(valid_21629234, JString, required = false,
                                   default = nil)
  if valid_21629234 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629234
  var valid_21629235 = header.getOrDefault("X-Amz-Credential")
  valid_21629235 = validateParameter(valid_21629235, JString, required = false,
                                   default = nil)
  if valid_21629235 != nil:
    section.add "X-Amz-Credential", valid_21629235
  result.add "header", section
  ## parameters in `formData` object:
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Arn` field"
  var valid_21629236 = formData.getOrDefault("Arn")
  valid_21629236 = validateParameter(valid_21629236, JString, required = true,
                                   default = nil)
  if valid_21629236 != nil:
    section.add "Arn", valid_21629236
  var valid_21629237 = formData.getOrDefault("Marker")
  valid_21629237 = validateParameter(valid_21629237, JString, required = false,
                                   default = nil)
  if valid_21629237 != nil:
    section.add "Marker", valid_21629237
  var valid_21629238 = formData.getOrDefault("ServiceNamespaces")
  valid_21629238 = validateParameter(valid_21629238, JArray, required = true,
                                   default = nil)
  if valid_21629238 != nil:
    section.add "ServiceNamespaces", valid_21629238
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629239: Call_PostListPoliciesGrantingServiceAccess_21629224;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  let valid = call_21629239.validator(path, query, header, formData, body, _)
  let scheme = call_21629239.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629239.makeUrl(scheme.get, call_21629239.host, call_21629239.base,
                               call_21629239.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629239, uri, valid, _)

proc call*(call_21629240: Call_PostListPoliciesGrantingServiceAccess_21629224;
          Arn: string; ServiceNamespaces: JsonNode; Marker: string = "";
          Action: string = "ListPoliciesGrantingServiceAccess";
          Version: string = "2010-05-08"): Recallable =
  ## postListPoliciesGrantingServiceAccess
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21629241 = newJObject()
  var formData_21629242 = newJObject()
  add(formData_21629242, "Arn", newJString(Arn))
  add(formData_21629242, "Marker", newJString(Marker))
  if ServiceNamespaces != nil:
    formData_21629242.add "ServiceNamespaces", ServiceNamespaces
  add(query_21629241, "Action", newJString(Action))
  add(query_21629241, "Version", newJString(Version))
  result = call_21629240.call(nil, query_21629241, nil, formData_21629242, nil)

var postListPoliciesGrantingServiceAccess* = Call_PostListPoliciesGrantingServiceAccess_21629224(
    name: "postListPoliciesGrantingServiceAccess", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=ListPoliciesGrantingServiceAccess",
    validator: validate_PostListPoliciesGrantingServiceAccess_21629225, base: "/",
    makeUrl: url_PostListPoliciesGrantingServiceAccess_21629226,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPoliciesGrantingServiceAccess_21629206 = ref object of OpenApiRestCall_21625435
proc url_GetListPoliciesGrantingServiceAccess_21629208(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListPoliciesGrantingServiceAccess_21629207(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceNamespaces` field"
  var valid_21629209 = query.getOrDefault("ServiceNamespaces")
  valid_21629209 = validateParameter(valid_21629209, JArray, required = true,
                                   default = nil)
  if valid_21629209 != nil:
    section.add "ServiceNamespaces", valid_21629209
  var valid_21629210 = query.getOrDefault("Action")
  valid_21629210 = validateParameter(valid_21629210, JString, required = true, default = newJString(
      "ListPoliciesGrantingServiceAccess"))
  if valid_21629210 != nil:
    section.add "Action", valid_21629210
  var valid_21629211 = query.getOrDefault("Marker")
  valid_21629211 = validateParameter(valid_21629211, JString, required = false,
                                   default = nil)
  if valid_21629211 != nil:
    section.add "Marker", valid_21629211
  var valid_21629212 = query.getOrDefault("Arn")
  valid_21629212 = validateParameter(valid_21629212, JString, required = true,
                                   default = nil)
  if valid_21629212 != nil:
    section.add "Arn", valid_21629212
  var valid_21629213 = query.getOrDefault("Version")
  valid_21629213 = validateParameter(valid_21629213, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629213 != nil:
    section.add "Version", valid_21629213
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629214 = header.getOrDefault("X-Amz-Date")
  valid_21629214 = validateParameter(valid_21629214, JString, required = false,
                                   default = nil)
  if valid_21629214 != nil:
    section.add "X-Amz-Date", valid_21629214
  var valid_21629215 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629215 = validateParameter(valid_21629215, JString, required = false,
                                   default = nil)
  if valid_21629215 != nil:
    section.add "X-Amz-Security-Token", valid_21629215
  var valid_21629216 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629216 = validateParameter(valid_21629216, JString, required = false,
                                   default = nil)
  if valid_21629216 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629216
  var valid_21629217 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629217 = validateParameter(valid_21629217, JString, required = false,
                                   default = nil)
  if valid_21629217 != nil:
    section.add "X-Amz-Algorithm", valid_21629217
  var valid_21629218 = header.getOrDefault("X-Amz-Signature")
  valid_21629218 = validateParameter(valid_21629218, JString, required = false,
                                   default = nil)
  if valid_21629218 != nil:
    section.add "X-Amz-Signature", valid_21629218
  var valid_21629219 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629219 = validateParameter(valid_21629219, JString, required = false,
                                   default = nil)
  if valid_21629219 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629219
  var valid_21629220 = header.getOrDefault("X-Amz-Credential")
  valid_21629220 = validateParameter(valid_21629220, JString, required = false,
                                   default = nil)
  if valid_21629220 != nil:
    section.add "X-Amz-Credential", valid_21629220
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629221: Call_GetListPoliciesGrantingServiceAccess_21629206;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  let valid = call_21629221.validator(path, query, header, formData, body, _)
  let scheme = call_21629221.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629221.makeUrl(scheme.get, call_21629221.host, call_21629221.base,
                               call_21629221.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629221, uri, valid, _)

proc call*(call_21629222: Call_GetListPoliciesGrantingServiceAccess_21629206;
          ServiceNamespaces: JsonNode; Arn: string;
          Action: string = "ListPoliciesGrantingServiceAccess"; Marker: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getListPoliciesGrantingServiceAccess
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_21629223 = newJObject()
  if ServiceNamespaces != nil:
    query_21629223.add "ServiceNamespaces", ServiceNamespaces
  add(query_21629223, "Action", newJString(Action))
  add(query_21629223, "Marker", newJString(Marker))
  add(query_21629223, "Arn", newJString(Arn))
  add(query_21629223, "Version", newJString(Version))
  result = call_21629222.call(nil, query_21629223, nil, nil, nil)

var getListPoliciesGrantingServiceAccess* = Call_GetListPoliciesGrantingServiceAccess_21629206(
    name: "getListPoliciesGrantingServiceAccess", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=ListPoliciesGrantingServiceAccess",
    validator: validate_GetListPoliciesGrantingServiceAccess_21629207, base: "/",
    makeUrl: url_GetListPoliciesGrantingServiceAccess_21629208,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPolicyVersions_21629261 = ref object of OpenApiRestCall_21625435
proc url_PostListPolicyVersions_21629263(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListPolicyVersions_21629262(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629264 = query.getOrDefault("Action")
  valid_21629264 = validateParameter(valid_21629264, JString, required = true,
                                   default = newJString("ListPolicyVersions"))
  if valid_21629264 != nil:
    section.add "Action", valid_21629264
  var valid_21629265 = query.getOrDefault("Version")
  valid_21629265 = validateParameter(valid_21629265, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629265 != nil:
    section.add "Version", valid_21629265
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629266 = header.getOrDefault("X-Amz-Date")
  valid_21629266 = validateParameter(valid_21629266, JString, required = false,
                                   default = nil)
  if valid_21629266 != nil:
    section.add "X-Amz-Date", valid_21629266
  var valid_21629267 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629267 = validateParameter(valid_21629267, JString, required = false,
                                   default = nil)
  if valid_21629267 != nil:
    section.add "X-Amz-Security-Token", valid_21629267
  var valid_21629268 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629268 = validateParameter(valid_21629268, JString, required = false,
                                   default = nil)
  if valid_21629268 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629268
  var valid_21629269 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629269 = validateParameter(valid_21629269, JString, required = false,
                                   default = nil)
  if valid_21629269 != nil:
    section.add "X-Amz-Algorithm", valid_21629269
  var valid_21629270 = header.getOrDefault("X-Amz-Signature")
  valid_21629270 = validateParameter(valid_21629270, JString, required = false,
                                   default = nil)
  if valid_21629270 != nil:
    section.add "X-Amz-Signature", valid_21629270
  var valid_21629271 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629271 = validateParameter(valid_21629271, JString, required = false,
                                   default = nil)
  if valid_21629271 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629271
  var valid_21629272 = header.getOrDefault("X-Amz-Credential")
  valid_21629272 = validateParameter(valid_21629272, JString, required = false,
                                   default = nil)
  if valid_21629272 != nil:
    section.add "X-Amz-Credential", valid_21629272
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_21629273 = formData.getOrDefault("PolicyArn")
  valid_21629273 = validateParameter(valid_21629273, JString, required = true,
                                   default = nil)
  if valid_21629273 != nil:
    section.add "PolicyArn", valid_21629273
  var valid_21629274 = formData.getOrDefault("Marker")
  valid_21629274 = validateParameter(valid_21629274, JString, required = false,
                                   default = nil)
  if valid_21629274 != nil:
    section.add "Marker", valid_21629274
  var valid_21629275 = formData.getOrDefault("MaxItems")
  valid_21629275 = validateParameter(valid_21629275, JInt, required = false,
                                   default = nil)
  if valid_21629275 != nil:
    section.add "MaxItems", valid_21629275
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629276: Call_PostListPolicyVersions_21629261;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21629276.validator(path, query, header, formData, body, _)
  let scheme = call_21629276.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629276.makeUrl(scheme.get, call_21629276.host, call_21629276.base,
                               call_21629276.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629276, uri, valid, _)

proc call*(call_21629277: Call_PostListPolicyVersions_21629261; PolicyArn: string;
          Marker: string = ""; Action: string = "ListPolicyVersions"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListPolicyVersions
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629278 = newJObject()
  var formData_21629279 = newJObject()
  add(formData_21629279, "PolicyArn", newJString(PolicyArn))
  add(formData_21629279, "Marker", newJString(Marker))
  add(query_21629278, "Action", newJString(Action))
  add(formData_21629279, "MaxItems", newJInt(MaxItems))
  add(query_21629278, "Version", newJString(Version))
  result = call_21629277.call(nil, query_21629278, nil, formData_21629279, nil)

var postListPolicyVersions* = Call_PostListPolicyVersions_21629261(
    name: "postListPolicyVersions", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListPolicyVersions",
    validator: validate_PostListPolicyVersions_21629262, base: "/",
    makeUrl: url_PostListPolicyVersions_21629263,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPolicyVersions_21629243 = ref object of OpenApiRestCall_21625435
proc url_GetListPolicyVersions_21629245(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListPolicyVersions_21629244(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_21629246 = query.getOrDefault("PolicyArn")
  valid_21629246 = validateParameter(valid_21629246, JString, required = true,
                                   default = nil)
  if valid_21629246 != nil:
    section.add "PolicyArn", valid_21629246
  var valid_21629247 = query.getOrDefault("Action")
  valid_21629247 = validateParameter(valid_21629247, JString, required = true,
                                   default = newJString("ListPolicyVersions"))
  if valid_21629247 != nil:
    section.add "Action", valid_21629247
  var valid_21629248 = query.getOrDefault("Marker")
  valid_21629248 = validateParameter(valid_21629248, JString, required = false,
                                   default = nil)
  if valid_21629248 != nil:
    section.add "Marker", valid_21629248
  var valid_21629249 = query.getOrDefault("MaxItems")
  valid_21629249 = validateParameter(valid_21629249, JInt, required = false,
                                   default = nil)
  if valid_21629249 != nil:
    section.add "MaxItems", valid_21629249
  var valid_21629250 = query.getOrDefault("Version")
  valid_21629250 = validateParameter(valid_21629250, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629250 != nil:
    section.add "Version", valid_21629250
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629251 = header.getOrDefault("X-Amz-Date")
  valid_21629251 = validateParameter(valid_21629251, JString, required = false,
                                   default = nil)
  if valid_21629251 != nil:
    section.add "X-Amz-Date", valid_21629251
  var valid_21629252 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629252 = validateParameter(valid_21629252, JString, required = false,
                                   default = nil)
  if valid_21629252 != nil:
    section.add "X-Amz-Security-Token", valid_21629252
  var valid_21629253 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629253 = validateParameter(valid_21629253, JString, required = false,
                                   default = nil)
  if valid_21629253 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629253
  var valid_21629254 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629254 = validateParameter(valid_21629254, JString, required = false,
                                   default = nil)
  if valid_21629254 != nil:
    section.add "X-Amz-Algorithm", valid_21629254
  var valid_21629255 = header.getOrDefault("X-Amz-Signature")
  valid_21629255 = validateParameter(valid_21629255, JString, required = false,
                                   default = nil)
  if valid_21629255 != nil:
    section.add "X-Amz-Signature", valid_21629255
  var valid_21629256 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629256 = validateParameter(valid_21629256, JString, required = false,
                                   default = nil)
  if valid_21629256 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629256
  var valid_21629257 = header.getOrDefault("X-Amz-Credential")
  valid_21629257 = validateParameter(valid_21629257, JString, required = false,
                                   default = nil)
  if valid_21629257 != nil:
    section.add "X-Amz-Credential", valid_21629257
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629258: Call_GetListPolicyVersions_21629243;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21629258.validator(path, query, header, formData, body, _)
  let scheme = call_21629258.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629258.makeUrl(scheme.get, call_21629258.host, call_21629258.base,
                               call_21629258.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629258, uri, valid, _)

proc call*(call_21629259: Call_GetListPolicyVersions_21629243; PolicyArn: string;
          Action: string = "ListPolicyVersions"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListPolicyVersions
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629260 = newJObject()
  add(query_21629260, "PolicyArn", newJString(PolicyArn))
  add(query_21629260, "Action", newJString(Action))
  add(query_21629260, "Marker", newJString(Marker))
  add(query_21629260, "MaxItems", newJInt(MaxItems))
  add(query_21629260, "Version", newJString(Version))
  result = call_21629259.call(nil, query_21629260, nil, nil, nil)

var getListPolicyVersions* = Call_GetListPolicyVersions_21629243(
    name: "getListPolicyVersions", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListPolicyVersions",
    validator: validate_GetListPolicyVersions_21629244, base: "/",
    makeUrl: url_GetListPolicyVersions_21629245,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRolePolicies_21629298 = ref object of OpenApiRestCall_21625435
proc url_PostListRolePolicies_21629300(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListRolePolicies_21629299(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629301 = query.getOrDefault("Action")
  valid_21629301 = validateParameter(valid_21629301, JString, required = true,
                                   default = newJString("ListRolePolicies"))
  if valid_21629301 != nil:
    section.add "Action", valid_21629301
  var valid_21629302 = query.getOrDefault("Version")
  valid_21629302 = validateParameter(valid_21629302, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629302 != nil:
    section.add "Version", valid_21629302
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629303 = header.getOrDefault("X-Amz-Date")
  valid_21629303 = validateParameter(valid_21629303, JString, required = false,
                                   default = nil)
  if valid_21629303 != nil:
    section.add "X-Amz-Date", valid_21629303
  var valid_21629304 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629304 = validateParameter(valid_21629304, JString, required = false,
                                   default = nil)
  if valid_21629304 != nil:
    section.add "X-Amz-Security-Token", valid_21629304
  var valid_21629305 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629305 = validateParameter(valid_21629305, JString, required = false,
                                   default = nil)
  if valid_21629305 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629305
  var valid_21629306 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629306 = validateParameter(valid_21629306, JString, required = false,
                                   default = nil)
  if valid_21629306 != nil:
    section.add "X-Amz-Algorithm", valid_21629306
  var valid_21629307 = header.getOrDefault("X-Amz-Signature")
  valid_21629307 = validateParameter(valid_21629307, JString, required = false,
                                   default = nil)
  if valid_21629307 != nil:
    section.add "X-Amz-Signature", valid_21629307
  var valid_21629308 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629308 = validateParameter(valid_21629308, JString, required = false,
                                   default = nil)
  if valid_21629308 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629308
  var valid_21629309 = header.getOrDefault("X-Amz-Credential")
  valid_21629309 = validateParameter(valid_21629309, JString, required = false,
                                   default = nil)
  if valid_21629309 != nil:
    section.add "X-Amz-Credential", valid_21629309
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_21629310 = formData.getOrDefault("RoleName")
  valid_21629310 = validateParameter(valid_21629310, JString, required = true,
                                   default = nil)
  if valid_21629310 != nil:
    section.add "RoleName", valid_21629310
  var valid_21629311 = formData.getOrDefault("Marker")
  valid_21629311 = validateParameter(valid_21629311, JString, required = false,
                                   default = nil)
  if valid_21629311 != nil:
    section.add "Marker", valid_21629311
  var valid_21629312 = formData.getOrDefault("MaxItems")
  valid_21629312 = validateParameter(valid_21629312, JInt, required = false,
                                   default = nil)
  if valid_21629312 != nil:
    section.add "MaxItems", valid_21629312
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629313: Call_PostListRolePolicies_21629298; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  let valid = call_21629313.validator(path, query, header, formData, body, _)
  let scheme = call_21629313.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629313.makeUrl(scheme.get, call_21629313.host, call_21629313.base,
                               call_21629313.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629313, uri, valid, _)

proc call*(call_21629314: Call_PostListRolePolicies_21629298; RoleName: string;
          Marker: string = ""; Action: string = "ListRolePolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRolePolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629315 = newJObject()
  var formData_21629316 = newJObject()
  add(formData_21629316, "RoleName", newJString(RoleName))
  add(formData_21629316, "Marker", newJString(Marker))
  add(query_21629315, "Action", newJString(Action))
  add(formData_21629316, "MaxItems", newJInt(MaxItems))
  add(query_21629315, "Version", newJString(Version))
  result = call_21629314.call(nil, query_21629315, nil, formData_21629316, nil)

var postListRolePolicies* = Call_PostListRolePolicies_21629298(
    name: "postListRolePolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListRolePolicies",
    validator: validate_PostListRolePolicies_21629299, base: "/",
    makeUrl: url_PostListRolePolicies_21629300,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRolePolicies_21629280 = ref object of OpenApiRestCall_21625435
proc url_GetListRolePolicies_21629282(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListRolePolicies_21629281(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629283 = query.getOrDefault("Action")
  valid_21629283 = validateParameter(valid_21629283, JString, required = true,
                                   default = newJString("ListRolePolicies"))
  if valid_21629283 != nil:
    section.add "Action", valid_21629283
  var valid_21629284 = query.getOrDefault("Marker")
  valid_21629284 = validateParameter(valid_21629284, JString, required = false,
                                   default = nil)
  if valid_21629284 != nil:
    section.add "Marker", valid_21629284
  var valid_21629285 = query.getOrDefault("MaxItems")
  valid_21629285 = validateParameter(valid_21629285, JInt, required = false,
                                   default = nil)
  if valid_21629285 != nil:
    section.add "MaxItems", valid_21629285
  var valid_21629286 = query.getOrDefault("RoleName")
  valid_21629286 = validateParameter(valid_21629286, JString, required = true,
                                   default = nil)
  if valid_21629286 != nil:
    section.add "RoleName", valid_21629286
  var valid_21629287 = query.getOrDefault("Version")
  valid_21629287 = validateParameter(valid_21629287, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629287 != nil:
    section.add "Version", valid_21629287
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629288 = header.getOrDefault("X-Amz-Date")
  valid_21629288 = validateParameter(valid_21629288, JString, required = false,
                                   default = nil)
  if valid_21629288 != nil:
    section.add "X-Amz-Date", valid_21629288
  var valid_21629289 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629289 = validateParameter(valid_21629289, JString, required = false,
                                   default = nil)
  if valid_21629289 != nil:
    section.add "X-Amz-Security-Token", valid_21629289
  var valid_21629290 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629290 = validateParameter(valid_21629290, JString, required = false,
                                   default = nil)
  if valid_21629290 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629290
  var valid_21629291 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629291 = validateParameter(valid_21629291, JString, required = false,
                                   default = nil)
  if valid_21629291 != nil:
    section.add "X-Amz-Algorithm", valid_21629291
  var valid_21629292 = header.getOrDefault("X-Amz-Signature")
  valid_21629292 = validateParameter(valid_21629292, JString, required = false,
                                   default = nil)
  if valid_21629292 != nil:
    section.add "X-Amz-Signature", valid_21629292
  var valid_21629293 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629293 = validateParameter(valid_21629293, JString, required = false,
                                   default = nil)
  if valid_21629293 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629293
  var valid_21629294 = header.getOrDefault("X-Amz-Credential")
  valid_21629294 = validateParameter(valid_21629294, JString, required = false,
                                   default = nil)
  if valid_21629294 != nil:
    section.add "X-Amz-Credential", valid_21629294
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629295: Call_GetListRolePolicies_21629280; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  let valid = call_21629295.validator(path, query, header, formData, body, _)
  let scheme = call_21629295.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629295.makeUrl(scheme.get, call_21629295.host, call_21629295.base,
                               call_21629295.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629295, uri, valid, _)

proc call*(call_21629296: Call_GetListRolePolicies_21629280; RoleName: string;
          Action: string = "ListRolePolicies"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListRolePolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21629297 = newJObject()
  add(query_21629297, "Action", newJString(Action))
  add(query_21629297, "Marker", newJString(Marker))
  add(query_21629297, "MaxItems", newJInt(MaxItems))
  add(query_21629297, "RoleName", newJString(RoleName))
  add(query_21629297, "Version", newJString(Version))
  result = call_21629296.call(nil, query_21629297, nil, nil, nil)

var getListRolePolicies* = Call_GetListRolePolicies_21629280(
    name: "getListRolePolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListRolePolicies",
    validator: validate_GetListRolePolicies_21629281, base: "/",
    makeUrl: url_GetListRolePolicies_21629282,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRoleTags_21629335 = ref object of OpenApiRestCall_21625435
proc url_PostListRoleTags_21629337(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListRoleTags_21629336(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629338 = query.getOrDefault("Action")
  valid_21629338 = validateParameter(valid_21629338, JString, required = true,
                                   default = newJString("ListRoleTags"))
  if valid_21629338 != nil:
    section.add "Action", valid_21629338
  var valid_21629339 = query.getOrDefault("Version")
  valid_21629339 = validateParameter(valid_21629339, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629339 != nil:
    section.add "Version", valid_21629339
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629340 = header.getOrDefault("X-Amz-Date")
  valid_21629340 = validateParameter(valid_21629340, JString, required = false,
                                   default = nil)
  if valid_21629340 != nil:
    section.add "X-Amz-Date", valid_21629340
  var valid_21629341 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629341 = validateParameter(valid_21629341, JString, required = false,
                                   default = nil)
  if valid_21629341 != nil:
    section.add "X-Amz-Security-Token", valid_21629341
  var valid_21629342 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629342 = validateParameter(valid_21629342, JString, required = false,
                                   default = nil)
  if valid_21629342 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629342
  var valid_21629343 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629343 = validateParameter(valid_21629343, JString, required = false,
                                   default = nil)
  if valid_21629343 != nil:
    section.add "X-Amz-Algorithm", valid_21629343
  var valid_21629344 = header.getOrDefault("X-Amz-Signature")
  valid_21629344 = validateParameter(valid_21629344, JString, required = false,
                                   default = nil)
  if valid_21629344 != nil:
    section.add "X-Amz-Signature", valid_21629344
  var valid_21629345 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629345 = validateParameter(valid_21629345, JString, required = false,
                                   default = nil)
  if valid_21629345 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629345
  var valid_21629346 = header.getOrDefault("X-Amz-Credential")
  valid_21629346 = validateParameter(valid_21629346, JString, required = false,
                                   default = nil)
  if valid_21629346 != nil:
    section.add "X-Amz-Credential", valid_21629346
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_21629347 = formData.getOrDefault("RoleName")
  valid_21629347 = validateParameter(valid_21629347, JString, required = true,
                                   default = nil)
  if valid_21629347 != nil:
    section.add "RoleName", valid_21629347
  var valid_21629348 = formData.getOrDefault("Marker")
  valid_21629348 = validateParameter(valid_21629348, JString, required = false,
                                   default = nil)
  if valid_21629348 != nil:
    section.add "Marker", valid_21629348
  var valid_21629349 = formData.getOrDefault("MaxItems")
  valid_21629349 = validateParameter(valid_21629349, JInt, required = false,
                                   default = nil)
  if valid_21629349 != nil:
    section.add "MaxItems", valid_21629349
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629350: Call_PostListRoleTags_21629335; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21629350.validator(path, query, header, formData, body, _)
  let scheme = call_21629350.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629350.makeUrl(scheme.get, call_21629350.host, call_21629350.base,
                               call_21629350.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629350, uri, valid, _)

proc call*(call_21629351: Call_PostListRoleTags_21629335; RoleName: string;
          Marker: string = ""; Action: string = "ListRoleTags"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRoleTags
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629352 = newJObject()
  var formData_21629353 = newJObject()
  add(formData_21629353, "RoleName", newJString(RoleName))
  add(formData_21629353, "Marker", newJString(Marker))
  add(query_21629352, "Action", newJString(Action))
  add(formData_21629353, "MaxItems", newJInt(MaxItems))
  add(query_21629352, "Version", newJString(Version))
  result = call_21629351.call(nil, query_21629352, nil, formData_21629353, nil)

var postListRoleTags* = Call_PostListRoleTags_21629335(name: "postListRoleTags",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListRoleTags", validator: validate_PostListRoleTags_21629336,
    base: "/", makeUrl: url_PostListRoleTags_21629337,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRoleTags_21629317 = ref object of OpenApiRestCall_21625435
proc url_GetListRoleTags_21629319(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListRoleTags_21629318(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629320 = query.getOrDefault("Action")
  valid_21629320 = validateParameter(valid_21629320, JString, required = true,
                                   default = newJString("ListRoleTags"))
  if valid_21629320 != nil:
    section.add "Action", valid_21629320
  var valid_21629321 = query.getOrDefault("Marker")
  valid_21629321 = validateParameter(valid_21629321, JString, required = false,
                                   default = nil)
  if valid_21629321 != nil:
    section.add "Marker", valid_21629321
  var valid_21629322 = query.getOrDefault("MaxItems")
  valid_21629322 = validateParameter(valid_21629322, JInt, required = false,
                                   default = nil)
  if valid_21629322 != nil:
    section.add "MaxItems", valid_21629322
  var valid_21629323 = query.getOrDefault("RoleName")
  valid_21629323 = validateParameter(valid_21629323, JString, required = true,
                                   default = nil)
  if valid_21629323 != nil:
    section.add "RoleName", valid_21629323
  var valid_21629324 = query.getOrDefault("Version")
  valid_21629324 = validateParameter(valid_21629324, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629324 != nil:
    section.add "Version", valid_21629324
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629325 = header.getOrDefault("X-Amz-Date")
  valid_21629325 = validateParameter(valid_21629325, JString, required = false,
                                   default = nil)
  if valid_21629325 != nil:
    section.add "X-Amz-Date", valid_21629325
  var valid_21629326 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629326 = validateParameter(valid_21629326, JString, required = false,
                                   default = nil)
  if valid_21629326 != nil:
    section.add "X-Amz-Security-Token", valid_21629326
  var valid_21629327 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629327 = validateParameter(valid_21629327, JString, required = false,
                                   default = nil)
  if valid_21629327 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629327
  var valid_21629328 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629328 = validateParameter(valid_21629328, JString, required = false,
                                   default = nil)
  if valid_21629328 != nil:
    section.add "X-Amz-Algorithm", valid_21629328
  var valid_21629329 = header.getOrDefault("X-Amz-Signature")
  valid_21629329 = validateParameter(valid_21629329, JString, required = false,
                                   default = nil)
  if valid_21629329 != nil:
    section.add "X-Amz-Signature", valid_21629329
  var valid_21629330 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629330 = validateParameter(valid_21629330, JString, required = false,
                                   default = nil)
  if valid_21629330 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629330
  var valid_21629331 = header.getOrDefault("X-Amz-Credential")
  valid_21629331 = validateParameter(valid_21629331, JString, required = false,
                                   default = nil)
  if valid_21629331 != nil:
    section.add "X-Amz-Credential", valid_21629331
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629332: Call_GetListRoleTags_21629317; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21629332.validator(path, query, header, formData, body, _)
  let scheme = call_21629332.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629332.makeUrl(scheme.get, call_21629332.host, call_21629332.base,
                               call_21629332.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629332, uri, valid, _)

proc call*(call_21629333: Call_GetListRoleTags_21629317; RoleName: string;
          Action: string = "ListRoleTags"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListRoleTags
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21629334 = newJObject()
  add(query_21629334, "Action", newJString(Action))
  add(query_21629334, "Marker", newJString(Marker))
  add(query_21629334, "MaxItems", newJInt(MaxItems))
  add(query_21629334, "RoleName", newJString(RoleName))
  add(query_21629334, "Version", newJString(Version))
  result = call_21629333.call(nil, query_21629334, nil, nil, nil)

var getListRoleTags* = Call_GetListRoleTags_21629317(name: "getListRoleTags",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListRoleTags", validator: validate_GetListRoleTags_21629318,
    base: "/", makeUrl: url_GetListRoleTags_21629319,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRoles_21629372 = ref object of OpenApiRestCall_21625435
proc url_PostListRoles_21629374(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListRoles_21629373(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629375 = query.getOrDefault("Action")
  valid_21629375 = validateParameter(valid_21629375, JString, required = true,
                                   default = newJString("ListRoles"))
  if valid_21629375 != nil:
    section.add "Action", valid_21629375
  var valid_21629376 = query.getOrDefault("Version")
  valid_21629376 = validateParameter(valid_21629376, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629376 != nil:
    section.add "Version", valid_21629376
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629377 = header.getOrDefault("X-Amz-Date")
  valid_21629377 = validateParameter(valid_21629377, JString, required = false,
                                   default = nil)
  if valid_21629377 != nil:
    section.add "X-Amz-Date", valid_21629377
  var valid_21629378 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629378 = validateParameter(valid_21629378, JString, required = false,
                                   default = nil)
  if valid_21629378 != nil:
    section.add "X-Amz-Security-Token", valid_21629378
  var valid_21629379 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629379 = validateParameter(valid_21629379, JString, required = false,
                                   default = nil)
  if valid_21629379 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629379
  var valid_21629380 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629380 = validateParameter(valid_21629380, JString, required = false,
                                   default = nil)
  if valid_21629380 != nil:
    section.add "X-Amz-Algorithm", valid_21629380
  var valid_21629381 = header.getOrDefault("X-Amz-Signature")
  valid_21629381 = validateParameter(valid_21629381, JString, required = false,
                                   default = nil)
  if valid_21629381 != nil:
    section.add "X-Amz-Signature", valid_21629381
  var valid_21629382 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629382 = validateParameter(valid_21629382, JString, required = false,
                                   default = nil)
  if valid_21629382 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629382
  var valid_21629383 = header.getOrDefault("X-Amz-Credential")
  valid_21629383 = validateParameter(valid_21629383, JString, required = false,
                                   default = nil)
  if valid_21629383 != nil:
    section.add "X-Amz-Credential", valid_21629383
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_21629384 = formData.getOrDefault("PathPrefix")
  valid_21629384 = validateParameter(valid_21629384, JString, required = false,
                                   default = nil)
  if valid_21629384 != nil:
    section.add "PathPrefix", valid_21629384
  var valid_21629385 = formData.getOrDefault("Marker")
  valid_21629385 = validateParameter(valid_21629385, JString, required = false,
                                   default = nil)
  if valid_21629385 != nil:
    section.add "Marker", valid_21629385
  var valid_21629386 = formData.getOrDefault("MaxItems")
  valid_21629386 = validateParameter(valid_21629386, JInt, required = false,
                                   default = nil)
  if valid_21629386 != nil:
    section.add "MaxItems", valid_21629386
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629387: Call_PostListRoles_21629372; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21629387.validator(path, query, header, formData, body, _)
  let scheme = call_21629387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629387.makeUrl(scheme.get, call_21629387.host, call_21629387.base,
                               call_21629387.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629387, uri, valid, _)

proc call*(call_21629388: Call_PostListRoles_21629372; PathPrefix: string = "";
          Marker: string = ""; Action: string = "ListRoles"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRoles
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629389 = newJObject()
  var formData_21629390 = newJObject()
  add(formData_21629390, "PathPrefix", newJString(PathPrefix))
  add(formData_21629390, "Marker", newJString(Marker))
  add(query_21629389, "Action", newJString(Action))
  add(formData_21629390, "MaxItems", newJInt(MaxItems))
  add(query_21629389, "Version", newJString(Version))
  result = call_21629388.call(nil, query_21629389, nil, formData_21629390, nil)

var postListRoles* = Call_PostListRoles_21629372(name: "postListRoles",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListRoles", validator: validate_PostListRoles_21629373,
    base: "/", makeUrl: url_PostListRoles_21629374,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRoles_21629354 = ref object of OpenApiRestCall_21625435
proc url_GetListRoles_21629356(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListRoles_21629355(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629357 = query.getOrDefault("PathPrefix")
  valid_21629357 = validateParameter(valid_21629357, JString, required = false,
                                   default = nil)
  if valid_21629357 != nil:
    section.add "PathPrefix", valid_21629357
  var valid_21629358 = query.getOrDefault("Action")
  valid_21629358 = validateParameter(valid_21629358, JString, required = true,
                                   default = newJString("ListRoles"))
  if valid_21629358 != nil:
    section.add "Action", valid_21629358
  var valid_21629359 = query.getOrDefault("Marker")
  valid_21629359 = validateParameter(valid_21629359, JString, required = false,
                                   default = nil)
  if valid_21629359 != nil:
    section.add "Marker", valid_21629359
  var valid_21629360 = query.getOrDefault("MaxItems")
  valid_21629360 = validateParameter(valid_21629360, JInt, required = false,
                                   default = nil)
  if valid_21629360 != nil:
    section.add "MaxItems", valid_21629360
  var valid_21629361 = query.getOrDefault("Version")
  valid_21629361 = validateParameter(valid_21629361, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629361 != nil:
    section.add "Version", valid_21629361
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629362 = header.getOrDefault("X-Amz-Date")
  valid_21629362 = validateParameter(valid_21629362, JString, required = false,
                                   default = nil)
  if valid_21629362 != nil:
    section.add "X-Amz-Date", valid_21629362
  var valid_21629363 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629363 = validateParameter(valid_21629363, JString, required = false,
                                   default = nil)
  if valid_21629363 != nil:
    section.add "X-Amz-Security-Token", valid_21629363
  var valid_21629364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629364 = validateParameter(valid_21629364, JString, required = false,
                                   default = nil)
  if valid_21629364 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629364
  var valid_21629365 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629365 = validateParameter(valid_21629365, JString, required = false,
                                   default = nil)
  if valid_21629365 != nil:
    section.add "X-Amz-Algorithm", valid_21629365
  var valid_21629366 = header.getOrDefault("X-Amz-Signature")
  valid_21629366 = validateParameter(valid_21629366, JString, required = false,
                                   default = nil)
  if valid_21629366 != nil:
    section.add "X-Amz-Signature", valid_21629366
  var valid_21629367 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629367 = validateParameter(valid_21629367, JString, required = false,
                                   default = nil)
  if valid_21629367 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629367
  var valid_21629368 = header.getOrDefault("X-Amz-Credential")
  valid_21629368 = validateParameter(valid_21629368, JString, required = false,
                                   default = nil)
  if valid_21629368 != nil:
    section.add "X-Amz-Credential", valid_21629368
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629369: Call_GetListRoles_21629354; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21629369.validator(path, query, header, formData, body, _)
  let scheme = call_21629369.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629369.makeUrl(scheme.get, call_21629369.host, call_21629369.base,
                               call_21629369.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629369, uri, valid, _)

proc call*(call_21629370: Call_GetListRoles_21629354; PathPrefix: string = "";
          Action: string = "ListRoles"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListRoles
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629371 = newJObject()
  add(query_21629371, "PathPrefix", newJString(PathPrefix))
  add(query_21629371, "Action", newJString(Action))
  add(query_21629371, "Marker", newJString(Marker))
  add(query_21629371, "MaxItems", newJInt(MaxItems))
  add(query_21629371, "Version", newJString(Version))
  result = call_21629370.call(nil, query_21629371, nil, nil, nil)

var getListRoles* = Call_GetListRoles_21629354(name: "getListRoles",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListRoles", validator: validate_GetListRoles_21629355,
    base: "/", makeUrl: url_GetListRoles_21629356,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSAMLProviders_21629406 = ref object of OpenApiRestCall_21625435
proc url_PostListSAMLProviders_21629408(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListSAMLProviders_21629407(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629409 = query.getOrDefault("Action")
  valid_21629409 = validateParameter(valid_21629409, JString, required = true,
                                   default = newJString("ListSAMLProviders"))
  if valid_21629409 != nil:
    section.add "Action", valid_21629409
  var valid_21629410 = query.getOrDefault("Version")
  valid_21629410 = validateParameter(valid_21629410, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629410 != nil:
    section.add "Version", valid_21629410
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629411 = header.getOrDefault("X-Amz-Date")
  valid_21629411 = validateParameter(valid_21629411, JString, required = false,
                                   default = nil)
  if valid_21629411 != nil:
    section.add "X-Amz-Date", valid_21629411
  var valid_21629412 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629412 = validateParameter(valid_21629412, JString, required = false,
                                   default = nil)
  if valid_21629412 != nil:
    section.add "X-Amz-Security-Token", valid_21629412
  var valid_21629413 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629413 = validateParameter(valid_21629413, JString, required = false,
                                   default = nil)
  if valid_21629413 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629413
  var valid_21629414 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629414 = validateParameter(valid_21629414, JString, required = false,
                                   default = nil)
  if valid_21629414 != nil:
    section.add "X-Amz-Algorithm", valid_21629414
  var valid_21629415 = header.getOrDefault("X-Amz-Signature")
  valid_21629415 = validateParameter(valid_21629415, JString, required = false,
                                   default = nil)
  if valid_21629415 != nil:
    section.add "X-Amz-Signature", valid_21629415
  var valid_21629416 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629416 = validateParameter(valid_21629416, JString, required = false,
                                   default = nil)
  if valid_21629416 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629416
  var valid_21629417 = header.getOrDefault("X-Amz-Credential")
  valid_21629417 = validateParameter(valid_21629417, JString, required = false,
                                   default = nil)
  if valid_21629417 != nil:
    section.add "X-Amz-Credential", valid_21629417
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629418: Call_PostListSAMLProviders_21629406;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_21629418.validator(path, query, header, formData, body, _)
  let scheme = call_21629418.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629418.makeUrl(scheme.get, call_21629418.host, call_21629418.base,
                               call_21629418.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629418, uri, valid, _)

proc call*(call_21629419: Call_PostListSAMLProviders_21629406;
          Action: string = "ListSAMLProviders"; Version: string = "2010-05-08"): Recallable =
  ## postListSAMLProviders
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21629420 = newJObject()
  add(query_21629420, "Action", newJString(Action))
  add(query_21629420, "Version", newJString(Version))
  result = call_21629419.call(nil, query_21629420, nil, nil, nil)

var postListSAMLProviders* = Call_PostListSAMLProviders_21629406(
    name: "postListSAMLProviders", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSAMLProviders",
    validator: validate_PostListSAMLProviders_21629407, base: "/",
    makeUrl: url_PostListSAMLProviders_21629408,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSAMLProviders_21629391 = ref object of OpenApiRestCall_21625435
proc url_GetListSAMLProviders_21629393(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListSAMLProviders_21629392(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629394 = query.getOrDefault("Action")
  valid_21629394 = validateParameter(valid_21629394, JString, required = true,
                                   default = newJString("ListSAMLProviders"))
  if valid_21629394 != nil:
    section.add "Action", valid_21629394
  var valid_21629395 = query.getOrDefault("Version")
  valid_21629395 = validateParameter(valid_21629395, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629395 != nil:
    section.add "Version", valid_21629395
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629396 = header.getOrDefault("X-Amz-Date")
  valid_21629396 = validateParameter(valid_21629396, JString, required = false,
                                   default = nil)
  if valid_21629396 != nil:
    section.add "X-Amz-Date", valid_21629396
  var valid_21629397 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629397 = validateParameter(valid_21629397, JString, required = false,
                                   default = nil)
  if valid_21629397 != nil:
    section.add "X-Amz-Security-Token", valid_21629397
  var valid_21629398 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629398 = validateParameter(valid_21629398, JString, required = false,
                                   default = nil)
  if valid_21629398 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629398
  var valid_21629399 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629399 = validateParameter(valid_21629399, JString, required = false,
                                   default = nil)
  if valid_21629399 != nil:
    section.add "X-Amz-Algorithm", valid_21629399
  var valid_21629400 = header.getOrDefault("X-Amz-Signature")
  valid_21629400 = validateParameter(valid_21629400, JString, required = false,
                                   default = nil)
  if valid_21629400 != nil:
    section.add "X-Amz-Signature", valid_21629400
  var valid_21629401 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629401 = validateParameter(valid_21629401, JString, required = false,
                                   default = nil)
  if valid_21629401 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629401
  var valid_21629402 = header.getOrDefault("X-Amz-Credential")
  valid_21629402 = validateParameter(valid_21629402, JString, required = false,
                                   default = nil)
  if valid_21629402 != nil:
    section.add "X-Amz-Credential", valid_21629402
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629403: Call_GetListSAMLProviders_21629391; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_21629403.validator(path, query, header, formData, body, _)
  let scheme = call_21629403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629403.makeUrl(scheme.get, call_21629403.host, call_21629403.base,
                               call_21629403.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629403, uri, valid, _)

proc call*(call_21629404: Call_GetListSAMLProviders_21629391;
          Action: string = "ListSAMLProviders"; Version: string = "2010-05-08"): Recallable =
  ## getListSAMLProviders
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21629405 = newJObject()
  add(query_21629405, "Action", newJString(Action))
  add(query_21629405, "Version", newJString(Version))
  result = call_21629404.call(nil, query_21629405, nil, nil, nil)

var getListSAMLProviders* = Call_GetListSAMLProviders_21629391(
    name: "getListSAMLProviders", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSAMLProviders",
    validator: validate_GetListSAMLProviders_21629392, base: "/",
    makeUrl: url_GetListSAMLProviders_21629393,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSSHPublicKeys_21629439 = ref object of OpenApiRestCall_21625435
proc url_PostListSSHPublicKeys_21629441(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListSSHPublicKeys_21629440(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629442 = query.getOrDefault("Action")
  valid_21629442 = validateParameter(valid_21629442, JString, required = true,
                                   default = newJString("ListSSHPublicKeys"))
  if valid_21629442 != nil:
    section.add "Action", valid_21629442
  var valid_21629443 = query.getOrDefault("Version")
  valid_21629443 = validateParameter(valid_21629443, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629443 != nil:
    section.add "Version", valid_21629443
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629444 = header.getOrDefault("X-Amz-Date")
  valid_21629444 = validateParameter(valid_21629444, JString, required = false,
                                   default = nil)
  if valid_21629444 != nil:
    section.add "X-Amz-Date", valid_21629444
  var valid_21629445 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629445 = validateParameter(valid_21629445, JString, required = false,
                                   default = nil)
  if valid_21629445 != nil:
    section.add "X-Amz-Security-Token", valid_21629445
  var valid_21629446 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629446 = validateParameter(valid_21629446, JString, required = false,
                                   default = nil)
  if valid_21629446 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629446
  var valid_21629447 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629447 = validateParameter(valid_21629447, JString, required = false,
                                   default = nil)
  if valid_21629447 != nil:
    section.add "X-Amz-Algorithm", valid_21629447
  var valid_21629448 = header.getOrDefault("X-Amz-Signature")
  valid_21629448 = validateParameter(valid_21629448, JString, required = false,
                                   default = nil)
  if valid_21629448 != nil:
    section.add "X-Amz-Signature", valid_21629448
  var valid_21629449 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629449 = validateParameter(valid_21629449, JString, required = false,
                                   default = nil)
  if valid_21629449 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629449
  var valid_21629450 = header.getOrDefault("X-Amz-Credential")
  valid_21629450 = validateParameter(valid_21629450, JString, required = false,
                                   default = nil)
  if valid_21629450 != nil:
    section.add "X-Amz-Credential", valid_21629450
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_21629451 = formData.getOrDefault("UserName")
  valid_21629451 = validateParameter(valid_21629451, JString, required = false,
                                   default = nil)
  if valid_21629451 != nil:
    section.add "UserName", valid_21629451
  var valid_21629452 = formData.getOrDefault("Marker")
  valid_21629452 = validateParameter(valid_21629452, JString, required = false,
                                   default = nil)
  if valid_21629452 != nil:
    section.add "Marker", valid_21629452
  var valid_21629453 = formData.getOrDefault("MaxItems")
  valid_21629453 = validateParameter(valid_21629453, JInt, required = false,
                                   default = nil)
  if valid_21629453 != nil:
    section.add "MaxItems", valid_21629453
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629454: Call_PostListSSHPublicKeys_21629439;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21629454.validator(path, query, header, formData, body, _)
  let scheme = call_21629454.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629454.makeUrl(scheme.get, call_21629454.host, call_21629454.base,
                               call_21629454.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629454, uri, valid, _)

proc call*(call_21629455: Call_PostListSSHPublicKeys_21629439;
          UserName: string = ""; Marker: string = "";
          Action: string = "ListSSHPublicKeys"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListSSHPublicKeys
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629456 = newJObject()
  var formData_21629457 = newJObject()
  add(formData_21629457, "UserName", newJString(UserName))
  add(formData_21629457, "Marker", newJString(Marker))
  add(query_21629456, "Action", newJString(Action))
  add(formData_21629457, "MaxItems", newJInt(MaxItems))
  add(query_21629456, "Version", newJString(Version))
  result = call_21629455.call(nil, query_21629456, nil, formData_21629457, nil)

var postListSSHPublicKeys* = Call_PostListSSHPublicKeys_21629439(
    name: "postListSSHPublicKeys", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSSHPublicKeys",
    validator: validate_PostListSSHPublicKeys_21629440, base: "/",
    makeUrl: url_PostListSSHPublicKeys_21629441,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSSHPublicKeys_21629421 = ref object of OpenApiRestCall_21625435
proc url_GetListSSHPublicKeys_21629423(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListSSHPublicKeys_21629422(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629424 = query.getOrDefault("UserName")
  valid_21629424 = validateParameter(valid_21629424, JString, required = false,
                                   default = nil)
  if valid_21629424 != nil:
    section.add "UserName", valid_21629424
  var valid_21629425 = query.getOrDefault("Action")
  valid_21629425 = validateParameter(valid_21629425, JString, required = true,
                                   default = newJString("ListSSHPublicKeys"))
  if valid_21629425 != nil:
    section.add "Action", valid_21629425
  var valid_21629426 = query.getOrDefault("Marker")
  valid_21629426 = validateParameter(valid_21629426, JString, required = false,
                                   default = nil)
  if valid_21629426 != nil:
    section.add "Marker", valid_21629426
  var valid_21629427 = query.getOrDefault("MaxItems")
  valid_21629427 = validateParameter(valid_21629427, JInt, required = false,
                                   default = nil)
  if valid_21629427 != nil:
    section.add "MaxItems", valid_21629427
  var valid_21629428 = query.getOrDefault("Version")
  valid_21629428 = validateParameter(valid_21629428, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629428 != nil:
    section.add "Version", valid_21629428
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629429 = header.getOrDefault("X-Amz-Date")
  valid_21629429 = validateParameter(valid_21629429, JString, required = false,
                                   default = nil)
  if valid_21629429 != nil:
    section.add "X-Amz-Date", valid_21629429
  var valid_21629430 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629430 = validateParameter(valid_21629430, JString, required = false,
                                   default = nil)
  if valid_21629430 != nil:
    section.add "X-Amz-Security-Token", valid_21629430
  var valid_21629431 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629431 = validateParameter(valid_21629431, JString, required = false,
                                   default = nil)
  if valid_21629431 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629431
  var valid_21629432 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629432 = validateParameter(valid_21629432, JString, required = false,
                                   default = nil)
  if valid_21629432 != nil:
    section.add "X-Amz-Algorithm", valid_21629432
  var valid_21629433 = header.getOrDefault("X-Amz-Signature")
  valid_21629433 = validateParameter(valid_21629433, JString, required = false,
                                   default = nil)
  if valid_21629433 != nil:
    section.add "X-Amz-Signature", valid_21629433
  var valid_21629434 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629434 = validateParameter(valid_21629434, JString, required = false,
                                   default = nil)
  if valid_21629434 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629434
  var valid_21629435 = header.getOrDefault("X-Amz-Credential")
  valid_21629435 = validateParameter(valid_21629435, JString, required = false,
                                   default = nil)
  if valid_21629435 != nil:
    section.add "X-Amz-Credential", valid_21629435
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629436: Call_GetListSSHPublicKeys_21629421; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21629436.validator(path, query, header, formData, body, _)
  let scheme = call_21629436.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629436.makeUrl(scheme.get, call_21629436.host, call_21629436.base,
                               call_21629436.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629436, uri, valid, _)

proc call*(call_21629437: Call_GetListSSHPublicKeys_21629421;
          UserName: string = ""; Action: string = "ListSSHPublicKeys";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListSSHPublicKeys
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629438 = newJObject()
  add(query_21629438, "UserName", newJString(UserName))
  add(query_21629438, "Action", newJString(Action))
  add(query_21629438, "Marker", newJString(Marker))
  add(query_21629438, "MaxItems", newJInt(MaxItems))
  add(query_21629438, "Version", newJString(Version))
  result = call_21629437.call(nil, query_21629438, nil, nil, nil)

var getListSSHPublicKeys* = Call_GetListSSHPublicKeys_21629421(
    name: "getListSSHPublicKeys", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSSHPublicKeys",
    validator: validate_GetListSSHPublicKeys_21629422, base: "/",
    makeUrl: url_GetListSSHPublicKeys_21629423,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListServerCertificates_21629476 = ref object of OpenApiRestCall_21625435
proc url_PostListServerCertificates_21629478(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListServerCertificates_21629477(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629479 = query.getOrDefault("Action")
  valid_21629479 = validateParameter(valid_21629479, JString, required = true, default = newJString(
      "ListServerCertificates"))
  if valid_21629479 != nil:
    section.add "Action", valid_21629479
  var valid_21629480 = query.getOrDefault("Version")
  valid_21629480 = validateParameter(valid_21629480, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629480 != nil:
    section.add "Version", valid_21629480
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629481 = header.getOrDefault("X-Amz-Date")
  valid_21629481 = validateParameter(valid_21629481, JString, required = false,
                                   default = nil)
  if valid_21629481 != nil:
    section.add "X-Amz-Date", valid_21629481
  var valid_21629482 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629482 = validateParameter(valid_21629482, JString, required = false,
                                   default = nil)
  if valid_21629482 != nil:
    section.add "X-Amz-Security-Token", valid_21629482
  var valid_21629483 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629483 = validateParameter(valid_21629483, JString, required = false,
                                   default = nil)
  if valid_21629483 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629483
  var valid_21629484 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629484 = validateParameter(valid_21629484, JString, required = false,
                                   default = nil)
  if valid_21629484 != nil:
    section.add "X-Amz-Algorithm", valid_21629484
  var valid_21629485 = header.getOrDefault("X-Amz-Signature")
  valid_21629485 = validateParameter(valid_21629485, JString, required = false,
                                   default = nil)
  if valid_21629485 != nil:
    section.add "X-Amz-Signature", valid_21629485
  var valid_21629486 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629486 = validateParameter(valid_21629486, JString, required = false,
                                   default = nil)
  if valid_21629486 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629486
  var valid_21629487 = header.getOrDefault("X-Amz-Credential")
  valid_21629487 = validateParameter(valid_21629487, JString, required = false,
                                   default = nil)
  if valid_21629487 != nil:
    section.add "X-Amz-Credential", valid_21629487
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_21629488 = formData.getOrDefault("PathPrefix")
  valid_21629488 = validateParameter(valid_21629488, JString, required = false,
                                   default = nil)
  if valid_21629488 != nil:
    section.add "PathPrefix", valid_21629488
  var valid_21629489 = formData.getOrDefault("Marker")
  valid_21629489 = validateParameter(valid_21629489, JString, required = false,
                                   default = nil)
  if valid_21629489 != nil:
    section.add "Marker", valid_21629489
  var valid_21629490 = formData.getOrDefault("MaxItems")
  valid_21629490 = validateParameter(valid_21629490, JInt, required = false,
                                   default = nil)
  if valid_21629490 != nil:
    section.add "MaxItems", valid_21629490
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629491: Call_PostListServerCertificates_21629476;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_21629491.validator(path, query, header, formData, body, _)
  let scheme = call_21629491.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629491.makeUrl(scheme.get, call_21629491.host, call_21629491.base,
                               call_21629491.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629491, uri, valid, _)

proc call*(call_21629492: Call_PostListServerCertificates_21629476;
          PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListServerCertificates"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListServerCertificates
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629493 = newJObject()
  var formData_21629494 = newJObject()
  add(formData_21629494, "PathPrefix", newJString(PathPrefix))
  add(formData_21629494, "Marker", newJString(Marker))
  add(query_21629493, "Action", newJString(Action))
  add(formData_21629494, "MaxItems", newJInt(MaxItems))
  add(query_21629493, "Version", newJString(Version))
  result = call_21629492.call(nil, query_21629493, nil, formData_21629494, nil)

var postListServerCertificates* = Call_PostListServerCertificates_21629476(
    name: "postListServerCertificates", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListServerCertificates",
    validator: validate_PostListServerCertificates_21629477, base: "/",
    makeUrl: url_PostListServerCertificates_21629478,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListServerCertificates_21629458 = ref object of OpenApiRestCall_21625435
proc url_GetListServerCertificates_21629460(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListServerCertificates_21629459(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629461 = query.getOrDefault("PathPrefix")
  valid_21629461 = validateParameter(valid_21629461, JString, required = false,
                                   default = nil)
  if valid_21629461 != nil:
    section.add "PathPrefix", valid_21629461
  var valid_21629462 = query.getOrDefault("Action")
  valid_21629462 = validateParameter(valid_21629462, JString, required = true, default = newJString(
      "ListServerCertificates"))
  if valid_21629462 != nil:
    section.add "Action", valid_21629462
  var valid_21629463 = query.getOrDefault("Marker")
  valid_21629463 = validateParameter(valid_21629463, JString, required = false,
                                   default = nil)
  if valid_21629463 != nil:
    section.add "Marker", valid_21629463
  var valid_21629464 = query.getOrDefault("MaxItems")
  valid_21629464 = validateParameter(valid_21629464, JInt, required = false,
                                   default = nil)
  if valid_21629464 != nil:
    section.add "MaxItems", valid_21629464
  var valid_21629465 = query.getOrDefault("Version")
  valid_21629465 = validateParameter(valid_21629465, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629465 != nil:
    section.add "Version", valid_21629465
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629466 = header.getOrDefault("X-Amz-Date")
  valid_21629466 = validateParameter(valid_21629466, JString, required = false,
                                   default = nil)
  if valid_21629466 != nil:
    section.add "X-Amz-Date", valid_21629466
  var valid_21629467 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629467 = validateParameter(valid_21629467, JString, required = false,
                                   default = nil)
  if valid_21629467 != nil:
    section.add "X-Amz-Security-Token", valid_21629467
  var valid_21629468 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629468 = validateParameter(valid_21629468, JString, required = false,
                                   default = nil)
  if valid_21629468 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629468
  var valid_21629469 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629469 = validateParameter(valid_21629469, JString, required = false,
                                   default = nil)
  if valid_21629469 != nil:
    section.add "X-Amz-Algorithm", valid_21629469
  var valid_21629470 = header.getOrDefault("X-Amz-Signature")
  valid_21629470 = validateParameter(valid_21629470, JString, required = false,
                                   default = nil)
  if valid_21629470 != nil:
    section.add "X-Amz-Signature", valid_21629470
  var valid_21629471 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629471 = validateParameter(valid_21629471, JString, required = false,
                                   default = nil)
  if valid_21629471 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629471
  var valid_21629472 = header.getOrDefault("X-Amz-Credential")
  valid_21629472 = validateParameter(valid_21629472, JString, required = false,
                                   default = nil)
  if valid_21629472 != nil:
    section.add "X-Amz-Credential", valid_21629472
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629473: Call_GetListServerCertificates_21629458;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_21629473.validator(path, query, header, formData, body, _)
  let scheme = call_21629473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629473.makeUrl(scheme.get, call_21629473.host, call_21629473.base,
                               call_21629473.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629473, uri, valid, _)

proc call*(call_21629474: Call_GetListServerCertificates_21629458;
          PathPrefix: string = ""; Action: string = "ListServerCertificates";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListServerCertificates
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629475 = newJObject()
  add(query_21629475, "PathPrefix", newJString(PathPrefix))
  add(query_21629475, "Action", newJString(Action))
  add(query_21629475, "Marker", newJString(Marker))
  add(query_21629475, "MaxItems", newJInt(MaxItems))
  add(query_21629475, "Version", newJString(Version))
  result = call_21629474.call(nil, query_21629475, nil, nil, nil)

var getListServerCertificates* = Call_GetListServerCertificates_21629458(
    name: "getListServerCertificates", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListServerCertificates",
    validator: validate_GetListServerCertificates_21629459, base: "/",
    makeUrl: url_GetListServerCertificates_21629460,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListServiceSpecificCredentials_21629512 = ref object of OpenApiRestCall_21625435
proc url_PostListServiceSpecificCredentials_21629514(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListServiceSpecificCredentials_21629513(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629515 = query.getOrDefault("Action")
  valid_21629515 = validateParameter(valid_21629515, JString, required = true, default = newJString(
      "ListServiceSpecificCredentials"))
  if valid_21629515 != nil:
    section.add "Action", valid_21629515
  var valid_21629516 = query.getOrDefault("Version")
  valid_21629516 = validateParameter(valid_21629516, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629516 != nil:
    section.add "Version", valid_21629516
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629517 = header.getOrDefault("X-Amz-Date")
  valid_21629517 = validateParameter(valid_21629517, JString, required = false,
                                   default = nil)
  if valid_21629517 != nil:
    section.add "X-Amz-Date", valid_21629517
  var valid_21629518 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629518 = validateParameter(valid_21629518, JString, required = false,
                                   default = nil)
  if valid_21629518 != nil:
    section.add "X-Amz-Security-Token", valid_21629518
  var valid_21629519 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629519 = validateParameter(valid_21629519, JString, required = false,
                                   default = nil)
  if valid_21629519 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629519
  var valid_21629520 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629520 = validateParameter(valid_21629520, JString, required = false,
                                   default = nil)
  if valid_21629520 != nil:
    section.add "X-Amz-Algorithm", valid_21629520
  var valid_21629521 = header.getOrDefault("X-Amz-Signature")
  valid_21629521 = validateParameter(valid_21629521, JString, required = false,
                                   default = nil)
  if valid_21629521 != nil:
    section.add "X-Amz-Signature", valid_21629521
  var valid_21629522 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629522 = validateParameter(valid_21629522, JString, required = false,
                                   default = nil)
  if valid_21629522 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629522
  var valid_21629523 = header.getOrDefault("X-Amz-Credential")
  valid_21629523 = validateParameter(valid_21629523, JString, required = false,
                                   default = nil)
  if valid_21629523 != nil:
    section.add "X-Amz-Credential", valid_21629523
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: JString
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  section = newJObject()
  var valid_21629524 = formData.getOrDefault("UserName")
  valid_21629524 = validateParameter(valid_21629524, JString, required = false,
                                   default = nil)
  if valid_21629524 != nil:
    section.add "UserName", valid_21629524
  var valid_21629525 = formData.getOrDefault("ServiceName")
  valid_21629525 = validateParameter(valid_21629525, JString, required = false,
                                   default = nil)
  if valid_21629525 != nil:
    section.add "ServiceName", valid_21629525
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629526: Call_PostListServiceSpecificCredentials_21629512;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  let valid = call_21629526.validator(path, query, header, formData, body, _)
  let scheme = call_21629526.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629526.makeUrl(scheme.get, call_21629526.host, call_21629526.base,
                               call_21629526.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629526, uri, valid, _)

proc call*(call_21629527: Call_PostListServiceSpecificCredentials_21629512;
          UserName: string = ""; Action: string = "ListServiceSpecificCredentials";
          Version: string = "2010-05-08"; ServiceName: string = ""): Recallable =
  ## postListServiceSpecificCredentials
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ##   UserName: string
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ServiceName: string
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  var query_21629528 = newJObject()
  var formData_21629529 = newJObject()
  add(formData_21629529, "UserName", newJString(UserName))
  add(query_21629528, "Action", newJString(Action))
  add(query_21629528, "Version", newJString(Version))
  add(formData_21629529, "ServiceName", newJString(ServiceName))
  result = call_21629527.call(nil, query_21629528, nil, formData_21629529, nil)

var postListServiceSpecificCredentials* = Call_PostListServiceSpecificCredentials_21629512(
    name: "postListServiceSpecificCredentials", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListServiceSpecificCredentials",
    validator: validate_PostListServiceSpecificCredentials_21629513, base: "/",
    makeUrl: url_PostListServiceSpecificCredentials_21629514,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListServiceSpecificCredentials_21629495 = ref object of OpenApiRestCall_21625435
proc url_GetListServiceSpecificCredentials_21629497(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListServiceSpecificCredentials_21629496(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceName: JString
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   UserName: JString
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629498 = query.getOrDefault("ServiceName")
  valid_21629498 = validateParameter(valid_21629498, JString, required = false,
                                   default = nil)
  if valid_21629498 != nil:
    section.add "ServiceName", valid_21629498
  var valid_21629499 = query.getOrDefault("UserName")
  valid_21629499 = validateParameter(valid_21629499, JString, required = false,
                                   default = nil)
  if valid_21629499 != nil:
    section.add "UserName", valid_21629499
  var valid_21629500 = query.getOrDefault("Action")
  valid_21629500 = validateParameter(valid_21629500, JString, required = true, default = newJString(
      "ListServiceSpecificCredentials"))
  if valid_21629500 != nil:
    section.add "Action", valid_21629500
  var valid_21629501 = query.getOrDefault("Version")
  valid_21629501 = validateParameter(valid_21629501, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629501 != nil:
    section.add "Version", valid_21629501
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629502 = header.getOrDefault("X-Amz-Date")
  valid_21629502 = validateParameter(valid_21629502, JString, required = false,
                                   default = nil)
  if valid_21629502 != nil:
    section.add "X-Amz-Date", valid_21629502
  var valid_21629503 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629503 = validateParameter(valid_21629503, JString, required = false,
                                   default = nil)
  if valid_21629503 != nil:
    section.add "X-Amz-Security-Token", valid_21629503
  var valid_21629504 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629504 = validateParameter(valid_21629504, JString, required = false,
                                   default = nil)
  if valid_21629504 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629504
  var valid_21629505 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629505 = validateParameter(valid_21629505, JString, required = false,
                                   default = nil)
  if valid_21629505 != nil:
    section.add "X-Amz-Algorithm", valid_21629505
  var valid_21629506 = header.getOrDefault("X-Amz-Signature")
  valid_21629506 = validateParameter(valid_21629506, JString, required = false,
                                   default = nil)
  if valid_21629506 != nil:
    section.add "X-Amz-Signature", valid_21629506
  var valid_21629507 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629507 = validateParameter(valid_21629507, JString, required = false,
                                   default = nil)
  if valid_21629507 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629507
  var valid_21629508 = header.getOrDefault("X-Amz-Credential")
  valid_21629508 = validateParameter(valid_21629508, JString, required = false,
                                   default = nil)
  if valid_21629508 != nil:
    section.add "X-Amz-Credential", valid_21629508
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629509: Call_GetListServiceSpecificCredentials_21629495;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  let valid = call_21629509.validator(path, query, header, formData, body, _)
  let scheme = call_21629509.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629509.makeUrl(scheme.get, call_21629509.host, call_21629509.base,
                               call_21629509.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629509, uri, valid, _)

proc call*(call_21629510: Call_GetListServiceSpecificCredentials_21629495;
          ServiceName: string = ""; UserName: string = "";
          Action: string = "ListServiceSpecificCredentials";
          Version: string = "2010-05-08"): Recallable =
  ## getListServiceSpecificCredentials
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ##   ServiceName: string
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   UserName: string
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21629511 = newJObject()
  add(query_21629511, "ServiceName", newJString(ServiceName))
  add(query_21629511, "UserName", newJString(UserName))
  add(query_21629511, "Action", newJString(Action))
  add(query_21629511, "Version", newJString(Version))
  result = call_21629510.call(nil, query_21629511, nil, nil, nil)

var getListServiceSpecificCredentials* = Call_GetListServiceSpecificCredentials_21629495(
    name: "getListServiceSpecificCredentials", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListServiceSpecificCredentials",
    validator: validate_GetListServiceSpecificCredentials_21629496, base: "/",
    makeUrl: url_GetListServiceSpecificCredentials_21629497,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSigningCertificates_21629548 = ref object of OpenApiRestCall_21625435
proc url_PostListSigningCertificates_21629550(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListSigningCertificates_21629549(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629551 = query.getOrDefault("Action")
  valid_21629551 = validateParameter(valid_21629551, JString, required = true, default = newJString(
      "ListSigningCertificates"))
  if valid_21629551 != nil:
    section.add "Action", valid_21629551
  var valid_21629552 = query.getOrDefault("Version")
  valid_21629552 = validateParameter(valid_21629552, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629552 != nil:
    section.add "Version", valid_21629552
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629553 = header.getOrDefault("X-Amz-Date")
  valid_21629553 = validateParameter(valid_21629553, JString, required = false,
                                   default = nil)
  if valid_21629553 != nil:
    section.add "X-Amz-Date", valid_21629553
  var valid_21629554 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629554 = validateParameter(valid_21629554, JString, required = false,
                                   default = nil)
  if valid_21629554 != nil:
    section.add "X-Amz-Security-Token", valid_21629554
  var valid_21629555 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629555 = validateParameter(valid_21629555, JString, required = false,
                                   default = nil)
  if valid_21629555 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629555
  var valid_21629556 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629556 = validateParameter(valid_21629556, JString, required = false,
                                   default = nil)
  if valid_21629556 != nil:
    section.add "X-Amz-Algorithm", valid_21629556
  var valid_21629557 = header.getOrDefault("X-Amz-Signature")
  valid_21629557 = validateParameter(valid_21629557, JString, required = false,
                                   default = nil)
  if valid_21629557 != nil:
    section.add "X-Amz-Signature", valid_21629557
  var valid_21629558 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629558 = validateParameter(valid_21629558, JString, required = false,
                                   default = nil)
  if valid_21629558 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629558
  var valid_21629559 = header.getOrDefault("X-Amz-Credential")
  valid_21629559 = validateParameter(valid_21629559, JString, required = false,
                                   default = nil)
  if valid_21629559 != nil:
    section.add "X-Amz-Credential", valid_21629559
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_21629560 = formData.getOrDefault("UserName")
  valid_21629560 = validateParameter(valid_21629560, JString, required = false,
                                   default = nil)
  if valid_21629560 != nil:
    section.add "UserName", valid_21629560
  var valid_21629561 = formData.getOrDefault("Marker")
  valid_21629561 = validateParameter(valid_21629561, JString, required = false,
                                   default = nil)
  if valid_21629561 != nil:
    section.add "Marker", valid_21629561
  var valid_21629562 = formData.getOrDefault("MaxItems")
  valid_21629562 = validateParameter(valid_21629562, JInt, required = false,
                                   default = nil)
  if valid_21629562 != nil:
    section.add "MaxItems", valid_21629562
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629563: Call_PostListSigningCertificates_21629548;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_21629563.validator(path, query, header, formData, body, _)
  let scheme = call_21629563.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629563.makeUrl(scheme.get, call_21629563.host, call_21629563.base,
                               call_21629563.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629563, uri, valid, _)

proc call*(call_21629564: Call_PostListSigningCertificates_21629548;
          UserName: string = ""; Marker: string = "";
          Action: string = "ListSigningCertificates"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListSigningCertificates
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629565 = newJObject()
  var formData_21629566 = newJObject()
  add(formData_21629566, "UserName", newJString(UserName))
  add(formData_21629566, "Marker", newJString(Marker))
  add(query_21629565, "Action", newJString(Action))
  add(formData_21629566, "MaxItems", newJInt(MaxItems))
  add(query_21629565, "Version", newJString(Version))
  result = call_21629564.call(nil, query_21629565, nil, formData_21629566, nil)

var postListSigningCertificates* = Call_PostListSigningCertificates_21629548(
    name: "postListSigningCertificates", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSigningCertificates",
    validator: validate_PostListSigningCertificates_21629549, base: "/",
    makeUrl: url_PostListSigningCertificates_21629550,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSigningCertificates_21629530 = ref object of OpenApiRestCall_21625435
proc url_GetListSigningCertificates_21629532(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListSigningCertificates_21629531(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629533 = query.getOrDefault("UserName")
  valid_21629533 = validateParameter(valid_21629533, JString, required = false,
                                   default = nil)
  if valid_21629533 != nil:
    section.add "UserName", valid_21629533
  var valid_21629534 = query.getOrDefault("Action")
  valid_21629534 = validateParameter(valid_21629534, JString, required = true, default = newJString(
      "ListSigningCertificates"))
  if valid_21629534 != nil:
    section.add "Action", valid_21629534
  var valid_21629535 = query.getOrDefault("Marker")
  valid_21629535 = validateParameter(valid_21629535, JString, required = false,
                                   default = nil)
  if valid_21629535 != nil:
    section.add "Marker", valid_21629535
  var valid_21629536 = query.getOrDefault("MaxItems")
  valid_21629536 = validateParameter(valid_21629536, JInt, required = false,
                                   default = nil)
  if valid_21629536 != nil:
    section.add "MaxItems", valid_21629536
  var valid_21629537 = query.getOrDefault("Version")
  valid_21629537 = validateParameter(valid_21629537, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629537 != nil:
    section.add "Version", valid_21629537
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629538 = header.getOrDefault("X-Amz-Date")
  valid_21629538 = validateParameter(valid_21629538, JString, required = false,
                                   default = nil)
  if valid_21629538 != nil:
    section.add "X-Amz-Date", valid_21629538
  var valid_21629539 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629539 = validateParameter(valid_21629539, JString, required = false,
                                   default = nil)
  if valid_21629539 != nil:
    section.add "X-Amz-Security-Token", valid_21629539
  var valid_21629540 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629540 = validateParameter(valid_21629540, JString, required = false,
                                   default = nil)
  if valid_21629540 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629540
  var valid_21629541 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629541 = validateParameter(valid_21629541, JString, required = false,
                                   default = nil)
  if valid_21629541 != nil:
    section.add "X-Amz-Algorithm", valid_21629541
  var valid_21629542 = header.getOrDefault("X-Amz-Signature")
  valid_21629542 = validateParameter(valid_21629542, JString, required = false,
                                   default = nil)
  if valid_21629542 != nil:
    section.add "X-Amz-Signature", valid_21629542
  var valid_21629543 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629543 = validateParameter(valid_21629543, JString, required = false,
                                   default = nil)
  if valid_21629543 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629543
  var valid_21629544 = header.getOrDefault("X-Amz-Credential")
  valid_21629544 = validateParameter(valid_21629544, JString, required = false,
                                   default = nil)
  if valid_21629544 != nil:
    section.add "X-Amz-Credential", valid_21629544
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629545: Call_GetListSigningCertificates_21629530;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_21629545.validator(path, query, header, formData, body, _)
  let scheme = call_21629545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629545.makeUrl(scheme.get, call_21629545.host, call_21629545.base,
                               call_21629545.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629545, uri, valid, _)

proc call*(call_21629546: Call_GetListSigningCertificates_21629530;
          UserName: string = ""; Action: string = "ListSigningCertificates";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListSigningCertificates
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629547 = newJObject()
  add(query_21629547, "UserName", newJString(UserName))
  add(query_21629547, "Action", newJString(Action))
  add(query_21629547, "Marker", newJString(Marker))
  add(query_21629547, "MaxItems", newJInt(MaxItems))
  add(query_21629547, "Version", newJString(Version))
  result = call_21629546.call(nil, query_21629547, nil, nil, nil)

var getListSigningCertificates* = Call_GetListSigningCertificates_21629530(
    name: "getListSigningCertificates", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSigningCertificates",
    validator: validate_GetListSigningCertificates_21629531, base: "/",
    makeUrl: url_GetListSigningCertificates_21629532,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUserPolicies_21629585 = ref object of OpenApiRestCall_21625435
proc url_PostListUserPolicies_21629587(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListUserPolicies_21629586(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629588 = query.getOrDefault("Action")
  valid_21629588 = validateParameter(valid_21629588, JString, required = true,
                                   default = newJString("ListUserPolicies"))
  if valid_21629588 != nil:
    section.add "Action", valid_21629588
  var valid_21629589 = query.getOrDefault("Version")
  valid_21629589 = validateParameter(valid_21629589, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629589 != nil:
    section.add "Version", valid_21629589
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629590 = header.getOrDefault("X-Amz-Date")
  valid_21629590 = validateParameter(valid_21629590, JString, required = false,
                                   default = nil)
  if valid_21629590 != nil:
    section.add "X-Amz-Date", valid_21629590
  var valid_21629591 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629591 = validateParameter(valid_21629591, JString, required = false,
                                   default = nil)
  if valid_21629591 != nil:
    section.add "X-Amz-Security-Token", valid_21629591
  var valid_21629592 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629592 = validateParameter(valid_21629592, JString, required = false,
                                   default = nil)
  if valid_21629592 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629592
  var valid_21629593 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629593 = validateParameter(valid_21629593, JString, required = false,
                                   default = nil)
  if valid_21629593 != nil:
    section.add "X-Amz-Algorithm", valid_21629593
  var valid_21629594 = header.getOrDefault("X-Amz-Signature")
  valid_21629594 = validateParameter(valid_21629594, JString, required = false,
                                   default = nil)
  if valid_21629594 != nil:
    section.add "X-Amz-Signature", valid_21629594
  var valid_21629595 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629595 = validateParameter(valid_21629595, JString, required = false,
                                   default = nil)
  if valid_21629595 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629595
  var valid_21629596 = header.getOrDefault("X-Amz-Credential")
  valid_21629596 = validateParameter(valid_21629596, JString, required = false,
                                   default = nil)
  if valid_21629596 != nil:
    section.add "X-Amz-Credential", valid_21629596
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21629597 = formData.getOrDefault("UserName")
  valid_21629597 = validateParameter(valid_21629597, JString, required = true,
                                   default = nil)
  if valid_21629597 != nil:
    section.add "UserName", valid_21629597
  var valid_21629598 = formData.getOrDefault("Marker")
  valid_21629598 = validateParameter(valid_21629598, JString, required = false,
                                   default = nil)
  if valid_21629598 != nil:
    section.add "Marker", valid_21629598
  var valid_21629599 = formData.getOrDefault("MaxItems")
  valid_21629599 = validateParameter(valid_21629599, JInt, required = false,
                                   default = nil)
  if valid_21629599 != nil:
    section.add "MaxItems", valid_21629599
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629600: Call_PostListUserPolicies_21629585; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  let valid = call_21629600.validator(path, query, header, formData, body, _)
  let scheme = call_21629600.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629600.makeUrl(scheme.get, call_21629600.host, call_21629600.base,
                               call_21629600.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629600, uri, valid, _)

proc call*(call_21629601: Call_PostListUserPolicies_21629585; UserName: string;
          Marker: string = ""; Action: string = "ListUserPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUserPolicies
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629602 = newJObject()
  var formData_21629603 = newJObject()
  add(formData_21629603, "UserName", newJString(UserName))
  add(formData_21629603, "Marker", newJString(Marker))
  add(query_21629602, "Action", newJString(Action))
  add(formData_21629603, "MaxItems", newJInt(MaxItems))
  add(query_21629602, "Version", newJString(Version))
  result = call_21629601.call(nil, query_21629602, nil, formData_21629603, nil)

var postListUserPolicies* = Call_PostListUserPolicies_21629585(
    name: "postListUserPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListUserPolicies",
    validator: validate_PostListUserPolicies_21629586, base: "/",
    makeUrl: url_PostListUserPolicies_21629587,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUserPolicies_21629567 = ref object of OpenApiRestCall_21625435
proc url_GetListUserPolicies_21629569(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListUserPolicies_21629568(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_21629570 = query.getOrDefault("UserName")
  valid_21629570 = validateParameter(valid_21629570, JString, required = true,
                                   default = nil)
  if valid_21629570 != nil:
    section.add "UserName", valid_21629570
  var valid_21629571 = query.getOrDefault("Action")
  valid_21629571 = validateParameter(valid_21629571, JString, required = true,
                                   default = newJString("ListUserPolicies"))
  if valid_21629571 != nil:
    section.add "Action", valid_21629571
  var valid_21629572 = query.getOrDefault("Marker")
  valid_21629572 = validateParameter(valid_21629572, JString, required = false,
                                   default = nil)
  if valid_21629572 != nil:
    section.add "Marker", valid_21629572
  var valid_21629573 = query.getOrDefault("MaxItems")
  valid_21629573 = validateParameter(valid_21629573, JInt, required = false,
                                   default = nil)
  if valid_21629573 != nil:
    section.add "MaxItems", valid_21629573
  var valid_21629574 = query.getOrDefault("Version")
  valid_21629574 = validateParameter(valid_21629574, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629574 != nil:
    section.add "Version", valid_21629574
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629575 = header.getOrDefault("X-Amz-Date")
  valid_21629575 = validateParameter(valid_21629575, JString, required = false,
                                   default = nil)
  if valid_21629575 != nil:
    section.add "X-Amz-Date", valid_21629575
  var valid_21629576 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629576 = validateParameter(valid_21629576, JString, required = false,
                                   default = nil)
  if valid_21629576 != nil:
    section.add "X-Amz-Security-Token", valid_21629576
  var valid_21629577 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629577 = validateParameter(valid_21629577, JString, required = false,
                                   default = nil)
  if valid_21629577 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629577
  var valid_21629578 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629578 = validateParameter(valid_21629578, JString, required = false,
                                   default = nil)
  if valid_21629578 != nil:
    section.add "X-Amz-Algorithm", valid_21629578
  var valid_21629579 = header.getOrDefault("X-Amz-Signature")
  valid_21629579 = validateParameter(valid_21629579, JString, required = false,
                                   default = nil)
  if valid_21629579 != nil:
    section.add "X-Amz-Signature", valid_21629579
  var valid_21629580 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629580 = validateParameter(valid_21629580, JString, required = false,
                                   default = nil)
  if valid_21629580 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629580
  var valid_21629581 = header.getOrDefault("X-Amz-Credential")
  valid_21629581 = validateParameter(valid_21629581, JString, required = false,
                                   default = nil)
  if valid_21629581 != nil:
    section.add "X-Amz-Credential", valid_21629581
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629582: Call_GetListUserPolicies_21629567; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  let valid = call_21629582.validator(path, query, header, formData, body, _)
  let scheme = call_21629582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629582.makeUrl(scheme.get, call_21629582.host, call_21629582.base,
                               call_21629582.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629582, uri, valid, _)

proc call*(call_21629583: Call_GetListUserPolicies_21629567; UserName: string;
          Action: string = "ListUserPolicies"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListUserPolicies
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629584 = newJObject()
  add(query_21629584, "UserName", newJString(UserName))
  add(query_21629584, "Action", newJString(Action))
  add(query_21629584, "Marker", newJString(Marker))
  add(query_21629584, "MaxItems", newJInt(MaxItems))
  add(query_21629584, "Version", newJString(Version))
  result = call_21629583.call(nil, query_21629584, nil, nil, nil)

var getListUserPolicies* = Call_GetListUserPolicies_21629567(
    name: "getListUserPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListUserPolicies",
    validator: validate_GetListUserPolicies_21629568, base: "/",
    makeUrl: url_GetListUserPolicies_21629569,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUserTags_21629622 = ref object of OpenApiRestCall_21625435
proc url_PostListUserTags_21629624(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListUserTags_21629623(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629625 = query.getOrDefault("Action")
  valid_21629625 = validateParameter(valid_21629625, JString, required = true,
                                   default = newJString("ListUserTags"))
  if valid_21629625 != nil:
    section.add "Action", valid_21629625
  var valid_21629626 = query.getOrDefault("Version")
  valid_21629626 = validateParameter(valid_21629626, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629626 != nil:
    section.add "Version", valid_21629626
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629627 = header.getOrDefault("X-Amz-Date")
  valid_21629627 = validateParameter(valid_21629627, JString, required = false,
                                   default = nil)
  if valid_21629627 != nil:
    section.add "X-Amz-Date", valid_21629627
  var valid_21629628 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629628 = validateParameter(valid_21629628, JString, required = false,
                                   default = nil)
  if valid_21629628 != nil:
    section.add "X-Amz-Security-Token", valid_21629628
  var valid_21629629 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629629 = validateParameter(valid_21629629, JString, required = false,
                                   default = nil)
  if valid_21629629 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629629
  var valid_21629630 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629630 = validateParameter(valid_21629630, JString, required = false,
                                   default = nil)
  if valid_21629630 != nil:
    section.add "X-Amz-Algorithm", valid_21629630
  var valid_21629631 = header.getOrDefault("X-Amz-Signature")
  valid_21629631 = validateParameter(valid_21629631, JString, required = false,
                                   default = nil)
  if valid_21629631 != nil:
    section.add "X-Amz-Signature", valid_21629631
  var valid_21629632 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629632 = validateParameter(valid_21629632, JString, required = false,
                                   default = nil)
  if valid_21629632 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629632
  var valid_21629633 = header.getOrDefault("X-Amz-Credential")
  valid_21629633 = validateParameter(valid_21629633, JString, required = false,
                                   default = nil)
  if valid_21629633 != nil:
    section.add "X-Amz-Credential", valid_21629633
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21629634 = formData.getOrDefault("UserName")
  valid_21629634 = validateParameter(valid_21629634, JString, required = true,
                                   default = nil)
  if valid_21629634 != nil:
    section.add "UserName", valid_21629634
  var valid_21629635 = formData.getOrDefault("Marker")
  valid_21629635 = validateParameter(valid_21629635, JString, required = false,
                                   default = nil)
  if valid_21629635 != nil:
    section.add "Marker", valid_21629635
  var valid_21629636 = formData.getOrDefault("MaxItems")
  valid_21629636 = validateParameter(valid_21629636, JInt, required = false,
                                   default = nil)
  if valid_21629636 != nil:
    section.add "MaxItems", valid_21629636
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629637: Call_PostListUserTags_21629622; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21629637.validator(path, query, header, formData, body, _)
  let scheme = call_21629637.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629637.makeUrl(scheme.get, call_21629637.host, call_21629637.base,
                               call_21629637.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629637, uri, valid, _)

proc call*(call_21629638: Call_PostListUserTags_21629622; UserName: string;
          Marker: string = ""; Action: string = "ListUserTags"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUserTags
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629639 = newJObject()
  var formData_21629640 = newJObject()
  add(formData_21629640, "UserName", newJString(UserName))
  add(formData_21629640, "Marker", newJString(Marker))
  add(query_21629639, "Action", newJString(Action))
  add(formData_21629640, "MaxItems", newJInt(MaxItems))
  add(query_21629639, "Version", newJString(Version))
  result = call_21629638.call(nil, query_21629639, nil, formData_21629640, nil)

var postListUserTags* = Call_PostListUserTags_21629622(name: "postListUserTags",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListUserTags", validator: validate_PostListUserTags_21629623,
    base: "/", makeUrl: url_PostListUserTags_21629624,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUserTags_21629604 = ref object of OpenApiRestCall_21625435
proc url_GetListUserTags_21629606(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListUserTags_21629605(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_21629607 = query.getOrDefault("UserName")
  valid_21629607 = validateParameter(valid_21629607, JString, required = true,
                                   default = nil)
  if valid_21629607 != nil:
    section.add "UserName", valid_21629607
  var valid_21629608 = query.getOrDefault("Action")
  valid_21629608 = validateParameter(valid_21629608, JString, required = true,
                                   default = newJString("ListUserTags"))
  if valid_21629608 != nil:
    section.add "Action", valid_21629608
  var valid_21629609 = query.getOrDefault("Marker")
  valid_21629609 = validateParameter(valid_21629609, JString, required = false,
                                   default = nil)
  if valid_21629609 != nil:
    section.add "Marker", valid_21629609
  var valid_21629610 = query.getOrDefault("MaxItems")
  valid_21629610 = validateParameter(valid_21629610, JInt, required = false,
                                   default = nil)
  if valid_21629610 != nil:
    section.add "MaxItems", valid_21629610
  var valid_21629611 = query.getOrDefault("Version")
  valid_21629611 = validateParameter(valid_21629611, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629611 != nil:
    section.add "Version", valid_21629611
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629612 = header.getOrDefault("X-Amz-Date")
  valid_21629612 = validateParameter(valid_21629612, JString, required = false,
                                   default = nil)
  if valid_21629612 != nil:
    section.add "X-Amz-Date", valid_21629612
  var valid_21629613 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629613 = validateParameter(valid_21629613, JString, required = false,
                                   default = nil)
  if valid_21629613 != nil:
    section.add "X-Amz-Security-Token", valid_21629613
  var valid_21629614 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629614 = validateParameter(valid_21629614, JString, required = false,
                                   default = nil)
  if valid_21629614 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629614
  var valid_21629615 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629615 = validateParameter(valid_21629615, JString, required = false,
                                   default = nil)
  if valid_21629615 != nil:
    section.add "X-Amz-Algorithm", valid_21629615
  var valid_21629616 = header.getOrDefault("X-Amz-Signature")
  valid_21629616 = validateParameter(valid_21629616, JString, required = false,
                                   default = nil)
  if valid_21629616 != nil:
    section.add "X-Amz-Signature", valid_21629616
  var valid_21629617 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629617 = validateParameter(valid_21629617, JString, required = false,
                                   default = nil)
  if valid_21629617 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629617
  var valid_21629618 = header.getOrDefault("X-Amz-Credential")
  valid_21629618 = validateParameter(valid_21629618, JString, required = false,
                                   default = nil)
  if valid_21629618 != nil:
    section.add "X-Amz-Credential", valid_21629618
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629619: Call_GetListUserTags_21629604; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21629619.validator(path, query, header, formData, body, _)
  let scheme = call_21629619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629619.makeUrl(scheme.get, call_21629619.host, call_21629619.base,
                               call_21629619.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629619, uri, valid, _)

proc call*(call_21629620: Call_GetListUserTags_21629604; UserName: string;
          Action: string = "ListUserTags"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListUserTags
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629621 = newJObject()
  add(query_21629621, "UserName", newJString(UserName))
  add(query_21629621, "Action", newJString(Action))
  add(query_21629621, "Marker", newJString(Marker))
  add(query_21629621, "MaxItems", newJInt(MaxItems))
  add(query_21629621, "Version", newJString(Version))
  result = call_21629620.call(nil, query_21629621, nil, nil, nil)

var getListUserTags* = Call_GetListUserTags_21629604(name: "getListUserTags",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListUserTags", validator: validate_GetListUserTags_21629605,
    base: "/", makeUrl: url_GetListUserTags_21629606,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUsers_21629659 = ref object of OpenApiRestCall_21625435
proc url_PostListUsers_21629661(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListUsers_21629660(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629662 = query.getOrDefault("Action")
  valid_21629662 = validateParameter(valid_21629662, JString, required = true,
                                   default = newJString("ListUsers"))
  if valid_21629662 != nil:
    section.add "Action", valid_21629662
  var valid_21629663 = query.getOrDefault("Version")
  valid_21629663 = validateParameter(valid_21629663, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629663 != nil:
    section.add "Version", valid_21629663
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629664 = header.getOrDefault("X-Amz-Date")
  valid_21629664 = validateParameter(valid_21629664, JString, required = false,
                                   default = nil)
  if valid_21629664 != nil:
    section.add "X-Amz-Date", valid_21629664
  var valid_21629665 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629665 = validateParameter(valid_21629665, JString, required = false,
                                   default = nil)
  if valid_21629665 != nil:
    section.add "X-Amz-Security-Token", valid_21629665
  var valid_21629666 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629666 = validateParameter(valid_21629666, JString, required = false,
                                   default = nil)
  if valid_21629666 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629666
  var valid_21629667 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629667 = validateParameter(valid_21629667, JString, required = false,
                                   default = nil)
  if valid_21629667 != nil:
    section.add "X-Amz-Algorithm", valid_21629667
  var valid_21629668 = header.getOrDefault("X-Amz-Signature")
  valid_21629668 = validateParameter(valid_21629668, JString, required = false,
                                   default = nil)
  if valid_21629668 != nil:
    section.add "X-Amz-Signature", valid_21629668
  var valid_21629669 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629669 = validateParameter(valid_21629669, JString, required = false,
                                   default = nil)
  if valid_21629669 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629669
  var valid_21629670 = header.getOrDefault("X-Amz-Credential")
  valid_21629670 = validateParameter(valid_21629670, JString, required = false,
                                   default = nil)
  if valid_21629670 != nil:
    section.add "X-Amz-Credential", valid_21629670
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_21629671 = formData.getOrDefault("PathPrefix")
  valid_21629671 = validateParameter(valid_21629671, JString, required = false,
                                   default = nil)
  if valid_21629671 != nil:
    section.add "PathPrefix", valid_21629671
  var valid_21629672 = formData.getOrDefault("Marker")
  valid_21629672 = validateParameter(valid_21629672, JString, required = false,
                                   default = nil)
  if valid_21629672 != nil:
    section.add "Marker", valid_21629672
  var valid_21629673 = formData.getOrDefault("MaxItems")
  valid_21629673 = validateParameter(valid_21629673, JInt, required = false,
                                   default = nil)
  if valid_21629673 != nil:
    section.add "MaxItems", valid_21629673
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629674: Call_PostListUsers_21629659; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21629674.validator(path, query, header, formData, body, _)
  let scheme = call_21629674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629674.makeUrl(scheme.get, call_21629674.host, call_21629674.base,
                               call_21629674.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629674, uri, valid, _)

proc call*(call_21629675: Call_PostListUsers_21629659; PathPrefix: string = "";
          Marker: string = ""; Action: string = "ListUsers"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUsers
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629676 = newJObject()
  var formData_21629677 = newJObject()
  add(formData_21629677, "PathPrefix", newJString(PathPrefix))
  add(formData_21629677, "Marker", newJString(Marker))
  add(query_21629676, "Action", newJString(Action))
  add(formData_21629677, "MaxItems", newJInt(MaxItems))
  add(query_21629676, "Version", newJString(Version))
  result = call_21629675.call(nil, query_21629676, nil, formData_21629677, nil)

var postListUsers* = Call_PostListUsers_21629659(name: "postListUsers",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListUsers", validator: validate_PostListUsers_21629660,
    base: "/", makeUrl: url_PostListUsers_21629661,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUsers_21629641 = ref object of OpenApiRestCall_21625435
proc url_GetListUsers_21629643(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListUsers_21629642(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629644 = query.getOrDefault("PathPrefix")
  valid_21629644 = validateParameter(valid_21629644, JString, required = false,
                                   default = nil)
  if valid_21629644 != nil:
    section.add "PathPrefix", valid_21629644
  var valid_21629645 = query.getOrDefault("Action")
  valid_21629645 = validateParameter(valid_21629645, JString, required = true,
                                   default = newJString("ListUsers"))
  if valid_21629645 != nil:
    section.add "Action", valid_21629645
  var valid_21629646 = query.getOrDefault("Marker")
  valid_21629646 = validateParameter(valid_21629646, JString, required = false,
                                   default = nil)
  if valid_21629646 != nil:
    section.add "Marker", valid_21629646
  var valid_21629647 = query.getOrDefault("MaxItems")
  valid_21629647 = validateParameter(valid_21629647, JInt, required = false,
                                   default = nil)
  if valid_21629647 != nil:
    section.add "MaxItems", valid_21629647
  var valid_21629648 = query.getOrDefault("Version")
  valid_21629648 = validateParameter(valid_21629648, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629648 != nil:
    section.add "Version", valid_21629648
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629649 = header.getOrDefault("X-Amz-Date")
  valid_21629649 = validateParameter(valid_21629649, JString, required = false,
                                   default = nil)
  if valid_21629649 != nil:
    section.add "X-Amz-Date", valid_21629649
  var valid_21629650 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629650 = validateParameter(valid_21629650, JString, required = false,
                                   default = nil)
  if valid_21629650 != nil:
    section.add "X-Amz-Security-Token", valid_21629650
  var valid_21629651 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629651 = validateParameter(valid_21629651, JString, required = false,
                                   default = nil)
  if valid_21629651 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629651
  var valid_21629652 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629652 = validateParameter(valid_21629652, JString, required = false,
                                   default = nil)
  if valid_21629652 != nil:
    section.add "X-Amz-Algorithm", valid_21629652
  var valid_21629653 = header.getOrDefault("X-Amz-Signature")
  valid_21629653 = validateParameter(valid_21629653, JString, required = false,
                                   default = nil)
  if valid_21629653 != nil:
    section.add "X-Amz-Signature", valid_21629653
  var valid_21629654 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629654 = validateParameter(valid_21629654, JString, required = false,
                                   default = nil)
  if valid_21629654 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629654
  var valid_21629655 = header.getOrDefault("X-Amz-Credential")
  valid_21629655 = validateParameter(valid_21629655, JString, required = false,
                                   default = nil)
  if valid_21629655 != nil:
    section.add "X-Amz-Credential", valid_21629655
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629656: Call_GetListUsers_21629641; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21629656.validator(path, query, header, formData, body, _)
  let scheme = call_21629656.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629656.makeUrl(scheme.get, call_21629656.host, call_21629656.base,
                               call_21629656.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629656, uri, valid, _)

proc call*(call_21629657: Call_GetListUsers_21629641; PathPrefix: string = "";
          Action: string = "ListUsers"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListUsers
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629658 = newJObject()
  add(query_21629658, "PathPrefix", newJString(PathPrefix))
  add(query_21629658, "Action", newJString(Action))
  add(query_21629658, "Marker", newJString(Marker))
  add(query_21629658, "MaxItems", newJInt(MaxItems))
  add(query_21629658, "Version", newJString(Version))
  result = call_21629657.call(nil, query_21629658, nil, nil, nil)

var getListUsers* = Call_GetListUsers_21629641(name: "getListUsers",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListUsers", validator: validate_GetListUsers_21629642,
    base: "/", makeUrl: url_GetListUsers_21629643,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListVirtualMFADevices_21629696 = ref object of OpenApiRestCall_21625435
proc url_PostListVirtualMFADevices_21629698(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListVirtualMFADevices_21629697(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629699 = query.getOrDefault("Action")
  valid_21629699 = validateParameter(valid_21629699, JString, required = true, default = newJString(
      "ListVirtualMFADevices"))
  if valid_21629699 != nil:
    section.add "Action", valid_21629699
  var valid_21629700 = query.getOrDefault("Version")
  valid_21629700 = validateParameter(valid_21629700, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629700 != nil:
    section.add "Version", valid_21629700
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629701 = header.getOrDefault("X-Amz-Date")
  valid_21629701 = validateParameter(valid_21629701, JString, required = false,
                                   default = nil)
  if valid_21629701 != nil:
    section.add "X-Amz-Date", valid_21629701
  var valid_21629702 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629702 = validateParameter(valid_21629702, JString, required = false,
                                   default = nil)
  if valid_21629702 != nil:
    section.add "X-Amz-Security-Token", valid_21629702
  var valid_21629703 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629703 = validateParameter(valid_21629703, JString, required = false,
                                   default = nil)
  if valid_21629703 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629703
  var valid_21629704 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629704 = validateParameter(valid_21629704, JString, required = false,
                                   default = nil)
  if valid_21629704 != nil:
    section.add "X-Amz-Algorithm", valid_21629704
  var valid_21629705 = header.getOrDefault("X-Amz-Signature")
  valid_21629705 = validateParameter(valid_21629705, JString, required = false,
                                   default = nil)
  if valid_21629705 != nil:
    section.add "X-Amz-Signature", valid_21629705
  var valid_21629706 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629706 = validateParameter(valid_21629706, JString, required = false,
                                   default = nil)
  if valid_21629706 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629706
  var valid_21629707 = header.getOrDefault("X-Amz-Credential")
  valid_21629707 = validateParameter(valid_21629707, JString, required = false,
                                   default = nil)
  if valid_21629707 != nil:
    section.add "X-Amz-Credential", valid_21629707
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   AssignmentStatus: JString
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_21629708 = formData.getOrDefault("Marker")
  valid_21629708 = validateParameter(valid_21629708, JString, required = false,
                                   default = nil)
  if valid_21629708 != nil:
    section.add "Marker", valid_21629708
  var valid_21629709 = formData.getOrDefault("AssignmentStatus")
  valid_21629709 = validateParameter(valid_21629709, JString, required = false,
                                   default = newJString("Assigned"))
  if valid_21629709 != nil:
    section.add "AssignmentStatus", valid_21629709
  var valid_21629710 = formData.getOrDefault("MaxItems")
  valid_21629710 = validateParameter(valid_21629710, JInt, required = false,
                                   default = nil)
  if valid_21629710 != nil:
    section.add "MaxItems", valid_21629710
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629711: Call_PostListVirtualMFADevices_21629696;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21629711.validator(path, query, header, formData, body, _)
  let scheme = call_21629711.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629711.makeUrl(scheme.get, call_21629711.host, call_21629711.base,
                               call_21629711.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629711, uri, valid, _)

proc call*(call_21629712: Call_PostListVirtualMFADevices_21629696;
          Marker: string = ""; Action: string = "ListVirtualMFADevices";
          AssignmentStatus: string = "Assigned"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListVirtualMFADevices
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   AssignmentStatus: string
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21629713 = newJObject()
  var formData_21629714 = newJObject()
  add(formData_21629714, "Marker", newJString(Marker))
  add(query_21629713, "Action", newJString(Action))
  add(formData_21629714, "AssignmentStatus", newJString(AssignmentStatus))
  add(formData_21629714, "MaxItems", newJInt(MaxItems))
  add(query_21629713, "Version", newJString(Version))
  result = call_21629712.call(nil, query_21629713, nil, formData_21629714, nil)

var postListVirtualMFADevices* = Call_PostListVirtualMFADevices_21629696(
    name: "postListVirtualMFADevices", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListVirtualMFADevices",
    validator: validate_PostListVirtualMFADevices_21629697, base: "/",
    makeUrl: url_PostListVirtualMFADevices_21629698,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListVirtualMFADevices_21629678 = ref object of OpenApiRestCall_21625435
proc url_GetListVirtualMFADevices_21629680(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListVirtualMFADevices_21629679(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  ##   AssignmentStatus: JString
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  section = newJObject()
  var valid_21629681 = query.getOrDefault("Action")
  valid_21629681 = validateParameter(valid_21629681, JString, required = true, default = newJString(
      "ListVirtualMFADevices"))
  if valid_21629681 != nil:
    section.add "Action", valid_21629681
  var valid_21629682 = query.getOrDefault("Marker")
  valid_21629682 = validateParameter(valid_21629682, JString, required = false,
                                   default = nil)
  if valid_21629682 != nil:
    section.add "Marker", valid_21629682
  var valid_21629683 = query.getOrDefault("MaxItems")
  valid_21629683 = validateParameter(valid_21629683, JInt, required = false,
                                   default = nil)
  if valid_21629683 != nil:
    section.add "MaxItems", valid_21629683
  var valid_21629684 = query.getOrDefault("Version")
  valid_21629684 = validateParameter(valid_21629684, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629684 != nil:
    section.add "Version", valid_21629684
  var valid_21629685 = query.getOrDefault("AssignmentStatus")
  valid_21629685 = validateParameter(valid_21629685, JString, required = false,
                                   default = newJString("Assigned"))
  if valid_21629685 != nil:
    section.add "AssignmentStatus", valid_21629685
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629686 = header.getOrDefault("X-Amz-Date")
  valid_21629686 = validateParameter(valid_21629686, JString, required = false,
                                   default = nil)
  if valid_21629686 != nil:
    section.add "X-Amz-Date", valid_21629686
  var valid_21629687 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629687 = validateParameter(valid_21629687, JString, required = false,
                                   default = nil)
  if valid_21629687 != nil:
    section.add "X-Amz-Security-Token", valid_21629687
  var valid_21629688 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629688 = validateParameter(valid_21629688, JString, required = false,
                                   default = nil)
  if valid_21629688 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629688
  var valid_21629689 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629689 = validateParameter(valid_21629689, JString, required = false,
                                   default = nil)
  if valid_21629689 != nil:
    section.add "X-Amz-Algorithm", valid_21629689
  var valid_21629690 = header.getOrDefault("X-Amz-Signature")
  valid_21629690 = validateParameter(valid_21629690, JString, required = false,
                                   default = nil)
  if valid_21629690 != nil:
    section.add "X-Amz-Signature", valid_21629690
  var valid_21629691 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629691 = validateParameter(valid_21629691, JString, required = false,
                                   default = nil)
  if valid_21629691 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629691
  var valid_21629692 = header.getOrDefault("X-Amz-Credential")
  valid_21629692 = validateParameter(valid_21629692, JString, required = false,
                                   default = nil)
  if valid_21629692 != nil:
    section.add "X-Amz-Credential", valid_21629692
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629693: Call_GetListVirtualMFADevices_21629678;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_21629693.validator(path, query, header, formData, body, _)
  let scheme = call_21629693.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629693.makeUrl(scheme.get, call_21629693.host, call_21629693.base,
                               call_21629693.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629693, uri, valid, _)

proc call*(call_21629694: Call_GetListVirtualMFADevices_21629678;
          Action: string = "ListVirtualMFADevices"; Marker: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08";
          AssignmentStatus: string = "Assigned"): Recallable =
  ## getListVirtualMFADevices
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  ##   AssignmentStatus: string
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  var query_21629695 = newJObject()
  add(query_21629695, "Action", newJString(Action))
  add(query_21629695, "Marker", newJString(Marker))
  add(query_21629695, "MaxItems", newJInt(MaxItems))
  add(query_21629695, "Version", newJString(Version))
  add(query_21629695, "AssignmentStatus", newJString(AssignmentStatus))
  result = call_21629694.call(nil, query_21629695, nil, nil, nil)

var getListVirtualMFADevices* = Call_GetListVirtualMFADevices_21629678(
    name: "getListVirtualMFADevices", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListVirtualMFADevices",
    validator: validate_GetListVirtualMFADevices_21629679, base: "/",
    makeUrl: url_GetListVirtualMFADevices_21629680,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutGroupPolicy_21629733 = ref object of OpenApiRestCall_21625435
proc url_PostPutGroupPolicy_21629735(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutGroupPolicy_21629734(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629736 = query.getOrDefault("Action")
  valid_21629736 = validateParameter(valid_21629736, JString, required = true,
                                   default = newJString("PutGroupPolicy"))
  if valid_21629736 != nil:
    section.add "Action", valid_21629736
  var valid_21629737 = query.getOrDefault("Version")
  valid_21629737 = validateParameter(valid_21629737, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629737 != nil:
    section.add "Version", valid_21629737
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629738 = header.getOrDefault("X-Amz-Date")
  valid_21629738 = validateParameter(valid_21629738, JString, required = false,
                                   default = nil)
  if valid_21629738 != nil:
    section.add "X-Amz-Date", valid_21629738
  var valid_21629739 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629739 = validateParameter(valid_21629739, JString, required = false,
                                   default = nil)
  if valid_21629739 != nil:
    section.add "X-Amz-Security-Token", valid_21629739
  var valid_21629740 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629740 = validateParameter(valid_21629740, JString, required = false,
                                   default = nil)
  if valid_21629740 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629740
  var valid_21629741 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629741 = validateParameter(valid_21629741, JString, required = false,
                                   default = nil)
  if valid_21629741 != nil:
    section.add "X-Amz-Algorithm", valid_21629741
  var valid_21629742 = header.getOrDefault("X-Amz-Signature")
  valid_21629742 = validateParameter(valid_21629742, JString, required = false,
                                   default = nil)
  if valid_21629742 != nil:
    section.add "X-Amz-Signature", valid_21629742
  var valid_21629743 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629743 = validateParameter(valid_21629743, JString, required = false,
                                   default = nil)
  if valid_21629743 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629743
  var valid_21629744 = header.getOrDefault("X-Amz-Credential")
  valid_21629744 = validateParameter(valid_21629744, JString, required = false,
                                   default = nil)
  if valid_21629744 != nil:
    section.add "X-Amz-Credential", valid_21629744
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_21629745 = formData.getOrDefault("PolicyName")
  valid_21629745 = validateParameter(valid_21629745, JString, required = true,
                                   default = nil)
  if valid_21629745 != nil:
    section.add "PolicyName", valid_21629745
  var valid_21629746 = formData.getOrDefault("GroupName")
  valid_21629746 = validateParameter(valid_21629746, JString, required = true,
                                   default = nil)
  if valid_21629746 != nil:
    section.add "GroupName", valid_21629746
  var valid_21629747 = formData.getOrDefault("PolicyDocument")
  valid_21629747 = validateParameter(valid_21629747, JString, required = true,
                                   default = nil)
  if valid_21629747 != nil:
    section.add "PolicyDocument", valid_21629747
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629748: Call_PostPutGroupPolicy_21629733; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_21629748.validator(path, query, header, formData, body, _)
  let scheme = call_21629748.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629748.makeUrl(scheme.get, call_21629748.host, call_21629748.base,
                               call_21629748.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629748, uri, valid, _)

proc call*(call_21629749: Call_PostPutGroupPolicy_21629733; PolicyName: string;
          GroupName: string; PolicyDocument: string;
          Action: string = "PutGroupPolicy"; Version: string = "2010-05-08"): Recallable =
  ## postPutGroupPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21629750 = newJObject()
  var formData_21629751 = newJObject()
  add(formData_21629751, "PolicyName", newJString(PolicyName))
  add(formData_21629751, "GroupName", newJString(GroupName))
  add(formData_21629751, "PolicyDocument", newJString(PolicyDocument))
  add(query_21629750, "Action", newJString(Action))
  add(query_21629750, "Version", newJString(Version))
  result = call_21629749.call(nil, query_21629750, nil, formData_21629751, nil)

var postPutGroupPolicy* = Call_PostPutGroupPolicy_21629733(
    name: "postPutGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutGroupPolicy",
    validator: validate_PostPutGroupPolicy_21629734, base: "/",
    makeUrl: url_PostPutGroupPolicy_21629735, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutGroupPolicy_21629715 = ref object of OpenApiRestCall_21625435
proc url_GetPutGroupPolicy_21629717(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutGroupPolicy_21629716(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_21629718 = query.getOrDefault("Action")
  valid_21629718 = validateParameter(valid_21629718, JString, required = true,
                                   default = newJString("PutGroupPolicy"))
  if valid_21629718 != nil:
    section.add "Action", valid_21629718
  var valid_21629719 = query.getOrDefault("PolicyDocument")
  valid_21629719 = validateParameter(valid_21629719, JString, required = true,
                                   default = nil)
  if valid_21629719 != nil:
    section.add "PolicyDocument", valid_21629719
  var valid_21629720 = query.getOrDefault("GroupName")
  valid_21629720 = validateParameter(valid_21629720, JString, required = true,
                                   default = nil)
  if valid_21629720 != nil:
    section.add "GroupName", valid_21629720
  var valid_21629721 = query.getOrDefault("Version")
  valid_21629721 = validateParameter(valid_21629721, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629721 != nil:
    section.add "Version", valid_21629721
  var valid_21629722 = query.getOrDefault("PolicyName")
  valid_21629722 = validateParameter(valid_21629722, JString, required = true,
                                   default = nil)
  if valid_21629722 != nil:
    section.add "PolicyName", valid_21629722
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629723 = header.getOrDefault("X-Amz-Date")
  valid_21629723 = validateParameter(valid_21629723, JString, required = false,
                                   default = nil)
  if valid_21629723 != nil:
    section.add "X-Amz-Date", valid_21629723
  var valid_21629724 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629724 = validateParameter(valid_21629724, JString, required = false,
                                   default = nil)
  if valid_21629724 != nil:
    section.add "X-Amz-Security-Token", valid_21629724
  var valid_21629725 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629725 = validateParameter(valid_21629725, JString, required = false,
                                   default = nil)
  if valid_21629725 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629725
  var valid_21629726 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629726 = validateParameter(valid_21629726, JString, required = false,
                                   default = nil)
  if valid_21629726 != nil:
    section.add "X-Amz-Algorithm", valid_21629726
  var valid_21629727 = header.getOrDefault("X-Amz-Signature")
  valid_21629727 = validateParameter(valid_21629727, JString, required = false,
                                   default = nil)
  if valid_21629727 != nil:
    section.add "X-Amz-Signature", valid_21629727
  var valid_21629728 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629728 = validateParameter(valid_21629728, JString, required = false,
                                   default = nil)
  if valid_21629728 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629728
  var valid_21629729 = header.getOrDefault("X-Amz-Credential")
  valid_21629729 = validateParameter(valid_21629729, JString, required = false,
                                   default = nil)
  if valid_21629729 != nil:
    section.add "X-Amz-Credential", valid_21629729
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629730: Call_GetPutGroupPolicy_21629715; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_21629730.validator(path, query, header, formData, body, _)
  let scheme = call_21629730.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629730.makeUrl(scheme.get, call_21629730.host, call_21629730.base,
                               call_21629730.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629730, uri, valid, _)

proc call*(call_21629731: Call_GetPutGroupPolicy_21629715; PolicyDocument: string;
          GroupName: string; PolicyName: string; Action: string = "PutGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getPutGroupPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_21629732 = newJObject()
  add(query_21629732, "Action", newJString(Action))
  add(query_21629732, "PolicyDocument", newJString(PolicyDocument))
  add(query_21629732, "GroupName", newJString(GroupName))
  add(query_21629732, "Version", newJString(Version))
  add(query_21629732, "PolicyName", newJString(PolicyName))
  result = call_21629731.call(nil, query_21629732, nil, nil, nil)

var getPutGroupPolicy* = Call_GetPutGroupPolicy_21629715(name: "getPutGroupPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutGroupPolicy", validator: validate_GetPutGroupPolicy_21629716,
    base: "/", makeUrl: url_GetPutGroupPolicy_21629717,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutRolePermissionsBoundary_21629769 = ref object of OpenApiRestCall_21625435
proc url_PostPutRolePermissionsBoundary_21629771(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutRolePermissionsBoundary_21629770(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629772 = query.getOrDefault("Action")
  valid_21629772 = validateParameter(valid_21629772, JString, required = true, default = newJString(
      "PutRolePermissionsBoundary"))
  if valid_21629772 != nil:
    section.add "Action", valid_21629772
  var valid_21629773 = query.getOrDefault("Version")
  valid_21629773 = validateParameter(valid_21629773, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629773 != nil:
    section.add "Version", valid_21629773
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629774 = header.getOrDefault("X-Amz-Date")
  valid_21629774 = validateParameter(valid_21629774, JString, required = false,
                                   default = nil)
  if valid_21629774 != nil:
    section.add "X-Amz-Date", valid_21629774
  var valid_21629775 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629775 = validateParameter(valid_21629775, JString, required = false,
                                   default = nil)
  if valid_21629775 != nil:
    section.add "X-Amz-Security-Token", valid_21629775
  var valid_21629776 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629776 = validateParameter(valid_21629776, JString, required = false,
                                   default = nil)
  if valid_21629776 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629776
  var valid_21629777 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629777 = validateParameter(valid_21629777, JString, required = false,
                                   default = nil)
  if valid_21629777 != nil:
    section.add "X-Amz-Algorithm", valid_21629777
  var valid_21629778 = header.getOrDefault("X-Amz-Signature")
  valid_21629778 = validateParameter(valid_21629778, JString, required = false,
                                   default = nil)
  if valid_21629778 != nil:
    section.add "X-Amz-Signature", valid_21629778
  var valid_21629779 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629779 = validateParameter(valid_21629779, JString, required = false,
                                   default = nil)
  if valid_21629779 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629779
  var valid_21629780 = header.getOrDefault("X-Amz-Credential")
  valid_21629780 = validateParameter(valid_21629780, JString, required = false,
                                   default = nil)
  if valid_21629780 != nil:
    section.add "X-Amz-Credential", valid_21629780
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_21629781 = formData.getOrDefault("RoleName")
  valid_21629781 = validateParameter(valid_21629781, JString, required = true,
                                   default = nil)
  if valid_21629781 != nil:
    section.add "RoleName", valid_21629781
  var valid_21629782 = formData.getOrDefault("PermissionsBoundary")
  valid_21629782 = validateParameter(valid_21629782, JString, required = true,
                                   default = nil)
  if valid_21629782 != nil:
    section.add "PermissionsBoundary", valid_21629782
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629783: Call_PostPutRolePermissionsBoundary_21629769;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_21629783.validator(path, query, header, formData, body, _)
  let scheme = call_21629783.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629783.makeUrl(scheme.get, call_21629783.host, call_21629783.base,
                               call_21629783.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629783, uri, valid, _)

proc call*(call_21629784: Call_PostPutRolePermissionsBoundary_21629769;
          RoleName: string; PermissionsBoundary: string;
          Action: string = "PutRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postPutRolePermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21629785 = newJObject()
  var formData_21629786 = newJObject()
  add(formData_21629786, "RoleName", newJString(RoleName))
  add(formData_21629786, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_21629785, "Action", newJString(Action))
  add(query_21629785, "Version", newJString(Version))
  result = call_21629784.call(nil, query_21629785, nil, formData_21629786, nil)

var postPutRolePermissionsBoundary* = Call_PostPutRolePermissionsBoundary_21629769(
    name: "postPutRolePermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutRolePermissionsBoundary",
    validator: validate_PostPutRolePermissionsBoundary_21629770, base: "/",
    makeUrl: url_PostPutRolePermissionsBoundary_21629771,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutRolePermissionsBoundary_21629752 = ref object of OpenApiRestCall_21625435
proc url_GetPutRolePermissionsBoundary_21629754(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutRolePermissionsBoundary_21629753(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629755 = query.getOrDefault("Action")
  valid_21629755 = validateParameter(valid_21629755, JString, required = true, default = newJString(
      "PutRolePermissionsBoundary"))
  if valid_21629755 != nil:
    section.add "Action", valid_21629755
  var valid_21629756 = query.getOrDefault("PermissionsBoundary")
  valid_21629756 = validateParameter(valid_21629756, JString, required = true,
                                   default = nil)
  if valid_21629756 != nil:
    section.add "PermissionsBoundary", valid_21629756
  var valid_21629757 = query.getOrDefault("RoleName")
  valid_21629757 = validateParameter(valid_21629757, JString, required = true,
                                   default = nil)
  if valid_21629757 != nil:
    section.add "RoleName", valid_21629757
  var valid_21629758 = query.getOrDefault("Version")
  valid_21629758 = validateParameter(valid_21629758, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629758 != nil:
    section.add "Version", valid_21629758
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629759 = header.getOrDefault("X-Amz-Date")
  valid_21629759 = validateParameter(valid_21629759, JString, required = false,
                                   default = nil)
  if valid_21629759 != nil:
    section.add "X-Amz-Date", valid_21629759
  var valid_21629760 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629760 = validateParameter(valid_21629760, JString, required = false,
                                   default = nil)
  if valid_21629760 != nil:
    section.add "X-Amz-Security-Token", valid_21629760
  var valid_21629761 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629761 = validateParameter(valid_21629761, JString, required = false,
                                   default = nil)
  if valid_21629761 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629761
  var valid_21629762 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629762 = validateParameter(valid_21629762, JString, required = false,
                                   default = nil)
  if valid_21629762 != nil:
    section.add "X-Amz-Algorithm", valid_21629762
  var valid_21629763 = header.getOrDefault("X-Amz-Signature")
  valid_21629763 = validateParameter(valid_21629763, JString, required = false,
                                   default = nil)
  if valid_21629763 != nil:
    section.add "X-Amz-Signature", valid_21629763
  var valid_21629764 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629764 = validateParameter(valid_21629764, JString, required = false,
                                   default = nil)
  if valid_21629764 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629764
  var valid_21629765 = header.getOrDefault("X-Amz-Credential")
  valid_21629765 = validateParameter(valid_21629765, JString, required = false,
                                   default = nil)
  if valid_21629765 != nil:
    section.add "X-Amz-Credential", valid_21629765
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629766: Call_GetPutRolePermissionsBoundary_21629752;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_21629766.validator(path, query, header, formData, body, _)
  let scheme = call_21629766.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629766.makeUrl(scheme.get, call_21629766.host, call_21629766.base,
                               call_21629766.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629766, uri, valid, _)

proc call*(call_21629767: Call_GetPutRolePermissionsBoundary_21629752;
          PermissionsBoundary: string; RoleName: string;
          Action: string = "PutRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getPutRolePermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   Action: string (required)
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Version: string (required)
  var query_21629768 = newJObject()
  add(query_21629768, "Action", newJString(Action))
  add(query_21629768, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_21629768, "RoleName", newJString(RoleName))
  add(query_21629768, "Version", newJString(Version))
  result = call_21629767.call(nil, query_21629768, nil, nil, nil)

var getPutRolePermissionsBoundary* = Call_GetPutRolePermissionsBoundary_21629752(
    name: "getPutRolePermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=PutRolePermissionsBoundary",
    validator: validate_GetPutRolePermissionsBoundary_21629753, base: "/",
    makeUrl: url_GetPutRolePermissionsBoundary_21629754,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutRolePolicy_21629805 = ref object of OpenApiRestCall_21625435
proc url_PostPutRolePolicy_21629807(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutRolePolicy_21629806(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629808 = query.getOrDefault("Action")
  valid_21629808 = validateParameter(valid_21629808, JString, required = true,
                                   default = newJString("PutRolePolicy"))
  if valid_21629808 != nil:
    section.add "Action", valid_21629808
  var valid_21629809 = query.getOrDefault("Version")
  valid_21629809 = validateParameter(valid_21629809, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629809 != nil:
    section.add "Version", valid_21629809
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629810 = header.getOrDefault("X-Amz-Date")
  valid_21629810 = validateParameter(valid_21629810, JString, required = false,
                                   default = nil)
  if valid_21629810 != nil:
    section.add "X-Amz-Date", valid_21629810
  var valid_21629811 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629811 = validateParameter(valid_21629811, JString, required = false,
                                   default = nil)
  if valid_21629811 != nil:
    section.add "X-Amz-Security-Token", valid_21629811
  var valid_21629812 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629812 = validateParameter(valid_21629812, JString, required = false,
                                   default = nil)
  if valid_21629812 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629812
  var valid_21629813 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629813 = validateParameter(valid_21629813, JString, required = false,
                                   default = nil)
  if valid_21629813 != nil:
    section.add "X-Amz-Algorithm", valid_21629813
  var valid_21629814 = header.getOrDefault("X-Amz-Signature")
  valid_21629814 = validateParameter(valid_21629814, JString, required = false,
                                   default = nil)
  if valid_21629814 != nil:
    section.add "X-Amz-Signature", valid_21629814
  var valid_21629815 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629815 = validateParameter(valid_21629815, JString, required = false,
                                   default = nil)
  if valid_21629815 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629815
  var valid_21629816 = header.getOrDefault("X-Amz-Credential")
  valid_21629816 = validateParameter(valid_21629816, JString, required = false,
                                   default = nil)
  if valid_21629816 != nil:
    section.add "X-Amz-Credential", valid_21629816
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_21629817 = formData.getOrDefault("PolicyName")
  valid_21629817 = validateParameter(valid_21629817, JString, required = true,
                                   default = nil)
  if valid_21629817 != nil:
    section.add "PolicyName", valid_21629817
  var valid_21629818 = formData.getOrDefault("RoleName")
  valid_21629818 = validateParameter(valid_21629818, JString, required = true,
                                   default = nil)
  if valid_21629818 != nil:
    section.add "RoleName", valid_21629818
  var valid_21629819 = formData.getOrDefault("PolicyDocument")
  valid_21629819 = validateParameter(valid_21629819, JString, required = true,
                                   default = nil)
  if valid_21629819 != nil:
    section.add "PolicyDocument", valid_21629819
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629820: Call_PostPutRolePolicy_21629805; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_21629820.validator(path, query, header, formData, body, _)
  let scheme = call_21629820.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629820.makeUrl(scheme.get, call_21629820.host, call_21629820.base,
                               call_21629820.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629820, uri, valid, _)

proc call*(call_21629821: Call_PostPutRolePolicy_21629805; PolicyName: string;
          RoleName: string; PolicyDocument: string;
          Action: string = "PutRolePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postPutRolePolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21629822 = newJObject()
  var formData_21629823 = newJObject()
  add(formData_21629823, "PolicyName", newJString(PolicyName))
  add(formData_21629823, "RoleName", newJString(RoleName))
  add(formData_21629823, "PolicyDocument", newJString(PolicyDocument))
  add(query_21629822, "Action", newJString(Action))
  add(query_21629822, "Version", newJString(Version))
  result = call_21629821.call(nil, query_21629822, nil, formData_21629823, nil)

var postPutRolePolicy* = Call_PostPutRolePolicy_21629805(name: "postPutRolePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=PutRolePolicy", validator: validate_PostPutRolePolicy_21629806,
    base: "/", makeUrl: url_PostPutRolePolicy_21629807,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutRolePolicy_21629787 = ref object of OpenApiRestCall_21625435
proc url_GetPutRolePolicy_21629789(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutRolePolicy_21629788(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_21629790 = query.getOrDefault("Action")
  valid_21629790 = validateParameter(valid_21629790, JString, required = true,
                                   default = newJString("PutRolePolicy"))
  if valid_21629790 != nil:
    section.add "Action", valid_21629790
  var valid_21629791 = query.getOrDefault("PolicyDocument")
  valid_21629791 = validateParameter(valid_21629791, JString, required = true,
                                   default = nil)
  if valid_21629791 != nil:
    section.add "PolicyDocument", valid_21629791
  var valid_21629792 = query.getOrDefault("RoleName")
  valid_21629792 = validateParameter(valid_21629792, JString, required = true,
                                   default = nil)
  if valid_21629792 != nil:
    section.add "RoleName", valid_21629792
  var valid_21629793 = query.getOrDefault("Version")
  valid_21629793 = validateParameter(valid_21629793, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629793 != nil:
    section.add "Version", valid_21629793
  var valid_21629794 = query.getOrDefault("PolicyName")
  valid_21629794 = validateParameter(valid_21629794, JString, required = true,
                                   default = nil)
  if valid_21629794 != nil:
    section.add "PolicyName", valid_21629794
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629795 = header.getOrDefault("X-Amz-Date")
  valid_21629795 = validateParameter(valid_21629795, JString, required = false,
                                   default = nil)
  if valid_21629795 != nil:
    section.add "X-Amz-Date", valid_21629795
  var valid_21629796 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629796 = validateParameter(valid_21629796, JString, required = false,
                                   default = nil)
  if valid_21629796 != nil:
    section.add "X-Amz-Security-Token", valid_21629796
  var valid_21629797 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629797 = validateParameter(valid_21629797, JString, required = false,
                                   default = nil)
  if valid_21629797 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629797
  var valid_21629798 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629798 = validateParameter(valid_21629798, JString, required = false,
                                   default = nil)
  if valid_21629798 != nil:
    section.add "X-Amz-Algorithm", valid_21629798
  var valid_21629799 = header.getOrDefault("X-Amz-Signature")
  valid_21629799 = validateParameter(valid_21629799, JString, required = false,
                                   default = nil)
  if valid_21629799 != nil:
    section.add "X-Amz-Signature", valid_21629799
  var valid_21629800 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629800 = validateParameter(valid_21629800, JString, required = false,
                                   default = nil)
  if valid_21629800 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629800
  var valid_21629801 = header.getOrDefault("X-Amz-Credential")
  valid_21629801 = validateParameter(valid_21629801, JString, required = false,
                                   default = nil)
  if valid_21629801 != nil:
    section.add "X-Amz-Credential", valid_21629801
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629802: Call_GetPutRolePolicy_21629787; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_21629802.validator(path, query, header, formData, body, _)
  let scheme = call_21629802.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629802.makeUrl(scheme.get, call_21629802.host, call_21629802.base,
                               call_21629802.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629802, uri, valid, _)

proc call*(call_21629803: Call_GetPutRolePolicy_21629787; PolicyDocument: string;
          RoleName: string; PolicyName: string; Action: string = "PutRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getPutRolePolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_21629804 = newJObject()
  add(query_21629804, "Action", newJString(Action))
  add(query_21629804, "PolicyDocument", newJString(PolicyDocument))
  add(query_21629804, "RoleName", newJString(RoleName))
  add(query_21629804, "Version", newJString(Version))
  add(query_21629804, "PolicyName", newJString(PolicyName))
  result = call_21629803.call(nil, query_21629804, nil, nil, nil)

var getPutRolePolicy* = Call_GetPutRolePolicy_21629787(name: "getPutRolePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutRolePolicy", validator: validate_GetPutRolePolicy_21629788,
    base: "/", makeUrl: url_GetPutRolePolicy_21629789,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutUserPermissionsBoundary_21629841 = ref object of OpenApiRestCall_21625435
proc url_PostPutUserPermissionsBoundary_21629843(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutUserPermissionsBoundary_21629842(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629844 = query.getOrDefault("Action")
  valid_21629844 = validateParameter(valid_21629844, JString, required = true, default = newJString(
      "PutUserPermissionsBoundary"))
  if valid_21629844 != nil:
    section.add "Action", valid_21629844
  var valid_21629845 = query.getOrDefault("Version")
  valid_21629845 = validateParameter(valid_21629845, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629845 != nil:
    section.add "Version", valid_21629845
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629846 = header.getOrDefault("X-Amz-Date")
  valid_21629846 = validateParameter(valid_21629846, JString, required = false,
                                   default = nil)
  if valid_21629846 != nil:
    section.add "X-Amz-Date", valid_21629846
  var valid_21629847 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629847 = validateParameter(valid_21629847, JString, required = false,
                                   default = nil)
  if valid_21629847 != nil:
    section.add "X-Amz-Security-Token", valid_21629847
  var valid_21629848 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629848 = validateParameter(valid_21629848, JString, required = false,
                                   default = nil)
  if valid_21629848 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629848
  var valid_21629849 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629849 = validateParameter(valid_21629849, JString, required = false,
                                   default = nil)
  if valid_21629849 != nil:
    section.add "X-Amz-Algorithm", valid_21629849
  var valid_21629850 = header.getOrDefault("X-Amz-Signature")
  valid_21629850 = validateParameter(valid_21629850, JString, required = false,
                                   default = nil)
  if valid_21629850 != nil:
    section.add "X-Amz-Signature", valid_21629850
  var valid_21629851 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629851 = validateParameter(valid_21629851, JString, required = false,
                                   default = nil)
  if valid_21629851 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629851
  var valid_21629852 = header.getOrDefault("X-Amz-Credential")
  valid_21629852 = validateParameter(valid_21629852, JString, required = false,
                                   default = nil)
  if valid_21629852 != nil:
    section.add "X-Amz-Credential", valid_21629852
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21629853 = formData.getOrDefault("UserName")
  valid_21629853 = validateParameter(valid_21629853, JString, required = true,
                                   default = nil)
  if valid_21629853 != nil:
    section.add "UserName", valid_21629853
  var valid_21629854 = formData.getOrDefault("PermissionsBoundary")
  valid_21629854 = validateParameter(valid_21629854, JString, required = true,
                                   default = nil)
  if valid_21629854 != nil:
    section.add "PermissionsBoundary", valid_21629854
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629855: Call_PostPutUserPermissionsBoundary_21629841;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_21629855.validator(path, query, header, formData, body, _)
  let scheme = call_21629855.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629855.makeUrl(scheme.get, call_21629855.host, call_21629855.base,
                               call_21629855.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629855, uri, valid, _)

proc call*(call_21629856: Call_PostPutUserPermissionsBoundary_21629841;
          UserName: string; PermissionsBoundary: string;
          Action: string = "PutUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postPutUserPermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21629857 = newJObject()
  var formData_21629858 = newJObject()
  add(formData_21629858, "UserName", newJString(UserName))
  add(formData_21629858, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_21629857, "Action", newJString(Action))
  add(query_21629857, "Version", newJString(Version))
  result = call_21629856.call(nil, query_21629857, nil, formData_21629858, nil)

var postPutUserPermissionsBoundary* = Call_PostPutUserPermissionsBoundary_21629841(
    name: "postPutUserPermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutUserPermissionsBoundary",
    validator: validate_PostPutUserPermissionsBoundary_21629842, base: "/",
    makeUrl: url_PostPutUserPermissionsBoundary_21629843,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutUserPermissionsBoundary_21629824 = ref object of OpenApiRestCall_21625435
proc url_GetPutUserPermissionsBoundary_21629826(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutUserPermissionsBoundary_21629825(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   Action: JString (required)
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_21629827 = query.getOrDefault("UserName")
  valid_21629827 = validateParameter(valid_21629827, JString, required = true,
                                   default = nil)
  if valid_21629827 != nil:
    section.add "UserName", valid_21629827
  var valid_21629828 = query.getOrDefault("Action")
  valid_21629828 = validateParameter(valid_21629828, JString, required = true, default = newJString(
      "PutUserPermissionsBoundary"))
  if valid_21629828 != nil:
    section.add "Action", valid_21629828
  var valid_21629829 = query.getOrDefault("PermissionsBoundary")
  valid_21629829 = validateParameter(valid_21629829, JString, required = true,
                                   default = nil)
  if valid_21629829 != nil:
    section.add "PermissionsBoundary", valid_21629829
  var valid_21629830 = query.getOrDefault("Version")
  valid_21629830 = validateParameter(valid_21629830, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629830 != nil:
    section.add "Version", valid_21629830
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629831 = header.getOrDefault("X-Amz-Date")
  valid_21629831 = validateParameter(valid_21629831, JString, required = false,
                                   default = nil)
  if valid_21629831 != nil:
    section.add "X-Amz-Date", valid_21629831
  var valid_21629832 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629832 = validateParameter(valid_21629832, JString, required = false,
                                   default = nil)
  if valid_21629832 != nil:
    section.add "X-Amz-Security-Token", valid_21629832
  var valid_21629833 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629833 = validateParameter(valid_21629833, JString, required = false,
                                   default = nil)
  if valid_21629833 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629833
  var valid_21629834 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629834 = validateParameter(valid_21629834, JString, required = false,
                                   default = nil)
  if valid_21629834 != nil:
    section.add "X-Amz-Algorithm", valid_21629834
  var valid_21629835 = header.getOrDefault("X-Amz-Signature")
  valid_21629835 = validateParameter(valid_21629835, JString, required = false,
                                   default = nil)
  if valid_21629835 != nil:
    section.add "X-Amz-Signature", valid_21629835
  var valid_21629836 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629836 = validateParameter(valid_21629836, JString, required = false,
                                   default = nil)
  if valid_21629836 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629836
  var valid_21629837 = header.getOrDefault("X-Amz-Credential")
  valid_21629837 = validateParameter(valid_21629837, JString, required = false,
                                   default = nil)
  if valid_21629837 != nil:
    section.add "X-Amz-Credential", valid_21629837
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629838: Call_GetPutUserPermissionsBoundary_21629824;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_21629838.validator(path, query, header, formData, body, _)
  let scheme = call_21629838.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629838.makeUrl(scheme.get, call_21629838.host, call_21629838.base,
                               call_21629838.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629838, uri, valid, _)

proc call*(call_21629839: Call_GetPutUserPermissionsBoundary_21629824;
          UserName: string; PermissionsBoundary: string;
          Action: string = "PutUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getPutUserPermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   Action: string (required)
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_21629840 = newJObject()
  add(query_21629840, "UserName", newJString(UserName))
  add(query_21629840, "Action", newJString(Action))
  add(query_21629840, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_21629840, "Version", newJString(Version))
  result = call_21629839.call(nil, query_21629840, nil, nil, nil)

var getPutUserPermissionsBoundary* = Call_GetPutUserPermissionsBoundary_21629824(
    name: "getPutUserPermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=PutUserPermissionsBoundary",
    validator: validate_GetPutUserPermissionsBoundary_21629825, base: "/",
    makeUrl: url_GetPutUserPermissionsBoundary_21629826,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutUserPolicy_21629877 = ref object of OpenApiRestCall_21625435
proc url_PostPutUserPolicy_21629879(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutUserPolicy_21629878(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629880 = query.getOrDefault("Action")
  valid_21629880 = validateParameter(valid_21629880, JString, required = true,
                                   default = newJString("PutUserPolicy"))
  if valid_21629880 != nil:
    section.add "Action", valid_21629880
  var valid_21629881 = query.getOrDefault("Version")
  valid_21629881 = validateParameter(valid_21629881, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629881 != nil:
    section.add "Version", valid_21629881
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629882 = header.getOrDefault("X-Amz-Date")
  valid_21629882 = validateParameter(valid_21629882, JString, required = false,
                                   default = nil)
  if valid_21629882 != nil:
    section.add "X-Amz-Date", valid_21629882
  var valid_21629883 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629883 = validateParameter(valid_21629883, JString, required = false,
                                   default = nil)
  if valid_21629883 != nil:
    section.add "X-Amz-Security-Token", valid_21629883
  var valid_21629884 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629884 = validateParameter(valid_21629884, JString, required = false,
                                   default = nil)
  if valid_21629884 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629884
  var valid_21629885 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629885 = validateParameter(valid_21629885, JString, required = false,
                                   default = nil)
  if valid_21629885 != nil:
    section.add "X-Amz-Algorithm", valid_21629885
  var valid_21629886 = header.getOrDefault("X-Amz-Signature")
  valid_21629886 = validateParameter(valid_21629886, JString, required = false,
                                   default = nil)
  if valid_21629886 != nil:
    section.add "X-Amz-Signature", valid_21629886
  var valid_21629887 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629887 = validateParameter(valid_21629887, JString, required = false,
                                   default = nil)
  if valid_21629887 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629887
  var valid_21629888 = header.getOrDefault("X-Amz-Credential")
  valid_21629888 = validateParameter(valid_21629888, JString, required = false,
                                   default = nil)
  if valid_21629888 != nil:
    section.add "X-Amz-Credential", valid_21629888
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_21629889 = formData.getOrDefault("PolicyName")
  valid_21629889 = validateParameter(valid_21629889, JString, required = true,
                                   default = nil)
  if valid_21629889 != nil:
    section.add "PolicyName", valid_21629889
  var valid_21629890 = formData.getOrDefault("UserName")
  valid_21629890 = validateParameter(valid_21629890, JString, required = true,
                                   default = nil)
  if valid_21629890 != nil:
    section.add "UserName", valid_21629890
  var valid_21629891 = formData.getOrDefault("PolicyDocument")
  valid_21629891 = validateParameter(valid_21629891, JString, required = true,
                                   default = nil)
  if valid_21629891 != nil:
    section.add "PolicyDocument", valid_21629891
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629892: Call_PostPutUserPolicy_21629877; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_21629892.validator(path, query, header, formData, body, _)
  let scheme = call_21629892.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629892.makeUrl(scheme.get, call_21629892.host, call_21629892.base,
                               call_21629892.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629892, uri, valid, _)

proc call*(call_21629893: Call_PostPutUserPolicy_21629877; PolicyName: string;
          UserName: string; PolicyDocument: string;
          Action: string = "PutUserPolicy"; Version: string = "2010-05-08"): Recallable =
  ## postPutUserPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21629894 = newJObject()
  var formData_21629895 = newJObject()
  add(formData_21629895, "PolicyName", newJString(PolicyName))
  add(formData_21629895, "UserName", newJString(UserName))
  add(formData_21629895, "PolicyDocument", newJString(PolicyDocument))
  add(query_21629894, "Action", newJString(Action))
  add(query_21629894, "Version", newJString(Version))
  result = call_21629893.call(nil, query_21629894, nil, formData_21629895, nil)

var postPutUserPolicy* = Call_PostPutUserPolicy_21629877(name: "postPutUserPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=PutUserPolicy", validator: validate_PostPutUserPolicy_21629878,
    base: "/", makeUrl: url_PostPutUserPolicy_21629879,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutUserPolicy_21629859 = ref object of OpenApiRestCall_21625435
proc url_GetPutUserPolicy_21629861(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutUserPolicy_21629860(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_21629862 = query.getOrDefault("UserName")
  valid_21629862 = validateParameter(valid_21629862, JString, required = true,
                                   default = nil)
  if valid_21629862 != nil:
    section.add "UserName", valid_21629862
  var valid_21629863 = query.getOrDefault("Action")
  valid_21629863 = validateParameter(valid_21629863, JString, required = true,
                                   default = newJString("PutUserPolicy"))
  if valid_21629863 != nil:
    section.add "Action", valid_21629863
  var valid_21629864 = query.getOrDefault("PolicyDocument")
  valid_21629864 = validateParameter(valid_21629864, JString, required = true,
                                   default = nil)
  if valid_21629864 != nil:
    section.add "PolicyDocument", valid_21629864
  var valid_21629865 = query.getOrDefault("Version")
  valid_21629865 = validateParameter(valid_21629865, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629865 != nil:
    section.add "Version", valid_21629865
  var valid_21629866 = query.getOrDefault("PolicyName")
  valid_21629866 = validateParameter(valid_21629866, JString, required = true,
                                   default = nil)
  if valid_21629866 != nil:
    section.add "PolicyName", valid_21629866
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629867 = header.getOrDefault("X-Amz-Date")
  valid_21629867 = validateParameter(valid_21629867, JString, required = false,
                                   default = nil)
  if valid_21629867 != nil:
    section.add "X-Amz-Date", valid_21629867
  var valid_21629868 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629868 = validateParameter(valid_21629868, JString, required = false,
                                   default = nil)
  if valid_21629868 != nil:
    section.add "X-Amz-Security-Token", valid_21629868
  var valid_21629869 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629869 = validateParameter(valid_21629869, JString, required = false,
                                   default = nil)
  if valid_21629869 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629869
  var valid_21629870 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629870 = validateParameter(valid_21629870, JString, required = false,
                                   default = nil)
  if valid_21629870 != nil:
    section.add "X-Amz-Algorithm", valid_21629870
  var valid_21629871 = header.getOrDefault("X-Amz-Signature")
  valid_21629871 = validateParameter(valid_21629871, JString, required = false,
                                   default = nil)
  if valid_21629871 != nil:
    section.add "X-Amz-Signature", valid_21629871
  var valid_21629872 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629872 = validateParameter(valid_21629872, JString, required = false,
                                   default = nil)
  if valid_21629872 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629872
  var valid_21629873 = header.getOrDefault("X-Amz-Credential")
  valid_21629873 = validateParameter(valid_21629873, JString, required = false,
                                   default = nil)
  if valid_21629873 != nil:
    section.add "X-Amz-Credential", valid_21629873
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629874: Call_GetPutUserPolicy_21629859; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_21629874.validator(path, query, header, formData, body, _)
  let scheme = call_21629874.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629874.makeUrl(scheme.get, call_21629874.host, call_21629874.base,
                               call_21629874.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629874, uri, valid, _)

proc call*(call_21629875: Call_GetPutUserPolicy_21629859; UserName: string;
          PolicyDocument: string; PolicyName: string;
          Action: string = "PutUserPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getPutUserPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   UserName: string (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_21629876 = newJObject()
  add(query_21629876, "UserName", newJString(UserName))
  add(query_21629876, "Action", newJString(Action))
  add(query_21629876, "PolicyDocument", newJString(PolicyDocument))
  add(query_21629876, "Version", newJString(Version))
  add(query_21629876, "PolicyName", newJString(PolicyName))
  result = call_21629875.call(nil, query_21629876, nil, nil, nil)

var getPutUserPolicy* = Call_GetPutUserPolicy_21629859(name: "getPutUserPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutUserPolicy", validator: validate_GetPutUserPolicy_21629860,
    base: "/", makeUrl: url_GetPutUserPolicy_21629861,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveClientIDFromOpenIDConnectProvider_21629913 = ref object of OpenApiRestCall_21625435
proc url_PostRemoveClientIDFromOpenIDConnectProvider_21629915(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveClientIDFromOpenIDConnectProvider_21629914(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629916 = query.getOrDefault("Action")
  valid_21629916 = validateParameter(valid_21629916, JString, required = true, default = newJString(
      "RemoveClientIDFromOpenIDConnectProvider"))
  if valid_21629916 != nil:
    section.add "Action", valid_21629916
  var valid_21629917 = query.getOrDefault("Version")
  valid_21629917 = validateParameter(valid_21629917, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629917 != nil:
    section.add "Version", valid_21629917
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629918 = header.getOrDefault("X-Amz-Date")
  valid_21629918 = validateParameter(valid_21629918, JString, required = false,
                                   default = nil)
  if valid_21629918 != nil:
    section.add "X-Amz-Date", valid_21629918
  var valid_21629919 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629919 = validateParameter(valid_21629919, JString, required = false,
                                   default = nil)
  if valid_21629919 != nil:
    section.add "X-Amz-Security-Token", valid_21629919
  var valid_21629920 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629920 = validateParameter(valid_21629920, JString, required = false,
                                   default = nil)
  if valid_21629920 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629920
  var valid_21629921 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629921 = validateParameter(valid_21629921, JString, required = false,
                                   default = nil)
  if valid_21629921 != nil:
    section.add "X-Amz-Algorithm", valid_21629921
  var valid_21629922 = header.getOrDefault("X-Amz-Signature")
  valid_21629922 = validateParameter(valid_21629922, JString, required = false,
                                   default = nil)
  if valid_21629922 != nil:
    section.add "X-Amz-Signature", valid_21629922
  var valid_21629923 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629923 = validateParameter(valid_21629923, JString, required = false,
                                   default = nil)
  if valid_21629923 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629923
  var valid_21629924 = header.getOrDefault("X-Amz-Credential")
  valid_21629924 = validateParameter(valid_21629924, JString, required = false,
                                   default = nil)
  if valid_21629924 != nil:
    section.add "X-Amz-Credential", valid_21629924
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_21629925 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_21629925 = validateParameter(valid_21629925, JString, required = true,
                                   default = nil)
  if valid_21629925 != nil:
    section.add "OpenIDConnectProviderArn", valid_21629925
  var valid_21629926 = formData.getOrDefault("ClientID")
  valid_21629926 = validateParameter(valid_21629926, JString, required = true,
                                   default = nil)
  if valid_21629926 != nil:
    section.add "ClientID", valid_21629926
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629927: Call_PostRemoveClientIDFromOpenIDConnectProvider_21629913;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  let valid = call_21629927.validator(path, query, header, formData, body, _)
  let scheme = call_21629927.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629927.makeUrl(scheme.get, call_21629927.host, call_21629927.base,
                               call_21629927.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629927, uri, valid, _)

proc call*(call_21629928: Call_PostRemoveClientIDFromOpenIDConnectProvider_21629913;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "RemoveClientIDFromOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveClientIDFromOpenIDConnectProvider
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  var query_21629929 = newJObject()
  var formData_21629930 = newJObject()
  add(formData_21629930, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_21629929, "Action", newJString(Action))
  add(query_21629929, "Version", newJString(Version))
  add(formData_21629930, "ClientID", newJString(ClientID))
  result = call_21629928.call(nil, query_21629929, nil, formData_21629930, nil)

var postRemoveClientIDFromOpenIDConnectProvider* = Call_PostRemoveClientIDFromOpenIDConnectProvider_21629913(
    name: "postRemoveClientIDFromOpenIDConnectProvider",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=RemoveClientIDFromOpenIDConnectProvider",
    validator: validate_PostRemoveClientIDFromOpenIDConnectProvider_21629914,
    base: "/", makeUrl: url_PostRemoveClientIDFromOpenIDConnectProvider_21629915,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveClientIDFromOpenIDConnectProvider_21629896 = ref object of OpenApiRestCall_21625435
proc url_GetRemoveClientIDFromOpenIDConnectProvider_21629898(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveClientIDFromOpenIDConnectProvider_21629897(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_21629899 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_21629899 = validateParameter(valid_21629899, JString, required = true,
                                   default = nil)
  if valid_21629899 != nil:
    section.add "OpenIDConnectProviderArn", valid_21629899
  var valid_21629900 = query.getOrDefault("Action")
  valid_21629900 = validateParameter(valid_21629900, JString, required = true, default = newJString(
      "RemoveClientIDFromOpenIDConnectProvider"))
  if valid_21629900 != nil:
    section.add "Action", valid_21629900
  var valid_21629901 = query.getOrDefault("ClientID")
  valid_21629901 = validateParameter(valid_21629901, JString, required = true,
                                   default = nil)
  if valid_21629901 != nil:
    section.add "ClientID", valid_21629901
  var valid_21629902 = query.getOrDefault("Version")
  valid_21629902 = validateParameter(valid_21629902, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629902 != nil:
    section.add "Version", valid_21629902
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629903 = header.getOrDefault("X-Amz-Date")
  valid_21629903 = validateParameter(valid_21629903, JString, required = false,
                                   default = nil)
  if valid_21629903 != nil:
    section.add "X-Amz-Date", valid_21629903
  var valid_21629904 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629904 = validateParameter(valid_21629904, JString, required = false,
                                   default = nil)
  if valid_21629904 != nil:
    section.add "X-Amz-Security-Token", valid_21629904
  var valid_21629905 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629905 = validateParameter(valid_21629905, JString, required = false,
                                   default = nil)
  if valid_21629905 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629905
  var valid_21629906 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629906 = validateParameter(valid_21629906, JString, required = false,
                                   default = nil)
  if valid_21629906 != nil:
    section.add "X-Amz-Algorithm", valid_21629906
  var valid_21629907 = header.getOrDefault("X-Amz-Signature")
  valid_21629907 = validateParameter(valid_21629907, JString, required = false,
                                   default = nil)
  if valid_21629907 != nil:
    section.add "X-Amz-Signature", valid_21629907
  var valid_21629908 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629908 = validateParameter(valid_21629908, JString, required = false,
                                   default = nil)
  if valid_21629908 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629908
  var valid_21629909 = header.getOrDefault("X-Amz-Credential")
  valid_21629909 = validateParameter(valid_21629909, JString, required = false,
                                   default = nil)
  if valid_21629909 != nil:
    section.add "X-Amz-Credential", valid_21629909
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629910: Call_GetRemoveClientIDFromOpenIDConnectProvider_21629896;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  let valid = call_21629910.validator(path, query, header, formData, body, _)
  let scheme = call_21629910.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629910.makeUrl(scheme.get, call_21629910.host, call_21629910.base,
                               call_21629910.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629910, uri, valid, _)

proc call*(call_21629911: Call_GetRemoveClientIDFromOpenIDConnectProvider_21629896;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "RemoveClientIDFromOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveClientIDFromOpenIDConnectProvider
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   Version: string (required)
  var query_21629912 = newJObject()
  add(query_21629912, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_21629912, "Action", newJString(Action))
  add(query_21629912, "ClientID", newJString(ClientID))
  add(query_21629912, "Version", newJString(Version))
  result = call_21629911.call(nil, query_21629912, nil, nil, nil)

var getRemoveClientIDFromOpenIDConnectProvider* = Call_GetRemoveClientIDFromOpenIDConnectProvider_21629896(
    name: "getRemoveClientIDFromOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=RemoveClientIDFromOpenIDConnectProvider",
    validator: validate_GetRemoveClientIDFromOpenIDConnectProvider_21629897,
    base: "/", makeUrl: url_GetRemoveClientIDFromOpenIDConnectProvider_21629898,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromInstanceProfile_21629948 = ref object of OpenApiRestCall_21625435
proc url_PostRemoveRoleFromInstanceProfile_21629950(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromInstanceProfile_21629949(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629951 = query.getOrDefault("Action")
  valid_21629951 = validateParameter(valid_21629951, JString, required = true, default = newJString(
      "RemoveRoleFromInstanceProfile"))
  if valid_21629951 != nil:
    section.add "Action", valid_21629951
  var valid_21629952 = query.getOrDefault("Version")
  valid_21629952 = validateParameter(valid_21629952, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629952 != nil:
    section.add "Version", valid_21629952
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629953 = header.getOrDefault("X-Amz-Date")
  valid_21629953 = validateParameter(valid_21629953, JString, required = false,
                                   default = nil)
  if valid_21629953 != nil:
    section.add "X-Amz-Date", valid_21629953
  var valid_21629954 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629954 = validateParameter(valid_21629954, JString, required = false,
                                   default = nil)
  if valid_21629954 != nil:
    section.add "X-Amz-Security-Token", valid_21629954
  var valid_21629955 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629955 = validateParameter(valid_21629955, JString, required = false,
                                   default = nil)
  if valid_21629955 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629955
  var valid_21629956 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629956 = validateParameter(valid_21629956, JString, required = false,
                                   default = nil)
  if valid_21629956 != nil:
    section.add "X-Amz-Algorithm", valid_21629956
  var valid_21629957 = header.getOrDefault("X-Amz-Signature")
  valid_21629957 = validateParameter(valid_21629957, JString, required = false,
                                   default = nil)
  if valid_21629957 != nil:
    section.add "X-Amz-Signature", valid_21629957
  var valid_21629958 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629958 = validateParameter(valid_21629958, JString, required = false,
                                   default = nil)
  if valid_21629958 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629958
  var valid_21629959 = header.getOrDefault("X-Amz-Credential")
  valid_21629959 = validateParameter(valid_21629959, JString, required = false,
                                   default = nil)
  if valid_21629959 != nil:
    section.add "X-Amz-Credential", valid_21629959
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_21629960 = formData.getOrDefault("RoleName")
  valid_21629960 = validateParameter(valid_21629960, JString, required = true,
                                   default = nil)
  if valid_21629960 != nil:
    section.add "RoleName", valid_21629960
  var valid_21629961 = formData.getOrDefault("InstanceProfileName")
  valid_21629961 = validateParameter(valid_21629961, JString, required = true,
                                   default = nil)
  if valid_21629961 != nil:
    section.add "InstanceProfileName", valid_21629961
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629962: Call_PostRemoveRoleFromInstanceProfile_21629948;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_21629962.validator(path, query, header, formData, body, _)
  let scheme = call_21629962.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629962.makeUrl(scheme.get, call_21629962.host, call_21629962.base,
                               call_21629962.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629962, uri, valid, _)

proc call*(call_21629963: Call_PostRemoveRoleFromInstanceProfile_21629948;
          RoleName: string; InstanceProfileName: string;
          Action: string = "RemoveRoleFromInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveRoleFromInstanceProfile
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21629964 = newJObject()
  var formData_21629965 = newJObject()
  add(formData_21629965, "RoleName", newJString(RoleName))
  add(query_21629964, "Action", newJString(Action))
  add(formData_21629965, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_21629964, "Version", newJString(Version))
  result = call_21629963.call(nil, query_21629964, nil, formData_21629965, nil)

var postRemoveRoleFromInstanceProfile* = Call_PostRemoveRoleFromInstanceProfile_21629948(
    name: "postRemoveRoleFromInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=RemoveRoleFromInstanceProfile",
    validator: validate_PostRemoveRoleFromInstanceProfile_21629949, base: "/",
    makeUrl: url_PostRemoveRoleFromInstanceProfile_21629950,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromInstanceProfile_21629931 = ref object of OpenApiRestCall_21625435
proc url_GetRemoveRoleFromInstanceProfile_21629933(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromInstanceProfile_21629932(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_21629934 = query.getOrDefault("InstanceProfileName")
  valid_21629934 = validateParameter(valid_21629934, JString, required = true,
                                   default = nil)
  if valid_21629934 != nil:
    section.add "InstanceProfileName", valid_21629934
  var valid_21629935 = query.getOrDefault("Action")
  valid_21629935 = validateParameter(valid_21629935, JString, required = true, default = newJString(
      "RemoveRoleFromInstanceProfile"))
  if valid_21629935 != nil:
    section.add "Action", valid_21629935
  var valid_21629936 = query.getOrDefault("RoleName")
  valid_21629936 = validateParameter(valid_21629936, JString, required = true,
                                   default = nil)
  if valid_21629936 != nil:
    section.add "RoleName", valid_21629936
  var valid_21629937 = query.getOrDefault("Version")
  valid_21629937 = validateParameter(valid_21629937, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629937 != nil:
    section.add "Version", valid_21629937
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629938 = header.getOrDefault("X-Amz-Date")
  valid_21629938 = validateParameter(valid_21629938, JString, required = false,
                                   default = nil)
  if valid_21629938 != nil:
    section.add "X-Amz-Date", valid_21629938
  var valid_21629939 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629939 = validateParameter(valid_21629939, JString, required = false,
                                   default = nil)
  if valid_21629939 != nil:
    section.add "X-Amz-Security-Token", valid_21629939
  var valid_21629940 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629940 = validateParameter(valid_21629940, JString, required = false,
                                   default = nil)
  if valid_21629940 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629940
  var valid_21629941 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629941 = validateParameter(valid_21629941, JString, required = false,
                                   default = nil)
  if valid_21629941 != nil:
    section.add "X-Amz-Algorithm", valid_21629941
  var valid_21629942 = header.getOrDefault("X-Amz-Signature")
  valid_21629942 = validateParameter(valid_21629942, JString, required = false,
                                   default = nil)
  if valid_21629942 != nil:
    section.add "X-Amz-Signature", valid_21629942
  var valid_21629943 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629943 = validateParameter(valid_21629943, JString, required = false,
                                   default = nil)
  if valid_21629943 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629943
  var valid_21629944 = header.getOrDefault("X-Amz-Credential")
  valid_21629944 = validateParameter(valid_21629944, JString, required = false,
                                   default = nil)
  if valid_21629944 != nil:
    section.add "X-Amz-Credential", valid_21629944
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629945: Call_GetRemoveRoleFromInstanceProfile_21629931;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_21629945.validator(path, query, header, formData, body, _)
  let scheme = call_21629945.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629945.makeUrl(scheme.get, call_21629945.host, call_21629945.base,
                               call_21629945.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629945, uri, valid, _)

proc call*(call_21629946: Call_GetRemoveRoleFromInstanceProfile_21629931;
          InstanceProfileName: string; RoleName: string;
          Action: string = "RemoveRoleFromInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveRoleFromInstanceProfile
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21629947 = newJObject()
  add(query_21629947, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_21629947, "Action", newJString(Action))
  add(query_21629947, "RoleName", newJString(RoleName))
  add(query_21629947, "Version", newJString(Version))
  result = call_21629946.call(nil, query_21629947, nil, nil, nil)

var getRemoveRoleFromInstanceProfile* = Call_GetRemoveRoleFromInstanceProfile_21629931(
    name: "getRemoveRoleFromInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=RemoveRoleFromInstanceProfile",
    validator: validate_GetRemoveRoleFromInstanceProfile_21629932, base: "/",
    makeUrl: url_GetRemoveRoleFromInstanceProfile_21629933,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveUserFromGroup_21629983 = ref object of OpenApiRestCall_21625435
proc url_PostRemoveUserFromGroup_21629985(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveUserFromGroup_21629984(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Removes the specified user from the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629986 = query.getOrDefault("Action")
  valid_21629986 = validateParameter(valid_21629986, JString, required = true,
                                   default = newJString("RemoveUserFromGroup"))
  if valid_21629986 != nil:
    section.add "Action", valid_21629986
  var valid_21629987 = query.getOrDefault("Version")
  valid_21629987 = validateParameter(valid_21629987, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629987 != nil:
    section.add "Version", valid_21629987
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629988 = header.getOrDefault("X-Amz-Date")
  valid_21629988 = validateParameter(valid_21629988, JString, required = false,
                                   default = nil)
  if valid_21629988 != nil:
    section.add "X-Amz-Date", valid_21629988
  var valid_21629989 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629989 = validateParameter(valid_21629989, JString, required = false,
                                   default = nil)
  if valid_21629989 != nil:
    section.add "X-Amz-Security-Token", valid_21629989
  var valid_21629990 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629990 = validateParameter(valid_21629990, JString, required = false,
                                   default = nil)
  if valid_21629990 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629990
  var valid_21629991 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629991 = validateParameter(valid_21629991, JString, required = false,
                                   default = nil)
  if valid_21629991 != nil:
    section.add "X-Amz-Algorithm", valid_21629991
  var valid_21629992 = header.getOrDefault("X-Amz-Signature")
  valid_21629992 = validateParameter(valid_21629992, JString, required = false,
                                   default = nil)
  if valid_21629992 != nil:
    section.add "X-Amz-Signature", valid_21629992
  var valid_21629993 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629993 = validateParameter(valid_21629993, JString, required = false,
                                   default = nil)
  if valid_21629993 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629993
  var valid_21629994 = header.getOrDefault("X-Amz-Credential")
  valid_21629994 = validateParameter(valid_21629994, JString, required = false,
                                   default = nil)
  if valid_21629994 != nil:
    section.add "X-Amz-Credential", valid_21629994
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21629995 = formData.getOrDefault("UserName")
  valid_21629995 = validateParameter(valid_21629995, JString, required = true,
                                   default = nil)
  if valid_21629995 != nil:
    section.add "UserName", valid_21629995
  var valid_21629996 = formData.getOrDefault("GroupName")
  valid_21629996 = validateParameter(valid_21629996, JString, required = true,
                                   default = nil)
  if valid_21629996 != nil:
    section.add "GroupName", valid_21629996
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629997: Call_PostRemoveUserFromGroup_21629983;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Removes the specified user from the specified group.
  ## 
  let valid = call_21629997.validator(path, query, header, formData, body, _)
  let scheme = call_21629997.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629997.makeUrl(scheme.get, call_21629997.host, call_21629997.base,
                               call_21629997.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629997, uri, valid, _)

proc call*(call_21629998: Call_PostRemoveUserFromGroup_21629983; UserName: string;
          GroupName: string; Action: string = "RemoveUserFromGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveUserFromGroup
  ## Removes the specified user from the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21629999 = newJObject()
  var formData_21630000 = newJObject()
  add(formData_21630000, "UserName", newJString(UserName))
  add(formData_21630000, "GroupName", newJString(GroupName))
  add(query_21629999, "Action", newJString(Action))
  add(query_21629999, "Version", newJString(Version))
  result = call_21629998.call(nil, query_21629999, nil, formData_21630000, nil)

var postRemoveUserFromGroup* = Call_PostRemoveUserFromGroup_21629983(
    name: "postRemoveUserFromGroup", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=RemoveUserFromGroup",
    validator: validate_PostRemoveUserFromGroup_21629984, base: "/",
    makeUrl: url_PostRemoveUserFromGroup_21629985,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveUserFromGroup_21629966 = ref object of OpenApiRestCall_21625435
proc url_GetRemoveUserFromGroup_21629968(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveUserFromGroup_21629967(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Removes the specified user from the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_21629969 = query.getOrDefault("UserName")
  valid_21629969 = validateParameter(valid_21629969, JString, required = true,
                                   default = nil)
  if valid_21629969 != nil:
    section.add "UserName", valid_21629969
  var valid_21629970 = query.getOrDefault("Action")
  valid_21629970 = validateParameter(valid_21629970, JString, required = true,
                                   default = newJString("RemoveUserFromGroup"))
  if valid_21629970 != nil:
    section.add "Action", valid_21629970
  var valid_21629971 = query.getOrDefault("GroupName")
  valid_21629971 = validateParameter(valid_21629971, JString, required = true,
                                   default = nil)
  if valid_21629971 != nil:
    section.add "GroupName", valid_21629971
  var valid_21629972 = query.getOrDefault("Version")
  valid_21629972 = validateParameter(valid_21629972, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21629972 != nil:
    section.add "Version", valid_21629972
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629973 = header.getOrDefault("X-Amz-Date")
  valid_21629973 = validateParameter(valid_21629973, JString, required = false,
                                   default = nil)
  if valid_21629973 != nil:
    section.add "X-Amz-Date", valid_21629973
  var valid_21629974 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629974 = validateParameter(valid_21629974, JString, required = false,
                                   default = nil)
  if valid_21629974 != nil:
    section.add "X-Amz-Security-Token", valid_21629974
  var valid_21629975 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629975 = validateParameter(valid_21629975, JString, required = false,
                                   default = nil)
  if valid_21629975 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629975
  var valid_21629976 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629976 = validateParameter(valid_21629976, JString, required = false,
                                   default = nil)
  if valid_21629976 != nil:
    section.add "X-Amz-Algorithm", valid_21629976
  var valid_21629977 = header.getOrDefault("X-Amz-Signature")
  valid_21629977 = validateParameter(valid_21629977, JString, required = false,
                                   default = nil)
  if valid_21629977 != nil:
    section.add "X-Amz-Signature", valid_21629977
  var valid_21629978 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629978 = validateParameter(valid_21629978, JString, required = false,
                                   default = nil)
  if valid_21629978 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629978
  var valid_21629979 = header.getOrDefault("X-Amz-Credential")
  valid_21629979 = validateParameter(valid_21629979, JString, required = false,
                                   default = nil)
  if valid_21629979 != nil:
    section.add "X-Amz-Credential", valid_21629979
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629980: Call_GetRemoveUserFromGroup_21629966;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Removes the specified user from the specified group.
  ## 
  let valid = call_21629980.validator(path, query, header, formData, body, _)
  let scheme = call_21629980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629980.makeUrl(scheme.get, call_21629980.host, call_21629980.base,
                               call_21629980.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629980, uri, valid, _)

proc call*(call_21629981: Call_GetRemoveUserFromGroup_21629966; UserName: string;
          GroupName: string; Action: string = "RemoveUserFromGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveUserFromGroup
  ## Removes the specified user from the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21629982 = newJObject()
  add(query_21629982, "UserName", newJString(UserName))
  add(query_21629982, "Action", newJString(Action))
  add(query_21629982, "GroupName", newJString(GroupName))
  add(query_21629982, "Version", newJString(Version))
  result = call_21629981.call(nil, query_21629982, nil, nil, nil)

var getRemoveUserFromGroup* = Call_GetRemoveUserFromGroup_21629966(
    name: "getRemoveUserFromGroup", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=RemoveUserFromGroup",
    validator: validate_GetRemoveUserFromGroup_21629967, base: "/",
    makeUrl: url_GetRemoveUserFromGroup_21629968,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetServiceSpecificCredential_21630018 = ref object of OpenApiRestCall_21625435
proc url_PostResetServiceSpecificCredential_21630020(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetServiceSpecificCredential_21630019(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630021 = query.getOrDefault("Action")
  valid_21630021 = validateParameter(valid_21630021, JString, required = true, default = newJString(
      "ResetServiceSpecificCredential"))
  if valid_21630021 != nil:
    section.add "Action", valid_21630021
  var valid_21630022 = query.getOrDefault("Version")
  valid_21630022 = validateParameter(valid_21630022, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630022 != nil:
    section.add "Version", valid_21630022
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630023 = header.getOrDefault("X-Amz-Date")
  valid_21630023 = validateParameter(valid_21630023, JString, required = false,
                                   default = nil)
  if valid_21630023 != nil:
    section.add "X-Amz-Date", valid_21630023
  var valid_21630024 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630024 = validateParameter(valid_21630024, JString, required = false,
                                   default = nil)
  if valid_21630024 != nil:
    section.add "X-Amz-Security-Token", valid_21630024
  var valid_21630025 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630025 = validateParameter(valid_21630025, JString, required = false,
                                   default = nil)
  if valid_21630025 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630025
  var valid_21630026 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630026 = validateParameter(valid_21630026, JString, required = false,
                                   default = nil)
  if valid_21630026 != nil:
    section.add "X-Amz-Algorithm", valid_21630026
  var valid_21630027 = header.getOrDefault("X-Amz-Signature")
  valid_21630027 = validateParameter(valid_21630027, JString, required = false,
                                   default = nil)
  if valid_21630027 != nil:
    section.add "X-Amz-Signature", valid_21630027
  var valid_21630028 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630028 = validateParameter(valid_21630028, JString, required = false,
                                   default = nil)
  if valid_21630028 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630028
  var valid_21630029 = header.getOrDefault("X-Amz-Credential")
  valid_21630029 = validateParameter(valid_21630029, JString, required = false,
                                   default = nil)
  if valid_21630029 != nil:
    section.add "X-Amz-Credential", valid_21630029
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_21630030 = formData.getOrDefault("UserName")
  valid_21630030 = validateParameter(valid_21630030, JString, required = false,
                                   default = nil)
  if valid_21630030 != nil:
    section.add "UserName", valid_21630030
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_21630031 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_21630031 = validateParameter(valid_21630031, JString, required = true,
                                   default = nil)
  if valid_21630031 != nil:
    section.add "ServiceSpecificCredentialId", valid_21630031
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630032: Call_PostResetServiceSpecificCredential_21630018;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  let valid = call_21630032.validator(path, query, header, formData, body, _)
  let scheme = call_21630032.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630032.makeUrl(scheme.get, call_21630032.host, call_21630032.base,
                               call_21630032.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630032, uri, valid, _)

proc call*(call_21630033: Call_PostResetServiceSpecificCredential_21630018;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "ResetServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postResetServiceSpecificCredential
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630034 = newJObject()
  var formData_21630035 = newJObject()
  add(formData_21630035, "UserName", newJString(UserName))
  add(formData_21630035, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_21630034, "Action", newJString(Action))
  add(query_21630034, "Version", newJString(Version))
  result = call_21630033.call(nil, query_21630034, nil, formData_21630035, nil)

var postResetServiceSpecificCredential* = Call_PostResetServiceSpecificCredential_21630018(
    name: "postResetServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ResetServiceSpecificCredential",
    validator: validate_PostResetServiceSpecificCredential_21630019, base: "/",
    makeUrl: url_PostResetServiceSpecificCredential_21630020,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetServiceSpecificCredential_21630001 = ref object of OpenApiRestCall_21625435
proc url_GetResetServiceSpecificCredential_21630003(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetServiceSpecificCredential_21630002(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630004 = query.getOrDefault("UserName")
  valid_21630004 = validateParameter(valid_21630004, JString, required = false,
                                   default = nil)
  if valid_21630004 != nil:
    section.add "UserName", valid_21630004
  var valid_21630005 = query.getOrDefault("Action")
  valid_21630005 = validateParameter(valid_21630005, JString, required = true, default = newJString(
      "ResetServiceSpecificCredential"))
  if valid_21630005 != nil:
    section.add "Action", valid_21630005
  var valid_21630006 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_21630006 = validateParameter(valid_21630006, JString, required = true,
                                   default = nil)
  if valid_21630006 != nil:
    section.add "ServiceSpecificCredentialId", valid_21630006
  var valid_21630007 = query.getOrDefault("Version")
  valid_21630007 = validateParameter(valid_21630007, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630007 != nil:
    section.add "Version", valid_21630007
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630008 = header.getOrDefault("X-Amz-Date")
  valid_21630008 = validateParameter(valid_21630008, JString, required = false,
                                   default = nil)
  if valid_21630008 != nil:
    section.add "X-Amz-Date", valid_21630008
  var valid_21630009 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630009 = validateParameter(valid_21630009, JString, required = false,
                                   default = nil)
  if valid_21630009 != nil:
    section.add "X-Amz-Security-Token", valid_21630009
  var valid_21630010 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630010 = validateParameter(valid_21630010, JString, required = false,
                                   default = nil)
  if valid_21630010 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630010
  var valid_21630011 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630011 = validateParameter(valid_21630011, JString, required = false,
                                   default = nil)
  if valid_21630011 != nil:
    section.add "X-Amz-Algorithm", valid_21630011
  var valid_21630012 = header.getOrDefault("X-Amz-Signature")
  valid_21630012 = validateParameter(valid_21630012, JString, required = false,
                                   default = nil)
  if valid_21630012 != nil:
    section.add "X-Amz-Signature", valid_21630012
  var valid_21630013 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630013 = validateParameter(valid_21630013, JString, required = false,
                                   default = nil)
  if valid_21630013 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630013
  var valid_21630014 = header.getOrDefault("X-Amz-Credential")
  valid_21630014 = validateParameter(valid_21630014, JString, required = false,
                                   default = nil)
  if valid_21630014 != nil:
    section.add "X-Amz-Credential", valid_21630014
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630015: Call_GetResetServiceSpecificCredential_21630001;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  let valid = call_21630015.validator(path, query, header, formData, body, _)
  let scheme = call_21630015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630015.makeUrl(scheme.get, call_21630015.host, call_21630015.base,
                               call_21630015.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630015, uri, valid, _)

proc call*(call_21630016: Call_GetResetServiceSpecificCredential_21630001;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "ResetServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getResetServiceSpecificCredential
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_21630017 = newJObject()
  add(query_21630017, "UserName", newJString(UserName))
  add(query_21630017, "Action", newJString(Action))
  add(query_21630017, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_21630017, "Version", newJString(Version))
  result = call_21630016.call(nil, query_21630017, nil, nil, nil)

var getResetServiceSpecificCredential* = Call_GetResetServiceSpecificCredential_21630001(
    name: "getResetServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ResetServiceSpecificCredential",
    validator: validate_GetResetServiceSpecificCredential_21630002, base: "/",
    makeUrl: url_GetResetServiceSpecificCredential_21630003,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResyncMFADevice_21630055 = ref object of OpenApiRestCall_21625435
proc url_PostResyncMFADevice_21630057(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResyncMFADevice_21630056(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630058 = query.getOrDefault("Action")
  valid_21630058 = validateParameter(valid_21630058, JString, required = true,
                                   default = newJString("ResyncMFADevice"))
  if valid_21630058 != nil:
    section.add "Action", valid_21630058
  var valid_21630059 = query.getOrDefault("Version")
  valid_21630059 = validateParameter(valid_21630059, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630059 != nil:
    section.add "Version", valid_21630059
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630060 = header.getOrDefault("X-Amz-Date")
  valid_21630060 = validateParameter(valid_21630060, JString, required = false,
                                   default = nil)
  if valid_21630060 != nil:
    section.add "X-Amz-Date", valid_21630060
  var valid_21630061 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630061 = validateParameter(valid_21630061, JString, required = false,
                                   default = nil)
  if valid_21630061 != nil:
    section.add "X-Amz-Security-Token", valid_21630061
  var valid_21630062 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630062 = validateParameter(valid_21630062, JString, required = false,
                                   default = nil)
  if valid_21630062 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630062
  var valid_21630063 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630063 = validateParameter(valid_21630063, JString, required = false,
                                   default = nil)
  if valid_21630063 != nil:
    section.add "X-Amz-Algorithm", valid_21630063
  var valid_21630064 = header.getOrDefault("X-Amz-Signature")
  valid_21630064 = validateParameter(valid_21630064, JString, required = false,
                                   default = nil)
  if valid_21630064 != nil:
    section.add "X-Amz-Signature", valid_21630064
  var valid_21630065 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630065 = validateParameter(valid_21630065, JString, required = false,
                                   default = nil)
  if valid_21630065 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630065
  var valid_21630066 = header.getOrDefault("X-Amz-Credential")
  valid_21630066 = validateParameter(valid_21630066, JString, required = false,
                                   default = nil)
  if valid_21630066 != nil:
    section.add "X-Amz-Credential", valid_21630066
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_21630067 = formData.getOrDefault("SerialNumber")
  valid_21630067 = validateParameter(valid_21630067, JString, required = true,
                                   default = nil)
  if valid_21630067 != nil:
    section.add "SerialNumber", valid_21630067
  var valid_21630068 = formData.getOrDefault("UserName")
  valid_21630068 = validateParameter(valid_21630068, JString, required = true,
                                   default = nil)
  if valid_21630068 != nil:
    section.add "UserName", valid_21630068
  var valid_21630069 = formData.getOrDefault("AuthenticationCode2")
  valid_21630069 = validateParameter(valid_21630069, JString, required = true,
                                   default = nil)
  if valid_21630069 != nil:
    section.add "AuthenticationCode2", valid_21630069
  var valid_21630070 = formData.getOrDefault("AuthenticationCode1")
  valid_21630070 = validateParameter(valid_21630070, JString, required = true,
                                   default = nil)
  if valid_21630070 != nil:
    section.add "AuthenticationCode1", valid_21630070
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630071: Call_PostResyncMFADevice_21630055; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21630071.validator(path, query, header, formData, body, _)
  let scheme = call_21630071.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630071.makeUrl(scheme.get, call_21630071.host, call_21630071.base,
                               call_21630071.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630071, uri, valid, _)

proc call*(call_21630072: Call_PostResyncMFADevice_21630055; SerialNumber: string;
          UserName: string; AuthenticationCode2: string;
          AuthenticationCode1: string; Action: string = "ResyncMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postResyncMFADevice
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   Action: string (required)
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   Version: string (required)
  var query_21630073 = newJObject()
  var formData_21630074 = newJObject()
  add(formData_21630074, "SerialNumber", newJString(SerialNumber))
  add(formData_21630074, "UserName", newJString(UserName))
  add(formData_21630074, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_21630073, "Action", newJString(Action))
  add(formData_21630074, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_21630073, "Version", newJString(Version))
  result = call_21630072.call(nil, query_21630073, nil, formData_21630074, nil)

var postResyncMFADevice* = Call_PostResyncMFADevice_21630055(
    name: "postResyncMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ResyncMFADevice",
    validator: validate_PostResyncMFADevice_21630056, base: "/",
    makeUrl: url_PostResyncMFADevice_21630057,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResyncMFADevice_21630036 = ref object of OpenApiRestCall_21625435
proc url_GetResyncMFADevice_21630038(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResyncMFADevice_21630037(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_21630039 = query.getOrDefault("SerialNumber")
  valid_21630039 = validateParameter(valid_21630039, JString, required = true,
                                   default = nil)
  if valid_21630039 != nil:
    section.add "SerialNumber", valid_21630039
  var valid_21630040 = query.getOrDefault("AuthenticationCode2")
  valid_21630040 = validateParameter(valid_21630040, JString, required = true,
                                   default = nil)
  if valid_21630040 != nil:
    section.add "AuthenticationCode2", valid_21630040
  var valid_21630041 = query.getOrDefault("AuthenticationCode1")
  valid_21630041 = validateParameter(valid_21630041, JString, required = true,
                                   default = nil)
  if valid_21630041 != nil:
    section.add "AuthenticationCode1", valid_21630041
  var valid_21630042 = query.getOrDefault("UserName")
  valid_21630042 = validateParameter(valid_21630042, JString, required = true,
                                   default = nil)
  if valid_21630042 != nil:
    section.add "UserName", valid_21630042
  var valid_21630043 = query.getOrDefault("Action")
  valid_21630043 = validateParameter(valid_21630043, JString, required = true,
                                   default = newJString("ResyncMFADevice"))
  if valid_21630043 != nil:
    section.add "Action", valid_21630043
  var valid_21630044 = query.getOrDefault("Version")
  valid_21630044 = validateParameter(valid_21630044, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630044 != nil:
    section.add "Version", valid_21630044
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630045 = header.getOrDefault("X-Amz-Date")
  valid_21630045 = validateParameter(valid_21630045, JString, required = false,
                                   default = nil)
  if valid_21630045 != nil:
    section.add "X-Amz-Date", valid_21630045
  var valid_21630046 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630046 = validateParameter(valid_21630046, JString, required = false,
                                   default = nil)
  if valid_21630046 != nil:
    section.add "X-Amz-Security-Token", valid_21630046
  var valid_21630047 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630047 = validateParameter(valid_21630047, JString, required = false,
                                   default = nil)
  if valid_21630047 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630047
  var valid_21630048 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630048 = validateParameter(valid_21630048, JString, required = false,
                                   default = nil)
  if valid_21630048 != nil:
    section.add "X-Amz-Algorithm", valid_21630048
  var valid_21630049 = header.getOrDefault("X-Amz-Signature")
  valid_21630049 = validateParameter(valid_21630049, JString, required = false,
                                   default = nil)
  if valid_21630049 != nil:
    section.add "X-Amz-Signature", valid_21630049
  var valid_21630050 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630050 = validateParameter(valid_21630050, JString, required = false,
                                   default = nil)
  if valid_21630050 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630050
  var valid_21630051 = header.getOrDefault("X-Amz-Credential")
  valid_21630051 = validateParameter(valid_21630051, JString, required = false,
                                   default = nil)
  if valid_21630051 != nil:
    section.add "X-Amz-Credential", valid_21630051
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630052: Call_GetResyncMFADevice_21630036; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21630052.validator(path, query, header, formData, body, _)
  let scheme = call_21630052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630052.makeUrl(scheme.get, call_21630052.host, call_21630052.base,
                               call_21630052.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630052, uri, valid, _)

proc call*(call_21630053: Call_GetResyncMFADevice_21630036; SerialNumber: string;
          AuthenticationCode2: string; AuthenticationCode1: string;
          UserName: string; Action: string = "ResyncMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getResyncMFADevice
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630054 = newJObject()
  add(query_21630054, "SerialNumber", newJString(SerialNumber))
  add(query_21630054, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_21630054, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_21630054, "UserName", newJString(UserName))
  add(query_21630054, "Action", newJString(Action))
  add(query_21630054, "Version", newJString(Version))
  result = call_21630053.call(nil, query_21630054, nil, nil, nil)

var getResyncMFADevice* = Call_GetResyncMFADevice_21630036(
    name: "getResyncMFADevice", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ResyncMFADevice", validator: validate_GetResyncMFADevice_21630037,
    base: "/", makeUrl: url_GetResyncMFADevice_21630038,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetDefaultPolicyVersion_21630092 = ref object of OpenApiRestCall_21625435
proc url_PostSetDefaultPolicyVersion_21630094(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetDefaultPolicyVersion_21630093(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630095 = query.getOrDefault("Action")
  valid_21630095 = validateParameter(valid_21630095, JString, required = true, default = newJString(
      "SetDefaultPolicyVersion"))
  if valid_21630095 != nil:
    section.add "Action", valid_21630095
  var valid_21630096 = query.getOrDefault("Version")
  valid_21630096 = validateParameter(valid_21630096, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630096 != nil:
    section.add "Version", valid_21630096
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630097 = header.getOrDefault("X-Amz-Date")
  valid_21630097 = validateParameter(valid_21630097, JString, required = false,
                                   default = nil)
  if valid_21630097 != nil:
    section.add "X-Amz-Date", valid_21630097
  var valid_21630098 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630098 = validateParameter(valid_21630098, JString, required = false,
                                   default = nil)
  if valid_21630098 != nil:
    section.add "X-Amz-Security-Token", valid_21630098
  var valid_21630099 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630099 = validateParameter(valid_21630099, JString, required = false,
                                   default = nil)
  if valid_21630099 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630099
  var valid_21630100 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630100 = validateParameter(valid_21630100, JString, required = false,
                                   default = nil)
  if valid_21630100 != nil:
    section.add "X-Amz-Algorithm", valid_21630100
  var valid_21630101 = header.getOrDefault("X-Amz-Signature")
  valid_21630101 = validateParameter(valid_21630101, JString, required = false,
                                   default = nil)
  if valid_21630101 != nil:
    section.add "X-Amz-Signature", valid_21630101
  var valid_21630102 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630102 = validateParameter(valid_21630102, JString, required = false,
                                   default = nil)
  if valid_21630102 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630102
  var valid_21630103 = header.getOrDefault("X-Amz-Credential")
  valid_21630103 = validateParameter(valid_21630103, JString, required = false,
                                   default = nil)
  if valid_21630103 != nil:
    section.add "X-Amz-Credential", valid_21630103
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_21630104 = formData.getOrDefault("PolicyArn")
  valid_21630104 = validateParameter(valid_21630104, JString, required = true,
                                   default = nil)
  if valid_21630104 != nil:
    section.add "PolicyArn", valid_21630104
  var valid_21630105 = formData.getOrDefault("VersionId")
  valid_21630105 = validateParameter(valid_21630105, JString, required = true,
                                   default = nil)
  if valid_21630105 != nil:
    section.add "VersionId", valid_21630105
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630106: Call_PostSetDefaultPolicyVersion_21630092;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21630106.validator(path, query, header, formData, body, _)
  let scheme = call_21630106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630106.makeUrl(scheme.get, call_21630106.host, call_21630106.base,
                               call_21630106.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630106, uri, valid, _)

proc call*(call_21630107: Call_PostSetDefaultPolicyVersion_21630092;
          PolicyArn: string; VersionId: string;
          Action: string = "SetDefaultPolicyVersion"; Version: string = "2010-05-08"): Recallable =
  ## postSetDefaultPolicyVersion
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   VersionId: string (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  var query_21630108 = newJObject()
  var formData_21630109 = newJObject()
  add(formData_21630109, "PolicyArn", newJString(PolicyArn))
  add(query_21630108, "Action", newJString(Action))
  add(query_21630108, "Version", newJString(Version))
  add(formData_21630109, "VersionId", newJString(VersionId))
  result = call_21630107.call(nil, query_21630108, nil, formData_21630109, nil)

var postSetDefaultPolicyVersion* = Call_PostSetDefaultPolicyVersion_21630092(
    name: "postSetDefaultPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SetDefaultPolicyVersion",
    validator: validate_PostSetDefaultPolicyVersion_21630093, base: "/",
    makeUrl: url_PostSetDefaultPolicyVersion_21630094,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetDefaultPolicyVersion_21630075 = ref object of OpenApiRestCall_21625435
proc url_GetSetDefaultPolicyVersion_21630077(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetDefaultPolicyVersion_21630076(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_21630078 = query.getOrDefault("PolicyArn")
  valid_21630078 = validateParameter(valid_21630078, JString, required = true,
                                   default = nil)
  if valid_21630078 != nil:
    section.add "PolicyArn", valid_21630078
  var valid_21630079 = query.getOrDefault("VersionId")
  valid_21630079 = validateParameter(valid_21630079, JString, required = true,
                                   default = nil)
  if valid_21630079 != nil:
    section.add "VersionId", valid_21630079
  var valid_21630080 = query.getOrDefault("Action")
  valid_21630080 = validateParameter(valid_21630080, JString, required = true, default = newJString(
      "SetDefaultPolicyVersion"))
  if valid_21630080 != nil:
    section.add "Action", valid_21630080
  var valid_21630081 = query.getOrDefault("Version")
  valid_21630081 = validateParameter(valid_21630081, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630081 != nil:
    section.add "Version", valid_21630081
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630082 = header.getOrDefault("X-Amz-Date")
  valid_21630082 = validateParameter(valid_21630082, JString, required = false,
                                   default = nil)
  if valid_21630082 != nil:
    section.add "X-Amz-Date", valid_21630082
  var valid_21630083 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630083 = validateParameter(valid_21630083, JString, required = false,
                                   default = nil)
  if valid_21630083 != nil:
    section.add "X-Amz-Security-Token", valid_21630083
  var valid_21630084 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630084 = validateParameter(valid_21630084, JString, required = false,
                                   default = nil)
  if valid_21630084 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630084
  var valid_21630085 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630085 = validateParameter(valid_21630085, JString, required = false,
                                   default = nil)
  if valid_21630085 != nil:
    section.add "X-Amz-Algorithm", valid_21630085
  var valid_21630086 = header.getOrDefault("X-Amz-Signature")
  valid_21630086 = validateParameter(valid_21630086, JString, required = false,
                                   default = nil)
  if valid_21630086 != nil:
    section.add "X-Amz-Signature", valid_21630086
  var valid_21630087 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630087 = validateParameter(valid_21630087, JString, required = false,
                                   default = nil)
  if valid_21630087 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630087
  var valid_21630088 = header.getOrDefault("X-Amz-Credential")
  valid_21630088 = validateParameter(valid_21630088, JString, required = false,
                                   default = nil)
  if valid_21630088 != nil:
    section.add "X-Amz-Credential", valid_21630088
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630089: Call_GetSetDefaultPolicyVersion_21630075;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21630089.validator(path, query, header, formData, body, _)
  let scheme = call_21630089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630089.makeUrl(scheme.get, call_21630089.host, call_21630089.base,
                               call_21630089.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630089, uri, valid, _)

proc call*(call_21630090: Call_GetSetDefaultPolicyVersion_21630075;
          PolicyArn: string; VersionId: string;
          Action: string = "SetDefaultPolicyVersion"; Version: string = "2010-05-08"): Recallable =
  ## getSetDefaultPolicyVersion
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: string (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630091 = newJObject()
  add(query_21630091, "PolicyArn", newJString(PolicyArn))
  add(query_21630091, "VersionId", newJString(VersionId))
  add(query_21630091, "Action", newJString(Action))
  add(query_21630091, "Version", newJString(Version))
  result = call_21630090.call(nil, query_21630091, nil, nil, nil)

var getSetDefaultPolicyVersion* = Call_GetSetDefaultPolicyVersion_21630075(
    name: "getSetDefaultPolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SetDefaultPolicyVersion",
    validator: validate_GetSetDefaultPolicyVersion_21630076, base: "/",
    makeUrl: url_GetSetDefaultPolicyVersion_21630077,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetSecurityTokenServicePreferences_21630126 = ref object of OpenApiRestCall_21625435
proc url_PostSetSecurityTokenServicePreferences_21630128(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetSecurityTokenServicePreferences_21630127(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630129 = query.getOrDefault("Action")
  valid_21630129 = validateParameter(valid_21630129, JString, required = true, default = newJString(
      "SetSecurityTokenServicePreferences"))
  if valid_21630129 != nil:
    section.add "Action", valid_21630129
  var valid_21630130 = query.getOrDefault("Version")
  valid_21630130 = validateParameter(valid_21630130, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630130 != nil:
    section.add "Version", valid_21630130
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630131 = header.getOrDefault("X-Amz-Date")
  valid_21630131 = validateParameter(valid_21630131, JString, required = false,
                                   default = nil)
  if valid_21630131 != nil:
    section.add "X-Amz-Date", valid_21630131
  var valid_21630132 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630132 = validateParameter(valid_21630132, JString, required = false,
                                   default = nil)
  if valid_21630132 != nil:
    section.add "X-Amz-Security-Token", valid_21630132
  var valid_21630133 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630133 = validateParameter(valid_21630133, JString, required = false,
                                   default = nil)
  if valid_21630133 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630133
  var valid_21630134 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630134 = validateParameter(valid_21630134, JString, required = false,
                                   default = nil)
  if valid_21630134 != nil:
    section.add "X-Amz-Algorithm", valid_21630134
  var valid_21630135 = header.getOrDefault("X-Amz-Signature")
  valid_21630135 = validateParameter(valid_21630135, JString, required = false,
                                   default = nil)
  if valid_21630135 != nil:
    section.add "X-Amz-Signature", valid_21630135
  var valid_21630136 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630136 = validateParameter(valid_21630136, JString, required = false,
                                   default = nil)
  if valid_21630136 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630136
  var valid_21630137 = header.getOrDefault("X-Amz-Credential")
  valid_21630137 = validateParameter(valid_21630137, JString, required = false,
                                   default = nil)
  if valid_21630137 != nil:
    section.add "X-Amz-Credential", valid_21630137
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalEndpointTokenVersion: JString (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  var valid_21630138 = formData.getOrDefault("GlobalEndpointTokenVersion")
  valid_21630138 = validateParameter(valid_21630138, JString, required = true,
                                   default = newJString("v1Token"))
  if valid_21630138 != nil:
    section.add "GlobalEndpointTokenVersion", valid_21630138
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630139: Call_PostSetSecurityTokenServicePreferences_21630126;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  let valid = call_21630139.validator(path, query, header, formData, body, _)
  let scheme = call_21630139.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630139.makeUrl(scheme.get, call_21630139.host, call_21630139.base,
                               call_21630139.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630139, uri, valid, _)

proc call*(call_21630140: Call_PostSetSecurityTokenServicePreferences_21630126;
          Action: string = "SetSecurityTokenServicePreferences";
          GlobalEndpointTokenVersion: string = "v1Token";
          Version: string = "2010-05-08"): Recallable =
  ## postSetSecurityTokenServicePreferences
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ##   Action: string (required)
  ##   GlobalEndpointTokenVersion: string (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  var query_21630141 = newJObject()
  var formData_21630142 = newJObject()
  add(query_21630141, "Action", newJString(Action))
  add(formData_21630142, "GlobalEndpointTokenVersion",
      newJString(GlobalEndpointTokenVersion))
  add(query_21630141, "Version", newJString(Version))
  result = call_21630140.call(nil, query_21630141, nil, formData_21630142, nil)

var postSetSecurityTokenServicePreferences* = Call_PostSetSecurityTokenServicePreferences_21630126(
    name: "postSetSecurityTokenServicePreferences", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=SetSecurityTokenServicePreferences",
    validator: validate_PostSetSecurityTokenServicePreferences_21630127,
    base: "/", makeUrl: url_PostSetSecurityTokenServicePreferences_21630128,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetSecurityTokenServicePreferences_21630110 = ref object of OpenApiRestCall_21625435
proc url_GetSetSecurityTokenServicePreferences_21630112(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetSecurityTokenServicePreferences_21630111(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GlobalEndpointTokenVersion: JString (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630113 = query.getOrDefault("Action")
  valid_21630113 = validateParameter(valid_21630113, JString, required = true, default = newJString(
      "SetSecurityTokenServicePreferences"))
  if valid_21630113 != nil:
    section.add "Action", valid_21630113
  var valid_21630114 = query.getOrDefault("GlobalEndpointTokenVersion")
  valid_21630114 = validateParameter(valid_21630114, JString, required = true,
                                   default = newJString("v1Token"))
  if valid_21630114 != nil:
    section.add "GlobalEndpointTokenVersion", valid_21630114
  var valid_21630115 = query.getOrDefault("Version")
  valid_21630115 = validateParameter(valid_21630115, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630115 != nil:
    section.add "Version", valid_21630115
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630116 = header.getOrDefault("X-Amz-Date")
  valid_21630116 = validateParameter(valid_21630116, JString, required = false,
                                   default = nil)
  if valid_21630116 != nil:
    section.add "X-Amz-Date", valid_21630116
  var valid_21630117 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630117 = validateParameter(valid_21630117, JString, required = false,
                                   default = nil)
  if valid_21630117 != nil:
    section.add "X-Amz-Security-Token", valid_21630117
  var valid_21630118 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630118 = validateParameter(valid_21630118, JString, required = false,
                                   default = nil)
  if valid_21630118 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630118
  var valid_21630119 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630119 = validateParameter(valid_21630119, JString, required = false,
                                   default = nil)
  if valid_21630119 != nil:
    section.add "X-Amz-Algorithm", valid_21630119
  var valid_21630120 = header.getOrDefault("X-Amz-Signature")
  valid_21630120 = validateParameter(valid_21630120, JString, required = false,
                                   default = nil)
  if valid_21630120 != nil:
    section.add "X-Amz-Signature", valid_21630120
  var valid_21630121 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630121 = validateParameter(valid_21630121, JString, required = false,
                                   default = nil)
  if valid_21630121 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630121
  var valid_21630122 = header.getOrDefault("X-Amz-Credential")
  valid_21630122 = validateParameter(valid_21630122, JString, required = false,
                                   default = nil)
  if valid_21630122 != nil:
    section.add "X-Amz-Credential", valid_21630122
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630123: Call_GetSetSecurityTokenServicePreferences_21630110;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  let valid = call_21630123.validator(path, query, header, formData, body, _)
  let scheme = call_21630123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630123.makeUrl(scheme.get, call_21630123.host, call_21630123.base,
                               call_21630123.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630123, uri, valid, _)

proc call*(call_21630124: Call_GetSetSecurityTokenServicePreferences_21630110;
          Action: string = "SetSecurityTokenServicePreferences";
          GlobalEndpointTokenVersion: string = "v1Token";
          Version: string = "2010-05-08"): Recallable =
  ## getSetSecurityTokenServicePreferences
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ##   Action: string (required)
  ##   GlobalEndpointTokenVersion: string (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  var query_21630125 = newJObject()
  add(query_21630125, "Action", newJString(Action))
  add(query_21630125, "GlobalEndpointTokenVersion",
      newJString(GlobalEndpointTokenVersion))
  add(query_21630125, "Version", newJString(Version))
  result = call_21630124.call(nil, query_21630125, nil, nil, nil)

var getSetSecurityTokenServicePreferences* = Call_GetSetSecurityTokenServicePreferences_21630110(
    name: "getSetSecurityTokenServicePreferences", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=SetSecurityTokenServicePreferences",
    validator: validate_GetSetSecurityTokenServicePreferences_21630111, base: "/",
    makeUrl: url_GetSetSecurityTokenServicePreferences_21630112,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSimulateCustomPolicy_21630169 = ref object of OpenApiRestCall_21625435
proc url_PostSimulateCustomPolicy_21630171(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSimulateCustomPolicy_21630170(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630172 = query.getOrDefault("Action")
  valid_21630172 = validateParameter(valid_21630172, JString, required = true,
                                   default = newJString("SimulateCustomPolicy"))
  if valid_21630172 != nil:
    section.add "Action", valid_21630172
  var valid_21630173 = query.getOrDefault("Version")
  valid_21630173 = validateParameter(valid_21630173, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630173 != nil:
    section.add "Version", valid_21630173
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630174 = header.getOrDefault("X-Amz-Date")
  valid_21630174 = validateParameter(valid_21630174, JString, required = false,
                                   default = nil)
  if valid_21630174 != nil:
    section.add "X-Amz-Date", valid_21630174
  var valid_21630175 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630175 = validateParameter(valid_21630175, JString, required = false,
                                   default = nil)
  if valid_21630175 != nil:
    section.add "X-Amz-Security-Token", valid_21630175
  var valid_21630176 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630176 = validateParameter(valid_21630176, JString, required = false,
                                   default = nil)
  if valid_21630176 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630176
  var valid_21630177 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630177 = validateParameter(valid_21630177, JString, required = false,
                                   default = nil)
  if valid_21630177 != nil:
    section.add "X-Amz-Algorithm", valid_21630177
  var valid_21630178 = header.getOrDefault("X-Amz-Signature")
  valid_21630178 = validateParameter(valid_21630178, JString, required = false,
                                   default = nil)
  if valid_21630178 != nil:
    section.add "X-Amz-Signature", valid_21630178
  var valid_21630179 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630179 = validateParameter(valid_21630179, JString, required = false,
                                   default = nil)
  if valid_21630179 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630179
  var valid_21630180 = header.getOrDefault("X-Amz-Credential")
  valid_21630180 = validateParameter(valid_21630180, JString, required = false,
                                   default = nil)
  if valid_21630180 != nil:
    section.add "X-Amz-Credential", valid_21630180
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceOwner: JString
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that an IAM entity can have. You can input only one permissions boundary when you pass a policy to this operation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string that contains the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  section = newJObject()
  var valid_21630181 = formData.getOrDefault("ResourceArns")
  valid_21630181 = validateParameter(valid_21630181, JArray, required = false,
                                   default = nil)
  if valid_21630181 != nil:
    section.add "ResourceArns", valid_21630181
  var valid_21630182 = formData.getOrDefault("ContextEntries")
  valid_21630182 = validateParameter(valid_21630182, JArray, required = false,
                                   default = nil)
  if valid_21630182 != nil:
    section.add "ContextEntries", valid_21630182
  var valid_21630183 = formData.getOrDefault("CallerArn")
  valid_21630183 = validateParameter(valid_21630183, JString, required = false,
                                   default = nil)
  if valid_21630183 != nil:
    section.add "CallerArn", valid_21630183
  var valid_21630184 = formData.getOrDefault("ResourceOwner")
  valid_21630184 = validateParameter(valid_21630184, JString, required = false,
                                   default = nil)
  if valid_21630184 != nil:
    section.add "ResourceOwner", valid_21630184
  assert formData != nil,
        "formData argument is necessary due to required `ActionNames` field"
  var valid_21630185 = formData.getOrDefault("ActionNames")
  valid_21630185 = validateParameter(valid_21630185, JArray, required = true,
                                   default = nil)
  if valid_21630185 != nil:
    section.add "ActionNames", valid_21630185
  var valid_21630186 = formData.getOrDefault("Marker")
  valid_21630186 = validateParameter(valid_21630186, JString, required = false,
                                   default = nil)
  if valid_21630186 != nil:
    section.add "Marker", valid_21630186
  var valid_21630187 = formData.getOrDefault("PermissionsBoundaryPolicyInputList")
  valid_21630187 = validateParameter(valid_21630187, JArray, required = false,
                                   default = nil)
  if valid_21630187 != nil:
    section.add "PermissionsBoundaryPolicyInputList", valid_21630187
  var valid_21630188 = formData.getOrDefault("PolicyInputList")
  valid_21630188 = validateParameter(valid_21630188, JArray, required = true,
                                   default = nil)
  if valid_21630188 != nil:
    section.add "PolicyInputList", valid_21630188
  var valid_21630189 = formData.getOrDefault("ResourceHandlingOption")
  valid_21630189 = validateParameter(valid_21630189, JString, required = false,
                                   default = nil)
  if valid_21630189 != nil:
    section.add "ResourceHandlingOption", valid_21630189
  var valid_21630190 = formData.getOrDefault("MaxItems")
  valid_21630190 = validateParameter(valid_21630190, JInt, required = false,
                                   default = nil)
  if valid_21630190 != nil:
    section.add "MaxItems", valid_21630190
  var valid_21630191 = formData.getOrDefault("ResourcePolicy")
  valid_21630191 = validateParameter(valid_21630191, JString, required = false,
                                   default = nil)
  if valid_21630191 != nil:
    section.add "ResourcePolicy", valid_21630191
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630192: Call_PostSimulateCustomPolicy_21630169;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_21630192.validator(path, query, header, formData, body, _)
  let scheme = call_21630192.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630192.makeUrl(scheme.get, call_21630192.host, call_21630192.base,
                               call_21630192.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630192, uri, valid, _)

proc call*(call_21630193: Call_PostSimulateCustomPolicy_21630169;
          ActionNames: JsonNode; PolicyInputList: JsonNode;
          ResourceArns: JsonNode = nil; ContextEntries: JsonNode = nil;
          CallerArn: string = ""; ResourceOwner: string = ""; Marker: string = "";
          PermissionsBoundaryPolicyInputList: JsonNode = nil;
          Action: string = "SimulateCustomPolicy";
          ResourceHandlingOption: string = ""; MaxItems: int = 0;
          ResourcePolicy: string = ""; Version: string = "2010-05-08"): Recallable =
  ## postSimulateCustomPolicy
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceOwner: string
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that an IAM entity can have. You can input only one permissions boundary when you pass a policy to this operation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string that contains the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Version: string (required)
  var query_21630194 = newJObject()
  var formData_21630195 = newJObject()
  if ResourceArns != nil:
    formData_21630195.add "ResourceArns", ResourceArns
  if ContextEntries != nil:
    formData_21630195.add "ContextEntries", ContextEntries
  add(formData_21630195, "CallerArn", newJString(CallerArn))
  add(formData_21630195, "ResourceOwner", newJString(ResourceOwner))
  if ActionNames != nil:
    formData_21630195.add "ActionNames", ActionNames
  add(formData_21630195, "Marker", newJString(Marker))
  if PermissionsBoundaryPolicyInputList != nil:
    formData_21630195.add "PermissionsBoundaryPolicyInputList",
                         PermissionsBoundaryPolicyInputList
  if PolicyInputList != nil:
    formData_21630195.add "PolicyInputList", PolicyInputList
  add(query_21630194, "Action", newJString(Action))
  add(formData_21630195, "ResourceHandlingOption",
      newJString(ResourceHandlingOption))
  add(formData_21630195, "MaxItems", newJInt(MaxItems))
  add(formData_21630195, "ResourcePolicy", newJString(ResourcePolicy))
  add(query_21630194, "Version", newJString(Version))
  result = call_21630193.call(nil, query_21630194, nil, formData_21630195, nil)

var postSimulateCustomPolicy* = Call_PostSimulateCustomPolicy_21630169(
    name: "postSimulateCustomPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SimulateCustomPolicy",
    validator: validate_PostSimulateCustomPolicy_21630170, base: "/",
    makeUrl: url_PostSimulateCustomPolicy_21630171,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSimulateCustomPolicy_21630143 = ref object of OpenApiRestCall_21625435
proc url_GetSimulateCustomPolicy_21630145(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSimulateCustomPolicy_21630144(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that an IAM entity can have. You can input only one permissions boundary when you pass a policy to this operation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string that contains the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceOwner: JString
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630146 = query.getOrDefault("ContextEntries")
  valid_21630146 = validateParameter(valid_21630146, JArray, required = false,
                                   default = nil)
  if valid_21630146 != nil:
    section.add "ContextEntries", valid_21630146
  var valid_21630147 = query.getOrDefault("ResourcePolicy")
  valid_21630147 = validateParameter(valid_21630147, JString, required = false,
                                   default = nil)
  if valid_21630147 != nil:
    section.add "ResourcePolicy", valid_21630147
  assert query != nil,
        "query argument is necessary due to required `ActionNames` field"
  var valid_21630148 = query.getOrDefault("ActionNames")
  valid_21630148 = validateParameter(valid_21630148, JArray, required = true,
                                   default = nil)
  if valid_21630148 != nil:
    section.add "ActionNames", valid_21630148
  var valid_21630149 = query.getOrDefault("PolicyInputList")
  valid_21630149 = validateParameter(valid_21630149, JArray, required = true,
                                   default = nil)
  if valid_21630149 != nil:
    section.add "PolicyInputList", valid_21630149
  var valid_21630150 = query.getOrDefault("Action")
  valid_21630150 = validateParameter(valid_21630150, JString, required = true,
                                   default = newJString("SimulateCustomPolicy"))
  if valid_21630150 != nil:
    section.add "Action", valid_21630150
  var valid_21630151 = query.getOrDefault("ResourceArns")
  valid_21630151 = validateParameter(valid_21630151, JArray, required = false,
                                   default = nil)
  if valid_21630151 != nil:
    section.add "ResourceArns", valid_21630151
  var valid_21630152 = query.getOrDefault("Marker")
  valid_21630152 = validateParameter(valid_21630152, JString, required = false,
                                   default = nil)
  if valid_21630152 != nil:
    section.add "Marker", valid_21630152
  var valid_21630153 = query.getOrDefault("PermissionsBoundaryPolicyInputList")
  valid_21630153 = validateParameter(valid_21630153, JArray, required = false,
                                   default = nil)
  if valid_21630153 != nil:
    section.add "PermissionsBoundaryPolicyInputList", valid_21630153
  var valid_21630154 = query.getOrDefault("ResourceOwner")
  valid_21630154 = validateParameter(valid_21630154, JString, required = false,
                                   default = nil)
  if valid_21630154 != nil:
    section.add "ResourceOwner", valid_21630154
  var valid_21630155 = query.getOrDefault("CallerArn")
  valid_21630155 = validateParameter(valid_21630155, JString, required = false,
                                   default = nil)
  if valid_21630155 != nil:
    section.add "CallerArn", valid_21630155
  var valid_21630156 = query.getOrDefault("ResourceHandlingOption")
  valid_21630156 = validateParameter(valid_21630156, JString, required = false,
                                   default = nil)
  if valid_21630156 != nil:
    section.add "ResourceHandlingOption", valid_21630156
  var valid_21630157 = query.getOrDefault("MaxItems")
  valid_21630157 = validateParameter(valid_21630157, JInt, required = false,
                                   default = nil)
  if valid_21630157 != nil:
    section.add "MaxItems", valid_21630157
  var valid_21630158 = query.getOrDefault("Version")
  valid_21630158 = validateParameter(valid_21630158, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630158 != nil:
    section.add "Version", valid_21630158
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630159 = header.getOrDefault("X-Amz-Date")
  valid_21630159 = validateParameter(valid_21630159, JString, required = false,
                                   default = nil)
  if valid_21630159 != nil:
    section.add "X-Amz-Date", valid_21630159
  var valid_21630160 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630160 = validateParameter(valid_21630160, JString, required = false,
                                   default = nil)
  if valid_21630160 != nil:
    section.add "X-Amz-Security-Token", valid_21630160
  var valid_21630161 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630161 = validateParameter(valid_21630161, JString, required = false,
                                   default = nil)
  if valid_21630161 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630161
  var valid_21630162 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630162 = validateParameter(valid_21630162, JString, required = false,
                                   default = nil)
  if valid_21630162 != nil:
    section.add "X-Amz-Algorithm", valid_21630162
  var valid_21630163 = header.getOrDefault("X-Amz-Signature")
  valid_21630163 = validateParameter(valid_21630163, JString, required = false,
                                   default = nil)
  if valid_21630163 != nil:
    section.add "X-Amz-Signature", valid_21630163
  var valid_21630164 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630164 = validateParameter(valid_21630164, JString, required = false,
                                   default = nil)
  if valid_21630164 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630164
  var valid_21630165 = header.getOrDefault("X-Amz-Credential")
  valid_21630165 = validateParameter(valid_21630165, JString, required = false,
                                   default = nil)
  if valid_21630165 != nil:
    section.add "X-Amz-Credential", valid_21630165
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630166: Call_GetSimulateCustomPolicy_21630143;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_21630166.validator(path, query, header, formData, body, _)
  let scheme = call_21630166.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630166.makeUrl(scheme.get, call_21630166.host, call_21630166.base,
                               call_21630166.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630166, uri, valid, _)

proc call*(call_21630167: Call_GetSimulateCustomPolicy_21630143;
          ActionNames: JsonNode; PolicyInputList: JsonNode;
          ContextEntries: JsonNode = nil; ResourcePolicy: string = "";
          Action: string = "SimulateCustomPolicy"; ResourceArns: JsonNode = nil;
          Marker: string = ""; PermissionsBoundaryPolicyInputList: JsonNode = nil;
          ResourceOwner: string = ""; CallerArn: string = "";
          ResourceHandlingOption: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getSimulateCustomPolicy
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that an IAM entity can have. You can input only one permissions boundary when you pass a policy to this operation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string that contains the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceOwner: string
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21630168 = newJObject()
  if ContextEntries != nil:
    query_21630168.add "ContextEntries", ContextEntries
  add(query_21630168, "ResourcePolicy", newJString(ResourcePolicy))
  if ActionNames != nil:
    query_21630168.add "ActionNames", ActionNames
  if PolicyInputList != nil:
    query_21630168.add "PolicyInputList", PolicyInputList
  add(query_21630168, "Action", newJString(Action))
  if ResourceArns != nil:
    query_21630168.add "ResourceArns", ResourceArns
  add(query_21630168, "Marker", newJString(Marker))
  if PermissionsBoundaryPolicyInputList != nil:
    query_21630168.add "PermissionsBoundaryPolicyInputList",
                      PermissionsBoundaryPolicyInputList
  add(query_21630168, "ResourceOwner", newJString(ResourceOwner))
  add(query_21630168, "CallerArn", newJString(CallerArn))
  add(query_21630168, "ResourceHandlingOption", newJString(ResourceHandlingOption))
  add(query_21630168, "MaxItems", newJInt(MaxItems))
  add(query_21630168, "Version", newJString(Version))
  result = call_21630167.call(nil, query_21630168, nil, nil, nil)

var getSimulateCustomPolicy* = Call_GetSimulateCustomPolicy_21630143(
    name: "getSimulateCustomPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SimulateCustomPolicy",
    validator: validate_GetSimulateCustomPolicy_21630144, base: "/",
    makeUrl: url_GetSimulateCustomPolicy_21630145,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSimulatePrincipalPolicy_21630223 = ref object of OpenApiRestCall_21625435
proc url_PostSimulatePrincipalPolicy_21630225(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSimulatePrincipalPolicy_21630224(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630226 = query.getOrDefault("Action")
  valid_21630226 = validateParameter(valid_21630226, JString, required = true, default = newJString(
      "SimulatePrincipalPolicy"))
  if valid_21630226 != nil:
    section.add "Action", valid_21630226
  var valid_21630227 = query.getOrDefault("Version")
  valid_21630227 = validateParameter(valid_21630227, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630227 != nil:
    section.add "Version", valid_21630227
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630228 = header.getOrDefault("X-Amz-Date")
  valid_21630228 = validateParameter(valid_21630228, JString, required = false,
                                   default = nil)
  if valid_21630228 != nil:
    section.add "X-Amz-Date", valid_21630228
  var valid_21630229 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630229 = validateParameter(valid_21630229, JString, required = false,
                                   default = nil)
  if valid_21630229 != nil:
    section.add "X-Amz-Security-Token", valid_21630229
  var valid_21630230 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630230 = validateParameter(valid_21630230, JString, required = false,
                                   default = nil)
  if valid_21630230 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630230
  var valid_21630231 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630231 = validateParameter(valid_21630231, JString, required = false,
                                   default = nil)
  if valid_21630231 != nil:
    section.add "X-Amz-Algorithm", valid_21630231
  var valid_21630232 = header.getOrDefault("X-Amz-Signature")
  valid_21630232 = validateParameter(valid_21630232, JString, required = false,
                                   default = nil)
  if valid_21630232 != nil:
    section.add "X-Amz-Signature", valid_21630232
  var valid_21630233 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630233 = validateParameter(valid_21630233, JString, required = false,
                                   default = nil)
  if valid_21630233 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630233
  var valid_21630234 = header.getOrDefault("X-Amz-Credential")
  valid_21630234 = validateParameter(valid_21630234, JString, required = false,
                                   default = nil)
  if valid_21630234 != nil:
    section.add "X-Amz-Credential", valid_21630234
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceOwner: JString
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permission boundary policy is used for the simulation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  section = newJObject()
  var valid_21630235 = formData.getOrDefault("ResourceArns")
  valid_21630235 = validateParameter(valid_21630235, JArray, required = false,
                                   default = nil)
  if valid_21630235 != nil:
    section.add "ResourceArns", valid_21630235
  var valid_21630236 = formData.getOrDefault("ContextEntries")
  valid_21630236 = validateParameter(valid_21630236, JArray, required = false,
                                   default = nil)
  if valid_21630236 != nil:
    section.add "ContextEntries", valid_21630236
  var valid_21630237 = formData.getOrDefault("CallerArn")
  valid_21630237 = validateParameter(valid_21630237, JString, required = false,
                                   default = nil)
  if valid_21630237 != nil:
    section.add "CallerArn", valid_21630237
  var valid_21630238 = formData.getOrDefault("ResourceOwner")
  valid_21630238 = validateParameter(valid_21630238, JString, required = false,
                                   default = nil)
  if valid_21630238 != nil:
    section.add "ResourceOwner", valid_21630238
  assert formData != nil,
        "formData argument is necessary due to required `ActionNames` field"
  var valid_21630239 = formData.getOrDefault("ActionNames")
  valid_21630239 = validateParameter(valid_21630239, JArray, required = true,
                                   default = nil)
  if valid_21630239 != nil:
    section.add "ActionNames", valid_21630239
  var valid_21630240 = formData.getOrDefault("Marker")
  valid_21630240 = validateParameter(valid_21630240, JString, required = false,
                                   default = nil)
  if valid_21630240 != nil:
    section.add "Marker", valid_21630240
  var valid_21630241 = formData.getOrDefault("PermissionsBoundaryPolicyInputList")
  valid_21630241 = validateParameter(valid_21630241, JArray, required = false,
                                   default = nil)
  if valid_21630241 != nil:
    section.add "PermissionsBoundaryPolicyInputList", valid_21630241
  var valid_21630242 = formData.getOrDefault("PolicyInputList")
  valid_21630242 = validateParameter(valid_21630242, JArray, required = false,
                                   default = nil)
  if valid_21630242 != nil:
    section.add "PolicyInputList", valid_21630242
  var valid_21630243 = formData.getOrDefault("ResourceHandlingOption")
  valid_21630243 = validateParameter(valid_21630243, JString, required = false,
                                   default = nil)
  if valid_21630243 != nil:
    section.add "ResourceHandlingOption", valid_21630243
  var valid_21630244 = formData.getOrDefault("PolicySourceArn")
  valid_21630244 = validateParameter(valid_21630244, JString, required = true,
                                   default = nil)
  if valid_21630244 != nil:
    section.add "PolicySourceArn", valid_21630244
  var valid_21630245 = formData.getOrDefault("MaxItems")
  valid_21630245 = validateParameter(valid_21630245, JInt, required = false,
                                   default = nil)
  if valid_21630245 != nil:
    section.add "MaxItems", valid_21630245
  var valid_21630246 = formData.getOrDefault("ResourcePolicy")
  valid_21630246 = validateParameter(valid_21630246, JString, required = false,
                                   default = nil)
  if valid_21630246 != nil:
    section.add "ResourcePolicy", valid_21630246
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630247: Call_PostSimulatePrincipalPolicy_21630223;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_21630247.validator(path, query, header, formData, body, _)
  let scheme = call_21630247.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630247.makeUrl(scheme.get, call_21630247.host, call_21630247.base,
                               call_21630247.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630247, uri, valid, _)

proc call*(call_21630248: Call_PostSimulatePrincipalPolicy_21630223;
          ActionNames: JsonNode; PolicySourceArn: string;
          ResourceArns: JsonNode = nil; ContextEntries: JsonNode = nil;
          CallerArn: string = ""; ResourceOwner: string = ""; Marker: string = "";
          PermissionsBoundaryPolicyInputList: JsonNode = nil;
          PolicyInputList: JsonNode = nil;
          Action: string = "SimulatePrincipalPolicy";
          ResourceHandlingOption: string = ""; MaxItems: int = 0;
          ResourcePolicy: string = ""; Version: string = "2010-05-08"): Recallable =
  ## postSimulatePrincipalPolicy
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceOwner: string
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permission boundary policy is used for the simulation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Version: string (required)
  var query_21630249 = newJObject()
  var formData_21630250 = newJObject()
  if ResourceArns != nil:
    formData_21630250.add "ResourceArns", ResourceArns
  if ContextEntries != nil:
    formData_21630250.add "ContextEntries", ContextEntries
  add(formData_21630250, "CallerArn", newJString(CallerArn))
  add(formData_21630250, "ResourceOwner", newJString(ResourceOwner))
  if ActionNames != nil:
    formData_21630250.add "ActionNames", ActionNames
  add(formData_21630250, "Marker", newJString(Marker))
  if PermissionsBoundaryPolicyInputList != nil:
    formData_21630250.add "PermissionsBoundaryPolicyInputList",
                         PermissionsBoundaryPolicyInputList
  if PolicyInputList != nil:
    formData_21630250.add "PolicyInputList", PolicyInputList
  add(query_21630249, "Action", newJString(Action))
  add(formData_21630250, "ResourceHandlingOption",
      newJString(ResourceHandlingOption))
  add(formData_21630250, "PolicySourceArn", newJString(PolicySourceArn))
  add(formData_21630250, "MaxItems", newJInt(MaxItems))
  add(formData_21630250, "ResourcePolicy", newJString(ResourcePolicy))
  add(query_21630249, "Version", newJString(Version))
  result = call_21630248.call(nil, query_21630249, nil, formData_21630250, nil)

var postSimulatePrincipalPolicy* = Call_PostSimulatePrincipalPolicy_21630223(
    name: "postSimulatePrincipalPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SimulatePrincipalPolicy",
    validator: validate_PostSimulatePrincipalPolicy_21630224, base: "/",
    makeUrl: url_PostSimulatePrincipalPolicy_21630225,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSimulatePrincipalPolicy_21630196 = ref object of OpenApiRestCall_21625435
proc url_GetSimulatePrincipalPolicy_21630198(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSimulatePrincipalPolicy_21630197(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permission boundary policy is used for the simulation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceOwner: JString
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630199 = query.getOrDefault("ContextEntries")
  valid_21630199 = validateParameter(valid_21630199, JArray, required = false,
                                   default = nil)
  if valid_21630199 != nil:
    section.add "ContextEntries", valid_21630199
  var valid_21630200 = query.getOrDefault("ResourcePolicy")
  valid_21630200 = validateParameter(valid_21630200, JString, required = false,
                                   default = nil)
  if valid_21630200 != nil:
    section.add "ResourcePolicy", valid_21630200
  assert query != nil,
        "query argument is necessary due to required `ActionNames` field"
  var valid_21630201 = query.getOrDefault("ActionNames")
  valid_21630201 = validateParameter(valid_21630201, JArray, required = true,
                                   default = nil)
  if valid_21630201 != nil:
    section.add "ActionNames", valid_21630201
  var valid_21630202 = query.getOrDefault("PolicyInputList")
  valid_21630202 = validateParameter(valid_21630202, JArray, required = false,
                                   default = nil)
  if valid_21630202 != nil:
    section.add "PolicyInputList", valid_21630202
  var valid_21630203 = query.getOrDefault("PolicySourceArn")
  valid_21630203 = validateParameter(valid_21630203, JString, required = true,
                                   default = nil)
  if valid_21630203 != nil:
    section.add "PolicySourceArn", valid_21630203
  var valid_21630204 = query.getOrDefault("Action")
  valid_21630204 = validateParameter(valid_21630204, JString, required = true, default = newJString(
      "SimulatePrincipalPolicy"))
  if valid_21630204 != nil:
    section.add "Action", valid_21630204
  var valid_21630205 = query.getOrDefault("ResourceArns")
  valid_21630205 = validateParameter(valid_21630205, JArray, required = false,
                                   default = nil)
  if valid_21630205 != nil:
    section.add "ResourceArns", valid_21630205
  var valid_21630206 = query.getOrDefault("Marker")
  valid_21630206 = validateParameter(valid_21630206, JString, required = false,
                                   default = nil)
  if valid_21630206 != nil:
    section.add "Marker", valid_21630206
  var valid_21630207 = query.getOrDefault("PermissionsBoundaryPolicyInputList")
  valid_21630207 = validateParameter(valid_21630207, JArray, required = false,
                                   default = nil)
  if valid_21630207 != nil:
    section.add "PermissionsBoundaryPolicyInputList", valid_21630207
  var valid_21630208 = query.getOrDefault("ResourceOwner")
  valid_21630208 = validateParameter(valid_21630208, JString, required = false,
                                   default = nil)
  if valid_21630208 != nil:
    section.add "ResourceOwner", valid_21630208
  var valid_21630209 = query.getOrDefault("CallerArn")
  valid_21630209 = validateParameter(valid_21630209, JString, required = false,
                                   default = nil)
  if valid_21630209 != nil:
    section.add "CallerArn", valid_21630209
  var valid_21630210 = query.getOrDefault("ResourceHandlingOption")
  valid_21630210 = validateParameter(valid_21630210, JString, required = false,
                                   default = nil)
  if valid_21630210 != nil:
    section.add "ResourceHandlingOption", valid_21630210
  var valid_21630211 = query.getOrDefault("MaxItems")
  valid_21630211 = validateParameter(valid_21630211, JInt, required = false,
                                   default = nil)
  if valid_21630211 != nil:
    section.add "MaxItems", valid_21630211
  var valid_21630212 = query.getOrDefault("Version")
  valid_21630212 = validateParameter(valid_21630212, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630212 != nil:
    section.add "Version", valid_21630212
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630213 = header.getOrDefault("X-Amz-Date")
  valid_21630213 = validateParameter(valid_21630213, JString, required = false,
                                   default = nil)
  if valid_21630213 != nil:
    section.add "X-Amz-Date", valid_21630213
  var valid_21630214 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630214 = validateParameter(valid_21630214, JString, required = false,
                                   default = nil)
  if valid_21630214 != nil:
    section.add "X-Amz-Security-Token", valid_21630214
  var valid_21630215 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630215 = validateParameter(valid_21630215, JString, required = false,
                                   default = nil)
  if valid_21630215 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630215
  var valid_21630216 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630216 = validateParameter(valid_21630216, JString, required = false,
                                   default = nil)
  if valid_21630216 != nil:
    section.add "X-Amz-Algorithm", valid_21630216
  var valid_21630217 = header.getOrDefault("X-Amz-Signature")
  valid_21630217 = validateParameter(valid_21630217, JString, required = false,
                                   default = nil)
  if valid_21630217 != nil:
    section.add "X-Amz-Signature", valid_21630217
  var valid_21630218 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630218 = validateParameter(valid_21630218, JString, required = false,
                                   default = nil)
  if valid_21630218 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630218
  var valid_21630219 = header.getOrDefault("X-Amz-Credential")
  valid_21630219 = validateParameter(valid_21630219, JString, required = false,
                                   default = nil)
  if valid_21630219 != nil:
    section.add "X-Amz-Credential", valid_21630219
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630220: Call_GetSimulatePrincipalPolicy_21630196;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_21630220.validator(path, query, header, formData, body, _)
  let scheme = call_21630220.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630220.makeUrl(scheme.get, call_21630220.host, call_21630220.base,
                               call_21630220.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630220, uri, valid, _)

proc call*(call_21630221: Call_GetSimulatePrincipalPolicy_21630196;
          ActionNames: JsonNode; PolicySourceArn: string;
          ContextEntries: JsonNode = nil; ResourcePolicy: string = "";
          PolicyInputList: JsonNode = nil;
          Action: string = "SimulatePrincipalPolicy"; ResourceArns: JsonNode = nil;
          Marker: string = ""; PermissionsBoundaryPolicyInputList: JsonNode = nil;
          ResourceOwner: string = ""; CallerArn: string = "";
          ResourceHandlingOption: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getSimulatePrincipalPolicy
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permission boundary policy is used for the simulation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceOwner: string
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_21630222 = newJObject()
  if ContextEntries != nil:
    query_21630222.add "ContextEntries", ContextEntries
  add(query_21630222, "ResourcePolicy", newJString(ResourcePolicy))
  if ActionNames != nil:
    query_21630222.add "ActionNames", ActionNames
  if PolicyInputList != nil:
    query_21630222.add "PolicyInputList", PolicyInputList
  add(query_21630222, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_21630222, "Action", newJString(Action))
  if ResourceArns != nil:
    query_21630222.add "ResourceArns", ResourceArns
  add(query_21630222, "Marker", newJString(Marker))
  if PermissionsBoundaryPolicyInputList != nil:
    query_21630222.add "PermissionsBoundaryPolicyInputList",
                      PermissionsBoundaryPolicyInputList
  add(query_21630222, "ResourceOwner", newJString(ResourceOwner))
  add(query_21630222, "CallerArn", newJString(CallerArn))
  add(query_21630222, "ResourceHandlingOption", newJString(ResourceHandlingOption))
  add(query_21630222, "MaxItems", newJInt(MaxItems))
  add(query_21630222, "Version", newJString(Version))
  result = call_21630221.call(nil, query_21630222, nil, nil, nil)

var getSimulatePrincipalPolicy* = Call_GetSimulatePrincipalPolicy_21630196(
    name: "getSimulatePrincipalPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SimulatePrincipalPolicy",
    validator: validate_GetSimulatePrincipalPolicy_21630197, base: "/",
    makeUrl: url_GetSimulatePrincipalPolicy_21630198,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTagRole_21630268 = ref object of OpenApiRestCall_21625435
proc url_PostTagRole_21630270(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTagRole_21630269(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630271 = query.getOrDefault("Action")
  valid_21630271 = validateParameter(valid_21630271, JString, required = true,
                                   default = newJString("TagRole"))
  if valid_21630271 != nil:
    section.add "Action", valid_21630271
  var valid_21630272 = query.getOrDefault("Version")
  valid_21630272 = validateParameter(valid_21630272, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630272 != nil:
    section.add "Version", valid_21630272
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630273 = header.getOrDefault("X-Amz-Date")
  valid_21630273 = validateParameter(valid_21630273, JString, required = false,
                                   default = nil)
  if valid_21630273 != nil:
    section.add "X-Amz-Date", valid_21630273
  var valid_21630274 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630274 = validateParameter(valid_21630274, JString, required = false,
                                   default = nil)
  if valid_21630274 != nil:
    section.add "X-Amz-Security-Token", valid_21630274
  var valid_21630275 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630275 = validateParameter(valid_21630275, JString, required = false,
                                   default = nil)
  if valid_21630275 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630275
  var valid_21630276 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630276 = validateParameter(valid_21630276, JString, required = false,
                                   default = nil)
  if valid_21630276 != nil:
    section.add "X-Amz-Algorithm", valid_21630276
  var valid_21630277 = header.getOrDefault("X-Amz-Signature")
  valid_21630277 = validateParameter(valid_21630277, JString, required = false,
                                   default = nil)
  if valid_21630277 != nil:
    section.add "X-Amz-Signature", valid_21630277
  var valid_21630278 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630278 = validateParameter(valid_21630278, JString, required = false,
                                   default = nil)
  if valid_21630278 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630278
  var valid_21630279 = header.getOrDefault("X-Amz-Credential")
  valid_21630279 = validateParameter(valid_21630279, JString, required = false,
                                   default = nil)
  if valid_21630279 != nil:
    section.add "X-Amz-Credential", valid_21630279
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_21630280 = formData.getOrDefault("RoleName")
  valid_21630280 = validateParameter(valid_21630280, JString, required = true,
                                   default = nil)
  if valid_21630280 != nil:
    section.add "RoleName", valid_21630280
  var valid_21630281 = formData.getOrDefault("Tags")
  valid_21630281 = validateParameter(valid_21630281, JArray, required = true,
                                   default = nil)
  if valid_21630281 != nil:
    section.add "Tags", valid_21630281
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630282: Call_PostTagRole_21630268; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21630282.validator(path, query, header, formData, body, _)
  let scheme = call_21630282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630282.makeUrl(scheme.get, call_21630282.host, call_21630282.base,
                               call_21630282.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630282, uri, valid, _)

proc call*(call_21630283: Call_PostTagRole_21630268; RoleName: string;
          Tags: JsonNode; Action: string = "TagRole"; Version: string = "2010-05-08"): Recallable =
  ## postTagRole
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630284 = newJObject()
  var formData_21630285 = newJObject()
  add(formData_21630285, "RoleName", newJString(RoleName))
  if Tags != nil:
    formData_21630285.add "Tags", Tags
  add(query_21630284, "Action", newJString(Action))
  add(query_21630284, "Version", newJString(Version))
  result = call_21630283.call(nil, query_21630284, nil, formData_21630285, nil)

var postTagRole* = Call_PostTagRole_21630268(name: "postTagRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com", route: "/#Action=TagRole",
    validator: validate_PostTagRole_21630269, base: "/", makeUrl: url_PostTagRole_21630270,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTagRole_21630251 = ref object of OpenApiRestCall_21625435
proc url_GetTagRole_21630253(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTagRole_21630252(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_21630254 = query.getOrDefault("Tags")
  valid_21630254 = validateParameter(valid_21630254, JArray, required = true,
                                   default = nil)
  if valid_21630254 != nil:
    section.add "Tags", valid_21630254
  var valid_21630255 = query.getOrDefault("Action")
  valid_21630255 = validateParameter(valid_21630255, JString, required = true,
                                   default = newJString("TagRole"))
  if valid_21630255 != nil:
    section.add "Action", valid_21630255
  var valid_21630256 = query.getOrDefault("RoleName")
  valid_21630256 = validateParameter(valid_21630256, JString, required = true,
                                   default = nil)
  if valid_21630256 != nil:
    section.add "RoleName", valid_21630256
  var valid_21630257 = query.getOrDefault("Version")
  valid_21630257 = validateParameter(valid_21630257, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630257 != nil:
    section.add "Version", valid_21630257
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630258 = header.getOrDefault("X-Amz-Date")
  valid_21630258 = validateParameter(valid_21630258, JString, required = false,
                                   default = nil)
  if valid_21630258 != nil:
    section.add "X-Amz-Date", valid_21630258
  var valid_21630259 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630259 = validateParameter(valid_21630259, JString, required = false,
                                   default = nil)
  if valid_21630259 != nil:
    section.add "X-Amz-Security-Token", valid_21630259
  var valid_21630260 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630260 = validateParameter(valid_21630260, JString, required = false,
                                   default = nil)
  if valid_21630260 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630260
  var valid_21630261 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630261 = validateParameter(valid_21630261, JString, required = false,
                                   default = nil)
  if valid_21630261 != nil:
    section.add "X-Amz-Algorithm", valid_21630261
  var valid_21630262 = header.getOrDefault("X-Amz-Signature")
  valid_21630262 = validateParameter(valid_21630262, JString, required = false,
                                   default = nil)
  if valid_21630262 != nil:
    section.add "X-Amz-Signature", valid_21630262
  var valid_21630263 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630263 = validateParameter(valid_21630263, JString, required = false,
                                   default = nil)
  if valid_21630263 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630263
  var valid_21630264 = header.getOrDefault("X-Amz-Credential")
  valid_21630264 = validateParameter(valid_21630264, JString, required = false,
                                   default = nil)
  if valid_21630264 != nil:
    section.add "X-Amz-Credential", valid_21630264
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630265: Call_GetTagRole_21630251; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21630265.validator(path, query, header, formData, body, _)
  let scheme = call_21630265.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630265.makeUrl(scheme.get, call_21630265.host, call_21630265.base,
                               call_21630265.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630265, uri, valid, _)

proc call*(call_21630266: Call_GetTagRole_21630251; Tags: JsonNode; RoleName: string;
          Action: string = "TagRole"; Version: string = "2010-05-08"): Recallable =
  ## getTagRole
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21630267 = newJObject()
  if Tags != nil:
    query_21630267.add "Tags", Tags
  add(query_21630267, "Action", newJString(Action))
  add(query_21630267, "RoleName", newJString(RoleName))
  add(query_21630267, "Version", newJString(Version))
  result = call_21630266.call(nil, query_21630267, nil, nil, nil)

var getTagRole* = Call_GetTagRole_21630251(name: "getTagRole",
                                        meth: HttpMethod.HttpGet,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=TagRole",
                                        validator: validate_GetTagRole_21630252,
                                        base: "/", makeUrl: url_GetTagRole_21630253,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTagUser_21630303 = ref object of OpenApiRestCall_21625435
proc url_PostTagUser_21630305(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTagUser_21630304(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630306 = query.getOrDefault("Action")
  valid_21630306 = validateParameter(valid_21630306, JString, required = true,
                                   default = newJString("TagUser"))
  if valid_21630306 != nil:
    section.add "Action", valid_21630306
  var valid_21630307 = query.getOrDefault("Version")
  valid_21630307 = validateParameter(valid_21630307, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630307 != nil:
    section.add "Version", valid_21630307
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630308 = header.getOrDefault("X-Amz-Date")
  valid_21630308 = validateParameter(valid_21630308, JString, required = false,
                                   default = nil)
  if valid_21630308 != nil:
    section.add "X-Amz-Date", valid_21630308
  var valid_21630309 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630309 = validateParameter(valid_21630309, JString, required = false,
                                   default = nil)
  if valid_21630309 != nil:
    section.add "X-Amz-Security-Token", valid_21630309
  var valid_21630310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630310 = validateParameter(valid_21630310, JString, required = false,
                                   default = nil)
  if valid_21630310 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630310
  var valid_21630311 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630311 = validateParameter(valid_21630311, JString, required = false,
                                   default = nil)
  if valid_21630311 != nil:
    section.add "X-Amz-Algorithm", valid_21630311
  var valid_21630312 = header.getOrDefault("X-Amz-Signature")
  valid_21630312 = validateParameter(valid_21630312, JString, required = false,
                                   default = nil)
  if valid_21630312 != nil:
    section.add "X-Amz-Signature", valid_21630312
  var valid_21630313 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630313 = validateParameter(valid_21630313, JString, required = false,
                                   default = nil)
  if valid_21630313 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630313
  var valid_21630314 = header.getOrDefault("X-Amz-Credential")
  valid_21630314 = validateParameter(valid_21630314, JString, required = false,
                                   default = nil)
  if valid_21630314 != nil:
    section.add "X-Amz-Credential", valid_21630314
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21630315 = formData.getOrDefault("UserName")
  valid_21630315 = validateParameter(valid_21630315, JString, required = true,
                                   default = nil)
  if valid_21630315 != nil:
    section.add "UserName", valid_21630315
  var valid_21630316 = formData.getOrDefault("Tags")
  valid_21630316 = validateParameter(valid_21630316, JArray, required = true,
                                   default = nil)
  if valid_21630316 != nil:
    section.add "Tags", valid_21630316
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630317: Call_PostTagUser_21630303; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21630317.validator(path, query, header, formData, body, _)
  let scheme = call_21630317.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630317.makeUrl(scheme.get, call_21630317.host, call_21630317.base,
                               call_21630317.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630317, uri, valid, _)

proc call*(call_21630318: Call_PostTagUser_21630303; UserName: string;
          Tags: JsonNode; Action: string = "TagUser"; Version: string = "2010-05-08"): Recallable =
  ## postTagUser
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630319 = newJObject()
  var formData_21630320 = newJObject()
  add(formData_21630320, "UserName", newJString(UserName))
  if Tags != nil:
    formData_21630320.add "Tags", Tags
  add(query_21630319, "Action", newJString(Action))
  add(query_21630319, "Version", newJString(Version))
  result = call_21630318.call(nil, query_21630319, nil, formData_21630320, nil)

var postTagUser* = Call_PostTagUser_21630303(name: "postTagUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com", route: "/#Action=TagUser",
    validator: validate_PostTagUser_21630304, base: "/", makeUrl: url_PostTagUser_21630305,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTagUser_21630286 = ref object of OpenApiRestCall_21625435
proc url_GetTagUser_21630288(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTagUser_21630287(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   UserName: JString (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_21630289 = query.getOrDefault("Tags")
  valid_21630289 = validateParameter(valid_21630289, JArray, required = true,
                                   default = nil)
  if valid_21630289 != nil:
    section.add "Tags", valid_21630289
  var valid_21630290 = query.getOrDefault("UserName")
  valid_21630290 = validateParameter(valid_21630290, JString, required = true,
                                   default = nil)
  if valid_21630290 != nil:
    section.add "UserName", valid_21630290
  var valid_21630291 = query.getOrDefault("Action")
  valid_21630291 = validateParameter(valid_21630291, JString, required = true,
                                   default = newJString("TagUser"))
  if valid_21630291 != nil:
    section.add "Action", valid_21630291
  var valid_21630292 = query.getOrDefault("Version")
  valid_21630292 = validateParameter(valid_21630292, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630292 != nil:
    section.add "Version", valid_21630292
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630293 = header.getOrDefault("X-Amz-Date")
  valid_21630293 = validateParameter(valid_21630293, JString, required = false,
                                   default = nil)
  if valid_21630293 != nil:
    section.add "X-Amz-Date", valid_21630293
  var valid_21630294 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630294 = validateParameter(valid_21630294, JString, required = false,
                                   default = nil)
  if valid_21630294 != nil:
    section.add "X-Amz-Security-Token", valid_21630294
  var valid_21630295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630295 = validateParameter(valid_21630295, JString, required = false,
                                   default = nil)
  if valid_21630295 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630295
  var valid_21630296 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630296 = validateParameter(valid_21630296, JString, required = false,
                                   default = nil)
  if valid_21630296 != nil:
    section.add "X-Amz-Algorithm", valid_21630296
  var valid_21630297 = header.getOrDefault("X-Amz-Signature")
  valid_21630297 = validateParameter(valid_21630297, JString, required = false,
                                   default = nil)
  if valid_21630297 != nil:
    section.add "X-Amz-Signature", valid_21630297
  var valid_21630298 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630298 = validateParameter(valid_21630298, JString, required = false,
                                   default = nil)
  if valid_21630298 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630298
  var valid_21630299 = header.getOrDefault("X-Amz-Credential")
  valid_21630299 = validateParameter(valid_21630299, JString, required = false,
                                   default = nil)
  if valid_21630299 != nil:
    section.add "X-Amz-Credential", valid_21630299
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630300: Call_GetTagUser_21630286; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21630300.validator(path, query, header, formData, body, _)
  let scheme = call_21630300.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630300.makeUrl(scheme.get, call_21630300.host, call_21630300.base,
                               call_21630300.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630300, uri, valid, _)

proc call*(call_21630301: Call_GetTagUser_21630286; Tags: JsonNode; UserName: string;
          Action: string = "TagUser"; Version: string = "2010-05-08"): Recallable =
  ## getTagUser
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   UserName: string (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630302 = newJObject()
  if Tags != nil:
    query_21630302.add "Tags", Tags
  add(query_21630302, "UserName", newJString(UserName))
  add(query_21630302, "Action", newJString(Action))
  add(query_21630302, "Version", newJString(Version))
  result = call_21630301.call(nil, query_21630302, nil, nil, nil)

var getTagUser* = Call_GetTagUser_21630286(name: "getTagUser",
                                        meth: HttpMethod.HttpGet,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=TagUser",
                                        validator: validate_GetTagUser_21630287,
                                        base: "/", makeUrl: url_GetTagUser_21630288,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUntagRole_21630338 = ref object of OpenApiRestCall_21625435
proc url_PostUntagRole_21630340(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUntagRole_21630339(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630341 = query.getOrDefault("Action")
  valid_21630341 = validateParameter(valid_21630341, JString, required = true,
                                   default = newJString("UntagRole"))
  if valid_21630341 != nil:
    section.add "Action", valid_21630341
  var valid_21630342 = query.getOrDefault("Version")
  valid_21630342 = validateParameter(valid_21630342, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630342 != nil:
    section.add "Version", valid_21630342
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630343 = header.getOrDefault("X-Amz-Date")
  valid_21630343 = validateParameter(valid_21630343, JString, required = false,
                                   default = nil)
  if valid_21630343 != nil:
    section.add "X-Amz-Date", valid_21630343
  var valid_21630344 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630344 = validateParameter(valid_21630344, JString, required = false,
                                   default = nil)
  if valid_21630344 != nil:
    section.add "X-Amz-Security-Token", valid_21630344
  var valid_21630345 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630345 = validateParameter(valid_21630345, JString, required = false,
                                   default = nil)
  if valid_21630345 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630345
  var valid_21630346 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630346 = validateParameter(valid_21630346, JString, required = false,
                                   default = nil)
  if valid_21630346 != nil:
    section.add "X-Amz-Algorithm", valid_21630346
  var valid_21630347 = header.getOrDefault("X-Amz-Signature")
  valid_21630347 = validateParameter(valid_21630347, JString, required = false,
                                   default = nil)
  if valid_21630347 != nil:
    section.add "X-Amz-Signature", valid_21630347
  var valid_21630348 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630348 = validateParameter(valid_21630348, JString, required = false,
                                   default = nil)
  if valid_21630348 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630348
  var valid_21630349 = header.getOrDefault("X-Amz-Credential")
  valid_21630349 = validateParameter(valid_21630349, JString, required = false,
                                   default = nil)
  if valid_21630349 != nil:
    section.add "X-Amz-Credential", valid_21630349
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_21630350 = formData.getOrDefault("RoleName")
  valid_21630350 = validateParameter(valid_21630350, JString, required = true,
                                   default = nil)
  if valid_21630350 != nil:
    section.add "RoleName", valid_21630350
  var valid_21630351 = formData.getOrDefault("TagKeys")
  valid_21630351 = validateParameter(valid_21630351, JArray, required = true,
                                   default = nil)
  if valid_21630351 != nil:
    section.add "TagKeys", valid_21630351
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630352: Call_PostUntagRole_21630338; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21630352.validator(path, query, header, formData, body, _)
  let scheme = call_21630352.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630352.makeUrl(scheme.get, call_21630352.host, call_21630352.base,
                               call_21630352.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630352, uri, valid, _)

proc call*(call_21630353: Call_PostUntagRole_21630338; RoleName: string;
          TagKeys: JsonNode; Action: string = "UntagRole";
          Version: string = "2010-05-08"): Recallable =
  ## postUntagRole
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   Version: string (required)
  var query_21630354 = newJObject()
  var formData_21630355 = newJObject()
  add(formData_21630355, "RoleName", newJString(RoleName))
  add(query_21630354, "Action", newJString(Action))
  if TagKeys != nil:
    formData_21630355.add "TagKeys", TagKeys
  add(query_21630354, "Version", newJString(Version))
  result = call_21630353.call(nil, query_21630354, nil, formData_21630355, nil)

var postUntagRole* = Call_PostUntagRole_21630338(name: "postUntagRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UntagRole", validator: validate_PostUntagRole_21630339,
    base: "/", makeUrl: url_PostUntagRole_21630340,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUntagRole_21630321 = ref object of OpenApiRestCall_21625435
proc url_GetUntagRole_21630323(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUntagRole_21630322(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630324 = query.getOrDefault("Action")
  valid_21630324 = validateParameter(valid_21630324, JString, required = true,
                                   default = newJString("UntagRole"))
  if valid_21630324 != nil:
    section.add "Action", valid_21630324
  var valid_21630325 = query.getOrDefault("TagKeys")
  valid_21630325 = validateParameter(valid_21630325, JArray, required = true,
                                   default = nil)
  if valid_21630325 != nil:
    section.add "TagKeys", valid_21630325
  var valid_21630326 = query.getOrDefault("RoleName")
  valid_21630326 = validateParameter(valid_21630326, JString, required = true,
                                   default = nil)
  if valid_21630326 != nil:
    section.add "RoleName", valid_21630326
  var valid_21630327 = query.getOrDefault("Version")
  valid_21630327 = validateParameter(valid_21630327, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630327 != nil:
    section.add "Version", valid_21630327
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630328 = header.getOrDefault("X-Amz-Date")
  valid_21630328 = validateParameter(valid_21630328, JString, required = false,
                                   default = nil)
  if valid_21630328 != nil:
    section.add "X-Amz-Date", valid_21630328
  var valid_21630329 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630329 = validateParameter(valid_21630329, JString, required = false,
                                   default = nil)
  if valid_21630329 != nil:
    section.add "X-Amz-Security-Token", valid_21630329
  var valid_21630330 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630330 = validateParameter(valid_21630330, JString, required = false,
                                   default = nil)
  if valid_21630330 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630330
  var valid_21630331 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630331 = validateParameter(valid_21630331, JString, required = false,
                                   default = nil)
  if valid_21630331 != nil:
    section.add "X-Amz-Algorithm", valid_21630331
  var valid_21630332 = header.getOrDefault("X-Amz-Signature")
  valid_21630332 = validateParameter(valid_21630332, JString, required = false,
                                   default = nil)
  if valid_21630332 != nil:
    section.add "X-Amz-Signature", valid_21630332
  var valid_21630333 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630333 = validateParameter(valid_21630333, JString, required = false,
                                   default = nil)
  if valid_21630333 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630333
  var valid_21630334 = header.getOrDefault("X-Amz-Credential")
  valid_21630334 = validateParameter(valid_21630334, JString, required = false,
                                   default = nil)
  if valid_21630334 != nil:
    section.add "X-Amz-Credential", valid_21630334
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630335: Call_GetUntagRole_21630321; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21630335.validator(path, query, header, formData, body, _)
  let scheme = call_21630335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630335.makeUrl(scheme.get, call_21630335.host, call_21630335.base,
                               call_21630335.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630335, uri, valid, _)

proc call*(call_21630336: Call_GetUntagRole_21630321; TagKeys: JsonNode;
          RoleName: string; Action: string = "UntagRole";
          Version: string = "2010-05-08"): Recallable =
  ## getUntagRole
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21630337 = newJObject()
  add(query_21630337, "Action", newJString(Action))
  if TagKeys != nil:
    query_21630337.add "TagKeys", TagKeys
  add(query_21630337, "RoleName", newJString(RoleName))
  add(query_21630337, "Version", newJString(Version))
  result = call_21630336.call(nil, query_21630337, nil, nil, nil)

var getUntagRole* = Call_GetUntagRole_21630321(name: "getUntagRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UntagRole", validator: validate_GetUntagRole_21630322,
    base: "/", makeUrl: url_GetUntagRole_21630323,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUntagUser_21630373 = ref object of OpenApiRestCall_21625435
proc url_PostUntagUser_21630375(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUntagUser_21630374(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630376 = query.getOrDefault("Action")
  valid_21630376 = validateParameter(valid_21630376, JString, required = true,
                                   default = newJString("UntagUser"))
  if valid_21630376 != nil:
    section.add "Action", valid_21630376
  var valid_21630377 = query.getOrDefault("Version")
  valid_21630377 = validateParameter(valid_21630377, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630377 != nil:
    section.add "Version", valid_21630377
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630378 = header.getOrDefault("X-Amz-Date")
  valid_21630378 = validateParameter(valid_21630378, JString, required = false,
                                   default = nil)
  if valid_21630378 != nil:
    section.add "X-Amz-Date", valid_21630378
  var valid_21630379 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630379 = validateParameter(valid_21630379, JString, required = false,
                                   default = nil)
  if valid_21630379 != nil:
    section.add "X-Amz-Security-Token", valid_21630379
  var valid_21630380 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630380 = validateParameter(valid_21630380, JString, required = false,
                                   default = nil)
  if valid_21630380 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630380
  var valid_21630381 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630381 = validateParameter(valid_21630381, JString, required = false,
                                   default = nil)
  if valid_21630381 != nil:
    section.add "X-Amz-Algorithm", valid_21630381
  var valid_21630382 = header.getOrDefault("X-Amz-Signature")
  valid_21630382 = validateParameter(valid_21630382, JString, required = false,
                                   default = nil)
  if valid_21630382 != nil:
    section.add "X-Amz-Signature", valid_21630382
  var valid_21630383 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630383 = validateParameter(valid_21630383, JString, required = false,
                                   default = nil)
  if valid_21630383 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630383
  var valid_21630384 = header.getOrDefault("X-Amz-Credential")
  valid_21630384 = validateParameter(valid_21630384, JString, required = false,
                                   default = nil)
  if valid_21630384 != nil:
    section.add "X-Amz-Credential", valid_21630384
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21630385 = formData.getOrDefault("UserName")
  valid_21630385 = validateParameter(valid_21630385, JString, required = true,
                                   default = nil)
  if valid_21630385 != nil:
    section.add "UserName", valid_21630385
  var valid_21630386 = formData.getOrDefault("TagKeys")
  valid_21630386 = validateParameter(valid_21630386, JArray, required = true,
                                   default = nil)
  if valid_21630386 != nil:
    section.add "TagKeys", valid_21630386
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630387: Call_PostUntagUser_21630373; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21630387.validator(path, query, header, formData, body, _)
  let scheme = call_21630387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630387.makeUrl(scheme.get, call_21630387.host, call_21630387.base,
                               call_21630387.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630387, uri, valid, _)

proc call*(call_21630388: Call_PostUntagUser_21630373; UserName: string;
          TagKeys: JsonNode; Action: string = "UntagUser";
          Version: string = "2010-05-08"): Recallable =
  ## postUntagUser
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Version: string (required)
  var query_21630389 = newJObject()
  var formData_21630390 = newJObject()
  add(formData_21630390, "UserName", newJString(UserName))
  add(query_21630389, "Action", newJString(Action))
  if TagKeys != nil:
    formData_21630390.add "TagKeys", TagKeys
  add(query_21630389, "Version", newJString(Version))
  result = call_21630388.call(nil, query_21630389, nil, formData_21630390, nil)

var postUntagUser* = Call_PostUntagUser_21630373(name: "postUntagUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UntagUser", validator: validate_PostUntagUser_21630374,
    base: "/", makeUrl: url_PostUntagUser_21630375,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUntagUser_21630356 = ref object of OpenApiRestCall_21625435
proc url_GetUntagUser_21630358(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUntagUser_21630357(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: JString (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_21630359 = query.getOrDefault("UserName")
  valid_21630359 = validateParameter(valid_21630359, JString, required = true,
                                   default = nil)
  if valid_21630359 != nil:
    section.add "UserName", valid_21630359
  var valid_21630360 = query.getOrDefault("Action")
  valid_21630360 = validateParameter(valid_21630360, JString, required = true,
                                   default = newJString("UntagUser"))
  if valid_21630360 != nil:
    section.add "Action", valid_21630360
  var valid_21630361 = query.getOrDefault("TagKeys")
  valid_21630361 = validateParameter(valid_21630361, JArray, required = true,
                                   default = nil)
  if valid_21630361 != nil:
    section.add "TagKeys", valid_21630361
  var valid_21630362 = query.getOrDefault("Version")
  valid_21630362 = validateParameter(valid_21630362, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630362 != nil:
    section.add "Version", valid_21630362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630363 = header.getOrDefault("X-Amz-Date")
  valid_21630363 = validateParameter(valid_21630363, JString, required = false,
                                   default = nil)
  if valid_21630363 != nil:
    section.add "X-Amz-Date", valid_21630363
  var valid_21630364 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630364 = validateParameter(valid_21630364, JString, required = false,
                                   default = nil)
  if valid_21630364 != nil:
    section.add "X-Amz-Security-Token", valid_21630364
  var valid_21630365 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630365 = validateParameter(valid_21630365, JString, required = false,
                                   default = nil)
  if valid_21630365 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630365
  var valid_21630366 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630366 = validateParameter(valid_21630366, JString, required = false,
                                   default = nil)
  if valid_21630366 != nil:
    section.add "X-Amz-Algorithm", valid_21630366
  var valid_21630367 = header.getOrDefault("X-Amz-Signature")
  valid_21630367 = validateParameter(valid_21630367, JString, required = false,
                                   default = nil)
  if valid_21630367 != nil:
    section.add "X-Amz-Signature", valid_21630367
  var valid_21630368 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630368 = validateParameter(valid_21630368, JString, required = false,
                                   default = nil)
  if valid_21630368 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630368
  var valid_21630369 = header.getOrDefault("X-Amz-Credential")
  valid_21630369 = validateParameter(valid_21630369, JString, required = false,
                                   default = nil)
  if valid_21630369 != nil:
    section.add "X-Amz-Credential", valid_21630369
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630370: Call_GetUntagUser_21630356; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_21630370.validator(path, query, header, formData, body, _)
  let scheme = call_21630370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630370.makeUrl(scheme.get, call_21630370.host, call_21630370.base,
                               call_21630370.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630370, uri, valid, _)

proc call*(call_21630371: Call_GetUntagUser_21630356; UserName: string;
          TagKeys: JsonNode; Action: string = "UntagUser";
          Version: string = "2010-05-08"): Recallable =
  ## getUntagUser
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Version: string (required)
  var query_21630372 = newJObject()
  add(query_21630372, "UserName", newJString(UserName))
  add(query_21630372, "Action", newJString(Action))
  if TagKeys != nil:
    query_21630372.add "TagKeys", TagKeys
  add(query_21630372, "Version", newJString(Version))
  result = call_21630371.call(nil, query_21630372, nil, nil, nil)

var getUntagUser* = Call_GetUntagUser_21630356(name: "getUntagUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UntagUser", validator: validate_GetUntagUser_21630357,
    base: "/", makeUrl: url_GetUntagUser_21630358,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccessKey_21630409 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateAccessKey_21630411(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAccessKey_21630410(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630412 = query.getOrDefault("Action")
  valid_21630412 = validateParameter(valid_21630412, JString, required = true,
                                   default = newJString("UpdateAccessKey"))
  if valid_21630412 != nil:
    section.add "Action", valid_21630412
  var valid_21630413 = query.getOrDefault("Version")
  valid_21630413 = validateParameter(valid_21630413, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630413 != nil:
    section.add "Version", valid_21630413
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630414 = header.getOrDefault("X-Amz-Date")
  valid_21630414 = validateParameter(valid_21630414, JString, required = false,
                                   default = nil)
  if valid_21630414 != nil:
    section.add "X-Amz-Date", valid_21630414
  var valid_21630415 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630415 = validateParameter(valid_21630415, JString, required = false,
                                   default = nil)
  if valid_21630415 != nil:
    section.add "X-Amz-Security-Token", valid_21630415
  var valid_21630416 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630416 = validateParameter(valid_21630416, JString, required = false,
                                   default = nil)
  if valid_21630416 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630416
  var valid_21630417 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630417 = validateParameter(valid_21630417, JString, required = false,
                                   default = nil)
  if valid_21630417 != nil:
    section.add "X-Amz-Algorithm", valid_21630417
  var valid_21630418 = header.getOrDefault("X-Amz-Signature")
  valid_21630418 = validateParameter(valid_21630418, JString, required = false,
                                   default = nil)
  if valid_21630418 != nil:
    section.add "X-Amz-Signature", valid_21630418
  var valid_21630419 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630419 = validateParameter(valid_21630419, JString, required = false,
                                   default = nil)
  if valid_21630419 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630419
  var valid_21630420 = header.getOrDefault("X-Amz-Credential")
  valid_21630420 = validateParameter(valid_21630420, JString, required = false,
                                   default = nil)
  if valid_21630420 != nil:
    section.add "X-Amz-Credential", valid_21630420
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  section = newJObject()
  var valid_21630421 = formData.getOrDefault("UserName")
  valid_21630421 = validateParameter(valid_21630421, JString, required = false,
                                   default = nil)
  if valid_21630421 != nil:
    section.add "UserName", valid_21630421
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_21630422 = formData.getOrDefault("AccessKeyId")
  valid_21630422 = validateParameter(valid_21630422, JString, required = true,
                                   default = nil)
  if valid_21630422 != nil:
    section.add "AccessKeyId", valid_21630422
  var valid_21630423 = formData.getOrDefault("Status")
  valid_21630423 = validateParameter(valid_21630423, JString, required = true,
                                   default = newJString("Active"))
  if valid_21630423 != nil:
    section.add "Status", valid_21630423
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630424: Call_PostUpdateAccessKey_21630409; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21630424.validator(path, query, header, formData, body, _)
  let scheme = call_21630424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630424.makeUrl(scheme.get, call_21630424.host, call_21630424.base,
                               call_21630424.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630424, uri, valid, _)

proc call*(call_21630425: Call_PostUpdateAccessKey_21630409; AccessKeyId: string;
          UserName: string = ""; Status: string = "Active";
          Action: string = "UpdateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateAccessKey
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630426 = newJObject()
  var formData_21630427 = newJObject()
  add(formData_21630427, "UserName", newJString(UserName))
  add(formData_21630427, "AccessKeyId", newJString(AccessKeyId))
  add(formData_21630427, "Status", newJString(Status))
  add(query_21630426, "Action", newJString(Action))
  add(query_21630426, "Version", newJString(Version))
  result = call_21630425.call(nil, query_21630426, nil, formData_21630427, nil)

var postUpdateAccessKey* = Call_PostUpdateAccessKey_21630409(
    name: "postUpdateAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccessKey",
    validator: validate_PostUpdateAccessKey_21630410, base: "/",
    makeUrl: url_PostUpdateAccessKey_21630411,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccessKey_21630391 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateAccessKey_21630393(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAccessKey_21630392(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630394 = query.getOrDefault("Status")
  valid_21630394 = validateParameter(valid_21630394, JString, required = true,
                                   default = newJString("Active"))
  if valid_21630394 != nil:
    section.add "Status", valid_21630394
  var valid_21630395 = query.getOrDefault("AccessKeyId")
  valid_21630395 = validateParameter(valid_21630395, JString, required = true,
                                   default = nil)
  if valid_21630395 != nil:
    section.add "AccessKeyId", valid_21630395
  var valid_21630396 = query.getOrDefault("UserName")
  valid_21630396 = validateParameter(valid_21630396, JString, required = false,
                                   default = nil)
  if valid_21630396 != nil:
    section.add "UserName", valid_21630396
  var valid_21630397 = query.getOrDefault("Action")
  valid_21630397 = validateParameter(valid_21630397, JString, required = true,
                                   default = newJString("UpdateAccessKey"))
  if valid_21630397 != nil:
    section.add "Action", valid_21630397
  var valid_21630398 = query.getOrDefault("Version")
  valid_21630398 = validateParameter(valid_21630398, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630398 != nil:
    section.add "Version", valid_21630398
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630399 = header.getOrDefault("X-Amz-Date")
  valid_21630399 = validateParameter(valid_21630399, JString, required = false,
                                   default = nil)
  if valid_21630399 != nil:
    section.add "X-Amz-Date", valid_21630399
  var valid_21630400 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630400 = validateParameter(valid_21630400, JString, required = false,
                                   default = nil)
  if valid_21630400 != nil:
    section.add "X-Amz-Security-Token", valid_21630400
  var valid_21630401 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630401 = validateParameter(valid_21630401, JString, required = false,
                                   default = nil)
  if valid_21630401 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630401
  var valid_21630402 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630402 = validateParameter(valid_21630402, JString, required = false,
                                   default = nil)
  if valid_21630402 != nil:
    section.add "X-Amz-Algorithm", valid_21630402
  var valid_21630403 = header.getOrDefault("X-Amz-Signature")
  valid_21630403 = validateParameter(valid_21630403, JString, required = false,
                                   default = nil)
  if valid_21630403 != nil:
    section.add "X-Amz-Signature", valid_21630403
  var valid_21630404 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630404 = validateParameter(valid_21630404, JString, required = false,
                                   default = nil)
  if valid_21630404 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630404
  var valid_21630405 = header.getOrDefault("X-Amz-Credential")
  valid_21630405 = validateParameter(valid_21630405, JString, required = false,
                                   default = nil)
  if valid_21630405 != nil:
    section.add "X-Amz-Credential", valid_21630405
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630406: Call_GetUpdateAccessKey_21630391; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21630406.validator(path, query, header, formData, body, _)
  let scheme = call_21630406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630406.makeUrl(scheme.get, call_21630406.host, call_21630406.base,
                               call_21630406.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630406, uri, valid, _)

proc call*(call_21630407: Call_GetUpdateAccessKey_21630391; AccessKeyId: string;
          Status: string = "Active"; UserName: string = "";
          Action: string = "UpdateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateAccessKey
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630408 = newJObject()
  add(query_21630408, "Status", newJString(Status))
  add(query_21630408, "AccessKeyId", newJString(AccessKeyId))
  add(query_21630408, "UserName", newJString(UserName))
  add(query_21630408, "Action", newJString(Action))
  add(query_21630408, "Version", newJString(Version))
  result = call_21630407.call(nil, query_21630408, nil, nil, nil)

var getUpdateAccessKey* = Call_GetUpdateAccessKey_21630391(
    name: "getUpdateAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateAccessKey", validator: validate_GetUpdateAccessKey_21630392,
    base: "/", makeUrl: url_GetUpdateAccessKey_21630393,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccountPasswordPolicy_21630452 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateAccountPasswordPolicy_21630454(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAccountPasswordPolicy_21630453(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630455 = query.getOrDefault("Action")
  valid_21630455 = validateParameter(valid_21630455, JString, required = true, default = newJString(
      "UpdateAccountPasswordPolicy"))
  if valid_21630455 != nil:
    section.add "Action", valid_21630455
  var valid_21630456 = query.getOrDefault("Version")
  valid_21630456 = validateParameter(valid_21630456, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630456 != nil:
    section.add "Version", valid_21630456
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630457 = header.getOrDefault("X-Amz-Date")
  valid_21630457 = validateParameter(valid_21630457, JString, required = false,
                                   default = nil)
  if valid_21630457 != nil:
    section.add "X-Amz-Date", valid_21630457
  var valid_21630458 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630458 = validateParameter(valid_21630458, JString, required = false,
                                   default = nil)
  if valid_21630458 != nil:
    section.add "X-Amz-Security-Token", valid_21630458
  var valid_21630459 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630459 = validateParameter(valid_21630459, JString, required = false,
                                   default = nil)
  if valid_21630459 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630459
  var valid_21630460 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630460 = validateParameter(valid_21630460, JString, required = false,
                                   default = nil)
  if valid_21630460 != nil:
    section.add "X-Amz-Algorithm", valid_21630460
  var valid_21630461 = header.getOrDefault("X-Amz-Signature")
  valid_21630461 = validateParameter(valid_21630461, JString, required = false,
                                   default = nil)
  if valid_21630461 != nil:
    section.add "X-Amz-Signature", valid_21630461
  var valid_21630462 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630462 = validateParameter(valid_21630462, JString, required = false,
                                   default = nil)
  if valid_21630462 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630462
  var valid_21630463 = header.getOrDefault("X-Amz-Credential")
  valid_21630463 = validateParameter(valid_21630463, JString, required = false,
                                   default = nil)
  if valid_21630463 != nil:
    section.add "X-Amz-Credential", valid_21630463
  result.add "header", section
  ## parameters in `formData` object:
  ##   RequireNumbers: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   RequireSymbols: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireUppercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MinimumPasswordLength: JInt
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  ##   RequireLowercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   PasswordReusePrevention: JInt
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   HardExpiry: JBool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   AllowUsersToChangePassword: JBool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: JInt
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  section = newJObject()
  var valid_21630464 = formData.getOrDefault("RequireNumbers")
  valid_21630464 = validateParameter(valid_21630464, JBool, required = false,
                                   default = nil)
  if valid_21630464 != nil:
    section.add "RequireNumbers", valid_21630464
  var valid_21630465 = formData.getOrDefault("RequireSymbols")
  valid_21630465 = validateParameter(valid_21630465, JBool, required = false,
                                   default = nil)
  if valid_21630465 != nil:
    section.add "RequireSymbols", valid_21630465
  var valid_21630466 = formData.getOrDefault("RequireUppercaseCharacters")
  valid_21630466 = validateParameter(valid_21630466, JBool, required = false,
                                   default = nil)
  if valid_21630466 != nil:
    section.add "RequireUppercaseCharacters", valid_21630466
  var valid_21630467 = formData.getOrDefault("MinimumPasswordLength")
  valid_21630467 = validateParameter(valid_21630467, JInt, required = false,
                                   default = nil)
  if valid_21630467 != nil:
    section.add "MinimumPasswordLength", valid_21630467
  var valid_21630468 = formData.getOrDefault("RequireLowercaseCharacters")
  valid_21630468 = validateParameter(valid_21630468, JBool, required = false,
                                   default = nil)
  if valid_21630468 != nil:
    section.add "RequireLowercaseCharacters", valid_21630468
  var valid_21630469 = formData.getOrDefault("PasswordReusePrevention")
  valid_21630469 = validateParameter(valid_21630469, JInt, required = false,
                                   default = nil)
  if valid_21630469 != nil:
    section.add "PasswordReusePrevention", valid_21630469
  var valid_21630470 = formData.getOrDefault("HardExpiry")
  valid_21630470 = validateParameter(valid_21630470, JBool, required = false,
                                   default = nil)
  if valid_21630470 != nil:
    section.add "HardExpiry", valid_21630470
  var valid_21630471 = formData.getOrDefault("AllowUsersToChangePassword")
  valid_21630471 = validateParameter(valid_21630471, JBool, required = false,
                                   default = nil)
  if valid_21630471 != nil:
    section.add "AllowUsersToChangePassword", valid_21630471
  var valid_21630472 = formData.getOrDefault("MaxPasswordAge")
  valid_21630472 = validateParameter(valid_21630472, JInt, required = false,
                                   default = nil)
  if valid_21630472 != nil:
    section.add "MaxPasswordAge", valid_21630472
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630473: Call_PostUpdateAccountPasswordPolicy_21630452;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21630473.validator(path, query, header, formData, body, _)
  let scheme = call_21630473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630473.makeUrl(scheme.get, call_21630473.host, call_21630473.base,
                               call_21630473.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630473, uri, valid, _)

proc call*(call_21630474: Call_PostUpdateAccountPasswordPolicy_21630452;
          RequireNumbers: bool = false; RequireSymbols: bool = false;
          RequireUppercaseCharacters: bool = false; MinimumPasswordLength: int = 0;
          RequireLowercaseCharacters: bool = false;
          PasswordReusePrevention: int = 0;
          Action: string = "UpdateAccountPasswordPolicy"; HardExpiry: bool = false;
          AllowUsersToChangePassword: bool = false; MaxPasswordAge: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateAccountPasswordPolicy
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ##   RequireNumbers: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   RequireSymbols: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireUppercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MinimumPasswordLength: int
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  ##   RequireLowercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   PasswordReusePrevention: int
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   Action: string (required)
  ##   HardExpiry: bool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   AllowUsersToChangePassword: bool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: int
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   Version: string (required)
  var query_21630475 = newJObject()
  var formData_21630476 = newJObject()
  add(formData_21630476, "RequireNumbers", newJBool(RequireNumbers))
  add(formData_21630476, "RequireSymbols", newJBool(RequireSymbols))
  add(formData_21630476, "RequireUppercaseCharacters",
      newJBool(RequireUppercaseCharacters))
  add(formData_21630476, "MinimumPasswordLength", newJInt(MinimumPasswordLength))
  add(formData_21630476, "RequireLowercaseCharacters",
      newJBool(RequireLowercaseCharacters))
  add(formData_21630476, "PasswordReusePrevention",
      newJInt(PasswordReusePrevention))
  add(query_21630475, "Action", newJString(Action))
  add(formData_21630476, "HardExpiry", newJBool(HardExpiry))
  add(formData_21630476, "AllowUsersToChangePassword",
      newJBool(AllowUsersToChangePassword))
  add(formData_21630476, "MaxPasswordAge", newJInt(MaxPasswordAge))
  add(query_21630475, "Version", newJString(Version))
  result = call_21630474.call(nil, query_21630475, nil, formData_21630476, nil)

var postUpdateAccountPasswordPolicy* = Call_PostUpdateAccountPasswordPolicy_21630452(
    name: "postUpdateAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccountPasswordPolicy",
    validator: validate_PostUpdateAccountPasswordPolicy_21630453, base: "/",
    makeUrl: url_PostUpdateAccountPasswordPolicy_21630454,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccountPasswordPolicy_21630428 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateAccountPasswordPolicy_21630430(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAccountPasswordPolicy_21630429(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RequireLowercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   RequireSymbols: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireNumbers: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   HardExpiry: JBool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   Action: JString (required)
  ##   PasswordReusePrevention: JInt
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireUppercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   AllowUsersToChangePassword: JBool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: JInt
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   Version: JString (required)
  ##   MinimumPasswordLength: JInt
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  section = newJObject()
  var valid_21630431 = query.getOrDefault("RequireLowercaseCharacters")
  valid_21630431 = validateParameter(valid_21630431, JBool, required = false,
                                   default = nil)
  if valid_21630431 != nil:
    section.add "RequireLowercaseCharacters", valid_21630431
  var valid_21630432 = query.getOrDefault("RequireSymbols")
  valid_21630432 = validateParameter(valid_21630432, JBool, required = false,
                                   default = nil)
  if valid_21630432 != nil:
    section.add "RequireSymbols", valid_21630432
  var valid_21630433 = query.getOrDefault("RequireNumbers")
  valid_21630433 = validateParameter(valid_21630433, JBool, required = false,
                                   default = nil)
  if valid_21630433 != nil:
    section.add "RequireNumbers", valid_21630433
  var valid_21630434 = query.getOrDefault("HardExpiry")
  valid_21630434 = validateParameter(valid_21630434, JBool, required = false,
                                   default = nil)
  if valid_21630434 != nil:
    section.add "HardExpiry", valid_21630434
  var valid_21630435 = query.getOrDefault("Action")
  valid_21630435 = validateParameter(valid_21630435, JString, required = true, default = newJString(
      "UpdateAccountPasswordPolicy"))
  if valid_21630435 != nil:
    section.add "Action", valid_21630435
  var valid_21630436 = query.getOrDefault("PasswordReusePrevention")
  valid_21630436 = validateParameter(valid_21630436, JInt, required = false,
                                   default = nil)
  if valid_21630436 != nil:
    section.add "PasswordReusePrevention", valid_21630436
  var valid_21630437 = query.getOrDefault("RequireUppercaseCharacters")
  valid_21630437 = validateParameter(valid_21630437, JBool, required = false,
                                   default = nil)
  if valid_21630437 != nil:
    section.add "RequireUppercaseCharacters", valid_21630437
  var valid_21630438 = query.getOrDefault("AllowUsersToChangePassword")
  valid_21630438 = validateParameter(valid_21630438, JBool, required = false,
                                   default = nil)
  if valid_21630438 != nil:
    section.add "AllowUsersToChangePassword", valid_21630438
  var valid_21630439 = query.getOrDefault("MaxPasswordAge")
  valid_21630439 = validateParameter(valid_21630439, JInt, required = false,
                                   default = nil)
  if valid_21630439 != nil:
    section.add "MaxPasswordAge", valid_21630439
  var valid_21630440 = query.getOrDefault("Version")
  valid_21630440 = validateParameter(valid_21630440, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630440 != nil:
    section.add "Version", valid_21630440
  var valid_21630441 = query.getOrDefault("MinimumPasswordLength")
  valid_21630441 = validateParameter(valid_21630441, JInt, required = false,
                                   default = nil)
  if valid_21630441 != nil:
    section.add "MinimumPasswordLength", valid_21630441
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630442 = header.getOrDefault("X-Amz-Date")
  valid_21630442 = validateParameter(valid_21630442, JString, required = false,
                                   default = nil)
  if valid_21630442 != nil:
    section.add "X-Amz-Date", valid_21630442
  var valid_21630443 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630443 = validateParameter(valid_21630443, JString, required = false,
                                   default = nil)
  if valid_21630443 != nil:
    section.add "X-Amz-Security-Token", valid_21630443
  var valid_21630444 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630444 = validateParameter(valid_21630444, JString, required = false,
                                   default = nil)
  if valid_21630444 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630444
  var valid_21630445 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630445 = validateParameter(valid_21630445, JString, required = false,
                                   default = nil)
  if valid_21630445 != nil:
    section.add "X-Amz-Algorithm", valid_21630445
  var valid_21630446 = header.getOrDefault("X-Amz-Signature")
  valid_21630446 = validateParameter(valid_21630446, JString, required = false,
                                   default = nil)
  if valid_21630446 != nil:
    section.add "X-Amz-Signature", valid_21630446
  var valid_21630447 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630447 = validateParameter(valid_21630447, JString, required = false,
                                   default = nil)
  if valid_21630447 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630447
  var valid_21630448 = header.getOrDefault("X-Amz-Credential")
  valid_21630448 = validateParameter(valid_21630448, JString, required = false,
                                   default = nil)
  if valid_21630448 != nil:
    section.add "X-Amz-Credential", valid_21630448
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630449: Call_GetUpdateAccountPasswordPolicy_21630428;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21630449.validator(path, query, header, formData, body, _)
  let scheme = call_21630449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630449.makeUrl(scheme.get, call_21630449.host, call_21630449.base,
                               call_21630449.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630449, uri, valid, _)

proc call*(call_21630450: Call_GetUpdateAccountPasswordPolicy_21630428;
          RequireLowercaseCharacters: bool = false; RequireSymbols: bool = false;
          RequireNumbers: bool = false; HardExpiry: bool = false;
          Action: string = "UpdateAccountPasswordPolicy";
          PasswordReusePrevention: int = 0;
          RequireUppercaseCharacters: bool = false;
          AllowUsersToChangePassword: bool = false; MaxPasswordAge: int = 0;
          Version: string = "2010-05-08"; MinimumPasswordLength: int = 0): Recallable =
  ## getUpdateAccountPasswordPolicy
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ##   RequireLowercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   RequireSymbols: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireNumbers: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   HardExpiry: bool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   Action: string (required)
  ##   PasswordReusePrevention: int
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireUppercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   AllowUsersToChangePassword: bool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: int
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   Version: string (required)
  ##   MinimumPasswordLength: int
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  var query_21630451 = newJObject()
  add(query_21630451, "RequireLowercaseCharacters",
      newJBool(RequireLowercaseCharacters))
  add(query_21630451, "RequireSymbols", newJBool(RequireSymbols))
  add(query_21630451, "RequireNumbers", newJBool(RequireNumbers))
  add(query_21630451, "HardExpiry", newJBool(HardExpiry))
  add(query_21630451, "Action", newJString(Action))
  add(query_21630451, "PasswordReusePrevention", newJInt(PasswordReusePrevention))
  add(query_21630451, "RequireUppercaseCharacters",
      newJBool(RequireUppercaseCharacters))
  add(query_21630451, "AllowUsersToChangePassword",
      newJBool(AllowUsersToChangePassword))
  add(query_21630451, "MaxPasswordAge", newJInt(MaxPasswordAge))
  add(query_21630451, "Version", newJString(Version))
  add(query_21630451, "MinimumPasswordLength", newJInt(MinimumPasswordLength))
  result = call_21630450.call(nil, query_21630451, nil, nil, nil)

var getUpdateAccountPasswordPolicy* = Call_GetUpdateAccountPasswordPolicy_21630428(
    name: "getUpdateAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccountPasswordPolicy",
    validator: validate_GetUpdateAccountPasswordPolicy_21630429, base: "/",
    makeUrl: url_GetUpdateAccountPasswordPolicy_21630430,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAssumeRolePolicy_21630494 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateAssumeRolePolicy_21630496(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAssumeRolePolicy_21630495(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630497 = query.getOrDefault("Action")
  valid_21630497 = validateParameter(valid_21630497, JString, required = true, default = newJString(
      "UpdateAssumeRolePolicy"))
  if valid_21630497 != nil:
    section.add "Action", valid_21630497
  var valid_21630498 = query.getOrDefault("Version")
  valid_21630498 = validateParameter(valid_21630498, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630498 != nil:
    section.add "Version", valid_21630498
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630499 = header.getOrDefault("X-Amz-Date")
  valid_21630499 = validateParameter(valid_21630499, JString, required = false,
                                   default = nil)
  if valid_21630499 != nil:
    section.add "X-Amz-Date", valid_21630499
  var valid_21630500 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630500 = validateParameter(valid_21630500, JString, required = false,
                                   default = nil)
  if valid_21630500 != nil:
    section.add "X-Amz-Security-Token", valid_21630500
  var valid_21630501 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630501 = validateParameter(valid_21630501, JString, required = false,
                                   default = nil)
  if valid_21630501 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630501
  var valid_21630502 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630502 = validateParameter(valid_21630502, JString, required = false,
                                   default = nil)
  if valid_21630502 != nil:
    section.add "X-Amz-Algorithm", valid_21630502
  var valid_21630503 = header.getOrDefault("X-Amz-Signature")
  valid_21630503 = validateParameter(valid_21630503, JString, required = false,
                                   default = nil)
  if valid_21630503 != nil:
    section.add "X-Amz-Signature", valid_21630503
  var valid_21630504 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630504 = validateParameter(valid_21630504, JString, required = false,
                                   default = nil)
  if valid_21630504 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630504
  var valid_21630505 = header.getOrDefault("X-Amz-Credential")
  valid_21630505 = validateParameter(valid_21630505, JString, required = false,
                                   default = nil)
  if valid_21630505 != nil:
    section.add "X-Amz-Credential", valid_21630505
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_21630506 = formData.getOrDefault("RoleName")
  valid_21630506 = validateParameter(valid_21630506, JString, required = true,
                                   default = nil)
  if valid_21630506 != nil:
    section.add "RoleName", valid_21630506
  var valid_21630507 = formData.getOrDefault("PolicyDocument")
  valid_21630507 = validateParameter(valid_21630507, JString, required = true,
                                   default = nil)
  if valid_21630507 != nil:
    section.add "PolicyDocument", valid_21630507
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630508: Call_PostUpdateAssumeRolePolicy_21630494;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  let valid = call_21630508.validator(path, query, header, formData, body, _)
  let scheme = call_21630508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630508.makeUrl(scheme.get, call_21630508.host, call_21630508.base,
                               call_21630508.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630508, uri, valid, _)

proc call*(call_21630509: Call_PostUpdateAssumeRolePolicy_21630494;
          RoleName: string; PolicyDocument: string;
          Action: string = "UpdateAssumeRolePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateAssumeRolePolicy
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ##   RoleName: string (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630510 = newJObject()
  var formData_21630511 = newJObject()
  add(formData_21630511, "RoleName", newJString(RoleName))
  add(formData_21630511, "PolicyDocument", newJString(PolicyDocument))
  add(query_21630510, "Action", newJString(Action))
  add(query_21630510, "Version", newJString(Version))
  result = call_21630509.call(nil, query_21630510, nil, formData_21630511, nil)

var postUpdateAssumeRolePolicy* = Call_PostUpdateAssumeRolePolicy_21630494(
    name: "postUpdateAssumeRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAssumeRolePolicy",
    validator: validate_PostUpdateAssumeRolePolicy_21630495, base: "/",
    makeUrl: url_PostUpdateAssumeRolePolicy_21630496,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAssumeRolePolicy_21630477 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateAssumeRolePolicy_21630479(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAssumeRolePolicy_21630478(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630480 = query.getOrDefault("Action")
  valid_21630480 = validateParameter(valid_21630480, JString, required = true, default = newJString(
      "UpdateAssumeRolePolicy"))
  if valid_21630480 != nil:
    section.add "Action", valid_21630480
  var valid_21630481 = query.getOrDefault("PolicyDocument")
  valid_21630481 = validateParameter(valid_21630481, JString, required = true,
                                   default = nil)
  if valid_21630481 != nil:
    section.add "PolicyDocument", valid_21630481
  var valid_21630482 = query.getOrDefault("RoleName")
  valid_21630482 = validateParameter(valid_21630482, JString, required = true,
                                   default = nil)
  if valid_21630482 != nil:
    section.add "RoleName", valid_21630482
  var valid_21630483 = query.getOrDefault("Version")
  valid_21630483 = validateParameter(valid_21630483, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630483 != nil:
    section.add "Version", valid_21630483
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630484 = header.getOrDefault("X-Amz-Date")
  valid_21630484 = validateParameter(valid_21630484, JString, required = false,
                                   default = nil)
  if valid_21630484 != nil:
    section.add "X-Amz-Date", valid_21630484
  var valid_21630485 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630485 = validateParameter(valid_21630485, JString, required = false,
                                   default = nil)
  if valid_21630485 != nil:
    section.add "X-Amz-Security-Token", valid_21630485
  var valid_21630486 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630486 = validateParameter(valid_21630486, JString, required = false,
                                   default = nil)
  if valid_21630486 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630486
  var valid_21630487 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630487 = validateParameter(valid_21630487, JString, required = false,
                                   default = nil)
  if valid_21630487 != nil:
    section.add "X-Amz-Algorithm", valid_21630487
  var valid_21630488 = header.getOrDefault("X-Amz-Signature")
  valid_21630488 = validateParameter(valid_21630488, JString, required = false,
                                   default = nil)
  if valid_21630488 != nil:
    section.add "X-Amz-Signature", valid_21630488
  var valid_21630489 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630489 = validateParameter(valid_21630489, JString, required = false,
                                   default = nil)
  if valid_21630489 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630489
  var valid_21630490 = header.getOrDefault("X-Amz-Credential")
  valid_21630490 = validateParameter(valid_21630490, JString, required = false,
                                   default = nil)
  if valid_21630490 != nil:
    section.add "X-Amz-Credential", valid_21630490
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630491: Call_GetUpdateAssumeRolePolicy_21630477;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  let valid = call_21630491.validator(path, query, header, formData, body, _)
  let scheme = call_21630491.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630491.makeUrl(scheme.get, call_21630491.host, call_21630491.base,
                               call_21630491.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630491, uri, valid, _)

proc call*(call_21630492: Call_GetUpdateAssumeRolePolicy_21630477;
          PolicyDocument: string; RoleName: string;
          Action: string = "UpdateAssumeRolePolicy"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateAssumeRolePolicy
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_21630493 = newJObject()
  add(query_21630493, "Action", newJString(Action))
  add(query_21630493, "PolicyDocument", newJString(PolicyDocument))
  add(query_21630493, "RoleName", newJString(RoleName))
  add(query_21630493, "Version", newJString(Version))
  result = call_21630492.call(nil, query_21630493, nil, nil, nil)

var getUpdateAssumeRolePolicy* = Call_GetUpdateAssumeRolePolicy_21630477(
    name: "getUpdateAssumeRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAssumeRolePolicy",
    validator: validate_GetUpdateAssumeRolePolicy_21630478, base: "/",
    makeUrl: url_GetUpdateAssumeRolePolicy_21630479,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateGroup_21630530 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateGroup_21630532(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateGroup_21630531(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630533 = query.getOrDefault("Action")
  valid_21630533 = validateParameter(valid_21630533, JString, required = true,
                                   default = newJString("UpdateGroup"))
  if valid_21630533 != nil:
    section.add "Action", valid_21630533
  var valid_21630534 = query.getOrDefault("Version")
  valid_21630534 = validateParameter(valid_21630534, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630534 != nil:
    section.add "Version", valid_21630534
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630535 = header.getOrDefault("X-Amz-Date")
  valid_21630535 = validateParameter(valid_21630535, JString, required = false,
                                   default = nil)
  if valid_21630535 != nil:
    section.add "X-Amz-Date", valid_21630535
  var valid_21630536 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630536 = validateParameter(valid_21630536, JString, required = false,
                                   default = nil)
  if valid_21630536 != nil:
    section.add "X-Amz-Security-Token", valid_21630536
  var valid_21630537 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630537 = validateParameter(valid_21630537, JString, required = false,
                                   default = nil)
  if valid_21630537 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630537
  var valid_21630538 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630538 = validateParameter(valid_21630538, JString, required = false,
                                   default = nil)
  if valid_21630538 != nil:
    section.add "X-Amz-Algorithm", valid_21630538
  var valid_21630539 = header.getOrDefault("X-Amz-Signature")
  valid_21630539 = validateParameter(valid_21630539, JString, required = false,
                                   default = nil)
  if valid_21630539 != nil:
    section.add "X-Amz-Signature", valid_21630539
  var valid_21630540 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630540 = validateParameter(valid_21630540, JString, required = false,
                                   default = nil)
  if valid_21630540 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630540
  var valid_21630541 = header.getOrDefault("X-Amz-Credential")
  valid_21630541 = validateParameter(valid_21630541, JString, required = false,
                                   default = nil)
  if valid_21630541 != nil:
    section.add "X-Amz-Credential", valid_21630541
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewGroupName: JString
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   GroupName: JString (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  var valid_21630542 = formData.getOrDefault("NewGroupName")
  valid_21630542 = validateParameter(valid_21630542, JString, required = false,
                                   default = nil)
  if valid_21630542 != nil:
    section.add "NewGroupName", valid_21630542
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_21630543 = formData.getOrDefault("GroupName")
  valid_21630543 = validateParameter(valid_21630543, JString, required = true,
                                   default = nil)
  if valid_21630543 != nil:
    section.add "GroupName", valid_21630543
  var valid_21630544 = formData.getOrDefault("NewPath")
  valid_21630544 = validateParameter(valid_21630544, JString, required = false,
                                   default = nil)
  if valid_21630544 != nil:
    section.add "NewPath", valid_21630544
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630545: Call_PostUpdateGroup_21630530; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  let valid = call_21630545.validator(path, query, header, formData, body, _)
  let scheme = call_21630545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630545.makeUrl(scheme.get, call_21630545.host, call_21630545.base,
                               call_21630545.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630545, uri, valid, _)

proc call*(call_21630546: Call_PostUpdateGroup_21630530; GroupName: string;
          NewGroupName: string = ""; Action: string = "UpdateGroup";
          Version: string = "2010-05-08"; NewPath: string = ""): Recallable =
  ## postUpdateGroup
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ##   NewGroupName: string
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   GroupName: string (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   NewPath: string
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_21630547 = newJObject()
  var formData_21630548 = newJObject()
  add(formData_21630548, "NewGroupName", newJString(NewGroupName))
  add(formData_21630548, "GroupName", newJString(GroupName))
  add(query_21630547, "Action", newJString(Action))
  add(query_21630547, "Version", newJString(Version))
  add(formData_21630548, "NewPath", newJString(NewPath))
  result = call_21630546.call(nil, query_21630547, nil, formData_21630548, nil)

var postUpdateGroup* = Call_PostUpdateGroup_21630530(name: "postUpdateGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateGroup", validator: validate_PostUpdateGroup_21630531,
    base: "/", makeUrl: url_PostUpdateGroup_21630532,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateGroup_21630512 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateGroup_21630514(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateGroup_21630513(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewGroupName: JString
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630515 = query.getOrDefault("Action")
  valid_21630515 = validateParameter(valid_21630515, JString, required = true,
                                   default = newJString("UpdateGroup"))
  if valid_21630515 != nil:
    section.add "Action", valid_21630515
  var valid_21630516 = query.getOrDefault("GroupName")
  valid_21630516 = validateParameter(valid_21630516, JString, required = true,
                                   default = nil)
  if valid_21630516 != nil:
    section.add "GroupName", valid_21630516
  var valid_21630517 = query.getOrDefault("NewGroupName")
  valid_21630517 = validateParameter(valid_21630517, JString, required = false,
                                   default = nil)
  if valid_21630517 != nil:
    section.add "NewGroupName", valid_21630517
  var valid_21630518 = query.getOrDefault("NewPath")
  valid_21630518 = validateParameter(valid_21630518, JString, required = false,
                                   default = nil)
  if valid_21630518 != nil:
    section.add "NewPath", valid_21630518
  var valid_21630519 = query.getOrDefault("Version")
  valid_21630519 = validateParameter(valid_21630519, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630519 != nil:
    section.add "Version", valid_21630519
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630520 = header.getOrDefault("X-Amz-Date")
  valid_21630520 = validateParameter(valid_21630520, JString, required = false,
                                   default = nil)
  if valid_21630520 != nil:
    section.add "X-Amz-Date", valid_21630520
  var valid_21630521 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630521 = validateParameter(valid_21630521, JString, required = false,
                                   default = nil)
  if valid_21630521 != nil:
    section.add "X-Amz-Security-Token", valid_21630521
  var valid_21630522 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630522 = validateParameter(valid_21630522, JString, required = false,
                                   default = nil)
  if valid_21630522 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630522
  var valid_21630523 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630523 = validateParameter(valid_21630523, JString, required = false,
                                   default = nil)
  if valid_21630523 != nil:
    section.add "X-Amz-Algorithm", valid_21630523
  var valid_21630524 = header.getOrDefault("X-Amz-Signature")
  valid_21630524 = validateParameter(valid_21630524, JString, required = false,
                                   default = nil)
  if valid_21630524 != nil:
    section.add "X-Amz-Signature", valid_21630524
  var valid_21630525 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630525 = validateParameter(valid_21630525, JString, required = false,
                                   default = nil)
  if valid_21630525 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630525
  var valid_21630526 = header.getOrDefault("X-Amz-Credential")
  valid_21630526 = validateParameter(valid_21630526, JString, required = false,
                                   default = nil)
  if valid_21630526 != nil:
    section.add "X-Amz-Credential", valid_21630526
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630527: Call_GetUpdateGroup_21630512; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  let valid = call_21630527.validator(path, query, header, formData, body, _)
  let scheme = call_21630527.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630527.makeUrl(scheme.get, call_21630527.host, call_21630527.base,
                               call_21630527.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630527, uri, valid, _)

proc call*(call_21630528: Call_GetUpdateGroup_21630512; GroupName: string;
          Action: string = "UpdateGroup"; NewGroupName: string = "";
          NewPath: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getUpdateGroup
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewGroupName: string
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_21630529 = newJObject()
  add(query_21630529, "Action", newJString(Action))
  add(query_21630529, "GroupName", newJString(GroupName))
  add(query_21630529, "NewGroupName", newJString(NewGroupName))
  add(query_21630529, "NewPath", newJString(NewPath))
  add(query_21630529, "Version", newJString(Version))
  result = call_21630528.call(nil, query_21630529, nil, nil, nil)

var getUpdateGroup* = Call_GetUpdateGroup_21630512(name: "getUpdateGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateGroup", validator: validate_GetUpdateGroup_21630513,
    base: "/", makeUrl: url_GetUpdateGroup_21630514,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateLoginProfile_21630567 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateLoginProfile_21630569(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateLoginProfile_21630568(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630570 = query.getOrDefault("Action")
  valid_21630570 = validateParameter(valid_21630570, JString, required = true,
                                   default = newJString("UpdateLoginProfile"))
  if valid_21630570 != nil:
    section.add "Action", valid_21630570
  var valid_21630571 = query.getOrDefault("Version")
  valid_21630571 = validateParameter(valid_21630571, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630571 != nil:
    section.add "Version", valid_21630571
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630572 = header.getOrDefault("X-Amz-Date")
  valid_21630572 = validateParameter(valid_21630572, JString, required = false,
                                   default = nil)
  if valid_21630572 != nil:
    section.add "X-Amz-Date", valid_21630572
  var valid_21630573 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630573 = validateParameter(valid_21630573, JString, required = false,
                                   default = nil)
  if valid_21630573 != nil:
    section.add "X-Amz-Security-Token", valid_21630573
  var valid_21630574 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630574 = validateParameter(valid_21630574, JString, required = false,
                                   default = nil)
  if valid_21630574 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630574
  var valid_21630575 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630575 = validateParameter(valid_21630575, JString, required = false,
                                   default = nil)
  if valid_21630575 != nil:
    section.add "X-Amz-Algorithm", valid_21630575
  var valid_21630576 = header.getOrDefault("X-Amz-Signature")
  valid_21630576 = validateParameter(valid_21630576, JString, required = false,
                                   default = nil)
  if valid_21630576 != nil:
    section.add "X-Amz-Signature", valid_21630576
  var valid_21630577 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630577 = validateParameter(valid_21630577, JString, required = false,
                                   default = nil)
  if valid_21630577 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630577
  var valid_21630578 = header.getOrDefault("X-Amz-Credential")
  valid_21630578 = validateParameter(valid_21630578, JString, required = false,
                                   default = nil)
  if valid_21630578 != nil:
    section.add "X-Amz-Credential", valid_21630578
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: JString
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   PasswordResetRequired: JBool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21630579 = formData.getOrDefault("UserName")
  valid_21630579 = validateParameter(valid_21630579, JString, required = true,
                                   default = nil)
  if valid_21630579 != nil:
    section.add "UserName", valid_21630579
  var valid_21630580 = formData.getOrDefault("Password")
  valid_21630580 = validateParameter(valid_21630580, JString, required = false,
                                   default = nil)
  if valid_21630580 != nil:
    section.add "Password", valid_21630580
  var valid_21630581 = formData.getOrDefault("PasswordResetRequired")
  valid_21630581 = validateParameter(valid_21630581, JBool, required = false,
                                   default = nil)
  if valid_21630581 != nil:
    section.add "PasswordResetRequired", valid_21630581
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630582: Call_PostUpdateLoginProfile_21630567;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21630582.validator(path, query, header, formData, body, _)
  let scheme = call_21630582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630582.makeUrl(scheme.get, call_21630582.host, call_21630582.base,
                               call_21630582.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630582, uri, valid, _)

proc call*(call_21630583: Call_PostUpdateLoginProfile_21630567; UserName: string;
          Password: string = ""; PasswordResetRequired: bool = false;
          Action: string = "UpdateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateLoginProfile
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: string
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   PasswordResetRequired: bool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630584 = newJObject()
  var formData_21630585 = newJObject()
  add(formData_21630585, "UserName", newJString(UserName))
  add(formData_21630585, "Password", newJString(Password))
  add(formData_21630585, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_21630584, "Action", newJString(Action))
  add(query_21630584, "Version", newJString(Version))
  result = call_21630583.call(nil, query_21630584, nil, formData_21630585, nil)

var postUpdateLoginProfile* = Call_PostUpdateLoginProfile_21630567(
    name: "postUpdateLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateLoginProfile",
    validator: validate_PostUpdateLoginProfile_21630568, base: "/",
    makeUrl: url_PostUpdateLoginProfile_21630569,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateLoginProfile_21630549 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateLoginProfile_21630551(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateLoginProfile_21630550(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: JString (required)
  ##   Password: JString
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_21630552 = query.getOrDefault("UserName")
  valid_21630552 = validateParameter(valid_21630552, JString, required = true,
                                   default = nil)
  if valid_21630552 != nil:
    section.add "UserName", valid_21630552
  var valid_21630553 = query.getOrDefault("PasswordResetRequired")
  valid_21630553 = validateParameter(valid_21630553, JBool, required = false,
                                   default = nil)
  if valid_21630553 != nil:
    section.add "PasswordResetRequired", valid_21630553
  var valid_21630554 = query.getOrDefault("Action")
  valid_21630554 = validateParameter(valid_21630554, JString, required = true,
                                   default = newJString("UpdateLoginProfile"))
  if valid_21630554 != nil:
    section.add "Action", valid_21630554
  var valid_21630555 = query.getOrDefault("Password")
  valid_21630555 = validateParameter(valid_21630555, JString, required = false,
                                   default = nil)
  if valid_21630555 != nil:
    section.add "Password", valid_21630555
  var valid_21630556 = query.getOrDefault("Version")
  valid_21630556 = validateParameter(valid_21630556, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630556 != nil:
    section.add "Version", valid_21630556
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630557 = header.getOrDefault("X-Amz-Date")
  valid_21630557 = validateParameter(valid_21630557, JString, required = false,
                                   default = nil)
  if valid_21630557 != nil:
    section.add "X-Amz-Date", valid_21630557
  var valid_21630558 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630558 = validateParameter(valid_21630558, JString, required = false,
                                   default = nil)
  if valid_21630558 != nil:
    section.add "X-Amz-Security-Token", valid_21630558
  var valid_21630559 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630559 = validateParameter(valid_21630559, JString, required = false,
                                   default = nil)
  if valid_21630559 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630559
  var valid_21630560 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630560 = validateParameter(valid_21630560, JString, required = false,
                                   default = nil)
  if valid_21630560 != nil:
    section.add "X-Amz-Algorithm", valid_21630560
  var valid_21630561 = header.getOrDefault("X-Amz-Signature")
  valid_21630561 = validateParameter(valid_21630561, JString, required = false,
                                   default = nil)
  if valid_21630561 != nil:
    section.add "X-Amz-Signature", valid_21630561
  var valid_21630562 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630562 = validateParameter(valid_21630562, JString, required = false,
                                   default = nil)
  if valid_21630562 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630562
  var valid_21630563 = header.getOrDefault("X-Amz-Credential")
  valid_21630563 = validateParameter(valid_21630563, JString, required = false,
                                   default = nil)
  if valid_21630563 != nil:
    section.add "X-Amz-Credential", valid_21630563
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630564: Call_GetUpdateLoginProfile_21630549;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_21630564.validator(path, query, header, formData, body, _)
  let scheme = call_21630564.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630564.makeUrl(scheme.get, call_21630564.host, call_21630564.base,
                               call_21630564.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630564, uri, valid, _)

proc call*(call_21630565: Call_GetUpdateLoginProfile_21630549; UserName: string;
          PasswordResetRequired: bool = false;
          Action: string = "UpdateLoginProfile"; Password: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateLoginProfile
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: bool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Password: string
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   Version: string (required)
  var query_21630566 = newJObject()
  add(query_21630566, "UserName", newJString(UserName))
  add(query_21630566, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_21630566, "Action", newJString(Action))
  add(query_21630566, "Password", newJString(Password))
  add(query_21630566, "Version", newJString(Version))
  result = call_21630565.call(nil, query_21630566, nil, nil, nil)

var getUpdateLoginProfile* = Call_GetUpdateLoginProfile_21630549(
    name: "getUpdateLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateLoginProfile",
    validator: validate_GetUpdateLoginProfile_21630550, base: "/",
    makeUrl: url_GetUpdateLoginProfile_21630551,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateOpenIDConnectProviderThumbprint_21630603 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateOpenIDConnectProviderThumbprint_21630605(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateOpenIDConnectProviderThumbprint_21630604(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630606 = query.getOrDefault("Action")
  valid_21630606 = validateParameter(valid_21630606, JString, required = true, default = newJString(
      "UpdateOpenIDConnectProviderThumbprint"))
  if valid_21630606 != nil:
    section.add "Action", valid_21630606
  var valid_21630607 = query.getOrDefault("Version")
  valid_21630607 = validateParameter(valid_21630607, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630607 != nil:
    section.add "Version", valid_21630607
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630608 = header.getOrDefault("X-Amz-Date")
  valid_21630608 = validateParameter(valid_21630608, JString, required = false,
                                   default = nil)
  if valid_21630608 != nil:
    section.add "X-Amz-Date", valid_21630608
  var valid_21630609 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630609 = validateParameter(valid_21630609, JString, required = false,
                                   default = nil)
  if valid_21630609 != nil:
    section.add "X-Amz-Security-Token", valid_21630609
  var valid_21630610 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630610 = validateParameter(valid_21630610, JString, required = false,
                                   default = nil)
  if valid_21630610 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630610
  var valid_21630611 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630611 = validateParameter(valid_21630611, JString, required = false,
                                   default = nil)
  if valid_21630611 != nil:
    section.add "X-Amz-Algorithm", valid_21630611
  var valid_21630612 = header.getOrDefault("X-Amz-Signature")
  valid_21630612 = validateParameter(valid_21630612, JString, required = false,
                                   default = nil)
  if valid_21630612 != nil:
    section.add "X-Amz-Signature", valid_21630612
  var valid_21630613 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630613 = validateParameter(valid_21630613, JString, required = false,
                                   default = nil)
  if valid_21630613 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630613
  var valid_21630614 = header.getOrDefault("X-Amz-Credential")
  valid_21630614 = validateParameter(valid_21630614, JString, required = false,
                                   default = nil)
  if valid_21630614 != nil:
    section.add "X-Amz-Credential", valid_21630614
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_21630615 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_21630615 = validateParameter(valid_21630615, JString, required = true,
                                   default = nil)
  if valid_21630615 != nil:
    section.add "OpenIDConnectProviderArn", valid_21630615
  var valid_21630616 = formData.getOrDefault("ThumbprintList")
  valid_21630616 = validateParameter(valid_21630616, JArray, required = true,
                                   default = nil)
  if valid_21630616 != nil:
    section.add "ThumbprintList", valid_21630616
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630617: Call_PostUpdateOpenIDConnectProviderThumbprint_21630603;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_21630617.validator(path, query, header, formData, body, _)
  let scheme = call_21630617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630617.makeUrl(scheme.get, call_21630617.host, call_21630617.base,
                               call_21630617.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630617, uri, valid, _)

proc call*(call_21630618: Call_PostUpdateOpenIDConnectProviderThumbprint_21630603;
          OpenIDConnectProviderArn: string; ThumbprintList: JsonNode;
          Action: string = "UpdateOpenIDConnectProviderThumbprint";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateOpenIDConnectProviderThumbprint
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630619 = newJObject()
  var formData_21630620 = newJObject()
  add(formData_21630620, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  if ThumbprintList != nil:
    formData_21630620.add "ThumbprintList", ThumbprintList
  add(query_21630619, "Action", newJString(Action))
  add(query_21630619, "Version", newJString(Version))
  result = call_21630618.call(nil, query_21630619, nil, formData_21630620, nil)

var postUpdateOpenIDConnectProviderThumbprint* = Call_PostUpdateOpenIDConnectProviderThumbprint_21630603(
    name: "postUpdateOpenIDConnectProviderThumbprint", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=UpdateOpenIDConnectProviderThumbprint",
    validator: validate_PostUpdateOpenIDConnectProviderThumbprint_21630604,
    base: "/", makeUrl: url_PostUpdateOpenIDConnectProviderThumbprint_21630605,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateOpenIDConnectProviderThumbprint_21630586 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateOpenIDConnectProviderThumbprint_21630588(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateOpenIDConnectProviderThumbprint_21630587(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ThumbprintList` field"
  var valid_21630589 = query.getOrDefault("ThumbprintList")
  valid_21630589 = validateParameter(valid_21630589, JArray, required = true,
                                   default = nil)
  if valid_21630589 != nil:
    section.add "ThumbprintList", valid_21630589
  var valid_21630590 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_21630590 = validateParameter(valid_21630590, JString, required = true,
                                   default = nil)
  if valid_21630590 != nil:
    section.add "OpenIDConnectProviderArn", valid_21630590
  var valid_21630591 = query.getOrDefault("Action")
  valid_21630591 = validateParameter(valid_21630591, JString, required = true, default = newJString(
      "UpdateOpenIDConnectProviderThumbprint"))
  if valid_21630591 != nil:
    section.add "Action", valid_21630591
  var valid_21630592 = query.getOrDefault("Version")
  valid_21630592 = validateParameter(valid_21630592, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630592 != nil:
    section.add "Version", valid_21630592
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630593 = header.getOrDefault("X-Amz-Date")
  valid_21630593 = validateParameter(valid_21630593, JString, required = false,
                                   default = nil)
  if valid_21630593 != nil:
    section.add "X-Amz-Date", valid_21630593
  var valid_21630594 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630594 = validateParameter(valid_21630594, JString, required = false,
                                   default = nil)
  if valid_21630594 != nil:
    section.add "X-Amz-Security-Token", valid_21630594
  var valid_21630595 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630595 = validateParameter(valid_21630595, JString, required = false,
                                   default = nil)
  if valid_21630595 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630595
  var valid_21630596 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630596 = validateParameter(valid_21630596, JString, required = false,
                                   default = nil)
  if valid_21630596 != nil:
    section.add "X-Amz-Algorithm", valid_21630596
  var valid_21630597 = header.getOrDefault("X-Amz-Signature")
  valid_21630597 = validateParameter(valid_21630597, JString, required = false,
                                   default = nil)
  if valid_21630597 != nil:
    section.add "X-Amz-Signature", valid_21630597
  var valid_21630598 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630598 = validateParameter(valid_21630598, JString, required = false,
                                   default = nil)
  if valid_21630598 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630598
  var valid_21630599 = header.getOrDefault("X-Amz-Credential")
  valid_21630599 = validateParameter(valid_21630599, JString, required = false,
                                   default = nil)
  if valid_21630599 != nil:
    section.add "X-Amz-Credential", valid_21630599
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630600: Call_GetUpdateOpenIDConnectProviderThumbprint_21630586;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_21630600.validator(path, query, header, formData, body, _)
  let scheme = call_21630600.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630600.makeUrl(scheme.get, call_21630600.host, call_21630600.base,
                               call_21630600.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630600, uri, valid, _)

proc call*(call_21630601: Call_GetUpdateOpenIDConnectProviderThumbprint_21630586;
          ThumbprintList: JsonNode; OpenIDConnectProviderArn: string;
          Action: string = "UpdateOpenIDConnectProviderThumbprint";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateOpenIDConnectProviderThumbprint
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630602 = newJObject()
  if ThumbprintList != nil:
    query_21630602.add "ThumbprintList", ThumbprintList
  add(query_21630602, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_21630602, "Action", newJString(Action))
  add(query_21630602, "Version", newJString(Version))
  result = call_21630601.call(nil, query_21630602, nil, nil, nil)

var getUpdateOpenIDConnectProviderThumbprint* = Call_GetUpdateOpenIDConnectProviderThumbprint_21630586(
    name: "getUpdateOpenIDConnectProviderThumbprint", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=UpdateOpenIDConnectProviderThumbprint",
    validator: validate_GetUpdateOpenIDConnectProviderThumbprint_21630587,
    base: "/", makeUrl: url_GetUpdateOpenIDConnectProviderThumbprint_21630588,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateRole_21630639 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateRole_21630641(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateRole_21630640(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630642 = query.getOrDefault("Action")
  valid_21630642 = validateParameter(valid_21630642, JString, required = true,
                                   default = newJString("UpdateRole"))
  if valid_21630642 != nil:
    section.add "Action", valid_21630642
  var valid_21630643 = query.getOrDefault("Version")
  valid_21630643 = validateParameter(valid_21630643, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630643 != nil:
    section.add "Version", valid_21630643
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630644 = header.getOrDefault("X-Amz-Date")
  valid_21630644 = validateParameter(valid_21630644, JString, required = false,
                                   default = nil)
  if valid_21630644 != nil:
    section.add "X-Amz-Date", valid_21630644
  var valid_21630645 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630645 = validateParameter(valid_21630645, JString, required = false,
                                   default = nil)
  if valid_21630645 != nil:
    section.add "X-Amz-Security-Token", valid_21630645
  var valid_21630646 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630646 = validateParameter(valid_21630646, JString, required = false,
                                   default = nil)
  if valid_21630646 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630646
  var valid_21630647 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630647 = validateParameter(valid_21630647, JString, required = false,
                                   default = nil)
  if valid_21630647 != nil:
    section.add "X-Amz-Algorithm", valid_21630647
  var valid_21630648 = header.getOrDefault("X-Amz-Signature")
  valid_21630648 = validateParameter(valid_21630648, JString, required = false,
                                   default = nil)
  if valid_21630648 != nil:
    section.add "X-Amz-Signature", valid_21630648
  var valid_21630649 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630649 = validateParameter(valid_21630649, JString, required = false,
                                   default = nil)
  if valid_21630649 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630649
  var valid_21630650 = header.getOrDefault("X-Amz-Credential")
  valid_21630650 = validateParameter(valid_21630650, JString, required = false,
                                   default = nil)
  if valid_21630650 != nil:
    section.add "X-Amz-Credential", valid_21630650
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Description: JString
  ##              : The new description that you want to apply to the specified role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_21630651 = formData.getOrDefault("RoleName")
  valid_21630651 = validateParameter(valid_21630651, JString, required = true,
                                   default = nil)
  if valid_21630651 != nil:
    section.add "RoleName", valid_21630651
  var valid_21630652 = formData.getOrDefault("MaxSessionDuration")
  valid_21630652 = validateParameter(valid_21630652, JInt, required = false,
                                   default = nil)
  if valid_21630652 != nil:
    section.add "MaxSessionDuration", valid_21630652
  var valid_21630653 = formData.getOrDefault("Description")
  valid_21630653 = validateParameter(valid_21630653, JString, required = false,
                                   default = nil)
  if valid_21630653 != nil:
    section.add "Description", valid_21630653
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630654: Call_PostUpdateRole_21630639; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  let valid = call_21630654.validator(path, query, header, formData, body, _)
  let scheme = call_21630654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630654.makeUrl(scheme.get, call_21630654.host, call_21630654.base,
                               call_21630654.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630654, uri, valid, _)

proc call*(call_21630655: Call_PostUpdateRole_21630639; RoleName: string;
          Action: string = "UpdateRole"; MaxSessionDuration: int = 0;
          Version: string = "2010-05-08"; Description: string = ""): Recallable =
  ## postUpdateRole
  ## Updates the description or maximum session duration setting of a role.
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  ##   Description: string
  ##              : The new description that you want to apply to the specified role.
  var query_21630656 = newJObject()
  var formData_21630657 = newJObject()
  add(formData_21630657, "RoleName", newJString(RoleName))
  add(query_21630656, "Action", newJString(Action))
  add(formData_21630657, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_21630656, "Version", newJString(Version))
  add(formData_21630657, "Description", newJString(Description))
  result = call_21630655.call(nil, query_21630656, nil, formData_21630657, nil)

var postUpdateRole* = Call_PostUpdateRole_21630639(name: "postUpdateRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateRole", validator: validate_PostUpdateRole_21630640,
    base: "/", makeUrl: url_PostUpdateRole_21630641,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateRole_21630621 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateRole_21630623(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateRole_21630622(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString
  ##              : The new description that you want to apply to the specified role.
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630624 = query.getOrDefault("Description")
  valid_21630624 = validateParameter(valid_21630624, JString, required = false,
                                   default = nil)
  if valid_21630624 != nil:
    section.add "Description", valid_21630624
  var valid_21630625 = query.getOrDefault("MaxSessionDuration")
  valid_21630625 = validateParameter(valid_21630625, JInt, required = false,
                                   default = nil)
  if valid_21630625 != nil:
    section.add "MaxSessionDuration", valid_21630625
  var valid_21630626 = query.getOrDefault("Action")
  valid_21630626 = validateParameter(valid_21630626, JString, required = true,
                                   default = newJString("UpdateRole"))
  if valid_21630626 != nil:
    section.add "Action", valid_21630626
  var valid_21630627 = query.getOrDefault("RoleName")
  valid_21630627 = validateParameter(valid_21630627, JString, required = true,
                                   default = nil)
  if valid_21630627 != nil:
    section.add "RoleName", valid_21630627
  var valid_21630628 = query.getOrDefault("Version")
  valid_21630628 = validateParameter(valid_21630628, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630628 != nil:
    section.add "Version", valid_21630628
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630629 = header.getOrDefault("X-Amz-Date")
  valid_21630629 = validateParameter(valid_21630629, JString, required = false,
                                   default = nil)
  if valid_21630629 != nil:
    section.add "X-Amz-Date", valid_21630629
  var valid_21630630 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630630 = validateParameter(valid_21630630, JString, required = false,
                                   default = nil)
  if valid_21630630 != nil:
    section.add "X-Amz-Security-Token", valid_21630630
  var valid_21630631 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630631 = validateParameter(valid_21630631, JString, required = false,
                                   default = nil)
  if valid_21630631 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630631
  var valid_21630632 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630632 = validateParameter(valid_21630632, JString, required = false,
                                   default = nil)
  if valid_21630632 != nil:
    section.add "X-Amz-Algorithm", valid_21630632
  var valid_21630633 = header.getOrDefault("X-Amz-Signature")
  valid_21630633 = validateParameter(valid_21630633, JString, required = false,
                                   default = nil)
  if valid_21630633 != nil:
    section.add "X-Amz-Signature", valid_21630633
  var valid_21630634 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630634 = validateParameter(valid_21630634, JString, required = false,
                                   default = nil)
  if valid_21630634 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630634
  var valid_21630635 = header.getOrDefault("X-Amz-Credential")
  valid_21630635 = validateParameter(valid_21630635, JString, required = false,
                                   default = nil)
  if valid_21630635 != nil:
    section.add "X-Amz-Credential", valid_21630635
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630636: Call_GetUpdateRole_21630621; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  let valid = call_21630636.validator(path, query, header, formData, body, _)
  let scheme = call_21630636.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630636.makeUrl(scheme.get, call_21630636.host, call_21630636.base,
                               call_21630636.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630636, uri, valid, _)

proc call*(call_21630637: Call_GetUpdateRole_21630621; RoleName: string;
          Description: string = ""; MaxSessionDuration: int = 0;
          Action: string = "UpdateRole"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateRole
  ## Updates the description or maximum session duration setting of a role.
  ##   Description: string
  ##              : The new description that you want to apply to the specified role.
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Version: string (required)
  var query_21630638 = newJObject()
  add(query_21630638, "Description", newJString(Description))
  add(query_21630638, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_21630638, "Action", newJString(Action))
  add(query_21630638, "RoleName", newJString(RoleName))
  add(query_21630638, "Version", newJString(Version))
  result = call_21630637.call(nil, query_21630638, nil, nil, nil)

var getUpdateRole* = Call_GetUpdateRole_21630621(name: "getUpdateRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateRole", validator: validate_GetUpdateRole_21630622,
    base: "/", makeUrl: url_GetUpdateRole_21630623,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateRoleDescription_21630675 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateRoleDescription_21630677(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateRoleDescription_21630676(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630678 = query.getOrDefault("Action")
  valid_21630678 = validateParameter(valid_21630678, JString, required = true, default = newJString(
      "UpdateRoleDescription"))
  if valid_21630678 != nil:
    section.add "Action", valid_21630678
  var valid_21630679 = query.getOrDefault("Version")
  valid_21630679 = validateParameter(valid_21630679, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630679 != nil:
    section.add "Version", valid_21630679
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630680 = header.getOrDefault("X-Amz-Date")
  valid_21630680 = validateParameter(valid_21630680, JString, required = false,
                                   default = nil)
  if valid_21630680 != nil:
    section.add "X-Amz-Date", valid_21630680
  var valid_21630681 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630681 = validateParameter(valid_21630681, JString, required = false,
                                   default = nil)
  if valid_21630681 != nil:
    section.add "X-Amz-Security-Token", valid_21630681
  var valid_21630682 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630682 = validateParameter(valid_21630682, JString, required = false,
                                   default = nil)
  if valid_21630682 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630682
  var valid_21630683 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630683 = validateParameter(valid_21630683, JString, required = false,
                                   default = nil)
  if valid_21630683 != nil:
    section.add "X-Amz-Algorithm", valid_21630683
  var valid_21630684 = header.getOrDefault("X-Amz-Signature")
  valid_21630684 = validateParameter(valid_21630684, JString, required = false,
                                   default = nil)
  if valid_21630684 != nil:
    section.add "X-Amz-Signature", valid_21630684
  var valid_21630685 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630685 = validateParameter(valid_21630685, JString, required = false,
                                   default = nil)
  if valid_21630685 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630685
  var valid_21630686 = header.getOrDefault("X-Amz-Credential")
  valid_21630686 = validateParameter(valid_21630686, JString, required = false,
                                   default = nil)
  if valid_21630686 != nil:
    section.add "X-Amz-Credential", valid_21630686
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   Description: JString (required)
  ##              : The new description that you want to apply to the specified role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_21630687 = formData.getOrDefault("RoleName")
  valid_21630687 = validateParameter(valid_21630687, JString, required = true,
                                   default = nil)
  if valid_21630687 != nil:
    section.add "RoleName", valid_21630687
  var valid_21630688 = formData.getOrDefault("Description")
  valid_21630688 = validateParameter(valid_21630688, JString, required = true,
                                   default = nil)
  if valid_21630688 != nil:
    section.add "Description", valid_21630688
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630689: Call_PostUpdateRoleDescription_21630675;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  let valid = call_21630689.validator(path, query, header, formData, body, _)
  let scheme = call_21630689.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630689.makeUrl(scheme.get, call_21630689.host, call_21630689.base,
                               call_21630689.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630689, uri, valid, _)

proc call*(call_21630690: Call_PostUpdateRoleDescription_21630675;
          RoleName: string; Description: string;
          Action: string = "UpdateRoleDescription"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateRoleDescription
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : The new description that you want to apply to the specified role.
  var query_21630691 = newJObject()
  var formData_21630692 = newJObject()
  add(formData_21630692, "RoleName", newJString(RoleName))
  add(query_21630691, "Action", newJString(Action))
  add(query_21630691, "Version", newJString(Version))
  add(formData_21630692, "Description", newJString(Description))
  result = call_21630690.call(nil, query_21630691, nil, formData_21630692, nil)

var postUpdateRoleDescription* = Call_PostUpdateRoleDescription_21630675(
    name: "postUpdateRoleDescription", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateRoleDescription",
    validator: validate_PostUpdateRoleDescription_21630676, base: "/",
    makeUrl: url_PostUpdateRoleDescription_21630677,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateRoleDescription_21630658 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateRoleDescription_21630660(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateRoleDescription_21630659(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString (required)
  ##              : The new description that you want to apply to the specified role.
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Description` field"
  var valid_21630661 = query.getOrDefault("Description")
  valid_21630661 = validateParameter(valid_21630661, JString, required = true,
                                   default = nil)
  if valid_21630661 != nil:
    section.add "Description", valid_21630661
  var valid_21630662 = query.getOrDefault("Action")
  valid_21630662 = validateParameter(valid_21630662, JString, required = true, default = newJString(
      "UpdateRoleDescription"))
  if valid_21630662 != nil:
    section.add "Action", valid_21630662
  var valid_21630663 = query.getOrDefault("RoleName")
  valid_21630663 = validateParameter(valid_21630663, JString, required = true,
                                   default = nil)
  if valid_21630663 != nil:
    section.add "RoleName", valid_21630663
  var valid_21630664 = query.getOrDefault("Version")
  valid_21630664 = validateParameter(valid_21630664, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630664 != nil:
    section.add "Version", valid_21630664
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630665 = header.getOrDefault("X-Amz-Date")
  valid_21630665 = validateParameter(valid_21630665, JString, required = false,
                                   default = nil)
  if valid_21630665 != nil:
    section.add "X-Amz-Date", valid_21630665
  var valid_21630666 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630666 = validateParameter(valid_21630666, JString, required = false,
                                   default = nil)
  if valid_21630666 != nil:
    section.add "X-Amz-Security-Token", valid_21630666
  var valid_21630667 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630667 = validateParameter(valid_21630667, JString, required = false,
                                   default = nil)
  if valid_21630667 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630667
  var valid_21630668 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630668 = validateParameter(valid_21630668, JString, required = false,
                                   default = nil)
  if valid_21630668 != nil:
    section.add "X-Amz-Algorithm", valid_21630668
  var valid_21630669 = header.getOrDefault("X-Amz-Signature")
  valid_21630669 = validateParameter(valid_21630669, JString, required = false,
                                   default = nil)
  if valid_21630669 != nil:
    section.add "X-Amz-Signature", valid_21630669
  var valid_21630670 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630670 = validateParameter(valid_21630670, JString, required = false,
                                   default = nil)
  if valid_21630670 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630670
  var valid_21630671 = header.getOrDefault("X-Amz-Credential")
  valid_21630671 = validateParameter(valid_21630671, JString, required = false,
                                   default = nil)
  if valid_21630671 != nil:
    section.add "X-Amz-Credential", valid_21630671
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630672: Call_GetUpdateRoleDescription_21630658;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  let valid = call_21630672.validator(path, query, header, formData, body, _)
  let scheme = call_21630672.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630672.makeUrl(scheme.get, call_21630672.host, call_21630672.base,
                               call_21630672.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630672, uri, valid, _)

proc call*(call_21630673: Call_GetUpdateRoleDescription_21630658;
          Description: string; RoleName: string;
          Action: string = "UpdateRoleDescription"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateRoleDescription
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ##   Description: string (required)
  ##              : The new description that you want to apply to the specified role.
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Version: string (required)
  var query_21630674 = newJObject()
  add(query_21630674, "Description", newJString(Description))
  add(query_21630674, "Action", newJString(Action))
  add(query_21630674, "RoleName", newJString(RoleName))
  add(query_21630674, "Version", newJString(Version))
  result = call_21630673.call(nil, query_21630674, nil, nil, nil)

var getUpdateRoleDescription* = Call_GetUpdateRoleDescription_21630658(
    name: "getUpdateRoleDescription", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateRoleDescription",
    validator: validate_GetUpdateRoleDescription_21630659, base: "/",
    makeUrl: url_GetUpdateRoleDescription_21630660,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSAMLProvider_21630710 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateSAMLProvider_21630712(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateSAMLProvider_21630711(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630713 = query.getOrDefault("Action")
  valid_21630713 = validateParameter(valid_21630713, JString, required = true,
                                   default = newJString("UpdateSAMLProvider"))
  if valid_21630713 != nil:
    section.add "Action", valid_21630713
  var valid_21630714 = query.getOrDefault("Version")
  valid_21630714 = validateParameter(valid_21630714, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630714 != nil:
    section.add "Version", valid_21630714
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630715 = header.getOrDefault("X-Amz-Date")
  valid_21630715 = validateParameter(valid_21630715, JString, required = false,
                                   default = nil)
  if valid_21630715 != nil:
    section.add "X-Amz-Date", valid_21630715
  var valid_21630716 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630716 = validateParameter(valid_21630716, JString, required = false,
                                   default = nil)
  if valid_21630716 != nil:
    section.add "X-Amz-Security-Token", valid_21630716
  var valid_21630717 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630717 = validateParameter(valid_21630717, JString, required = false,
                                   default = nil)
  if valid_21630717 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630717
  var valid_21630718 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630718 = validateParameter(valid_21630718, JString, required = false,
                                   default = nil)
  if valid_21630718 != nil:
    section.add "X-Amz-Algorithm", valid_21630718
  var valid_21630719 = header.getOrDefault("X-Amz-Signature")
  valid_21630719 = validateParameter(valid_21630719, JString, required = false,
                                   default = nil)
  if valid_21630719 != nil:
    section.add "X-Amz-Signature", valid_21630719
  var valid_21630720 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630720 = validateParameter(valid_21630720, JString, required = false,
                                   default = nil)
  if valid_21630720 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630720
  var valid_21630721 = header.getOrDefault("X-Amz-Credential")
  valid_21630721 = validateParameter(valid_21630721, JString, required = false,
                                   default = nil)
  if valid_21630721 != nil:
    section.add "X-Amz-Credential", valid_21630721
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SAMLMetadataDocument: JString (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_21630722 = formData.getOrDefault("SAMLProviderArn")
  valid_21630722 = validateParameter(valid_21630722, JString, required = true,
                                   default = nil)
  if valid_21630722 != nil:
    section.add "SAMLProviderArn", valid_21630722
  var valid_21630723 = formData.getOrDefault("SAMLMetadataDocument")
  valid_21630723 = validateParameter(valid_21630723, JString, required = true,
                                   default = nil)
  if valid_21630723 != nil:
    section.add "SAMLMetadataDocument", valid_21630723
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630724: Call_PostUpdateSAMLProvider_21630710;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_21630724.validator(path, query, header, formData, body, _)
  let scheme = call_21630724.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630724.makeUrl(scheme.get, call_21630724.host, call_21630724.base,
                               call_21630724.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630724, uri, valid, _)

proc call*(call_21630725: Call_PostUpdateSAMLProvider_21630710;
          SAMLProviderArn: string; SAMLMetadataDocument: string;
          Action: string = "UpdateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateSAMLProvider
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   SAMLMetadataDocument: string (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   Version: string (required)
  var query_21630726 = newJObject()
  var formData_21630727 = newJObject()
  add(formData_21630727, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_21630726, "Action", newJString(Action))
  add(formData_21630727, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_21630726, "Version", newJString(Version))
  result = call_21630725.call(nil, query_21630726, nil, formData_21630727, nil)

var postUpdateSAMLProvider* = Call_PostUpdateSAMLProvider_21630710(
    name: "postUpdateSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSAMLProvider",
    validator: validate_PostUpdateSAMLProvider_21630711, base: "/",
    makeUrl: url_PostUpdateSAMLProvider_21630712,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSAMLProvider_21630693 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateSAMLProvider_21630695(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateSAMLProvider_21630694(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SAMLMetadataDocument: JString (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SAMLMetadataDocument` field"
  var valid_21630696 = query.getOrDefault("SAMLMetadataDocument")
  valid_21630696 = validateParameter(valid_21630696, JString, required = true,
                                   default = nil)
  if valid_21630696 != nil:
    section.add "SAMLMetadataDocument", valid_21630696
  var valid_21630697 = query.getOrDefault("Action")
  valid_21630697 = validateParameter(valid_21630697, JString, required = true,
                                   default = newJString("UpdateSAMLProvider"))
  if valid_21630697 != nil:
    section.add "Action", valid_21630697
  var valid_21630698 = query.getOrDefault("SAMLProviderArn")
  valid_21630698 = validateParameter(valid_21630698, JString, required = true,
                                   default = nil)
  if valid_21630698 != nil:
    section.add "SAMLProviderArn", valid_21630698
  var valid_21630699 = query.getOrDefault("Version")
  valid_21630699 = validateParameter(valid_21630699, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630699 != nil:
    section.add "Version", valid_21630699
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630700 = header.getOrDefault("X-Amz-Date")
  valid_21630700 = validateParameter(valid_21630700, JString, required = false,
                                   default = nil)
  if valid_21630700 != nil:
    section.add "X-Amz-Date", valid_21630700
  var valid_21630701 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630701 = validateParameter(valid_21630701, JString, required = false,
                                   default = nil)
  if valid_21630701 != nil:
    section.add "X-Amz-Security-Token", valid_21630701
  var valid_21630702 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630702 = validateParameter(valid_21630702, JString, required = false,
                                   default = nil)
  if valid_21630702 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630702
  var valid_21630703 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630703 = validateParameter(valid_21630703, JString, required = false,
                                   default = nil)
  if valid_21630703 != nil:
    section.add "X-Amz-Algorithm", valid_21630703
  var valid_21630704 = header.getOrDefault("X-Amz-Signature")
  valid_21630704 = validateParameter(valid_21630704, JString, required = false,
                                   default = nil)
  if valid_21630704 != nil:
    section.add "X-Amz-Signature", valid_21630704
  var valid_21630705 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630705 = validateParameter(valid_21630705, JString, required = false,
                                   default = nil)
  if valid_21630705 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630705
  var valid_21630706 = header.getOrDefault("X-Amz-Credential")
  valid_21630706 = validateParameter(valid_21630706, JString, required = false,
                                   default = nil)
  if valid_21630706 != nil:
    section.add "X-Amz-Credential", valid_21630706
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630707: Call_GetUpdateSAMLProvider_21630693;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_21630707.validator(path, query, header, formData, body, _)
  let scheme = call_21630707.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630707.makeUrl(scheme.get, call_21630707.host, call_21630707.base,
                               call_21630707.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630707, uri, valid, _)

proc call*(call_21630708: Call_GetUpdateSAMLProvider_21630693;
          SAMLMetadataDocument: string; SAMLProviderArn: string;
          Action: string = "UpdateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateSAMLProvider
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLMetadataDocument: string (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_21630709 = newJObject()
  add(query_21630709, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_21630709, "Action", newJString(Action))
  add(query_21630709, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_21630709, "Version", newJString(Version))
  result = call_21630708.call(nil, query_21630709, nil, nil, nil)

var getUpdateSAMLProvider* = Call_GetUpdateSAMLProvider_21630693(
    name: "getUpdateSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSAMLProvider",
    validator: validate_GetUpdateSAMLProvider_21630694, base: "/",
    makeUrl: url_GetUpdateSAMLProvider_21630695,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSSHPublicKey_21630746 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateSSHPublicKey_21630748(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateSSHPublicKey_21630747(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630749 = query.getOrDefault("Action")
  valid_21630749 = validateParameter(valid_21630749, JString, required = true,
                                   default = newJString("UpdateSSHPublicKey"))
  if valid_21630749 != nil:
    section.add "Action", valid_21630749
  var valid_21630750 = query.getOrDefault("Version")
  valid_21630750 = validateParameter(valid_21630750, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630750 != nil:
    section.add "Version", valid_21630750
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630751 = header.getOrDefault("X-Amz-Date")
  valid_21630751 = validateParameter(valid_21630751, JString, required = false,
                                   default = nil)
  if valid_21630751 != nil:
    section.add "X-Amz-Date", valid_21630751
  var valid_21630752 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630752 = validateParameter(valid_21630752, JString, required = false,
                                   default = nil)
  if valid_21630752 != nil:
    section.add "X-Amz-Security-Token", valid_21630752
  var valid_21630753 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630753 = validateParameter(valid_21630753, JString, required = false,
                                   default = nil)
  if valid_21630753 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630753
  var valid_21630754 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630754 = validateParameter(valid_21630754, JString, required = false,
                                   default = nil)
  if valid_21630754 != nil:
    section.add "X-Amz-Algorithm", valid_21630754
  var valid_21630755 = header.getOrDefault("X-Amz-Signature")
  valid_21630755 = validateParameter(valid_21630755, JString, required = false,
                                   default = nil)
  if valid_21630755 != nil:
    section.add "X-Amz-Signature", valid_21630755
  var valid_21630756 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630756 = validateParameter(valid_21630756, JString, required = false,
                                   default = nil)
  if valid_21630756 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630756
  var valid_21630757 = header.getOrDefault("X-Amz-Credential")
  valid_21630757 = validateParameter(valid_21630757, JString, required = false,
                                   default = nil)
  if valid_21630757 != nil:
    section.add "X-Amz-Credential", valid_21630757
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: JString (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21630758 = formData.getOrDefault("UserName")
  valid_21630758 = validateParameter(valid_21630758, JString, required = true,
                                   default = nil)
  if valid_21630758 != nil:
    section.add "UserName", valid_21630758
  var valid_21630759 = formData.getOrDefault("SSHPublicKeyId")
  valid_21630759 = validateParameter(valid_21630759, JString, required = true,
                                   default = nil)
  if valid_21630759 != nil:
    section.add "SSHPublicKeyId", valid_21630759
  var valid_21630760 = formData.getOrDefault("Status")
  valid_21630760 = validateParameter(valid_21630760, JString, required = true,
                                   default = newJString("Active"))
  if valid_21630760 != nil:
    section.add "Status", valid_21630760
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630761: Call_PostUpdateSSHPublicKey_21630746;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_21630761.validator(path, query, header, formData, body, _)
  let scheme = call_21630761.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630761.makeUrl(scheme.get, call_21630761.host, call_21630761.base,
                               call_21630761.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630761, uri, valid, _)

proc call*(call_21630762: Call_PostUpdateSSHPublicKey_21630746; UserName: string;
          SSHPublicKeyId: string; Status: string = "Active";
          Action: string = "UpdateSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateSSHPublicKey
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: string (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630763 = newJObject()
  var formData_21630764 = newJObject()
  add(formData_21630764, "UserName", newJString(UserName))
  add(formData_21630764, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(formData_21630764, "Status", newJString(Status))
  add(query_21630763, "Action", newJString(Action))
  add(query_21630763, "Version", newJString(Version))
  result = call_21630762.call(nil, query_21630763, nil, formData_21630764, nil)

var postUpdateSSHPublicKey* = Call_PostUpdateSSHPublicKey_21630746(
    name: "postUpdateSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSSHPublicKey",
    validator: validate_PostUpdateSSHPublicKey_21630747, base: "/",
    makeUrl: url_PostUpdateSSHPublicKey_21630748,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSSHPublicKey_21630728 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateSSHPublicKey_21630730(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateSSHPublicKey_21630729(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630731 = query.getOrDefault("Status")
  valid_21630731 = validateParameter(valid_21630731, JString, required = true,
                                   default = newJString("Active"))
  if valid_21630731 != nil:
    section.add "Status", valid_21630731
  var valid_21630732 = query.getOrDefault("SSHPublicKeyId")
  valid_21630732 = validateParameter(valid_21630732, JString, required = true,
                                   default = nil)
  if valid_21630732 != nil:
    section.add "SSHPublicKeyId", valid_21630732
  var valid_21630733 = query.getOrDefault("UserName")
  valid_21630733 = validateParameter(valid_21630733, JString, required = true,
                                   default = nil)
  if valid_21630733 != nil:
    section.add "UserName", valid_21630733
  var valid_21630734 = query.getOrDefault("Action")
  valid_21630734 = validateParameter(valid_21630734, JString, required = true,
                                   default = newJString("UpdateSSHPublicKey"))
  if valid_21630734 != nil:
    section.add "Action", valid_21630734
  var valid_21630735 = query.getOrDefault("Version")
  valid_21630735 = validateParameter(valid_21630735, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630735 != nil:
    section.add "Version", valid_21630735
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630736 = header.getOrDefault("X-Amz-Date")
  valid_21630736 = validateParameter(valid_21630736, JString, required = false,
                                   default = nil)
  if valid_21630736 != nil:
    section.add "X-Amz-Date", valid_21630736
  var valid_21630737 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630737 = validateParameter(valid_21630737, JString, required = false,
                                   default = nil)
  if valid_21630737 != nil:
    section.add "X-Amz-Security-Token", valid_21630737
  var valid_21630738 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630738 = validateParameter(valid_21630738, JString, required = false,
                                   default = nil)
  if valid_21630738 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630738
  var valid_21630739 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630739 = validateParameter(valid_21630739, JString, required = false,
                                   default = nil)
  if valid_21630739 != nil:
    section.add "X-Amz-Algorithm", valid_21630739
  var valid_21630740 = header.getOrDefault("X-Amz-Signature")
  valid_21630740 = validateParameter(valid_21630740, JString, required = false,
                                   default = nil)
  if valid_21630740 != nil:
    section.add "X-Amz-Signature", valid_21630740
  var valid_21630741 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630741 = validateParameter(valid_21630741, JString, required = false,
                                   default = nil)
  if valid_21630741 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630741
  var valid_21630742 = header.getOrDefault("X-Amz-Credential")
  valid_21630742 = validateParameter(valid_21630742, JString, required = false,
                                   default = nil)
  if valid_21630742 != nil:
    section.add "X-Amz-Credential", valid_21630742
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630743: Call_GetUpdateSSHPublicKey_21630728;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_21630743.validator(path, query, header, formData, body, _)
  let scheme = call_21630743.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630743.makeUrl(scheme.get, call_21630743.host, call_21630743.base,
                               call_21630743.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630743, uri, valid, _)

proc call*(call_21630744: Call_GetUpdateSSHPublicKey_21630728;
          SSHPublicKeyId: string; UserName: string; Status: string = "Active";
          Action: string = "UpdateSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateSSHPublicKey
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   Status: string (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630745 = newJObject()
  add(query_21630745, "Status", newJString(Status))
  add(query_21630745, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_21630745, "UserName", newJString(UserName))
  add(query_21630745, "Action", newJString(Action))
  add(query_21630745, "Version", newJString(Version))
  result = call_21630744.call(nil, query_21630745, nil, nil, nil)

var getUpdateSSHPublicKey* = Call_GetUpdateSSHPublicKey_21630728(
    name: "getUpdateSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSSHPublicKey",
    validator: validate_GetUpdateSSHPublicKey_21630729, base: "/",
    makeUrl: url_GetUpdateSSHPublicKey_21630730,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateServerCertificate_21630783 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateServerCertificate_21630785(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateServerCertificate_21630784(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630786 = query.getOrDefault("Action")
  valid_21630786 = validateParameter(valid_21630786, JString, required = true, default = newJString(
      "UpdateServerCertificate"))
  if valid_21630786 != nil:
    section.add "Action", valid_21630786
  var valid_21630787 = query.getOrDefault("Version")
  valid_21630787 = validateParameter(valid_21630787, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630787 != nil:
    section.add "Version", valid_21630787
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630788 = header.getOrDefault("X-Amz-Date")
  valid_21630788 = validateParameter(valid_21630788, JString, required = false,
                                   default = nil)
  if valid_21630788 != nil:
    section.add "X-Amz-Date", valid_21630788
  var valid_21630789 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630789 = validateParameter(valid_21630789, JString, required = false,
                                   default = nil)
  if valid_21630789 != nil:
    section.add "X-Amz-Security-Token", valid_21630789
  var valid_21630790 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630790 = validateParameter(valid_21630790, JString, required = false,
                                   default = nil)
  if valid_21630790 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630790
  var valid_21630791 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630791 = validateParameter(valid_21630791, JString, required = false,
                                   default = nil)
  if valid_21630791 != nil:
    section.add "X-Amz-Algorithm", valid_21630791
  var valid_21630792 = header.getOrDefault("X-Amz-Signature")
  valid_21630792 = validateParameter(valid_21630792, JString, required = false,
                                   default = nil)
  if valid_21630792 != nil:
    section.add "X-Amz-Signature", valid_21630792
  var valid_21630793 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630793 = validateParameter(valid_21630793, JString, required = false,
                                   default = nil)
  if valid_21630793 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630793
  var valid_21630794 = header.getOrDefault("X-Amz-Credential")
  valid_21630794 = validateParameter(valid_21630794, JString, required = false,
                                   default = nil)
  if valid_21630794 != nil:
    section.add "X-Amz-Credential", valid_21630794
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewServerCertificateName: JString
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_21630795 = formData.getOrDefault("ServerCertificateName")
  valid_21630795 = validateParameter(valid_21630795, JString, required = true,
                                   default = nil)
  if valid_21630795 != nil:
    section.add "ServerCertificateName", valid_21630795
  var valid_21630796 = formData.getOrDefault("NewServerCertificateName")
  valid_21630796 = validateParameter(valid_21630796, JString, required = false,
                                   default = nil)
  if valid_21630796 != nil:
    section.add "NewServerCertificateName", valid_21630796
  var valid_21630797 = formData.getOrDefault("NewPath")
  valid_21630797 = validateParameter(valid_21630797, JString, required = false,
                                   default = nil)
  if valid_21630797 != nil:
    section.add "NewPath", valid_21630797
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630798: Call_PostUpdateServerCertificate_21630783;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_21630798.validator(path, query, header, formData, body, _)
  let scheme = call_21630798.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630798.makeUrl(scheme.get, call_21630798.host, call_21630798.base,
                               call_21630798.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630798, uri, valid, _)

proc call*(call_21630799: Call_PostUpdateServerCertificate_21630783;
          ServerCertificateName: string;
          Action: string = "UpdateServerCertificate";
          NewServerCertificateName: string = ""; Version: string = "2010-05-08";
          NewPath: string = ""): Recallable =
  ## postUpdateServerCertificate
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   NewServerCertificateName: string
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   NewPath: string
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_21630800 = newJObject()
  var formData_21630801 = newJObject()
  add(formData_21630801, "ServerCertificateName",
      newJString(ServerCertificateName))
  add(query_21630800, "Action", newJString(Action))
  add(formData_21630801, "NewServerCertificateName",
      newJString(NewServerCertificateName))
  add(query_21630800, "Version", newJString(Version))
  add(formData_21630801, "NewPath", newJString(NewPath))
  result = call_21630799.call(nil, query_21630800, nil, formData_21630801, nil)

var postUpdateServerCertificate* = Call_PostUpdateServerCertificate_21630783(
    name: "postUpdateServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServerCertificate",
    validator: validate_PostUpdateServerCertificate_21630784, base: "/",
    makeUrl: url_PostUpdateServerCertificate_21630785,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateServerCertificate_21630765 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateServerCertificate_21630767(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateServerCertificate_21630766(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   NewServerCertificateName: JString
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_21630768 = query.getOrDefault("ServerCertificateName")
  valid_21630768 = validateParameter(valid_21630768, JString, required = true,
                                   default = nil)
  if valid_21630768 != nil:
    section.add "ServerCertificateName", valid_21630768
  var valid_21630769 = query.getOrDefault("Action")
  valid_21630769 = validateParameter(valid_21630769, JString, required = true, default = newJString(
      "UpdateServerCertificate"))
  if valid_21630769 != nil:
    section.add "Action", valid_21630769
  var valid_21630770 = query.getOrDefault("NewServerCertificateName")
  valid_21630770 = validateParameter(valid_21630770, JString, required = false,
                                   default = nil)
  if valid_21630770 != nil:
    section.add "NewServerCertificateName", valid_21630770
  var valid_21630771 = query.getOrDefault("NewPath")
  valid_21630771 = validateParameter(valid_21630771, JString, required = false,
                                   default = nil)
  if valid_21630771 != nil:
    section.add "NewPath", valid_21630771
  var valid_21630772 = query.getOrDefault("Version")
  valid_21630772 = validateParameter(valid_21630772, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630772 != nil:
    section.add "Version", valid_21630772
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630773 = header.getOrDefault("X-Amz-Date")
  valid_21630773 = validateParameter(valid_21630773, JString, required = false,
                                   default = nil)
  if valid_21630773 != nil:
    section.add "X-Amz-Date", valid_21630773
  var valid_21630774 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630774 = validateParameter(valid_21630774, JString, required = false,
                                   default = nil)
  if valid_21630774 != nil:
    section.add "X-Amz-Security-Token", valid_21630774
  var valid_21630775 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630775 = validateParameter(valid_21630775, JString, required = false,
                                   default = nil)
  if valid_21630775 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630775
  var valid_21630776 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630776 = validateParameter(valid_21630776, JString, required = false,
                                   default = nil)
  if valid_21630776 != nil:
    section.add "X-Amz-Algorithm", valid_21630776
  var valid_21630777 = header.getOrDefault("X-Amz-Signature")
  valid_21630777 = validateParameter(valid_21630777, JString, required = false,
                                   default = nil)
  if valid_21630777 != nil:
    section.add "X-Amz-Signature", valid_21630777
  var valid_21630778 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630778 = validateParameter(valid_21630778, JString, required = false,
                                   default = nil)
  if valid_21630778 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630778
  var valid_21630779 = header.getOrDefault("X-Amz-Credential")
  valid_21630779 = validateParameter(valid_21630779, JString, required = false,
                                   default = nil)
  if valid_21630779 != nil:
    section.add "X-Amz-Credential", valid_21630779
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630780: Call_GetUpdateServerCertificate_21630765;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_21630780.validator(path, query, header, formData, body, _)
  let scheme = call_21630780.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630780.makeUrl(scheme.get, call_21630780.host, call_21630780.base,
                               call_21630780.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630780, uri, valid, _)

proc call*(call_21630781: Call_GetUpdateServerCertificate_21630765;
          ServerCertificateName: string;
          Action: string = "UpdateServerCertificate";
          NewServerCertificateName: string = ""; NewPath: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateServerCertificate
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   NewServerCertificateName: string
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: string
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_21630782 = newJObject()
  add(query_21630782, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_21630782, "Action", newJString(Action))
  add(query_21630782, "NewServerCertificateName",
      newJString(NewServerCertificateName))
  add(query_21630782, "NewPath", newJString(NewPath))
  add(query_21630782, "Version", newJString(Version))
  result = call_21630781.call(nil, query_21630782, nil, nil, nil)

var getUpdateServerCertificate* = Call_GetUpdateServerCertificate_21630765(
    name: "getUpdateServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServerCertificate",
    validator: validate_GetUpdateServerCertificate_21630766, base: "/",
    makeUrl: url_GetUpdateServerCertificate_21630767,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateServiceSpecificCredential_21630820 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateServiceSpecificCredential_21630822(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateServiceSpecificCredential_21630821(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630823 = query.getOrDefault("Action")
  valid_21630823 = validateParameter(valid_21630823, JString, required = true, default = newJString(
      "UpdateServiceSpecificCredential"))
  if valid_21630823 != nil:
    section.add "Action", valid_21630823
  var valid_21630824 = query.getOrDefault("Version")
  valid_21630824 = validateParameter(valid_21630824, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630824 != nil:
    section.add "Version", valid_21630824
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630825 = header.getOrDefault("X-Amz-Date")
  valid_21630825 = validateParameter(valid_21630825, JString, required = false,
                                   default = nil)
  if valid_21630825 != nil:
    section.add "X-Amz-Date", valid_21630825
  var valid_21630826 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630826 = validateParameter(valid_21630826, JString, required = false,
                                   default = nil)
  if valid_21630826 != nil:
    section.add "X-Amz-Security-Token", valid_21630826
  var valid_21630827 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630827 = validateParameter(valid_21630827, JString, required = false,
                                   default = nil)
  if valid_21630827 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630827
  var valid_21630828 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630828 = validateParameter(valid_21630828, JString, required = false,
                                   default = nil)
  if valid_21630828 != nil:
    section.add "X-Amz-Algorithm", valid_21630828
  var valid_21630829 = header.getOrDefault("X-Amz-Signature")
  valid_21630829 = validateParameter(valid_21630829, JString, required = false,
                                   default = nil)
  if valid_21630829 != nil:
    section.add "X-Amz-Signature", valid_21630829
  var valid_21630830 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630830 = validateParameter(valid_21630830, JString, required = false,
                                   default = nil)
  if valid_21630830 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630830
  var valid_21630831 = header.getOrDefault("X-Amz-Credential")
  valid_21630831 = validateParameter(valid_21630831, JString, required = false,
                                   default = nil)
  if valid_21630831 != nil:
    section.add "X-Amz-Credential", valid_21630831
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: JString (required)
  ##         : The status to be assigned to the service-specific credential.
  section = newJObject()
  var valid_21630832 = formData.getOrDefault("UserName")
  valid_21630832 = validateParameter(valid_21630832, JString, required = false,
                                   default = nil)
  if valid_21630832 != nil:
    section.add "UserName", valid_21630832
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_21630833 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_21630833 = validateParameter(valid_21630833, JString, required = true,
                                   default = nil)
  if valid_21630833 != nil:
    section.add "ServiceSpecificCredentialId", valid_21630833
  var valid_21630834 = formData.getOrDefault("Status")
  valid_21630834 = validateParameter(valid_21630834, JString, required = true,
                                   default = newJString("Active"))
  if valid_21630834 != nil:
    section.add "Status", valid_21630834
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630835: Call_PostUpdateServiceSpecificCredential_21630820;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  let valid = call_21630835.validator(path, query, header, formData, body, _)
  let scheme = call_21630835.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630835.makeUrl(scheme.get, call_21630835.host, call_21630835.base,
                               call_21630835.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630835, uri, valid, _)

proc call*(call_21630836: Call_PostUpdateServiceSpecificCredential_21630820;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Status: string = "Active";
          Action: string = "UpdateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateServiceSpecificCredential
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: string (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630837 = newJObject()
  var formData_21630838 = newJObject()
  add(formData_21630838, "UserName", newJString(UserName))
  add(formData_21630838, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(formData_21630838, "Status", newJString(Status))
  add(query_21630837, "Action", newJString(Action))
  add(query_21630837, "Version", newJString(Version))
  result = call_21630836.call(nil, query_21630837, nil, formData_21630838, nil)

var postUpdateServiceSpecificCredential* = Call_PostUpdateServiceSpecificCredential_21630820(
    name: "postUpdateServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServiceSpecificCredential",
    validator: validate_PostUpdateServiceSpecificCredential_21630821, base: "/",
    makeUrl: url_PostUpdateServiceSpecificCredential_21630822,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateServiceSpecificCredential_21630802 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateServiceSpecificCredential_21630804(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateServiceSpecificCredential_21630803(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630805 = query.getOrDefault("Status")
  valid_21630805 = validateParameter(valid_21630805, JString, required = true,
                                   default = newJString("Active"))
  if valid_21630805 != nil:
    section.add "Status", valid_21630805
  var valid_21630806 = query.getOrDefault("UserName")
  valid_21630806 = validateParameter(valid_21630806, JString, required = false,
                                   default = nil)
  if valid_21630806 != nil:
    section.add "UserName", valid_21630806
  var valid_21630807 = query.getOrDefault("Action")
  valid_21630807 = validateParameter(valid_21630807, JString, required = true, default = newJString(
      "UpdateServiceSpecificCredential"))
  if valid_21630807 != nil:
    section.add "Action", valid_21630807
  var valid_21630808 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_21630808 = validateParameter(valid_21630808, JString, required = true,
                                   default = nil)
  if valid_21630808 != nil:
    section.add "ServiceSpecificCredentialId", valid_21630808
  var valid_21630809 = query.getOrDefault("Version")
  valid_21630809 = validateParameter(valid_21630809, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630809 != nil:
    section.add "Version", valid_21630809
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630810 = header.getOrDefault("X-Amz-Date")
  valid_21630810 = validateParameter(valid_21630810, JString, required = false,
                                   default = nil)
  if valid_21630810 != nil:
    section.add "X-Amz-Date", valid_21630810
  var valid_21630811 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630811 = validateParameter(valid_21630811, JString, required = false,
                                   default = nil)
  if valid_21630811 != nil:
    section.add "X-Amz-Security-Token", valid_21630811
  var valid_21630812 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630812 = validateParameter(valid_21630812, JString, required = false,
                                   default = nil)
  if valid_21630812 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630812
  var valid_21630813 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630813 = validateParameter(valid_21630813, JString, required = false,
                                   default = nil)
  if valid_21630813 != nil:
    section.add "X-Amz-Algorithm", valid_21630813
  var valid_21630814 = header.getOrDefault("X-Amz-Signature")
  valid_21630814 = validateParameter(valid_21630814, JString, required = false,
                                   default = nil)
  if valid_21630814 != nil:
    section.add "X-Amz-Signature", valid_21630814
  var valid_21630815 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630815 = validateParameter(valid_21630815, JString, required = false,
                                   default = nil)
  if valid_21630815 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630815
  var valid_21630816 = header.getOrDefault("X-Amz-Credential")
  valid_21630816 = validateParameter(valid_21630816, JString, required = false,
                                   default = nil)
  if valid_21630816 != nil:
    section.add "X-Amz-Credential", valid_21630816
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630817: Call_GetUpdateServiceSpecificCredential_21630802;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  let valid = call_21630817.validator(path, query, header, formData, body, _)
  let scheme = call_21630817.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630817.makeUrl(scheme.get, call_21630817.host, call_21630817.base,
                               call_21630817.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630817, uri, valid, _)

proc call*(call_21630818: Call_GetUpdateServiceSpecificCredential_21630802;
          ServiceSpecificCredentialId: string; Status: string = "Active";
          UserName: string = ""; Action: string = "UpdateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateServiceSpecificCredential
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ##   Status: string (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_21630819 = newJObject()
  add(query_21630819, "Status", newJString(Status))
  add(query_21630819, "UserName", newJString(UserName))
  add(query_21630819, "Action", newJString(Action))
  add(query_21630819, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_21630819, "Version", newJString(Version))
  result = call_21630818.call(nil, query_21630819, nil, nil, nil)

var getUpdateServiceSpecificCredential* = Call_GetUpdateServiceSpecificCredential_21630802(
    name: "getUpdateServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServiceSpecificCredential",
    validator: validate_GetUpdateServiceSpecificCredential_21630803, base: "/",
    makeUrl: url_GetUpdateServiceSpecificCredential_21630804,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSigningCertificate_21630857 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateSigningCertificate_21630859(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateSigningCertificate_21630858(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630860 = query.getOrDefault("Action")
  valid_21630860 = validateParameter(valid_21630860, JString, required = true, default = newJString(
      "UpdateSigningCertificate"))
  if valid_21630860 != nil:
    section.add "Action", valid_21630860
  var valid_21630861 = query.getOrDefault("Version")
  valid_21630861 = validateParameter(valid_21630861, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630861 != nil:
    section.add "Version", valid_21630861
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630862 = header.getOrDefault("X-Amz-Date")
  valid_21630862 = validateParameter(valid_21630862, JString, required = false,
                                   default = nil)
  if valid_21630862 != nil:
    section.add "X-Amz-Date", valid_21630862
  var valid_21630863 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630863 = validateParameter(valid_21630863, JString, required = false,
                                   default = nil)
  if valid_21630863 != nil:
    section.add "X-Amz-Security-Token", valid_21630863
  var valid_21630864 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630864 = validateParameter(valid_21630864, JString, required = false,
                                   default = nil)
  if valid_21630864 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630864
  var valid_21630865 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630865 = validateParameter(valid_21630865, JString, required = false,
                                   default = nil)
  if valid_21630865 != nil:
    section.add "X-Amz-Algorithm", valid_21630865
  var valid_21630866 = header.getOrDefault("X-Amz-Signature")
  valid_21630866 = validateParameter(valid_21630866, JString, required = false,
                                   default = nil)
  if valid_21630866 != nil:
    section.add "X-Amz-Signature", valid_21630866
  var valid_21630867 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630867 = validateParameter(valid_21630867, JString, required = false,
                                   default = nil)
  if valid_21630867 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630867
  var valid_21630868 = header.getOrDefault("X-Amz-Credential")
  valid_21630868 = validateParameter(valid_21630868, JString, required = false,
                                   default = nil)
  if valid_21630868 != nil:
    section.add "X-Amz-Credential", valid_21630868
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_21630869 = formData.getOrDefault("UserName")
  valid_21630869 = validateParameter(valid_21630869, JString, required = false,
                                   default = nil)
  if valid_21630869 != nil:
    section.add "UserName", valid_21630869
  var valid_21630870 = formData.getOrDefault("Status")
  valid_21630870 = validateParameter(valid_21630870, JString, required = true,
                                   default = newJString("Active"))
  if valid_21630870 != nil:
    section.add "Status", valid_21630870
  var valid_21630871 = formData.getOrDefault("CertificateId")
  valid_21630871 = validateParameter(valid_21630871, JString, required = true,
                                   default = nil)
  if valid_21630871 != nil:
    section.add "CertificateId", valid_21630871
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630872: Call_PostUpdateSigningCertificate_21630857;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_21630872.validator(path, query, header, formData, body, _)
  let scheme = call_21630872.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630872.makeUrl(scheme.get, call_21630872.host, call_21630872.base,
                               call_21630872.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630872, uri, valid, _)

proc call*(call_21630873: Call_PostUpdateSigningCertificate_21630857;
          CertificateId: string; UserName: string = ""; Status: string = "Active";
          Action: string = "UpdateSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateSigningCertificate
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630874 = newJObject()
  var formData_21630875 = newJObject()
  add(formData_21630875, "UserName", newJString(UserName))
  add(formData_21630875, "Status", newJString(Status))
  add(formData_21630875, "CertificateId", newJString(CertificateId))
  add(query_21630874, "Action", newJString(Action))
  add(query_21630874, "Version", newJString(Version))
  result = call_21630873.call(nil, query_21630874, nil, formData_21630875, nil)

var postUpdateSigningCertificate* = Call_PostUpdateSigningCertificate_21630857(
    name: "postUpdateSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSigningCertificate",
    validator: validate_PostUpdateSigningCertificate_21630858, base: "/",
    makeUrl: url_PostUpdateSigningCertificate_21630859,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSigningCertificate_21630839 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateSigningCertificate_21630841(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateSigningCertificate_21630840(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630842 = query.getOrDefault("Status")
  valid_21630842 = validateParameter(valid_21630842, JString, required = true,
                                   default = newJString("Active"))
  if valid_21630842 != nil:
    section.add "Status", valid_21630842
  var valid_21630843 = query.getOrDefault("CertificateId")
  valid_21630843 = validateParameter(valid_21630843, JString, required = true,
                                   default = nil)
  if valid_21630843 != nil:
    section.add "CertificateId", valid_21630843
  var valid_21630844 = query.getOrDefault("UserName")
  valid_21630844 = validateParameter(valid_21630844, JString, required = false,
                                   default = nil)
  if valid_21630844 != nil:
    section.add "UserName", valid_21630844
  var valid_21630845 = query.getOrDefault("Action")
  valid_21630845 = validateParameter(valid_21630845, JString, required = true, default = newJString(
      "UpdateSigningCertificate"))
  if valid_21630845 != nil:
    section.add "Action", valid_21630845
  var valid_21630846 = query.getOrDefault("Version")
  valid_21630846 = validateParameter(valid_21630846, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630846 != nil:
    section.add "Version", valid_21630846
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630847 = header.getOrDefault("X-Amz-Date")
  valid_21630847 = validateParameter(valid_21630847, JString, required = false,
                                   default = nil)
  if valid_21630847 != nil:
    section.add "X-Amz-Date", valid_21630847
  var valid_21630848 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630848 = validateParameter(valid_21630848, JString, required = false,
                                   default = nil)
  if valid_21630848 != nil:
    section.add "X-Amz-Security-Token", valid_21630848
  var valid_21630849 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630849 = validateParameter(valid_21630849, JString, required = false,
                                   default = nil)
  if valid_21630849 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630849
  var valid_21630850 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630850 = validateParameter(valid_21630850, JString, required = false,
                                   default = nil)
  if valid_21630850 != nil:
    section.add "X-Amz-Algorithm", valid_21630850
  var valid_21630851 = header.getOrDefault("X-Amz-Signature")
  valid_21630851 = validateParameter(valid_21630851, JString, required = false,
                                   default = nil)
  if valid_21630851 != nil:
    section.add "X-Amz-Signature", valid_21630851
  var valid_21630852 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630852 = validateParameter(valid_21630852, JString, required = false,
                                   default = nil)
  if valid_21630852 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630852
  var valid_21630853 = header.getOrDefault("X-Amz-Credential")
  valid_21630853 = validateParameter(valid_21630853, JString, required = false,
                                   default = nil)
  if valid_21630853 != nil:
    section.add "X-Amz-Credential", valid_21630853
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630854: Call_GetUpdateSigningCertificate_21630839;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_21630854.validator(path, query, header, formData, body, _)
  let scheme = call_21630854.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630854.makeUrl(scheme.get, call_21630854.host, call_21630854.base,
                               call_21630854.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630854, uri, valid, _)

proc call*(call_21630855: Call_GetUpdateSigningCertificate_21630839;
          CertificateId: string; Status: string = "Active"; UserName: string = "";
          Action: string = "UpdateSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateSigningCertificate
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630856 = newJObject()
  add(query_21630856, "Status", newJString(Status))
  add(query_21630856, "CertificateId", newJString(CertificateId))
  add(query_21630856, "UserName", newJString(UserName))
  add(query_21630856, "Action", newJString(Action))
  add(query_21630856, "Version", newJString(Version))
  result = call_21630855.call(nil, query_21630856, nil, nil, nil)

var getUpdateSigningCertificate* = Call_GetUpdateSigningCertificate_21630839(
    name: "getUpdateSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSigningCertificate",
    validator: validate_GetUpdateSigningCertificate_21630840, base: "/",
    makeUrl: url_GetUpdateSigningCertificate_21630841,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateUser_21630894 = ref object of OpenApiRestCall_21625435
proc url_PostUpdateUser_21630896(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateUser_21630895(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630897 = query.getOrDefault("Action")
  valid_21630897 = validateParameter(valid_21630897, JString, required = true,
                                   default = newJString("UpdateUser"))
  if valid_21630897 != nil:
    section.add "Action", valid_21630897
  var valid_21630898 = query.getOrDefault("Version")
  valid_21630898 = validateParameter(valid_21630898, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630898 != nil:
    section.add "Version", valid_21630898
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630899 = header.getOrDefault("X-Amz-Date")
  valid_21630899 = validateParameter(valid_21630899, JString, required = false,
                                   default = nil)
  if valid_21630899 != nil:
    section.add "X-Amz-Date", valid_21630899
  var valid_21630900 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630900 = validateParameter(valid_21630900, JString, required = false,
                                   default = nil)
  if valid_21630900 != nil:
    section.add "X-Amz-Security-Token", valid_21630900
  var valid_21630901 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630901 = validateParameter(valid_21630901, JString, required = false,
                                   default = nil)
  if valid_21630901 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630901
  var valid_21630902 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630902 = validateParameter(valid_21630902, JString, required = false,
                                   default = nil)
  if valid_21630902 != nil:
    section.add "X-Amz-Algorithm", valid_21630902
  var valid_21630903 = header.getOrDefault("X-Amz-Signature")
  valid_21630903 = validateParameter(valid_21630903, JString, required = false,
                                   default = nil)
  if valid_21630903 != nil:
    section.add "X-Amz-Signature", valid_21630903
  var valid_21630904 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630904 = validateParameter(valid_21630904, JString, required = false,
                                   default = nil)
  if valid_21630904 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630904
  var valid_21630905 = header.getOrDefault("X-Amz-Credential")
  valid_21630905 = validateParameter(valid_21630905, JString, required = false,
                                   default = nil)
  if valid_21630905 != nil:
    section.add "X-Amz-Credential", valid_21630905
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: JString
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21630906 = formData.getOrDefault("UserName")
  valid_21630906 = validateParameter(valid_21630906, JString, required = true,
                                   default = nil)
  if valid_21630906 != nil:
    section.add "UserName", valid_21630906
  var valid_21630907 = formData.getOrDefault("NewUserName")
  valid_21630907 = validateParameter(valid_21630907, JString, required = false,
                                   default = nil)
  if valid_21630907 != nil:
    section.add "NewUserName", valid_21630907
  var valid_21630908 = formData.getOrDefault("NewPath")
  valid_21630908 = validateParameter(valid_21630908, JString, required = false,
                                   default = nil)
  if valid_21630908 != nil:
    section.add "NewPath", valid_21630908
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630909: Call_PostUpdateUser_21630894; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  let valid = call_21630909.validator(path, query, header, formData, body, _)
  let scheme = call_21630909.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630909.makeUrl(scheme.get, call_21630909.host, call_21630909.base,
                               call_21630909.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630909, uri, valid, _)

proc call*(call_21630910: Call_PostUpdateUser_21630894; UserName: string;
          NewUserName: string = ""; Action: string = "UpdateUser";
          Version: string = "2010-05-08"; NewPath: string = ""): Recallable =
  ## postUpdateUser
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ##   UserName: string (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: string
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   NewPath: string
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_21630911 = newJObject()
  var formData_21630912 = newJObject()
  add(formData_21630912, "UserName", newJString(UserName))
  add(formData_21630912, "NewUserName", newJString(NewUserName))
  add(query_21630911, "Action", newJString(Action))
  add(query_21630911, "Version", newJString(Version))
  add(formData_21630912, "NewPath", newJString(NewPath))
  result = call_21630910.call(nil, query_21630911, nil, formData_21630912, nil)

var postUpdateUser* = Call_PostUpdateUser_21630894(name: "postUpdateUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateUser", validator: validate_PostUpdateUser_21630895,
    base: "/", makeUrl: url_PostUpdateUser_21630896,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateUser_21630876 = ref object of OpenApiRestCall_21625435
proc url_GetUpdateUser_21630878(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateUser_21630877(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   NewUserName: JString
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_21630879 = query.getOrDefault("UserName")
  valid_21630879 = validateParameter(valid_21630879, JString, required = true,
                                   default = nil)
  if valid_21630879 != nil:
    section.add "UserName", valid_21630879
  var valid_21630880 = query.getOrDefault("Action")
  valid_21630880 = validateParameter(valid_21630880, JString, required = true,
                                   default = newJString("UpdateUser"))
  if valid_21630880 != nil:
    section.add "Action", valid_21630880
  var valid_21630881 = query.getOrDefault("NewUserName")
  valid_21630881 = validateParameter(valid_21630881, JString, required = false,
                                   default = nil)
  if valid_21630881 != nil:
    section.add "NewUserName", valid_21630881
  var valid_21630882 = query.getOrDefault("NewPath")
  valid_21630882 = validateParameter(valid_21630882, JString, required = false,
                                   default = nil)
  if valid_21630882 != nil:
    section.add "NewPath", valid_21630882
  var valid_21630883 = query.getOrDefault("Version")
  valid_21630883 = validateParameter(valid_21630883, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630883 != nil:
    section.add "Version", valid_21630883
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630884 = header.getOrDefault("X-Amz-Date")
  valid_21630884 = validateParameter(valid_21630884, JString, required = false,
                                   default = nil)
  if valid_21630884 != nil:
    section.add "X-Amz-Date", valid_21630884
  var valid_21630885 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630885 = validateParameter(valid_21630885, JString, required = false,
                                   default = nil)
  if valid_21630885 != nil:
    section.add "X-Amz-Security-Token", valid_21630885
  var valid_21630886 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630886 = validateParameter(valid_21630886, JString, required = false,
                                   default = nil)
  if valid_21630886 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630886
  var valid_21630887 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630887 = validateParameter(valid_21630887, JString, required = false,
                                   default = nil)
  if valid_21630887 != nil:
    section.add "X-Amz-Algorithm", valid_21630887
  var valid_21630888 = header.getOrDefault("X-Amz-Signature")
  valid_21630888 = validateParameter(valid_21630888, JString, required = false,
                                   default = nil)
  if valid_21630888 != nil:
    section.add "X-Amz-Signature", valid_21630888
  var valid_21630889 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630889 = validateParameter(valid_21630889, JString, required = false,
                                   default = nil)
  if valid_21630889 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630889
  var valid_21630890 = header.getOrDefault("X-Amz-Credential")
  valid_21630890 = validateParameter(valid_21630890, JString, required = false,
                                   default = nil)
  if valid_21630890 != nil:
    section.add "X-Amz-Credential", valid_21630890
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630891: Call_GetUpdateUser_21630876; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  let valid = call_21630891.validator(path, query, header, formData, body, _)
  let scheme = call_21630891.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630891.makeUrl(scheme.get, call_21630891.host, call_21630891.base,
                               call_21630891.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630891, uri, valid, _)

proc call*(call_21630892: Call_GetUpdateUser_21630876; UserName: string;
          Action: string = "UpdateUser"; NewUserName: string = ""; NewPath: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateUser
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ##   UserName: string (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   NewUserName: string
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_21630893 = newJObject()
  add(query_21630893, "UserName", newJString(UserName))
  add(query_21630893, "Action", newJString(Action))
  add(query_21630893, "NewUserName", newJString(NewUserName))
  add(query_21630893, "NewPath", newJString(NewPath))
  add(query_21630893, "Version", newJString(Version))
  result = call_21630892.call(nil, query_21630893, nil, nil, nil)

var getUpdateUser* = Call_GetUpdateUser_21630876(name: "getUpdateUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateUser", validator: validate_GetUpdateUser_21630877,
    base: "/", makeUrl: url_GetUpdateUser_21630878,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadSSHPublicKey_21630930 = ref object of OpenApiRestCall_21625435
proc url_PostUploadSSHPublicKey_21630932(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUploadSSHPublicKey_21630931(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630933 = query.getOrDefault("Action")
  valid_21630933 = validateParameter(valid_21630933, JString, required = true,
                                   default = newJString("UploadSSHPublicKey"))
  if valid_21630933 != nil:
    section.add "Action", valid_21630933
  var valid_21630934 = query.getOrDefault("Version")
  valid_21630934 = validateParameter(valid_21630934, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630934 != nil:
    section.add "Version", valid_21630934
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630935 = header.getOrDefault("X-Amz-Date")
  valid_21630935 = validateParameter(valid_21630935, JString, required = false,
                                   default = nil)
  if valid_21630935 != nil:
    section.add "X-Amz-Date", valid_21630935
  var valid_21630936 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630936 = validateParameter(valid_21630936, JString, required = false,
                                   default = nil)
  if valid_21630936 != nil:
    section.add "X-Amz-Security-Token", valid_21630936
  var valid_21630937 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630937 = validateParameter(valid_21630937, JString, required = false,
                                   default = nil)
  if valid_21630937 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630937
  var valid_21630938 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630938 = validateParameter(valid_21630938, JString, required = false,
                                   default = nil)
  if valid_21630938 != nil:
    section.add "X-Amz-Algorithm", valid_21630938
  var valid_21630939 = header.getOrDefault("X-Amz-Signature")
  valid_21630939 = validateParameter(valid_21630939, JString, required = false,
                                   default = nil)
  if valid_21630939 != nil:
    section.add "X-Amz-Signature", valid_21630939
  var valid_21630940 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630940 = validateParameter(valid_21630940, JString, required = false,
                                   default = nil)
  if valid_21630940 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630940
  var valid_21630941 = header.getOrDefault("X-Amz-Credential")
  valid_21630941 = validateParameter(valid_21630941, JString, required = false,
                                   default = nil)
  if valid_21630941 != nil:
    section.add "X-Amz-Credential", valid_21630941
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyBody: JString (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_21630942 = formData.getOrDefault("UserName")
  valid_21630942 = validateParameter(valid_21630942, JString, required = true,
                                   default = nil)
  if valid_21630942 != nil:
    section.add "UserName", valid_21630942
  var valid_21630943 = formData.getOrDefault("SSHPublicKeyBody")
  valid_21630943 = validateParameter(valid_21630943, JString, required = true,
                                   default = nil)
  if valid_21630943 != nil:
    section.add "SSHPublicKeyBody", valid_21630943
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630944: Call_PostUploadSSHPublicKey_21630930;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_21630944.validator(path, query, header, formData, body, _)
  let scheme = call_21630944.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630944.makeUrl(scheme.get, call_21630944.host, call_21630944.base,
                               call_21630944.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630944, uri, valid, _)

proc call*(call_21630945: Call_PostUploadSSHPublicKey_21630930; UserName: string;
          SSHPublicKeyBody: string; Action: string = "UploadSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## postUploadSSHPublicKey
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyBody: string (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630946 = newJObject()
  var formData_21630947 = newJObject()
  add(formData_21630947, "UserName", newJString(UserName))
  add(formData_21630947, "SSHPublicKeyBody", newJString(SSHPublicKeyBody))
  add(query_21630946, "Action", newJString(Action))
  add(query_21630946, "Version", newJString(Version))
  result = call_21630945.call(nil, query_21630946, nil, formData_21630947, nil)

var postUploadSSHPublicKey* = Call_PostUploadSSHPublicKey_21630930(
    name: "postUploadSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadSSHPublicKey",
    validator: validate_PostUploadSSHPublicKey_21630931, base: "/",
    makeUrl: url_PostUploadSSHPublicKey_21630932,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadSSHPublicKey_21630913 = ref object of OpenApiRestCall_21625435
proc url_GetUploadSSHPublicKey_21630915(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUploadSSHPublicKey_21630914(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyBody: JString (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyBody` field"
  var valid_21630916 = query.getOrDefault("SSHPublicKeyBody")
  valid_21630916 = validateParameter(valid_21630916, JString, required = true,
                                   default = nil)
  if valid_21630916 != nil:
    section.add "SSHPublicKeyBody", valid_21630916
  var valid_21630917 = query.getOrDefault("UserName")
  valid_21630917 = validateParameter(valid_21630917, JString, required = true,
                                   default = nil)
  if valid_21630917 != nil:
    section.add "UserName", valid_21630917
  var valid_21630918 = query.getOrDefault("Action")
  valid_21630918 = validateParameter(valid_21630918, JString, required = true,
                                   default = newJString("UploadSSHPublicKey"))
  if valid_21630918 != nil:
    section.add "Action", valid_21630918
  var valid_21630919 = query.getOrDefault("Version")
  valid_21630919 = validateParameter(valid_21630919, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630919 != nil:
    section.add "Version", valid_21630919
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630920 = header.getOrDefault("X-Amz-Date")
  valid_21630920 = validateParameter(valid_21630920, JString, required = false,
                                   default = nil)
  if valid_21630920 != nil:
    section.add "X-Amz-Date", valid_21630920
  var valid_21630921 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630921 = validateParameter(valid_21630921, JString, required = false,
                                   default = nil)
  if valid_21630921 != nil:
    section.add "X-Amz-Security-Token", valid_21630921
  var valid_21630922 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630922 = validateParameter(valid_21630922, JString, required = false,
                                   default = nil)
  if valid_21630922 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630922
  var valid_21630923 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630923 = validateParameter(valid_21630923, JString, required = false,
                                   default = nil)
  if valid_21630923 != nil:
    section.add "X-Amz-Algorithm", valid_21630923
  var valid_21630924 = header.getOrDefault("X-Amz-Signature")
  valid_21630924 = validateParameter(valid_21630924, JString, required = false,
                                   default = nil)
  if valid_21630924 != nil:
    section.add "X-Amz-Signature", valid_21630924
  var valid_21630925 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630925 = validateParameter(valid_21630925, JString, required = false,
                                   default = nil)
  if valid_21630925 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630925
  var valid_21630926 = header.getOrDefault("X-Amz-Credential")
  valid_21630926 = validateParameter(valid_21630926, JString, required = false,
                                   default = nil)
  if valid_21630926 != nil:
    section.add "X-Amz-Credential", valid_21630926
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630927: Call_GetUploadSSHPublicKey_21630913;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_21630927.validator(path, query, header, formData, body, _)
  let scheme = call_21630927.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630927.makeUrl(scheme.get, call_21630927.host, call_21630927.base,
                               call_21630927.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630927, uri, valid, _)

proc call*(call_21630928: Call_GetUploadSSHPublicKey_21630913;
          SSHPublicKeyBody: string; UserName: string;
          Action: string = "UploadSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getUploadSSHPublicKey
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyBody: string (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630929 = newJObject()
  add(query_21630929, "SSHPublicKeyBody", newJString(SSHPublicKeyBody))
  add(query_21630929, "UserName", newJString(UserName))
  add(query_21630929, "Action", newJString(Action))
  add(query_21630929, "Version", newJString(Version))
  result = call_21630928.call(nil, query_21630929, nil, nil, nil)

var getUploadSSHPublicKey* = Call_GetUploadSSHPublicKey_21630913(
    name: "getUploadSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadSSHPublicKey",
    validator: validate_GetUploadSSHPublicKey_21630914, base: "/",
    makeUrl: url_GetUploadSSHPublicKey_21630915,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadServerCertificate_21630968 = ref object of OpenApiRestCall_21625435
proc url_PostUploadServerCertificate_21630970(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUploadServerCertificate_21630969(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630971 = query.getOrDefault("Action")
  valid_21630971 = validateParameter(valid_21630971, JString, required = true, default = newJString(
      "UploadServerCertificate"))
  if valid_21630971 != nil:
    section.add "Action", valid_21630971
  var valid_21630972 = query.getOrDefault("Version")
  valid_21630972 = validateParameter(valid_21630972, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630972 != nil:
    section.add "Version", valid_21630972
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630973 = header.getOrDefault("X-Amz-Date")
  valid_21630973 = validateParameter(valid_21630973, JString, required = false,
                                   default = nil)
  if valid_21630973 != nil:
    section.add "X-Amz-Date", valid_21630973
  var valid_21630974 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630974 = validateParameter(valid_21630974, JString, required = false,
                                   default = nil)
  if valid_21630974 != nil:
    section.add "X-Amz-Security-Token", valid_21630974
  var valid_21630975 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630975 = validateParameter(valid_21630975, JString, required = false,
                                   default = nil)
  if valid_21630975 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630975
  var valid_21630976 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630976 = validateParameter(valid_21630976, JString, required = false,
                                   default = nil)
  if valid_21630976 != nil:
    section.add "X-Amz-Algorithm", valid_21630976
  var valid_21630977 = header.getOrDefault("X-Amz-Signature")
  valid_21630977 = validateParameter(valid_21630977, JString, required = false,
                                   default = nil)
  if valid_21630977 != nil:
    section.add "X-Amz-Signature", valid_21630977
  var valid_21630978 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630978 = validateParameter(valid_21630978, JString, required = false,
                                   default = nil)
  if valid_21630978 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630978
  var valid_21630979 = header.getOrDefault("X-Amz-Credential")
  valid_21630979 = validateParameter(valid_21630979, JString, required = false,
                                   default = nil)
  if valid_21630979 != nil:
    section.add "X-Amz-Credential", valid_21630979
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PrivateKey: JString (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CertificateChain: JString
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Path: JString
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CertificateBody` field"
  var valid_21630980 = formData.getOrDefault("CertificateBody")
  valid_21630980 = validateParameter(valid_21630980, JString, required = true,
                                   default = nil)
  if valid_21630980 != nil:
    section.add "CertificateBody", valid_21630980
  var valid_21630981 = formData.getOrDefault("ServerCertificateName")
  valid_21630981 = validateParameter(valid_21630981, JString, required = true,
                                   default = nil)
  if valid_21630981 != nil:
    section.add "ServerCertificateName", valid_21630981
  var valid_21630982 = formData.getOrDefault("PrivateKey")
  valid_21630982 = validateParameter(valid_21630982, JString, required = true,
                                   default = nil)
  if valid_21630982 != nil:
    section.add "PrivateKey", valid_21630982
  var valid_21630983 = formData.getOrDefault("CertificateChain")
  valid_21630983 = validateParameter(valid_21630983, JString, required = false,
                                   default = nil)
  if valid_21630983 != nil:
    section.add "CertificateChain", valid_21630983
  var valid_21630984 = formData.getOrDefault("Path")
  valid_21630984 = validateParameter(valid_21630984, JString, required = false,
                                   default = nil)
  if valid_21630984 != nil:
    section.add "Path", valid_21630984
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630985: Call_PostUploadServerCertificate_21630968;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_21630985.validator(path, query, header, formData, body, _)
  let scheme = call_21630985.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630985.makeUrl(scheme.get, call_21630985.host, call_21630985.base,
                               call_21630985.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630985, uri, valid, _)

proc call*(call_21630986: Call_PostUploadServerCertificate_21630968;
          CertificateBody: string; ServerCertificateName: string;
          PrivateKey: string; Action: string = "UploadServerCertificate";
          CertificateChain: string = ""; Version: string = "2010-05-08";
          Path: string = ""): Recallable =
  ## postUploadServerCertificate
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   PrivateKey: string (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CertificateChain: string
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Version: string (required)
  ##   Path: string
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  var query_21630987 = newJObject()
  var formData_21630988 = newJObject()
  add(formData_21630988, "CertificateBody", newJString(CertificateBody))
  add(formData_21630988, "ServerCertificateName",
      newJString(ServerCertificateName))
  add(query_21630987, "Action", newJString(Action))
  add(formData_21630988, "PrivateKey", newJString(PrivateKey))
  add(formData_21630988, "CertificateChain", newJString(CertificateChain))
  add(query_21630987, "Version", newJString(Version))
  add(formData_21630988, "Path", newJString(Path))
  result = call_21630986.call(nil, query_21630987, nil, formData_21630988, nil)

var postUploadServerCertificate* = Call_PostUploadServerCertificate_21630968(
    name: "postUploadServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadServerCertificate",
    validator: validate_PostUploadServerCertificate_21630969, base: "/",
    makeUrl: url_PostUploadServerCertificate_21630970,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadServerCertificate_21630948 = ref object of OpenApiRestCall_21625435
proc url_GetUploadServerCertificate_21630950(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUploadServerCertificate_21630949(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CertificateChain: JString
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   PrivateKey: JString (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_21630951 = query.getOrDefault("ServerCertificateName")
  valid_21630951 = validateParameter(valid_21630951, JString, required = true,
                                   default = nil)
  if valid_21630951 != nil:
    section.add "ServerCertificateName", valid_21630951
  var valid_21630952 = query.getOrDefault("CertificateBody")
  valid_21630952 = validateParameter(valid_21630952, JString, required = true,
                                   default = nil)
  if valid_21630952 != nil:
    section.add "CertificateBody", valid_21630952
  var valid_21630953 = query.getOrDefault("CertificateChain")
  valid_21630953 = validateParameter(valid_21630953, JString, required = false,
                                   default = nil)
  if valid_21630953 != nil:
    section.add "CertificateChain", valid_21630953
  var valid_21630954 = query.getOrDefault("Action")
  valid_21630954 = validateParameter(valid_21630954, JString, required = true, default = newJString(
      "UploadServerCertificate"))
  if valid_21630954 != nil:
    section.add "Action", valid_21630954
  var valid_21630955 = query.getOrDefault("Path")
  valid_21630955 = validateParameter(valid_21630955, JString, required = false,
                                   default = nil)
  if valid_21630955 != nil:
    section.add "Path", valid_21630955
  var valid_21630956 = query.getOrDefault("PrivateKey")
  valid_21630956 = validateParameter(valid_21630956, JString, required = true,
                                   default = nil)
  if valid_21630956 != nil:
    section.add "PrivateKey", valid_21630956
  var valid_21630957 = query.getOrDefault("Version")
  valid_21630957 = validateParameter(valid_21630957, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630957 != nil:
    section.add "Version", valid_21630957
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630958 = header.getOrDefault("X-Amz-Date")
  valid_21630958 = validateParameter(valid_21630958, JString, required = false,
                                   default = nil)
  if valid_21630958 != nil:
    section.add "X-Amz-Date", valid_21630958
  var valid_21630959 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630959 = validateParameter(valid_21630959, JString, required = false,
                                   default = nil)
  if valid_21630959 != nil:
    section.add "X-Amz-Security-Token", valid_21630959
  var valid_21630960 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630960 = validateParameter(valid_21630960, JString, required = false,
                                   default = nil)
  if valid_21630960 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630960
  var valid_21630961 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630961 = validateParameter(valid_21630961, JString, required = false,
                                   default = nil)
  if valid_21630961 != nil:
    section.add "X-Amz-Algorithm", valid_21630961
  var valid_21630962 = header.getOrDefault("X-Amz-Signature")
  valid_21630962 = validateParameter(valid_21630962, JString, required = false,
                                   default = nil)
  if valid_21630962 != nil:
    section.add "X-Amz-Signature", valid_21630962
  var valid_21630963 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630963 = validateParameter(valid_21630963, JString, required = false,
                                   default = nil)
  if valid_21630963 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630963
  var valid_21630964 = header.getOrDefault("X-Amz-Credential")
  valid_21630964 = validateParameter(valid_21630964, JString, required = false,
                                   default = nil)
  if valid_21630964 != nil:
    section.add "X-Amz-Credential", valid_21630964
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630965: Call_GetUploadServerCertificate_21630948;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_21630965.validator(path, query, header, formData, body, _)
  let scheme = call_21630965.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630965.makeUrl(scheme.get, call_21630965.host, call_21630965.base,
                               call_21630965.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630965, uri, valid, _)

proc call*(call_21630966: Call_GetUploadServerCertificate_21630948;
          ServerCertificateName: string; CertificateBody: string;
          PrivateKey: string; CertificateChain: string = "";
          Action: string = "UploadServerCertificate"; Path: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUploadServerCertificate
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CertificateChain: string
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   PrivateKey: string (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Version: string (required)
  var query_21630967 = newJObject()
  add(query_21630967, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_21630967, "CertificateBody", newJString(CertificateBody))
  add(query_21630967, "CertificateChain", newJString(CertificateChain))
  add(query_21630967, "Action", newJString(Action))
  add(query_21630967, "Path", newJString(Path))
  add(query_21630967, "PrivateKey", newJString(PrivateKey))
  add(query_21630967, "Version", newJString(Version))
  result = call_21630966.call(nil, query_21630967, nil, nil, nil)

var getUploadServerCertificate* = Call_GetUploadServerCertificate_21630948(
    name: "getUploadServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadServerCertificate",
    validator: validate_GetUploadServerCertificate_21630949, base: "/",
    makeUrl: url_GetUploadServerCertificate_21630950,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadSigningCertificate_21631006 = ref object of OpenApiRestCall_21625435
proc url_PostUploadSigningCertificate_21631008(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUploadSigningCertificate_21631007(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21631009 = query.getOrDefault("Action")
  valid_21631009 = validateParameter(valid_21631009, JString, required = true, default = newJString(
      "UploadSigningCertificate"))
  if valid_21631009 != nil:
    section.add "Action", valid_21631009
  var valid_21631010 = query.getOrDefault("Version")
  valid_21631010 = validateParameter(valid_21631010, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21631010 != nil:
    section.add "Version", valid_21631010
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631011 = header.getOrDefault("X-Amz-Date")
  valid_21631011 = validateParameter(valid_21631011, JString, required = false,
                                   default = nil)
  if valid_21631011 != nil:
    section.add "X-Amz-Date", valid_21631011
  var valid_21631012 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631012 = validateParameter(valid_21631012, JString, required = false,
                                   default = nil)
  if valid_21631012 != nil:
    section.add "X-Amz-Security-Token", valid_21631012
  var valid_21631013 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631013 = validateParameter(valid_21631013, JString, required = false,
                                   default = nil)
  if valid_21631013 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631013
  var valid_21631014 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631014 = validateParameter(valid_21631014, JString, required = false,
                                   default = nil)
  if valid_21631014 != nil:
    section.add "X-Amz-Algorithm", valid_21631014
  var valid_21631015 = header.getOrDefault("X-Amz-Signature")
  valid_21631015 = validateParameter(valid_21631015, JString, required = false,
                                   default = nil)
  if valid_21631015 != nil:
    section.add "X-Amz-Signature", valid_21631015
  var valid_21631016 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631016 = validateParameter(valid_21631016, JString, required = false,
                                   default = nil)
  if valid_21631016 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631016
  var valid_21631017 = header.getOrDefault("X-Amz-Credential")
  valid_21631017 = validateParameter(valid_21631017, JString, required = false,
                                   default = nil)
  if valid_21631017 != nil:
    section.add "X-Amz-Credential", valid_21631017
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CertificateBody` field"
  var valid_21631018 = formData.getOrDefault("CertificateBody")
  valid_21631018 = validateParameter(valid_21631018, JString, required = true,
                                   default = nil)
  if valid_21631018 != nil:
    section.add "CertificateBody", valid_21631018
  var valid_21631019 = formData.getOrDefault("UserName")
  valid_21631019 = validateParameter(valid_21631019, JString, required = false,
                                   default = nil)
  if valid_21631019 != nil:
    section.add "UserName", valid_21631019
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631020: Call_PostUploadSigningCertificate_21631006;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_21631020.validator(path, query, header, formData, body, _)
  let scheme = call_21631020.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631020.makeUrl(scheme.get, call_21631020.host, call_21631020.base,
                               call_21631020.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631020, uri, valid, _)

proc call*(call_21631021: Call_PostUploadSigningCertificate_21631006;
          CertificateBody: string; UserName: string = "";
          Action: string = "UploadSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postUploadSigningCertificate
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21631022 = newJObject()
  var formData_21631023 = newJObject()
  add(formData_21631023, "CertificateBody", newJString(CertificateBody))
  add(formData_21631023, "UserName", newJString(UserName))
  add(query_21631022, "Action", newJString(Action))
  add(query_21631022, "Version", newJString(Version))
  result = call_21631021.call(nil, query_21631022, nil, formData_21631023, nil)

var postUploadSigningCertificate* = Call_PostUploadSigningCertificate_21631006(
    name: "postUploadSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadSigningCertificate",
    validator: validate_PostUploadSigningCertificate_21631007, base: "/",
    makeUrl: url_PostUploadSigningCertificate_21631008,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadSigningCertificate_21630989 = ref object of OpenApiRestCall_21625435
proc url_GetUploadSigningCertificate_21630991(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUploadSigningCertificate_21630990(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `CertificateBody` field"
  var valid_21630992 = query.getOrDefault("CertificateBody")
  valid_21630992 = validateParameter(valid_21630992, JString, required = true,
                                   default = nil)
  if valid_21630992 != nil:
    section.add "CertificateBody", valid_21630992
  var valid_21630993 = query.getOrDefault("UserName")
  valid_21630993 = validateParameter(valid_21630993, JString, required = false,
                                   default = nil)
  if valid_21630993 != nil:
    section.add "UserName", valid_21630993
  var valid_21630994 = query.getOrDefault("Action")
  valid_21630994 = validateParameter(valid_21630994, JString, required = true, default = newJString(
      "UploadSigningCertificate"))
  if valid_21630994 != nil:
    section.add "Action", valid_21630994
  var valid_21630995 = query.getOrDefault("Version")
  valid_21630995 = validateParameter(valid_21630995, JString, required = true,
                                   default = newJString("2010-05-08"))
  if valid_21630995 != nil:
    section.add "Version", valid_21630995
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630996 = header.getOrDefault("X-Amz-Date")
  valid_21630996 = validateParameter(valid_21630996, JString, required = false,
                                   default = nil)
  if valid_21630996 != nil:
    section.add "X-Amz-Date", valid_21630996
  var valid_21630997 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630997 = validateParameter(valid_21630997, JString, required = false,
                                   default = nil)
  if valid_21630997 != nil:
    section.add "X-Amz-Security-Token", valid_21630997
  var valid_21630998 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630998 = validateParameter(valid_21630998, JString, required = false,
                                   default = nil)
  if valid_21630998 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630998
  var valid_21630999 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630999 = validateParameter(valid_21630999, JString, required = false,
                                   default = nil)
  if valid_21630999 != nil:
    section.add "X-Amz-Algorithm", valid_21630999
  var valid_21631000 = header.getOrDefault("X-Amz-Signature")
  valid_21631000 = validateParameter(valid_21631000, JString, required = false,
                                   default = nil)
  if valid_21631000 != nil:
    section.add "X-Amz-Signature", valid_21631000
  var valid_21631001 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631001 = validateParameter(valid_21631001, JString, required = false,
                                   default = nil)
  if valid_21631001 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631001
  var valid_21631002 = header.getOrDefault("X-Amz-Credential")
  valid_21631002 = validateParameter(valid_21631002, JString, required = false,
                                   default = nil)
  if valid_21631002 != nil:
    section.add "X-Amz-Credential", valid_21631002
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631003: Call_GetUploadSigningCertificate_21630989;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_21631003.validator(path, query, header, formData, body, _)
  let scheme = call_21631003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631003.makeUrl(scheme.get, call_21631003.host, call_21631003.base,
                               call_21631003.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631003, uri, valid, _)

proc call*(call_21631004: Call_GetUploadSigningCertificate_21630989;
          CertificateBody: string; UserName: string = "";
          Action: string = "UploadSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUploadSigningCertificate
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21631005 = newJObject()
  add(query_21631005, "CertificateBody", newJString(CertificateBody))
  add(query_21631005, "UserName", newJString(UserName))
  add(query_21631005, "Action", newJString(Action))
  add(query_21631005, "Version", newJString(Version))
  result = call_21631004.call(nil, query_21631005, nil, nil, nil)

var getUploadSigningCertificate* = Call_GetUploadSigningCertificate_21630989(
    name: "getUploadSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadSigningCertificate",
    validator: validate_GetUploadSigningCertificate_21630990, base: "/",
    makeUrl: url_GetUploadSigningCertificate_21630991,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
type
  XAmz = enum
    SecurityToken = "X-Amz-Security-Token", ContentSha256 = "X-Amz-Content-Sha256"
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  recall.headers[$ContentSha256] = hash(recall.body, SHA256)
  let
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode; body = ""): Recallable {.
    base.} =
  ## the hook is a terrible earworm
  var
    headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
    text = body
  if text.len == 0 and "body" in input:
    text = input.getOrDefault("body").getStr
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  else:
    headers["content-md5"] = base64.encode text.toMD5
  if not headers.hasKey($SecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[$SecurityToken] = session
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)

when not defined(ssl):
  {.error: "use ssl".}