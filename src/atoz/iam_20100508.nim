
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: AWS Identity and Access Management
## version: 2010-05-08
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>AWS Identity and Access Management</fullname> <p>AWS Identity and Access Management (IAM) is a web service that you can use to manage users and user permissions under your AWS account. This guide provides descriptions of IAM actions that you can call programmatically. For general information about IAM, see <a href="http://aws.amazon.com/iam/">AWS Identity and Access Management (IAM)</a>. For the user guide for IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/">Using IAM</a>. </p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to IAM and AWS. For example, the SDKs take care of tasks such as cryptographically signing requests (see below), managing errors, and retrying requests automatically. For information about the AWS SDKs, including how to download and install them, see the <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a> page. </p> </note> <p>We recommend that you use the AWS SDKs to make programmatic API calls to IAM. However, you can also use the IAM Query API to make direct calls to the IAM web service. To learn more about the IAM Query API, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>Using IAM</i> guide. IAM supports GET and POST requests for all actions. That is, the API does not require you to use GET for some actions and POST for others. However, GET requests are subject to the limitation size of a URL. Therefore, for operations that require larger sizes, use a POST request. </p> <p> <b>Signing Requests</b> </p> <p>Requests must be signed using an access key ID and a secret access key. We strongly recommend that you do not use your AWS account access key ID and secret access key for everyday work with IAM. You can use the access key ID and secret access key for an IAM user or you can use the AWS Security Token Service to generate temporary security credentials and use those to sign requests.</p> <p>To sign requests, we recommend that you use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>. If you have an existing application that uses Signature Version 2, you do not have to update it to use Signature Version 4. However, some operations now require Signature Version 4. The documentation for operations that require version 4 indicate this requirement. </p> <p> <b>Additional Resources</b> </p> <p>For more information, see the following:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html">AWS Security Credentials</a>. This topic provides general information about the types of credentials used for accessing AWS. </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAMBestPractices.html">IAM Best Practices</a>. This topic presents a list of suggestions for using the IAM service to help secure your AWS resources. </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a>. This set of topics walk you through the process of signing a request using an access key ID and secret access key. </p> </li> </ul>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/iam/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_609589 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_609589](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_609589): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"cn-northwest-1": "iam.cn-northwest-1.amazonaws.com.cn",
                           "cn-north-1": "iam.cn-north-1.amazonaws.com.cn"}.toTable, Scheme.Https: {
      "cn-northwest-1": "iam.cn-northwest-1.amazonaws.com.cn",
      "cn-north-1": "iam.cn-north-1.amazonaws.com.cn"}.toTable}.toTable
const
  awsServiceName = "iam"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddClientIDToOpenIDConnectProvider_610199 = ref object of OpenApiRestCall_609589
proc url_PostAddClientIDToOpenIDConnectProvider_610201(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddClientIDToOpenIDConnectProvider_610200(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610202 = query.getOrDefault("Action")
  valid_610202 = validateParameter(valid_610202, JString, required = true, default = newJString(
      "AddClientIDToOpenIDConnectProvider"))
  if valid_610202 != nil:
    section.add "Action", valid_610202
  var valid_610203 = query.getOrDefault("Version")
  valid_610203 = validateParameter(valid_610203, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610203 != nil:
    section.add "Version", valid_610203
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610204 = header.getOrDefault("X-Amz-Signature")
  valid_610204 = validateParameter(valid_610204, JString, required = false,
                                 default = nil)
  if valid_610204 != nil:
    section.add "X-Amz-Signature", valid_610204
  var valid_610205 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610205 = validateParameter(valid_610205, JString, required = false,
                                 default = nil)
  if valid_610205 != nil:
    section.add "X-Amz-Content-Sha256", valid_610205
  var valid_610206 = header.getOrDefault("X-Amz-Date")
  valid_610206 = validateParameter(valid_610206, JString, required = false,
                                 default = nil)
  if valid_610206 != nil:
    section.add "X-Amz-Date", valid_610206
  var valid_610207 = header.getOrDefault("X-Amz-Credential")
  valid_610207 = validateParameter(valid_610207, JString, required = false,
                                 default = nil)
  if valid_610207 != nil:
    section.add "X-Amz-Credential", valid_610207
  var valid_610208 = header.getOrDefault("X-Amz-Security-Token")
  valid_610208 = validateParameter(valid_610208, JString, required = false,
                                 default = nil)
  if valid_610208 != nil:
    section.add "X-Amz-Security-Token", valid_610208
  var valid_610209 = header.getOrDefault("X-Amz-Algorithm")
  valid_610209 = validateParameter(valid_610209, JString, required = false,
                                 default = nil)
  if valid_610209 != nil:
    section.add "X-Amz-Algorithm", valid_610209
  var valid_610210 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610210 = validateParameter(valid_610210, JString, required = false,
                                 default = nil)
  if valid_610210 != nil:
    section.add "X-Amz-SignedHeaders", valid_610210
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ClientID` field"
  var valid_610211 = formData.getOrDefault("ClientID")
  valid_610211 = validateParameter(valid_610211, JString, required = true,
                                 default = nil)
  if valid_610211 != nil:
    section.add "ClientID", valid_610211
  var valid_610212 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_610212 = validateParameter(valid_610212, JString, required = true,
                                 default = nil)
  if valid_610212 != nil:
    section.add "OpenIDConnectProviderArn", valid_610212
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610213: Call_PostAddClientIDToOpenIDConnectProvider_610199;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  let valid = call_610213.validator(path, query, header, formData, body)
  let scheme = call_610213.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610213.url(scheme.get, call_610213.host, call_610213.base,
                         call_610213.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610213, url, valid)

proc call*(call_610214: Call_PostAddClientIDToOpenIDConnectProvider_610199;
          ClientID: string; OpenIDConnectProviderArn: string;
          Action: string = "AddClientIDToOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postAddClientIDToOpenIDConnectProvider
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_610215 = newJObject()
  var formData_610216 = newJObject()
  add(formData_610216, "ClientID", newJString(ClientID))
  add(query_610215, "Action", newJString(Action))
  add(query_610215, "Version", newJString(Version))
  add(formData_610216, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_610214.call(nil, query_610215, nil, formData_610216, nil)

var postAddClientIDToOpenIDConnectProvider* = Call_PostAddClientIDToOpenIDConnectProvider_610199(
    name: "postAddClientIDToOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=AddClientIDToOpenIDConnectProvider",
    validator: validate_PostAddClientIDToOpenIDConnectProvider_610200, base: "/",
    url: url_PostAddClientIDToOpenIDConnectProvider_610201,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddClientIDToOpenIDConnectProvider_609927 = ref object of OpenApiRestCall_609589
proc url_GetAddClientIDToOpenIDConnectProvider_609929(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddClientIDToOpenIDConnectProvider_609928(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ClientID` field"
  var valid_610041 = query.getOrDefault("ClientID")
  valid_610041 = validateParameter(valid_610041, JString, required = true,
                                 default = nil)
  if valid_610041 != nil:
    section.add "ClientID", valid_610041
  var valid_610042 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_610042 = validateParameter(valid_610042, JString, required = true,
                                 default = nil)
  if valid_610042 != nil:
    section.add "OpenIDConnectProviderArn", valid_610042
  var valid_610056 = query.getOrDefault("Action")
  valid_610056 = validateParameter(valid_610056, JString, required = true, default = newJString(
      "AddClientIDToOpenIDConnectProvider"))
  if valid_610056 != nil:
    section.add "Action", valid_610056
  var valid_610057 = query.getOrDefault("Version")
  valid_610057 = validateParameter(valid_610057, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610057 != nil:
    section.add "Version", valid_610057
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610058 = header.getOrDefault("X-Amz-Signature")
  valid_610058 = validateParameter(valid_610058, JString, required = false,
                                 default = nil)
  if valid_610058 != nil:
    section.add "X-Amz-Signature", valid_610058
  var valid_610059 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610059 = validateParameter(valid_610059, JString, required = false,
                                 default = nil)
  if valid_610059 != nil:
    section.add "X-Amz-Content-Sha256", valid_610059
  var valid_610060 = header.getOrDefault("X-Amz-Date")
  valid_610060 = validateParameter(valid_610060, JString, required = false,
                                 default = nil)
  if valid_610060 != nil:
    section.add "X-Amz-Date", valid_610060
  var valid_610061 = header.getOrDefault("X-Amz-Credential")
  valid_610061 = validateParameter(valid_610061, JString, required = false,
                                 default = nil)
  if valid_610061 != nil:
    section.add "X-Amz-Credential", valid_610061
  var valid_610062 = header.getOrDefault("X-Amz-Security-Token")
  valid_610062 = validateParameter(valid_610062, JString, required = false,
                                 default = nil)
  if valid_610062 != nil:
    section.add "X-Amz-Security-Token", valid_610062
  var valid_610063 = header.getOrDefault("X-Amz-Algorithm")
  valid_610063 = validateParameter(valid_610063, JString, required = false,
                                 default = nil)
  if valid_610063 != nil:
    section.add "X-Amz-Algorithm", valid_610063
  var valid_610064 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610064 = validateParameter(valid_610064, JString, required = false,
                                 default = nil)
  if valid_610064 != nil:
    section.add "X-Amz-SignedHeaders", valid_610064
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610087: Call_GetAddClientIDToOpenIDConnectProvider_609927;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  let valid = call_610087.validator(path, query, header, formData, body)
  let scheme = call_610087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610087.url(scheme.get, call_610087.host, call_610087.base,
                         call_610087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610087, url, valid)

proc call*(call_610158: Call_GetAddClientIDToOpenIDConnectProvider_609927;
          ClientID: string; OpenIDConnectProviderArn: string;
          Action: string = "AddClientIDToOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getAddClientIDToOpenIDConnectProvider
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610159 = newJObject()
  add(query_610159, "ClientID", newJString(ClientID))
  add(query_610159, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_610159, "Action", newJString(Action))
  add(query_610159, "Version", newJString(Version))
  result = call_610158.call(nil, query_610159, nil, nil, nil)

var getAddClientIDToOpenIDConnectProvider* = Call_GetAddClientIDToOpenIDConnectProvider_609927(
    name: "getAddClientIDToOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=AddClientIDToOpenIDConnectProvider",
    validator: validate_GetAddClientIDToOpenIDConnectProvider_609928, base: "/",
    url: url_GetAddClientIDToOpenIDConnectProvider_609929,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddRoleToInstanceProfile_610234 = ref object of OpenApiRestCall_609589
proc url_PostAddRoleToInstanceProfile_610236(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToInstanceProfile_610235(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610237 = query.getOrDefault("Action")
  valid_610237 = validateParameter(valid_610237, JString, required = true, default = newJString(
      "AddRoleToInstanceProfile"))
  if valid_610237 != nil:
    section.add "Action", valid_610237
  var valid_610238 = query.getOrDefault("Version")
  valid_610238 = validateParameter(valid_610238, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610238 != nil:
    section.add "Version", valid_610238
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610239 = header.getOrDefault("X-Amz-Signature")
  valid_610239 = validateParameter(valid_610239, JString, required = false,
                                 default = nil)
  if valid_610239 != nil:
    section.add "X-Amz-Signature", valid_610239
  var valid_610240 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610240 = validateParameter(valid_610240, JString, required = false,
                                 default = nil)
  if valid_610240 != nil:
    section.add "X-Amz-Content-Sha256", valid_610240
  var valid_610241 = header.getOrDefault("X-Amz-Date")
  valid_610241 = validateParameter(valid_610241, JString, required = false,
                                 default = nil)
  if valid_610241 != nil:
    section.add "X-Amz-Date", valid_610241
  var valid_610242 = header.getOrDefault("X-Amz-Credential")
  valid_610242 = validateParameter(valid_610242, JString, required = false,
                                 default = nil)
  if valid_610242 != nil:
    section.add "X-Amz-Credential", valid_610242
  var valid_610243 = header.getOrDefault("X-Amz-Security-Token")
  valid_610243 = validateParameter(valid_610243, JString, required = false,
                                 default = nil)
  if valid_610243 != nil:
    section.add "X-Amz-Security-Token", valid_610243
  var valid_610244 = header.getOrDefault("X-Amz-Algorithm")
  valid_610244 = validateParameter(valid_610244, JString, required = false,
                                 default = nil)
  if valid_610244 != nil:
    section.add "X-Amz-Algorithm", valid_610244
  var valid_610245 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610245 = validateParameter(valid_610245, JString, required = false,
                                 default = nil)
  if valid_610245 != nil:
    section.add "X-Amz-SignedHeaders", valid_610245
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_610246 = formData.getOrDefault("RoleName")
  valid_610246 = validateParameter(valid_610246, JString, required = true,
                                 default = nil)
  if valid_610246 != nil:
    section.add "RoleName", valid_610246
  var valid_610247 = formData.getOrDefault("InstanceProfileName")
  valid_610247 = validateParameter(valid_610247, JString, required = true,
                                 default = nil)
  if valid_610247 != nil:
    section.add "InstanceProfileName", valid_610247
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610248: Call_PostAddRoleToInstanceProfile_610234; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_610248.validator(path, query, header, formData, body)
  let scheme = call_610248.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610248.url(scheme.get, call_610248.host, call_610248.base,
                         call_610248.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610248, url, valid)

proc call*(call_610249: Call_PostAddRoleToInstanceProfile_610234; RoleName: string;
          InstanceProfileName: string;
          Action: string = "AddRoleToInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postAddRoleToInstanceProfile
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_610250 = newJObject()
  var formData_610251 = newJObject()
  add(formData_610251, "RoleName", newJString(RoleName))
  add(query_610250, "Action", newJString(Action))
  add(formData_610251, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_610250, "Version", newJString(Version))
  result = call_610249.call(nil, query_610250, nil, formData_610251, nil)

var postAddRoleToInstanceProfile* = Call_PostAddRoleToInstanceProfile_610234(
    name: "postAddRoleToInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AddRoleToInstanceProfile",
    validator: validate_PostAddRoleToInstanceProfile_610235, base: "/",
    url: url_PostAddRoleToInstanceProfile_610236,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToInstanceProfile_610217 = ref object of OpenApiRestCall_609589
proc url_GetAddRoleToInstanceProfile_610219(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToInstanceProfile_610218(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_610220 = query.getOrDefault("RoleName")
  valid_610220 = validateParameter(valid_610220, JString, required = true,
                                 default = nil)
  if valid_610220 != nil:
    section.add "RoleName", valid_610220
  var valid_610221 = query.getOrDefault("Action")
  valid_610221 = validateParameter(valid_610221, JString, required = true, default = newJString(
      "AddRoleToInstanceProfile"))
  if valid_610221 != nil:
    section.add "Action", valid_610221
  var valid_610222 = query.getOrDefault("InstanceProfileName")
  valid_610222 = validateParameter(valid_610222, JString, required = true,
                                 default = nil)
  if valid_610222 != nil:
    section.add "InstanceProfileName", valid_610222
  var valid_610223 = query.getOrDefault("Version")
  valid_610223 = validateParameter(valid_610223, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610223 != nil:
    section.add "Version", valid_610223
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610224 = header.getOrDefault("X-Amz-Signature")
  valid_610224 = validateParameter(valid_610224, JString, required = false,
                                 default = nil)
  if valid_610224 != nil:
    section.add "X-Amz-Signature", valid_610224
  var valid_610225 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610225 = validateParameter(valid_610225, JString, required = false,
                                 default = nil)
  if valid_610225 != nil:
    section.add "X-Amz-Content-Sha256", valid_610225
  var valid_610226 = header.getOrDefault("X-Amz-Date")
  valid_610226 = validateParameter(valid_610226, JString, required = false,
                                 default = nil)
  if valid_610226 != nil:
    section.add "X-Amz-Date", valid_610226
  var valid_610227 = header.getOrDefault("X-Amz-Credential")
  valid_610227 = validateParameter(valid_610227, JString, required = false,
                                 default = nil)
  if valid_610227 != nil:
    section.add "X-Amz-Credential", valid_610227
  var valid_610228 = header.getOrDefault("X-Amz-Security-Token")
  valid_610228 = validateParameter(valid_610228, JString, required = false,
                                 default = nil)
  if valid_610228 != nil:
    section.add "X-Amz-Security-Token", valid_610228
  var valid_610229 = header.getOrDefault("X-Amz-Algorithm")
  valid_610229 = validateParameter(valid_610229, JString, required = false,
                                 default = nil)
  if valid_610229 != nil:
    section.add "X-Amz-Algorithm", valid_610229
  var valid_610230 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610230 = validateParameter(valid_610230, JString, required = false,
                                 default = nil)
  if valid_610230 != nil:
    section.add "X-Amz-SignedHeaders", valid_610230
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610231: Call_GetAddRoleToInstanceProfile_610217; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_610231.validator(path, query, header, formData, body)
  let scheme = call_610231.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610231.url(scheme.get, call_610231.host, call_610231.base,
                         call_610231.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610231, url, valid)

proc call*(call_610232: Call_GetAddRoleToInstanceProfile_610217; RoleName: string;
          InstanceProfileName: string;
          Action: string = "AddRoleToInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getAddRoleToInstanceProfile
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_610233 = newJObject()
  add(query_610233, "RoleName", newJString(RoleName))
  add(query_610233, "Action", newJString(Action))
  add(query_610233, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_610233, "Version", newJString(Version))
  result = call_610232.call(nil, query_610233, nil, nil, nil)

var getAddRoleToInstanceProfile* = Call_GetAddRoleToInstanceProfile_610217(
    name: "getAddRoleToInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AddRoleToInstanceProfile",
    validator: validate_GetAddRoleToInstanceProfile_610218, base: "/",
    url: url_GetAddRoleToInstanceProfile_610219,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddUserToGroup_610269 = ref object of OpenApiRestCall_609589
proc url_PostAddUserToGroup_610271(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddUserToGroup_610270(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Adds the specified user to the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610272 = query.getOrDefault("Action")
  valid_610272 = validateParameter(valid_610272, JString, required = true,
                                 default = newJString("AddUserToGroup"))
  if valid_610272 != nil:
    section.add "Action", valid_610272
  var valid_610273 = query.getOrDefault("Version")
  valid_610273 = validateParameter(valid_610273, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610273 != nil:
    section.add "Version", valid_610273
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610274 = header.getOrDefault("X-Amz-Signature")
  valid_610274 = validateParameter(valid_610274, JString, required = false,
                                 default = nil)
  if valid_610274 != nil:
    section.add "X-Amz-Signature", valid_610274
  var valid_610275 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610275 = validateParameter(valid_610275, JString, required = false,
                                 default = nil)
  if valid_610275 != nil:
    section.add "X-Amz-Content-Sha256", valid_610275
  var valid_610276 = header.getOrDefault("X-Amz-Date")
  valid_610276 = validateParameter(valid_610276, JString, required = false,
                                 default = nil)
  if valid_610276 != nil:
    section.add "X-Amz-Date", valid_610276
  var valid_610277 = header.getOrDefault("X-Amz-Credential")
  valid_610277 = validateParameter(valid_610277, JString, required = false,
                                 default = nil)
  if valid_610277 != nil:
    section.add "X-Amz-Credential", valid_610277
  var valid_610278 = header.getOrDefault("X-Amz-Security-Token")
  valid_610278 = validateParameter(valid_610278, JString, required = false,
                                 default = nil)
  if valid_610278 != nil:
    section.add "X-Amz-Security-Token", valid_610278
  var valid_610279 = header.getOrDefault("X-Amz-Algorithm")
  valid_610279 = validateParameter(valid_610279, JString, required = false,
                                 default = nil)
  if valid_610279 != nil:
    section.add "X-Amz-Algorithm", valid_610279
  var valid_610280 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610280 = validateParameter(valid_610280, JString, required = false,
                                 default = nil)
  if valid_610280 != nil:
    section.add "X-Amz-SignedHeaders", valid_610280
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_610281 = formData.getOrDefault("GroupName")
  valid_610281 = validateParameter(valid_610281, JString, required = true,
                                 default = nil)
  if valid_610281 != nil:
    section.add "GroupName", valid_610281
  var valid_610282 = formData.getOrDefault("UserName")
  valid_610282 = validateParameter(valid_610282, JString, required = true,
                                 default = nil)
  if valid_610282 != nil:
    section.add "UserName", valid_610282
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610283: Call_PostAddUserToGroup_610269; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds the specified user to the specified group.
  ## 
  let valid = call_610283.validator(path, query, header, formData, body)
  let scheme = call_610283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610283.url(scheme.get, call_610283.host, call_610283.base,
                         call_610283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610283, url, valid)

proc call*(call_610284: Call_PostAddUserToGroup_610269; GroupName: string;
          UserName: string; Action: string = "AddUserToGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postAddUserToGroup
  ## Adds the specified user to the specified group.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610285 = newJObject()
  var formData_610286 = newJObject()
  add(formData_610286, "GroupName", newJString(GroupName))
  add(formData_610286, "UserName", newJString(UserName))
  add(query_610285, "Action", newJString(Action))
  add(query_610285, "Version", newJString(Version))
  result = call_610284.call(nil, query_610285, nil, formData_610286, nil)

var postAddUserToGroup* = Call_PostAddUserToGroup_610269(
    name: "postAddUserToGroup", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AddUserToGroup",
    validator: validate_PostAddUserToGroup_610270, base: "/",
    url: url_PostAddUserToGroup_610271, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddUserToGroup_610252 = ref object of OpenApiRestCall_609589
proc url_GetAddUserToGroup_610254(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddUserToGroup_610253(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Adds the specified user to the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_610255 = query.getOrDefault("UserName")
  valid_610255 = validateParameter(valid_610255, JString, required = true,
                                 default = nil)
  if valid_610255 != nil:
    section.add "UserName", valid_610255
  var valid_610256 = query.getOrDefault("GroupName")
  valid_610256 = validateParameter(valid_610256, JString, required = true,
                                 default = nil)
  if valid_610256 != nil:
    section.add "GroupName", valid_610256
  var valid_610257 = query.getOrDefault("Action")
  valid_610257 = validateParameter(valid_610257, JString, required = true,
                                 default = newJString("AddUserToGroup"))
  if valid_610257 != nil:
    section.add "Action", valid_610257
  var valid_610258 = query.getOrDefault("Version")
  valid_610258 = validateParameter(valid_610258, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610258 != nil:
    section.add "Version", valid_610258
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610259 = header.getOrDefault("X-Amz-Signature")
  valid_610259 = validateParameter(valid_610259, JString, required = false,
                                 default = nil)
  if valid_610259 != nil:
    section.add "X-Amz-Signature", valid_610259
  var valid_610260 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610260 = validateParameter(valid_610260, JString, required = false,
                                 default = nil)
  if valid_610260 != nil:
    section.add "X-Amz-Content-Sha256", valid_610260
  var valid_610261 = header.getOrDefault("X-Amz-Date")
  valid_610261 = validateParameter(valid_610261, JString, required = false,
                                 default = nil)
  if valid_610261 != nil:
    section.add "X-Amz-Date", valid_610261
  var valid_610262 = header.getOrDefault("X-Amz-Credential")
  valid_610262 = validateParameter(valid_610262, JString, required = false,
                                 default = nil)
  if valid_610262 != nil:
    section.add "X-Amz-Credential", valid_610262
  var valid_610263 = header.getOrDefault("X-Amz-Security-Token")
  valid_610263 = validateParameter(valid_610263, JString, required = false,
                                 default = nil)
  if valid_610263 != nil:
    section.add "X-Amz-Security-Token", valid_610263
  var valid_610264 = header.getOrDefault("X-Amz-Algorithm")
  valid_610264 = validateParameter(valid_610264, JString, required = false,
                                 default = nil)
  if valid_610264 != nil:
    section.add "X-Amz-Algorithm", valid_610264
  var valid_610265 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610265 = validateParameter(valid_610265, JString, required = false,
                                 default = nil)
  if valid_610265 != nil:
    section.add "X-Amz-SignedHeaders", valid_610265
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610266: Call_GetAddUserToGroup_610252; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds the specified user to the specified group.
  ## 
  let valid = call_610266.validator(path, query, header, formData, body)
  let scheme = call_610266.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610266.url(scheme.get, call_610266.host, call_610266.base,
                         call_610266.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610266, url, valid)

proc call*(call_610267: Call_GetAddUserToGroup_610252; UserName: string;
          GroupName: string; Action: string = "AddUserToGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getAddUserToGroup
  ## Adds the specified user to the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610268 = newJObject()
  add(query_610268, "UserName", newJString(UserName))
  add(query_610268, "GroupName", newJString(GroupName))
  add(query_610268, "Action", newJString(Action))
  add(query_610268, "Version", newJString(Version))
  result = call_610267.call(nil, query_610268, nil, nil, nil)

var getAddUserToGroup* = Call_GetAddUserToGroup_610252(name: "getAddUserToGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=AddUserToGroup", validator: validate_GetAddUserToGroup_610253,
    base: "/", url: url_GetAddUserToGroup_610254,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachGroupPolicy_610304 = ref object of OpenApiRestCall_609589
proc url_PostAttachGroupPolicy_610306(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachGroupPolicy_610305(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610307 = query.getOrDefault("Action")
  valid_610307 = validateParameter(valid_610307, JString, required = true,
                                 default = newJString("AttachGroupPolicy"))
  if valid_610307 != nil:
    section.add "Action", valid_610307
  var valid_610308 = query.getOrDefault("Version")
  valid_610308 = validateParameter(valid_610308, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610308 != nil:
    section.add "Version", valid_610308
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610309 = header.getOrDefault("X-Amz-Signature")
  valid_610309 = validateParameter(valid_610309, JString, required = false,
                                 default = nil)
  if valid_610309 != nil:
    section.add "X-Amz-Signature", valid_610309
  var valid_610310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610310 = validateParameter(valid_610310, JString, required = false,
                                 default = nil)
  if valid_610310 != nil:
    section.add "X-Amz-Content-Sha256", valid_610310
  var valid_610311 = header.getOrDefault("X-Amz-Date")
  valid_610311 = validateParameter(valid_610311, JString, required = false,
                                 default = nil)
  if valid_610311 != nil:
    section.add "X-Amz-Date", valid_610311
  var valid_610312 = header.getOrDefault("X-Amz-Credential")
  valid_610312 = validateParameter(valid_610312, JString, required = false,
                                 default = nil)
  if valid_610312 != nil:
    section.add "X-Amz-Credential", valid_610312
  var valid_610313 = header.getOrDefault("X-Amz-Security-Token")
  valid_610313 = validateParameter(valid_610313, JString, required = false,
                                 default = nil)
  if valid_610313 != nil:
    section.add "X-Amz-Security-Token", valid_610313
  var valid_610314 = header.getOrDefault("X-Amz-Algorithm")
  valid_610314 = validateParameter(valid_610314, JString, required = false,
                                 default = nil)
  if valid_610314 != nil:
    section.add "X-Amz-Algorithm", valid_610314
  var valid_610315 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610315 = validateParameter(valid_610315, JString, required = false,
                                 default = nil)
  if valid_610315 != nil:
    section.add "X-Amz-SignedHeaders", valid_610315
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_610316 = formData.getOrDefault("GroupName")
  valid_610316 = validateParameter(valid_610316, JString, required = true,
                                 default = nil)
  if valid_610316 != nil:
    section.add "GroupName", valid_610316
  var valid_610317 = formData.getOrDefault("PolicyArn")
  valid_610317 = validateParameter(valid_610317, JString, required = true,
                                 default = nil)
  if valid_610317 != nil:
    section.add "PolicyArn", valid_610317
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610318: Call_PostAttachGroupPolicy_610304; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610318.validator(path, query, header, formData, body)
  let scheme = call_610318.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610318.url(scheme.get, call_610318.host, call_610318.base,
                         call_610318.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610318, url, valid)

proc call*(call_610319: Call_PostAttachGroupPolicy_610304; GroupName: string;
          PolicyArn: string; Action: string = "AttachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachGroupPolicy
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610320 = newJObject()
  var formData_610321 = newJObject()
  add(formData_610321, "GroupName", newJString(GroupName))
  add(formData_610321, "PolicyArn", newJString(PolicyArn))
  add(query_610320, "Action", newJString(Action))
  add(query_610320, "Version", newJString(Version))
  result = call_610319.call(nil, query_610320, nil, formData_610321, nil)

var postAttachGroupPolicy* = Call_PostAttachGroupPolicy_610304(
    name: "postAttachGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachGroupPolicy",
    validator: validate_PostAttachGroupPolicy_610305, base: "/",
    url: url_PostAttachGroupPolicy_610306, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachGroupPolicy_610287 = ref object of OpenApiRestCall_609589
proc url_GetAttachGroupPolicy_610289(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachGroupPolicy_610288(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_610290 = query.getOrDefault("GroupName")
  valid_610290 = validateParameter(valid_610290, JString, required = true,
                                 default = nil)
  if valid_610290 != nil:
    section.add "GroupName", valid_610290
  var valid_610291 = query.getOrDefault("PolicyArn")
  valid_610291 = validateParameter(valid_610291, JString, required = true,
                                 default = nil)
  if valid_610291 != nil:
    section.add "PolicyArn", valid_610291
  var valid_610292 = query.getOrDefault("Action")
  valid_610292 = validateParameter(valid_610292, JString, required = true,
                                 default = newJString("AttachGroupPolicy"))
  if valid_610292 != nil:
    section.add "Action", valid_610292
  var valid_610293 = query.getOrDefault("Version")
  valid_610293 = validateParameter(valid_610293, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610293 != nil:
    section.add "Version", valid_610293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610294 = header.getOrDefault("X-Amz-Signature")
  valid_610294 = validateParameter(valid_610294, JString, required = false,
                                 default = nil)
  if valid_610294 != nil:
    section.add "X-Amz-Signature", valid_610294
  var valid_610295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610295 = validateParameter(valid_610295, JString, required = false,
                                 default = nil)
  if valid_610295 != nil:
    section.add "X-Amz-Content-Sha256", valid_610295
  var valid_610296 = header.getOrDefault("X-Amz-Date")
  valid_610296 = validateParameter(valid_610296, JString, required = false,
                                 default = nil)
  if valid_610296 != nil:
    section.add "X-Amz-Date", valid_610296
  var valid_610297 = header.getOrDefault("X-Amz-Credential")
  valid_610297 = validateParameter(valid_610297, JString, required = false,
                                 default = nil)
  if valid_610297 != nil:
    section.add "X-Amz-Credential", valid_610297
  var valid_610298 = header.getOrDefault("X-Amz-Security-Token")
  valid_610298 = validateParameter(valid_610298, JString, required = false,
                                 default = nil)
  if valid_610298 != nil:
    section.add "X-Amz-Security-Token", valid_610298
  var valid_610299 = header.getOrDefault("X-Amz-Algorithm")
  valid_610299 = validateParameter(valid_610299, JString, required = false,
                                 default = nil)
  if valid_610299 != nil:
    section.add "X-Amz-Algorithm", valid_610299
  var valid_610300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610300 = validateParameter(valid_610300, JString, required = false,
                                 default = nil)
  if valid_610300 != nil:
    section.add "X-Amz-SignedHeaders", valid_610300
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610301: Call_GetAttachGroupPolicy_610287; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610301.validator(path, query, header, formData, body)
  let scheme = call_610301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610301.url(scheme.get, call_610301.host, call_610301.base,
                         call_610301.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610301, url, valid)

proc call*(call_610302: Call_GetAttachGroupPolicy_610287; GroupName: string;
          PolicyArn: string; Action: string = "AttachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachGroupPolicy
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610303 = newJObject()
  add(query_610303, "GroupName", newJString(GroupName))
  add(query_610303, "PolicyArn", newJString(PolicyArn))
  add(query_610303, "Action", newJString(Action))
  add(query_610303, "Version", newJString(Version))
  result = call_610302.call(nil, query_610303, nil, nil, nil)

var getAttachGroupPolicy* = Call_GetAttachGroupPolicy_610287(
    name: "getAttachGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachGroupPolicy",
    validator: validate_GetAttachGroupPolicy_610288, base: "/",
    url: url_GetAttachGroupPolicy_610289, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachRolePolicy_610339 = ref object of OpenApiRestCall_609589
proc url_PostAttachRolePolicy_610341(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachRolePolicy_610340(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610342 = query.getOrDefault("Action")
  valid_610342 = validateParameter(valid_610342, JString, required = true,
                                 default = newJString("AttachRolePolicy"))
  if valid_610342 != nil:
    section.add "Action", valid_610342
  var valid_610343 = query.getOrDefault("Version")
  valid_610343 = validateParameter(valid_610343, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610343 != nil:
    section.add "Version", valid_610343
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610344 = header.getOrDefault("X-Amz-Signature")
  valid_610344 = validateParameter(valid_610344, JString, required = false,
                                 default = nil)
  if valid_610344 != nil:
    section.add "X-Amz-Signature", valid_610344
  var valid_610345 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610345 = validateParameter(valid_610345, JString, required = false,
                                 default = nil)
  if valid_610345 != nil:
    section.add "X-Amz-Content-Sha256", valid_610345
  var valid_610346 = header.getOrDefault("X-Amz-Date")
  valid_610346 = validateParameter(valid_610346, JString, required = false,
                                 default = nil)
  if valid_610346 != nil:
    section.add "X-Amz-Date", valid_610346
  var valid_610347 = header.getOrDefault("X-Amz-Credential")
  valid_610347 = validateParameter(valid_610347, JString, required = false,
                                 default = nil)
  if valid_610347 != nil:
    section.add "X-Amz-Credential", valid_610347
  var valid_610348 = header.getOrDefault("X-Amz-Security-Token")
  valid_610348 = validateParameter(valid_610348, JString, required = false,
                                 default = nil)
  if valid_610348 != nil:
    section.add "X-Amz-Security-Token", valid_610348
  var valid_610349 = header.getOrDefault("X-Amz-Algorithm")
  valid_610349 = validateParameter(valid_610349, JString, required = false,
                                 default = nil)
  if valid_610349 != nil:
    section.add "X-Amz-Algorithm", valid_610349
  var valid_610350 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610350 = validateParameter(valid_610350, JString, required = false,
                                 default = nil)
  if valid_610350 != nil:
    section.add "X-Amz-SignedHeaders", valid_610350
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_610351 = formData.getOrDefault("RoleName")
  valid_610351 = validateParameter(valid_610351, JString, required = true,
                                 default = nil)
  if valid_610351 != nil:
    section.add "RoleName", valid_610351
  var valid_610352 = formData.getOrDefault("PolicyArn")
  valid_610352 = validateParameter(valid_610352, JString, required = true,
                                 default = nil)
  if valid_610352 != nil:
    section.add "PolicyArn", valid_610352
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610353: Call_PostAttachRolePolicy_610339; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610353.validator(path, query, header, formData, body)
  let scheme = call_610353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610353.url(scheme.get, call_610353.host, call_610353.base,
                         call_610353.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610353, url, valid)

proc call*(call_610354: Call_PostAttachRolePolicy_610339; RoleName: string;
          PolicyArn: string; Action: string = "AttachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachRolePolicy
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610355 = newJObject()
  var formData_610356 = newJObject()
  add(formData_610356, "RoleName", newJString(RoleName))
  add(formData_610356, "PolicyArn", newJString(PolicyArn))
  add(query_610355, "Action", newJString(Action))
  add(query_610355, "Version", newJString(Version))
  result = call_610354.call(nil, query_610355, nil, formData_610356, nil)

var postAttachRolePolicy* = Call_PostAttachRolePolicy_610339(
    name: "postAttachRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachRolePolicy",
    validator: validate_PostAttachRolePolicy_610340, base: "/",
    url: url_PostAttachRolePolicy_610341, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachRolePolicy_610322 = ref object of OpenApiRestCall_609589
proc url_GetAttachRolePolicy_610324(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachRolePolicy_610323(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_610325 = query.getOrDefault("PolicyArn")
  valid_610325 = validateParameter(valid_610325, JString, required = true,
                                 default = nil)
  if valid_610325 != nil:
    section.add "PolicyArn", valid_610325
  var valid_610326 = query.getOrDefault("RoleName")
  valid_610326 = validateParameter(valid_610326, JString, required = true,
                                 default = nil)
  if valid_610326 != nil:
    section.add "RoleName", valid_610326
  var valid_610327 = query.getOrDefault("Action")
  valid_610327 = validateParameter(valid_610327, JString, required = true,
                                 default = newJString("AttachRolePolicy"))
  if valid_610327 != nil:
    section.add "Action", valid_610327
  var valid_610328 = query.getOrDefault("Version")
  valid_610328 = validateParameter(valid_610328, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610328 != nil:
    section.add "Version", valid_610328
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610329 = header.getOrDefault("X-Amz-Signature")
  valid_610329 = validateParameter(valid_610329, JString, required = false,
                                 default = nil)
  if valid_610329 != nil:
    section.add "X-Amz-Signature", valid_610329
  var valid_610330 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610330 = validateParameter(valid_610330, JString, required = false,
                                 default = nil)
  if valid_610330 != nil:
    section.add "X-Amz-Content-Sha256", valid_610330
  var valid_610331 = header.getOrDefault("X-Amz-Date")
  valid_610331 = validateParameter(valid_610331, JString, required = false,
                                 default = nil)
  if valid_610331 != nil:
    section.add "X-Amz-Date", valid_610331
  var valid_610332 = header.getOrDefault("X-Amz-Credential")
  valid_610332 = validateParameter(valid_610332, JString, required = false,
                                 default = nil)
  if valid_610332 != nil:
    section.add "X-Amz-Credential", valid_610332
  var valid_610333 = header.getOrDefault("X-Amz-Security-Token")
  valid_610333 = validateParameter(valid_610333, JString, required = false,
                                 default = nil)
  if valid_610333 != nil:
    section.add "X-Amz-Security-Token", valid_610333
  var valid_610334 = header.getOrDefault("X-Amz-Algorithm")
  valid_610334 = validateParameter(valid_610334, JString, required = false,
                                 default = nil)
  if valid_610334 != nil:
    section.add "X-Amz-Algorithm", valid_610334
  var valid_610335 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610335 = validateParameter(valid_610335, JString, required = false,
                                 default = nil)
  if valid_610335 != nil:
    section.add "X-Amz-SignedHeaders", valid_610335
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610336: Call_GetAttachRolePolicy_610322; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610336.validator(path, query, header, formData, body)
  let scheme = call_610336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610336.url(scheme.get, call_610336.host, call_610336.base,
                         call_610336.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610336, url, valid)

proc call*(call_610337: Call_GetAttachRolePolicy_610322; PolicyArn: string;
          RoleName: string; Action: string = "AttachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachRolePolicy
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610338 = newJObject()
  add(query_610338, "PolicyArn", newJString(PolicyArn))
  add(query_610338, "RoleName", newJString(RoleName))
  add(query_610338, "Action", newJString(Action))
  add(query_610338, "Version", newJString(Version))
  result = call_610337.call(nil, query_610338, nil, nil, nil)

var getAttachRolePolicy* = Call_GetAttachRolePolicy_610322(
    name: "getAttachRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachRolePolicy",
    validator: validate_GetAttachRolePolicy_610323, base: "/",
    url: url_GetAttachRolePolicy_610324, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachUserPolicy_610374 = ref object of OpenApiRestCall_609589
proc url_PostAttachUserPolicy_610376(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachUserPolicy_610375(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610377 = query.getOrDefault("Action")
  valid_610377 = validateParameter(valid_610377, JString, required = true,
                                 default = newJString("AttachUserPolicy"))
  if valid_610377 != nil:
    section.add "Action", valid_610377
  var valid_610378 = query.getOrDefault("Version")
  valid_610378 = validateParameter(valid_610378, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610378 != nil:
    section.add "Version", valid_610378
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610379 = header.getOrDefault("X-Amz-Signature")
  valid_610379 = validateParameter(valid_610379, JString, required = false,
                                 default = nil)
  if valid_610379 != nil:
    section.add "X-Amz-Signature", valid_610379
  var valid_610380 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610380 = validateParameter(valid_610380, JString, required = false,
                                 default = nil)
  if valid_610380 != nil:
    section.add "X-Amz-Content-Sha256", valid_610380
  var valid_610381 = header.getOrDefault("X-Amz-Date")
  valid_610381 = validateParameter(valid_610381, JString, required = false,
                                 default = nil)
  if valid_610381 != nil:
    section.add "X-Amz-Date", valid_610381
  var valid_610382 = header.getOrDefault("X-Amz-Credential")
  valid_610382 = validateParameter(valid_610382, JString, required = false,
                                 default = nil)
  if valid_610382 != nil:
    section.add "X-Amz-Credential", valid_610382
  var valid_610383 = header.getOrDefault("X-Amz-Security-Token")
  valid_610383 = validateParameter(valid_610383, JString, required = false,
                                 default = nil)
  if valid_610383 != nil:
    section.add "X-Amz-Security-Token", valid_610383
  var valid_610384 = header.getOrDefault("X-Amz-Algorithm")
  valid_610384 = validateParameter(valid_610384, JString, required = false,
                                 default = nil)
  if valid_610384 != nil:
    section.add "X-Amz-Algorithm", valid_610384
  var valid_610385 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610385 = validateParameter(valid_610385, JString, required = false,
                                 default = nil)
  if valid_610385 != nil:
    section.add "X-Amz-SignedHeaders", valid_610385
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_610386 = formData.getOrDefault("PolicyArn")
  valid_610386 = validateParameter(valid_610386, JString, required = true,
                                 default = nil)
  if valid_610386 != nil:
    section.add "PolicyArn", valid_610386
  var valid_610387 = formData.getOrDefault("UserName")
  valid_610387 = validateParameter(valid_610387, JString, required = true,
                                 default = nil)
  if valid_610387 != nil:
    section.add "UserName", valid_610387
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610388: Call_PostAttachUserPolicy_610374; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610388.validator(path, query, header, formData, body)
  let scheme = call_610388.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610388.url(scheme.get, call_610388.host, call_610388.base,
                         call_610388.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610388, url, valid)

proc call*(call_610389: Call_PostAttachUserPolicy_610374; PolicyArn: string;
          UserName: string; Action: string = "AttachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachUserPolicy
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610390 = newJObject()
  var formData_610391 = newJObject()
  add(formData_610391, "PolicyArn", newJString(PolicyArn))
  add(formData_610391, "UserName", newJString(UserName))
  add(query_610390, "Action", newJString(Action))
  add(query_610390, "Version", newJString(Version))
  result = call_610389.call(nil, query_610390, nil, formData_610391, nil)

var postAttachUserPolicy* = Call_PostAttachUserPolicy_610374(
    name: "postAttachUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachUserPolicy",
    validator: validate_PostAttachUserPolicy_610375, base: "/",
    url: url_PostAttachUserPolicy_610376, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachUserPolicy_610357 = ref object of OpenApiRestCall_609589
proc url_GetAttachUserPolicy_610359(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachUserPolicy_610358(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_610360 = query.getOrDefault("UserName")
  valid_610360 = validateParameter(valid_610360, JString, required = true,
                                 default = nil)
  if valid_610360 != nil:
    section.add "UserName", valid_610360
  var valid_610361 = query.getOrDefault("PolicyArn")
  valid_610361 = validateParameter(valid_610361, JString, required = true,
                                 default = nil)
  if valid_610361 != nil:
    section.add "PolicyArn", valid_610361
  var valid_610362 = query.getOrDefault("Action")
  valid_610362 = validateParameter(valid_610362, JString, required = true,
                                 default = newJString("AttachUserPolicy"))
  if valid_610362 != nil:
    section.add "Action", valid_610362
  var valid_610363 = query.getOrDefault("Version")
  valid_610363 = validateParameter(valid_610363, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610363 != nil:
    section.add "Version", valid_610363
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610364 = header.getOrDefault("X-Amz-Signature")
  valid_610364 = validateParameter(valid_610364, JString, required = false,
                                 default = nil)
  if valid_610364 != nil:
    section.add "X-Amz-Signature", valid_610364
  var valid_610365 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610365 = validateParameter(valid_610365, JString, required = false,
                                 default = nil)
  if valid_610365 != nil:
    section.add "X-Amz-Content-Sha256", valid_610365
  var valid_610366 = header.getOrDefault("X-Amz-Date")
  valid_610366 = validateParameter(valid_610366, JString, required = false,
                                 default = nil)
  if valid_610366 != nil:
    section.add "X-Amz-Date", valid_610366
  var valid_610367 = header.getOrDefault("X-Amz-Credential")
  valid_610367 = validateParameter(valid_610367, JString, required = false,
                                 default = nil)
  if valid_610367 != nil:
    section.add "X-Amz-Credential", valid_610367
  var valid_610368 = header.getOrDefault("X-Amz-Security-Token")
  valid_610368 = validateParameter(valid_610368, JString, required = false,
                                 default = nil)
  if valid_610368 != nil:
    section.add "X-Amz-Security-Token", valid_610368
  var valid_610369 = header.getOrDefault("X-Amz-Algorithm")
  valid_610369 = validateParameter(valid_610369, JString, required = false,
                                 default = nil)
  if valid_610369 != nil:
    section.add "X-Amz-Algorithm", valid_610369
  var valid_610370 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610370 = validateParameter(valid_610370, JString, required = false,
                                 default = nil)
  if valid_610370 != nil:
    section.add "X-Amz-SignedHeaders", valid_610370
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610371: Call_GetAttachUserPolicy_610357; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610371.validator(path, query, header, formData, body)
  let scheme = call_610371.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610371.url(scheme.get, call_610371.host, call_610371.base,
                         call_610371.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610371, url, valid)

proc call*(call_610372: Call_GetAttachUserPolicy_610357; UserName: string;
          PolicyArn: string; Action: string = "AttachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachUserPolicy
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610373 = newJObject()
  add(query_610373, "UserName", newJString(UserName))
  add(query_610373, "PolicyArn", newJString(PolicyArn))
  add(query_610373, "Action", newJString(Action))
  add(query_610373, "Version", newJString(Version))
  result = call_610372.call(nil, query_610373, nil, nil, nil)

var getAttachUserPolicy* = Call_GetAttachUserPolicy_610357(
    name: "getAttachUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachUserPolicy",
    validator: validate_GetAttachUserPolicy_610358, base: "/",
    url: url_GetAttachUserPolicy_610359, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostChangePassword_610409 = ref object of OpenApiRestCall_609589
proc url_PostChangePassword_610411(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostChangePassword_610410(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610412 = query.getOrDefault("Action")
  valid_610412 = validateParameter(valid_610412, JString, required = true,
                                 default = newJString("ChangePassword"))
  if valid_610412 != nil:
    section.add "Action", valid_610412
  var valid_610413 = query.getOrDefault("Version")
  valid_610413 = validateParameter(valid_610413, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610413 != nil:
    section.add "Version", valid_610413
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610414 = header.getOrDefault("X-Amz-Signature")
  valid_610414 = validateParameter(valid_610414, JString, required = false,
                                 default = nil)
  if valid_610414 != nil:
    section.add "X-Amz-Signature", valid_610414
  var valid_610415 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610415 = validateParameter(valid_610415, JString, required = false,
                                 default = nil)
  if valid_610415 != nil:
    section.add "X-Amz-Content-Sha256", valid_610415
  var valid_610416 = header.getOrDefault("X-Amz-Date")
  valid_610416 = validateParameter(valid_610416, JString, required = false,
                                 default = nil)
  if valid_610416 != nil:
    section.add "X-Amz-Date", valid_610416
  var valid_610417 = header.getOrDefault("X-Amz-Credential")
  valid_610417 = validateParameter(valid_610417, JString, required = false,
                                 default = nil)
  if valid_610417 != nil:
    section.add "X-Amz-Credential", valid_610417
  var valid_610418 = header.getOrDefault("X-Amz-Security-Token")
  valid_610418 = validateParameter(valid_610418, JString, required = false,
                                 default = nil)
  if valid_610418 != nil:
    section.add "X-Amz-Security-Token", valid_610418
  var valid_610419 = header.getOrDefault("X-Amz-Algorithm")
  valid_610419 = validateParameter(valid_610419, JString, required = false,
                                 default = nil)
  if valid_610419 != nil:
    section.add "X-Amz-Algorithm", valid_610419
  var valid_610420 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610420 = validateParameter(valid_610420, JString, required = false,
                                 default = nil)
  if valid_610420 != nil:
    section.add "X-Amz-SignedHeaders", valid_610420
  result.add "header", section
  ## parameters in `formData` object:
  ##   OldPassword: JString (required)
  ##              : The IAM user's current password.
  ##   NewPassword: JString (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `OldPassword` field"
  var valid_610421 = formData.getOrDefault("OldPassword")
  valid_610421 = validateParameter(valid_610421, JString, required = true,
                                 default = nil)
  if valid_610421 != nil:
    section.add "OldPassword", valid_610421
  var valid_610422 = formData.getOrDefault("NewPassword")
  valid_610422 = validateParameter(valid_610422, JString, required = true,
                                 default = nil)
  if valid_610422 != nil:
    section.add "NewPassword", valid_610422
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610423: Call_PostChangePassword_610409; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610423.validator(path, query, header, formData, body)
  let scheme = call_610423.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610423.url(scheme.get, call_610423.host, call_610423.base,
                         call_610423.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610423, url, valid)

proc call*(call_610424: Call_PostChangePassword_610409; OldPassword: string;
          NewPassword: string; Action: string = "ChangePassword";
          Version: string = "2010-05-08"): Recallable =
  ## postChangePassword
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   OldPassword: string (required)
  ##              : The IAM user's current password.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   NewPassword: string (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  var query_610425 = newJObject()
  var formData_610426 = newJObject()
  add(formData_610426, "OldPassword", newJString(OldPassword))
  add(query_610425, "Action", newJString(Action))
  add(query_610425, "Version", newJString(Version))
  add(formData_610426, "NewPassword", newJString(NewPassword))
  result = call_610424.call(nil, query_610425, nil, formData_610426, nil)

var postChangePassword* = Call_PostChangePassword_610409(
    name: "postChangePassword", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ChangePassword",
    validator: validate_PostChangePassword_610410, base: "/",
    url: url_PostChangePassword_610411, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChangePassword_610392 = ref object of OpenApiRestCall_609589
proc url_GetChangePassword_610394(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetChangePassword_610393(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   OldPassword: JString (required)
  ##              : The IAM user's current password.
  ##   Version: JString (required)
  ##   NewPassword: JString (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  section = newJObject()
  var valid_610395 = query.getOrDefault("Action")
  valid_610395 = validateParameter(valid_610395, JString, required = true,
                                 default = newJString("ChangePassword"))
  if valid_610395 != nil:
    section.add "Action", valid_610395
  var valid_610396 = query.getOrDefault("OldPassword")
  valid_610396 = validateParameter(valid_610396, JString, required = true,
                                 default = nil)
  if valid_610396 != nil:
    section.add "OldPassword", valid_610396
  var valid_610397 = query.getOrDefault("Version")
  valid_610397 = validateParameter(valid_610397, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610397 != nil:
    section.add "Version", valid_610397
  var valid_610398 = query.getOrDefault("NewPassword")
  valid_610398 = validateParameter(valid_610398, JString, required = true,
                                 default = nil)
  if valid_610398 != nil:
    section.add "NewPassword", valid_610398
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610399 = header.getOrDefault("X-Amz-Signature")
  valid_610399 = validateParameter(valid_610399, JString, required = false,
                                 default = nil)
  if valid_610399 != nil:
    section.add "X-Amz-Signature", valid_610399
  var valid_610400 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610400 = validateParameter(valid_610400, JString, required = false,
                                 default = nil)
  if valid_610400 != nil:
    section.add "X-Amz-Content-Sha256", valid_610400
  var valid_610401 = header.getOrDefault("X-Amz-Date")
  valid_610401 = validateParameter(valid_610401, JString, required = false,
                                 default = nil)
  if valid_610401 != nil:
    section.add "X-Amz-Date", valid_610401
  var valid_610402 = header.getOrDefault("X-Amz-Credential")
  valid_610402 = validateParameter(valid_610402, JString, required = false,
                                 default = nil)
  if valid_610402 != nil:
    section.add "X-Amz-Credential", valid_610402
  var valid_610403 = header.getOrDefault("X-Amz-Security-Token")
  valid_610403 = validateParameter(valid_610403, JString, required = false,
                                 default = nil)
  if valid_610403 != nil:
    section.add "X-Amz-Security-Token", valid_610403
  var valid_610404 = header.getOrDefault("X-Amz-Algorithm")
  valid_610404 = validateParameter(valid_610404, JString, required = false,
                                 default = nil)
  if valid_610404 != nil:
    section.add "X-Amz-Algorithm", valid_610404
  var valid_610405 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610405 = validateParameter(valid_610405, JString, required = false,
                                 default = nil)
  if valid_610405 != nil:
    section.add "X-Amz-SignedHeaders", valid_610405
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610406: Call_GetChangePassword_610392; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610406.validator(path, query, header, formData, body)
  let scheme = call_610406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610406.url(scheme.get, call_610406.host, call_610406.base,
                         call_610406.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610406, url, valid)

proc call*(call_610407: Call_GetChangePassword_610392; OldPassword: string;
          NewPassword: string; Action: string = "ChangePassword";
          Version: string = "2010-05-08"): Recallable =
  ## getChangePassword
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   OldPassword: string (required)
  ##              : The IAM user's current password.
  ##   Version: string (required)
  ##   NewPassword: string (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  var query_610408 = newJObject()
  add(query_610408, "Action", newJString(Action))
  add(query_610408, "OldPassword", newJString(OldPassword))
  add(query_610408, "Version", newJString(Version))
  add(query_610408, "NewPassword", newJString(NewPassword))
  result = call_610407.call(nil, query_610408, nil, nil, nil)

var getChangePassword* = Call_GetChangePassword_610392(name: "getChangePassword",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ChangePassword", validator: validate_GetChangePassword_610393,
    base: "/", url: url_GetChangePassword_610394,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAccessKey_610443 = ref object of OpenApiRestCall_609589
proc url_PostCreateAccessKey_610445(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateAccessKey_610444(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610446 = query.getOrDefault("Action")
  valid_610446 = validateParameter(valid_610446, JString, required = true,
                                 default = newJString("CreateAccessKey"))
  if valid_610446 != nil:
    section.add "Action", valid_610446
  var valid_610447 = query.getOrDefault("Version")
  valid_610447 = validateParameter(valid_610447, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610447 != nil:
    section.add "Version", valid_610447
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610448 = header.getOrDefault("X-Amz-Signature")
  valid_610448 = validateParameter(valid_610448, JString, required = false,
                                 default = nil)
  if valid_610448 != nil:
    section.add "X-Amz-Signature", valid_610448
  var valid_610449 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610449 = validateParameter(valid_610449, JString, required = false,
                                 default = nil)
  if valid_610449 != nil:
    section.add "X-Amz-Content-Sha256", valid_610449
  var valid_610450 = header.getOrDefault("X-Amz-Date")
  valid_610450 = validateParameter(valid_610450, JString, required = false,
                                 default = nil)
  if valid_610450 != nil:
    section.add "X-Amz-Date", valid_610450
  var valid_610451 = header.getOrDefault("X-Amz-Credential")
  valid_610451 = validateParameter(valid_610451, JString, required = false,
                                 default = nil)
  if valid_610451 != nil:
    section.add "X-Amz-Credential", valid_610451
  var valid_610452 = header.getOrDefault("X-Amz-Security-Token")
  valid_610452 = validateParameter(valid_610452, JString, required = false,
                                 default = nil)
  if valid_610452 != nil:
    section.add "X-Amz-Security-Token", valid_610452
  var valid_610453 = header.getOrDefault("X-Amz-Algorithm")
  valid_610453 = validateParameter(valid_610453, JString, required = false,
                                 default = nil)
  if valid_610453 != nil:
    section.add "X-Amz-Algorithm", valid_610453
  var valid_610454 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610454 = validateParameter(valid_610454, JString, required = false,
                                 default = nil)
  if valid_610454 != nil:
    section.add "X-Amz-SignedHeaders", valid_610454
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_610455 = formData.getOrDefault("UserName")
  valid_610455 = validateParameter(valid_610455, JString, required = false,
                                 default = nil)
  if valid_610455 != nil:
    section.add "UserName", valid_610455
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610456: Call_PostCreateAccessKey_610443; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  let valid = call_610456.validator(path, query, header, formData, body)
  let scheme = call_610456.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610456.url(scheme.get, call_610456.host, call_610456.base,
                         call_610456.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610456, url, valid)

proc call*(call_610457: Call_PostCreateAccessKey_610443; UserName: string = "";
          Action: string = "CreateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## postCreateAccessKey
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ##   UserName: string
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610458 = newJObject()
  var formData_610459 = newJObject()
  add(formData_610459, "UserName", newJString(UserName))
  add(query_610458, "Action", newJString(Action))
  add(query_610458, "Version", newJString(Version))
  result = call_610457.call(nil, query_610458, nil, formData_610459, nil)

var postCreateAccessKey* = Call_PostCreateAccessKey_610443(
    name: "postCreateAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccessKey",
    validator: validate_PostCreateAccessKey_610444, base: "/",
    url: url_PostCreateAccessKey_610445, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAccessKey_610427 = ref object of OpenApiRestCall_609589
proc url_GetCreateAccessKey_610429(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateAccessKey_610428(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610430 = query.getOrDefault("UserName")
  valid_610430 = validateParameter(valid_610430, JString, required = false,
                                 default = nil)
  if valid_610430 != nil:
    section.add "UserName", valid_610430
  var valid_610431 = query.getOrDefault("Action")
  valid_610431 = validateParameter(valid_610431, JString, required = true,
                                 default = newJString("CreateAccessKey"))
  if valid_610431 != nil:
    section.add "Action", valid_610431
  var valid_610432 = query.getOrDefault("Version")
  valid_610432 = validateParameter(valid_610432, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610432 != nil:
    section.add "Version", valid_610432
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610433 = header.getOrDefault("X-Amz-Signature")
  valid_610433 = validateParameter(valid_610433, JString, required = false,
                                 default = nil)
  if valid_610433 != nil:
    section.add "X-Amz-Signature", valid_610433
  var valid_610434 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610434 = validateParameter(valid_610434, JString, required = false,
                                 default = nil)
  if valid_610434 != nil:
    section.add "X-Amz-Content-Sha256", valid_610434
  var valid_610435 = header.getOrDefault("X-Amz-Date")
  valid_610435 = validateParameter(valid_610435, JString, required = false,
                                 default = nil)
  if valid_610435 != nil:
    section.add "X-Amz-Date", valid_610435
  var valid_610436 = header.getOrDefault("X-Amz-Credential")
  valid_610436 = validateParameter(valid_610436, JString, required = false,
                                 default = nil)
  if valid_610436 != nil:
    section.add "X-Amz-Credential", valid_610436
  var valid_610437 = header.getOrDefault("X-Amz-Security-Token")
  valid_610437 = validateParameter(valid_610437, JString, required = false,
                                 default = nil)
  if valid_610437 != nil:
    section.add "X-Amz-Security-Token", valid_610437
  var valid_610438 = header.getOrDefault("X-Amz-Algorithm")
  valid_610438 = validateParameter(valid_610438, JString, required = false,
                                 default = nil)
  if valid_610438 != nil:
    section.add "X-Amz-Algorithm", valid_610438
  var valid_610439 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610439 = validateParameter(valid_610439, JString, required = false,
                                 default = nil)
  if valid_610439 != nil:
    section.add "X-Amz-SignedHeaders", valid_610439
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610440: Call_GetCreateAccessKey_610427; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  let valid = call_610440.validator(path, query, header, formData, body)
  let scheme = call_610440.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610440.url(scheme.get, call_610440.host, call_610440.base,
                         call_610440.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610440, url, valid)

proc call*(call_610441: Call_GetCreateAccessKey_610427; UserName: string = "";
          Action: string = "CreateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## getCreateAccessKey
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ##   UserName: string
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610442 = newJObject()
  add(query_610442, "UserName", newJString(UserName))
  add(query_610442, "Action", newJString(Action))
  add(query_610442, "Version", newJString(Version))
  result = call_610441.call(nil, query_610442, nil, nil, nil)

var getCreateAccessKey* = Call_GetCreateAccessKey_610427(
    name: "getCreateAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateAccessKey", validator: validate_GetCreateAccessKey_610428,
    base: "/", url: url_GetCreateAccessKey_610429,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAccountAlias_610476 = ref object of OpenApiRestCall_609589
proc url_PostCreateAccountAlias_610478(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateAccountAlias_610477(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610479 = query.getOrDefault("Action")
  valid_610479 = validateParameter(valid_610479, JString, required = true,
                                 default = newJString("CreateAccountAlias"))
  if valid_610479 != nil:
    section.add "Action", valid_610479
  var valid_610480 = query.getOrDefault("Version")
  valid_610480 = validateParameter(valid_610480, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610480 != nil:
    section.add "Version", valid_610480
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610481 = header.getOrDefault("X-Amz-Signature")
  valid_610481 = validateParameter(valid_610481, JString, required = false,
                                 default = nil)
  if valid_610481 != nil:
    section.add "X-Amz-Signature", valid_610481
  var valid_610482 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610482 = validateParameter(valid_610482, JString, required = false,
                                 default = nil)
  if valid_610482 != nil:
    section.add "X-Amz-Content-Sha256", valid_610482
  var valid_610483 = header.getOrDefault("X-Amz-Date")
  valid_610483 = validateParameter(valid_610483, JString, required = false,
                                 default = nil)
  if valid_610483 != nil:
    section.add "X-Amz-Date", valid_610483
  var valid_610484 = header.getOrDefault("X-Amz-Credential")
  valid_610484 = validateParameter(valid_610484, JString, required = false,
                                 default = nil)
  if valid_610484 != nil:
    section.add "X-Amz-Credential", valid_610484
  var valid_610485 = header.getOrDefault("X-Amz-Security-Token")
  valid_610485 = validateParameter(valid_610485, JString, required = false,
                                 default = nil)
  if valid_610485 != nil:
    section.add "X-Amz-Security-Token", valid_610485
  var valid_610486 = header.getOrDefault("X-Amz-Algorithm")
  valid_610486 = validateParameter(valid_610486, JString, required = false,
                                 default = nil)
  if valid_610486 != nil:
    section.add "X-Amz-Algorithm", valid_610486
  var valid_610487 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610487 = validateParameter(valid_610487, JString, required = false,
                                 default = nil)
  if valid_610487 != nil:
    section.add "X-Amz-SignedHeaders", valid_610487
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccountAlias` field"
  var valid_610488 = formData.getOrDefault("AccountAlias")
  valid_610488 = validateParameter(valid_610488, JString, required = true,
                                 default = nil)
  if valid_610488 != nil:
    section.add "AccountAlias", valid_610488
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610489: Call_PostCreateAccountAlias_610476; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_610489.validator(path, query, header, formData, body)
  let scheme = call_610489.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610489.url(scheme.get, call_610489.host, call_610489.base,
                         call_610489.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610489, url, valid)

proc call*(call_610490: Call_PostCreateAccountAlias_610476; AccountAlias: string;
          Action: string = "CreateAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## postCreateAccountAlias
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   AccountAlias: string (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Version: string (required)
  var query_610491 = newJObject()
  var formData_610492 = newJObject()
  add(query_610491, "Action", newJString(Action))
  add(formData_610492, "AccountAlias", newJString(AccountAlias))
  add(query_610491, "Version", newJString(Version))
  result = call_610490.call(nil, query_610491, nil, formData_610492, nil)

var postCreateAccountAlias* = Call_PostCreateAccountAlias_610476(
    name: "postCreateAccountAlias", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccountAlias",
    validator: validate_PostCreateAccountAlias_610477, base: "/",
    url: url_PostCreateAccountAlias_610478, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAccountAlias_610460 = ref object of OpenApiRestCall_609589
proc url_GetCreateAccountAlias_610462(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateAccountAlias_610461(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccountAlias` field"
  var valid_610463 = query.getOrDefault("AccountAlias")
  valid_610463 = validateParameter(valid_610463, JString, required = true,
                                 default = nil)
  if valid_610463 != nil:
    section.add "AccountAlias", valid_610463
  var valid_610464 = query.getOrDefault("Action")
  valid_610464 = validateParameter(valid_610464, JString, required = true,
                                 default = newJString("CreateAccountAlias"))
  if valid_610464 != nil:
    section.add "Action", valid_610464
  var valid_610465 = query.getOrDefault("Version")
  valid_610465 = validateParameter(valid_610465, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610465 != nil:
    section.add "Version", valid_610465
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610466 = header.getOrDefault("X-Amz-Signature")
  valid_610466 = validateParameter(valid_610466, JString, required = false,
                                 default = nil)
  if valid_610466 != nil:
    section.add "X-Amz-Signature", valid_610466
  var valid_610467 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610467 = validateParameter(valid_610467, JString, required = false,
                                 default = nil)
  if valid_610467 != nil:
    section.add "X-Amz-Content-Sha256", valid_610467
  var valid_610468 = header.getOrDefault("X-Amz-Date")
  valid_610468 = validateParameter(valid_610468, JString, required = false,
                                 default = nil)
  if valid_610468 != nil:
    section.add "X-Amz-Date", valid_610468
  var valid_610469 = header.getOrDefault("X-Amz-Credential")
  valid_610469 = validateParameter(valid_610469, JString, required = false,
                                 default = nil)
  if valid_610469 != nil:
    section.add "X-Amz-Credential", valid_610469
  var valid_610470 = header.getOrDefault("X-Amz-Security-Token")
  valid_610470 = validateParameter(valid_610470, JString, required = false,
                                 default = nil)
  if valid_610470 != nil:
    section.add "X-Amz-Security-Token", valid_610470
  var valid_610471 = header.getOrDefault("X-Amz-Algorithm")
  valid_610471 = validateParameter(valid_610471, JString, required = false,
                                 default = nil)
  if valid_610471 != nil:
    section.add "X-Amz-Algorithm", valid_610471
  var valid_610472 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610472 = validateParameter(valid_610472, JString, required = false,
                                 default = nil)
  if valid_610472 != nil:
    section.add "X-Amz-SignedHeaders", valid_610472
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610473: Call_GetCreateAccountAlias_610460; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_610473.validator(path, query, header, formData, body)
  let scheme = call_610473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610473.url(scheme.get, call_610473.host, call_610473.base,
                         call_610473.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610473, url, valid)

proc call*(call_610474: Call_GetCreateAccountAlias_610460; AccountAlias: string;
          Action: string = "CreateAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## getCreateAccountAlias
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610475 = newJObject()
  add(query_610475, "AccountAlias", newJString(AccountAlias))
  add(query_610475, "Action", newJString(Action))
  add(query_610475, "Version", newJString(Version))
  result = call_610474.call(nil, query_610475, nil, nil, nil)

var getCreateAccountAlias* = Call_GetCreateAccountAlias_610460(
    name: "getCreateAccountAlias", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccountAlias",
    validator: validate_GetCreateAccountAlias_610461, base: "/",
    url: url_GetCreateAccountAlias_610462, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateGroup_610510 = ref object of OpenApiRestCall_609589
proc url_PostCreateGroup_610512(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateGroup_610511(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610513 = query.getOrDefault("Action")
  valid_610513 = validateParameter(valid_610513, JString, required = true,
                                 default = newJString("CreateGroup"))
  if valid_610513 != nil:
    section.add "Action", valid_610513
  var valid_610514 = query.getOrDefault("Version")
  valid_610514 = validateParameter(valid_610514, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610514 != nil:
    section.add "Version", valid_610514
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610515 = header.getOrDefault("X-Amz-Signature")
  valid_610515 = validateParameter(valid_610515, JString, required = false,
                                 default = nil)
  if valid_610515 != nil:
    section.add "X-Amz-Signature", valid_610515
  var valid_610516 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610516 = validateParameter(valid_610516, JString, required = false,
                                 default = nil)
  if valid_610516 != nil:
    section.add "X-Amz-Content-Sha256", valid_610516
  var valid_610517 = header.getOrDefault("X-Amz-Date")
  valid_610517 = validateParameter(valid_610517, JString, required = false,
                                 default = nil)
  if valid_610517 != nil:
    section.add "X-Amz-Date", valid_610517
  var valid_610518 = header.getOrDefault("X-Amz-Credential")
  valid_610518 = validateParameter(valid_610518, JString, required = false,
                                 default = nil)
  if valid_610518 != nil:
    section.add "X-Amz-Credential", valid_610518
  var valid_610519 = header.getOrDefault("X-Amz-Security-Token")
  valid_610519 = validateParameter(valid_610519, JString, required = false,
                                 default = nil)
  if valid_610519 != nil:
    section.add "X-Amz-Security-Token", valid_610519
  var valid_610520 = header.getOrDefault("X-Amz-Algorithm")
  valid_610520 = validateParameter(valid_610520, JString, required = false,
                                 default = nil)
  if valid_610520 != nil:
    section.add "X-Amz-Algorithm", valid_610520
  var valid_610521 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610521 = validateParameter(valid_610521, JString, required = false,
                                 default = nil)
  if valid_610521 != nil:
    section.add "X-Amz-SignedHeaders", valid_610521
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_610522 = formData.getOrDefault("GroupName")
  valid_610522 = validateParameter(valid_610522, JString, required = true,
                                 default = nil)
  if valid_610522 != nil:
    section.add "GroupName", valid_610522
  var valid_610523 = formData.getOrDefault("Path")
  valid_610523 = validateParameter(valid_610523, JString, required = false,
                                 default = nil)
  if valid_610523 != nil:
    section.add "Path", valid_610523
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610524: Call_PostCreateGroup_610510; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610524.validator(path, query, header, formData, body)
  let scheme = call_610524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610524.url(scheme.get, call_610524.host, call_610524.base,
                         call_610524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610524, url, valid)

proc call*(call_610525: Call_PostCreateGroup_610510; GroupName: string;
          Path: string = ""; Action: string = "CreateGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateGroup
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610526 = newJObject()
  var formData_610527 = newJObject()
  add(formData_610527, "GroupName", newJString(GroupName))
  add(formData_610527, "Path", newJString(Path))
  add(query_610526, "Action", newJString(Action))
  add(query_610526, "Version", newJString(Version))
  result = call_610525.call(nil, query_610526, nil, formData_610527, nil)

var postCreateGroup* = Call_PostCreateGroup_610510(name: "postCreateGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateGroup", validator: validate_PostCreateGroup_610511,
    base: "/", url: url_PostCreateGroup_610512, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateGroup_610493 = ref object of OpenApiRestCall_609589
proc url_GetCreateGroup_610495(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateGroup_610494(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_610496 = query.getOrDefault("GroupName")
  valid_610496 = validateParameter(valid_610496, JString, required = true,
                                 default = nil)
  if valid_610496 != nil:
    section.add "GroupName", valid_610496
  var valid_610497 = query.getOrDefault("Path")
  valid_610497 = validateParameter(valid_610497, JString, required = false,
                                 default = nil)
  if valid_610497 != nil:
    section.add "Path", valid_610497
  var valid_610498 = query.getOrDefault("Action")
  valid_610498 = validateParameter(valid_610498, JString, required = true,
                                 default = newJString("CreateGroup"))
  if valid_610498 != nil:
    section.add "Action", valid_610498
  var valid_610499 = query.getOrDefault("Version")
  valid_610499 = validateParameter(valid_610499, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610499 != nil:
    section.add "Version", valid_610499
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610500 = header.getOrDefault("X-Amz-Signature")
  valid_610500 = validateParameter(valid_610500, JString, required = false,
                                 default = nil)
  if valid_610500 != nil:
    section.add "X-Amz-Signature", valid_610500
  var valid_610501 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610501 = validateParameter(valid_610501, JString, required = false,
                                 default = nil)
  if valid_610501 != nil:
    section.add "X-Amz-Content-Sha256", valid_610501
  var valid_610502 = header.getOrDefault("X-Amz-Date")
  valid_610502 = validateParameter(valid_610502, JString, required = false,
                                 default = nil)
  if valid_610502 != nil:
    section.add "X-Amz-Date", valid_610502
  var valid_610503 = header.getOrDefault("X-Amz-Credential")
  valid_610503 = validateParameter(valid_610503, JString, required = false,
                                 default = nil)
  if valid_610503 != nil:
    section.add "X-Amz-Credential", valid_610503
  var valid_610504 = header.getOrDefault("X-Amz-Security-Token")
  valid_610504 = validateParameter(valid_610504, JString, required = false,
                                 default = nil)
  if valid_610504 != nil:
    section.add "X-Amz-Security-Token", valid_610504
  var valid_610505 = header.getOrDefault("X-Amz-Algorithm")
  valid_610505 = validateParameter(valid_610505, JString, required = false,
                                 default = nil)
  if valid_610505 != nil:
    section.add "X-Amz-Algorithm", valid_610505
  var valid_610506 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610506 = validateParameter(valid_610506, JString, required = false,
                                 default = nil)
  if valid_610506 != nil:
    section.add "X-Amz-SignedHeaders", valid_610506
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610507: Call_GetCreateGroup_610493; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610507.validator(path, query, header, formData, body)
  let scheme = call_610507.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610507.url(scheme.get, call_610507.host, call_610507.base,
                         call_610507.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610507, url, valid)

proc call*(call_610508: Call_GetCreateGroup_610493; GroupName: string;
          Path: string = ""; Action: string = "CreateGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateGroup
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610509 = newJObject()
  add(query_610509, "GroupName", newJString(GroupName))
  add(query_610509, "Path", newJString(Path))
  add(query_610509, "Action", newJString(Action))
  add(query_610509, "Version", newJString(Version))
  result = call_610508.call(nil, query_610509, nil, nil, nil)

var getCreateGroup* = Call_GetCreateGroup_610493(name: "getCreateGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateGroup", validator: validate_GetCreateGroup_610494,
    base: "/", url: url_GetCreateGroup_610495, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateInstanceProfile_610545 = ref object of OpenApiRestCall_609589
proc url_PostCreateInstanceProfile_610547(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateInstanceProfile_610546(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610548 = query.getOrDefault("Action")
  valid_610548 = validateParameter(valid_610548, JString, required = true,
                                 default = newJString("CreateInstanceProfile"))
  if valid_610548 != nil:
    section.add "Action", valid_610548
  var valid_610549 = query.getOrDefault("Version")
  valid_610549 = validateParameter(valid_610549, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610549 != nil:
    section.add "Version", valid_610549
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610550 = header.getOrDefault("X-Amz-Signature")
  valid_610550 = validateParameter(valid_610550, JString, required = false,
                                 default = nil)
  if valid_610550 != nil:
    section.add "X-Amz-Signature", valid_610550
  var valid_610551 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610551 = validateParameter(valid_610551, JString, required = false,
                                 default = nil)
  if valid_610551 != nil:
    section.add "X-Amz-Content-Sha256", valid_610551
  var valid_610552 = header.getOrDefault("X-Amz-Date")
  valid_610552 = validateParameter(valid_610552, JString, required = false,
                                 default = nil)
  if valid_610552 != nil:
    section.add "X-Amz-Date", valid_610552
  var valid_610553 = header.getOrDefault("X-Amz-Credential")
  valid_610553 = validateParameter(valid_610553, JString, required = false,
                                 default = nil)
  if valid_610553 != nil:
    section.add "X-Amz-Credential", valid_610553
  var valid_610554 = header.getOrDefault("X-Amz-Security-Token")
  valid_610554 = validateParameter(valid_610554, JString, required = false,
                                 default = nil)
  if valid_610554 != nil:
    section.add "X-Amz-Security-Token", valid_610554
  var valid_610555 = header.getOrDefault("X-Amz-Algorithm")
  valid_610555 = validateParameter(valid_610555, JString, required = false,
                                 default = nil)
  if valid_610555 != nil:
    section.add "X-Amz-Algorithm", valid_610555
  var valid_610556 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610556 = validateParameter(valid_610556, JString, required = false,
                                 default = nil)
  if valid_610556 != nil:
    section.add "X-Amz-SignedHeaders", valid_610556
  result.add "header", section
  ## parameters in `formData` object:
  ##   Path: JString
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_610557 = formData.getOrDefault("Path")
  valid_610557 = validateParameter(valid_610557, JString, required = false,
                                 default = nil)
  if valid_610557 != nil:
    section.add "Path", valid_610557
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_610558 = formData.getOrDefault("InstanceProfileName")
  valid_610558 = validateParameter(valid_610558, JString, required = true,
                                 default = nil)
  if valid_610558 != nil:
    section.add "InstanceProfileName", valid_610558
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610559: Call_PostCreateInstanceProfile_610545; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610559.validator(path, query, header, formData, body)
  let scheme = call_610559.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610559.url(scheme.get, call_610559.host, call_610559.base,
                         call_610559.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610559, url, valid)

proc call*(call_610560: Call_PostCreateInstanceProfile_610545;
          InstanceProfileName: string; Path: string = "";
          Action: string = "CreateInstanceProfile"; Version: string = "2010-05-08"): Recallable =
  ## postCreateInstanceProfile
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Path: string
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_610561 = newJObject()
  var formData_610562 = newJObject()
  add(formData_610562, "Path", newJString(Path))
  add(query_610561, "Action", newJString(Action))
  add(formData_610562, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_610561, "Version", newJString(Version))
  result = call_610560.call(nil, query_610561, nil, formData_610562, nil)

var postCreateInstanceProfile* = Call_PostCreateInstanceProfile_610545(
    name: "postCreateInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateInstanceProfile",
    validator: validate_PostCreateInstanceProfile_610546, base: "/",
    url: url_PostCreateInstanceProfile_610547,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateInstanceProfile_610528 = ref object of OpenApiRestCall_609589
proc url_GetCreateInstanceProfile_610530(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateInstanceProfile_610529(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Path: JString
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_610531 = query.getOrDefault("Path")
  valid_610531 = validateParameter(valid_610531, JString, required = false,
                                 default = nil)
  if valid_610531 != nil:
    section.add "Path", valid_610531
  var valid_610532 = query.getOrDefault("Action")
  valid_610532 = validateParameter(valid_610532, JString, required = true,
                                 default = newJString("CreateInstanceProfile"))
  if valid_610532 != nil:
    section.add "Action", valid_610532
  var valid_610533 = query.getOrDefault("InstanceProfileName")
  valid_610533 = validateParameter(valid_610533, JString, required = true,
                                 default = nil)
  if valid_610533 != nil:
    section.add "InstanceProfileName", valid_610533
  var valid_610534 = query.getOrDefault("Version")
  valid_610534 = validateParameter(valid_610534, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610534 != nil:
    section.add "Version", valid_610534
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610535 = header.getOrDefault("X-Amz-Signature")
  valid_610535 = validateParameter(valid_610535, JString, required = false,
                                 default = nil)
  if valid_610535 != nil:
    section.add "X-Amz-Signature", valid_610535
  var valid_610536 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610536 = validateParameter(valid_610536, JString, required = false,
                                 default = nil)
  if valid_610536 != nil:
    section.add "X-Amz-Content-Sha256", valid_610536
  var valid_610537 = header.getOrDefault("X-Amz-Date")
  valid_610537 = validateParameter(valid_610537, JString, required = false,
                                 default = nil)
  if valid_610537 != nil:
    section.add "X-Amz-Date", valid_610537
  var valid_610538 = header.getOrDefault("X-Amz-Credential")
  valid_610538 = validateParameter(valid_610538, JString, required = false,
                                 default = nil)
  if valid_610538 != nil:
    section.add "X-Amz-Credential", valid_610538
  var valid_610539 = header.getOrDefault("X-Amz-Security-Token")
  valid_610539 = validateParameter(valid_610539, JString, required = false,
                                 default = nil)
  if valid_610539 != nil:
    section.add "X-Amz-Security-Token", valid_610539
  var valid_610540 = header.getOrDefault("X-Amz-Algorithm")
  valid_610540 = validateParameter(valid_610540, JString, required = false,
                                 default = nil)
  if valid_610540 != nil:
    section.add "X-Amz-Algorithm", valid_610540
  var valid_610541 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610541 = validateParameter(valid_610541, JString, required = false,
                                 default = nil)
  if valid_610541 != nil:
    section.add "X-Amz-SignedHeaders", valid_610541
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610542: Call_GetCreateInstanceProfile_610528; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610542.validator(path, query, header, formData, body)
  let scheme = call_610542.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610542.url(scheme.get, call_610542.host, call_610542.base,
                         call_610542.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610542, url, valid)

proc call*(call_610543: Call_GetCreateInstanceProfile_610528;
          InstanceProfileName: string; Path: string = "";
          Action: string = "CreateInstanceProfile"; Version: string = "2010-05-08"): Recallable =
  ## getCreateInstanceProfile
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Path: string
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_610544 = newJObject()
  add(query_610544, "Path", newJString(Path))
  add(query_610544, "Action", newJString(Action))
  add(query_610544, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_610544, "Version", newJString(Version))
  result = call_610543.call(nil, query_610544, nil, nil, nil)

var getCreateInstanceProfile* = Call_GetCreateInstanceProfile_610528(
    name: "getCreateInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateInstanceProfile",
    validator: validate_GetCreateInstanceProfile_610529, base: "/",
    url: url_GetCreateInstanceProfile_610530, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateLoginProfile_610581 = ref object of OpenApiRestCall_609589
proc url_PostCreateLoginProfile_610583(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateLoginProfile_610582(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610584 = query.getOrDefault("Action")
  valid_610584 = validateParameter(valid_610584, JString, required = true,
                                 default = newJString("CreateLoginProfile"))
  if valid_610584 != nil:
    section.add "Action", valid_610584
  var valid_610585 = query.getOrDefault("Version")
  valid_610585 = validateParameter(valid_610585, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610585 != nil:
    section.add "Version", valid_610585
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610586 = header.getOrDefault("X-Amz-Signature")
  valid_610586 = validateParameter(valid_610586, JString, required = false,
                                 default = nil)
  if valid_610586 != nil:
    section.add "X-Amz-Signature", valid_610586
  var valid_610587 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610587 = validateParameter(valid_610587, JString, required = false,
                                 default = nil)
  if valid_610587 != nil:
    section.add "X-Amz-Content-Sha256", valid_610587
  var valid_610588 = header.getOrDefault("X-Amz-Date")
  valid_610588 = validateParameter(valid_610588, JString, required = false,
                                 default = nil)
  if valid_610588 != nil:
    section.add "X-Amz-Date", valid_610588
  var valid_610589 = header.getOrDefault("X-Amz-Credential")
  valid_610589 = validateParameter(valid_610589, JString, required = false,
                                 default = nil)
  if valid_610589 != nil:
    section.add "X-Amz-Credential", valid_610589
  var valid_610590 = header.getOrDefault("X-Amz-Security-Token")
  valid_610590 = validateParameter(valid_610590, JString, required = false,
                                 default = nil)
  if valid_610590 != nil:
    section.add "X-Amz-Security-Token", valid_610590
  var valid_610591 = header.getOrDefault("X-Amz-Algorithm")
  valid_610591 = validateParameter(valid_610591, JString, required = false,
                                 default = nil)
  if valid_610591 != nil:
    section.add "X-Amz-Algorithm", valid_610591
  var valid_610592 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610592 = validateParameter(valid_610592, JString, required = false,
                                 default = nil)
  if valid_610592 != nil:
    section.add "X-Amz-SignedHeaders", valid_610592
  result.add "header", section
  ## parameters in `formData` object:
  ##   Password: JString (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Password` field"
  var valid_610593 = formData.getOrDefault("Password")
  valid_610593 = validateParameter(valid_610593, JString, required = true,
                                 default = nil)
  if valid_610593 != nil:
    section.add "Password", valid_610593
  var valid_610594 = formData.getOrDefault("UserName")
  valid_610594 = validateParameter(valid_610594, JString, required = true,
                                 default = nil)
  if valid_610594 != nil:
    section.add "UserName", valid_610594
  var valid_610595 = formData.getOrDefault("PasswordResetRequired")
  valid_610595 = validateParameter(valid_610595, JBool, required = false, default = nil)
  if valid_610595 != nil:
    section.add "PasswordResetRequired", valid_610595
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610596: Call_PostCreateLoginProfile_610581; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_610596.validator(path, query, header, formData, body)
  let scheme = call_610596.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610596.url(scheme.get, call_610596.host, call_610596.base,
                         call_610596.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610596, url, valid)

proc call*(call_610597: Call_PostCreateLoginProfile_610581; Password: string;
          UserName: string; Action: string = "CreateLoginProfile";
          PasswordResetRequired: bool = false; Version: string = "2010-05-08"): Recallable =
  ## postCreateLoginProfile
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ##   Password: string (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   PasswordResetRequired: bool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Version: string (required)
  var query_610598 = newJObject()
  var formData_610599 = newJObject()
  add(formData_610599, "Password", newJString(Password))
  add(formData_610599, "UserName", newJString(UserName))
  add(query_610598, "Action", newJString(Action))
  add(formData_610599, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_610598, "Version", newJString(Version))
  result = call_610597.call(nil, query_610598, nil, formData_610599, nil)

var postCreateLoginProfile* = Call_PostCreateLoginProfile_610581(
    name: "postCreateLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateLoginProfile",
    validator: validate_PostCreateLoginProfile_610582, base: "/",
    url: url_PostCreateLoginProfile_610583, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateLoginProfile_610563 = ref object of OpenApiRestCall_609589
proc url_GetCreateLoginProfile_610565(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateLoginProfile_610564(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Password: JString (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Password` field"
  var valid_610566 = query.getOrDefault("Password")
  valid_610566 = validateParameter(valid_610566, JString, required = true,
                                 default = nil)
  if valid_610566 != nil:
    section.add "Password", valid_610566
  var valid_610567 = query.getOrDefault("UserName")
  valid_610567 = validateParameter(valid_610567, JString, required = true,
                                 default = nil)
  if valid_610567 != nil:
    section.add "UserName", valid_610567
  var valid_610568 = query.getOrDefault("PasswordResetRequired")
  valid_610568 = validateParameter(valid_610568, JBool, required = false, default = nil)
  if valid_610568 != nil:
    section.add "PasswordResetRequired", valid_610568
  var valid_610569 = query.getOrDefault("Action")
  valid_610569 = validateParameter(valid_610569, JString, required = true,
                                 default = newJString("CreateLoginProfile"))
  if valid_610569 != nil:
    section.add "Action", valid_610569
  var valid_610570 = query.getOrDefault("Version")
  valid_610570 = validateParameter(valid_610570, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610570 != nil:
    section.add "Version", valid_610570
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610571 = header.getOrDefault("X-Amz-Signature")
  valid_610571 = validateParameter(valid_610571, JString, required = false,
                                 default = nil)
  if valid_610571 != nil:
    section.add "X-Amz-Signature", valid_610571
  var valid_610572 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610572 = validateParameter(valid_610572, JString, required = false,
                                 default = nil)
  if valid_610572 != nil:
    section.add "X-Amz-Content-Sha256", valid_610572
  var valid_610573 = header.getOrDefault("X-Amz-Date")
  valid_610573 = validateParameter(valid_610573, JString, required = false,
                                 default = nil)
  if valid_610573 != nil:
    section.add "X-Amz-Date", valid_610573
  var valid_610574 = header.getOrDefault("X-Amz-Credential")
  valid_610574 = validateParameter(valid_610574, JString, required = false,
                                 default = nil)
  if valid_610574 != nil:
    section.add "X-Amz-Credential", valid_610574
  var valid_610575 = header.getOrDefault("X-Amz-Security-Token")
  valid_610575 = validateParameter(valid_610575, JString, required = false,
                                 default = nil)
  if valid_610575 != nil:
    section.add "X-Amz-Security-Token", valid_610575
  var valid_610576 = header.getOrDefault("X-Amz-Algorithm")
  valid_610576 = validateParameter(valid_610576, JString, required = false,
                                 default = nil)
  if valid_610576 != nil:
    section.add "X-Amz-Algorithm", valid_610576
  var valid_610577 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610577 = validateParameter(valid_610577, JString, required = false,
                                 default = nil)
  if valid_610577 != nil:
    section.add "X-Amz-SignedHeaders", valid_610577
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610578: Call_GetCreateLoginProfile_610563; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_610578.validator(path, query, header, formData, body)
  let scheme = call_610578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610578.url(scheme.get, call_610578.host, call_610578.base,
                         call_610578.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610578, url, valid)

proc call*(call_610579: Call_GetCreateLoginProfile_610563; Password: string;
          UserName: string; PasswordResetRequired: bool = false;
          Action: string = "CreateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getCreateLoginProfile
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ##   Password: string (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: bool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610580 = newJObject()
  add(query_610580, "Password", newJString(Password))
  add(query_610580, "UserName", newJString(UserName))
  add(query_610580, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_610580, "Action", newJString(Action))
  add(query_610580, "Version", newJString(Version))
  result = call_610579.call(nil, query_610580, nil, nil, nil)

var getCreateLoginProfile* = Call_GetCreateLoginProfile_610563(
    name: "getCreateLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateLoginProfile",
    validator: validate_GetCreateLoginProfile_610564, base: "/",
    url: url_GetCreateLoginProfile_610565, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOpenIDConnectProvider_610618 = ref object of OpenApiRestCall_609589
proc url_PostCreateOpenIDConnectProvider_610620(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateOpenIDConnectProvider_610619(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610621 = query.getOrDefault("Action")
  valid_610621 = validateParameter(valid_610621, JString, required = true, default = newJString(
      "CreateOpenIDConnectProvider"))
  if valid_610621 != nil:
    section.add "Action", valid_610621
  var valid_610622 = query.getOrDefault("Version")
  valid_610622 = validateParameter(valid_610622, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610622 != nil:
    section.add "Version", valid_610622
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610623 = header.getOrDefault("X-Amz-Signature")
  valid_610623 = validateParameter(valid_610623, JString, required = false,
                                 default = nil)
  if valid_610623 != nil:
    section.add "X-Amz-Signature", valid_610623
  var valid_610624 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610624 = validateParameter(valid_610624, JString, required = false,
                                 default = nil)
  if valid_610624 != nil:
    section.add "X-Amz-Content-Sha256", valid_610624
  var valid_610625 = header.getOrDefault("X-Amz-Date")
  valid_610625 = validateParameter(valid_610625, JString, required = false,
                                 default = nil)
  if valid_610625 != nil:
    section.add "X-Amz-Date", valid_610625
  var valid_610626 = header.getOrDefault("X-Amz-Credential")
  valid_610626 = validateParameter(valid_610626, JString, required = false,
                                 default = nil)
  if valid_610626 != nil:
    section.add "X-Amz-Credential", valid_610626
  var valid_610627 = header.getOrDefault("X-Amz-Security-Token")
  valid_610627 = validateParameter(valid_610627, JString, required = false,
                                 default = nil)
  if valid_610627 != nil:
    section.add "X-Amz-Security-Token", valid_610627
  var valid_610628 = header.getOrDefault("X-Amz-Algorithm")
  valid_610628 = validateParameter(valid_610628, JString, required = false,
                                 default = nil)
  if valid_610628 != nil:
    section.add "X-Amz-Algorithm", valid_610628
  var valid_610629 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610629 = validateParameter(valid_610629, JString, required = false,
                                 default = nil)
  if valid_610629 != nil:
    section.add "X-Amz-SignedHeaders", valid_610629
  result.add "header", section
  ## parameters in `formData` object:
  ##   Url: JString (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Url` field"
  var valid_610630 = formData.getOrDefault("Url")
  valid_610630 = validateParameter(valid_610630, JString, required = true,
                                 default = nil)
  if valid_610630 != nil:
    section.add "Url", valid_610630
  var valid_610631 = formData.getOrDefault("ClientIDList")
  valid_610631 = validateParameter(valid_610631, JArray, required = false,
                                 default = nil)
  if valid_610631 != nil:
    section.add "ClientIDList", valid_610631
  var valid_610632 = formData.getOrDefault("ThumbprintList")
  valid_610632 = validateParameter(valid_610632, JArray, required = true, default = nil)
  if valid_610632 != nil:
    section.add "ThumbprintList", valid_610632
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610633: Call_PostCreateOpenIDConnectProvider_610618;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_610633.validator(path, query, header, formData, body)
  let scheme = call_610633.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610633.url(scheme.get, call_610633.host, call_610633.base,
                         call_610633.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610633, url, valid)

proc call*(call_610634: Call_PostCreateOpenIDConnectProvider_610618; Url: string;
          ThumbprintList: JsonNode; ClientIDList: JsonNode = nil;
          Action: string = "CreateOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateOpenIDConnectProvider
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ##   Url: string (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610635 = newJObject()
  var formData_610636 = newJObject()
  add(formData_610636, "Url", newJString(Url))
  if ClientIDList != nil:
    formData_610636.add "ClientIDList", ClientIDList
  if ThumbprintList != nil:
    formData_610636.add "ThumbprintList", ThumbprintList
  add(query_610635, "Action", newJString(Action))
  add(query_610635, "Version", newJString(Version))
  result = call_610634.call(nil, query_610635, nil, formData_610636, nil)

var postCreateOpenIDConnectProvider* = Call_PostCreateOpenIDConnectProvider_610618(
    name: "postCreateOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateOpenIDConnectProvider",
    validator: validate_PostCreateOpenIDConnectProvider_610619, base: "/",
    url: url_PostCreateOpenIDConnectProvider_610620,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOpenIDConnectProvider_610600 = ref object of OpenApiRestCall_609589
proc url_GetCreateOpenIDConnectProvider_610602(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateOpenIDConnectProvider_610601(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: JString (required)
  ##   Url: JString (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   Version: JString (required)
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ThumbprintList` field"
  var valid_610603 = query.getOrDefault("ThumbprintList")
  valid_610603 = validateParameter(valid_610603, JArray, required = true, default = nil)
  if valid_610603 != nil:
    section.add "ThumbprintList", valid_610603
  var valid_610604 = query.getOrDefault("Action")
  valid_610604 = validateParameter(valid_610604, JString, required = true, default = newJString(
      "CreateOpenIDConnectProvider"))
  if valid_610604 != nil:
    section.add "Action", valid_610604
  var valid_610605 = query.getOrDefault("Url")
  valid_610605 = validateParameter(valid_610605, JString, required = true,
                                 default = nil)
  if valid_610605 != nil:
    section.add "Url", valid_610605
  var valid_610606 = query.getOrDefault("Version")
  valid_610606 = validateParameter(valid_610606, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610606 != nil:
    section.add "Version", valid_610606
  var valid_610607 = query.getOrDefault("ClientIDList")
  valid_610607 = validateParameter(valid_610607, JArray, required = false,
                                 default = nil)
  if valid_610607 != nil:
    section.add "ClientIDList", valid_610607
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610608 = header.getOrDefault("X-Amz-Signature")
  valid_610608 = validateParameter(valid_610608, JString, required = false,
                                 default = nil)
  if valid_610608 != nil:
    section.add "X-Amz-Signature", valid_610608
  var valid_610609 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610609 = validateParameter(valid_610609, JString, required = false,
                                 default = nil)
  if valid_610609 != nil:
    section.add "X-Amz-Content-Sha256", valid_610609
  var valid_610610 = header.getOrDefault("X-Amz-Date")
  valid_610610 = validateParameter(valid_610610, JString, required = false,
                                 default = nil)
  if valid_610610 != nil:
    section.add "X-Amz-Date", valid_610610
  var valid_610611 = header.getOrDefault("X-Amz-Credential")
  valid_610611 = validateParameter(valid_610611, JString, required = false,
                                 default = nil)
  if valid_610611 != nil:
    section.add "X-Amz-Credential", valid_610611
  var valid_610612 = header.getOrDefault("X-Amz-Security-Token")
  valid_610612 = validateParameter(valid_610612, JString, required = false,
                                 default = nil)
  if valid_610612 != nil:
    section.add "X-Amz-Security-Token", valid_610612
  var valid_610613 = header.getOrDefault("X-Amz-Algorithm")
  valid_610613 = validateParameter(valid_610613, JString, required = false,
                                 default = nil)
  if valid_610613 != nil:
    section.add "X-Amz-Algorithm", valid_610613
  var valid_610614 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610614 = validateParameter(valid_610614, JString, required = false,
                                 default = nil)
  if valid_610614 != nil:
    section.add "X-Amz-SignedHeaders", valid_610614
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610615: Call_GetCreateOpenIDConnectProvider_610600; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_610615.validator(path, query, header, formData, body)
  let scheme = call_610615.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610615.url(scheme.get, call_610615.host, call_610615.base,
                         call_610615.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610615, url, valid)

proc call*(call_610616: Call_GetCreateOpenIDConnectProvider_610600;
          ThumbprintList: JsonNode; Url: string;
          Action: string = "CreateOpenIDConnectProvider";
          Version: string = "2010-05-08"; ClientIDList: JsonNode = nil): Recallable =
  ## getCreateOpenIDConnectProvider
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Url: string (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   Version: string (required)
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  var query_610617 = newJObject()
  if ThumbprintList != nil:
    query_610617.add "ThumbprintList", ThumbprintList
  add(query_610617, "Action", newJString(Action))
  add(query_610617, "Url", newJString(Url))
  add(query_610617, "Version", newJString(Version))
  if ClientIDList != nil:
    query_610617.add "ClientIDList", ClientIDList
  result = call_610616.call(nil, query_610617, nil, nil, nil)

var getCreateOpenIDConnectProvider* = Call_GetCreateOpenIDConnectProvider_610600(
    name: "getCreateOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateOpenIDConnectProvider",
    validator: validate_GetCreateOpenIDConnectProvider_610601, base: "/",
    url: url_GetCreateOpenIDConnectProvider_610602,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreatePolicy_610656 = ref object of OpenApiRestCall_609589
proc url_PostCreatePolicy_610658(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreatePolicy_610657(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610659 = query.getOrDefault("Action")
  valid_610659 = validateParameter(valid_610659, JString, required = true,
                                 default = newJString("CreatePolicy"))
  if valid_610659 != nil:
    section.add "Action", valid_610659
  var valid_610660 = query.getOrDefault("Version")
  valid_610660 = validateParameter(valid_610660, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610660 != nil:
    section.add "Version", valid_610660
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610661 = header.getOrDefault("X-Amz-Signature")
  valid_610661 = validateParameter(valid_610661, JString, required = false,
                                 default = nil)
  if valid_610661 != nil:
    section.add "X-Amz-Signature", valid_610661
  var valid_610662 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610662 = validateParameter(valid_610662, JString, required = false,
                                 default = nil)
  if valid_610662 != nil:
    section.add "X-Amz-Content-Sha256", valid_610662
  var valid_610663 = header.getOrDefault("X-Amz-Date")
  valid_610663 = validateParameter(valid_610663, JString, required = false,
                                 default = nil)
  if valid_610663 != nil:
    section.add "X-Amz-Date", valid_610663
  var valid_610664 = header.getOrDefault("X-Amz-Credential")
  valid_610664 = validateParameter(valid_610664, JString, required = false,
                                 default = nil)
  if valid_610664 != nil:
    section.add "X-Amz-Credential", valid_610664
  var valid_610665 = header.getOrDefault("X-Amz-Security-Token")
  valid_610665 = validateParameter(valid_610665, JString, required = false,
                                 default = nil)
  if valid_610665 != nil:
    section.add "X-Amz-Security-Token", valid_610665
  var valid_610666 = header.getOrDefault("X-Amz-Algorithm")
  valid_610666 = validateParameter(valid_610666, JString, required = false,
                                 default = nil)
  if valid_610666 != nil:
    section.add "X-Amz-Algorithm", valid_610666
  var valid_610667 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610667 = validateParameter(valid_610667, JString, required = false,
                                 default = nil)
  if valid_610667 != nil:
    section.add "X-Amz-SignedHeaders", valid_610667
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Description: JString
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Path: JString
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyName: JString (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_610668 = formData.getOrDefault("PolicyDocument")
  valid_610668 = validateParameter(valid_610668, JString, required = true,
                                 default = nil)
  if valid_610668 != nil:
    section.add "PolicyDocument", valid_610668
  var valid_610669 = formData.getOrDefault("Description")
  valid_610669 = validateParameter(valid_610669, JString, required = false,
                                 default = nil)
  if valid_610669 != nil:
    section.add "Description", valid_610669
  var valid_610670 = formData.getOrDefault("Path")
  valid_610670 = validateParameter(valid_610670, JString, required = false,
                                 default = nil)
  if valid_610670 != nil:
    section.add "Path", valid_610670
  var valid_610671 = formData.getOrDefault("PolicyName")
  valid_610671 = validateParameter(valid_610671, JString, required = true,
                                 default = nil)
  if valid_610671 != nil:
    section.add "PolicyName", valid_610671
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610672: Call_PostCreatePolicy_610656; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610672.validator(path, query, header, formData, body)
  let scheme = call_610672.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610672.url(scheme.get, call_610672.host, call_610672.base,
                         call_610672.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610672, url, valid)

proc call*(call_610673: Call_PostCreatePolicy_610656; PolicyDocument: string;
          PolicyName: string; Description: string = ""; Path: string = "";
          Action: string = "CreatePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postCreatePolicy
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Description: string
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Path: string
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  var query_610674 = newJObject()
  var formData_610675 = newJObject()
  add(formData_610675, "PolicyDocument", newJString(PolicyDocument))
  add(formData_610675, "Description", newJString(Description))
  add(formData_610675, "Path", newJString(Path))
  add(query_610674, "Action", newJString(Action))
  add(query_610674, "Version", newJString(Version))
  add(formData_610675, "PolicyName", newJString(PolicyName))
  result = call_610673.call(nil, query_610674, nil, formData_610675, nil)

var postCreatePolicy* = Call_PostCreatePolicy_610656(name: "postCreatePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreatePolicy", validator: validate_PostCreatePolicy_610657,
    base: "/", url: url_PostCreatePolicy_610658,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreatePolicy_610637 = ref object of OpenApiRestCall_609589
proc url_GetCreatePolicy_610639(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreatePolicy_610638(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Description: JString
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_610640 = query.getOrDefault("PolicyName")
  valid_610640 = validateParameter(valid_610640, JString, required = true,
                                 default = nil)
  if valid_610640 != nil:
    section.add "PolicyName", valid_610640
  var valid_610641 = query.getOrDefault("Path")
  valid_610641 = validateParameter(valid_610641, JString, required = false,
                                 default = nil)
  if valid_610641 != nil:
    section.add "Path", valid_610641
  var valid_610642 = query.getOrDefault("PolicyDocument")
  valid_610642 = validateParameter(valid_610642, JString, required = true,
                                 default = nil)
  if valid_610642 != nil:
    section.add "PolicyDocument", valid_610642
  var valid_610643 = query.getOrDefault("Action")
  valid_610643 = validateParameter(valid_610643, JString, required = true,
                                 default = newJString("CreatePolicy"))
  if valid_610643 != nil:
    section.add "Action", valid_610643
  var valid_610644 = query.getOrDefault("Description")
  valid_610644 = validateParameter(valid_610644, JString, required = false,
                                 default = nil)
  if valid_610644 != nil:
    section.add "Description", valid_610644
  var valid_610645 = query.getOrDefault("Version")
  valid_610645 = validateParameter(valid_610645, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610645 != nil:
    section.add "Version", valid_610645
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610646 = header.getOrDefault("X-Amz-Signature")
  valid_610646 = validateParameter(valid_610646, JString, required = false,
                                 default = nil)
  if valid_610646 != nil:
    section.add "X-Amz-Signature", valid_610646
  var valid_610647 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610647 = validateParameter(valid_610647, JString, required = false,
                                 default = nil)
  if valid_610647 != nil:
    section.add "X-Amz-Content-Sha256", valid_610647
  var valid_610648 = header.getOrDefault("X-Amz-Date")
  valid_610648 = validateParameter(valid_610648, JString, required = false,
                                 default = nil)
  if valid_610648 != nil:
    section.add "X-Amz-Date", valid_610648
  var valid_610649 = header.getOrDefault("X-Amz-Credential")
  valid_610649 = validateParameter(valid_610649, JString, required = false,
                                 default = nil)
  if valid_610649 != nil:
    section.add "X-Amz-Credential", valid_610649
  var valid_610650 = header.getOrDefault("X-Amz-Security-Token")
  valid_610650 = validateParameter(valid_610650, JString, required = false,
                                 default = nil)
  if valid_610650 != nil:
    section.add "X-Amz-Security-Token", valid_610650
  var valid_610651 = header.getOrDefault("X-Amz-Algorithm")
  valid_610651 = validateParameter(valid_610651, JString, required = false,
                                 default = nil)
  if valid_610651 != nil:
    section.add "X-Amz-Algorithm", valid_610651
  var valid_610652 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610652 = validateParameter(valid_610652, JString, required = false,
                                 default = nil)
  if valid_610652 != nil:
    section.add "X-Amz-SignedHeaders", valid_610652
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610653: Call_GetCreatePolicy_610637; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610653.validator(path, query, header, formData, body)
  let scheme = call_610653.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610653.url(scheme.get, call_610653.host, call_610653.base,
                         call_610653.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610653, url, valid)

proc call*(call_610654: Call_GetCreatePolicy_610637; PolicyName: string;
          PolicyDocument: string; Path: string = ""; Action: string = "CreatePolicy";
          Description: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreatePolicy
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Description: string
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Version: string (required)
  var query_610655 = newJObject()
  add(query_610655, "PolicyName", newJString(PolicyName))
  add(query_610655, "Path", newJString(Path))
  add(query_610655, "PolicyDocument", newJString(PolicyDocument))
  add(query_610655, "Action", newJString(Action))
  add(query_610655, "Description", newJString(Description))
  add(query_610655, "Version", newJString(Version))
  result = call_610654.call(nil, query_610655, nil, nil, nil)

var getCreatePolicy* = Call_GetCreatePolicy_610637(name: "getCreatePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreatePolicy", validator: validate_GetCreatePolicy_610638,
    base: "/", url: url_GetCreatePolicy_610639, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreatePolicyVersion_610694 = ref object of OpenApiRestCall_609589
proc url_PostCreatePolicyVersion_610696(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreatePolicyVersion_610695(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610697 = query.getOrDefault("Action")
  valid_610697 = validateParameter(valid_610697, JString, required = true,
                                 default = newJString("CreatePolicyVersion"))
  if valid_610697 != nil:
    section.add "Action", valid_610697
  var valid_610698 = query.getOrDefault("Version")
  valid_610698 = validateParameter(valid_610698, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610698 != nil:
    section.add "Version", valid_610698
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610699 = header.getOrDefault("X-Amz-Signature")
  valid_610699 = validateParameter(valid_610699, JString, required = false,
                                 default = nil)
  if valid_610699 != nil:
    section.add "X-Amz-Signature", valid_610699
  var valid_610700 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610700 = validateParameter(valid_610700, JString, required = false,
                                 default = nil)
  if valid_610700 != nil:
    section.add "X-Amz-Content-Sha256", valid_610700
  var valid_610701 = header.getOrDefault("X-Amz-Date")
  valid_610701 = validateParameter(valid_610701, JString, required = false,
                                 default = nil)
  if valid_610701 != nil:
    section.add "X-Amz-Date", valid_610701
  var valid_610702 = header.getOrDefault("X-Amz-Credential")
  valid_610702 = validateParameter(valid_610702, JString, required = false,
                                 default = nil)
  if valid_610702 != nil:
    section.add "X-Amz-Credential", valid_610702
  var valid_610703 = header.getOrDefault("X-Amz-Security-Token")
  valid_610703 = validateParameter(valid_610703, JString, required = false,
                                 default = nil)
  if valid_610703 != nil:
    section.add "X-Amz-Security-Token", valid_610703
  var valid_610704 = header.getOrDefault("X-Amz-Algorithm")
  valid_610704 = validateParameter(valid_610704, JString, required = false,
                                 default = nil)
  if valid_610704 != nil:
    section.add "X-Amz-Algorithm", valid_610704
  var valid_610705 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610705 = validateParameter(valid_610705, JString, required = false,
                                 default = nil)
  if valid_610705 != nil:
    section.add "X-Amz-SignedHeaders", valid_610705
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   SetAsDefault: JBool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_610706 = formData.getOrDefault("PolicyDocument")
  valid_610706 = validateParameter(valid_610706, JString, required = true,
                                 default = nil)
  if valid_610706 != nil:
    section.add "PolicyDocument", valid_610706
  var valid_610707 = formData.getOrDefault("SetAsDefault")
  valid_610707 = validateParameter(valid_610707, JBool, required = false, default = nil)
  if valid_610707 != nil:
    section.add "SetAsDefault", valid_610707
  var valid_610708 = formData.getOrDefault("PolicyArn")
  valid_610708 = validateParameter(valid_610708, JString, required = true,
                                 default = nil)
  if valid_610708 != nil:
    section.add "PolicyArn", valid_610708
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610709: Call_PostCreatePolicyVersion_610694; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610709.validator(path, query, header, formData, body)
  let scheme = call_610709.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610709.url(scheme.get, call_610709.host, call_610709.base,
                         call_610709.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610709, url, valid)

proc call*(call_610710: Call_PostCreatePolicyVersion_610694;
          PolicyDocument: string; PolicyArn: string; SetAsDefault: bool = false;
          Action: string = "CreatePolicyVersion"; Version: string = "2010-05-08"): Recallable =
  ## postCreatePolicyVersion
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   SetAsDefault: bool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610711 = newJObject()
  var formData_610712 = newJObject()
  add(formData_610712, "PolicyDocument", newJString(PolicyDocument))
  add(formData_610712, "SetAsDefault", newJBool(SetAsDefault))
  add(formData_610712, "PolicyArn", newJString(PolicyArn))
  add(query_610711, "Action", newJString(Action))
  add(query_610711, "Version", newJString(Version))
  result = call_610710.call(nil, query_610711, nil, formData_610712, nil)

var postCreatePolicyVersion* = Call_PostCreatePolicyVersion_610694(
    name: "postCreatePolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreatePolicyVersion",
    validator: validate_PostCreatePolicyVersion_610695, base: "/",
    url: url_PostCreatePolicyVersion_610696, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreatePolicyVersion_610676 = ref object of OpenApiRestCall_609589
proc url_GetCreatePolicyVersion_610678(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreatePolicyVersion_610677(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SetAsDefault: JBool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_610679 = query.getOrDefault("PolicyArn")
  valid_610679 = validateParameter(valid_610679, JString, required = true,
                                 default = nil)
  if valid_610679 != nil:
    section.add "PolicyArn", valid_610679
  var valid_610680 = query.getOrDefault("SetAsDefault")
  valid_610680 = validateParameter(valid_610680, JBool, required = false, default = nil)
  if valid_610680 != nil:
    section.add "SetAsDefault", valid_610680
  var valid_610681 = query.getOrDefault("PolicyDocument")
  valid_610681 = validateParameter(valid_610681, JString, required = true,
                                 default = nil)
  if valid_610681 != nil:
    section.add "PolicyDocument", valid_610681
  var valid_610682 = query.getOrDefault("Action")
  valid_610682 = validateParameter(valid_610682, JString, required = true,
                                 default = newJString("CreatePolicyVersion"))
  if valid_610682 != nil:
    section.add "Action", valid_610682
  var valid_610683 = query.getOrDefault("Version")
  valid_610683 = validateParameter(valid_610683, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610683 != nil:
    section.add "Version", valid_610683
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610684 = header.getOrDefault("X-Amz-Signature")
  valid_610684 = validateParameter(valid_610684, JString, required = false,
                                 default = nil)
  if valid_610684 != nil:
    section.add "X-Amz-Signature", valid_610684
  var valid_610685 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610685 = validateParameter(valid_610685, JString, required = false,
                                 default = nil)
  if valid_610685 != nil:
    section.add "X-Amz-Content-Sha256", valid_610685
  var valid_610686 = header.getOrDefault("X-Amz-Date")
  valid_610686 = validateParameter(valid_610686, JString, required = false,
                                 default = nil)
  if valid_610686 != nil:
    section.add "X-Amz-Date", valid_610686
  var valid_610687 = header.getOrDefault("X-Amz-Credential")
  valid_610687 = validateParameter(valid_610687, JString, required = false,
                                 default = nil)
  if valid_610687 != nil:
    section.add "X-Amz-Credential", valid_610687
  var valid_610688 = header.getOrDefault("X-Amz-Security-Token")
  valid_610688 = validateParameter(valid_610688, JString, required = false,
                                 default = nil)
  if valid_610688 != nil:
    section.add "X-Amz-Security-Token", valid_610688
  var valid_610689 = header.getOrDefault("X-Amz-Algorithm")
  valid_610689 = validateParameter(valid_610689, JString, required = false,
                                 default = nil)
  if valid_610689 != nil:
    section.add "X-Amz-Algorithm", valid_610689
  var valid_610690 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610690 = validateParameter(valid_610690, JString, required = false,
                                 default = nil)
  if valid_610690 != nil:
    section.add "X-Amz-SignedHeaders", valid_610690
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610691: Call_GetCreatePolicyVersion_610676; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610691.validator(path, query, header, formData, body)
  let scheme = call_610691.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610691.url(scheme.get, call_610691.host, call_610691.base,
                         call_610691.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610691, url, valid)

proc call*(call_610692: Call_GetCreatePolicyVersion_610676; PolicyArn: string;
          PolicyDocument: string; SetAsDefault: bool = false;
          Action: string = "CreatePolicyVersion"; Version: string = "2010-05-08"): Recallable =
  ## getCreatePolicyVersion
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SetAsDefault: bool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610693 = newJObject()
  add(query_610693, "PolicyArn", newJString(PolicyArn))
  add(query_610693, "SetAsDefault", newJBool(SetAsDefault))
  add(query_610693, "PolicyDocument", newJString(PolicyDocument))
  add(query_610693, "Action", newJString(Action))
  add(query_610693, "Version", newJString(Version))
  result = call_610692.call(nil, query_610693, nil, nil, nil)

var getCreatePolicyVersion* = Call_GetCreatePolicyVersion_610676(
    name: "getCreatePolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreatePolicyVersion",
    validator: validate_GetCreatePolicyVersion_610677, base: "/",
    url: url_GetCreatePolicyVersion_610678, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateRole_610735 = ref object of OpenApiRestCall_609589
proc url_PostCreateRole_610737(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateRole_610736(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610738 = query.getOrDefault("Action")
  valid_610738 = validateParameter(valid_610738, JString, required = true,
                                 default = newJString("CreateRole"))
  if valid_610738 != nil:
    section.add "Action", valid_610738
  var valid_610739 = query.getOrDefault("Version")
  valid_610739 = validateParameter(valid_610739, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610739 != nil:
    section.add "Version", valid_610739
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610740 = header.getOrDefault("X-Amz-Signature")
  valid_610740 = validateParameter(valid_610740, JString, required = false,
                                 default = nil)
  if valid_610740 != nil:
    section.add "X-Amz-Signature", valid_610740
  var valid_610741 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610741 = validateParameter(valid_610741, JString, required = false,
                                 default = nil)
  if valid_610741 != nil:
    section.add "X-Amz-Content-Sha256", valid_610741
  var valid_610742 = header.getOrDefault("X-Amz-Date")
  valid_610742 = validateParameter(valid_610742, JString, required = false,
                                 default = nil)
  if valid_610742 != nil:
    section.add "X-Amz-Date", valid_610742
  var valid_610743 = header.getOrDefault("X-Amz-Credential")
  valid_610743 = validateParameter(valid_610743, JString, required = false,
                                 default = nil)
  if valid_610743 != nil:
    section.add "X-Amz-Credential", valid_610743
  var valid_610744 = header.getOrDefault("X-Amz-Security-Token")
  valid_610744 = validateParameter(valid_610744, JString, required = false,
                                 default = nil)
  if valid_610744 != nil:
    section.add "X-Amz-Security-Token", valid_610744
  var valid_610745 = header.getOrDefault("X-Amz-Algorithm")
  valid_610745 = validateParameter(valid_610745, JString, required = false,
                                 default = nil)
  if valid_610745 != nil:
    section.add "X-Amz-Algorithm", valid_610745
  var valid_610746 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610746 = validateParameter(valid_610746, JString, required = false,
                                 default = nil)
  if valid_610746 != nil:
    section.add "X-Amz-SignedHeaders", valid_610746
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString
  ##              : A description of the role.
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   AssumeRolePolicyDocument: JString (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  section = newJObject()
  var valid_610747 = formData.getOrDefault("Description")
  valid_610747 = validateParameter(valid_610747, JString, required = false,
                                 default = nil)
  if valid_610747 != nil:
    section.add "Description", valid_610747
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_610748 = formData.getOrDefault("RoleName")
  valid_610748 = validateParameter(valid_610748, JString, required = true,
                                 default = nil)
  if valid_610748 != nil:
    section.add "RoleName", valid_610748
  var valid_610749 = formData.getOrDefault("Path")
  valid_610749 = validateParameter(valid_610749, JString, required = false,
                                 default = nil)
  if valid_610749 != nil:
    section.add "Path", valid_610749
  var valid_610750 = formData.getOrDefault("Tags")
  valid_610750 = validateParameter(valid_610750, JArray, required = false,
                                 default = nil)
  if valid_610750 != nil:
    section.add "Tags", valid_610750
  var valid_610751 = formData.getOrDefault("PermissionsBoundary")
  valid_610751 = validateParameter(valid_610751, JString, required = false,
                                 default = nil)
  if valid_610751 != nil:
    section.add "PermissionsBoundary", valid_610751
  var valid_610752 = formData.getOrDefault("MaxSessionDuration")
  valid_610752 = validateParameter(valid_610752, JInt, required = false, default = nil)
  if valid_610752 != nil:
    section.add "MaxSessionDuration", valid_610752
  var valid_610753 = formData.getOrDefault("AssumeRolePolicyDocument")
  valid_610753 = validateParameter(valid_610753, JString, required = true,
                                 default = nil)
  if valid_610753 != nil:
    section.add "AssumeRolePolicyDocument", valid_610753
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610754: Call_PostCreateRole_610735; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_610754.validator(path, query, header, formData, body)
  let scheme = call_610754.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610754.url(scheme.get, call_610754.host, call_610754.base,
                         call_610754.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610754, url, valid)

proc call*(call_610755: Call_PostCreateRole_610735; RoleName: string;
          AssumeRolePolicyDocument: string; Description: string = "";
          Path: string = ""; Action: string = "CreateRole"; Tags: JsonNode = nil;
          PermissionsBoundary: string = ""; MaxSessionDuration: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postCreateRole
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ##   Description: string
  ##              : A description of the role.
  ##   RoleName: string (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  ##   AssumeRolePolicyDocument: string (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  var query_610756 = newJObject()
  var formData_610757 = newJObject()
  add(formData_610757, "Description", newJString(Description))
  add(formData_610757, "RoleName", newJString(RoleName))
  add(formData_610757, "Path", newJString(Path))
  add(query_610756, "Action", newJString(Action))
  if Tags != nil:
    formData_610757.add "Tags", Tags
  add(formData_610757, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(formData_610757, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_610756, "Version", newJString(Version))
  add(formData_610757, "AssumeRolePolicyDocument",
      newJString(AssumeRolePolicyDocument))
  result = call_610755.call(nil, query_610756, nil, formData_610757, nil)

var postCreateRole* = Call_PostCreateRole_610735(name: "postCreateRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateRole", validator: validate_PostCreateRole_610736,
    base: "/", url: url_PostCreateRole_610737, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateRole_610713 = ref object of OpenApiRestCall_609589
proc url_GetCreateRole_610715(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateRole_610714(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   AssumeRolePolicyDocument: JString (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Path: JString
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Description: JString
  ##              : A description of the role.
  ##   Version: JString (required)
  section = newJObject()
  var valid_610716 = query.getOrDefault("Tags")
  valid_610716 = validateParameter(valid_610716, JArray, required = false,
                                 default = nil)
  if valid_610716 != nil:
    section.add "Tags", valid_610716
  assert query != nil, "query argument is necessary due to required `AssumeRolePolicyDocument` field"
  var valid_610717 = query.getOrDefault("AssumeRolePolicyDocument")
  valid_610717 = validateParameter(valid_610717, JString, required = true,
                                 default = nil)
  if valid_610717 != nil:
    section.add "AssumeRolePolicyDocument", valid_610717
  var valid_610718 = query.getOrDefault("PermissionsBoundary")
  valid_610718 = validateParameter(valid_610718, JString, required = false,
                                 default = nil)
  if valid_610718 != nil:
    section.add "PermissionsBoundary", valid_610718
  var valid_610719 = query.getOrDefault("Path")
  valid_610719 = validateParameter(valid_610719, JString, required = false,
                                 default = nil)
  if valid_610719 != nil:
    section.add "Path", valid_610719
  var valid_610720 = query.getOrDefault("RoleName")
  valid_610720 = validateParameter(valid_610720, JString, required = true,
                                 default = nil)
  if valid_610720 != nil:
    section.add "RoleName", valid_610720
  var valid_610721 = query.getOrDefault("MaxSessionDuration")
  valid_610721 = validateParameter(valid_610721, JInt, required = false, default = nil)
  if valid_610721 != nil:
    section.add "MaxSessionDuration", valid_610721
  var valid_610722 = query.getOrDefault("Action")
  valid_610722 = validateParameter(valid_610722, JString, required = true,
                                 default = newJString("CreateRole"))
  if valid_610722 != nil:
    section.add "Action", valid_610722
  var valid_610723 = query.getOrDefault("Description")
  valid_610723 = validateParameter(valid_610723, JString, required = false,
                                 default = nil)
  if valid_610723 != nil:
    section.add "Description", valid_610723
  var valid_610724 = query.getOrDefault("Version")
  valid_610724 = validateParameter(valid_610724, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610724 != nil:
    section.add "Version", valid_610724
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610725 = header.getOrDefault("X-Amz-Signature")
  valid_610725 = validateParameter(valid_610725, JString, required = false,
                                 default = nil)
  if valid_610725 != nil:
    section.add "X-Amz-Signature", valid_610725
  var valid_610726 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610726 = validateParameter(valid_610726, JString, required = false,
                                 default = nil)
  if valid_610726 != nil:
    section.add "X-Amz-Content-Sha256", valid_610726
  var valid_610727 = header.getOrDefault("X-Amz-Date")
  valid_610727 = validateParameter(valid_610727, JString, required = false,
                                 default = nil)
  if valid_610727 != nil:
    section.add "X-Amz-Date", valid_610727
  var valid_610728 = header.getOrDefault("X-Amz-Credential")
  valid_610728 = validateParameter(valid_610728, JString, required = false,
                                 default = nil)
  if valid_610728 != nil:
    section.add "X-Amz-Credential", valid_610728
  var valid_610729 = header.getOrDefault("X-Amz-Security-Token")
  valid_610729 = validateParameter(valid_610729, JString, required = false,
                                 default = nil)
  if valid_610729 != nil:
    section.add "X-Amz-Security-Token", valid_610729
  var valid_610730 = header.getOrDefault("X-Amz-Algorithm")
  valid_610730 = validateParameter(valid_610730, JString, required = false,
                                 default = nil)
  if valid_610730 != nil:
    section.add "X-Amz-Algorithm", valid_610730
  var valid_610731 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610731 = validateParameter(valid_610731, JString, required = false,
                                 default = nil)
  if valid_610731 != nil:
    section.add "X-Amz-SignedHeaders", valid_610731
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610732: Call_GetCreateRole_610713; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_610732.validator(path, query, header, formData, body)
  let scheme = call_610732.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610732.url(scheme.get, call_610732.host, call_610732.base,
                         call_610732.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610732, url, valid)

proc call*(call_610733: Call_GetCreateRole_610713;
          AssumeRolePolicyDocument: string; RoleName: string; Tags: JsonNode = nil;
          PermissionsBoundary: string = ""; Path: string = "";
          MaxSessionDuration: int = 0; Action: string = "CreateRole";
          Description: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateRole
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   AssumeRolePolicyDocument: string (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Path: string
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Description: string
  ##              : A description of the role.
  ##   Version: string (required)
  var query_610734 = newJObject()
  if Tags != nil:
    query_610734.add "Tags", Tags
  add(query_610734, "AssumeRolePolicyDocument",
      newJString(AssumeRolePolicyDocument))
  add(query_610734, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_610734, "Path", newJString(Path))
  add(query_610734, "RoleName", newJString(RoleName))
  add(query_610734, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_610734, "Action", newJString(Action))
  add(query_610734, "Description", newJString(Description))
  add(query_610734, "Version", newJString(Version))
  result = call_610733.call(nil, query_610734, nil, nil, nil)

var getCreateRole* = Call_GetCreateRole_610713(name: "getCreateRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateRole", validator: validate_GetCreateRole_610714,
    base: "/", url: url_GetCreateRole_610715, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateSAMLProvider_610775 = ref object of OpenApiRestCall_609589
proc url_PostCreateSAMLProvider_610777(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateSAMLProvider_610776(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610778 = query.getOrDefault("Action")
  valid_610778 = validateParameter(valid_610778, JString, required = true,
                                 default = newJString("CreateSAMLProvider"))
  if valid_610778 != nil:
    section.add "Action", valid_610778
  var valid_610779 = query.getOrDefault("Version")
  valid_610779 = validateParameter(valid_610779, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610779 != nil:
    section.add "Version", valid_610779
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610780 = header.getOrDefault("X-Amz-Signature")
  valid_610780 = validateParameter(valid_610780, JString, required = false,
                                 default = nil)
  if valid_610780 != nil:
    section.add "X-Amz-Signature", valid_610780
  var valid_610781 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610781 = validateParameter(valid_610781, JString, required = false,
                                 default = nil)
  if valid_610781 != nil:
    section.add "X-Amz-Content-Sha256", valid_610781
  var valid_610782 = header.getOrDefault("X-Amz-Date")
  valid_610782 = validateParameter(valid_610782, JString, required = false,
                                 default = nil)
  if valid_610782 != nil:
    section.add "X-Amz-Date", valid_610782
  var valid_610783 = header.getOrDefault("X-Amz-Credential")
  valid_610783 = validateParameter(valid_610783, JString, required = false,
                                 default = nil)
  if valid_610783 != nil:
    section.add "X-Amz-Credential", valid_610783
  var valid_610784 = header.getOrDefault("X-Amz-Security-Token")
  valid_610784 = validateParameter(valid_610784, JString, required = false,
                                 default = nil)
  if valid_610784 != nil:
    section.add "X-Amz-Security-Token", valid_610784
  var valid_610785 = header.getOrDefault("X-Amz-Algorithm")
  valid_610785 = validateParameter(valid_610785, JString, required = false,
                                 default = nil)
  if valid_610785 != nil:
    section.add "X-Amz-Algorithm", valid_610785
  var valid_610786 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610786 = validateParameter(valid_610786, JString, required = false,
                                 default = nil)
  if valid_610786 != nil:
    section.add "X-Amz-SignedHeaders", valid_610786
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLMetadataDocument: JString (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Name: JString (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLMetadataDocument` field"
  var valid_610787 = formData.getOrDefault("SAMLMetadataDocument")
  valid_610787 = validateParameter(valid_610787, JString, required = true,
                                 default = nil)
  if valid_610787 != nil:
    section.add "SAMLMetadataDocument", valid_610787
  var valid_610788 = formData.getOrDefault("Name")
  valid_610788 = validateParameter(valid_610788, JString, required = true,
                                 default = nil)
  if valid_610788 != nil:
    section.add "Name", valid_610788
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610789: Call_PostCreateSAMLProvider_610775; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610789.validator(path, query, header, formData, body)
  let scheme = call_610789.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610789.url(scheme.get, call_610789.host, call_610789.base,
                         call_610789.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610789, url, valid)

proc call*(call_610790: Call_PostCreateSAMLProvider_610775;
          SAMLMetadataDocument: string; Name: string;
          Action: string = "CreateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postCreateSAMLProvider
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ##   SAMLMetadataDocument: string (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Action: string (required)
  ##   Name: string (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_610791 = newJObject()
  var formData_610792 = newJObject()
  add(formData_610792, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_610791, "Action", newJString(Action))
  add(formData_610792, "Name", newJString(Name))
  add(query_610791, "Version", newJString(Version))
  result = call_610790.call(nil, query_610791, nil, formData_610792, nil)

var postCreateSAMLProvider* = Call_PostCreateSAMLProvider_610775(
    name: "postCreateSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateSAMLProvider",
    validator: validate_PostCreateSAMLProvider_610776, base: "/",
    url: url_PostCreateSAMLProvider_610777, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateSAMLProvider_610758 = ref object of OpenApiRestCall_609589
proc url_GetCreateSAMLProvider_610760(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateSAMLProvider_610759(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Name: JString (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   SAMLMetadataDocument: JString (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Name` field"
  var valid_610761 = query.getOrDefault("Name")
  valid_610761 = validateParameter(valid_610761, JString, required = true,
                                 default = nil)
  if valid_610761 != nil:
    section.add "Name", valid_610761
  var valid_610762 = query.getOrDefault("Action")
  valid_610762 = validateParameter(valid_610762, JString, required = true,
                                 default = newJString("CreateSAMLProvider"))
  if valid_610762 != nil:
    section.add "Action", valid_610762
  var valid_610763 = query.getOrDefault("SAMLMetadataDocument")
  valid_610763 = validateParameter(valid_610763, JString, required = true,
                                 default = nil)
  if valid_610763 != nil:
    section.add "SAMLMetadataDocument", valid_610763
  var valid_610764 = query.getOrDefault("Version")
  valid_610764 = validateParameter(valid_610764, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610764 != nil:
    section.add "Version", valid_610764
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610765 = header.getOrDefault("X-Amz-Signature")
  valid_610765 = validateParameter(valid_610765, JString, required = false,
                                 default = nil)
  if valid_610765 != nil:
    section.add "X-Amz-Signature", valid_610765
  var valid_610766 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610766 = validateParameter(valid_610766, JString, required = false,
                                 default = nil)
  if valid_610766 != nil:
    section.add "X-Amz-Content-Sha256", valid_610766
  var valid_610767 = header.getOrDefault("X-Amz-Date")
  valid_610767 = validateParameter(valid_610767, JString, required = false,
                                 default = nil)
  if valid_610767 != nil:
    section.add "X-Amz-Date", valid_610767
  var valid_610768 = header.getOrDefault("X-Amz-Credential")
  valid_610768 = validateParameter(valid_610768, JString, required = false,
                                 default = nil)
  if valid_610768 != nil:
    section.add "X-Amz-Credential", valid_610768
  var valid_610769 = header.getOrDefault("X-Amz-Security-Token")
  valid_610769 = validateParameter(valid_610769, JString, required = false,
                                 default = nil)
  if valid_610769 != nil:
    section.add "X-Amz-Security-Token", valid_610769
  var valid_610770 = header.getOrDefault("X-Amz-Algorithm")
  valid_610770 = validateParameter(valid_610770, JString, required = false,
                                 default = nil)
  if valid_610770 != nil:
    section.add "X-Amz-Algorithm", valid_610770
  var valid_610771 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610771 = validateParameter(valid_610771, JString, required = false,
                                 default = nil)
  if valid_610771 != nil:
    section.add "X-Amz-SignedHeaders", valid_610771
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610772: Call_GetCreateSAMLProvider_610758; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610772.validator(path, query, header, formData, body)
  let scheme = call_610772.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610772.url(scheme.get, call_610772.host, call_610772.base,
                         call_610772.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610772, url, valid)

proc call*(call_610773: Call_GetCreateSAMLProvider_610758; Name: string;
          SAMLMetadataDocument: string; Action: string = "CreateSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateSAMLProvider
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ##   Name: string (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   SAMLMetadataDocument: string (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Version: string (required)
  var query_610774 = newJObject()
  add(query_610774, "Name", newJString(Name))
  add(query_610774, "Action", newJString(Action))
  add(query_610774, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_610774, "Version", newJString(Version))
  result = call_610773.call(nil, query_610774, nil, nil, nil)

var getCreateSAMLProvider* = Call_GetCreateSAMLProvider_610758(
    name: "getCreateSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateSAMLProvider",
    validator: validate_GetCreateSAMLProvider_610759, base: "/",
    url: url_GetCreateSAMLProvider_610760, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateServiceLinkedRole_610811 = ref object of OpenApiRestCall_609589
proc url_PostCreateServiceLinkedRole_610813(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateServiceLinkedRole_610812(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610814 = query.getOrDefault("Action")
  valid_610814 = validateParameter(valid_610814, JString, required = true, default = newJString(
      "CreateServiceLinkedRole"))
  if valid_610814 != nil:
    section.add "Action", valid_610814
  var valid_610815 = query.getOrDefault("Version")
  valid_610815 = validateParameter(valid_610815, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610815 != nil:
    section.add "Version", valid_610815
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610816 = header.getOrDefault("X-Amz-Signature")
  valid_610816 = validateParameter(valid_610816, JString, required = false,
                                 default = nil)
  if valid_610816 != nil:
    section.add "X-Amz-Signature", valid_610816
  var valid_610817 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610817 = validateParameter(valid_610817, JString, required = false,
                                 default = nil)
  if valid_610817 != nil:
    section.add "X-Amz-Content-Sha256", valid_610817
  var valid_610818 = header.getOrDefault("X-Amz-Date")
  valid_610818 = validateParameter(valid_610818, JString, required = false,
                                 default = nil)
  if valid_610818 != nil:
    section.add "X-Amz-Date", valid_610818
  var valid_610819 = header.getOrDefault("X-Amz-Credential")
  valid_610819 = validateParameter(valid_610819, JString, required = false,
                                 default = nil)
  if valid_610819 != nil:
    section.add "X-Amz-Credential", valid_610819
  var valid_610820 = header.getOrDefault("X-Amz-Security-Token")
  valid_610820 = validateParameter(valid_610820, JString, required = false,
                                 default = nil)
  if valid_610820 != nil:
    section.add "X-Amz-Security-Token", valid_610820
  var valid_610821 = header.getOrDefault("X-Amz-Algorithm")
  valid_610821 = validateParameter(valid_610821, JString, required = false,
                                 default = nil)
  if valid_610821 != nil:
    section.add "X-Amz-Algorithm", valid_610821
  var valid_610822 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610822 = validateParameter(valid_610822, JString, required = false,
                                 default = nil)
  if valid_610822 != nil:
    section.add "X-Amz-SignedHeaders", valid_610822
  result.add "header", section
  ## parameters in `formData` object:
  ##   CustomSuffix: JString
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Description: JString
  ##              : The description of the role.
  ##   AWSServiceName: JString (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  section = newJObject()
  var valid_610823 = formData.getOrDefault("CustomSuffix")
  valid_610823 = validateParameter(valid_610823, JString, required = false,
                                 default = nil)
  if valid_610823 != nil:
    section.add "CustomSuffix", valid_610823
  var valid_610824 = formData.getOrDefault("Description")
  valid_610824 = validateParameter(valid_610824, JString, required = false,
                                 default = nil)
  if valid_610824 != nil:
    section.add "Description", valid_610824
  assert formData != nil,
        "formData argument is necessary due to required `AWSServiceName` field"
  var valid_610825 = formData.getOrDefault("AWSServiceName")
  valid_610825 = validateParameter(valid_610825, JString, required = true,
                                 default = nil)
  if valid_610825 != nil:
    section.add "AWSServiceName", valid_610825
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610826: Call_PostCreateServiceLinkedRole_610811; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  let valid = call_610826.validator(path, query, header, formData, body)
  let scheme = call_610826.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610826.url(scheme.get, call_610826.host, call_610826.base,
                         call_610826.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610826, url, valid)

proc call*(call_610827: Call_PostCreateServiceLinkedRole_610811;
          AWSServiceName: string; CustomSuffix: string = ""; Description: string = "";
          Action: string = "CreateServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## postCreateServiceLinkedRole
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ##   CustomSuffix: string
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Description: string
  ##              : The description of the role.
  ##   Action: string (required)
  ##   AWSServiceName: string (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Version: string (required)
  var query_610828 = newJObject()
  var formData_610829 = newJObject()
  add(formData_610829, "CustomSuffix", newJString(CustomSuffix))
  add(formData_610829, "Description", newJString(Description))
  add(query_610828, "Action", newJString(Action))
  add(formData_610829, "AWSServiceName", newJString(AWSServiceName))
  add(query_610828, "Version", newJString(Version))
  result = call_610827.call(nil, query_610828, nil, formData_610829, nil)

var postCreateServiceLinkedRole* = Call_PostCreateServiceLinkedRole_610811(
    name: "postCreateServiceLinkedRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceLinkedRole",
    validator: validate_PostCreateServiceLinkedRole_610812, base: "/",
    url: url_PostCreateServiceLinkedRole_610813,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateServiceLinkedRole_610793 = ref object of OpenApiRestCall_609589
proc url_GetCreateServiceLinkedRole_610795(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateServiceLinkedRole_610794(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CustomSuffix: JString
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Action: JString (required)
  ##   Description: JString
  ##              : The description of the role.
  ##   AWSServiceName: JString (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_610796 = query.getOrDefault("CustomSuffix")
  valid_610796 = validateParameter(valid_610796, JString, required = false,
                                 default = nil)
  if valid_610796 != nil:
    section.add "CustomSuffix", valid_610796
  var valid_610797 = query.getOrDefault("Action")
  valid_610797 = validateParameter(valid_610797, JString, required = true, default = newJString(
      "CreateServiceLinkedRole"))
  if valid_610797 != nil:
    section.add "Action", valid_610797
  var valid_610798 = query.getOrDefault("Description")
  valid_610798 = validateParameter(valid_610798, JString, required = false,
                                 default = nil)
  if valid_610798 != nil:
    section.add "Description", valid_610798
  var valid_610799 = query.getOrDefault("AWSServiceName")
  valid_610799 = validateParameter(valid_610799, JString, required = true,
                                 default = nil)
  if valid_610799 != nil:
    section.add "AWSServiceName", valid_610799
  var valid_610800 = query.getOrDefault("Version")
  valid_610800 = validateParameter(valid_610800, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610800 != nil:
    section.add "Version", valid_610800
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610801 = header.getOrDefault("X-Amz-Signature")
  valid_610801 = validateParameter(valid_610801, JString, required = false,
                                 default = nil)
  if valid_610801 != nil:
    section.add "X-Amz-Signature", valid_610801
  var valid_610802 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610802 = validateParameter(valid_610802, JString, required = false,
                                 default = nil)
  if valid_610802 != nil:
    section.add "X-Amz-Content-Sha256", valid_610802
  var valid_610803 = header.getOrDefault("X-Amz-Date")
  valid_610803 = validateParameter(valid_610803, JString, required = false,
                                 default = nil)
  if valid_610803 != nil:
    section.add "X-Amz-Date", valid_610803
  var valid_610804 = header.getOrDefault("X-Amz-Credential")
  valid_610804 = validateParameter(valid_610804, JString, required = false,
                                 default = nil)
  if valid_610804 != nil:
    section.add "X-Amz-Credential", valid_610804
  var valid_610805 = header.getOrDefault("X-Amz-Security-Token")
  valid_610805 = validateParameter(valid_610805, JString, required = false,
                                 default = nil)
  if valid_610805 != nil:
    section.add "X-Amz-Security-Token", valid_610805
  var valid_610806 = header.getOrDefault("X-Amz-Algorithm")
  valid_610806 = validateParameter(valid_610806, JString, required = false,
                                 default = nil)
  if valid_610806 != nil:
    section.add "X-Amz-Algorithm", valid_610806
  var valid_610807 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610807 = validateParameter(valid_610807, JString, required = false,
                                 default = nil)
  if valid_610807 != nil:
    section.add "X-Amz-SignedHeaders", valid_610807
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610808: Call_GetCreateServiceLinkedRole_610793; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  let valid = call_610808.validator(path, query, header, formData, body)
  let scheme = call_610808.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610808.url(scheme.get, call_610808.host, call_610808.base,
                         call_610808.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610808, url, valid)

proc call*(call_610809: Call_GetCreateServiceLinkedRole_610793;
          AWSServiceName: string; CustomSuffix: string = "";
          Action: string = "CreateServiceLinkedRole"; Description: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateServiceLinkedRole
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ##   CustomSuffix: string
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Action: string (required)
  ##   Description: string
  ##              : The description of the role.
  ##   AWSServiceName: string (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Version: string (required)
  var query_610810 = newJObject()
  add(query_610810, "CustomSuffix", newJString(CustomSuffix))
  add(query_610810, "Action", newJString(Action))
  add(query_610810, "Description", newJString(Description))
  add(query_610810, "AWSServiceName", newJString(AWSServiceName))
  add(query_610810, "Version", newJString(Version))
  result = call_610809.call(nil, query_610810, nil, nil, nil)

var getCreateServiceLinkedRole* = Call_GetCreateServiceLinkedRole_610793(
    name: "getCreateServiceLinkedRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceLinkedRole",
    validator: validate_GetCreateServiceLinkedRole_610794, base: "/",
    url: url_GetCreateServiceLinkedRole_610795,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateServiceSpecificCredential_610847 = ref object of OpenApiRestCall_609589
proc url_PostCreateServiceSpecificCredential_610849(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateServiceSpecificCredential_610848(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610850 = query.getOrDefault("Action")
  valid_610850 = validateParameter(valid_610850, JString, required = true, default = newJString(
      "CreateServiceSpecificCredential"))
  if valid_610850 != nil:
    section.add "Action", valid_610850
  var valid_610851 = query.getOrDefault("Version")
  valid_610851 = validateParameter(valid_610851, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610851 != nil:
    section.add "Version", valid_610851
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610852 = header.getOrDefault("X-Amz-Signature")
  valid_610852 = validateParameter(valid_610852, JString, required = false,
                                 default = nil)
  if valid_610852 != nil:
    section.add "X-Amz-Signature", valid_610852
  var valid_610853 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610853 = validateParameter(valid_610853, JString, required = false,
                                 default = nil)
  if valid_610853 != nil:
    section.add "X-Amz-Content-Sha256", valid_610853
  var valid_610854 = header.getOrDefault("X-Amz-Date")
  valid_610854 = validateParameter(valid_610854, JString, required = false,
                                 default = nil)
  if valid_610854 != nil:
    section.add "X-Amz-Date", valid_610854
  var valid_610855 = header.getOrDefault("X-Amz-Credential")
  valid_610855 = validateParameter(valid_610855, JString, required = false,
                                 default = nil)
  if valid_610855 != nil:
    section.add "X-Amz-Credential", valid_610855
  var valid_610856 = header.getOrDefault("X-Amz-Security-Token")
  valid_610856 = validateParameter(valid_610856, JString, required = false,
                                 default = nil)
  if valid_610856 != nil:
    section.add "X-Amz-Security-Token", valid_610856
  var valid_610857 = header.getOrDefault("X-Amz-Algorithm")
  valid_610857 = validateParameter(valid_610857, JString, required = false,
                                 default = nil)
  if valid_610857 != nil:
    section.add "X-Amz-Algorithm", valid_610857
  var valid_610858 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610858 = validateParameter(valid_610858, JString, required = false,
                                 default = nil)
  if valid_610858 != nil:
    section.add "X-Amz-SignedHeaders", valid_610858
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceName: JString (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ServiceName` field"
  var valid_610859 = formData.getOrDefault("ServiceName")
  valid_610859 = validateParameter(valid_610859, JString, required = true,
                                 default = nil)
  if valid_610859 != nil:
    section.add "ServiceName", valid_610859
  var valid_610860 = formData.getOrDefault("UserName")
  valid_610860 = validateParameter(valid_610860, JString, required = true,
                                 default = nil)
  if valid_610860 != nil:
    section.add "UserName", valid_610860
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610861: Call_PostCreateServiceSpecificCredential_610847;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610861.validator(path, query, header, formData, body)
  let scheme = call_610861.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610861.url(scheme.get, call_610861.host, call_610861.base,
                         call_610861.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610861, url, valid)

proc call*(call_610862: Call_PostCreateServiceSpecificCredential_610847;
          ServiceName: string; UserName: string;
          Action: string = "CreateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateServiceSpecificCredential
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ##   ServiceName: string (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610863 = newJObject()
  var formData_610864 = newJObject()
  add(formData_610864, "ServiceName", newJString(ServiceName))
  add(formData_610864, "UserName", newJString(UserName))
  add(query_610863, "Action", newJString(Action))
  add(query_610863, "Version", newJString(Version))
  result = call_610862.call(nil, query_610863, nil, formData_610864, nil)

var postCreateServiceSpecificCredential* = Call_PostCreateServiceSpecificCredential_610847(
    name: "postCreateServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceSpecificCredential",
    validator: validate_PostCreateServiceSpecificCredential_610848, base: "/",
    url: url_PostCreateServiceSpecificCredential_610849,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateServiceSpecificCredential_610830 = ref object of OpenApiRestCall_609589
proc url_GetCreateServiceSpecificCredential_610832(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateServiceSpecificCredential_610831(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: JString (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_610833 = query.getOrDefault("UserName")
  valid_610833 = validateParameter(valid_610833, JString, required = true,
                                 default = nil)
  if valid_610833 != nil:
    section.add "UserName", valid_610833
  var valid_610834 = query.getOrDefault("ServiceName")
  valid_610834 = validateParameter(valid_610834, JString, required = true,
                                 default = nil)
  if valid_610834 != nil:
    section.add "ServiceName", valid_610834
  var valid_610835 = query.getOrDefault("Action")
  valid_610835 = validateParameter(valid_610835, JString, required = true, default = newJString(
      "CreateServiceSpecificCredential"))
  if valid_610835 != nil:
    section.add "Action", valid_610835
  var valid_610836 = query.getOrDefault("Version")
  valid_610836 = validateParameter(valid_610836, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610836 != nil:
    section.add "Version", valid_610836
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610837 = header.getOrDefault("X-Amz-Signature")
  valid_610837 = validateParameter(valid_610837, JString, required = false,
                                 default = nil)
  if valid_610837 != nil:
    section.add "X-Amz-Signature", valid_610837
  var valid_610838 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610838 = validateParameter(valid_610838, JString, required = false,
                                 default = nil)
  if valid_610838 != nil:
    section.add "X-Amz-Content-Sha256", valid_610838
  var valid_610839 = header.getOrDefault("X-Amz-Date")
  valid_610839 = validateParameter(valid_610839, JString, required = false,
                                 default = nil)
  if valid_610839 != nil:
    section.add "X-Amz-Date", valid_610839
  var valid_610840 = header.getOrDefault("X-Amz-Credential")
  valid_610840 = validateParameter(valid_610840, JString, required = false,
                                 default = nil)
  if valid_610840 != nil:
    section.add "X-Amz-Credential", valid_610840
  var valid_610841 = header.getOrDefault("X-Amz-Security-Token")
  valid_610841 = validateParameter(valid_610841, JString, required = false,
                                 default = nil)
  if valid_610841 != nil:
    section.add "X-Amz-Security-Token", valid_610841
  var valid_610842 = header.getOrDefault("X-Amz-Algorithm")
  valid_610842 = validateParameter(valid_610842, JString, required = false,
                                 default = nil)
  if valid_610842 != nil:
    section.add "X-Amz-Algorithm", valid_610842
  var valid_610843 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610843 = validateParameter(valid_610843, JString, required = false,
                                 default = nil)
  if valid_610843 != nil:
    section.add "X-Amz-SignedHeaders", valid_610843
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610844: Call_GetCreateServiceSpecificCredential_610830;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610844.validator(path, query, header, formData, body)
  let scheme = call_610844.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610844.url(scheme.get, call_610844.host, call_610844.base,
                         call_610844.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610844, url, valid)

proc call*(call_610845: Call_GetCreateServiceSpecificCredential_610830;
          UserName: string; ServiceName: string;
          Action: string = "CreateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateServiceSpecificCredential
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: string (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610846 = newJObject()
  add(query_610846, "UserName", newJString(UserName))
  add(query_610846, "ServiceName", newJString(ServiceName))
  add(query_610846, "Action", newJString(Action))
  add(query_610846, "Version", newJString(Version))
  result = call_610845.call(nil, query_610846, nil, nil, nil)

var getCreateServiceSpecificCredential* = Call_GetCreateServiceSpecificCredential_610830(
    name: "getCreateServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceSpecificCredential",
    validator: validate_GetCreateServiceSpecificCredential_610831, base: "/",
    url: url_GetCreateServiceSpecificCredential_610832,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateUser_610884 = ref object of OpenApiRestCall_609589
proc url_PostCreateUser_610886(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateUser_610885(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610887 = query.getOrDefault("Action")
  valid_610887 = validateParameter(valid_610887, JString, required = true,
                                 default = newJString("CreateUser"))
  if valid_610887 != nil:
    section.add "Action", valid_610887
  var valid_610888 = query.getOrDefault("Version")
  valid_610888 = validateParameter(valid_610888, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610888 != nil:
    section.add "Version", valid_610888
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610889 = header.getOrDefault("X-Amz-Signature")
  valid_610889 = validateParameter(valid_610889, JString, required = false,
                                 default = nil)
  if valid_610889 != nil:
    section.add "X-Amz-Signature", valid_610889
  var valid_610890 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610890 = validateParameter(valid_610890, JString, required = false,
                                 default = nil)
  if valid_610890 != nil:
    section.add "X-Amz-Content-Sha256", valid_610890
  var valid_610891 = header.getOrDefault("X-Amz-Date")
  valid_610891 = validateParameter(valid_610891, JString, required = false,
                                 default = nil)
  if valid_610891 != nil:
    section.add "X-Amz-Date", valid_610891
  var valid_610892 = header.getOrDefault("X-Amz-Credential")
  valid_610892 = validateParameter(valid_610892, JString, required = false,
                                 default = nil)
  if valid_610892 != nil:
    section.add "X-Amz-Credential", valid_610892
  var valid_610893 = header.getOrDefault("X-Amz-Security-Token")
  valid_610893 = validateParameter(valid_610893, JString, required = false,
                                 default = nil)
  if valid_610893 != nil:
    section.add "X-Amz-Security-Token", valid_610893
  var valid_610894 = header.getOrDefault("X-Amz-Algorithm")
  valid_610894 = validateParameter(valid_610894, JString, required = false,
                                 default = nil)
  if valid_610894 != nil:
    section.add "X-Amz-Algorithm", valid_610894
  var valid_610895 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610895 = validateParameter(valid_610895, JString, required = false,
                                 default = nil)
  if valid_610895 != nil:
    section.add "X-Amz-SignedHeaders", valid_610895
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_610896 = formData.getOrDefault("UserName")
  valid_610896 = validateParameter(valid_610896, JString, required = true,
                                 default = nil)
  if valid_610896 != nil:
    section.add "UserName", valid_610896
  var valid_610897 = formData.getOrDefault("Path")
  valid_610897 = validateParameter(valid_610897, JString, required = false,
                                 default = nil)
  if valid_610897 != nil:
    section.add "Path", valid_610897
  var valid_610898 = formData.getOrDefault("Tags")
  valid_610898 = validateParameter(valid_610898, JArray, required = false,
                                 default = nil)
  if valid_610898 != nil:
    section.add "Tags", valid_610898
  var valid_610899 = formData.getOrDefault("PermissionsBoundary")
  valid_610899 = validateParameter(valid_610899, JString, required = false,
                                 default = nil)
  if valid_610899 != nil:
    section.add "PermissionsBoundary", valid_610899
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610900: Call_PostCreateUser_610884; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610900.validator(path, query, header, formData, body)
  let scheme = call_610900.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610900.url(scheme.get, call_610900.host, call_610900.base,
                         call_610900.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610900, url, valid)

proc call*(call_610901: Call_PostCreateUser_610884; UserName: string;
          Path: string = ""; Action: string = "CreateUser"; Tags: JsonNode = nil;
          PermissionsBoundary: string = ""; Version: string = "2010-05-08"): Recallable =
  ## postCreateUser
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_610902 = newJObject()
  var formData_610903 = newJObject()
  add(formData_610903, "UserName", newJString(UserName))
  add(formData_610903, "Path", newJString(Path))
  add(query_610902, "Action", newJString(Action))
  if Tags != nil:
    formData_610903.add "Tags", Tags
  add(formData_610903, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_610902, "Version", newJString(Version))
  result = call_610901.call(nil, query_610902, nil, formData_610903, nil)

var postCreateUser* = Call_PostCreateUser_610884(name: "postCreateUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateUser", validator: validate_PostCreateUser_610885,
    base: "/", url: url_PostCreateUser_610886, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateUser_610865 = ref object of OpenApiRestCall_609589
proc url_GetCreateUser_610867(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateUser_610866(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Path: JString
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_610868 = query.getOrDefault("UserName")
  valid_610868 = validateParameter(valid_610868, JString, required = true,
                                 default = nil)
  if valid_610868 != nil:
    section.add "UserName", valid_610868
  var valid_610869 = query.getOrDefault("Tags")
  valid_610869 = validateParameter(valid_610869, JArray, required = false,
                                 default = nil)
  if valid_610869 != nil:
    section.add "Tags", valid_610869
  var valid_610870 = query.getOrDefault("PermissionsBoundary")
  valid_610870 = validateParameter(valid_610870, JString, required = false,
                                 default = nil)
  if valid_610870 != nil:
    section.add "PermissionsBoundary", valid_610870
  var valid_610871 = query.getOrDefault("Path")
  valid_610871 = validateParameter(valid_610871, JString, required = false,
                                 default = nil)
  if valid_610871 != nil:
    section.add "Path", valid_610871
  var valid_610872 = query.getOrDefault("Action")
  valid_610872 = validateParameter(valid_610872, JString, required = true,
                                 default = newJString("CreateUser"))
  if valid_610872 != nil:
    section.add "Action", valid_610872
  var valid_610873 = query.getOrDefault("Version")
  valid_610873 = validateParameter(valid_610873, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610873 != nil:
    section.add "Version", valid_610873
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610874 = header.getOrDefault("X-Amz-Signature")
  valid_610874 = validateParameter(valid_610874, JString, required = false,
                                 default = nil)
  if valid_610874 != nil:
    section.add "X-Amz-Signature", valid_610874
  var valid_610875 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610875 = validateParameter(valid_610875, JString, required = false,
                                 default = nil)
  if valid_610875 != nil:
    section.add "X-Amz-Content-Sha256", valid_610875
  var valid_610876 = header.getOrDefault("X-Amz-Date")
  valid_610876 = validateParameter(valid_610876, JString, required = false,
                                 default = nil)
  if valid_610876 != nil:
    section.add "X-Amz-Date", valid_610876
  var valid_610877 = header.getOrDefault("X-Amz-Credential")
  valid_610877 = validateParameter(valid_610877, JString, required = false,
                                 default = nil)
  if valid_610877 != nil:
    section.add "X-Amz-Credential", valid_610877
  var valid_610878 = header.getOrDefault("X-Amz-Security-Token")
  valid_610878 = validateParameter(valid_610878, JString, required = false,
                                 default = nil)
  if valid_610878 != nil:
    section.add "X-Amz-Security-Token", valid_610878
  var valid_610879 = header.getOrDefault("X-Amz-Algorithm")
  valid_610879 = validateParameter(valid_610879, JString, required = false,
                                 default = nil)
  if valid_610879 != nil:
    section.add "X-Amz-Algorithm", valid_610879
  var valid_610880 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610880 = validateParameter(valid_610880, JString, required = false,
                                 default = nil)
  if valid_610880 != nil:
    section.add "X-Amz-SignedHeaders", valid_610880
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610881: Call_GetCreateUser_610865; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610881.validator(path, query, header, formData, body)
  let scheme = call_610881.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610881.url(scheme.get, call_610881.host, call_610881.base,
                         call_610881.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610881, url, valid)

proc call*(call_610882: Call_GetCreateUser_610865; UserName: string;
          Tags: JsonNode = nil; PermissionsBoundary: string = ""; Path: string = "";
          Action: string = "CreateUser"; Version: string = "2010-05-08"): Recallable =
  ## getCreateUser
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Path: string
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610883 = newJObject()
  add(query_610883, "UserName", newJString(UserName))
  if Tags != nil:
    query_610883.add "Tags", Tags
  add(query_610883, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_610883, "Path", newJString(Path))
  add(query_610883, "Action", newJString(Action))
  add(query_610883, "Version", newJString(Version))
  result = call_610882.call(nil, query_610883, nil, nil, nil)

var getCreateUser* = Call_GetCreateUser_610865(name: "getCreateUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateUser", validator: validate_GetCreateUser_610866,
    base: "/", url: url_GetCreateUser_610867, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateVirtualMFADevice_610921 = ref object of OpenApiRestCall_609589
proc url_PostCreateVirtualMFADevice_610923(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateVirtualMFADevice_610922(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610924 = query.getOrDefault("Action")
  valid_610924 = validateParameter(valid_610924, JString, required = true,
                                 default = newJString("CreateVirtualMFADevice"))
  if valid_610924 != nil:
    section.add "Action", valid_610924
  var valid_610925 = query.getOrDefault("Version")
  valid_610925 = validateParameter(valid_610925, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610925 != nil:
    section.add "Version", valid_610925
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610926 = header.getOrDefault("X-Amz-Signature")
  valid_610926 = validateParameter(valid_610926, JString, required = false,
                                 default = nil)
  if valid_610926 != nil:
    section.add "X-Amz-Signature", valid_610926
  var valid_610927 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610927 = validateParameter(valid_610927, JString, required = false,
                                 default = nil)
  if valid_610927 != nil:
    section.add "X-Amz-Content-Sha256", valid_610927
  var valid_610928 = header.getOrDefault("X-Amz-Date")
  valid_610928 = validateParameter(valid_610928, JString, required = false,
                                 default = nil)
  if valid_610928 != nil:
    section.add "X-Amz-Date", valid_610928
  var valid_610929 = header.getOrDefault("X-Amz-Credential")
  valid_610929 = validateParameter(valid_610929, JString, required = false,
                                 default = nil)
  if valid_610929 != nil:
    section.add "X-Amz-Credential", valid_610929
  var valid_610930 = header.getOrDefault("X-Amz-Security-Token")
  valid_610930 = validateParameter(valid_610930, JString, required = false,
                                 default = nil)
  if valid_610930 != nil:
    section.add "X-Amz-Security-Token", valid_610930
  var valid_610931 = header.getOrDefault("X-Amz-Algorithm")
  valid_610931 = validateParameter(valid_610931, JString, required = false,
                                 default = nil)
  if valid_610931 != nil:
    section.add "X-Amz-Algorithm", valid_610931
  var valid_610932 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610932 = validateParameter(valid_610932, JString, required = false,
                                 default = nil)
  if valid_610932 != nil:
    section.add "X-Amz-SignedHeaders", valid_610932
  result.add "header", section
  ## parameters in `formData` object:
  ##   VirtualMFADeviceName: JString (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: JString
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `VirtualMFADeviceName` field"
  var valid_610933 = formData.getOrDefault("VirtualMFADeviceName")
  valid_610933 = validateParameter(valid_610933, JString, required = true,
                                 default = nil)
  if valid_610933 != nil:
    section.add "VirtualMFADeviceName", valid_610933
  var valid_610934 = formData.getOrDefault("Path")
  valid_610934 = validateParameter(valid_610934, JString, required = false,
                                 default = nil)
  if valid_610934 != nil:
    section.add "Path", valid_610934
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610935: Call_PostCreateVirtualMFADevice_610921; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  let valid = call_610935.validator(path, query, header, formData, body)
  let scheme = call_610935.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610935.url(scheme.get, call_610935.host, call_610935.base,
                         call_610935.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610935, url, valid)

proc call*(call_610936: Call_PostCreateVirtualMFADevice_610921;
          VirtualMFADeviceName: string; Path: string = "";
          Action: string = "CreateVirtualMFADevice"; Version: string = "2010-05-08"): Recallable =
  ## postCreateVirtualMFADevice
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ##   VirtualMFADeviceName: string (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: string
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610937 = newJObject()
  var formData_610938 = newJObject()
  add(formData_610938, "VirtualMFADeviceName", newJString(VirtualMFADeviceName))
  add(formData_610938, "Path", newJString(Path))
  add(query_610937, "Action", newJString(Action))
  add(query_610937, "Version", newJString(Version))
  result = call_610936.call(nil, query_610937, nil, formData_610938, nil)

var postCreateVirtualMFADevice* = Call_PostCreateVirtualMFADevice_610921(
    name: "postCreateVirtualMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateVirtualMFADevice",
    validator: validate_PostCreateVirtualMFADevice_610922, base: "/",
    url: url_PostCreateVirtualMFADevice_610923,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateVirtualMFADevice_610904 = ref object of OpenApiRestCall_609589
proc url_GetCreateVirtualMFADevice_610906(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateVirtualMFADevice_610905(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Path: JString
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   VirtualMFADeviceName: JString (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_610907 = query.getOrDefault("Path")
  valid_610907 = validateParameter(valid_610907, JString, required = false,
                                 default = nil)
  if valid_610907 != nil:
    section.add "Path", valid_610907
  var valid_610908 = query.getOrDefault("Action")
  valid_610908 = validateParameter(valid_610908, JString, required = true,
                                 default = newJString("CreateVirtualMFADevice"))
  if valid_610908 != nil:
    section.add "Action", valid_610908
  var valid_610909 = query.getOrDefault("Version")
  valid_610909 = validateParameter(valid_610909, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610909 != nil:
    section.add "Version", valid_610909
  var valid_610910 = query.getOrDefault("VirtualMFADeviceName")
  valid_610910 = validateParameter(valid_610910, JString, required = true,
                                 default = nil)
  if valid_610910 != nil:
    section.add "VirtualMFADeviceName", valid_610910
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610911 = header.getOrDefault("X-Amz-Signature")
  valid_610911 = validateParameter(valid_610911, JString, required = false,
                                 default = nil)
  if valid_610911 != nil:
    section.add "X-Amz-Signature", valid_610911
  var valid_610912 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610912 = validateParameter(valid_610912, JString, required = false,
                                 default = nil)
  if valid_610912 != nil:
    section.add "X-Amz-Content-Sha256", valid_610912
  var valid_610913 = header.getOrDefault("X-Amz-Date")
  valid_610913 = validateParameter(valid_610913, JString, required = false,
                                 default = nil)
  if valid_610913 != nil:
    section.add "X-Amz-Date", valid_610913
  var valid_610914 = header.getOrDefault("X-Amz-Credential")
  valid_610914 = validateParameter(valid_610914, JString, required = false,
                                 default = nil)
  if valid_610914 != nil:
    section.add "X-Amz-Credential", valid_610914
  var valid_610915 = header.getOrDefault("X-Amz-Security-Token")
  valid_610915 = validateParameter(valid_610915, JString, required = false,
                                 default = nil)
  if valid_610915 != nil:
    section.add "X-Amz-Security-Token", valid_610915
  var valid_610916 = header.getOrDefault("X-Amz-Algorithm")
  valid_610916 = validateParameter(valid_610916, JString, required = false,
                                 default = nil)
  if valid_610916 != nil:
    section.add "X-Amz-Algorithm", valid_610916
  var valid_610917 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610917 = validateParameter(valid_610917, JString, required = false,
                                 default = nil)
  if valid_610917 != nil:
    section.add "X-Amz-SignedHeaders", valid_610917
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610918: Call_GetCreateVirtualMFADevice_610904; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  let valid = call_610918.validator(path, query, header, formData, body)
  let scheme = call_610918.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610918.url(scheme.get, call_610918.host, call_610918.base,
                         call_610918.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610918, url, valid)

proc call*(call_610919: Call_GetCreateVirtualMFADevice_610904;
          VirtualMFADeviceName: string; Path: string = "";
          Action: string = "CreateVirtualMFADevice"; Version: string = "2010-05-08"): Recallable =
  ## getCreateVirtualMFADevice
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ##   Path: string
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   VirtualMFADeviceName: string (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_610920 = newJObject()
  add(query_610920, "Path", newJString(Path))
  add(query_610920, "Action", newJString(Action))
  add(query_610920, "Version", newJString(Version))
  add(query_610920, "VirtualMFADeviceName", newJString(VirtualMFADeviceName))
  result = call_610919.call(nil, query_610920, nil, nil, nil)

var getCreateVirtualMFADevice* = Call_GetCreateVirtualMFADevice_610904(
    name: "getCreateVirtualMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateVirtualMFADevice",
    validator: validate_GetCreateVirtualMFADevice_610905, base: "/",
    url: url_GetCreateVirtualMFADevice_610906,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeactivateMFADevice_610956 = ref object of OpenApiRestCall_609589
proc url_PostDeactivateMFADevice_610958(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeactivateMFADevice_610957(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610959 = query.getOrDefault("Action")
  valid_610959 = validateParameter(valid_610959, JString, required = true,
                                 default = newJString("DeactivateMFADevice"))
  if valid_610959 != nil:
    section.add "Action", valid_610959
  var valid_610960 = query.getOrDefault("Version")
  valid_610960 = validateParameter(valid_610960, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610960 != nil:
    section.add "Version", valid_610960
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610961 = header.getOrDefault("X-Amz-Signature")
  valid_610961 = validateParameter(valid_610961, JString, required = false,
                                 default = nil)
  if valid_610961 != nil:
    section.add "X-Amz-Signature", valid_610961
  var valid_610962 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610962 = validateParameter(valid_610962, JString, required = false,
                                 default = nil)
  if valid_610962 != nil:
    section.add "X-Amz-Content-Sha256", valid_610962
  var valid_610963 = header.getOrDefault("X-Amz-Date")
  valid_610963 = validateParameter(valid_610963, JString, required = false,
                                 default = nil)
  if valid_610963 != nil:
    section.add "X-Amz-Date", valid_610963
  var valid_610964 = header.getOrDefault("X-Amz-Credential")
  valid_610964 = validateParameter(valid_610964, JString, required = false,
                                 default = nil)
  if valid_610964 != nil:
    section.add "X-Amz-Credential", valid_610964
  var valid_610965 = header.getOrDefault("X-Amz-Security-Token")
  valid_610965 = validateParameter(valid_610965, JString, required = false,
                                 default = nil)
  if valid_610965 != nil:
    section.add "X-Amz-Security-Token", valid_610965
  var valid_610966 = header.getOrDefault("X-Amz-Algorithm")
  valid_610966 = validateParameter(valid_610966, JString, required = false,
                                 default = nil)
  if valid_610966 != nil:
    section.add "X-Amz-Algorithm", valid_610966
  var valid_610967 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610967 = validateParameter(valid_610967, JString, required = false,
                                 default = nil)
  if valid_610967 != nil:
    section.add "X-Amz-SignedHeaders", valid_610967
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_610968 = formData.getOrDefault("SerialNumber")
  valid_610968 = validateParameter(valid_610968, JString, required = true,
                                 default = nil)
  if valid_610968 != nil:
    section.add "SerialNumber", valid_610968
  var valid_610969 = formData.getOrDefault("UserName")
  valid_610969 = validateParameter(valid_610969, JString, required = true,
                                 default = nil)
  if valid_610969 != nil:
    section.add "UserName", valid_610969
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610970: Call_PostDeactivateMFADevice_610956; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610970.validator(path, query, header, formData, body)
  let scheme = call_610970.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610970.url(scheme.get, call_610970.host, call_610970.base,
                         call_610970.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610970, url, valid)

proc call*(call_610971: Call_PostDeactivateMFADevice_610956; SerialNumber: string;
          UserName: string; Action: string = "DeactivateMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postDeactivateMFADevice
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610972 = newJObject()
  var formData_610973 = newJObject()
  add(formData_610973, "SerialNumber", newJString(SerialNumber))
  add(formData_610973, "UserName", newJString(UserName))
  add(query_610972, "Action", newJString(Action))
  add(query_610972, "Version", newJString(Version))
  result = call_610971.call(nil, query_610972, nil, formData_610973, nil)

var postDeactivateMFADevice* = Call_PostDeactivateMFADevice_610956(
    name: "postDeactivateMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeactivateMFADevice",
    validator: validate_PostDeactivateMFADevice_610957, base: "/",
    url: url_PostDeactivateMFADevice_610958, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeactivateMFADevice_610939 = ref object of OpenApiRestCall_609589
proc url_GetDeactivateMFADevice_610941(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeactivateMFADevice_610940(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_610942 = query.getOrDefault("UserName")
  valid_610942 = validateParameter(valid_610942, JString, required = true,
                                 default = nil)
  if valid_610942 != nil:
    section.add "UserName", valid_610942
  var valid_610943 = query.getOrDefault("SerialNumber")
  valid_610943 = validateParameter(valid_610943, JString, required = true,
                                 default = nil)
  if valid_610943 != nil:
    section.add "SerialNumber", valid_610943
  var valid_610944 = query.getOrDefault("Action")
  valid_610944 = validateParameter(valid_610944, JString, required = true,
                                 default = newJString("DeactivateMFADevice"))
  if valid_610944 != nil:
    section.add "Action", valid_610944
  var valid_610945 = query.getOrDefault("Version")
  valid_610945 = validateParameter(valid_610945, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610945 != nil:
    section.add "Version", valid_610945
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610946 = header.getOrDefault("X-Amz-Signature")
  valid_610946 = validateParameter(valid_610946, JString, required = false,
                                 default = nil)
  if valid_610946 != nil:
    section.add "X-Amz-Signature", valid_610946
  var valid_610947 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610947 = validateParameter(valid_610947, JString, required = false,
                                 default = nil)
  if valid_610947 != nil:
    section.add "X-Amz-Content-Sha256", valid_610947
  var valid_610948 = header.getOrDefault("X-Amz-Date")
  valid_610948 = validateParameter(valid_610948, JString, required = false,
                                 default = nil)
  if valid_610948 != nil:
    section.add "X-Amz-Date", valid_610948
  var valid_610949 = header.getOrDefault("X-Amz-Credential")
  valid_610949 = validateParameter(valid_610949, JString, required = false,
                                 default = nil)
  if valid_610949 != nil:
    section.add "X-Amz-Credential", valid_610949
  var valid_610950 = header.getOrDefault("X-Amz-Security-Token")
  valid_610950 = validateParameter(valid_610950, JString, required = false,
                                 default = nil)
  if valid_610950 != nil:
    section.add "X-Amz-Security-Token", valid_610950
  var valid_610951 = header.getOrDefault("X-Amz-Algorithm")
  valid_610951 = validateParameter(valid_610951, JString, required = false,
                                 default = nil)
  if valid_610951 != nil:
    section.add "X-Amz-Algorithm", valid_610951
  var valid_610952 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610952 = validateParameter(valid_610952, JString, required = false,
                                 default = nil)
  if valid_610952 != nil:
    section.add "X-Amz-SignedHeaders", valid_610952
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610953: Call_GetDeactivateMFADevice_610939; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_610953.validator(path, query, header, formData, body)
  let scheme = call_610953.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610953.url(scheme.get, call_610953.host, call_610953.base,
                         call_610953.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610953, url, valid)

proc call*(call_610954: Call_GetDeactivateMFADevice_610939; UserName: string;
          SerialNumber: string; Action: string = "DeactivateMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getDeactivateMFADevice
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610955 = newJObject()
  add(query_610955, "UserName", newJString(UserName))
  add(query_610955, "SerialNumber", newJString(SerialNumber))
  add(query_610955, "Action", newJString(Action))
  add(query_610955, "Version", newJString(Version))
  result = call_610954.call(nil, query_610955, nil, nil, nil)

var getDeactivateMFADevice* = Call_GetDeactivateMFADevice_610939(
    name: "getDeactivateMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeactivateMFADevice",
    validator: validate_GetDeactivateMFADevice_610940, base: "/",
    url: url_GetDeactivateMFADevice_610941, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccessKey_610991 = ref object of OpenApiRestCall_609589
proc url_PostDeleteAccessKey_610993(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAccessKey_610992(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_610994 = query.getOrDefault("Action")
  valid_610994 = validateParameter(valid_610994, JString, required = true,
                                 default = newJString("DeleteAccessKey"))
  if valid_610994 != nil:
    section.add "Action", valid_610994
  var valid_610995 = query.getOrDefault("Version")
  valid_610995 = validateParameter(valid_610995, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610995 != nil:
    section.add "Version", valid_610995
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610996 = header.getOrDefault("X-Amz-Signature")
  valid_610996 = validateParameter(valid_610996, JString, required = false,
                                 default = nil)
  if valid_610996 != nil:
    section.add "X-Amz-Signature", valid_610996
  var valid_610997 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610997 = validateParameter(valid_610997, JString, required = false,
                                 default = nil)
  if valid_610997 != nil:
    section.add "X-Amz-Content-Sha256", valid_610997
  var valid_610998 = header.getOrDefault("X-Amz-Date")
  valid_610998 = validateParameter(valid_610998, JString, required = false,
                                 default = nil)
  if valid_610998 != nil:
    section.add "X-Amz-Date", valid_610998
  var valid_610999 = header.getOrDefault("X-Amz-Credential")
  valid_610999 = validateParameter(valid_610999, JString, required = false,
                                 default = nil)
  if valid_610999 != nil:
    section.add "X-Amz-Credential", valid_610999
  var valid_611000 = header.getOrDefault("X-Amz-Security-Token")
  valid_611000 = validateParameter(valid_611000, JString, required = false,
                                 default = nil)
  if valid_611000 != nil:
    section.add "X-Amz-Security-Token", valid_611000
  var valid_611001 = header.getOrDefault("X-Amz-Algorithm")
  valid_611001 = validateParameter(valid_611001, JString, required = false,
                                 default = nil)
  if valid_611001 != nil:
    section.add "X-Amz-Algorithm", valid_611001
  var valid_611002 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611002 = validateParameter(valid_611002, JString, required = false,
                                 default = nil)
  if valid_611002 != nil:
    section.add "X-Amz-SignedHeaders", valid_611002
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_611003 = formData.getOrDefault("AccessKeyId")
  valid_611003 = validateParameter(valid_611003, JString, required = true,
                                 default = nil)
  if valid_611003 != nil:
    section.add "AccessKeyId", valid_611003
  var valid_611004 = formData.getOrDefault("UserName")
  valid_611004 = validateParameter(valid_611004, JString, required = false,
                                 default = nil)
  if valid_611004 != nil:
    section.add "UserName", valid_611004
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611005: Call_PostDeleteAccessKey_610991; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_611005.validator(path, query, header, formData, body)
  let scheme = call_611005.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611005.url(scheme.get, call_611005.host, call_611005.base,
                         call_611005.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611005, url, valid)

proc call*(call_611006: Call_PostDeleteAccessKey_610991; AccessKeyId: string;
          UserName: string = ""; Action: string = "DeleteAccessKey";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccessKey
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611007 = newJObject()
  var formData_611008 = newJObject()
  add(formData_611008, "AccessKeyId", newJString(AccessKeyId))
  add(formData_611008, "UserName", newJString(UserName))
  add(query_611007, "Action", newJString(Action))
  add(query_611007, "Version", newJString(Version))
  result = call_611006.call(nil, query_611007, nil, formData_611008, nil)

var postDeleteAccessKey* = Call_PostDeleteAccessKey_610991(
    name: "postDeleteAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccessKey",
    validator: validate_PostDeleteAccessKey_610992, base: "/",
    url: url_PostDeleteAccessKey_610993, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccessKey_610974 = ref object of OpenApiRestCall_609589
proc url_GetDeleteAccessKey_610976(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAccessKey_610975(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_610977 = query.getOrDefault("UserName")
  valid_610977 = validateParameter(valid_610977, JString, required = false,
                                 default = nil)
  if valid_610977 != nil:
    section.add "UserName", valid_610977
  var valid_610978 = query.getOrDefault("Action")
  valid_610978 = validateParameter(valid_610978, JString, required = true,
                                 default = newJString("DeleteAccessKey"))
  if valid_610978 != nil:
    section.add "Action", valid_610978
  var valid_610979 = query.getOrDefault("AccessKeyId")
  valid_610979 = validateParameter(valid_610979, JString, required = true,
                                 default = nil)
  if valid_610979 != nil:
    section.add "AccessKeyId", valid_610979
  var valid_610980 = query.getOrDefault("Version")
  valid_610980 = validateParameter(valid_610980, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_610980 != nil:
    section.add "Version", valid_610980
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610981 = header.getOrDefault("X-Amz-Signature")
  valid_610981 = validateParameter(valid_610981, JString, required = false,
                                 default = nil)
  if valid_610981 != nil:
    section.add "X-Amz-Signature", valid_610981
  var valid_610982 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610982 = validateParameter(valid_610982, JString, required = false,
                                 default = nil)
  if valid_610982 != nil:
    section.add "X-Amz-Content-Sha256", valid_610982
  var valid_610983 = header.getOrDefault("X-Amz-Date")
  valid_610983 = validateParameter(valid_610983, JString, required = false,
                                 default = nil)
  if valid_610983 != nil:
    section.add "X-Amz-Date", valid_610983
  var valid_610984 = header.getOrDefault("X-Amz-Credential")
  valid_610984 = validateParameter(valid_610984, JString, required = false,
                                 default = nil)
  if valid_610984 != nil:
    section.add "X-Amz-Credential", valid_610984
  var valid_610985 = header.getOrDefault("X-Amz-Security-Token")
  valid_610985 = validateParameter(valid_610985, JString, required = false,
                                 default = nil)
  if valid_610985 != nil:
    section.add "X-Amz-Security-Token", valid_610985
  var valid_610986 = header.getOrDefault("X-Amz-Algorithm")
  valid_610986 = validateParameter(valid_610986, JString, required = false,
                                 default = nil)
  if valid_610986 != nil:
    section.add "X-Amz-Algorithm", valid_610986
  var valid_610987 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610987 = validateParameter(valid_610987, JString, required = false,
                                 default = nil)
  if valid_610987 != nil:
    section.add "X-Amz-SignedHeaders", valid_610987
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610988: Call_GetDeleteAccessKey_610974; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_610988.validator(path, query, header, formData, body)
  let scheme = call_610988.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610988.url(scheme.get, call_610988.host, call_610988.base,
                         call_610988.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610988, url, valid)

proc call*(call_610989: Call_GetDeleteAccessKey_610974; AccessKeyId: string;
          UserName: string = ""; Action: string = "DeleteAccessKey";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccessKey
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_610990 = newJObject()
  add(query_610990, "UserName", newJString(UserName))
  add(query_610990, "Action", newJString(Action))
  add(query_610990, "AccessKeyId", newJString(AccessKeyId))
  add(query_610990, "Version", newJString(Version))
  result = call_610989.call(nil, query_610990, nil, nil, nil)

var getDeleteAccessKey* = Call_GetDeleteAccessKey_610974(
    name: "getDeleteAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteAccessKey", validator: validate_GetDeleteAccessKey_610975,
    base: "/", url: url_GetDeleteAccessKey_610976,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccountAlias_611025 = ref object of OpenApiRestCall_609589
proc url_PostDeleteAccountAlias_611027(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAccountAlias_611026(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611028 = query.getOrDefault("Action")
  valid_611028 = validateParameter(valid_611028, JString, required = true,
                                 default = newJString("DeleteAccountAlias"))
  if valid_611028 != nil:
    section.add "Action", valid_611028
  var valid_611029 = query.getOrDefault("Version")
  valid_611029 = validateParameter(valid_611029, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611029 != nil:
    section.add "Version", valid_611029
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611030 = header.getOrDefault("X-Amz-Signature")
  valid_611030 = validateParameter(valid_611030, JString, required = false,
                                 default = nil)
  if valid_611030 != nil:
    section.add "X-Amz-Signature", valid_611030
  var valid_611031 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611031 = validateParameter(valid_611031, JString, required = false,
                                 default = nil)
  if valid_611031 != nil:
    section.add "X-Amz-Content-Sha256", valid_611031
  var valid_611032 = header.getOrDefault("X-Amz-Date")
  valid_611032 = validateParameter(valid_611032, JString, required = false,
                                 default = nil)
  if valid_611032 != nil:
    section.add "X-Amz-Date", valid_611032
  var valid_611033 = header.getOrDefault("X-Amz-Credential")
  valid_611033 = validateParameter(valid_611033, JString, required = false,
                                 default = nil)
  if valid_611033 != nil:
    section.add "X-Amz-Credential", valid_611033
  var valid_611034 = header.getOrDefault("X-Amz-Security-Token")
  valid_611034 = validateParameter(valid_611034, JString, required = false,
                                 default = nil)
  if valid_611034 != nil:
    section.add "X-Amz-Security-Token", valid_611034
  var valid_611035 = header.getOrDefault("X-Amz-Algorithm")
  valid_611035 = validateParameter(valid_611035, JString, required = false,
                                 default = nil)
  if valid_611035 != nil:
    section.add "X-Amz-Algorithm", valid_611035
  var valid_611036 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611036 = validateParameter(valid_611036, JString, required = false,
                                 default = nil)
  if valid_611036 != nil:
    section.add "X-Amz-SignedHeaders", valid_611036
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccountAlias` field"
  var valid_611037 = formData.getOrDefault("AccountAlias")
  valid_611037 = validateParameter(valid_611037, JString, required = true,
                                 default = nil)
  if valid_611037 != nil:
    section.add "AccountAlias", valid_611037
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611038: Call_PostDeleteAccountAlias_611025; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_611038.validator(path, query, header, formData, body)
  let scheme = call_611038.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611038.url(scheme.get, call_611038.host, call_611038.base,
                         call_611038.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611038, url, valid)

proc call*(call_611039: Call_PostDeleteAccountAlias_611025; AccountAlias: string;
          Action: string = "DeleteAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccountAlias
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   AccountAlias: string (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Version: string (required)
  var query_611040 = newJObject()
  var formData_611041 = newJObject()
  add(query_611040, "Action", newJString(Action))
  add(formData_611041, "AccountAlias", newJString(AccountAlias))
  add(query_611040, "Version", newJString(Version))
  result = call_611039.call(nil, query_611040, nil, formData_611041, nil)

var postDeleteAccountAlias* = Call_PostDeleteAccountAlias_611025(
    name: "postDeleteAccountAlias", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountAlias",
    validator: validate_PostDeleteAccountAlias_611026, base: "/",
    url: url_PostDeleteAccountAlias_611027, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccountAlias_611009 = ref object of OpenApiRestCall_609589
proc url_GetDeleteAccountAlias_611011(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAccountAlias_611010(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccountAlias` field"
  var valid_611012 = query.getOrDefault("AccountAlias")
  valid_611012 = validateParameter(valid_611012, JString, required = true,
                                 default = nil)
  if valid_611012 != nil:
    section.add "AccountAlias", valid_611012
  var valid_611013 = query.getOrDefault("Action")
  valid_611013 = validateParameter(valid_611013, JString, required = true,
                                 default = newJString("DeleteAccountAlias"))
  if valid_611013 != nil:
    section.add "Action", valid_611013
  var valid_611014 = query.getOrDefault("Version")
  valid_611014 = validateParameter(valid_611014, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611014 != nil:
    section.add "Version", valid_611014
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611015 = header.getOrDefault("X-Amz-Signature")
  valid_611015 = validateParameter(valid_611015, JString, required = false,
                                 default = nil)
  if valid_611015 != nil:
    section.add "X-Amz-Signature", valid_611015
  var valid_611016 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611016 = validateParameter(valid_611016, JString, required = false,
                                 default = nil)
  if valid_611016 != nil:
    section.add "X-Amz-Content-Sha256", valid_611016
  var valid_611017 = header.getOrDefault("X-Amz-Date")
  valid_611017 = validateParameter(valid_611017, JString, required = false,
                                 default = nil)
  if valid_611017 != nil:
    section.add "X-Amz-Date", valid_611017
  var valid_611018 = header.getOrDefault("X-Amz-Credential")
  valid_611018 = validateParameter(valid_611018, JString, required = false,
                                 default = nil)
  if valid_611018 != nil:
    section.add "X-Amz-Credential", valid_611018
  var valid_611019 = header.getOrDefault("X-Amz-Security-Token")
  valid_611019 = validateParameter(valid_611019, JString, required = false,
                                 default = nil)
  if valid_611019 != nil:
    section.add "X-Amz-Security-Token", valid_611019
  var valid_611020 = header.getOrDefault("X-Amz-Algorithm")
  valid_611020 = validateParameter(valid_611020, JString, required = false,
                                 default = nil)
  if valid_611020 != nil:
    section.add "X-Amz-Algorithm", valid_611020
  var valid_611021 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611021 = validateParameter(valid_611021, JString, required = false,
                                 default = nil)
  if valid_611021 != nil:
    section.add "X-Amz-SignedHeaders", valid_611021
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611022: Call_GetDeleteAccountAlias_611009; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_611022.validator(path, query, header, formData, body)
  let scheme = call_611022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611022.url(scheme.get, call_611022.host, call_611022.base,
                         call_611022.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611022, url, valid)

proc call*(call_611023: Call_GetDeleteAccountAlias_611009; AccountAlias: string;
          Action: string = "DeleteAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccountAlias
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611024 = newJObject()
  add(query_611024, "AccountAlias", newJString(AccountAlias))
  add(query_611024, "Action", newJString(Action))
  add(query_611024, "Version", newJString(Version))
  result = call_611023.call(nil, query_611024, nil, nil, nil)

var getDeleteAccountAlias* = Call_GetDeleteAccountAlias_611009(
    name: "getDeleteAccountAlias", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountAlias",
    validator: validate_GetDeleteAccountAlias_611010, base: "/",
    url: url_GetDeleteAccountAlias_611011, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccountPasswordPolicy_611057 = ref object of OpenApiRestCall_609589
proc url_PostDeleteAccountPasswordPolicy_611059(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAccountPasswordPolicy_611058(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611060 = query.getOrDefault("Action")
  valid_611060 = validateParameter(valid_611060, JString, required = true, default = newJString(
      "DeleteAccountPasswordPolicy"))
  if valid_611060 != nil:
    section.add "Action", valid_611060
  var valid_611061 = query.getOrDefault("Version")
  valid_611061 = validateParameter(valid_611061, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611061 != nil:
    section.add "Version", valid_611061
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611062 = header.getOrDefault("X-Amz-Signature")
  valid_611062 = validateParameter(valid_611062, JString, required = false,
                                 default = nil)
  if valid_611062 != nil:
    section.add "X-Amz-Signature", valid_611062
  var valid_611063 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611063 = validateParameter(valid_611063, JString, required = false,
                                 default = nil)
  if valid_611063 != nil:
    section.add "X-Amz-Content-Sha256", valid_611063
  var valid_611064 = header.getOrDefault("X-Amz-Date")
  valid_611064 = validateParameter(valid_611064, JString, required = false,
                                 default = nil)
  if valid_611064 != nil:
    section.add "X-Amz-Date", valid_611064
  var valid_611065 = header.getOrDefault("X-Amz-Credential")
  valid_611065 = validateParameter(valid_611065, JString, required = false,
                                 default = nil)
  if valid_611065 != nil:
    section.add "X-Amz-Credential", valid_611065
  var valid_611066 = header.getOrDefault("X-Amz-Security-Token")
  valid_611066 = validateParameter(valid_611066, JString, required = false,
                                 default = nil)
  if valid_611066 != nil:
    section.add "X-Amz-Security-Token", valid_611066
  var valid_611067 = header.getOrDefault("X-Amz-Algorithm")
  valid_611067 = validateParameter(valid_611067, JString, required = false,
                                 default = nil)
  if valid_611067 != nil:
    section.add "X-Amz-Algorithm", valid_611067
  var valid_611068 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611068 = validateParameter(valid_611068, JString, required = false,
                                 default = nil)
  if valid_611068 != nil:
    section.add "X-Amz-SignedHeaders", valid_611068
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611069: Call_PostDeleteAccountPasswordPolicy_611057;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  let valid = call_611069.validator(path, query, header, formData, body)
  let scheme = call_611069.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611069.url(scheme.get, call_611069.host, call_611069.base,
                         call_611069.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611069, url, valid)

proc call*(call_611070: Call_PostDeleteAccountPasswordPolicy_611057;
          Action: string = "DeleteAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccountPasswordPolicy
  ## Deletes the password policy for the AWS account. There are no parameters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611071 = newJObject()
  add(query_611071, "Action", newJString(Action))
  add(query_611071, "Version", newJString(Version))
  result = call_611070.call(nil, query_611071, nil, nil, nil)

var postDeleteAccountPasswordPolicy* = Call_PostDeleteAccountPasswordPolicy_611057(
    name: "postDeleteAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountPasswordPolicy",
    validator: validate_PostDeleteAccountPasswordPolicy_611058, base: "/",
    url: url_PostDeleteAccountPasswordPolicy_611059,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccountPasswordPolicy_611042 = ref object of OpenApiRestCall_609589
proc url_GetDeleteAccountPasswordPolicy_611044(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAccountPasswordPolicy_611043(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611045 = query.getOrDefault("Action")
  valid_611045 = validateParameter(valid_611045, JString, required = true, default = newJString(
      "DeleteAccountPasswordPolicy"))
  if valid_611045 != nil:
    section.add "Action", valid_611045
  var valid_611046 = query.getOrDefault("Version")
  valid_611046 = validateParameter(valid_611046, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611046 != nil:
    section.add "Version", valid_611046
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611047 = header.getOrDefault("X-Amz-Signature")
  valid_611047 = validateParameter(valid_611047, JString, required = false,
                                 default = nil)
  if valid_611047 != nil:
    section.add "X-Amz-Signature", valid_611047
  var valid_611048 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611048 = validateParameter(valid_611048, JString, required = false,
                                 default = nil)
  if valid_611048 != nil:
    section.add "X-Amz-Content-Sha256", valid_611048
  var valid_611049 = header.getOrDefault("X-Amz-Date")
  valid_611049 = validateParameter(valid_611049, JString, required = false,
                                 default = nil)
  if valid_611049 != nil:
    section.add "X-Amz-Date", valid_611049
  var valid_611050 = header.getOrDefault("X-Amz-Credential")
  valid_611050 = validateParameter(valid_611050, JString, required = false,
                                 default = nil)
  if valid_611050 != nil:
    section.add "X-Amz-Credential", valid_611050
  var valid_611051 = header.getOrDefault("X-Amz-Security-Token")
  valid_611051 = validateParameter(valid_611051, JString, required = false,
                                 default = nil)
  if valid_611051 != nil:
    section.add "X-Amz-Security-Token", valid_611051
  var valid_611052 = header.getOrDefault("X-Amz-Algorithm")
  valid_611052 = validateParameter(valid_611052, JString, required = false,
                                 default = nil)
  if valid_611052 != nil:
    section.add "X-Amz-Algorithm", valid_611052
  var valid_611053 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611053 = validateParameter(valid_611053, JString, required = false,
                                 default = nil)
  if valid_611053 != nil:
    section.add "X-Amz-SignedHeaders", valid_611053
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611054: Call_GetDeleteAccountPasswordPolicy_611042; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  let valid = call_611054.validator(path, query, header, formData, body)
  let scheme = call_611054.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611054.url(scheme.get, call_611054.host, call_611054.base,
                         call_611054.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611054, url, valid)

proc call*(call_611055: Call_GetDeleteAccountPasswordPolicy_611042;
          Action: string = "DeleteAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccountPasswordPolicy
  ## Deletes the password policy for the AWS account. There are no parameters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611056 = newJObject()
  add(query_611056, "Action", newJString(Action))
  add(query_611056, "Version", newJString(Version))
  result = call_611055.call(nil, query_611056, nil, nil, nil)

var getDeleteAccountPasswordPolicy* = Call_GetDeleteAccountPasswordPolicy_611042(
    name: "getDeleteAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountPasswordPolicy",
    validator: validate_GetDeleteAccountPasswordPolicy_611043, base: "/",
    url: url_GetDeleteAccountPasswordPolicy_611044,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGroup_611088 = ref object of OpenApiRestCall_609589
proc url_PostDeleteGroup_611090(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteGroup_611089(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611091 = query.getOrDefault("Action")
  valid_611091 = validateParameter(valid_611091, JString, required = true,
                                 default = newJString("DeleteGroup"))
  if valid_611091 != nil:
    section.add "Action", valid_611091
  var valid_611092 = query.getOrDefault("Version")
  valid_611092 = validateParameter(valid_611092, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611092 != nil:
    section.add "Version", valid_611092
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611093 = header.getOrDefault("X-Amz-Signature")
  valid_611093 = validateParameter(valid_611093, JString, required = false,
                                 default = nil)
  if valid_611093 != nil:
    section.add "X-Amz-Signature", valid_611093
  var valid_611094 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611094 = validateParameter(valid_611094, JString, required = false,
                                 default = nil)
  if valid_611094 != nil:
    section.add "X-Amz-Content-Sha256", valid_611094
  var valid_611095 = header.getOrDefault("X-Amz-Date")
  valid_611095 = validateParameter(valid_611095, JString, required = false,
                                 default = nil)
  if valid_611095 != nil:
    section.add "X-Amz-Date", valid_611095
  var valid_611096 = header.getOrDefault("X-Amz-Credential")
  valid_611096 = validateParameter(valid_611096, JString, required = false,
                                 default = nil)
  if valid_611096 != nil:
    section.add "X-Amz-Credential", valid_611096
  var valid_611097 = header.getOrDefault("X-Amz-Security-Token")
  valid_611097 = validateParameter(valid_611097, JString, required = false,
                                 default = nil)
  if valid_611097 != nil:
    section.add "X-Amz-Security-Token", valid_611097
  var valid_611098 = header.getOrDefault("X-Amz-Algorithm")
  valid_611098 = validateParameter(valid_611098, JString, required = false,
                                 default = nil)
  if valid_611098 != nil:
    section.add "X-Amz-Algorithm", valid_611098
  var valid_611099 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611099 = validateParameter(valid_611099, JString, required = false,
                                 default = nil)
  if valid_611099 != nil:
    section.add "X-Amz-SignedHeaders", valid_611099
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_611100 = formData.getOrDefault("GroupName")
  valid_611100 = validateParameter(valid_611100, JString, required = true,
                                 default = nil)
  if valid_611100 != nil:
    section.add "GroupName", valid_611100
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611101: Call_PostDeleteGroup_611088; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  let valid = call_611101.validator(path, query, header, formData, body)
  let scheme = call_611101.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611101.url(scheme.get, call_611101.host, call_611101.base,
                         call_611101.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611101, url, valid)

proc call*(call_611102: Call_PostDeleteGroup_611088; GroupName: string;
          Action: string = "DeleteGroup"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteGroup
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ##   GroupName: string (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611103 = newJObject()
  var formData_611104 = newJObject()
  add(formData_611104, "GroupName", newJString(GroupName))
  add(query_611103, "Action", newJString(Action))
  add(query_611103, "Version", newJString(Version))
  result = call_611102.call(nil, query_611103, nil, formData_611104, nil)

var postDeleteGroup* = Call_PostDeleteGroup_611088(name: "postDeleteGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteGroup", validator: validate_PostDeleteGroup_611089,
    base: "/", url: url_PostDeleteGroup_611090, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGroup_611072 = ref object of OpenApiRestCall_609589
proc url_GetDeleteGroup_611074(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteGroup_611073(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_611075 = query.getOrDefault("GroupName")
  valid_611075 = validateParameter(valid_611075, JString, required = true,
                                 default = nil)
  if valid_611075 != nil:
    section.add "GroupName", valid_611075
  var valid_611076 = query.getOrDefault("Action")
  valid_611076 = validateParameter(valid_611076, JString, required = true,
                                 default = newJString("DeleteGroup"))
  if valid_611076 != nil:
    section.add "Action", valid_611076
  var valid_611077 = query.getOrDefault("Version")
  valid_611077 = validateParameter(valid_611077, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611077 != nil:
    section.add "Version", valid_611077
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611078 = header.getOrDefault("X-Amz-Signature")
  valid_611078 = validateParameter(valid_611078, JString, required = false,
                                 default = nil)
  if valid_611078 != nil:
    section.add "X-Amz-Signature", valid_611078
  var valid_611079 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611079 = validateParameter(valid_611079, JString, required = false,
                                 default = nil)
  if valid_611079 != nil:
    section.add "X-Amz-Content-Sha256", valid_611079
  var valid_611080 = header.getOrDefault("X-Amz-Date")
  valid_611080 = validateParameter(valid_611080, JString, required = false,
                                 default = nil)
  if valid_611080 != nil:
    section.add "X-Amz-Date", valid_611080
  var valid_611081 = header.getOrDefault("X-Amz-Credential")
  valid_611081 = validateParameter(valid_611081, JString, required = false,
                                 default = nil)
  if valid_611081 != nil:
    section.add "X-Amz-Credential", valid_611081
  var valid_611082 = header.getOrDefault("X-Amz-Security-Token")
  valid_611082 = validateParameter(valid_611082, JString, required = false,
                                 default = nil)
  if valid_611082 != nil:
    section.add "X-Amz-Security-Token", valid_611082
  var valid_611083 = header.getOrDefault("X-Amz-Algorithm")
  valid_611083 = validateParameter(valid_611083, JString, required = false,
                                 default = nil)
  if valid_611083 != nil:
    section.add "X-Amz-Algorithm", valid_611083
  var valid_611084 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611084 = validateParameter(valid_611084, JString, required = false,
                                 default = nil)
  if valid_611084 != nil:
    section.add "X-Amz-SignedHeaders", valid_611084
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611085: Call_GetDeleteGroup_611072; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  let valid = call_611085.validator(path, query, header, formData, body)
  let scheme = call_611085.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611085.url(scheme.get, call_611085.host, call_611085.base,
                         call_611085.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611085, url, valid)

proc call*(call_611086: Call_GetDeleteGroup_611072; GroupName: string;
          Action: string = "DeleteGroup"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteGroup
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ##   GroupName: string (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611087 = newJObject()
  add(query_611087, "GroupName", newJString(GroupName))
  add(query_611087, "Action", newJString(Action))
  add(query_611087, "Version", newJString(Version))
  result = call_611086.call(nil, query_611087, nil, nil, nil)

var getDeleteGroup* = Call_GetDeleteGroup_611072(name: "getDeleteGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteGroup", validator: validate_GetDeleteGroup_611073,
    base: "/", url: url_GetDeleteGroup_611074, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGroupPolicy_611122 = ref object of OpenApiRestCall_609589
proc url_PostDeleteGroupPolicy_611124(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteGroupPolicy_611123(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611125 = query.getOrDefault("Action")
  valid_611125 = validateParameter(valid_611125, JString, required = true,
                                 default = newJString("DeleteGroupPolicy"))
  if valid_611125 != nil:
    section.add "Action", valid_611125
  var valid_611126 = query.getOrDefault("Version")
  valid_611126 = validateParameter(valid_611126, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611126 != nil:
    section.add "Version", valid_611126
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611127 = header.getOrDefault("X-Amz-Signature")
  valid_611127 = validateParameter(valid_611127, JString, required = false,
                                 default = nil)
  if valid_611127 != nil:
    section.add "X-Amz-Signature", valid_611127
  var valid_611128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611128 = validateParameter(valid_611128, JString, required = false,
                                 default = nil)
  if valid_611128 != nil:
    section.add "X-Amz-Content-Sha256", valid_611128
  var valid_611129 = header.getOrDefault("X-Amz-Date")
  valid_611129 = validateParameter(valid_611129, JString, required = false,
                                 default = nil)
  if valid_611129 != nil:
    section.add "X-Amz-Date", valid_611129
  var valid_611130 = header.getOrDefault("X-Amz-Credential")
  valid_611130 = validateParameter(valid_611130, JString, required = false,
                                 default = nil)
  if valid_611130 != nil:
    section.add "X-Amz-Credential", valid_611130
  var valid_611131 = header.getOrDefault("X-Amz-Security-Token")
  valid_611131 = validateParameter(valid_611131, JString, required = false,
                                 default = nil)
  if valid_611131 != nil:
    section.add "X-Amz-Security-Token", valid_611131
  var valid_611132 = header.getOrDefault("X-Amz-Algorithm")
  valid_611132 = validateParameter(valid_611132, JString, required = false,
                                 default = nil)
  if valid_611132 != nil:
    section.add "X-Amz-Algorithm", valid_611132
  var valid_611133 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611133 = validateParameter(valid_611133, JString, required = false,
                                 default = nil)
  if valid_611133 != nil:
    section.add "X-Amz-SignedHeaders", valid_611133
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_611134 = formData.getOrDefault("GroupName")
  valid_611134 = validateParameter(valid_611134, JString, required = true,
                                 default = nil)
  if valid_611134 != nil:
    section.add "GroupName", valid_611134
  var valid_611135 = formData.getOrDefault("PolicyName")
  valid_611135 = validateParameter(valid_611135, JString, required = true,
                                 default = nil)
  if valid_611135 != nil:
    section.add "PolicyName", valid_611135
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611136: Call_PostDeleteGroupPolicy_611122; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611136.validator(path, query, header, formData, body)
  let scheme = call_611136.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611136.url(scheme.get, call_611136.host, call_611136.base,
                         call_611136.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611136, url, valid)

proc call*(call_611137: Call_PostDeleteGroupPolicy_611122; GroupName: string;
          PolicyName: string; Action: string = "DeleteGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteGroupPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_611138 = newJObject()
  var formData_611139 = newJObject()
  add(formData_611139, "GroupName", newJString(GroupName))
  add(query_611138, "Action", newJString(Action))
  add(query_611138, "Version", newJString(Version))
  add(formData_611139, "PolicyName", newJString(PolicyName))
  result = call_611137.call(nil, query_611138, nil, formData_611139, nil)

var postDeleteGroupPolicy* = Call_PostDeleteGroupPolicy_611122(
    name: "postDeleteGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteGroupPolicy",
    validator: validate_PostDeleteGroupPolicy_611123, base: "/",
    url: url_PostDeleteGroupPolicy_611124, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGroupPolicy_611105 = ref object of OpenApiRestCall_609589
proc url_GetDeleteGroupPolicy_611107(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteGroupPolicy_611106(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_611108 = query.getOrDefault("GroupName")
  valid_611108 = validateParameter(valid_611108, JString, required = true,
                                 default = nil)
  if valid_611108 != nil:
    section.add "GroupName", valid_611108
  var valid_611109 = query.getOrDefault("PolicyName")
  valid_611109 = validateParameter(valid_611109, JString, required = true,
                                 default = nil)
  if valid_611109 != nil:
    section.add "PolicyName", valid_611109
  var valid_611110 = query.getOrDefault("Action")
  valid_611110 = validateParameter(valid_611110, JString, required = true,
                                 default = newJString("DeleteGroupPolicy"))
  if valid_611110 != nil:
    section.add "Action", valid_611110
  var valid_611111 = query.getOrDefault("Version")
  valid_611111 = validateParameter(valid_611111, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611111 != nil:
    section.add "Version", valid_611111
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611112 = header.getOrDefault("X-Amz-Signature")
  valid_611112 = validateParameter(valid_611112, JString, required = false,
                                 default = nil)
  if valid_611112 != nil:
    section.add "X-Amz-Signature", valid_611112
  var valid_611113 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611113 = validateParameter(valid_611113, JString, required = false,
                                 default = nil)
  if valid_611113 != nil:
    section.add "X-Amz-Content-Sha256", valid_611113
  var valid_611114 = header.getOrDefault("X-Amz-Date")
  valid_611114 = validateParameter(valid_611114, JString, required = false,
                                 default = nil)
  if valid_611114 != nil:
    section.add "X-Amz-Date", valid_611114
  var valid_611115 = header.getOrDefault("X-Amz-Credential")
  valid_611115 = validateParameter(valid_611115, JString, required = false,
                                 default = nil)
  if valid_611115 != nil:
    section.add "X-Amz-Credential", valid_611115
  var valid_611116 = header.getOrDefault("X-Amz-Security-Token")
  valid_611116 = validateParameter(valid_611116, JString, required = false,
                                 default = nil)
  if valid_611116 != nil:
    section.add "X-Amz-Security-Token", valid_611116
  var valid_611117 = header.getOrDefault("X-Amz-Algorithm")
  valid_611117 = validateParameter(valid_611117, JString, required = false,
                                 default = nil)
  if valid_611117 != nil:
    section.add "X-Amz-Algorithm", valid_611117
  var valid_611118 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611118 = validateParameter(valid_611118, JString, required = false,
                                 default = nil)
  if valid_611118 != nil:
    section.add "X-Amz-SignedHeaders", valid_611118
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611119: Call_GetDeleteGroupPolicy_611105; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611119.validator(path, query, header, formData, body)
  let scheme = call_611119.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611119.url(scheme.get, call_611119.host, call_611119.base,
                         call_611119.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611119, url, valid)

proc call*(call_611120: Call_GetDeleteGroupPolicy_611105; GroupName: string;
          PolicyName: string; Action: string = "DeleteGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteGroupPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611121 = newJObject()
  add(query_611121, "GroupName", newJString(GroupName))
  add(query_611121, "PolicyName", newJString(PolicyName))
  add(query_611121, "Action", newJString(Action))
  add(query_611121, "Version", newJString(Version))
  result = call_611120.call(nil, query_611121, nil, nil, nil)

var getDeleteGroupPolicy* = Call_GetDeleteGroupPolicy_611105(
    name: "getDeleteGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteGroupPolicy",
    validator: validate_GetDeleteGroupPolicy_611106, base: "/",
    url: url_GetDeleteGroupPolicy_611107, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteInstanceProfile_611156 = ref object of OpenApiRestCall_609589
proc url_PostDeleteInstanceProfile_611158(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteInstanceProfile_611157(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611159 = query.getOrDefault("Action")
  valid_611159 = validateParameter(valid_611159, JString, required = true,
                                 default = newJString("DeleteInstanceProfile"))
  if valid_611159 != nil:
    section.add "Action", valid_611159
  var valid_611160 = query.getOrDefault("Version")
  valid_611160 = validateParameter(valid_611160, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611160 != nil:
    section.add "Version", valid_611160
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611161 = header.getOrDefault("X-Amz-Signature")
  valid_611161 = validateParameter(valid_611161, JString, required = false,
                                 default = nil)
  if valid_611161 != nil:
    section.add "X-Amz-Signature", valid_611161
  var valid_611162 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611162 = validateParameter(valid_611162, JString, required = false,
                                 default = nil)
  if valid_611162 != nil:
    section.add "X-Amz-Content-Sha256", valid_611162
  var valid_611163 = header.getOrDefault("X-Amz-Date")
  valid_611163 = validateParameter(valid_611163, JString, required = false,
                                 default = nil)
  if valid_611163 != nil:
    section.add "X-Amz-Date", valid_611163
  var valid_611164 = header.getOrDefault("X-Amz-Credential")
  valid_611164 = validateParameter(valid_611164, JString, required = false,
                                 default = nil)
  if valid_611164 != nil:
    section.add "X-Amz-Credential", valid_611164
  var valid_611165 = header.getOrDefault("X-Amz-Security-Token")
  valid_611165 = validateParameter(valid_611165, JString, required = false,
                                 default = nil)
  if valid_611165 != nil:
    section.add "X-Amz-Security-Token", valid_611165
  var valid_611166 = header.getOrDefault("X-Amz-Algorithm")
  valid_611166 = validateParameter(valid_611166, JString, required = false,
                                 default = nil)
  if valid_611166 != nil:
    section.add "X-Amz-Algorithm", valid_611166
  var valid_611167 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611167 = validateParameter(valid_611167, JString, required = false,
                                 default = nil)
  if valid_611167 != nil:
    section.add "X-Amz-SignedHeaders", valid_611167
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_611168 = formData.getOrDefault("InstanceProfileName")
  valid_611168 = validateParameter(valid_611168, JString, required = true,
                                 default = nil)
  if valid_611168 != nil:
    section.add "InstanceProfileName", valid_611168
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611169: Call_PostDeleteInstanceProfile_611156; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_611169.validator(path, query, header, formData, body)
  let scheme = call_611169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611169.url(scheme.get, call_611169.host, call_611169.base,
                         call_611169.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611169, url, valid)

proc call*(call_611170: Call_PostDeleteInstanceProfile_611156;
          InstanceProfileName: string; Action: string = "DeleteInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteInstanceProfile
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_611171 = newJObject()
  var formData_611172 = newJObject()
  add(query_611171, "Action", newJString(Action))
  add(formData_611172, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_611171, "Version", newJString(Version))
  result = call_611170.call(nil, query_611171, nil, formData_611172, nil)

var postDeleteInstanceProfile* = Call_PostDeleteInstanceProfile_611156(
    name: "postDeleteInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteInstanceProfile",
    validator: validate_PostDeleteInstanceProfile_611157, base: "/",
    url: url_PostDeleteInstanceProfile_611158,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteInstanceProfile_611140 = ref object of OpenApiRestCall_609589
proc url_GetDeleteInstanceProfile_611142(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteInstanceProfile_611141(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_611143 = query.getOrDefault("Action")
  valid_611143 = validateParameter(valid_611143, JString, required = true,
                                 default = newJString("DeleteInstanceProfile"))
  if valid_611143 != nil:
    section.add "Action", valid_611143
  var valid_611144 = query.getOrDefault("InstanceProfileName")
  valid_611144 = validateParameter(valid_611144, JString, required = true,
                                 default = nil)
  if valid_611144 != nil:
    section.add "InstanceProfileName", valid_611144
  var valid_611145 = query.getOrDefault("Version")
  valid_611145 = validateParameter(valid_611145, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611145 != nil:
    section.add "Version", valid_611145
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611146 = header.getOrDefault("X-Amz-Signature")
  valid_611146 = validateParameter(valid_611146, JString, required = false,
                                 default = nil)
  if valid_611146 != nil:
    section.add "X-Amz-Signature", valid_611146
  var valid_611147 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611147 = validateParameter(valid_611147, JString, required = false,
                                 default = nil)
  if valid_611147 != nil:
    section.add "X-Amz-Content-Sha256", valid_611147
  var valid_611148 = header.getOrDefault("X-Amz-Date")
  valid_611148 = validateParameter(valid_611148, JString, required = false,
                                 default = nil)
  if valid_611148 != nil:
    section.add "X-Amz-Date", valid_611148
  var valid_611149 = header.getOrDefault("X-Amz-Credential")
  valid_611149 = validateParameter(valid_611149, JString, required = false,
                                 default = nil)
  if valid_611149 != nil:
    section.add "X-Amz-Credential", valid_611149
  var valid_611150 = header.getOrDefault("X-Amz-Security-Token")
  valid_611150 = validateParameter(valid_611150, JString, required = false,
                                 default = nil)
  if valid_611150 != nil:
    section.add "X-Amz-Security-Token", valid_611150
  var valid_611151 = header.getOrDefault("X-Amz-Algorithm")
  valid_611151 = validateParameter(valid_611151, JString, required = false,
                                 default = nil)
  if valid_611151 != nil:
    section.add "X-Amz-Algorithm", valid_611151
  var valid_611152 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611152 = validateParameter(valid_611152, JString, required = false,
                                 default = nil)
  if valid_611152 != nil:
    section.add "X-Amz-SignedHeaders", valid_611152
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611153: Call_GetDeleteInstanceProfile_611140; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_611153.validator(path, query, header, formData, body)
  let scheme = call_611153.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611153.url(scheme.get, call_611153.host, call_611153.base,
                         call_611153.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611153, url, valid)

proc call*(call_611154: Call_GetDeleteInstanceProfile_611140;
          InstanceProfileName: string; Action: string = "DeleteInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteInstanceProfile
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_611155 = newJObject()
  add(query_611155, "Action", newJString(Action))
  add(query_611155, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_611155, "Version", newJString(Version))
  result = call_611154.call(nil, query_611155, nil, nil, nil)

var getDeleteInstanceProfile* = Call_GetDeleteInstanceProfile_611140(
    name: "getDeleteInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteInstanceProfile",
    validator: validate_GetDeleteInstanceProfile_611141, base: "/",
    url: url_GetDeleteInstanceProfile_611142, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLoginProfile_611189 = ref object of OpenApiRestCall_609589
proc url_PostDeleteLoginProfile_611191(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteLoginProfile_611190(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611192 = query.getOrDefault("Action")
  valid_611192 = validateParameter(valid_611192, JString, required = true,
                                 default = newJString("DeleteLoginProfile"))
  if valid_611192 != nil:
    section.add "Action", valid_611192
  var valid_611193 = query.getOrDefault("Version")
  valid_611193 = validateParameter(valid_611193, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611193 != nil:
    section.add "Version", valid_611193
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611194 = header.getOrDefault("X-Amz-Signature")
  valid_611194 = validateParameter(valid_611194, JString, required = false,
                                 default = nil)
  if valid_611194 != nil:
    section.add "X-Amz-Signature", valid_611194
  var valid_611195 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611195 = validateParameter(valid_611195, JString, required = false,
                                 default = nil)
  if valid_611195 != nil:
    section.add "X-Amz-Content-Sha256", valid_611195
  var valid_611196 = header.getOrDefault("X-Amz-Date")
  valid_611196 = validateParameter(valid_611196, JString, required = false,
                                 default = nil)
  if valid_611196 != nil:
    section.add "X-Amz-Date", valid_611196
  var valid_611197 = header.getOrDefault("X-Amz-Credential")
  valid_611197 = validateParameter(valid_611197, JString, required = false,
                                 default = nil)
  if valid_611197 != nil:
    section.add "X-Amz-Credential", valid_611197
  var valid_611198 = header.getOrDefault("X-Amz-Security-Token")
  valid_611198 = validateParameter(valid_611198, JString, required = false,
                                 default = nil)
  if valid_611198 != nil:
    section.add "X-Amz-Security-Token", valid_611198
  var valid_611199 = header.getOrDefault("X-Amz-Algorithm")
  valid_611199 = validateParameter(valid_611199, JString, required = false,
                                 default = nil)
  if valid_611199 != nil:
    section.add "X-Amz-Algorithm", valid_611199
  var valid_611200 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611200 = validateParameter(valid_611200, JString, required = false,
                                 default = nil)
  if valid_611200 != nil:
    section.add "X-Amz-SignedHeaders", valid_611200
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_611201 = formData.getOrDefault("UserName")
  valid_611201 = validateParameter(valid_611201, JString, required = true,
                                 default = nil)
  if valid_611201 != nil:
    section.add "UserName", valid_611201
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611202: Call_PostDeleteLoginProfile_611189; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  let valid = call_611202.validator(path, query, header, formData, body)
  let scheme = call_611202.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611202.url(scheme.get, call_611202.host, call_611202.base,
                         call_611202.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611202, url, valid)

proc call*(call_611203: Call_PostDeleteLoginProfile_611189; UserName: string;
          Action: string = "DeleteLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteLoginProfile
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611204 = newJObject()
  var formData_611205 = newJObject()
  add(formData_611205, "UserName", newJString(UserName))
  add(query_611204, "Action", newJString(Action))
  add(query_611204, "Version", newJString(Version))
  result = call_611203.call(nil, query_611204, nil, formData_611205, nil)

var postDeleteLoginProfile* = Call_PostDeleteLoginProfile_611189(
    name: "postDeleteLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteLoginProfile",
    validator: validate_PostDeleteLoginProfile_611190, base: "/",
    url: url_PostDeleteLoginProfile_611191, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLoginProfile_611173 = ref object of OpenApiRestCall_609589
proc url_GetDeleteLoginProfile_611175(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteLoginProfile_611174(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_611176 = query.getOrDefault("UserName")
  valid_611176 = validateParameter(valid_611176, JString, required = true,
                                 default = nil)
  if valid_611176 != nil:
    section.add "UserName", valid_611176
  var valid_611177 = query.getOrDefault("Action")
  valid_611177 = validateParameter(valid_611177, JString, required = true,
                                 default = newJString("DeleteLoginProfile"))
  if valid_611177 != nil:
    section.add "Action", valid_611177
  var valid_611178 = query.getOrDefault("Version")
  valid_611178 = validateParameter(valid_611178, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611178 != nil:
    section.add "Version", valid_611178
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611179 = header.getOrDefault("X-Amz-Signature")
  valid_611179 = validateParameter(valid_611179, JString, required = false,
                                 default = nil)
  if valid_611179 != nil:
    section.add "X-Amz-Signature", valid_611179
  var valid_611180 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611180 = validateParameter(valid_611180, JString, required = false,
                                 default = nil)
  if valid_611180 != nil:
    section.add "X-Amz-Content-Sha256", valid_611180
  var valid_611181 = header.getOrDefault("X-Amz-Date")
  valid_611181 = validateParameter(valid_611181, JString, required = false,
                                 default = nil)
  if valid_611181 != nil:
    section.add "X-Amz-Date", valid_611181
  var valid_611182 = header.getOrDefault("X-Amz-Credential")
  valid_611182 = validateParameter(valid_611182, JString, required = false,
                                 default = nil)
  if valid_611182 != nil:
    section.add "X-Amz-Credential", valid_611182
  var valid_611183 = header.getOrDefault("X-Amz-Security-Token")
  valid_611183 = validateParameter(valid_611183, JString, required = false,
                                 default = nil)
  if valid_611183 != nil:
    section.add "X-Amz-Security-Token", valid_611183
  var valid_611184 = header.getOrDefault("X-Amz-Algorithm")
  valid_611184 = validateParameter(valid_611184, JString, required = false,
                                 default = nil)
  if valid_611184 != nil:
    section.add "X-Amz-Algorithm", valid_611184
  var valid_611185 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611185 = validateParameter(valid_611185, JString, required = false,
                                 default = nil)
  if valid_611185 != nil:
    section.add "X-Amz-SignedHeaders", valid_611185
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611186: Call_GetDeleteLoginProfile_611173; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  let valid = call_611186.validator(path, query, header, formData, body)
  let scheme = call_611186.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611186.url(scheme.get, call_611186.host, call_611186.base,
                         call_611186.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611186, url, valid)

proc call*(call_611187: Call_GetDeleteLoginProfile_611173; UserName: string;
          Action: string = "DeleteLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteLoginProfile
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611188 = newJObject()
  add(query_611188, "UserName", newJString(UserName))
  add(query_611188, "Action", newJString(Action))
  add(query_611188, "Version", newJString(Version))
  result = call_611187.call(nil, query_611188, nil, nil, nil)

var getDeleteLoginProfile* = Call_GetDeleteLoginProfile_611173(
    name: "getDeleteLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteLoginProfile",
    validator: validate_GetDeleteLoginProfile_611174, base: "/",
    url: url_GetDeleteLoginProfile_611175, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteOpenIDConnectProvider_611222 = ref object of OpenApiRestCall_609589
proc url_PostDeleteOpenIDConnectProvider_611224(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteOpenIDConnectProvider_611223(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611225 = query.getOrDefault("Action")
  valid_611225 = validateParameter(valid_611225, JString, required = true, default = newJString(
      "DeleteOpenIDConnectProvider"))
  if valid_611225 != nil:
    section.add "Action", valid_611225
  var valid_611226 = query.getOrDefault("Version")
  valid_611226 = validateParameter(valid_611226, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611226 != nil:
    section.add "Version", valid_611226
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611227 = header.getOrDefault("X-Amz-Signature")
  valid_611227 = validateParameter(valid_611227, JString, required = false,
                                 default = nil)
  if valid_611227 != nil:
    section.add "X-Amz-Signature", valid_611227
  var valid_611228 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611228 = validateParameter(valid_611228, JString, required = false,
                                 default = nil)
  if valid_611228 != nil:
    section.add "X-Amz-Content-Sha256", valid_611228
  var valid_611229 = header.getOrDefault("X-Amz-Date")
  valid_611229 = validateParameter(valid_611229, JString, required = false,
                                 default = nil)
  if valid_611229 != nil:
    section.add "X-Amz-Date", valid_611229
  var valid_611230 = header.getOrDefault("X-Amz-Credential")
  valid_611230 = validateParameter(valid_611230, JString, required = false,
                                 default = nil)
  if valid_611230 != nil:
    section.add "X-Amz-Credential", valid_611230
  var valid_611231 = header.getOrDefault("X-Amz-Security-Token")
  valid_611231 = validateParameter(valid_611231, JString, required = false,
                                 default = nil)
  if valid_611231 != nil:
    section.add "X-Amz-Security-Token", valid_611231
  var valid_611232 = header.getOrDefault("X-Amz-Algorithm")
  valid_611232 = validateParameter(valid_611232, JString, required = false,
                                 default = nil)
  if valid_611232 != nil:
    section.add "X-Amz-Algorithm", valid_611232
  var valid_611233 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611233 = validateParameter(valid_611233, JString, required = false,
                                 default = nil)
  if valid_611233 != nil:
    section.add "X-Amz-SignedHeaders", valid_611233
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_611234 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_611234 = validateParameter(valid_611234, JString, required = true,
                                 default = nil)
  if valid_611234 != nil:
    section.add "OpenIDConnectProviderArn", valid_611234
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611235: Call_PostDeleteOpenIDConnectProvider_611222;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  let valid = call_611235.validator(path, query, header, formData, body)
  let scheme = call_611235.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611235.url(scheme.get, call_611235.host, call_611235.base,
                         call_611235.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611235, url, valid)

proc call*(call_611236: Call_PostDeleteOpenIDConnectProvider_611222;
          OpenIDConnectProviderArn: string;
          Action: string = "DeleteOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteOpenIDConnectProvider
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_611237 = newJObject()
  var formData_611238 = newJObject()
  add(query_611237, "Action", newJString(Action))
  add(query_611237, "Version", newJString(Version))
  add(formData_611238, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_611236.call(nil, query_611237, nil, formData_611238, nil)

var postDeleteOpenIDConnectProvider* = Call_PostDeleteOpenIDConnectProvider_611222(
    name: "postDeleteOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteOpenIDConnectProvider",
    validator: validate_PostDeleteOpenIDConnectProvider_611223, base: "/",
    url: url_PostDeleteOpenIDConnectProvider_611224,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteOpenIDConnectProvider_611206 = ref object of OpenApiRestCall_609589
proc url_GetDeleteOpenIDConnectProvider_611208(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteOpenIDConnectProvider_611207(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_611209 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_611209 = validateParameter(valid_611209, JString, required = true,
                                 default = nil)
  if valid_611209 != nil:
    section.add "OpenIDConnectProviderArn", valid_611209
  var valid_611210 = query.getOrDefault("Action")
  valid_611210 = validateParameter(valid_611210, JString, required = true, default = newJString(
      "DeleteOpenIDConnectProvider"))
  if valid_611210 != nil:
    section.add "Action", valid_611210
  var valid_611211 = query.getOrDefault("Version")
  valid_611211 = validateParameter(valid_611211, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611211 != nil:
    section.add "Version", valid_611211
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611212 = header.getOrDefault("X-Amz-Signature")
  valid_611212 = validateParameter(valid_611212, JString, required = false,
                                 default = nil)
  if valid_611212 != nil:
    section.add "X-Amz-Signature", valid_611212
  var valid_611213 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611213 = validateParameter(valid_611213, JString, required = false,
                                 default = nil)
  if valid_611213 != nil:
    section.add "X-Amz-Content-Sha256", valid_611213
  var valid_611214 = header.getOrDefault("X-Amz-Date")
  valid_611214 = validateParameter(valid_611214, JString, required = false,
                                 default = nil)
  if valid_611214 != nil:
    section.add "X-Amz-Date", valid_611214
  var valid_611215 = header.getOrDefault("X-Amz-Credential")
  valid_611215 = validateParameter(valid_611215, JString, required = false,
                                 default = nil)
  if valid_611215 != nil:
    section.add "X-Amz-Credential", valid_611215
  var valid_611216 = header.getOrDefault("X-Amz-Security-Token")
  valid_611216 = validateParameter(valid_611216, JString, required = false,
                                 default = nil)
  if valid_611216 != nil:
    section.add "X-Amz-Security-Token", valid_611216
  var valid_611217 = header.getOrDefault("X-Amz-Algorithm")
  valid_611217 = validateParameter(valid_611217, JString, required = false,
                                 default = nil)
  if valid_611217 != nil:
    section.add "X-Amz-Algorithm", valid_611217
  var valid_611218 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611218 = validateParameter(valid_611218, JString, required = false,
                                 default = nil)
  if valid_611218 != nil:
    section.add "X-Amz-SignedHeaders", valid_611218
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611219: Call_GetDeleteOpenIDConnectProvider_611206; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  let valid = call_611219.validator(path, query, header, formData, body)
  let scheme = call_611219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611219.url(scheme.get, call_611219.host, call_611219.base,
                         call_611219.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611219, url, valid)

proc call*(call_611220: Call_GetDeleteOpenIDConnectProvider_611206;
          OpenIDConnectProviderArn: string;
          Action: string = "DeleteOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteOpenIDConnectProvider
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611221 = newJObject()
  add(query_611221, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_611221, "Action", newJString(Action))
  add(query_611221, "Version", newJString(Version))
  result = call_611220.call(nil, query_611221, nil, nil, nil)

var getDeleteOpenIDConnectProvider* = Call_GetDeleteOpenIDConnectProvider_611206(
    name: "getDeleteOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteOpenIDConnectProvider",
    validator: validate_GetDeleteOpenIDConnectProvider_611207, base: "/",
    url: url_GetDeleteOpenIDConnectProvider_611208,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicy_611255 = ref object of OpenApiRestCall_609589
proc url_PostDeletePolicy_611257(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeletePolicy_611256(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611258 = query.getOrDefault("Action")
  valid_611258 = validateParameter(valid_611258, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_611258 != nil:
    section.add "Action", valid_611258
  var valid_611259 = query.getOrDefault("Version")
  valid_611259 = validateParameter(valid_611259, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611259 != nil:
    section.add "Version", valid_611259
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611260 = header.getOrDefault("X-Amz-Signature")
  valid_611260 = validateParameter(valid_611260, JString, required = false,
                                 default = nil)
  if valid_611260 != nil:
    section.add "X-Amz-Signature", valid_611260
  var valid_611261 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611261 = validateParameter(valid_611261, JString, required = false,
                                 default = nil)
  if valid_611261 != nil:
    section.add "X-Amz-Content-Sha256", valid_611261
  var valid_611262 = header.getOrDefault("X-Amz-Date")
  valid_611262 = validateParameter(valid_611262, JString, required = false,
                                 default = nil)
  if valid_611262 != nil:
    section.add "X-Amz-Date", valid_611262
  var valid_611263 = header.getOrDefault("X-Amz-Credential")
  valid_611263 = validateParameter(valid_611263, JString, required = false,
                                 default = nil)
  if valid_611263 != nil:
    section.add "X-Amz-Credential", valid_611263
  var valid_611264 = header.getOrDefault("X-Amz-Security-Token")
  valid_611264 = validateParameter(valid_611264, JString, required = false,
                                 default = nil)
  if valid_611264 != nil:
    section.add "X-Amz-Security-Token", valid_611264
  var valid_611265 = header.getOrDefault("X-Amz-Algorithm")
  valid_611265 = validateParameter(valid_611265, JString, required = false,
                                 default = nil)
  if valid_611265 != nil:
    section.add "X-Amz-Algorithm", valid_611265
  var valid_611266 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611266 = validateParameter(valid_611266, JString, required = false,
                                 default = nil)
  if valid_611266 != nil:
    section.add "X-Amz-SignedHeaders", valid_611266
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_611267 = formData.getOrDefault("PolicyArn")
  valid_611267 = validateParameter(valid_611267, JString, required = true,
                                 default = nil)
  if valid_611267 != nil:
    section.add "PolicyArn", valid_611267
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611268: Call_PostDeletePolicy_611255; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611268.validator(path, query, header, formData, body)
  let scheme = call_611268.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611268.url(scheme.get, call_611268.host, call_611268.base,
                         call_611268.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611268, url, valid)

proc call*(call_611269: Call_PostDeletePolicy_611255; PolicyArn: string;
          Action: string = "DeletePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postDeletePolicy
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611270 = newJObject()
  var formData_611271 = newJObject()
  add(formData_611271, "PolicyArn", newJString(PolicyArn))
  add(query_611270, "Action", newJString(Action))
  add(query_611270, "Version", newJString(Version))
  result = call_611269.call(nil, query_611270, nil, formData_611271, nil)

var postDeletePolicy* = Call_PostDeletePolicy_611255(name: "postDeletePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_PostDeletePolicy_611256,
    base: "/", url: url_PostDeletePolicy_611257,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicy_611239 = ref object of OpenApiRestCall_609589
proc url_GetDeletePolicy_611241(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeletePolicy_611240(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_611242 = query.getOrDefault("PolicyArn")
  valid_611242 = validateParameter(valid_611242, JString, required = true,
                                 default = nil)
  if valid_611242 != nil:
    section.add "PolicyArn", valid_611242
  var valid_611243 = query.getOrDefault("Action")
  valid_611243 = validateParameter(valid_611243, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_611243 != nil:
    section.add "Action", valid_611243
  var valid_611244 = query.getOrDefault("Version")
  valid_611244 = validateParameter(valid_611244, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611244 != nil:
    section.add "Version", valid_611244
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611245 = header.getOrDefault("X-Amz-Signature")
  valid_611245 = validateParameter(valid_611245, JString, required = false,
                                 default = nil)
  if valid_611245 != nil:
    section.add "X-Amz-Signature", valid_611245
  var valid_611246 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611246 = validateParameter(valid_611246, JString, required = false,
                                 default = nil)
  if valid_611246 != nil:
    section.add "X-Amz-Content-Sha256", valid_611246
  var valid_611247 = header.getOrDefault("X-Amz-Date")
  valid_611247 = validateParameter(valid_611247, JString, required = false,
                                 default = nil)
  if valid_611247 != nil:
    section.add "X-Amz-Date", valid_611247
  var valid_611248 = header.getOrDefault("X-Amz-Credential")
  valid_611248 = validateParameter(valid_611248, JString, required = false,
                                 default = nil)
  if valid_611248 != nil:
    section.add "X-Amz-Credential", valid_611248
  var valid_611249 = header.getOrDefault("X-Amz-Security-Token")
  valid_611249 = validateParameter(valid_611249, JString, required = false,
                                 default = nil)
  if valid_611249 != nil:
    section.add "X-Amz-Security-Token", valid_611249
  var valid_611250 = header.getOrDefault("X-Amz-Algorithm")
  valid_611250 = validateParameter(valid_611250, JString, required = false,
                                 default = nil)
  if valid_611250 != nil:
    section.add "X-Amz-Algorithm", valid_611250
  var valid_611251 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611251 = validateParameter(valid_611251, JString, required = false,
                                 default = nil)
  if valid_611251 != nil:
    section.add "X-Amz-SignedHeaders", valid_611251
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611252: Call_GetDeletePolicy_611239; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611252.validator(path, query, header, formData, body)
  let scheme = call_611252.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611252.url(scheme.get, call_611252.host, call_611252.base,
                         call_611252.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611252, url, valid)

proc call*(call_611253: Call_GetDeletePolicy_611239; PolicyArn: string;
          Action: string = "DeletePolicy"; Version: string = "2010-05-08"): Recallable =
  ## getDeletePolicy
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611254 = newJObject()
  add(query_611254, "PolicyArn", newJString(PolicyArn))
  add(query_611254, "Action", newJString(Action))
  add(query_611254, "Version", newJString(Version))
  result = call_611253.call(nil, query_611254, nil, nil, nil)

var getDeletePolicy* = Call_GetDeletePolicy_611239(name: "getDeletePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_GetDeletePolicy_611240,
    base: "/", url: url_GetDeletePolicy_611241, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicyVersion_611289 = ref object of OpenApiRestCall_609589
proc url_PostDeletePolicyVersion_611291(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeletePolicyVersion_611290(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611292 = query.getOrDefault("Action")
  valid_611292 = validateParameter(valid_611292, JString, required = true,
                                 default = newJString("DeletePolicyVersion"))
  if valid_611292 != nil:
    section.add "Action", valid_611292
  var valid_611293 = query.getOrDefault("Version")
  valid_611293 = validateParameter(valid_611293, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611293 != nil:
    section.add "Version", valid_611293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611294 = header.getOrDefault("X-Amz-Signature")
  valid_611294 = validateParameter(valid_611294, JString, required = false,
                                 default = nil)
  if valid_611294 != nil:
    section.add "X-Amz-Signature", valid_611294
  var valid_611295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611295 = validateParameter(valid_611295, JString, required = false,
                                 default = nil)
  if valid_611295 != nil:
    section.add "X-Amz-Content-Sha256", valid_611295
  var valid_611296 = header.getOrDefault("X-Amz-Date")
  valid_611296 = validateParameter(valid_611296, JString, required = false,
                                 default = nil)
  if valid_611296 != nil:
    section.add "X-Amz-Date", valid_611296
  var valid_611297 = header.getOrDefault("X-Amz-Credential")
  valid_611297 = validateParameter(valid_611297, JString, required = false,
                                 default = nil)
  if valid_611297 != nil:
    section.add "X-Amz-Credential", valid_611297
  var valid_611298 = header.getOrDefault("X-Amz-Security-Token")
  valid_611298 = validateParameter(valid_611298, JString, required = false,
                                 default = nil)
  if valid_611298 != nil:
    section.add "X-Amz-Security-Token", valid_611298
  var valid_611299 = header.getOrDefault("X-Amz-Algorithm")
  valid_611299 = validateParameter(valid_611299, JString, required = false,
                                 default = nil)
  if valid_611299 != nil:
    section.add "X-Amz-Algorithm", valid_611299
  var valid_611300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611300 = validateParameter(valid_611300, JString, required = false,
                                 default = nil)
  if valid_611300 != nil:
    section.add "X-Amz-SignedHeaders", valid_611300
  result.add "header", section
  ## parameters in `formData` object:
  ##   VersionId: JString (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `VersionId` field"
  var valid_611301 = formData.getOrDefault("VersionId")
  valid_611301 = validateParameter(valid_611301, JString, required = true,
                                 default = nil)
  if valid_611301 != nil:
    section.add "VersionId", valid_611301
  var valid_611302 = formData.getOrDefault("PolicyArn")
  valid_611302 = validateParameter(valid_611302, JString, required = true,
                                 default = nil)
  if valid_611302 != nil:
    section.add "PolicyArn", valid_611302
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611303: Call_PostDeletePolicyVersion_611289; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611303.validator(path, query, header, formData, body)
  let scheme = call_611303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611303.url(scheme.get, call_611303.host, call_611303.base,
                         call_611303.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611303, url, valid)

proc call*(call_611304: Call_PostDeletePolicyVersion_611289; VersionId: string;
          PolicyArn: string; Action: string = "DeletePolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postDeletePolicyVersion
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611305 = newJObject()
  var formData_611306 = newJObject()
  add(formData_611306, "VersionId", newJString(VersionId))
  add(formData_611306, "PolicyArn", newJString(PolicyArn))
  add(query_611305, "Action", newJString(Action))
  add(query_611305, "Version", newJString(Version))
  result = call_611304.call(nil, query_611305, nil, formData_611306, nil)

var postDeletePolicyVersion* = Call_PostDeletePolicyVersion_611289(
    name: "postDeletePolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeletePolicyVersion",
    validator: validate_PostDeletePolicyVersion_611290, base: "/",
    url: url_PostDeletePolicyVersion_611291, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicyVersion_611272 = ref object of OpenApiRestCall_609589
proc url_GetDeletePolicyVersion_611274(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeletePolicyVersion_611273(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VersionId: JString (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `VersionId` field"
  var valid_611275 = query.getOrDefault("VersionId")
  valid_611275 = validateParameter(valid_611275, JString, required = true,
                                 default = nil)
  if valid_611275 != nil:
    section.add "VersionId", valid_611275
  var valid_611276 = query.getOrDefault("PolicyArn")
  valid_611276 = validateParameter(valid_611276, JString, required = true,
                                 default = nil)
  if valid_611276 != nil:
    section.add "PolicyArn", valid_611276
  var valid_611277 = query.getOrDefault("Action")
  valid_611277 = validateParameter(valid_611277, JString, required = true,
                                 default = newJString("DeletePolicyVersion"))
  if valid_611277 != nil:
    section.add "Action", valid_611277
  var valid_611278 = query.getOrDefault("Version")
  valid_611278 = validateParameter(valid_611278, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611278 != nil:
    section.add "Version", valid_611278
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611279 = header.getOrDefault("X-Amz-Signature")
  valid_611279 = validateParameter(valid_611279, JString, required = false,
                                 default = nil)
  if valid_611279 != nil:
    section.add "X-Amz-Signature", valid_611279
  var valid_611280 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611280 = validateParameter(valid_611280, JString, required = false,
                                 default = nil)
  if valid_611280 != nil:
    section.add "X-Amz-Content-Sha256", valid_611280
  var valid_611281 = header.getOrDefault("X-Amz-Date")
  valid_611281 = validateParameter(valid_611281, JString, required = false,
                                 default = nil)
  if valid_611281 != nil:
    section.add "X-Amz-Date", valid_611281
  var valid_611282 = header.getOrDefault("X-Amz-Credential")
  valid_611282 = validateParameter(valid_611282, JString, required = false,
                                 default = nil)
  if valid_611282 != nil:
    section.add "X-Amz-Credential", valid_611282
  var valid_611283 = header.getOrDefault("X-Amz-Security-Token")
  valid_611283 = validateParameter(valid_611283, JString, required = false,
                                 default = nil)
  if valid_611283 != nil:
    section.add "X-Amz-Security-Token", valid_611283
  var valid_611284 = header.getOrDefault("X-Amz-Algorithm")
  valid_611284 = validateParameter(valid_611284, JString, required = false,
                                 default = nil)
  if valid_611284 != nil:
    section.add "X-Amz-Algorithm", valid_611284
  var valid_611285 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611285 = validateParameter(valid_611285, JString, required = false,
                                 default = nil)
  if valid_611285 != nil:
    section.add "X-Amz-SignedHeaders", valid_611285
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611286: Call_GetDeletePolicyVersion_611272; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611286.validator(path, query, header, formData, body)
  let scheme = call_611286.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611286.url(scheme.get, call_611286.host, call_611286.base,
                         call_611286.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611286, url, valid)

proc call*(call_611287: Call_GetDeletePolicyVersion_611272; VersionId: string;
          PolicyArn: string; Action: string = "DeletePolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getDeletePolicyVersion
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611288 = newJObject()
  add(query_611288, "VersionId", newJString(VersionId))
  add(query_611288, "PolicyArn", newJString(PolicyArn))
  add(query_611288, "Action", newJString(Action))
  add(query_611288, "Version", newJString(Version))
  result = call_611287.call(nil, query_611288, nil, nil, nil)

var getDeletePolicyVersion* = Call_GetDeletePolicyVersion_611272(
    name: "getDeletePolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeletePolicyVersion",
    validator: validate_GetDeletePolicyVersion_611273, base: "/",
    url: url_GetDeletePolicyVersion_611274, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRole_611323 = ref object of OpenApiRestCall_609589
proc url_PostDeleteRole_611325(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteRole_611324(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611326 = query.getOrDefault("Action")
  valid_611326 = validateParameter(valid_611326, JString, required = true,
                                 default = newJString("DeleteRole"))
  if valid_611326 != nil:
    section.add "Action", valid_611326
  var valid_611327 = query.getOrDefault("Version")
  valid_611327 = validateParameter(valid_611327, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611327 != nil:
    section.add "Version", valid_611327
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611328 = header.getOrDefault("X-Amz-Signature")
  valid_611328 = validateParameter(valid_611328, JString, required = false,
                                 default = nil)
  if valid_611328 != nil:
    section.add "X-Amz-Signature", valid_611328
  var valid_611329 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611329 = validateParameter(valid_611329, JString, required = false,
                                 default = nil)
  if valid_611329 != nil:
    section.add "X-Amz-Content-Sha256", valid_611329
  var valid_611330 = header.getOrDefault("X-Amz-Date")
  valid_611330 = validateParameter(valid_611330, JString, required = false,
                                 default = nil)
  if valid_611330 != nil:
    section.add "X-Amz-Date", valid_611330
  var valid_611331 = header.getOrDefault("X-Amz-Credential")
  valid_611331 = validateParameter(valid_611331, JString, required = false,
                                 default = nil)
  if valid_611331 != nil:
    section.add "X-Amz-Credential", valid_611331
  var valid_611332 = header.getOrDefault("X-Amz-Security-Token")
  valid_611332 = validateParameter(valid_611332, JString, required = false,
                                 default = nil)
  if valid_611332 != nil:
    section.add "X-Amz-Security-Token", valid_611332
  var valid_611333 = header.getOrDefault("X-Amz-Algorithm")
  valid_611333 = validateParameter(valid_611333, JString, required = false,
                                 default = nil)
  if valid_611333 != nil:
    section.add "X-Amz-Algorithm", valid_611333
  var valid_611334 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611334 = validateParameter(valid_611334, JString, required = false,
                                 default = nil)
  if valid_611334 != nil:
    section.add "X-Amz-SignedHeaders", valid_611334
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_611335 = formData.getOrDefault("RoleName")
  valid_611335 = validateParameter(valid_611335, JString, required = true,
                                 default = nil)
  if valid_611335 != nil:
    section.add "RoleName", valid_611335
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611336: Call_PostDeleteRole_611323; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  let valid = call_611336.validator(path, query, header, formData, body)
  let scheme = call_611336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611336.url(scheme.get, call_611336.host, call_611336.base,
                         call_611336.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611336, url, valid)

proc call*(call_611337: Call_PostDeleteRole_611323; RoleName: string;
          Action: string = "DeleteRole"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteRole
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611338 = newJObject()
  var formData_611339 = newJObject()
  add(formData_611339, "RoleName", newJString(RoleName))
  add(query_611338, "Action", newJString(Action))
  add(query_611338, "Version", newJString(Version))
  result = call_611337.call(nil, query_611338, nil, formData_611339, nil)

var postDeleteRole* = Call_PostDeleteRole_611323(name: "postDeleteRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteRole", validator: validate_PostDeleteRole_611324,
    base: "/", url: url_PostDeleteRole_611325, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRole_611307 = ref object of OpenApiRestCall_609589
proc url_GetDeleteRole_611309(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteRole_611308(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_611310 = query.getOrDefault("RoleName")
  valid_611310 = validateParameter(valid_611310, JString, required = true,
                                 default = nil)
  if valid_611310 != nil:
    section.add "RoleName", valid_611310
  var valid_611311 = query.getOrDefault("Action")
  valid_611311 = validateParameter(valid_611311, JString, required = true,
                                 default = newJString("DeleteRole"))
  if valid_611311 != nil:
    section.add "Action", valid_611311
  var valid_611312 = query.getOrDefault("Version")
  valid_611312 = validateParameter(valid_611312, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611312 != nil:
    section.add "Version", valid_611312
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611313 = header.getOrDefault("X-Amz-Signature")
  valid_611313 = validateParameter(valid_611313, JString, required = false,
                                 default = nil)
  if valid_611313 != nil:
    section.add "X-Amz-Signature", valid_611313
  var valid_611314 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611314 = validateParameter(valid_611314, JString, required = false,
                                 default = nil)
  if valid_611314 != nil:
    section.add "X-Amz-Content-Sha256", valid_611314
  var valid_611315 = header.getOrDefault("X-Amz-Date")
  valid_611315 = validateParameter(valid_611315, JString, required = false,
                                 default = nil)
  if valid_611315 != nil:
    section.add "X-Amz-Date", valid_611315
  var valid_611316 = header.getOrDefault("X-Amz-Credential")
  valid_611316 = validateParameter(valid_611316, JString, required = false,
                                 default = nil)
  if valid_611316 != nil:
    section.add "X-Amz-Credential", valid_611316
  var valid_611317 = header.getOrDefault("X-Amz-Security-Token")
  valid_611317 = validateParameter(valid_611317, JString, required = false,
                                 default = nil)
  if valid_611317 != nil:
    section.add "X-Amz-Security-Token", valid_611317
  var valid_611318 = header.getOrDefault("X-Amz-Algorithm")
  valid_611318 = validateParameter(valid_611318, JString, required = false,
                                 default = nil)
  if valid_611318 != nil:
    section.add "X-Amz-Algorithm", valid_611318
  var valid_611319 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611319 = validateParameter(valid_611319, JString, required = false,
                                 default = nil)
  if valid_611319 != nil:
    section.add "X-Amz-SignedHeaders", valid_611319
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611320: Call_GetDeleteRole_611307; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  let valid = call_611320.validator(path, query, header, formData, body)
  let scheme = call_611320.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611320.url(scheme.get, call_611320.host, call_611320.base,
                         call_611320.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611320, url, valid)

proc call*(call_611321: Call_GetDeleteRole_611307; RoleName: string;
          Action: string = "DeleteRole"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteRole
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611322 = newJObject()
  add(query_611322, "RoleName", newJString(RoleName))
  add(query_611322, "Action", newJString(Action))
  add(query_611322, "Version", newJString(Version))
  result = call_611321.call(nil, query_611322, nil, nil, nil)

var getDeleteRole* = Call_GetDeleteRole_611307(name: "getDeleteRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteRole", validator: validate_GetDeleteRole_611308,
    base: "/", url: url_GetDeleteRole_611309, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRolePermissionsBoundary_611356 = ref object of OpenApiRestCall_609589
proc url_PostDeleteRolePermissionsBoundary_611358(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteRolePermissionsBoundary_611357(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611359 = query.getOrDefault("Action")
  valid_611359 = validateParameter(valid_611359, JString, required = true, default = newJString(
      "DeleteRolePermissionsBoundary"))
  if valid_611359 != nil:
    section.add "Action", valid_611359
  var valid_611360 = query.getOrDefault("Version")
  valid_611360 = validateParameter(valid_611360, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611360 != nil:
    section.add "Version", valid_611360
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611361 = header.getOrDefault("X-Amz-Signature")
  valid_611361 = validateParameter(valid_611361, JString, required = false,
                                 default = nil)
  if valid_611361 != nil:
    section.add "X-Amz-Signature", valid_611361
  var valid_611362 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611362 = validateParameter(valid_611362, JString, required = false,
                                 default = nil)
  if valid_611362 != nil:
    section.add "X-Amz-Content-Sha256", valid_611362
  var valid_611363 = header.getOrDefault("X-Amz-Date")
  valid_611363 = validateParameter(valid_611363, JString, required = false,
                                 default = nil)
  if valid_611363 != nil:
    section.add "X-Amz-Date", valid_611363
  var valid_611364 = header.getOrDefault("X-Amz-Credential")
  valid_611364 = validateParameter(valid_611364, JString, required = false,
                                 default = nil)
  if valid_611364 != nil:
    section.add "X-Amz-Credential", valid_611364
  var valid_611365 = header.getOrDefault("X-Amz-Security-Token")
  valid_611365 = validateParameter(valid_611365, JString, required = false,
                                 default = nil)
  if valid_611365 != nil:
    section.add "X-Amz-Security-Token", valid_611365
  var valid_611366 = header.getOrDefault("X-Amz-Algorithm")
  valid_611366 = validateParameter(valid_611366, JString, required = false,
                                 default = nil)
  if valid_611366 != nil:
    section.add "X-Amz-Algorithm", valid_611366
  var valid_611367 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611367 = validateParameter(valid_611367, JString, required = false,
                                 default = nil)
  if valid_611367 != nil:
    section.add "X-Amz-SignedHeaders", valid_611367
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_611368 = formData.getOrDefault("RoleName")
  valid_611368 = validateParameter(valid_611368, JString, required = true,
                                 default = nil)
  if valid_611368 != nil:
    section.add "RoleName", valid_611368
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611369: Call_PostDeleteRolePermissionsBoundary_611356;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_611369.validator(path, query, header, formData, body)
  let scheme = call_611369.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611369.url(scheme.get, call_611369.host, call_611369.base,
                         call_611369.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611369, url, valid)

proc call*(call_611370: Call_PostDeleteRolePermissionsBoundary_611356;
          RoleName: string; Action: string = "DeleteRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteRolePermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611371 = newJObject()
  var formData_611372 = newJObject()
  add(formData_611372, "RoleName", newJString(RoleName))
  add(query_611371, "Action", newJString(Action))
  add(query_611371, "Version", newJString(Version))
  result = call_611370.call(nil, query_611371, nil, formData_611372, nil)

var postDeleteRolePermissionsBoundary* = Call_PostDeleteRolePermissionsBoundary_611356(
    name: "postDeleteRolePermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePermissionsBoundary",
    validator: validate_PostDeleteRolePermissionsBoundary_611357, base: "/",
    url: url_PostDeleteRolePermissionsBoundary_611358,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRolePermissionsBoundary_611340 = ref object of OpenApiRestCall_609589
proc url_GetDeleteRolePermissionsBoundary_611342(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteRolePermissionsBoundary_611341(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_611343 = query.getOrDefault("RoleName")
  valid_611343 = validateParameter(valid_611343, JString, required = true,
                                 default = nil)
  if valid_611343 != nil:
    section.add "RoleName", valid_611343
  var valid_611344 = query.getOrDefault("Action")
  valid_611344 = validateParameter(valid_611344, JString, required = true, default = newJString(
      "DeleteRolePermissionsBoundary"))
  if valid_611344 != nil:
    section.add "Action", valid_611344
  var valid_611345 = query.getOrDefault("Version")
  valid_611345 = validateParameter(valid_611345, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611345 != nil:
    section.add "Version", valid_611345
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611346 = header.getOrDefault("X-Amz-Signature")
  valid_611346 = validateParameter(valid_611346, JString, required = false,
                                 default = nil)
  if valid_611346 != nil:
    section.add "X-Amz-Signature", valid_611346
  var valid_611347 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611347 = validateParameter(valid_611347, JString, required = false,
                                 default = nil)
  if valid_611347 != nil:
    section.add "X-Amz-Content-Sha256", valid_611347
  var valid_611348 = header.getOrDefault("X-Amz-Date")
  valid_611348 = validateParameter(valid_611348, JString, required = false,
                                 default = nil)
  if valid_611348 != nil:
    section.add "X-Amz-Date", valid_611348
  var valid_611349 = header.getOrDefault("X-Amz-Credential")
  valid_611349 = validateParameter(valid_611349, JString, required = false,
                                 default = nil)
  if valid_611349 != nil:
    section.add "X-Amz-Credential", valid_611349
  var valid_611350 = header.getOrDefault("X-Amz-Security-Token")
  valid_611350 = validateParameter(valid_611350, JString, required = false,
                                 default = nil)
  if valid_611350 != nil:
    section.add "X-Amz-Security-Token", valid_611350
  var valid_611351 = header.getOrDefault("X-Amz-Algorithm")
  valid_611351 = validateParameter(valid_611351, JString, required = false,
                                 default = nil)
  if valid_611351 != nil:
    section.add "X-Amz-Algorithm", valid_611351
  var valid_611352 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611352 = validateParameter(valid_611352, JString, required = false,
                                 default = nil)
  if valid_611352 != nil:
    section.add "X-Amz-SignedHeaders", valid_611352
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611353: Call_GetDeleteRolePermissionsBoundary_611340;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_611353.validator(path, query, header, formData, body)
  let scheme = call_611353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611353.url(scheme.get, call_611353.host, call_611353.base,
                         call_611353.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611353, url, valid)

proc call*(call_611354: Call_GetDeleteRolePermissionsBoundary_611340;
          RoleName: string; Action: string = "DeleteRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteRolePermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611355 = newJObject()
  add(query_611355, "RoleName", newJString(RoleName))
  add(query_611355, "Action", newJString(Action))
  add(query_611355, "Version", newJString(Version))
  result = call_611354.call(nil, query_611355, nil, nil, nil)

var getDeleteRolePermissionsBoundary* = Call_GetDeleteRolePermissionsBoundary_611340(
    name: "getDeleteRolePermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePermissionsBoundary",
    validator: validate_GetDeleteRolePermissionsBoundary_611341, base: "/",
    url: url_GetDeleteRolePermissionsBoundary_611342,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRolePolicy_611390 = ref object of OpenApiRestCall_609589
proc url_PostDeleteRolePolicy_611392(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteRolePolicy_611391(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611393 = query.getOrDefault("Action")
  valid_611393 = validateParameter(valid_611393, JString, required = true,
                                 default = newJString("DeleteRolePolicy"))
  if valid_611393 != nil:
    section.add "Action", valid_611393
  var valid_611394 = query.getOrDefault("Version")
  valid_611394 = validateParameter(valid_611394, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611394 != nil:
    section.add "Version", valid_611394
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611395 = header.getOrDefault("X-Amz-Signature")
  valid_611395 = validateParameter(valid_611395, JString, required = false,
                                 default = nil)
  if valid_611395 != nil:
    section.add "X-Amz-Signature", valid_611395
  var valid_611396 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611396 = validateParameter(valid_611396, JString, required = false,
                                 default = nil)
  if valid_611396 != nil:
    section.add "X-Amz-Content-Sha256", valid_611396
  var valid_611397 = header.getOrDefault("X-Amz-Date")
  valid_611397 = validateParameter(valid_611397, JString, required = false,
                                 default = nil)
  if valid_611397 != nil:
    section.add "X-Amz-Date", valid_611397
  var valid_611398 = header.getOrDefault("X-Amz-Credential")
  valid_611398 = validateParameter(valid_611398, JString, required = false,
                                 default = nil)
  if valid_611398 != nil:
    section.add "X-Amz-Credential", valid_611398
  var valid_611399 = header.getOrDefault("X-Amz-Security-Token")
  valid_611399 = validateParameter(valid_611399, JString, required = false,
                                 default = nil)
  if valid_611399 != nil:
    section.add "X-Amz-Security-Token", valid_611399
  var valid_611400 = header.getOrDefault("X-Amz-Algorithm")
  valid_611400 = validateParameter(valid_611400, JString, required = false,
                                 default = nil)
  if valid_611400 != nil:
    section.add "X-Amz-Algorithm", valid_611400
  var valid_611401 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611401 = validateParameter(valid_611401, JString, required = false,
                                 default = nil)
  if valid_611401 != nil:
    section.add "X-Amz-SignedHeaders", valid_611401
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_611402 = formData.getOrDefault("RoleName")
  valid_611402 = validateParameter(valid_611402, JString, required = true,
                                 default = nil)
  if valid_611402 != nil:
    section.add "RoleName", valid_611402
  var valid_611403 = formData.getOrDefault("PolicyName")
  valid_611403 = validateParameter(valid_611403, JString, required = true,
                                 default = nil)
  if valid_611403 != nil:
    section.add "PolicyName", valid_611403
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611404: Call_PostDeleteRolePolicy_611390; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611404.validator(path, query, header, formData, body)
  let scheme = call_611404.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611404.url(scheme.get, call_611404.host, call_611404.base,
                         call_611404.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611404, url, valid)

proc call*(call_611405: Call_PostDeleteRolePolicy_611390; RoleName: string;
          PolicyName: string; Action: string = "DeleteRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteRolePolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_611406 = newJObject()
  var formData_611407 = newJObject()
  add(formData_611407, "RoleName", newJString(RoleName))
  add(query_611406, "Action", newJString(Action))
  add(query_611406, "Version", newJString(Version))
  add(formData_611407, "PolicyName", newJString(PolicyName))
  result = call_611405.call(nil, query_611406, nil, formData_611407, nil)

var postDeleteRolePolicy* = Call_PostDeleteRolePolicy_611390(
    name: "postDeleteRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePolicy",
    validator: validate_PostDeleteRolePolicy_611391, base: "/",
    url: url_PostDeleteRolePolicy_611392, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRolePolicy_611373 = ref object of OpenApiRestCall_609589
proc url_GetDeleteRolePolicy_611375(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteRolePolicy_611374(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_611376 = query.getOrDefault("PolicyName")
  valid_611376 = validateParameter(valid_611376, JString, required = true,
                                 default = nil)
  if valid_611376 != nil:
    section.add "PolicyName", valid_611376
  var valid_611377 = query.getOrDefault("RoleName")
  valid_611377 = validateParameter(valid_611377, JString, required = true,
                                 default = nil)
  if valid_611377 != nil:
    section.add "RoleName", valid_611377
  var valid_611378 = query.getOrDefault("Action")
  valid_611378 = validateParameter(valid_611378, JString, required = true,
                                 default = newJString("DeleteRolePolicy"))
  if valid_611378 != nil:
    section.add "Action", valid_611378
  var valid_611379 = query.getOrDefault("Version")
  valid_611379 = validateParameter(valid_611379, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611379 != nil:
    section.add "Version", valid_611379
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611380 = header.getOrDefault("X-Amz-Signature")
  valid_611380 = validateParameter(valid_611380, JString, required = false,
                                 default = nil)
  if valid_611380 != nil:
    section.add "X-Amz-Signature", valid_611380
  var valid_611381 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611381 = validateParameter(valid_611381, JString, required = false,
                                 default = nil)
  if valid_611381 != nil:
    section.add "X-Amz-Content-Sha256", valid_611381
  var valid_611382 = header.getOrDefault("X-Amz-Date")
  valid_611382 = validateParameter(valid_611382, JString, required = false,
                                 default = nil)
  if valid_611382 != nil:
    section.add "X-Amz-Date", valid_611382
  var valid_611383 = header.getOrDefault("X-Amz-Credential")
  valid_611383 = validateParameter(valid_611383, JString, required = false,
                                 default = nil)
  if valid_611383 != nil:
    section.add "X-Amz-Credential", valid_611383
  var valid_611384 = header.getOrDefault("X-Amz-Security-Token")
  valid_611384 = validateParameter(valid_611384, JString, required = false,
                                 default = nil)
  if valid_611384 != nil:
    section.add "X-Amz-Security-Token", valid_611384
  var valid_611385 = header.getOrDefault("X-Amz-Algorithm")
  valid_611385 = validateParameter(valid_611385, JString, required = false,
                                 default = nil)
  if valid_611385 != nil:
    section.add "X-Amz-Algorithm", valid_611385
  var valid_611386 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611386 = validateParameter(valid_611386, JString, required = false,
                                 default = nil)
  if valid_611386 != nil:
    section.add "X-Amz-SignedHeaders", valid_611386
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611387: Call_GetDeleteRolePolicy_611373; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611387.validator(path, query, header, formData, body)
  let scheme = call_611387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611387.url(scheme.get, call_611387.host, call_611387.base,
                         call_611387.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611387, url, valid)

proc call*(call_611388: Call_GetDeleteRolePolicy_611373; PolicyName: string;
          RoleName: string; Action: string = "DeleteRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteRolePolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611389 = newJObject()
  add(query_611389, "PolicyName", newJString(PolicyName))
  add(query_611389, "RoleName", newJString(RoleName))
  add(query_611389, "Action", newJString(Action))
  add(query_611389, "Version", newJString(Version))
  result = call_611388.call(nil, query_611389, nil, nil, nil)

var getDeleteRolePolicy* = Call_GetDeleteRolePolicy_611373(
    name: "getDeleteRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePolicy",
    validator: validate_GetDeleteRolePolicy_611374, base: "/",
    url: url_GetDeleteRolePolicy_611375, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSAMLProvider_611424 = ref object of OpenApiRestCall_609589
proc url_PostDeleteSAMLProvider_611426(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSAMLProvider_611425(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611427 = query.getOrDefault("Action")
  valid_611427 = validateParameter(valid_611427, JString, required = true,
                                 default = newJString("DeleteSAMLProvider"))
  if valid_611427 != nil:
    section.add "Action", valid_611427
  var valid_611428 = query.getOrDefault("Version")
  valid_611428 = validateParameter(valid_611428, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611428 != nil:
    section.add "Version", valid_611428
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611429 = header.getOrDefault("X-Amz-Signature")
  valid_611429 = validateParameter(valid_611429, JString, required = false,
                                 default = nil)
  if valid_611429 != nil:
    section.add "X-Amz-Signature", valid_611429
  var valid_611430 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611430 = validateParameter(valid_611430, JString, required = false,
                                 default = nil)
  if valid_611430 != nil:
    section.add "X-Amz-Content-Sha256", valid_611430
  var valid_611431 = header.getOrDefault("X-Amz-Date")
  valid_611431 = validateParameter(valid_611431, JString, required = false,
                                 default = nil)
  if valid_611431 != nil:
    section.add "X-Amz-Date", valid_611431
  var valid_611432 = header.getOrDefault("X-Amz-Credential")
  valid_611432 = validateParameter(valid_611432, JString, required = false,
                                 default = nil)
  if valid_611432 != nil:
    section.add "X-Amz-Credential", valid_611432
  var valid_611433 = header.getOrDefault("X-Amz-Security-Token")
  valid_611433 = validateParameter(valid_611433, JString, required = false,
                                 default = nil)
  if valid_611433 != nil:
    section.add "X-Amz-Security-Token", valid_611433
  var valid_611434 = header.getOrDefault("X-Amz-Algorithm")
  valid_611434 = validateParameter(valid_611434, JString, required = false,
                                 default = nil)
  if valid_611434 != nil:
    section.add "X-Amz-Algorithm", valid_611434
  var valid_611435 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611435 = validateParameter(valid_611435, JString, required = false,
                                 default = nil)
  if valid_611435 != nil:
    section.add "X-Amz-SignedHeaders", valid_611435
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_611436 = formData.getOrDefault("SAMLProviderArn")
  valid_611436 = validateParameter(valid_611436, JString, required = true,
                                 default = nil)
  if valid_611436 != nil:
    section.add "SAMLProviderArn", valid_611436
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611437: Call_PostDeleteSAMLProvider_611424; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_611437.validator(path, query, header, formData, body)
  let scheme = call_611437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611437.url(scheme.get, call_611437.host, call_611437.base,
                         call_611437.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611437, url, valid)

proc call*(call_611438: Call_PostDeleteSAMLProvider_611424;
          SAMLProviderArn: string; Action: string = "DeleteSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSAMLProvider
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611439 = newJObject()
  var formData_611440 = newJObject()
  add(formData_611440, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_611439, "Action", newJString(Action))
  add(query_611439, "Version", newJString(Version))
  result = call_611438.call(nil, query_611439, nil, formData_611440, nil)

var postDeleteSAMLProvider* = Call_PostDeleteSAMLProvider_611424(
    name: "postDeleteSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSAMLProvider",
    validator: validate_PostDeleteSAMLProvider_611425, base: "/",
    url: url_PostDeleteSAMLProvider_611426, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSAMLProvider_611408 = ref object of OpenApiRestCall_609589
proc url_GetDeleteSAMLProvider_611410(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSAMLProvider_611409(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_611411 = query.getOrDefault("Action")
  valid_611411 = validateParameter(valid_611411, JString, required = true,
                                 default = newJString("DeleteSAMLProvider"))
  if valid_611411 != nil:
    section.add "Action", valid_611411
  var valid_611412 = query.getOrDefault("SAMLProviderArn")
  valid_611412 = validateParameter(valid_611412, JString, required = true,
                                 default = nil)
  if valid_611412 != nil:
    section.add "SAMLProviderArn", valid_611412
  var valid_611413 = query.getOrDefault("Version")
  valid_611413 = validateParameter(valid_611413, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611413 != nil:
    section.add "Version", valid_611413
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611414 = header.getOrDefault("X-Amz-Signature")
  valid_611414 = validateParameter(valid_611414, JString, required = false,
                                 default = nil)
  if valid_611414 != nil:
    section.add "X-Amz-Signature", valid_611414
  var valid_611415 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611415 = validateParameter(valid_611415, JString, required = false,
                                 default = nil)
  if valid_611415 != nil:
    section.add "X-Amz-Content-Sha256", valid_611415
  var valid_611416 = header.getOrDefault("X-Amz-Date")
  valid_611416 = validateParameter(valid_611416, JString, required = false,
                                 default = nil)
  if valid_611416 != nil:
    section.add "X-Amz-Date", valid_611416
  var valid_611417 = header.getOrDefault("X-Amz-Credential")
  valid_611417 = validateParameter(valid_611417, JString, required = false,
                                 default = nil)
  if valid_611417 != nil:
    section.add "X-Amz-Credential", valid_611417
  var valid_611418 = header.getOrDefault("X-Amz-Security-Token")
  valid_611418 = validateParameter(valid_611418, JString, required = false,
                                 default = nil)
  if valid_611418 != nil:
    section.add "X-Amz-Security-Token", valid_611418
  var valid_611419 = header.getOrDefault("X-Amz-Algorithm")
  valid_611419 = validateParameter(valid_611419, JString, required = false,
                                 default = nil)
  if valid_611419 != nil:
    section.add "X-Amz-Algorithm", valid_611419
  var valid_611420 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611420 = validateParameter(valid_611420, JString, required = false,
                                 default = nil)
  if valid_611420 != nil:
    section.add "X-Amz-SignedHeaders", valid_611420
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611421: Call_GetDeleteSAMLProvider_611408; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_611421.validator(path, query, header, formData, body)
  let scheme = call_611421.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611421.url(scheme.get, call_611421.host, call_611421.base,
                         call_611421.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611421, url, valid)

proc call*(call_611422: Call_GetDeleteSAMLProvider_611408; SAMLProviderArn: string;
          Action: string = "DeleteSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteSAMLProvider
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_611423 = newJObject()
  add(query_611423, "Action", newJString(Action))
  add(query_611423, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_611423, "Version", newJString(Version))
  result = call_611422.call(nil, query_611423, nil, nil, nil)

var getDeleteSAMLProvider* = Call_GetDeleteSAMLProvider_611408(
    name: "getDeleteSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSAMLProvider",
    validator: validate_GetDeleteSAMLProvider_611409, base: "/",
    url: url_GetDeleteSAMLProvider_611410, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSSHPublicKey_611458 = ref object of OpenApiRestCall_609589
proc url_PostDeleteSSHPublicKey_611460(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSSHPublicKey_611459(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611461 = query.getOrDefault("Action")
  valid_611461 = validateParameter(valid_611461, JString, required = true,
                                 default = newJString("DeleteSSHPublicKey"))
  if valid_611461 != nil:
    section.add "Action", valid_611461
  var valid_611462 = query.getOrDefault("Version")
  valid_611462 = validateParameter(valid_611462, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611462 != nil:
    section.add "Version", valid_611462
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611463 = header.getOrDefault("X-Amz-Signature")
  valid_611463 = validateParameter(valid_611463, JString, required = false,
                                 default = nil)
  if valid_611463 != nil:
    section.add "X-Amz-Signature", valid_611463
  var valid_611464 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611464 = validateParameter(valid_611464, JString, required = false,
                                 default = nil)
  if valid_611464 != nil:
    section.add "X-Amz-Content-Sha256", valid_611464
  var valid_611465 = header.getOrDefault("X-Amz-Date")
  valid_611465 = validateParameter(valid_611465, JString, required = false,
                                 default = nil)
  if valid_611465 != nil:
    section.add "X-Amz-Date", valid_611465
  var valid_611466 = header.getOrDefault("X-Amz-Credential")
  valid_611466 = validateParameter(valid_611466, JString, required = false,
                                 default = nil)
  if valid_611466 != nil:
    section.add "X-Amz-Credential", valid_611466
  var valid_611467 = header.getOrDefault("X-Amz-Security-Token")
  valid_611467 = validateParameter(valid_611467, JString, required = false,
                                 default = nil)
  if valid_611467 != nil:
    section.add "X-Amz-Security-Token", valid_611467
  var valid_611468 = header.getOrDefault("X-Amz-Algorithm")
  valid_611468 = validateParameter(valid_611468, JString, required = false,
                                 default = nil)
  if valid_611468 != nil:
    section.add "X-Amz-Algorithm", valid_611468
  var valid_611469 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611469 = validateParameter(valid_611469, JString, required = false,
                                 default = nil)
  if valid_611469 != nil:
    section.add "X-Amz-SignedHeaders", valid_611469
  result.add "header", section
  ## parameters in `formData` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SSHPublicKeyId` field"
  var valid_611470 = formData.getOrDefault("SSHPublicKeyId")
  valid_611470 = validateParameter(valid_611470, JString, required = true,
                                 default = nil)
  if valid_611470 != nil:
    section.add "SSHPublicKeyId", valid_611470
  var valid_611471 = formData.getOrDefault("UserName")
  valid_611471 = validateParameter(valid_611471, JString, required = true,
                                 default = nil)
  if valid_611471 != nil:
    section.add "UserName", valid_611471
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611472: Call_PostDeleteSSHPublicKey_611458; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_611472.validator(path, query, header, formData, body)
  let scheme = call_611472.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611472.url(scheme.get, call_611472.host, call_611472.base,
                         call_611472.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611472, url, valid)

proc call*(call_611473: Call_PostDeleteSSHPublicKey_611458; SSHPublicKeyId: string;
          UserName: string; Action: string = "DeleteSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSSHPublicKey
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611474 = newJObject()
  var formData_611475 = newJObject()
  add(formData_611475, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(formData_611475, "UserName", newJString(UserName))
  add(query_611474, "Action", newJString(Action))
  add(query_611474, "Version", newJString(Version))
  result = call_611473.call(nil, query_611474, nil, formData_611475, nil)

var postDeleteSSHPublicKey* = Call_PostDeleteSSHPublicKey_611458(
    name: "postDeleteSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSSHPublicKey",
    validator: validate_PostDeleteSSHPublicKey_611459, base: "/",
    url: url_PostDeleteSSHPublicKey_611460, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSSHPublicKey_611441 = ref object of OpenApiRestCall_609589
proc url_GetDeleteSSHPublicKey_611443(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSSHPublicKey_611442(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_611444 = query.getOrDefault("SSHPublicKeyId")
  valid_611444 = validateParameter(valid_611444, JString, required = true,
                                 default = nil)
  if valid_611444 != nil:
    section.add "SSHPublicKeyId", valid_611444
  var valid_611445 = query.getOrDefault("UserName")
  valid_611445 = validateParameter(valid_611445, JString, required = true,
                                 default = nil)
  if valid_611445 != nil:
    section.add "UserName", valid_611445
  var valid_611446 = query.getOrDefault("Action")
  valid_611446 = validateParameter(valid_611446, JString, required = true,
                                 default = newJString("DeleteSSHPublicKey"))
  if valid_611446 != nil:
    section.add "Action", valid_611446
  var valid_611447 = query.getOrDefault("Version")
  valid_611447 = validateParameter(valid_611447, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611447 != nil:
    section.add "Version", valid_611447
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611448 = header.getOrDefault("X-Amz-Signature")
  valid_611448 = validateParameter(valid_611448, JString, required = false,
                                 default = nil)
  if valid_611448 != nil:
    section.add "X-Amz-Signature", valid_611448
  var valid_611449 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611449 = validateParameter(valid_611449, JString, required = false,
                                 default = nil)
  if valid_611449 != nil:
    section.add "X-Amz-Content-Sha256", valid_611449
  var valid_611450 = header.getOrDefault("X-Amz-Date")
  valid_611450 = validateParameter(valid_611450, JString, required = false,
                                 default = nil)
  if valid_611450 != nil:
    section.add "X-Amz-Date", valid_611450
  var valid_611451 = header.getOrDefault("X-Amz-Credential")
  valid_611451 = validateParameter(valid_611451, JString, required = false,
                                 default = nil)
  if valid_611451 != nil:
    section.add "X-Amz-Credential", valid_611451
  var valid_611452 = header.getOrDefault("X-Amz-Security-Token")
  valid_611452 = validateParameter(valid_611452, JString, required = false,
                                 default = nil)
  if valid_611452 != nil:
    section.add "X-Amz-Security-Token", valid_611452
  var valid_611453 = header.getOrDefault("X-Amz-Algorithm")
  valid_611453 = validateParameter(valid_611453, JString, required = false,
                                 default = nil)
  if valid_611453 != nil:
    section.add "X-Amz-Algorithm", valid_611453
  var valid_611454 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611454 = validateParameter(valid_611454, JString, required = false,
                                 default = nil)
  if valid_611454 != nil:
    section.add "X-Amz-SignedHeaders", valid_611454
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611455: Call_GetDeleteSSHPublicKey_611441; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_611455.validator(path, query, header, formData, body)
  let scheme = call_611455.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611455.url(scheme.get, call_611455.host, call_611455.base,
                         call_611455.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611455, url, valid)

proc call*(call_611456: Call_GetDeleteSSHPublicKey_611441; SSHPublicKeyId: string;
          UserName: string; Action: string = "DeleteSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteSSHPublicKey
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611457 = newJObject()
  add(query_611457, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_611457, "UserName", newJString(UserName))
  add(query_611457, "Action", newJString(Action))
  add(query_611457, "Version", newJString(Version))
  result = call_611456.call(nil, query_611457, nil, nil, nil)

var getDeleteSSHPublicKey* = Call_GetDeleteSSHPublicKey_611441(
    name: "getDeleteSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSSHPublicKey",
    validator: validate_GetDeleteSSHPublicKey_611442, base: "/",
    url: url_GetDeleteSSHPublicKey_611443, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServerCertificate_611492 = ref object of OpenApiRestCall_609589
proc url_PostDeleteServerCertificate_611494(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteServerCertificate_611493(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611495 = query.getOrDefault("Action")
  valid_611495 = validateParameter(valid_611495, JString, required = true, default = newJString(
      "DeleteServerCertificate"))
  if valid_611495 != nil:
    section.add "Action", valid_611495
  var valid_611496 = query.getOrDefault("Version")
  valid_611496 = validateParameter(valid_611496, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611496 != nil:
    section.add "Version", valid_611496
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611497 = header.getOrDefault("X-Amz-Signature")
  valid_611497 = validateParameter(valid_611497, JString, required = false,
                                 default = nil)
  if valid_611497 != nil:
    section.add "X-Amz-Signature", valid_611497
  var valid_611498 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611498 = validateParameter(valid_611498, JString, required = false,
                                 default = nil)
  if valid_611498 != nil:
    section.add "X-Amz-Content-Sha256", valid_611498
  var valid_611499 = header.getOrDefault("X-Amz-Date")
  valid_611499 = validateParameter(valid_611499, JString, required = false,
                                 default = nil)
  if valid_611499 != nil:
    section.add "X-Amz-Date", valid_611499
  var valid_611500 = header.getOrDefault("X-Amz-Credential")
  valid_611500 = validateParameter(valid_611500, JString, required = false,
                                 default = nil)
  if valid_611500 != nil:
    section.add "X-Amz-Credential", valid_611500
  var valid_611501 = header.getOrDefault("X-Amz-Security-Token")
  valid_611501 = validateParameter(valid_611501, JString, required = false,
                                 default = nil)
  if valid_611501 != nil:
    section.add "X-Amz-Security-Token", valid_611501
  var valid_611502 = header.getOrDefault("X-Amz-Algorithm")
  valid_611502 = validateParameter(valid_611502, JString, required = false,
                                 default = nil)
  if valid_611502 != nil:
    section.add "X-Amz-Algorithm", valid_611502
  var valid_611503 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611503 = validateParameter(valid_611503, JString, required = false,
                                 default = nil)
  if valid_611503 != nil:
    section.add "X-Amz-SignedHeaders", valid_611503
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_611504 = formData.getOrDefault("ServerCertificateName")
  valid_611504 = validateParameter(valid_611504, JString, required = true,
                                 default = nil)
  if valid_611504 != nil:
    section.add "ServerCertificateName", valid_611504
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611505: Call_PostDeleteServerCertificate_611492; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  let valid = call_611505.validator(path, query, header, formData, body)
  let scheme = call_611505.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611505.url(scheme.get, call_611505.host, call_611505.base,
                         call_611505.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611505, url, valid)

proc call*(call_611506: Call_PostDeleteServerCertificate_611492;
          ServerCertificateName: string;
          Action: string = "DeleteServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteServerCertificate
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611507 = newJObject()
  var formData_611508 = newJObject()
  add(formData_611508, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_611507, "Action", newJString(Action))
  add(query_611507, "Version", newJString(Version))
  result = call_611506.call(nil, query_611507, nil, formData_611508, nil)

var postDeleteServerCertificate* = Call_PostDeleteServerCertificate_611492(
    name: "postDeleteServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServerCertificate",
    validator: validate_PostDeleteServerCertificate_611493, base: "/",
    url: url_PostDeleteServerCertificate_611494,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServerCertificate_611476 = ref object of OpenApiRestCall_609589
proc url_GetDeleteServerCertificate_611478(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteServerCertificate_611477(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_611479 = query.getOrDefault("ServerCertificateName")
  valid_611479 = validateParameter(valid_611479, JString, required = true,
                                 default = nil)
  if valid_611479 != nil:
    section.add "ServerCertificateName", valid_611479
  var valid_611480 = query.getOrDefault("Action")
  valid_611480 = validateParameter(valid_611480, JString, required = true, default = newJString(
      "DeleteServerCertificate"))
  if valid_611480 != nil:
    section.add "Action", valid_611480
  var valid_611481 = query.getOrDefault("Version")
  valid_611481 = validateParameter(valid_611481, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611481 != nil:
    section.add "Version", valid_611481
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611482 = header.getOrDefault("X-Amz-Signature")
  valid_611482 = validateParameter(valid_611482, JString, required = false,
                                 default = nil)
  if valid_611482 != nil:
    section.add "X-Amz-Signature", valid_611482
  var valid_611483 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611483 = validateParameter(valid_611483, JString, required = false,
                                 default = nil)
  if valid_611483 != nil:
    section.add "X-Amz-Content-Sha256", valid_611483
  var valid_611484 = header.getOrDefault("X-Amz-Date")
  valid_611484 = validateParameter(valid_611484, JString, required = false,
                                 default = nil)
  if valid_611484 != nil:
    section.add "X-Amz-Date", valid_611484
  var valid_611485 = header.getOrDefault("X-Amz-Credential")
  valid_611485 = validateParameter(valid_611485, JString, required = false,
                                 default = nil)
  if valid_611485 != nil:
    section.add "X-Amz-Credential", valid_611485
  var valid_611486 = header.getOrDefault("X-Amz-Security-Token")
  valid_611486 = validateParameter(valid_611486, JString, required = false,
                                 default = nil)
  if valid_611486 != nil:
    section.add "X-Amz-Security-Token", valid_611486
  var valid_611487 = header.getOrDefault("X-Amz-Algorithm")
  valid_611487 = validateParameter(valid_611487, JString, required = false,
                                 default = nil)
  if valid_611487 != nil:
    section.add "X-Amz-Algorithm", valid_611487
  var valid_611488 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611488 = validateParameter(valid_611488, JString, required = false,
                                 default = nil)
  if valid_611488 != nil:
    section.add "X-Amz-SignedHeaders", valid_611488
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611489: Call_GetDeleteServerCertificate_611476; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  let valid = call_611489.validator(path, query, header, formData, body)
  let scheme = call_611489.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611489.url(scheme.get, call_611489.host, call_611489.base,
                         call_611489.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611489, url, valid)

proc call*(call_611490: Call_GetDeleteServerCertificate_611476;
          ServerCertificateName: string;
          Action: string = "DeleteServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteServerCertificate
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611491 = newJObject()
  add(query_611491, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_611491, "Action", newJString(Action))
  add(query_611491, "Version", newJString(Version))
  result = call_611490.call(nil, query_611491, nil, nil, nil)

var getDeleteServerCertificate* = Call_GetDeleteServerCertificate_611476(
    name: "getDeleteServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServerCertificate",
    validator: validate_GetDeleteServerCertificate_611477, base: "/",
    url: url_GetDeleteServerCertificate_611478,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServiceLinkedRole_611525 = ref object of OpenApiRestCall_609589
proc url_PostDeleteServiceLinkedRole_611527(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteServiceLinkedRole_611526(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611528 = query.getOrDefault("Action")
  valid_611528 = validateParameter(valid_611528, JString, required = true, default = newJString(
      "DeleteServiceLinkedRole"))
  if valid_611528 != nil:
    section.add "Action", valid_611528
  var valid_611529 = query.getOrDefault("Version")
  valid_611529 = validateParameter(valid_611529, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611529 != nil:
    section.add "Version", valid_611529
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611530 = header.getOrDefault("X-Amz-Signature")
  valid_611530 = validateParameter(valid_611530, JString, required = false,
                                 default = nil)
  if valid_611530 != nil:
    section.add "X-Amz-Signature", valid_611530
  var valid_611531 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611531 = validateParameter(valid_611531, JString, required = false,
                                 default = nil)
  if valid_611531 != nil:
    section.add "X-Amz-Content-Sha256", valid_611531
  var valid_611532 = header.getOrDefault("X-Amz-Date")
  valid_611532 = validateParameter(valid_611532, JString, required = false,
                                 default = nil)
  if valid_611532 != nil:
    section.add "X-Amz-Date", valid_611532
  var valid_611533 = header.getOrDefault("X-Amz-Credential")
  valid_611533 = validateParameter(valid_611533, JString, required = false,
                                 default = nil)
  if valid_611533 != nil:
    section.add "X-Amz-Credential", valid_611533
  var valid_611534 = header.getOrDefault("X-Amz-Security-Token")
  valid_611534 = validateParameter(valid_611534, JString, required = false,
                                 default = nil)
  if valid_611534 != nil:
    section.add "X-Amz-Security-Token", valid_611534
  var valid_611535 = header.getOrDefault("X-Amz-Algorithm")
  valid_611535 = validateParameter(valid_611535, JString, required = false,
                                 default = nil)
  if valid_611535 != nil:
    section.add "X-Amz-Algorithm", valid_611535
  var valid_611536 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611536 = validateParameter(valid_611536, JString, required = false,
                                 default = nil)
  if valid_611536 != nil:
    section.add "X-Amz-SignedHeaders", valid_611536
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name of the service-linked role to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_611537 = formData.getOrDefault("RoleName")
  valid_611537 = validateParameter(valid_611537, JString, required = true,
                                 default = nil)
  if valid_611537 != nil:
    section.add "RoleName", valid_611537
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611538: Call_PostDeleteServiceLinkedRole_611525; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611538.validator(path, query, header, formData, body)
  let scheme = call_611538.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611538.url(scheme.get, call_611538.host, call_611538.base,
                         call_611538.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611538, url, valid)

proc call*(call_611539: Call_PostDeleteServiceLinkedRole_611525; RoleName: string;
          Action: string = "DeleteServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteServiceLinkedRole
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611540 = newJObject()
  var formData_611541 = newJObject()
  add(formData_611541, "RoleName", newJString(RoleName))
  add(query_611540, "Action", newJString(Action))
  add(query_611540, "Version", newJString(Version))
  result = call_611539.call(nil, query_611540, nil, formData_611541, nil)

var postDeleteServiceLinkedRole* = Call_PostDeleteServiceLinkedRole_611525(
    name: "postDeleteServiceLinkedRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceLinkedRole",
    validator: validate_PostDeleteServiceLinkedRole_611526, base: "/",
    url: url_PostDeleteServiceLinkedRole_611527,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServiceLinkedRole_611509 = ref object of OpenApiRestCall_609589
proc url_GetDeleteServiceLinkedRole_611511(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteServiceLinkedRole_611510(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_611512 = query.getOrDefault("RoleName")
  valid_611512 = validateParameter(valid_611512, JString, required = true,
                                 default = nil)
  if valid_611512 != nil:
    section.add "RoleName", valid_611512
  var valid_611513 = query.getOrDefault("Action")
  valid_611513 = validateParameter(valid_611513, JString, required = true, default = newJString(
      "DeleteServiceLinkedRole"))
  if valid_611513 != nil:
    section.add "Action", valid_611513
  var valid_611514 = query.getOrDefault("Version")
  valid_611514 = validateParameter(valid_611514, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611514 != nil:
    section.add "Version", valid_611514
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611515 = header.getOrDefault("X-Amz-Signature")
  valid_611515 = validateParameter(valid_611515, JString, required = false,
                                 default = nil)
  if valid_611515 != nil:
    section.add "X-Amz-Signature", valid_611515
  var valid_611516 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611516 = validateParameter(valid_611516, JString, required = false,
                                 default = nil)
  if valid_611516 != nil:
    section.add "X-Amz-Content-Sha256", valid_611516
  var valid_611517 = header.getOrDefault("X-Amz-Date")
  valid_611517 = validateParameter(valid_611517, JString, required = false,
                                 default = nil)
  if valid_611517 != nil:
    section.add "X-Amz-Date", valid_611517
  var valid_611518 = header.getOrDefault("X-Amz-Credential")
  valid_611518 = validateParameter(valid_611518, JString, required = false,
                                 default = nil)
  if valid_611518 != nil:
    section.add "X-Amz-Credential", valid_611518
  var valid_611519 = header.getOrDefault("X-Amz-Security-Token")
  valid_611519 = validateParameter(valid_611519, JString, required = false,
                                 default = nil)
  if valid_611519 != nil:
    section.add "X-Amz-Security-Token", valid_611519
  var valid_611520 = header.getOrDefault("X-Amz-Algorithm")
  valid_611520 = validateParameter(valid_611520, JString, required = false,
                                 default = nil)
  if valid_611520 != nil:
    section.add "X-Amz-Algorithm", valid_611520
  var valid_611521 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611521 = validateParameter(valid_611521, JString, required = false,
                                 default = nil)
  if valid_611521 != nil:
    section.add "X-Amz-SignedHeaders", valid_611521
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611522: Call_GetDeleteServiceLinkedRole_611509; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611522.validator(path, query, header, formData, body)
  let scheme = call_611522.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611522.url(scheme.get, call_611522.host, call_611522.base,
                         call_611522.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611522, url, valid)

proc call*(call_611523: Call_GetDeleteServiceLinkedRole_611509; RoleName: string;
          Action: string = "DeleteServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteServiceLinkedRole
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611524 = newJObject()
  add(query_611524, "RoleName", newJString(RoleName))
  add(query_611524, "Action", newJString(Action))
  add(query_611524, "Version", newJString(Version))
  result = call_611523.call(nil, query_611524, nil, nil, nil)

var getDeleteServiceLinkedRole* = Call_GetDeleteServiceLinkedRole_611509(
    name: "getDeleteServiceLinkedRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceLinkedRole",
    validator: validate_GetDeleteServiceLinkedRole_611510, base: "/",
    url: url_GetDeleteServiceLinkedRole_611511,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServiceSpecificCredential_611559 = ref object of OpenApiRestCall_609589
proc url_PostDeleteServiceSpecificCredential_611561(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteServiceSpecificCredential_611560(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified service-specific credential.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611562 = query.getOrDefault("Action")
  valid_611562 = validateParameter(valid_611562, JString, required = true, default = newJString(
      "DeleteServiceSpecificCredential"))
  if valid_611562 != nil:
    section.add "Action", valid_611562
  var valid_611563 = query.getOrDefault("Version")
  valid_611563 = validateParameter(valid_611563, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611563 != nil:
    section.add "Version", valid_611563
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611564 = header.getOrDefault("X-Amz-Signature")
  valid_611564 = validateParameter(valid_611564, JString, required = false,
                                 default = nil)
  if valid_611564 != nil:
    section.add "X-Amz-Signature", valid_611564
  var valid_611565 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611565 = validateParameter(valid_611565, JString, required = false,
                                 default = nil)
  if valid_611565 != nil:
    section.add "X-Amz-Content-Sha256", valid_611565
  var valid_611566 = header.getOrDefault("X-Amz-Date")
  valid_611566 = validateParameter(valid_611566, JString, required = false,
                                 default = nil)
  if valid_611566 != nil:
    section.add "X-Amz-Date", valid_611566
  var valid_611567 = header.getOrDefault("X-Amz-Credential")
  valid_611567 = validateParameter(valid_611567, JString, required = false,
                                 default = nil)
  if valid_611567 != nil:
    section.add "X-Amz-Credential", valid_611567
  var valid_611568 = header.getOrDefault("X-Amz-Security-Token")
  valid_611568 = validateParameter(valid_611568, JString, required = false,
                                 default = nil)
  if valid_611568 != nil:
    section.add "X-Amz-Security-Token", valid_611568
  var valid_611569 = header.getOrDefault("X-Amz-Algorithm")
  valid_611569 = validateParameter(valid_611569, JString, required = false,
                                 default = nil)
  if valid_611569 != nil:
    section.add "X-Amz-Algorithm", valid_611569
  var valid_611570 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611570 = validateParameter(valid_611570, JString, required = false,
                                 default = nil)
  if valid_611570 != nil:
    section.add "X-Amz-SignedHeaders", valid_611570
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_611571 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_611571 = validateParameter(valid_611571, JString, required = true,
                                 default = nil)
  if valid_611571 != nil:
    section.add "ServiceSpecificCredentialId", valid_611571
  var valid_611572 = formData.getOrDefault("UserName")
  valid_611572 = validateParameter(valid_611572, JString, required = false,
                                 default = nil)
  if valid_611572 != nil:
    section.add "UserName", valid_611572
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611573: Call_PostDeleteServiceSpecificCredential_611559;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified service-specific credential.
  ## 
  let valid = call_611573.validator(path, query, header, formData, body)
  let scheme = call_611573.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611573.url(scheme.get, call_611573.host, call_611573.base,
                         call_611573.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611573, url, valid)

proc call*(call_611574: Call_PostDeleteServiceSpecificCredential_611559;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "DeleteServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteServiceSpecificCredential
  ## Deletes the specified service-specific credential.
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611575 = newJObject()
  var formData_611576 = newJObject()
  add(formData_611576, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(formData_611576, "UserName", newJString(UserName))
  add(query_611575, "Action", newJString(Action))
  add(query_611575, "Version", newJString(Version))
  result = call_611574.call(nil, query_611575, nil, formData_611576, nil)

var postDeleteServiceSpecificCredential* = Call_PostDeleteServiceSpecificCredential_611559(
    name: "postDeleteServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceSpecificCredential",
    validator: validate_PostDeleteServiceSpecificCredential_611560, base: "/",
    url: url_PostDeleteServiceSpecificCredential_611561,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServiceSpecificCredential_611542 = ref object of OpenApiRestCall_609589
proc url_GetDeleteServiceSpecificCredential_611544(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteServiceSpecificCredential_611543(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified service-specific credential.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611545 = query.getOrDefault("UserName")
  valid_611545 = validateParameter(valid_611545, JString, required = false,
                                 default = nil)
  if valid_611545 != nil:
    section.add "UserName", valid_611545
  assert query != nil, "query argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_611546 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_611546 = validateParameter(valid_611546, JString, required = true,
                                 default = nil)
  if valid_611546 != nil:
    section.add "ServiceSpecificCredentialId", valid_611546
  var valid_611547 = query.getOrDefault("Action")
  valid_611547 = validateParameter(valid_611547, JString, required = true, default = newJString(
      "DeleteServiceSpecificCredential"))
  if valid_611547 != nil:
    section.add "Action", valid_611547
  var valid_611548 = query.getOrDefault("Version")
  valid_611548 = validateParameter(valid_611548, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611548 != nil:
    section.add "Version", valid_611548
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611549 = header.getOrDefault("X-Amz-Signature")
  valid_611549 = validateParameter(valid_611549, JString, required = false,
                                 default = nil)
  if valid_611549 != nil:
    section.add "X-Amz-Signature", valid_611549
  var valid_611550 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611550 = validateParameter(valid_611550, JString, required = false,
                                 default = nil)
  if valid_611550 != nil:
    section.add "X-Amz-Content-Sha256", valid_611550
  var valid_611551 = header.getOrDefault("X-Amz-Date")
  valid_611551 = validateParameter(valid_611551, JString, required = false,
                                 default = nil)
  if valid_611551 != nil:
    section.add "X-Amz-Date", valid_611551
  var valid_611552 = header.getOrDefault("X-Amz-Credential")
  valid_611552 = validateParameter(valid_611552, JString, required = false,
                                 default = nil)
  if valid_611552 != nil:
    section.add "X-Amz-Credential", valid_611552
  var valid_611553 = header.getOrDefault("X-Amz-Security-Token")
  valid_611553 = validateParameter(valid_611553, JString, required = false,
                                 default = nil)
  if valid_611553 != nil:
    section.add "X-Amz-Security-Token", valid_611553
  var valid_611554 = header.getOrDefault("X-Amz-Algorithm")
  valid_611554 = validateParameter(valid_611554, JString, required = false,
                                 default = nil)
  if valid_611554 != nil:
    section.add "X-Amz-Algorithm", valid_611554
  var valid_611555 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611555 = validateParameter(valid_611555, JString, required = false,
                                 default = nil)
  if valid_611555 != nil:
    section.add "X-Amz-SignedHeaders", valid_611555
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611556: Call_GetDeleteServiceSpecificCredential_611542;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified service-specific credential.
  ## 
  let valid = call_611556.validator(path, query, header, formData, body)
  let scheme = call_611556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611556.url(scheme.get, call_611556.host, call_611556.base,
                         call_611556.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611556, url, valid)

proc call*(call_611557: Call_GetDeleteServiceSpecificCredential_611542;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "DeleteServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteServiceSpecificCredential
  ## Deletes the specified service-specific credential.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611558 = newJObject()
  add(query_611558, "UserName", newJString(UserName))
  add(query_611558, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_611558, "Action", newJString(Action))
  add(query_611558, "Version", newJString(Version))
  result = call_611557.call(nil, query_611558, nil, nil, nil)

var getDeleteServiceSpecificCredential* = Call_GetDeleteServiceSpecificCredential_611542(
    name: "getDeleteServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceSpecificCredential",
    validator: validate_GetDeleteServiceSpecificCredential_611543, base: "/",
    url: url_GetDeleteServiceSpecificCredential_611544,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSigningCertificate_611594 = ref object of OpenApiRestCall_609589
proc url_PostDeleteSigningCertificate_611596(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSigningCertificate_611595(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611597 = query.getOrDefault("Action")
  valid_611597 = validateParameter(valid_611597, JString, required = true, default = newJString(
      "DeleteSigningCertificate"))
  if valid_611597 != nil:
    section.add "Action", valid_611597
  var valid_611598 = query.getOrDefault("Version")
  valid_611598 = validateParameter(valid_611598, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611598 != nil:
    section.add "Version", valid_611598
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611599 = header.getOrDefault("X-Amz-Signature")
  valid_611599 = validateParameter(valid_611599, JString, required = false,
                                 default = nil)
  if valid_611599 != nil:
    section.add "X-Amz-Signature", valid_611599
  var valid_611600 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611600 = validateParameter(valid_611600, JString, required = false,
                                 default = nil)
  if valid_611600 != nil:
    section.add "X-Amz-Content-Sha256", valid_611600
  var valid_611601 = header.getOrDefault("X-Amz-Date")
  valid_611601 = validateParameter(valid_611601, JString, required = false,
                                 default = nil)
  if valid_611601 != nil:
    section.add "X-Amz-Date", valid_611601
  var valid_611602 = header.getOrDefault("X-Amz-Credential")
  valid_611602 = validateParameter(valid_611602, JString, required = false,
                                 default = nil)
  if valid_611602 != nil:
    section.add "X-Amz-Credential", valid_611602
  var valid_611603 = header.getOrDefault("X-Amz-Security-Token")
  valid_611603 = validateParameter(valid_611603, JString, required = false,
                                 default = nil)
  if valid_611603 != nil:
    section.add "X-Amz-Security-Token", valid_611603
  var valid_611604 = header.getOrDefault("X-Amz-Algorithm")
  valid_611604 = validateParameter(valid_611604, JString, required = false,
                                 default = nil)
  if valid_611604 != nil:
    section.add "X-Amz-Algorithm", valid_611604
  var valid_611605 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611605 = validateParameter(valid_611605, JString, required = false,
                                 default = nil)
  if valid_611605 != nil:
    section.add "X-Amz-SignedHeaders", valid_611605
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CertificateId` field"
  var valid_611606 = formData.getOrDefault("CertificateId")
  valid_611606 = validateParameter(valid_611606, JString, required = true,
                                 default = nil)
  if valid_611606 != nil:
    section.add "CertificateId", valid_611606
  var valid_611607 = formData.getOrDefault("UserName")
  valid_611607 = validateParameter(valid_611607, JString, required = false,
                                 default = nil)
  if valid_611607 != nil:
    section.add "UserName", valid_611607
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611608: Call_PostDeleteSigningCertificate_611594; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  let valid = call_611608.validator(path, query, header, formData, body)
  let scheme = call_611608.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611608.url(scheme.get, call_611608.host, call_611608.base,
                         call_611608.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611608, url, valid)

proc call*(call_611609: Call_PostDeleteSigningCertificate_611594;
          CertificateId: string; UserName: string = "";
          Action: string = "DeleteSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSigningCertificate
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611610 = newJObject()
  var formData_611611 = newJObject()
  add(formData_611611, "CertificateId", newJString(CertificateId))
  add(formData_611611, "UserName", newJString(UserName))
  add(query_611610, "Action", newJString(Action))
  add(query_611610, "Version", newJString(Version))
  result = call_611609.call(nil, query_611610, nil, formData_611611, nil)

var postDeleteSigningCertificate* = Call_PostDeleteSigningCertificate_611594(
    name: "postDeleteSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSigningCertificate",
    validator: validate_PostDeleteSigningCertificate_611595, base: "/",
    url: url_PostDeleteSigningCertificate_611596,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSigningCertificate_611577 = ref object of OpenApiRestCall_609589
proc url_GetDeleteSigningCertificate_611579(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSigningCertificate_611578(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  section = newJObject()
  var valid_611580 = query.getOrDefault("UserName")
  valid_611580 = validateParameter(valid_611580, JString, required = false,
                                 default = nil)
  if valid_611580 != nil:
    section.add "UserName", valid_611580
  var valid_611581 = query.getOrDefault("Action")
  valid_611581 = validateParameter(valid_611581, JString, required = true, default = newJString(
      "DeleteSigningCertificate"))
  if valid_611581 != nil:
    section.add "Action", valid_611581
  var valid_611582 = query.getOrDefault("Version")
  valid_611582 = validateParameter(valid_611582, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611582 != nil:
    section.add "Version", valid_611582
  var valid_611583 = query.getOrDefault("CertificateId")
  valid_611583 = validateParameter(valid_611583, JString, required = true,
                                 default = nil)
  if valid_611583 != nil:
    section.add "CertificateId", valid_611583
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611584 = header.getOrDefault("X-Amz-Signature")
  valid_611584 = validateParameter(valid_611584, JString, required = false,
                                 default = nil)
  if valid_611584 != nil:
    section.add "X-Amz-Signature", valid_611584
  var valid_611585 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611585 = validateParameter(valid_611585, JString, required = false,
                                 default = nil)
  if valid_611585 != nil:
    section.add "X-Amz-Content-Sha256", valid_611585
  var valid_611586 = header.getOrDefault("X-Amz-Date")
  valid_611586 = validateParameter(valid_611586, JString, required = false,
                                 default = nil)
  if valid_611586 != nil:
    section.add "X-Amz-Date", valid_611586
  var valid_611587 = header.getOrDefault("X-Amz-Credential")
  valid_611587 = validateParameter(valid_611587, JString, required = false,
                                 default = nil)
  if valid_611587 != nil:
    section.add "X-Amz-Credential", valid_611587
  var valid_611588 = header.getOrDefault("X-Amz-Security-Token")
  valid_611588 = validateParameter(valid_611588, JString, required = false,
                                 default = nil)
  if valid_611588 != nil:
    section.add "X-Amz-Security-Token", valid_611588
  var valid_611589 = header.getOrDefault("X-Amz-Algorithm")
  valid_611589 = validateParameter(valid_611589, JString, required = false,
                                 default = nil)
  if valid_611589 != nil:
    section.add "X-Amz-Algorithm", valid_611589
  var valid_611590 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611590 = validateParameter(valid_611590, JString, required = false,
                                 default = nil)
  if valid_611590 != nil:
    section.add "X-Amz-SignedHeaders", valid_611590
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611591: Call_GetDeleteSigningCertificate_611577; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  let valid = call_611591.validator(path, query, header, formData, body)
  let scheme = call_611591.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611591.url(scheme.get, call_611591.host, call_611591.base,
                         call_611591.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611591, url, valid)

proc call*(call_611592: Call_GetDeleteSigningCertificate_611577;
          CertificateId: string; UserName: string = "";
          Action: string = "DeleteSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteSigningCertificate
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  var query_611593 = newJObject()
  add(query_611593, "UserName", newJString(UserName))
  add(query_611593, "Action", newJString(Action))
  add(query_611593, "Version", newJString(Version))
  add(query_611593, "CertificateId", newJString(CertificateId))
  result = call_611592.call(nil, query_611593, nil, nil, nil)

var getDeleteSigningCertificate* = Call_GetDeleteSigningCertificate_611577(
    name: "getDeleteSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSigningCertificate",
    validator: validate_GetDeleteSigningCertificate_611578, base: "/",
    url: url_GetDeleteSigningCertificate_611579,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUser_611628 = ref object of OpenApiRestCall_609589
proc url_PostDeleteUser_611630(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteUser_611629(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611631 = query.getOrDefault("Action")
  valid_611631 = validateParameter(valid_611631, JString, required = true,
                                 default = newJString("DeleteUser"))
  if valid_611631 != nil:
    section.add "Action", valid_611631
  var valid_611632 = query.getOrDefault("Version")
  valid_611632 = validateParameter(valid_611632, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611632 != nil:
    section.add "Version", valid_611632
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611633 = header.getOrDefault("X-Amz-Signature")
  valid_611633 = validateParameter(valid_611633, JString, required = false,
                                 default = nil)
  if valid_611633 != nil:
    section.add "X-Amz-Signature", valid_611633
  var valid_611634 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611634 = validateParameter(valid_611634, JString, required = false,
                                 default = nil)
  if valid_611634 != nil:
    section.add "X-Amz-Content-Sha256", valid_611634
  var valid_611635 = header.getOrDefault("X-Amz-Date")
  valid_611635 = validateParameter(valid_611635, JString, required = false,
                                 default = nil)
  if valid_611635 != nil:
    section.add "X-Amz-Date", valid_611635
  var valid_611636 = header.getOrDefault("X-Amz-Credential")
  valid_611636 = validateParameter(valid_611636, JString, required = false,
                                 default = nil)
  if valid_611636 != nil:
    section.add "X-Amz-Credential", valid_611636
  var valid_611637 = header.getOrDefault("X-Amz-Security-Token")
  valid_611637 = validateParameter(valid_611637, JString, required = false,
                                 default = nil)
  if valid_611637 != nil:
    section.add "X-Amz-Security-Token", valid_611637
  var valid_611638 = header.getOrDefault("X-Amz-Algorithm")
  valid_611638 = validateParameter(valid_611638, JString, required = false,
                                 default = nil)
  if valid_611638 != nil:
    section.add "X-Amz-Algorithm", valid_611638
  var valid_611639 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611639 = validateParameter(valid_611639, JString, required = false,
                                 default = nil)
  if valid_611639 != nil:
    section.add "X-Amz-SignedHeaders", valid_611639
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_611640 = formData.getOrDefault("UserName")
  valid_611640 = validateParameter(valid_611640, JString, required = true,
                                 default = nil)
  if valid_611640 != nil:
    section.add "UserName", valid_611640
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611641: Call_PostDeleteUser_611628; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  let valid = call_611641.validator(path, query, header, formData, body)
  let scheme = call_611641.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611641.url(scheme.get, call_611641.host, call_611641.base,
                         call_611641.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611641, url, valid)

proc call*(call_611642: Call_PostDeleteUser_611628; UserName: string;
          Action: string = "DeleteUser"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteUser
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611643 = newJObject()
  var formData_611644 = newJObject()
  add(formData_611644, "UserName", newJString(UserName))
  add(query_611643, "Action", newJString(Action))
  add(query_611643, "Version", newJString(Version))
  result = call_611642.call(nil, query_611643, nil, formData_611644, nil)

var postDeleteUser* = Call_PostDeleteUser_611628(name: "postDeleteUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteUser", validator: validate_PostDeleteUser_611629,
    base: "/", url: url_PostDeleteUser_611630, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUser_611612 = ref object of OpenApiRestCall_609589
proc url_GetDeleteUser_611614(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteUser_611613(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_611615 = query.getOrDefault("UserName")
  valid_611615 = validateParameter(valid_611615, JString, required = true,
                                 default = nil)
  if valid_611615 != nil:
    section.add "UserName", valid_611615
  var valid_611616 = query.getOrDefault("Action")
  valid_611616 = validateParameter(valid_611616, JString, required = true,
                                 default = newJString("DeleteUser"))
  if valid_611616 != nil:
    section.add "Action", valid_611616
  var valid_611617 = query.getOrDefault("Version")
  valid_611617 = validateParameter(valid_611617, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611617 != nil:
    section.add "Version", valid_611617
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611618 = header.getOrDefault("X-Amz-Signature")
  valid_611618 = validateParameter(valid_611618, JString, required = false,
                                 default = nil)
  if valid_611618 != nil:
    section.add "X-Amz-Signature", valid_611618
  var valid_611619 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611619 = validateParameter(valid_611619, JString, required = false,
                                 default = nil)
  if valid_611619 != nil:
    section.add "X-Amz-Content-Sha256", valid_611619
  var valid_611620 = header.getOrDefault("X-Amz-Date")
  valid_611620 = validateParameter(valid_611620, JString, required = false,
                                 default = nil)
  if valid_611620 != nil:
    section.add "X-Amz-Date", valid_611620
  var valid_611621 = header.getOrDefault("X-Amz-Credential")
  valid_611621 = validateParameter(valid_611621, JString, required = false,
                                 default = nil)
  if valid_611621 != nil:
    section.add "X-Amz-Credential", valid_611621
  var valid_611622 = header.getOrDefault("X-Amz-Security-Token")
  valid_611622 = validateParameter(valid_611622, JString, required = false,
                                 default = nil)
  if valid_611622 != nil:
    section.add "X-Amz-Security-Token", valid_611622
  var valid_611623 = header.getOrDefault("X-Amz-Algorithm")
  valid_611623 = validateParameter(valid_611623, JString, required = false,
                                 default = nil)
  if valid_611623 != nil:
    section.add "X-Amz-Algorithm", valid_611623
  var valid_611624 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611624 = validateParameter(valid_611624, JString, required = false,
                                 default = nil)
  if valid_611624 != nil:
    section.add "X-Amz-SignedHeaders", valid_611624
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611625: Call_GetDeleteUser_611612; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  let valid = call_611625.validator(path, query, header, formData, body)
  let scheme = call_611625.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611625.url(scheme.get, call_611625.host, call_611625.base,
                         call_611625.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611625, url, valid)

proc call*(call_611626: Call_GetDeleteUser_611612; UserName: string;
          Action: string = "DeleteUser"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteUser
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611627 = newJObject()
  add(query_611627, "UserName", newJString(UserName))
  add(query_611627, "Action", newJString(Action))
  add(query_611627, "Version", newJString(Version))
  result = call_611626.call(nil, query_611627, nil, nil, nil)

var getDeleteUser* = Call_GetDeleteUser_611612(name: "getDeleteUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteUser", validator: validate_GetDeleteUser_611613,
    base: "/", url: url_GetDeleteUser_611614, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUserPermissionsBoundary_611661 = ref object of OpenApiRestCall_609589
proc url_PostDeleteUserPermissionsBoundary_611663(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteUserPermissionsBoundary_611662(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611664 = query.getOrDefault("Action")
  valid_611664 = validateParameter(valid_611664, JString, required = true, default = newJString(
      "DeleteUserPermissionsBoundary"))
  if valid_611664 != nil:
    section.add "Action", valid_611664
  var valid_611665 = query.getOrDefault("Version")
  valid_611665 = validateParameter(valid_611665, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611665 != nil:
    section.add "Version", valid_611665
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611666 = header.getOrDefault("X-Amz-Signature")
  valid_611666 = validateParameter(valid_611666, JString, required = false,
                                 default = nil)
  if valid_611666 != nil:
    section.add "X-Amz-Signature", valid_611666
  var valid_611667 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611667 = validateParameter(valid_611667, JString, required = false,
                                 default = nil)
  if valid_611667 != nil:
    section.add "X-Amz-Content-Sha256", valid_611667
  var valid_611668 = header.getOrDefault("X-Amz-Date")
  valid_611668 = validateParameter(valid_611668, JString, required = false,
                                 default = nil)
  if valid_611668 != nil:
    section.add "X-Amz-Date", valid_611668
  var valid_611669 = header.getOrDefault("X-Amz-Credential")
  valid_611669 = validateParameter(valid_611669, JString, required = false,
                                 default = nil)
  if valid_611669 != nil:
    section.add "X-Amz-Credential", valid_611669
  var valid_611670 = header.getOrDefault("X-Amz-Security-Token")
  valid_611670 = validateParameter(valid_611670, JString, required = false,
                                 default = nil)
  if valid_611670 != nil:
    section.add "X-Amz-Security-Token", valid_611670
  var valid_611671 = header.getOrDefault("X-Amz-Algorithm")
  valid_611671 = validateParameter(valid_611671, JString, required = false,
                                 default = nil)
  if valid_611671 != nil:
    section.add "X-Amz-Algorithm", valid_611671
  var valid_611672 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611672 = validateParameter(valid_611672, JString, required = false,
                                 default = nil)
  if valid_611672 != nil:
    section.add "X-Amz-SignedHeaders", valid_611672
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_611673 = formData.getOrDefault("UserName")
  valid_611673 = validateParameter(valid_611673, JString, required = true,
                                 default = nil)
  if valid_611673 != nil:
    section.add "UserName", valid_611673
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611674: Call_PostDeleteUserPermissionsBoundary_611661;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_611674.validator(path, query, header, formData, body)
  let scheme = call_611674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611674.url(scheme.get, call_611674.host, call_611674.base,
                         call_611674.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611674, url, valid)

proc call*(call_611675: Call_PostDeleteUserPermissionsBoundary_611661;
          UserName: string; Action: string = "DeleteUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteUserPermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611676 = newJObject()
  var formData_611677 = newJObject()
  add(formData_611677, "UserName", newJString(UserName))
  add(query_611676, "Action", newJString(Action))
  add(query_611676, "Version", newJString(Version))
  result = call_611675.call(nil, query_611676, nil, formData_611677, nil)

var postDeleteUserPermissionsBoundary* = Call_PostDeleteUserPermissionsBoundary_611661(
    name: "postDeleteUserPermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPermissionsBoundary",
    validator: validate_PostDeleteUserPermissionsBoundary_611662, base: "/",
    url: url_PostDeleteUserPermissionsBoundary_611663,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUserPermissionsBoundary_611645 = ref object of OpenApiRestCall_609589
proc url_GetDeleteUserPermissionsBoundary_611647(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteUserPermissionsBoundary_611646(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_611648 = query.getOrDefault("UserName")
  valid_611648 = validateParameter(valid_611648, JString, required = true,
                                 default = nil)
  if valid_611648 != nil:
    section.add "UserName", valid_611648
  var valid_611649 = query.getOrDefault("Action")
  valid_611649 = validateParameter(valid_611649, JString, required = true, default = newJString(
      "DeleteUserPermissionsBoundary"))
  if valid_611649 != nil:
    section.add "Action", valid_611649
  var valid_611650 = query.getOrDefault("Version")
  valid_611650 = validateParameter(valid_611650, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611650 != nil:
    section.add "Version", valid_611650
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611651 = header.getOrDefault("X-Amz-Signature")
  valid_611651 = validateParameter(valid_611651, JString, required = false,
                                 default = nil)
  if valid_611651 != nil:
    section.add "X-Amz-Signature", valid_611651
  var valid_611652 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611652 = validateParameter(valid_611652, JString, required = false,
                                 default = nil)
  if valid_611652 != nil:
    section.add "X-Amz-Content-Sha256", valid_611652
  var valid_611653 = header.getOrDefault("X-Amz-Date")
  valid_611653 = validateParameter(valid_611653, JString, required = false,
                                 default = nil)
  if valid_611653 != nil:
    section.add "X-Amz-Date", valid_611653
  var valid_611654 = header.getOrDefault("X-Amz-Credential")
  valid_611654 = validateParameter(valid_611654, JString, required = false,
                                 default = nil)
  if valid_611654 != nil:
    section.add "X-Amz-Credential", valid_611654
  var valid_611655 = header.getOrDefault("X-Amz-Security-Token")
  valid_611655 = validateParameter(valid_611655, JString, required = false,
                                 default = nil)
  if valid_611655 != nil:
    section.add "X-Amz-Security-Token", valid_611655
  var valid_611656 = header.getOrDefault("X-Amz-Algorithm")
  valid_611656 = validateParameter(valid_611656, JString, required = false,
                                 default = nil)
  if valid_611656 != nil:
    section.add "X-Amz-Algorithm", valid_611656
  var valid_611657 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611657 = validateParameter(valid_611657, JString, required = false,
                                 default = nil)
  if valid_611657 != nil:
    section.add "X-Amz-SignedHeaders", valid_611657
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611658: Call_GetDeleteUserPermissionsBoundary_611645;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_611658.validator(path, query, header, formData, body)
  let scheme = call_611658.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611658.url(scheme.get, call_611658.host, call_611658.base,
                         call_611658.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611658, url, valid)

proc call*(call_611659: Call_GetDeleteUserPermissionsBoundary_611645;
          UserName: string; Action: string = "DeleteUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteUserPermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611660 = newJObject()
  add(query_611660, "UserName", newJString(UserName))
  add(query_611660, "Action", newJString(Action))
  add(query_611660, "Version", newJString(Version))
  result = call_611659.call(nil, query_611660, nil, nil, nil)

var getDeleteUserPermissionsBoundary* = Call_GetDeleteUserPermissionsBoundary_611645(
    name: "getDeleteUserPermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPermissionsBoundary",
    validator: validate_GetDeleteUserPermissionsBoundary_611646, base: "/",
    url: url_GetDeleteUserPermissionsBoundary_611647,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUserPolicy_611695 = ref object of OpenApiRestCall_609589
proc url_PostDeleteUserPolicy_611697(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteUserPolicy_611696(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611698 = query.getOrDefault("Action")
  valid_611698 = validateParameter(valid_611698, JString, required = true,
                                 default = newJString("DeleteUserPolicy"))
  if valid_611698 != nil:
    section.add "Action", valid_611698
  var valid_611699 = query.getOrDefault("Version")
  valid_611699 = validateParameter(valid_611699, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611699 != nil:
    section.add "Version", valid_611699
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611700 = header.getOrDefault("X-Amz-Signature")
  valid_611700 = validateParameter(valid_611700, JString, required = false,
                                 default = nil)
  if valid_611700 != nil:
    section.add "X-Amz-Signature", valid_611700
  var valid_611701 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611701 = validateParameter(valid_611701, JString, required = false,
                                 default = nil)
  if valid_611701 != nil:
    section.add "X-Amz-Content-Sha256", valid_611701
  var valid_611702 = header.getOrDefault("X-Amz-Date")
  valid_611702 = validateParameter(valid_611702, JString, required = false,
                                 default = nil)
  if valid_611702 != nil:
    section.add "X-Amz-Date", valid_611702
  var valid_611703 = header.getOrDefault("X-Amz-Credential")
  valid_611703 = validateParameter(valid_611703, JString, required = false,
                                 default = nil)
  if valid_611703 != nil:
    section.add "X-Amz-Credential", valid_611703
  var valid_611704 = header.getOrDefault("X-Amz-Security-Token")
  valid_611704 = validateParameter(valid_611704, JString, required = false,
                                 default = nil)
  if valid_611704 != nil:
    section.add "X-Amz-Security-Token", valid_611704
  var valid_611705 = header.getOrDefault("X-Amz-Algorithm")
  valid_611705 = validateParameter(valid_611705, JString, required = false,
                                 default = nil)
  if valid_611705 != nil:
    section.add "X-Amz-Algorithm", valid_611705
  var valid_611706 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611706 = validateParameter(valid_611706, JString, required = false,
                                 default = nil)
  if valid_611706 != nil:
    section.add "X-Amz-SignedHeaders", valid_611706
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_611707 = formData.getOrDefault("UserName")
  valid_611707 = validateParameter(valid_611707, JString, required = true,
                                 default = nil)
  if valid_611707 != nil:
    section.add "UserName", valid_611707
  var valid_611708 = formData.getOrDefault("PolicyName")
  valid_611708 = validateParameter(valid_611708, JString, required = true,
                                 default = nil)
  if valid_611708 != nil:
    section.add "PolicyName", valid_611708
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611709: Call_PostDeleteUserPolicy_611695; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611709.validator(path, query, header, formData, body)
  let scheme = call_611709.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611709.url(scheme.get, call_611709.host, call_611709.base,
                         call_611709.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611709, url, valid)

proc call*(call_611710: Call_PostDeleteUserPolicy_611695; UserName: string;
          PolicyName: string; Action: string = "DeleteUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteUserPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_611711 = newJObject()
  var formData_611712 = newJObject()
  add(formData_611712, "UserName", newJString(UserName))
  add(query_611711, "Action", newJString(Action))
  add(query_611711, "Version", newJString(Version))
  add(formData_611712, "PolicyName", newJString(PolicyName))
  result = call_611710.call(nil, query_611711, nil, formData_611712, nil)

var postDeleteUserPolicy* = Call_PostDeleteUserPolicy_611695(
    name: "postDeleteUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPolicy",
    validator: validate_PostDeleteUserPolicy_611696, base: "/",
    url: url_PostDeleteUserPolicy_611697, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUserPolicy_611678 = ref object of OpenApiRestCall_609589
proc url_GetDeleteUserPolicy_611680(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteUserPolicy_611679(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_611681 = query.getOrDefault("UserName")
  valid_611681 = validateParameter(valid_611681, JString, required = true,
                                 default = nil)
  if valid_611681 != nil:
    section.add "UserName", valid_611681
  var valid_611682 = query.getOrDefault("PolicyName")
  valid_611682 = validateParameter(valid_611682, JString, required = true,
                                 default = nil)
  if valid_611682 != nil:
    section.add "PolicyName", valid_611682
  var valid_611683 = query.getOrDefault("Action")
  valid_611683 = validateParameter(valid_611683, JString, required = true,
                                 default = newJString("DeleteUserPolicy"))
  if valid_611683 != nil:
    section.add "Action", valid_611683
  var valid_611684 = query.getOrDefault("Version")
  valid_611684 = validateParameter(valid_611684, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611684 != nil:
    section.add "Version", valid_611684
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611685 = header.getOrDefault("X-Amz-Signature")
  valid_611685 = validateParameter(valid_611685, JString, required = false,
                                 default = nil)
  if valid_611685 != nil:
    section.add "X-Amz-Signature", valid_611685
  var valid_611686 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611686 = validateParameter(valid_611686, JString, required = false,
                                 default = nil)
  if valid_611686 != nil:
    section.add "X-Amz-Content-Sha256", valid_611686
  var valid_611687 = header.getOrDefault("X-Amz-Date")
  valid_611687 = validateParameter(valid_611687, JString, required = false,
                                 default = nil)
  if valid_611687 != nil:
    section.add "X-Amz-Date", valid_611687
  var valid_611688 = header.getOrDefault("X-Amz-Credential")
  valid_611688 = validateParameter(valid_611688, JString, required = false,
                                 default = nil)
  if valid_611688 != nil:
    section.add "X-Amz-Credential", valid_611688
  var valid_611689 = header.getOrDefault("X-Amz-Security-Token")
  valid_611689 = validateParameter(valid_611689, JString, required = false,
                                 default = nil)
  if valid_611689 != nil:
    section.add "X-Amz-Security-Token", valid_611689
  var valid_611690 = header.getOrDefault("X-Amz-Algorithm")
  valid_611690 = validateParameter(valid_611690, JString, required = false,
                                 default = nil)
  if valid_611690 != nil:
    section.add "X-Amz-Algorithm", valid_611690
  var valid_611691 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611691 = validateParameter(valid_611691, JString, required = false,
                                 default = nil)
  if valid_611691 != nil:
    section.add "X-Amz-SignedHeaders", valid_611691
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611692: Call_GetDeleteUserPolicy_611678; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611692.validator(path, query, header, formData, body)
  let scheme = call_611692.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611692.url(scheme.get, call_611692.host, call_611692.base,
                         call_611692.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611692, url, valid)

proc call*(call_611693: Call_GetDeleteUserPolicy_611678; UserName: string;
          PolicyName: string; Action: string = "DeleteUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteUserPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611694 = newJObject()
  add(query_611694, "UserName", newJString(UserName))
  add(query_611694, "PolicyName", newJString(PolicyName))
  add(query_611694, "Action", newJString(Action))
  add(query_611694, "Version", newJString(Version))
  result = call_611693.call(nil, query_611694, nil, nil, nil)

var getDeleteUserPolicy* = Call_GetDeleteUserPolicy_611678(
    name: "getDeleteUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPolicy",
    validator: validate_GetDeleteUserPolicy_611679, base: "/",
    url: url_GetDeleteUserPolicy_611680, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteVirtualMFADevice_611729 = ref object of OpenApiRestCall_609589
proc url_PostDeleteVirtualMFADevice_611731(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteVirtualMFADevice_611730(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611732 = query.getOrDefault("Action")
  valid_611732 = validateParameter(valid_611732, JString, required = true,
                                 default = newJString("DeleteVirtualMFADevice"))
  if valid_611732 != nil:
    section.add "Action", valid_611732
  var valid_611733 = query.getOrDefault("Version")
  valid_611733 = validateParameter(valid_611733, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611733 != nil:
    section.add "Version", valid_611733
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611734 = header.getOrDefault("X-Amz-Signature")
  valid_611734 = validateParameter(valid_611734, JString, required = false,
                                 default = nil)
  if valid_611734 != nil:
    section.add "X-Amz-Signature", valid_611734
  var valid_611735 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611735 = validateParameter(valid_611735, JString, required = false,
                                 default = nil)
  if valid_611735 != nil:
    section.add "X-Amz-Content-Sha256", valid_611735
  var valid_611736 = header.getOrDefault("X-Amz-Date")
  valid_611736 = validateParameter(valid_611736, JString, required = false,
                                 default = nil)
  if valid_611736 != nil:
    section.add "X-Amz-Date", valid_611736
  var valid_611737 = header.getOrDefault("X-Amz-Credential")
  valid_611737 = validateParameter(valid_611737, JString, required = false,
                                 default = nil)
  if valid_611737 != nil:
    section.add "X-Amz-Credential", valid_611737
  var valid_611738 = header.getOrDefault("X-Amz-Security-Token")
  valid_611738 = validateParameter(valid_611738, JString, required = false,
                                 default = nil)
  if valid_611738 != nil:
    section.add "X-Amz-Security-Token", valid_611738
  var valid_611739 = header.getOrDefault("X-Amz-Algorithm")
  valid_611739 = validateParameter(valid_611739, JString, required = false,
                                 default = nil)
  if valid_611739 != nil:
    section.add "X-Amz-Algorithm", valid_611739
  var valid_611740 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611740 = validateParameter(valid_611740, JString, required = false,
                                 default = nil)
  if valid_611740 != nil:
    section.add "X-Amz-SignedHeaders", valid_611740
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_611741 = formData.getOrDefault("SerialNumber")
  valid_611741 = validateParameter(valid_611741, JString, required = true,
                                 default = nil)
  if valid_611741 != nil:
    section.add "SerialNumber", valid_611741
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611742: Call_PostDeleteVirtualMFADevice_611729; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  let valid = call_611742.validator(path, query, header, formData, body)
  let scheme = call_611742.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611742.url(scheme.get, call_611742.host, call_611742.base,
                         call_611742.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611742, url, valid)

proc call*(call_611743: Call_PostDeleteVirtualMFADevice_611729;
          SerialNumber: string; Action: string = "DeleteVirtualMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteVirtualMFADevice
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611744 = newJObject()
  var formData_611745 = newJObject()
  add(formData_611745, "SerialNumber", newJString(SerialNumber))
  add(query_611744, "Action", newJString(Action))
  add(query_611744, "Version", newJString(Version))
  result = call_611743.call(nil, query_611744, nil, formData_611745, nil)

var postDeleteVirtualMFADevice* = Call_PostDeleteVirtualMFADevice_611729(
    name: "postDeleteVirtualMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteVirtualMFADevice",
    validator: validate_PostDeleteVirtualMFADevice_611730, base: "/",
    url: url_PostDeleteVirtualMFADevice_611731,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteVirtualMFADevice_611713 = ref object of OpenApiRestCall_609589
proc url_GetDeleteVirtualMFADevice_611715(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteVirtualMFADevice_611714(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_611716 = query.getOrDefault("SerialNumber")
  valid_611716 = validateParameter(valid_611716, JString, required = true,
                                 default = nil)
  if valid_611716 != nil:
    section.add "SerialNumber", valid_611716
  var valid_611717 = query.getOrDefault("Action")
  valid_611717 = validateParameter(valid_611717, JString, required = true,
                                 default = newJString("DeleteVirtualMFADevice"))
  if valid_611717 != nil:
    section.add "Action", valid_611717
  var valid_611718 = query.getOrDefault("Version")
  valid_611718 = validateParameter(valid_611718, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611718 != nil:
    section.add "Version", valid_611718
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611719 = header.getOrDefault("X-Amz-Signature")
  valid_611719 = validateParameter(valid_611719, JString, required = false,
                                 default = nil)
  if valid_611719 != nil:
    section.add "X-Amz-Signature", valid_611719
  var valid_611720 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611720 = validateParameter(valid_611720, JString, required = false,
                                 default = nil)
  if valid_611720 != nil:
    section.add "X-Amz-Content-Sha256", valid_611720
  var valid_611721 = header.getOrDefault("X-Amz-Date")
  valid_611721 = validateParameter(valid_611721, JString, required = false,
                                 default = nil)
  if valid_611721 != nil:
    section.add "X-Amz-Date", valid_611721
  var valid_611722 = header.getOrDefault("X-Amz-Credential")
  valid_611722 = validateParameter(valid_611722, JString, required = false,
                                 default = nil)
  if valid_611722 != nil:
    section.add "X-Amz-Credential", valid_611722
  var valid_611723 = header.getOrDefault("X-Amz-Security-Token")
  valid_611723 = validateParameter(valid_611723, JString, required = false,
                                 default = nil)
  if valid_611723 != nil:
    section.add "X-Amz-Security-Token", valid_611723
  var valid_611724 = header.getOrDefault("X-Amz-Algorithm")
  valid_611724 = validateParameter(valid_611724, JString, required = false,
                                 default = nil)
  if valid_611724 != nil:
    section.add "X-Amz-Algorithm", valid_611724
  var valid_611725 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611725 = validateParameter(valid_611725, JString, required = false,
                                 default = nil)
  if valid_611725 != nil:
    section.add "X-Amz-SignedHeaders", valid_611725
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611726: Call_GetDeleteVirtualMFADevice_611713; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  let valid = call_611726.validator(path, query, header, formData, body)
  let scheme = call_611726.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611726.url(scheme.get, call_611726.host, call_611726.base,
                         call_611726.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611726, url, valid)

proc call*(call_611727: Call_GetDeleteVirtualMFADevice_611713;
          SerialNumber: string; Action: string = "DeleteVirtualMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteVirtualMFADevice
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611728 = newJObject()
  add(query_611728, "SerialNumber", newJString(SerialNumber))
  add(query_611728, "Action", newJString(Action))
  add(query_611728, "Version", newJString(Version))
  result = call_611727.call(nil, query_611728, nil, nil, nil)

var getDeleteVirtualMFADevice* = Call_GetDeleteVirtualMFADevice_611713(
    name: "getDeleteVirtualMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteVirtualMFADevice",
    validator: validate_GetDeleteVirtualMFADevice_611714, base: "/",
    url: url_GetDeleteVirtualMFADevice_611715,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachGroupPolicy_611763 = ref object of OpenApiRestCall_609589
proc url_PostDetachGroupPolicy_611765(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachGroupPolicy_611764(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611766 = query.getOrDefault("Action")
  valid_611766 = validateParameter(valid_611766, JString, required = true,
                                 default = newJString("DetachGroupPolicy"))
  if valid_611766 != nil:
    section.add "Action", valid_611766
  var valid_611767 = query.getOrDefault("Version")
  valid_611767 = validateParameter(valid_611767, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611767 != nil:
    section.add "Version", valid_611767
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611768 = header.getOrDefault("X-Amz-Signature")
  valid_611768 = validateParameter(valid_611768, JString, required = false,
                                 default = nil)
  if valid_611768 != nil:
    section.add "X-Amz-Signature", valid_611768
  var valid_611769 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611769 = validateParameter(valid_611769, JString, required = false,
                                 default = nil)
  if valid_611769 != nil:
    section.add "X-Amz-Content-Sha256", valid_611769
  var valid_611770 = header.getOrDefault("X-Amz-Date")
  valid_611770 = validateParameter(valid_611770, JString, required = false,
                                 default = nil)
  if valid_611770 != nil:
    section.add "X-Amz-Date", valid_611770
  var valid_611771 = header.getOrDefault("X-Amz-Credential")
  valid_611771 = validateParameter(valid_611771, JString, required = false,
                                 default = nil)
  if valid_611771 != nil:
    section.add "X-Amz-Credential", valid_611771
  var valid_611772 = header.getOrDefault("X-Amz-Security-Token")
  valid_611772 = validateParameter(valid_611772, JString, required = false,
                                 default = nil)
  if valid_611772 != nil:
    section.add "X-Amz-Security-Token", valid_611772
  var valid_611773 = header.getOrDefault("X-Amz-Algorithm")
  valid_611773 = validateParameter(valid_611773, JString, required = false,
                                 default = nil)
  if valid_611773 != nil:
    section.add "X-Amz-Algorithm", valid_611773
  var valid_611774 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611774 = validateParameter(valid_611774, JString, required = false,
                                 default = nil)
  if valid_611774 != nil:
    section.add "X-Amz-SignedHeaders", valid_611774
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_611775 = formData.getOrDefault("GroupName")
  valid_611775 = validateParameter(valid_611775, JString, required = true,
                                 default = nil)
  if valid_611775 != nil:
    section.add "GroupName", valid_611775
  var valid_611776 = formData.getOrDefault("PolicyArn")
  valid_611776 = validateParameter(valid_611776, JString, required = true,
                                 default = nil)
  if valid_611776 != nil:
    section.add "PolicyArn", valid_611776
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611777: Call_PostDetachGroupPolicy_611763; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611777.validator(path, query, header, formData, body)
  let scheme = call_611777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611777.url(scheme.get, call_611777.host, call_611777.base,
                         call_611777.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611777, url, valid)

proc call*(call_611778: Call_PostDetachGroupPolicy_611763; GroupName: string;
          PolicyArn: string; Action: string = "DetachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachGroupPolicy
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611779 = newJObject()
  var formData_611780 = newJObject()
  add(formData_611780, "GroupName", newJString(GroupName))
  add(formData_611780, "PolicyArn", newJString(PolicyArn))
  add(query_611779, "Action", newJString(Action))
  add(query_611779, "Version", newJString(Version))
  result = call_611778.call(nil, query_611779, nil, formData_611780, nil)

var postDetachGroupPolicy* = Call_PostDetachGroupPolicy_611763(
    name: "postDetachGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachGroupPolicy",
    validator: validate_PostDetachGroupPolicy_611764, base: "/",
    url: url_PostDetachGroupPolicy_611765, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachGroupPolicy_611746 = ref object of OpenApiRestCall_609589
proc url_GetDetachGroupPolicy_611748(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachGroupPolicy_611747(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_611749 = query.getOrDefault("GroupName")
  valid_611749 = validateParameter(valid_611749, JString, required = true,
                                 default = nil)
  if valid_611749 != nil:
    section.add "GroupName", valid_611749
  var valid_611750 = query.getOrDefault("PolicyArn")
  valid_611750 = validateParameter(valid_611750, JString, required = true,
                                 default = nil)
  if valid_611750 != nil:
    section.add "PolicyArn", valid_611750
  var valid_611751 = query.getOrDefault("Action")
  valid_611751 = validateParameter(valid_611751, JString, required = true,
                                 default = newJString("DetachGroupPolicy"))
  if valid_611751 != nil:
    section.add "Action", valid_611751
  var valid_611752 = query.getOrDefault("Version")
  valid_611752 = validateParameter(valid_611752, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611752 != nil:
    section.add "Version", valid_611752
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611753 = header.getOrDefault("X-Amz-Signature")
  valid_611753 = validateParameter(valid_611753, JString, required = false,
                                 default = nil)
  if valid_611753 != nil:
    section.add "X-Amz-Signature", valid_611753
  var valid_611754 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611754 = validateParameter(valid_611754, JString, required = false,
                                 default = nil)
  if valid_611754 != nil:
    section.add "X-Amz-Content-Sha256", valid_611754
  var valid_611755 = header.getOrDefault("X-Amz-Date")
  valid_611755 = validateParameter(valid_611755, JString, required = false,
                                 default = nil)
  if valid_611755 != nil:
    section.add "X-Amz-Date", valid_611755
  var valid_611756 = header.getOrDefault("X-Amz-Credential")
  valid_611756 = validateParameter(valid_611756, JString, required = false,
                                 default = nil)
  if valid_611756 != nil:
    section.add "X-Amz-Credential", valid_611756
  var valid_611757 = header.getOrDefault("X-Amz-Security-Token")
  valid_611757 = validateParameter(valid_611757, JString, required = false,
                                 default = nil)
  if valid_611757 != nil:
    section.add "X-Amz-Security-Token", valid_611757
  var valid_611758 = header.getOrDefault("X-Amz-Algorithm")
  valid_611758 = validateParameter(valid_611758, JString, required = false,
                                 default = nil)
  if valid_611758 != nil:
    section.add "X-Amz-Algorithm", valid_611758
  var valid_611759 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611759 = validateParameter(valid_611759, JString, required = false,
                                 default = nil)
  if valid_611759 != nil:
    section.add "X-Amz-SignedHeaders", valid_611759
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611760: Call_GetDetachGroupPolicy_611746; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611760.validator(path, query, header, formData, body)
  let scheme = call_611760.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611760.url(scheme.get, call_611760.host, call_611760.base,
                         call_611760.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611760, url, valid)

proc call*(call_611761: Call_GetDetachGroupPolicy_611746; GroupName: string;
          PolicyArn: string; Action: string = "DetachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachGroupPolicy
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611762 = newJObject()
  add(query_611762, "GroupName", newJString(GroupName))
  add(query_611762, "PolicyArn", newJString(PolicyArn))
  add(query_611762, "Action", newJString(Action))
  add(query_611762, "Version", newJString(Version))
  result = call_611761.call(nil, query_611762, nil, nil, nil)

var getDetachGroupPolicy* = Call_GetDetachGroupPolicy_611746(
    name: "getDetachGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachGroupPolicy",
    validator: validate_GetDetachGroupPolicy_611747, base: "/",
    url: url_GetDetachGroupPolicy_611748, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachRolePolicy_611798 = ref object of OpenApiRestCall_609589
proc url_PostDetachRolePolicy_611800(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachRolePolicy_611799(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611801 = query.getOrDefault("Action")
  valid_611801 = validateParameter(valid_611801, JString, required = true,
                                 default = newJString("DetachRolePolicy"))
  if valid_611801 != nil:
    section.add "Action", valid_611801
  var valid_611802 = query.getOrDefault("Version")
  valid_611802 = validateParameter(valid_611802, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611802 != nil:
    section.add "Version", valid_611802
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611803 = header.getOrDefault("X-Amz-Signature")
  valid_611803 = validateParameter(valid_611803, JString, required = false,
                                 default = nil)
  if valid_611803 != nil:
    section.add "X-Amz-Signature", valid_611803
  var valid_611804 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611804 = validateParameter(valid_611804, JString, required = false,
                                 default = nil)
  if valid_611804 != nil:
    section.add "X-Amz-Content-Sha256", valid_611804
  var valid_611805 = header.getOrDefault("X-Amz-Date")
  valid_611805 = validateParameter(valid_611805, JString, required = false,
                                 default = nil)
  if valid_611805 != nil:
    section.add "X-Amz-Date", valid_611805
  var valid_611806 = header.getOrDefault("X-Amz-Credential")
  valid_611806 = validateParameter(valid_611806, JString, required = false,
                                 default = nil)
  if valid_611806 != nil:
    section.add "X-Amz-Credential", valid_611806
  var valid_611807 = header.getOrDefault("X-Amz-Security-Token")
  valid_611807 = validateParameter(valid_611807, JString, required = false,
                                 default = nil)
  if valid_611807 != nil:
    section.add "X-Amz-Security-Token", valid_611807
  var valid_611808 = header.getOrDefault("X-Amz-Algorithm")
  valid_611808 = validateParameter(valid_611808, JString, required = false,
                                 default = nil)
  if valid_611808 != nil:
    section.add "X-Amz-Algorithm", valid_611808
  var valid_611809 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611809 = validateParameter(valid_611809, JString, required = false,
                                 default = nil)
  if valid_611809 != nil:
    section.add "X-Amz-SignedHeaders", valid_611809
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_611810 = formData.getOrDefault("RoleName")
  valid_611810 = validateParameter(valid_611810, JString, required = true,
                                 default = nil)
  if valid_611810 != nil:
    section.add "RoleName", valid_611810
  var valid_611811 = formData.getOrDefault("PolicyArn")
  valid_611811 = validateParameter(valid_611811, JString, required = true,
                                 default = nil)
  if valid_611811 != nil:
    section.add "PolicyArn", valid_611811
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611812: Call_PostDetachRolePolicy_611798; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611812.validator(path, query, header, formData, body)
  let scheme = call_611812.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611812.url(scheme.get, call_611812.host, call_611812.base,
                         call_611812.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611812, url, valid)

proc call*(call_611813: Call_PostDetachRolePolicy_611798; RoleName: string;
          PolicyArn: string; Action: string = "DetachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachRolePolicy
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611814 = newJObject()
  var formData_611815 = newJObject()
  add(formData_611815, "RoleName", newJString(RoleName))
  add(formData_611815, "PolicyArn", newJString(PolicyArn))
  add(query_611814, "Action", newJString(Action))
  add(query_611814, "Version", newJString(Version))
  result = call_611813.call(nil, query_611814, nil, formData_611815, nil)

var postDetachRolePolicy* = Call_PostDetachRolePolicy_611798(
    name: "postDetachRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachRolePolicy",
    validator: validate_PostDetachRolePolicy_611799, base: "/",
    url: url_PostDetachRolePolicy_611800, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachRolePolicy_611781 = ref object of OpenApiRestCall_609589
proc url_GetDetachRolePolicy_611783(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachRolePolicy_611782(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_611784 = query.getOrDefault("PolicyArn")
  valid_611784 = validateParameter(valid_611784, JString, required = true,
                                 default = nil)
  if valid_611784 != nil:
    section.add "PolicyArn", valid_611784
  var valid_611785 = query.getOrDefault("RoleName")
  valid_611785 = validateParameter(valid_611785, JString, required = true,
                                 default = nil)
  if valid_611785 != nil:
    section.add "RoleName", valid_611785
  var valid_611786 = query.getOrDefault("Action")
  valid_611786 = validateParameter(valid_611786, JString, required = true,
                                 default = newJString("DetachRolePolicy"))
  if valid_611786 != nil:
    section.add "Action", valid_611786
  var valid_611787 = query.getOrDefault("Version")
  valid_611787 = validateParameter(valid_611787, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611787 != nil:
    section.add "Version", valid_611787
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611788 = header.getOrDefault("X-Amz-Signature")
  valid_611788 = validateParameter(valid_611788, JString, required = false,
                                 default = nil)
  if valid_611788 != nil:
    section.add "X-Amz-Signature", valid_611788
  var valid_611789 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611789 = validateParameter(valid_611789, JString, required = false,
                                 default = nil)
  if valid_611789 != nil:
    section.add "X-Amz-Content-Sha256", valid_611789
  var valid_611790 = header.getOrDefault("X-Amz-Date")
  valid_611790 = validateParameter(valid_611790, JString, required = false,
                                 default = nil)
  if valid_611790 != nil:
    section.add "X-Amz-Date", valid_611790
  var valid_611791 = header.getOrDefault("X-Amz-Credential")
  valid_611791 = validateParameter(valid_611791, JString, required = false,
                                 default = nil)
  if valid_611791 != nil:
    section.add "X-Amz-Credential", valid_611791
  var valid_611792 = header.getOrDefault("X-Amz-Security-Token")
  valid_611792 = validateParameter(valid_611792, JString, required = false,
                                 default = nil)
  if valid_611792 != nil:
    section.add "X-Amz-Security-Token", valid_611792
  var valid_611793 = header.getOrDefault("X-Amz-Algorithm")
  valid_611793 = validateParameter(valid_611793, JString, required = false,
                                 default = nil)
  if valid_611793 != nil:
    section.add "X-Amz-Algorithm", valid_611793
  var valid_611794 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611794 = validateParameter(valid_611794, JString, required = false,
                                 default = nil)
  if valid_611794 != nil:
    section.add "X-Amz-SignedHeaders", valid_611794
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611795: Call_GetDetachRolePolicy_611781; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611795.validator(path, query, header, formData, body)
  let scheme = call_611795.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611795.url(scheme.get, call_611795.host, call_611795.base,
                         call_611795.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611795, url, valid)

proc call*(call_611796: Call_GetDetachRolePolicy_611781; PolicyArn: string;
          RoleName: string; Action: string = "DetachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachRolePolicy
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611797 = newJObject()
  add(query_611797, "PolicyArn", newJString(PolicyArn))
  add(query_611797, "RoleName", newJString(RoleName))
  add(query_611797, "Action", newJString(Action))
  add(query_611797, "Version", newJString(Version))
  result = call_611796.call(nil, query_611797, nil, nil, nil)

var getDetachRolePolicy* = Call_GetDetachRolePolicy_611781(
    name: "getDetachRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachRolePolicy",
    validator: validate_GetDetachRolePolicy_611782, base: "/",
    url: url_GetDetachRolePolicy_611783, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachUserPolicy_611833 = ref object of OpenApiRestCall_609589
proc url_PostDetachUserPolicy_611835(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachUserPolicy_611834(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611836 = query.getOrDefault("Action")
  valid_611836 = validateParameter(valid_611836, JString, required = true,
                                 default = newJString("DetachUserPolicy"))
  if valid_611836 != nil:
    section.add "Action", valid_611836
  var valid_611837 = query.getOrDefault("Version")
  valid_611837 = validateParameter(valid_611837, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611837 != nil:
    section.add "Version", valid_611837
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611838 = header.getOrDefault("X-Amz-Signature")
  valid_611838 = validateParameter(valid_611838, JString, required = false,
                                 default = nil)
  if valid_611838 != nil:
    section.add "X-Amz-Signature", valid_611838
  var valid_611839 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611839 = validateParameter(valid_611839, JString, required = false,
                                 default = nil)
  if valid_611839 != nil:
    section.add "X-Amz-Content-Sha256", valid_611839
  var valid_611840 = header.getOrDefault("X-Amz-Date")
  valid_611840 = validateParameter(valid_611840, JString, required = false,
                                 default = nil)
  if valid_611840 != nil:
    section.add "X-Amz-Date", valid_611840
  var valid_611841 = header.getOrDefault("X-Amz-Credential")
  valid_611841 = validateParameter(valid_611841, JString, required = false,
                                 default = nil)
  if valid_611841 != nil:
    section.add "X-Amz-Credential", valid_611841
  var valid_611842 = header.getOrDefault("X-Amz-Security-Token")
  valid_611842 = validateParameter(valid_611842, JString, required = false,
                                 default = nil)
  if valid_611842 != nil:
    section.add "X-Amz-Security-Token", valid_611842
  var valid_611843 = header.getOrDefault("X-Amz-Algorithm")
  valid_611843 = validateParameter(valid_611843, JString, required = false,
                                 default = nil)
  if valid_611843 != nil:
    section.add "X-Amz-Algorithm", valid_611843
  var valid_611844 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611844 = validateParameter(valid_611844, JString, required = false,
                                 default = nil)
  if valid_611844 != nil:
    section.add "X-Amz-SignedHeaders", valid_611844
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_611845 = formData.getOrDefault("PolicyArn")
  valid_611845 = validateParameter(valid_611845, JString, required = true,
                                 default = nil)
  if valid_611845 != nil:
    section.add "PolicyArn", valid_611845
  var valid_611846 = formData.getOrDefault("UserName")
  valid_611846 = validateParameter(valid_611846, JString, required = true,
                                 default = nil)
  if valid_611846 != nil:
    section.add "UserName", valid_611846
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611847: Call_PostDetachUserPolicy_611833; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611847.validator(path, query, header, formData, body)
  let scheme = call_611847.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611847.url(scheme.get, call_611847.host, call_611847.base,
                         call_611847.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611847, url, valid)

proc call*(call_611848: Call_PostDetachUserPolicy_611833; PolicyArn: string;
          UserName: string; Action: string = "DetachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachUserPolicy
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611849 = newJObject()
  var formData_611850 = newJObject()
  add(formData_611850, "PolicyArn", newJString(PolicyArn))
  add(formData_611850, "UserName", newJString(UserName))
  add(query_611849, "Action", newJString(Action))
  add(query_611849, "Version", newJString(Version))
  result = call_611848.call(nil, query_611849, nil, formData_611850, nil)

var postDetachUserPolicy* = Call_PostDetachUserPolicy_611833(
    name: "postDetachUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachUserPolicy",
    validator: validate_PostDetachUserPolicy_611834, base: "/",
    url: url_PostDetachUserPolicy_611835, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachUserPolicy_611816 = ref object of OpenApiRestCall_609589
proc url_GetDetachUserPolicy_611818(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachUserPolicy_611817(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_611819 = query.getOrDefault("UserName")
  valid_611819 = validateParameter(valid_611819, JString, required = true,
                                 default = nil)
  if valid_611819 != nil:
    section.add "UserName", valid_611819
  var valid_611820 = query.getOrDefault("PolicyArn")
  valid_611820 = validateParameter(valid_611820, JString, required = true,
                                 default = nil)
  if valid_611820 != nil:
    section.add "PolicyArn", valid_611820
  var valid_611821 = query.getOrDefault("Action")
  valid_611821 = validateParameter(valid_611821, JString, required = true,
                                 default = newJString("DetachUserPolicy"))
  if valid_611821 != nil:
    section.add "Action", valid_611821
  var valid_611822 = query.getOrDefault("Version")
  valid_611822 = validateParameter(valid_611822, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611822 != nil:
    section.add "Version", valid_611822
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611823 = header.getOrDefault("X-Amz-Signature")
  valid_611823 = validateParameter(valid_611823, JString, required = false,
                                 default = nil)
  if valid_611823 != nil:
    section.add "X-Amz-Signature", valid_611823
  var valid_611824 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611824 = validateParameter(valid_611824, JString, required = false,
                                 default = nil)
  if valid_611824 != nil:
    section.add "X-Amz-Content-Sha256", valid_611824
  var valid_611825 = header.getOrDefault("X-Amz-Date")
  valid_611825 = validateParameter(valid_611825, JString, required = false,
                                 default = nil)
  if valid_611825 != nil:
    section.add "X-Amz-Date", valid_611825
  var valid_611826 = header.getOrDefault("X-Amz-Credential")
  valid_611826 = validateParameter(valid_611826, JString, required = false,
                                 default = nil)
  if valid_611826 != nil:
    section.add "X-Amz-Credential", valid_611826
  var valid_611827 = header.getOrDefault("X-Amz-Security-Token")
  valid_611827 = validateParameter(valid_611827, JString, required = false,
                                 default = nil)
  if valid_611827 != nil:
    section.add "X-Amz-Security-Token", valid_611827
  var valid_611828 = header.getOrDefault("X-Amz-Algorithm")
  valid_611828 = validateParameter(valid_611828, JString, required = false,
                                 default = nil)
  if valid_611828 != nil:
    section.add "X-Amz-Algorithm", valid_611828
  var valid_611829 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611829 = validateParameter(valid_611829, JString, required = false,
                                 default = nil)
  if valid_611829 != nil:
    section.add "X-Amz-SignedHeaders", valid_611829
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611830: Call_GetDetachUserPolicy_611816; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611830.validator(path, query, header, formData, body)
  let scheme = call_611830.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611830.url(scheme.get, call_611830.host, call_611830.base,
                         call_611830.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611830, url, valid)

proc call*(call_611831: Call_GetDetachUserPolicy_611816; UserName: string;
          PolicyArn: string; Action: string = "DetachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachUserPolicy
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611832 = newJObject()
  add(query_611832, "UserName", newJString(UserName))
  add(query_611832, "PolicyArn", newJString(PolicyArn))
  add(query_611832, "Action", newJString(Action))
  add(query_611832, "Version", newJString(Version))
  result = call_611831.call(nil, query_611832, nil, nil, nil)

var getDetachUserPolicy* = Call_GetDetachUserPolicy_611816(
    name: "getDetachUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachUserPolicy",
    validator: validate_GetDetachUserPolicy_611817, base: "/",
    url: url_GetDetachUserPolicy_611818, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnableMFADevice_611870 = ref object of OpenApiRestCall_609589
proc url_PostEnableMFADevice_611872(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostEnableMFADevice_611871(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611873 = query.getOrDefault("Action")
  valid_611873 = validateParameter(valid_611873, JString, required = true,
                                 default = newJString("EnableMFADevice"))
  if valid_611873 != nil:
    section.add "Action", valid_611873
  var valid_611874 = query.getOrDefault("Version")
  valid_611874 = validateParameter(valid_611874, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611874 != nil:
    section.add "Version", valid_611874
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611875 = header.getOrDefault("X-Amz-Signature")
  valid_611875 = validateParameter(valid_611875, JString, required = false,
                                 default = nil)
  if valid_611875 != nil:
    section.add "X-Amz-Signature", valid_611875
  var valid_611876 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611876 = validateParameter(valid_611876, JString, required = false,
                                 default = nil)
  if valid_611876 != nil:
    section.add "X-Amz-Content-Sha256", valid_611876
  var valid_611877 = header.getOrDefault("X-Amz-Date")
  valid_611877 = validateParameter(valid_611877, JString, required = false,
                                 default = nil)
  if valid_611877 != nil:
    section.add "X-Amz-Date", valid_611877
  var valid_611878 = header.getOrDefault("X-Amz-Credential")
  valid_611878 = validateParameter(valid_611878, JString, required = false,
                                 default = nil)
  if valid_611878 != nil:
    section.add "X-Amz-Credential", valid_611878
  var valid_611879 = header.getOrDefault("X-Amz-Security-Token")
  valid_611879 = validateParameter(valid_611879, JString, required = false,
                                 default = nil)
  if valid_611879 != nil:
    section.add "X-Amz-Security-Token", valid_611879
  var valid_611880 = header.getOrDefault("X-Amz-Algorithm")
  valid_611880 = validateParameter(valid_611880, JString, required = false,
                                 default = nil)
  if valid_611880 != nil:
    section.add "X-Amz-Algorithm", valid_611880
  var valid_611881 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611881 = validateParameter(valid_611881, JString, required = false,
                                 default = nil)
  if valid_611881 != nil:
    section.add "X-Amz-SignedHeaders", valid_611881
  result.add "header", section
  ## parameters in `formData` object:
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AuthenticationCode2` field"
  var valid_611882 = formData.getOrDefault("AuthenticationCode2")
  valid_611882 = validateParameter(valid_611882, JString, required = true,
                                 default = nil)
  if valid_611882 != nil:
    section.add "AuthenticationCode2", valid_611882
  var valid_611883 = formData.getOrDefault("SerialNumber")
  valid_611883 = validateParameter(valid_611883, JString, required = true,
                                 default = nil)
  if valid_611883 != nil:
    section.add "SerialNumber", valid_611883
  var valid_611884 = formData.getOrDefault("UserName")
  valid_611884 = validateParameter(valid_611884, JString, required = true,
                                 default = nil)
  if valid_611884 != nil:
    section.add "UserName", valid_611884
  var valid_611885 = formData.getOrDefault("AuthenticationCode1")
  valid_611885 = validateParameter(valid_611885, JString, required = true,
                                 default = nil)
  if valid_611885 != nil:
    section.add "AuthenticationCode1", valid_611885
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611886: Call_PostEnableMFADevice_611870; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  let valid = call_611886.validator(path, query, header, formData, body)
  let scheme = call_611886.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611886.url(scheme.get, call_611886.host, call_611886.base,
                         call_611886.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611886, url, valid)

proc call*(call_611887: Call_PostEnableMFADevice_611870;
          AuthenticationCode2: string; SerialNumber: string; UserName: string;
          AuthenticationCode1: string; Action: string = "EnableMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postEnableMFADevice
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   Version: string (required)
  var query_611888 = newJObject()
  var formData_611889 = newJObject()
  add(formData_611889, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(formData_611889, "SerialNumber", newJString(SerialNumber))
  add(formData_611889, "UserName", newJString(UserName))
  add(query_611888, "Action", newJString(Action))
  add(formData_611889, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_611888, "Version", newJString(Version))
  result = call_611887.call(nil, query_611888, nil, formData_611889, nil)

var postEnableMFADevice* = Call_PostEnableMFADevice_611870(
    name: "postEnableMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=EnableMFADevice",
    validator: validate_PostEnableMFADevice_611871, base: "/",
    url: url_PostEnableMFADevice_611872, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnableMFADevice_611851 = ref object of OpenApiRestCall_609589
proc url_GetEnableMFADevice_611853(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetEnableMFADevice_611852(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_611854 = query.getOrDefault("UserName")
  valid_611854 = validateParameter(valid_611854, JString, required = true,
                                 default = nil)
  if valid_611854 != nil:
    section.add "UserName", valid_611854
  var valid_611855 = query.getOrDefault("AuthenticationCode1")
  valid_611855 = validateParameter(valid_611855, JString, required = true,
                                 default = nil)
  if valid_611855 != nil:
    section.add "AuthenticationCode1", valid_611855
  var valid_611856 = query.getOrDefault("AuthenticationCode2")
  valid_611856 = validateParameter(valid_611856, JString, required = true,
                                 default = nil)
  if valid_611856 != nil:
    section.add "AuthenticationCode2", valid_611856
  var valid_611857 = query.getOrDefault("SerialNumber")
  valid_611857 = validateParameter(valid_611857, JString, required = true,
                                 default = nil)
  if valid_611857 != nil:
    section.add "SerialNumber", valid_611857
  var valid_611858 = query.getOrDefault("Action")
  valid_611858 = validateParameter(valid_611858, JString, required = true,
                                 default = newJString("EnableMFADevice"))
  if valid_611858 != nil:
    section.add "Action", valid_611858
  var valid_611859 = query.getOrDefault("Version")
  valid_611859 = validateParameter(valid_611859, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611859 != nil:
    section.add "Version", valid_611859
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611860 = header.getOrDefault("X-Amz-Signature")
  valid_611860 = validateParameter(valid_611860, JString, required = false,
                                 default = nil)
  if valid_611860 != nil:
    section.add "X-Amz-Signature", valid_611860
  var valid_611861 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611861 = validateParameter(valid_611861, JString, required = false,
                                 default = nil)
  if valid_611861 != nil:
    section.add "X-Amz-Content-Sha256", valid_611861
  var valid_611862 = header.getOrDefault("X-Amz-Date")
  valid_611862 = validateParameter(valid_611862, JString, required = false,
                                 default = nil)
  if valid_611862 != nil:
    section.add "X-Amz-Date", valid_611862
  var valid_611863 = header.getOrDefault("X-Amz-Credential")
  valid_611863 = validateParameter(valid_611863, JString, required = false,
                                 default = nil)
  if valid_611863 != nil:
    section.add "X-Amz-Credential", valid_611863
  var valid_611864 = header.getOrDefault("X-Amz-Security-Token")
  valid_611864 = validateParameter(valid_611864, JString, required = false,
                                 default = nil)
  if valid_611864 != nil:
    section.add "X-Amz-Security-Token", valid_611864
  var valid_611865 = header.getOrDefault("X-Amz-Algorithm")
  valid_611865 = validateParameter(valid_611865, JString, required = false,
                                 default = nil)
  if valid_611865 != nil:
    section.add "X-Amz-Algorithm", valid_611865
  var valid_611866 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611866 = validateParameter(valid_611866, JString, required = false,
                                 default = nil)
  if valid_611866 != nil:
    section.add "X-Amz-SignedHeaders", valid_611866
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611867: Call_GetEnableMFADevice_611851; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  let valid = call_611867.validator(path, query, header, formData, body)
  let scheme = call_611867.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611867.url(scheme.get, call_611867.host, call_611867.base,
                         call_611867.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611867, url, valid)

proc call*(call_611868: Call_GetEnableMFADevice_611851; UserName: string;
          AuthenticationCode1: string; AuthenticationCode2: string;
          SerialNumber: string; Action: string = "EnableMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getEnableMFADevice
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611869 = newJObject()
  add(query_611869, "UserName", newJString(UserName))
  add(query_611869, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_611869, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_611869, "SerialNumber", newJString(SerialNumber))
  add(query_611869, "Action", newJString(Action))
  add(query_611869, "Version", newJString(Version))
  result = call_611868.call(nil, query_611869, nil, nil, nil)

var getEnableMFADevice* = Call_GetEnableMFADevice_611851(
    name: "getEnableMFADevice", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=EnableMFADevice", validator: validate_GetEnableMFADevice_611852,
    base: "/", url: url_GetEnableMFADevice_611853,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateCredentialReport_611905 = ref object of OpenApiRestCall_609589
proc url_PostGenerateCredentialReport_611907(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGenerateCredentialReport_611906(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611908 = query.getOrDefault("Action")
  valid_611908 = validateParameter(valid_611908, JString, required = true, default = newJString(
      "GenerateCredentialReport"))
  if valid_611908 != nil:
    section.add "Action", valid_611908
  var valid_611909 = query.getOrDefault("Version")
  valid_611909 = validateParameter(valid_611909, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611909 != nil:
    section.add "Version", valid_611909
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611910 = header.getOrDefault("X-Amz-Signature")
  valid_611910 = validateParameter(valid_611910, JString, required = false,
                                 default = nil)
  if valid_611910 != nil:
    section.add "X-Amz-Signature", valid_611910
  var valid_611911 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611911 = validateParameter(valid_611911, JString, required = false,
                                 default = nil)
  if valid_611911 != nil:
    section.add "X-Amz-Content-Sha256", valid_611911
  var valid_611912 = header.getOrDefault("X-Amz-Date")
  valid_611912 = validateParameter(valid_611912, JString, required = false,
                                 default = nil)
  if valid_611912 != nil:
    section.add "X-Amz-Date", valid_611912
  var valid_611913 = header.getOrDefault("X-Amz-Credential")
  valid_611913 = validateParameter(valid_611913, JString, required = false,
                                 default = nil)
  if valid_611913 != nil:
    section.add "X-Amz-Credential", valid_611913
  var valid_611914 = header.getOrDefault("X-Amz-Security-Token")
  valid_611914 = validateParameter(valid_611914, JString, required = false,
                                 default = nil)
  if valid_611914 != nil:
    section.add "X-Amz-Security-Token", valid_611914
  var valid_611915 = header.getOrDefault("X-Amz-Algorithm")
  valid_611915 = validateParameter(valid_611915, JString, required = false,
                                 default = nil)
  if valid_611915 != nil:
    section.add "X-Amz-Algorithm", valid_611915
  var valid_611916 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611916 = validateParameter(valid_611916, JString, required = false,
                                 default = nil)
  if valid_611916 != nil:
    section.add "X-Amz-SignedHeaders", valid_611916
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611917: Call_PostGenerateCredentialReport_611905; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_611917.validator(path, query, header, formData, body)
  let scheme = call_611917.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611917.url(scheme.get, call_611917.host, call_611917.base,
                         call_611917.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611917, url, valid)

proc call*(call_611918: Call_PostGenerateCredentialReport_611905;
          Action: string = "GenerateCredentialReport";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateCredentialReport
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611919 = newJObject()
  add(query_611919, "Action", newJString(Action))
  add(query_611919, "Version", newJString(Version))
  result = call_611918.call(nil, query_611919, nil, nil, nil)

var postGenerateCredentialReport* = Call_PostGenerateCredentialReport_611905(
    name: "postGenerateCredentialReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GenerateCredentialReport",
    validator: validate_PostGenerateCredentialReport_611906, base: "/",
    url: url_PostGenerateCredentialReport_611907,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateCredentialReport_611890 = ref object of OpenApiRestCall_609589
proc url_GetGenerateCredentialReport_611892(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGenerateCredentialReport_611891(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611893 = query.getOrDefault("Action")
  valid_611893 = validateParameter(valid_611893, JString, required = true, default = newJString(
      "GenerateCredentialReport"))
  if valid_611893 != nil:
    section.add "Action", valid_611893
  var valid_611894 = query.getOrDefault("Version")
  valid_611894 = validateParameter(valid_611894, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611894 != nil:
    section.add "Version", valid_611894
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611895 = header.getOrDefault("X-Amz-Signature")
  valid_611895 = validateParameter(valid_611895, JString, required = false,
                                 default = nil)
  if valid_611895 != nil:
    section.add "X-Amz-Signature", valid_611895
  var valid_611896 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611896 = validateParameter(valid_611896, JString, required = false,
                                 default = nil)
  if valid_611896 != nil:
    section.add "X-Amz-Content-Sha256", valid_611896
  var valid_611897 = header.getOrDefault("X-Amz-Date")
  valid_611897 = validateParameter(valid_611897, JString, required = false,
                                 default = nil)
  if valid_611897 != nil:
    section.add "X-Amz-Date", valid_611897
  var valid_611898 = header.getOrDefault("X-Amz-Credential")
  valid_611898 = validateParameter(valid_611898, JString, required = false,
                                 default = nil)
  if valid_611898 != nil:
    section.add "X-Amz-Credential", valid_611898
  var valid_611899 = header.getOrDefault("X-Amz-Security-Token")
  valid_611899 = validateParameter(valid_611899, JString, required = false,
                                 default = nil)
  if valid_611899 != nil:
    section.add "X-Amz-Security-Token", valid_611899
  var valid_611900 = header.getOrDefault("X-Amz-Algorithm")
  valid_611900 = validateParameter(valid_611900, JString, required = false,
                                 default = nil)
  if valid_611900 != nil:
    section.add "X-Amz-Algorithm", valid_611900
  var valid_611901 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611901 = validateParameter(valid_611901, JString, required = false,
                                 default = nil)
  if valid_611901 != nil:
    section.add "X-Amz-SignedHeaders", valid_611901
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611902: Call_GetGenerateCredentialReport_611890; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_611902.validator(path, query, header, formData, body)
  let scheme = call_611902.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611902.url(scheme.get, call_611902.host, call_611902.base,
                         call_611902.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611902, url, valid)

proc call*(call_611903: Call_GetGenerateCredentialReport_611890;
          Action: string = "GenerateCredentialReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateCredentialReport
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611904 = newJObject()
  add(query_611904, "Action", newJString(Action))
  add(query_611904, "Version", newJString(Version))
  result = call_611903.call(nil, query_611904, nil, nil, nil)

var getGenerateCredentialReport* = Call_GetGenerateCredentialReport_611890(
    name: "getGenerateCredentialReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GenerateCredentialReport",
    validator: validate_GetGenerateCredentialReport_611891, base: "/",
    url: url_GetGenerateCredentialReport_611892,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateOrganizationsAccessReport_611937 = ref object of OpenApiRestCall_609589
proc url_PostGenerateOrganizationsAccessReport_611939(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGenerateOrganizationsAccessReport_611938(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611940 = query.getOrDefault("Action")
  valid_611940 = validateParameter(valid_611940, JString, required = true, default = newJString(
      "GenerateOrganizationsAccessReport"))
  if valid_611940 != nil:
    section.add "Action", valid_611940
  var valid_611941 = query.getOrDefault("Version")
  valid_611941 = validateParameter(valid_611941, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611941 != nil:
    section.add "Version", valid_611941
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611942 = header.getOrDefault("X-Amz-Signature")
  valid_611942 = validateParameter(valid_611942, JString, required = false,
                                 default = nil)
  if valid_611942 != nil:
    section.add "X-Amz-Signature", valid_611942
  var valid_611943 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611943 = validateParameter(valid_611943, JString, required = false,
                                 default = nil)
  if valid_611943 != nil:
    section.add "X-Amz-Content-Sha256", valid_611943
  var valid_611944 = header.getOrDefault("X-Amz-Date")
  valid_611944 = validateParameter(valid_611944, JString, required = false,
                                 default = nil)
  if valid_611944 != nil:
    section.add "X-Amz-Date", valid_611944
  var valid_611945 = header.getOrDefault("X-Amz-Credential")
  valid_611945 = validateParameter(valid_611945, JString, required = false,
                                 default = nil)
  if valid_611945 != nil:
    section.add "X-Amz-Credential", valid_611945
  var valid_611946 = header.getOrDefault("X-Amz-Security-Token")
  valid_611946 = validateParameter(valid_611946, JString, required = false,
                                 default = nil)
  if valid_611946 != nil:
    section.add "X-Amz-Security-Token", valid_611946
  var valid_611947 = header.getOrDefault("X-Amz-Algorithm")
  valid_611947 = validateParameter(valid_611947, JString, required = false,
                                 default = nil)
  if valid_611947 != nil:
    section.add "X-Amz-Algorithm", valid_611947
  var valid_611948 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611948 = validateParameter(valid_611948, JString, required = false,
                                 default = nil)
  if valid_611948 != nil:
    section.add "X-Amz-SignedHeaders", valid_611948
  result.add "header", section
  ## parameters in `formData` object:
  ##   OrganizationsPolicyId: JString
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   EntityPath: JString (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  section = newJObject()
  var valid_611949 = formData.getOrDefault("OrganizationsPolicyId")
  valid_611949 = validateParameter(valid_611949, JString, required = false,
                                 default = nil)
  if valid_611949 != nil:
    section.add "OrganizationsPolicyId", valid_611949
  assert formData != nil,
        "formData argument is necessary due to required `EntityPath` field"
  var valid_611950 = formData.getOrDefault("EntityPath")
  valid_611950 = validateParameter(valid_611950, JString, required = true,
                                 default = nil)
  if valid_611950 != nil:
    section.add "EntityPath", valid_611950
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611951: Call_PostGenerateOrganizationsAccessReport_611937;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611951.validator(path, query, header, formData, body)
  let scheme = call_611951.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611951.url(scheme.get, call_611951.host, call_611951.base,
                         call_611951.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611951, url, valid)

proc call*(call_611952: Call_PostGenerateOrganizationsAccessReport_611937;
          EntityPath: string; OrganizationsPolicyId: string = "";
          Action: string = "GenerateOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateOrganizationsAccessReport
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   OrganizationsPolicyId: string
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   EntityPath: string (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  var query_611953 = newJObject()
  var formData_611954 = newJObject()
  add(formData_611954, "OrganizationsPolicyId", newJString(OrganizationsPolicyId))
  add(query_611953, "Action", newJString(Action))
  add(query_611953, "Version", newJString(Version))
  add(formData_611954, "EntityPath", newJString(EntityPath))
  result = call_611952.call(nil, query_611953, nil, formData_611954, nil)

var postGenerateOrganizationsAccessReport* = Call_PostGenerateOrganizationsAccessReport_611937(
    name: "postGenerateOrganizationsAccessReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateOrganizationsAccessReport",
    validator: validate_PostGenerateOrganizationsAccessReport_611938, base: "/",
    url: url_PostGenerateOrganizationsAccessReport_611939,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateOrganizationsAccessReport_611920 = ref object of OpenApiRestCall_609589
proc url_GetGenerateOrganizationsAccessReport_611922(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGenerateOrganizationsAccessReport_611921(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EntityPath: JString (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   OrganizationsPolicyId: JString
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EntityPath` field"
  var valid_611923 = query.getOrDefault("EntityPath")
  valid_611923 = validateParameter(valid_611923, JString, required = true,
                                 default = nil)
  if valid_611923 != nil:
    section.add "EntityPath", valid_611923
  var valid_611924 = query.getOrDefault("OrganizationsPolicyId")
  valid_611924 = validateParameter(valid_611924, JString, required = false,
                                 default = nil)
  if valid_611924 != nil:
    section.add "OrganizationsPolicyId", valid_611924
  var valid_611925 = query.getOrDefault("Action")
  valid_611925 = validateParameter(valid_611925, JString, required = true, default = newJString(
      "GenerateOrganizationsAccessReport"))
  if valid_611925 != nil:
    section.add "Action", valid_611925
  var valid_611926 = query.getOrDefault("Version")
  valid_611926 = validateParameter(valid_611926, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611926 != nil:
    section.add "Version", valid_611926
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611927 = header.getOrDefault("X-Amz-Signature")
  valid_611927 = validateParameter(valid_611927, JString, required = false,
                                 default = nil)
  if valid_611927 != nil:
    section.add "X-Amz-Signature", valid_611927
  var valid_611928 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611928 = validateParameter(valid_611928, JString, required = false,
                                 default = nil)
  if valid_611928 != nil:
    section.add "X-Amz-Content-Sha256", valid_611928
  var valid_611929 = header.getOrDefault("X-Amz-Date")
  valid_611929 = validateParameter(valid_611929, JString, required = false,
                                 default = nil)
  if valid_611929 != nil:
    section.add "X-Amz-Date", valid_611929
  var valid_611930 = header.getOrDefault("X-Amz-Credential")
  valid_611930 = validateParameter(valid_611930, JString, required = false,
                                 default = nil)
  if valid_611930 != nil:
    section.add "X-Amz-Credential", valid_611930
  var valid_611931 = header.getOrDefault("X-Amz-Security-Token")
  valid_611931 = validateParameter(valid_611931, JString, required = false,
                                 default = nil)
  if valid_611931 != nil:
    section.add "X-Amz-Security-Token", valid_611931
  var valid_611932 = header.getOrDefault("X-Amz-Algorithm")
  valid_611932 = validateParameter(valid_611932, JString, required = false,
                                 default = nil)
  if valid_611932 != nil:
    section.add "X-Amz-Algorithm", valid_611932
  var valid_611933 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611933 = validateParameter(valid_611933, JString, required = false,
                                 default = nil)
  if valid_611933 != nil:
    section.add "X-Amz-SignedHeaders", valid_611933
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611934: Call_GetGenerateOrganizationsAccessReport_611920;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611934.validator(path, query, header, formData, body)
  let scheme = call_611934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611934.url(scheme.get, call_611934.host, call_611934.base,
                         call_611934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611934, url, valid)

proc call*(call_611935: Call_GetGenerateOrganizationsAccessReport_611920;
          EntityPath: string; OrganizationsPolicyId: string = "";
          Action: string = "GenerateOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateOrganizationsAccessReport
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   EntityPath: string (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   OrganizationsPolicyId: string
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611936 = newJObject()
  add(query_611936, "EntityPath", newJString(EntityPath))
  add(query_611936, "OrganizationsPolicyId", newJString(OrganizationsPolicyId))
  add(query_611936, "Action", newJString(Action))
  add(query_611936, "Version", newJString(Version))
  result = call_611935.call(nil, query_611936, nil, nil, nil)

var getGenerateOrganizationsAccessReport* = Call_GetGenerateOrganizationsAccessReport_611920(
    name: "getGenerateOrganizationsAccessReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateOrganizationsAccessReport",
    validator: validate_GetGenerateOrganizationsAccessReport_611921, base: "/",
    url: url_GetGenerateOrganizationsAccessReport_611922,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateServiceLastAccessedDetails_611971 = ref object of OpenApiRestCall_609589
proc url_PostGenerateServiceLastAccessedDetails_611973(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGenerateServiceLastAccessedDetails_611972(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611974 = query.getOrDefault("Action")
  valid_611974 = validateParameter(valid_611974, JString, required = true, default = newJString(
      "GenerateServiceLastAccessedDetails"))
  if valid_611974 != nil:
    section.add "Action", valid_611974
  var valid_611975 = query.getOrDefault("Version")
  valid_611975 = validateParameter(valid_611975, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611975 != nil:
    section.add "Version", valid_611975
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611976 = header.getOrDefault("X-Amz-Signature")
  valid_611976 = validateParameter(valid_611976, JString, required = false,
                                 default = nil)
  if valid_611976 != nil:
    section.add "X-Amz-Signature", valid_611976
  var valid_611977 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611977 = validateParameter(valid_611977, JString, required = false,
                                 default = nil)
  if valid_611977 != nil:
    section.add "X-Amz-Content-Sha256", valid_611977
  var valid_611978 = header.getOrDefault("X-Amz-Date")
  valid_611978 = validateParameter(valid_611978, JString, required = false,
                                 default = nil)
  if valid_611978 != nil:
    section.add "X-Amz-Date", valid_611978
  var valid_611979 = header.getOrDefault("X-Amz-Credential")
  valid_611979 = validateParameter(valid_611979, JString, required = false,
                                 default = nil)
  if valid_611979 != nil:
    section.add "X-Amz-Credential", valid_611979
  var valid_611980 = header.getOrDefault("X-Amz-Security-Token")
  valid_611980 = validateParameter(valid_611980, JString, required = false,
                                 default = nil)
  if valid_611980 != nil:
    section.add "X-Amz-Security-Token", valid_611980
  var valid_611981 = header.getOrDefault("X-Amz-Algorithm")
  valid_611981 = validateParameter(valid_611981, JString, required = false,
                                 default = nil)
  if valid_611981 != nil:
    section.add "X-Amz-Algorithm", valid_611981
  var valid_611982 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611982 = validateParameter(valid_611982, JString, required = false,
                                 default = nil)
  if valid_611982 != nil:
    section.add "X-Amz-SignedHeaders", valid_611982
  result.add "header", section
  ## parameters in `formData` object:
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Arn` field"
  var valid_611983 = formData.getOrDefault("Arn")
  valid_611983 = validateParameter(valid_611983, JString, required = true,
                                 default = nil)
  if valid_611983 != nil:
    section.add "Arn", valid_611983
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611984: Call_PostGenerateServiceLastAccessedDetails_611971;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611984.validator(path, query, header, formData, body)
  let scheme = call_611984.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611984.url(scheme.get, call_611984.host, call_611984.base,
                         call_611984.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611984, url, valid)

proc call*(call_611985: Call_PostGenerateServiceLastAccessedDetails_611971;
          Arn: string; Action: string = "GenerateServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateServiceLastAccessedDetails
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611986 = newJObject()
  var formData_611987 = newJObject()
  add(formData_611987, "Arn", newJString(Arn))
  add(query_611986, "Action", newJString(Action))
  add(query_611986, "Version", newJString(Version))
  result = call_611985.call(nil, query_611986, nil, formData_611987, nil)

var postGenerateServiceLastAccessedDetails* = Call_PostGenerateServiceLastAccessedDetails_611971(
    name: "postGenerateServiceLastAccessedDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateServiceLastAccessedDetails",
    validator: validate_PostGenerateServiceLastAccessedDetails_611972, base: "/",
    url: url_PostGenerateServiceLastAccessedDetails_611973,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateServiceLastAccessedDetails_611955 = ref object of OpenApiRestCall_609589
proc url_GetGenerateServiceLastAccessedDetails_611957(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGenerateServiceLastAccessedDetails_611956(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  var valid_611958 = query.getOrDefault("Action")
  valid_611958 = validateParameter(valid_611958, JString, required = true, default = newJString(
      "GenerateServiceLastAccessedDetails"))
  if valid_611958 != nil:
    section.add "Action", valid_611958
  var valid_611959 = query.getOrDefault("Version")
  valid_611959 = validateParameter(valid_611959, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611959 != nil:
    section.add "Version", valid_611959
  var valid_611960 = query.getOrDefault("Arn")
  valid_611960 = validateParameter(valid_611960, JString, required = true,
                                 default = nil)
  if valid_611960 != nil:
    section.add "Arn", valid_611960
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611961 = header.getOrDefault("X-Amz-Signature")
  valid_611961 = validateParameter(valid_611961, JString, required = false,
                                 default = nil)
  if valid_611961 != nil:
    section.add "X-Amz-Signature", valid_611961
  var valid_611962 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611962 = validateParameter(valid_611962, JString, required = false,
                                 default = nil)
  if valid_611962 != nil:
    section.add "X-Amz-Content-Sha256", valid_611962
  var valid_611963 = header.getOrDefault("X-Amz-Date")
  valid_611963 = validateParameter(valid_611963, JString, required = false,
                                 default = nil)
  if valid_611963 != nil:
    section.add "X-Amz-Date", valid_611963
  var valid_611964 = header.getOrDefault("X-Amz-Credential")
  valid_611964 = validateParameter(valid_611964, JString, required = false,
                                 default = nil)
  if valid_611964 != nil:
    section.add "X-Amz-Credential", valid_611964
  var valid_611965 = header.getOrDefault("X-Amz-Security-Token")
  valid_611965 = validateParameter(valid_611965, JString, required = false,
                                 default = nil)
  if valid_611965 != nil:
    section.add "X-Amz-Security-Token", valid_611965
  var valid_611966 = header.getOrDefault("X-Amz-Algorithm")
  valid_611966 = validateParameter(valid_611966, JString, required = false,
                                 default = nil)
  if valid_611966 != nil:
    section.add "X-Amz-Algorithm", valid_611966
  var valid_611967 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611967 = validateParameter(valid_611967, JString, required = false,
                                 default = nil)
  if valid_611967 != nil:
    section.add "X-Amz-SignedHeaders", valid_611967
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611968: Call_GetGenerateServiceLastAccessedDetails_611955;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611968.validator(path, query, header, formData, body)
  let scheme = call_611968.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611968.url(scheme.get, call_611968.host, call_611968.base,
                         call_611968.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611968, url, valid)

proc call*(call_611969: Call_GetGenerateServiceLastAccessedDetails_611955;
          Arn: string; Action: string = "GenerateServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateServiceLastAccessedDetails
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_611970 = newJObject()
  add(query_611970, "Action", newJString(Action))
  add(query_611970, "Version", newJString(Version))
  add(query_611970, "Arn", newJString(Arn))
  result = call_611969.call(nil, query_611970, nil, nil, nil)

var getGenerateServiceLastAccessedDetails* = Call_GetGenerateServiceLastAccessedDetails_611955(
    name: "getGenerateServiceLastAccessedDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateServiceLastAccessedDetails",
    validator: validate_GetGenerateServiceLastAccessedDetails_611956, base: "/",
    url: url_GetGenerateServiceLastAccessedDetails_611957,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccessKeyLastUsed_612004 = ref object of OpenApiRestCall_609589
proc url_PostGetAccessKeyLastUsed_612006(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccessKeyLastUsed_612005(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612007 = query.getOrDefault("Action")
  valid_612007 = validateParameter(valid_612007, JString, required = true,
                                 default = newJString("GetAccessKeyLastUsed"))
  if valid_612007 != nil:
    section.add "Action", valid_612007
  var valid_612008 = query.getOrDefault("Version")
  valid_612008 = validateParameter(valid_612008, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612008 != nil:
    section.add "Version", valid_612008
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612009 = header.getOrDefault("X-Amz-Signature")
  valid_612009 = validateParameter(valid_612009, JString, required = false,
                                 default = nil)
  if valid_612009 != nil:
    section.add "X-Amz-Signature", valid_612009
  var valid_612010 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612010 = validateParameter(valid_612010, JString, required = false,
                                 default = nil)
  if valid_612010 != nil:
    section.add "X-Amz-Content-Sha256", valid_612010
  var valid_612011 = header.getOrDefault("X-Amz-Date")
  valid_612011 = validateParameter(valid_612011, JString, required = false,
                                 default = nil)
  if valid_612011 != nil:
    section.add "X-Amz-Date", valid_612011
  var valid_612012 = header.getOrDefault("X-Amz-Credential")
  valid_612012 = validateParameter(valid_612012, JString, required = false,
                                 default = nil)
  if valid_612012 != nil:
    section.add "X-Amz-Credential", valid_612012
  var valid_612013 = header.getOrDefault("X-Amz-Security-Token")
  valid_612013 = validateParameter(valid_612013, JString, required = false,
                                 default = nil)
  if valid_612013 != nil:
    section.add "X-Amz-Security-Token", valid_612013
  var valid_612014 = header.getOrDefault("X-Amz-Algorithm")
  valid_612014 = validateParameter(valid_612014, JString, required = false,
                                 default = nil)
  if valid_612014 != nil:
    section.add "X-Amz-Algorithm", valid_612014
  var valid_612015 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612015 = validateParameter(valid_612015, JString, required = false,
                                 default = nil)
  if valid_612015 != nil:
    section.add "X-Amz-SignedHeaders", valid_612015
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_612016 = formData.getOrDefault("AccessKeyId")
  valid_612016 = validateParameter(valid_612016, JString, required = true,
                                 default = nil)
  if valid_612016 != nil:
    section.add "AccessKeyId", valid_612016
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612017: Call_PostGetAccessKeyLastUsed_612004; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  let valid = call_612017.validator(path, query, header, formData, body)
  let scheme = call_612017.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612017.url(scheme.get, call_612017.host, call_612017.base,
                         call_612017.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612017, url, valid)

proc call*(call_612018: Call_PostGetAccessKeyLastUsed_612004; AccessKeyId: string;
          Action: string = "GetAccessKeyLastUsed"; Version: string = "2010-05-08"): Recallable =
  ## postGetAccessKeyLastUsed
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ##   AccessKeyId: string (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612019 = newJObject()
  var formData_612020 = newJObject()
  add(formData_612020, "AccessKeyId", newJString(AccessKeyId))
  add(query_612019, "Action", newJString(Action))
  add(query_612019, "Version", newJString(Version))
  result = call_612018.call(nil, query_612019, nil, formData_612020, nil)

var postGetAccessKeyLastUsed* = Call_PostGetAccessKeyLastUsed_612004(
    name: "postGetAccessKeyLastUsed", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccessKeyLastUsed",
    validator: validate_PostGetAccessKeyLastUsed_612005, base: "/",
    url: url_PostGetAccessKeyLastUsed_612006, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccessKeyLastUsed_611988 = ref object of OpenApiRestCall_609589
proc url_GetGetAccessKeyLastUsed_611990(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccessKeyLastUsed_611989(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   AccessKeyId: JString (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_611991 = query.getOrDefault("Action")
  valid_611991 = validateParameter(valid_611991, JString, required = true,
                                 default = newJString("GetAccessKeyLastUsed"))
  if valid_611991 != nil:
    section.add "Action", valid_611991
  var valid_611992 = query.getOrDefault("AccessKeyId")
  valid_611992 = validateParameter(valid_611992, JString, required = true,
                                 default = nil)
  if valid_611992 != nil:
    section.add "AccessKeyId", valid_611992
  var valid_611993 = query.getOrDefault("Version")
  valid_611993 = validateParameter(valid_611993, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611993 != nil:
    section.add "Version", valid_611993
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611994 = header.getOrDefault("X-Amz-Signature")
  valid_611994 = validateParameter(valid_611994, JString, required = false,
                                 default = nil)
  if valid_611994 != nil:
    section.add "X-Amz-Signature", valid_611994
  var valid_611995 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611995 = validateParameter(valid_611995, JString, required = false,
                                 default = nil)
  if valid_611995 != nil:
    section.add "X-Amz-Content-Sha256", valid_611995
  var valid_611996 = header.getOrDefault("X-Amz-Date")
  valid_611996 = validateParameter(valid_611996, JString, required = false,
                                 default = nil)
  if valid_611996 != nil:
    section.add "X-Amz-Date", valid_611996
  var valid_611997 = header.getOrDefault("X-Amz-Credential")
  valid_611997 = validateParameter(valid_611997, JString, required = false,
                                 default = nil)
  if valid_611997 != nil:
    section.add "X-Amz-Credential", valid_611997
  var valid_611998 = header.getOrDefault("X-Amz-Security-Token")
  valid_611998 = validateParameter(valid_611998, JString, required = false,
                                 default = nil)
  if valid_611998 != nil:
    section.add "X-Amz-Security-Token", valid_611998
  var valid_611999 = header.getOrDefault("X-Amz-Algorithm")
  valid_611999 = validateParameter(valid_611999, JString, required = false,
                                 default = nil)
  if valid_611999 != nil:
    section.add "X-Amz-Algorithm", valid_611999
  var valid_612000 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612000 = validateParameter(valid_612000, JString, required = false,
                                 default = nil)
  if valid_612000 != nil:
    section.add "X-Amz-SignedHeaders", valid_612000
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612001: Call_GetGetAccessKeyLastUsed_611988; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  let valid = call_612001.validator(path, query, header, formData, body)
  let scheme = call_612001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612001.url(scheme.get, call_612001.host, call_612001.base,
                         call_612001.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612001, url, valid)

proc call*(call_612002: Call_GetGetAccessKeyLastUsed_611988; AccessKeyId: string;
          Action: string = "GetAccessKeyLastUsed"; Version: string = "2010-05-08"): Recallable =
  ## getGetAccessKeyLastUsed
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ##   Action: string (required)
  ##   AccessKeyId: string (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_612003 = newJObject()
  add(query_612003, "Action", newJString(Action))
  add(query_612003, "AccessKeyId", newJString(AccessKeyId))
  add(query_612003, "Version", newJString(Version))
  result = call_612002.call(nil, query_612003, nil, nil, nil)

var getGetAccessKeyLastUsed* = Call_GetGetAccessKeyLastUsed_611988(
    name: "getGetAccessKeyLastUsed", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccessKeyLastUsed",
    validator: validate_GetGetAccessKeyLastUsed_611989, base: "/",
    url: url_GetGetAccessKeyLastUsed_611990, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountAuthorizationDetails_612039 = ref object of OpenApiRestCall_609589
proc url_PostGetAccountAuthorizationDetails_612041(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccountAuthorizationDetails_612040(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612042 = query.getOrDefault("Action")
  valid_612042 = validateParameter(valid_612042, JString, required = true, default = newJString(
      "GetAccountAuthorizationDetails"))
  if valid_612042 != nil:
    section.add "Action", valid_612042
  var valid_612043 = query.getOrDefault("Version")
  valid_612043 = validateParameter(valid_612043, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612043 != nil:
    section.add "Version", valid_612043
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612044 = header.getOrDefault("X-Amz-Signature")
  valid_612044 = validateParameter(valid_612044, JString, required = false,
                                 default = nil)
  if valid_612044 != nil:
    section.add "X-Amz-Signature", valid_612044
  var valid_612045 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612045 = validateParameter(valid_612045, JString, required = false,
                                 default = nil)
  if valid_612045 != nil:
    section.add "X-Amz-Content-Sha256", valid_612045
  var valid_612046 = header.getOrDefault("X-Amz-Date")
  valid_612046 = validateParameter(valid_612046, JString, required = false,
                                 default = nil)
  if valid_612046 != nil:
    section.add "X-Amz-Date", valid_612046
  var valid_612047 = header.getOrDefault("X-Amz-Credential")
  valid_612047 = validateParameter(valid_612047, JString, required = false,
                                 default = nil)
  if valid_612047 != nil:
    section.add "X-Amz-Credential", valid_612047
  var valid_612048 = header.getOrDefault("X-Amz-Security-Token")
  valid_612048 = validateParameter(valid_612048, JString, required = false,
                                 default = nil)
  if valid_612048 != nil:
    section.add "X-Amz-Security-Token", valid_612048
  var valid_612049 = header.getOrDefault("X-Amz-Algorithm")
  valid_612049 = validateParameter(valid_612049, JString, required = false,
                                 default = nil)
  if valid_612049 != nil:
    section.add "X-Amz-Algorithm", valid_612049
  var valid_612050 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612050 = validateParameter(valid_612050, JString, required = false,
                                 default = nil)
  if valid_612050 != nil:
    section.add "X-Amz-SignedHeaders", valid_612050
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  section = newJObject()
  var valid_612051 = formData.getOrDefault("Marker")
  valid_612051 = validateParameter(valid_612051, JString, required = false,
                                 default = nil)
  if valid_612051 != nil:
    section.add "Marker", valid_612051
  var valid_612052 = formData.getOrDefault("MaxItems")
  valid_612052 = validateParameter(valid_612052, JInt, required = false, default = nil)
  if valid_612052 != nil:
    section.add "MaxItems", valid_612052
  var valid_612053 = formData.getOrDefault("Filter")
  valid_612053 = validateParameter(valid_612053, JArray, required = false,
                                 default = nil)
  if valid_612053 != nil:
    section.add "Filter", valid_612053
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612054: Call_PostGetAccountAuthorizationDetails_612039;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_612054.validator(path, query, header, formData, body)
  let scheme = call_612054.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612054.url(scheme.get, call_612054.host, call_612054.base,
                         call_612054.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612054, url, valid)

proc call*(call_612055: Call_PostGetAccountAuthorizationDetails_612039;
          Marker: string = ""; Action: string = "GetAccountAuthorizationDetails";
          MaxItems: int = 0; Version: string = "2010-05-08"; Filter: JsonNode = nil): Recallable =
  ## postGetAccountAuthorizationDetails
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  var query_612056 = newJObject()
  var formData_612057 = newJObject()
  add(formData_612057, "Marker", newJString(Marker))
  add(query_612056, "Action", newJString(Action))
  add(formData_612057, "MaxItems", newJInt(MaxItems))
  add(query_612056, "Version", newJString(Version))
  if Filter != nil:
    formData_612057.add "Filter", Filter
  result = call_612055.call(nil, query_612056, nil, formData_612057, nil)

var postGetAccountAuthorizationDetails* = Call_PostGetAccountAuthorizationDetails_612039(
    name: "postGetAccountAuthorizationDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountAuthorizationDetails",
    validator: validate_PostGetAccountAuthorizationDetails_612040, base: "/",
    url: url_PostGetAccountAuthorizationDetails_612041,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountAuthorizationDetails_612021 = ref object of OpenApiRestCall_609589
proc url_GetGetAccountAuthorizationDetails_612023(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccountAuthorizationDetails_612022(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612024 = query.getOrDefault("Marker")
  valid_612024 = validateParameter(valid_612024, JString, required = false,
                                 default = nil)
  if valid_612024 != nil:
    section.add "Marker", valid_612024
  var valid_612025 = query.getOrDefault("MaxItems")
  valid_612025 = validateParameter(valid_612025, JInt, required = false, default = nil)
  if valid_612025 != nil:
    section.add "MaxItems", valid_612025
  var valid_612026 = query.getOrDefault("Filter")
  valid_612026 = validateParameter(valid_612026, JArray, required = false,
                                 default = nil)
  if valid_612026 != nil:
    section.add "Filter", valid_612026
  var valid_612027 = query.getOrDefault("Action")
  valid_612027 = validateParameter(valid_612027, JString, required = true, default = newJString(
      "GetAccountAuthorizationDetails"))
  if valid_612027 != nil:
    section.add "Action", valid_612027
  var valid_612028 = query.getOrDefault("Version")
  valid_612028 = validateParameter(valid_612028, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612028 != nil:
    section.add "Version", valid_612028
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612029 = header.getOrDefault("X-Amz-Signature")
  valid_612029 = validateParameter(valid_612029, JString, required = false,
                                 default = nil)
  if valid_612029 != nil:
    section.add "X-Amz-Signature", valid_612029
  var valid_612030 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612030 = validateParameter(valid_612030, JString, required = false,
                                 default = nil)
  if valid_612030 != nil:
    section.add "X-Amz-Content-Sha256", valid_612030
  var valid_612031 = header.getOrDefault("X-Amz-Date")
  valid_612031 = validateParameter(valid_612031, JString, required = false,
                                 default = nil)
  if valid_612031 != nil:
    section.add "X-Amz-Date", valid_612031
  var valid_612032 = header.getOrDefault("X-Amz-Credential")
  valid_612032 = validateParameter(valid_612032, JString, required = false,
                                 default = nil)
  if valid_612032 != nil:
    section.add "X-Amz-Credential", valid_612032
  var valid_612033 = header.getOrDefault("X-Amz-Security-Token")
  valid_612033 = validateParameter(valid_612033, JString, required = false,
                                 default = nil)
  if valid_612033 != nil:
    section.add "X-Amz-Security-Token", valid_612033
  var valid_612034 = header.getOrDefault("X-Amz-Algorithm")
  valid_612034 = validateParameter(valid_612034, JString, required = false,
                                 default = nil)
  if valid_612034 != nil:
    section.add "X-Amz-Algorithm", valid_612034
  var valid_612035 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612035 = validateParameter(valid_612035, JString, required = false,
                                 default = nil)
  if valid_612035 != nil:
    section.add "X-Amz-SignedHeaders", valid_612035
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612036: Call_GetGetAccountAuthorizationDetails_612021;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_612036.validator(path, query, header, formData, body)
  let scheme = call_612036.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612036.url(scheme.get, call_612036.host, call_612036.base,
                         call_612036.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612036, url, valid)

proc call*(call_612037: Call_GetGetAccountAuthorizationDetails_612021;
          Marker: string = ""; MaxItems: int = 0; Filter: JsonNode = nil;
          Action: string = "GetAccountAuthorizationDetails";
          Version: string = "2010-05-08"): Recallable =
  ## getGetAccountAuthorizationDetails
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612038 = newJObject()
  add(query_612038, "Marker", newJString(Marker))
  add(query_612038, "MaxItems", newJInt(MaxItems))
  if Filter != nil:
    query_612038.add "Filter", Filter
  add(query_612038, "Action", newJString(Action))
  add(query_612038, "Version", newJString(Version))
  result = call_612037.call(nil, query_612038, nil, nil, nil)

var getGetAccountAuthorizationDetails* = Call_GetGetAccountAuthorizationDetails_612021(
    name: "getGetAccountAuthorizationDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountAuthorizationDetails",
    validator: validate_GetGetAccountAuthorizationDetails_612022, base: "/",
    url: url_GetGetAccountAuthorizationDetails_612023,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountPasswordPolicy_612073 = ref object of OpenApiRestCall_609589
proc url_PostGetAccountPasswordPolicy_612075(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccountPasswordPolicy_612074(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612076 = query.getOrDefault("Action")
  valid_612076 = validateParameter(valid_612076, JString, required = true, default = newJString(
      "GetAccountPasswordPolicy"))
  if valid_612076 != nil:
    section.add "Action", valid_612076
  var valid_612077 = query.getOrDefault("Version")
  valid_612077 = validateParameter(valid_612077, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612077 != nil:
    section.add "Version", valid_612077
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612078 = header.getOrDefault("X-Amz-Signature")
  valid_612078 = validateParameter(valid_612078, JString, required = false,
                                 default = nil)
  if valid_612078 != nil:
    section.add "X-Amz-Signature", valid_612078
  var valid_612079 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612079 = validateParameter(valid_612079, JString, required = false,
                                 default = nil)
  if valid_612079 != nil:
    section.add "X-Amz-Content-Sha256", valid_612079
  var valid_612080 = header.getOrDefault("X-Amz-Date")
  valid_612080 = validateParameter(valid_612080, JString, required = false,
                                 default = nil)
  if valid_612080 != nil:
    section.add "X-Amz-Date", valid_612080
  var valid_612081 = header.getOrDefault("X-Amz-Credential")
  valid_612081 = validateParameter(valid_612081, JString, required = false,
                                 default = nil)
  if valid_612081 != nil:
    section.add "X-Amz-Credential", valid_612081
  var valid_612082 = header.getOrDefault("X-Amz-Security-Token")
  valid_612082 = validateParameter(valid_612082, JString, required = false,
                                 default = nil)
  if valid_612082 != nil:
    section.add "X-Amz-Security-Token", valid_612082
  var valid_612083 = header.getOrDefault("X-Amz-Algorithm")
  valid_612083 = validateParameter(valid_612083, JString, required = false,
                                 default = nil)
  if valid_612083 != nil:
    section.add "X-Amz-Algorithm", valid_612083
  var valid_612084 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612084 = validateParameter(valid_612084, JString, required = false,
                                 default = nil)
  if valid_612084 != nil:
    section.add "X-Amz-SignedHeaders", valid_612084
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612085: Call_PostGetAccountPasswordPolicy_612073; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  let valid = call_612085.validator(path, query, header, formData, body)
  let scheme = call_612085.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612085.url(scheme.get, call_612085.host, call_612085.base,
                         call_612085.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612085, url, valid)

proc call*(call_612086: Call_PostGetAccountPasswordPolicy_612073;
          Action: string = "GetAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetAccountPasswordPolicy
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612087 = newJObject()
  add(query_612087, "Action", newJString(Action))
  add(query_612087, "Version", newJString(Version))
  result = call_612086.call(nil, query_612087, nil, nil, nil)

var postGetAccountPasswordPolicy* = Call_PostGetAccountPasswordPolicy_612073(
    name: "postGetAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountPasswordPolicy",
    validator: validate_PostGetAccountPasswordPolicy_612074, base: "/",
    url: url_PostGetAccountPasswordPolicy_612075,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountPasswordPolicy_612058 = ref object of OpenApiRestCall_609589
proc url_GetGetAccountPasswordPolicy_612060(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccountPasswordPolicy_612059(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612061 = query.getOrDefault("Action")
  valid_612061 = validateParameter(valid_612061, JString, required = true, default = newJString(
      "GetAccountPasswordPolicy"))
  if valid_612061 != nil:
    section.add "Action", valid_612061
  var valid_612062 = query.getOrDefault("Version")
  valid_612062 = validateParameter(valid_612062, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612062 != nil:
    section.add "Version", valid_612062
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612063 = header.getOrDefault("X-Amz-Signature")
  valid_612063 = validateParameter(valid_612063, JString, required = false,
                                 default = nil)
  if valid_612063 != nil:
    section.add "X-Amz-Signature", valid_612063
  var valid_612064 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612064 = validateParameter(valid_612064, JString, required = false,
                                 default = nil)
  if valid_612064 != nil:
    section.add "X-Amz-Content-Sha256", valid_612064
  var valid_612065 = header.getOrDefault("X-Amz-Date")
  valid_612065 = validateParameter(valid_612065, JString, required = false,
                                 default = nil)
  if valid_612065 != nil:
    section.add "X-Amz-Date", valid_612065
  var valid_612066 = header.getOrDefault("X-Amz-Credential")
  valid_612066 = validateParameter(valid_612066, JString, required = false,
                                 default = nil)
  if valid_612066 != nil:
    section.add "X-Amz-Credential", valid_612066
  var valid_612067 = header.getOrDefault("X-Amz-Security-Token")
  valid_612067 = validateParameter(valid_612067, JString, required = false,
                                 default = nil)
  if valid_612067 != nil:
    section.add "X-Amz-Security-Token", valid_612067
  var valid_612068 = header.getOrDefault("X-Amz-Algorithm")
  valid_612068 = validateParameter(valid_612068, JString, required = false,
                                 default = nil)
  if valid_612068 != nil:
    section.add "X-Amz-Algorithm", valid_612068
  var valid_612069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612069 = validateParameter(valid_612069, JString, required = false,
                                 default = nil)
  if valid_612069 != nil:
    section.add "X-Amz-SignedHeaders", valid_612069
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612070: Call_GetGetAccountPasswordPolicy_612058; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  let valid = call_612070.validator(path, query, header, formData, body)
  let scheme = call_612070.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612070.url(scheme.get, call_612070.host, call_612070.base,
                         call_612070.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612070, url, valid)

proc call*(call_612071: Call_GetGetAccountPasswordPolicy_612058;
          Action: string = "GetAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetAccountPasswordPolicy
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612072 = newJObject()
  add(query_612072, "Action", newJString(Action))
  add(query_612072, "Version", newJString(Version))
  result = call_612071.call(nil, query_612072, nil, nil, nil)

var getGetAccountPasswordPolicy* = Call_GetGetAccountPasswordPolicy_612058(
    name: "getGetAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountPasswordPolicy",
    validator: validate_GetGetAccountPasswordPolicy_612059, base: "/",
    url: url_GetGetAccountPasswordPolicy_612060,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountSummary_612103 = ref object of OpenApiRestCall_609589
proc url_PostGetAccountSummary_612105(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccountSummary_612104(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612106 = query.getOrDefault("Action")
  valid_612106 = validateParameter(valid_612106, JString, required = true,
                                 default = newJString("GetAccountSummary"))
  if valid_612106 != nil:
    section.add "Action", valid_612106
  var valid_612107 = query.getOrDefault("Version")
  valid_612107 = validateParameter(valid_612107, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612107 != nil:
    section.add "Version", valid_612107
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612108 = header.getOrDefault("X-Amz-Signature")
  valid_612108 = validateParameter(valid_612108, JString, required = false,
                                 default = nil)
  if valid_612108 != nil:
    section.add "X-Amz-Signature", valid_612108
  var valid_612109 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612109 = validateParameter(valid_612109, JString, required = false,
                                 default = nil)
  if valid_612109 != nil:
    section.add "X-Amz-Content-Sha256", valid_612109
  var valid_612110 = header.getOrDefault("X-Amz-Date")
  valid_612110 = validateParameter(valid_612110, JString, required = false,
                                 default = nil)
  if valid_612110 != nil:
    section.add "X-Amz-Date", valid_612110
  var valid_612111 = header.getOrDefault("X-Amz-Credential")
  valid_612111 = validateParameter(valid_612111, JString, required = false,
                                 default = nil)
  if valid_612111 != nil:
    section.add "X-Amz-Credential", valid_612111
  var valid_612112 = header.getOrDefault("X-Amz-Security-Token")
  valid_612112 = validateParameter(valid_612112, JString, required = false,
                                 default = nil)
  if valid_612112 != nil:
    section.add "X-Amz-Security-Token", valid_612112
  var valid_612113 = header.getOrDefault("X-Amz-Algorithm")
  valid_612113 = validateParameter(valid_612113, JString, required = false,
                                 default = nil)
  if valid_612113 != nil:
    section.add "X-Amz-Algorithm", valid_612113
  var valid_612114 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612114 = validateParameter(valid_612114, JString, required = false,
                                 default = nil)
  if valid_612114 != nil:
    section.add "X-Amz-SignedHeaders", valid_612114
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612115: Call_PostGetAccountSummary_612103; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612115.validator(path, query, header, formData, body)
  let scheme = call_612115.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612115.url(scheme.get, call_612115.host, call_612115.base,
                         call_612115.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612115, url, valid)

proc call*(call_612116: Call_PostGetAccountSummary_612103;
          Action: string = "GetAccountSummary"; Version: string = "2010-05-08"): Recallable =
  ## postGetAccountSummary
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612117 = newJObject()
  add(query_612117, "Action", newJString(Action))
  add(query_612117, "Version", newJString(Version))
  result = call_612116.call(nil, query_612117, nil, nil, nil)

var postGetAccountSummary* = Call_PostGetAccountSummary_612103(
    name: "postGetAccountSummary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountSummary",
    validator: validate_PostGetAccountSummary_612104, base: "/",
    url: url_PostGetAccountSummary_612105, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountSummary_612088 = ref object of OpenApiRestCall_609589
proc url_GetGetAccountSummary_612090(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccountSummary_612089(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612091 = query.getOrDefault("Action")
  valid_612091 = validateParameter(valid_612091, JString, required = true,
                                 default = newJString("GetAccountSummary"))
  if valid_612091 != nil:
    section.add "Action", valid_612091
  var valid_612092 = query.getOrDefault("Version")
  valid_612092 = validateParameter(valid_612092, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612092 != nil:
    section.add "Version", valid_612092
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612093 = header.getOrDefault("X-Amz-Signature")
  valid_612093 = validateParameter(valid_612093, JString, required = false,
                                 default = nil)
  if valid_612093 != nil:
    section.add "X-Amz-Signature", valid_612093
  var valid_612094 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612094 = validateParameter(valid_612094, JString, required = false,
                                 default = nil)
  if valid_612094 != nil:
    section.add "X-Amz-Content-Sha256", valid_612094
  var valid_612095 = header.getOrDefault("X-Amz-Date")
  valid_612095 = validateParameter(valid_612095, JString, required = false,
                                 default = nil)
  if valid_612095 != nil:
    section.add "X-Amz-Date", valid_612095
  var valid_612096 = header.getOrDefault("X-Amz-Credential")
  valid_612096 = validateParameter(valid_612096, JString, required = false,
                                 default = nil)
  if valid_612096 != nil:
    section.add "X-Amz-Credential", valid_612096
  var valid_612097 = header.getOrDefault("X-Amz-Security-Token")
  valid_612097 = validateParameter(valid_612097, JString, required = false,
                                 default = nil)
  if valid_612097 != nil:
    section.add "X-Amz-Security-Token", valid_612097
  var valid_612098 = header.getOrDefault("X-Amz-Algorithm")
  valid_612098 = validateParameter(valid_612098, JString, required = false,
                                 default = nil)
  if valid_612098 != nil:
    section.add "X-Amz-Algorithm", valid_612098
  var valid_612099 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612099 = validateParameter(valid_612099, JString, required = false,
                                 default = nil)
  if valid_612099 != nil:
    section.add "X-Amz-SignedHeaders", valid_612099
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612100: Call_GetGetAccountSummary_612088; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612100.validator(path, query, header, formData, body)
  let scheme = call_612100.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612100.url(scheme.get, call_612100.host, call_612100.base,
                         call_612100.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612100, url, valid)

proc call*(call_612101: Call_GetGetAccountSummary_612088;
          Action: string = "GetAccountSummary"; Version: string = "2010-05-08"): Recallable =
  ## getGetAccountSummary
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612102 = newJObject()
  add(query_612102, "Action", newJString(Action))
  add(query_612102, "Version", newJString(Version))
  result = call_612101.call(nil, query_612102, nil, nil, nil)

var getGetAccountSummary* = Call_GetGetAccountSummary_612088(
    name: "getGetAccountSummary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountSummary",
    validator: validate_GetGetAccountSummary_612089, base: "/",
    url: url_GetGetAccountSummary_612090, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetContextKeysForCustomPolicy_612134 = ref object of OpenApiRestCall_609589
proc url_PostGetContextKeysForCustomPolicy_612136(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetContextKeysForCustomPolicy_612135(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612137 = query.getOrDefault("Action")
  valid_612137 = validateParameter(valid_612137, JString, required = true, default = newJString(
      "GetContextKeysForCustomPolicy"))
  if valid_612137 != nil:
    section.add "Action", valid_612137
  var valid_612138 = query.getOrDefault("Version")
  valid_612138 = validateParameter(valid_612138, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612138 != nil:
    section.add "Version", valid_612138
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612139 = header.getOrDefault("X-Amz-Signature")
  valid_612139 = validateParameter(valid_612139, JString, required = false,
                                 default = nil)
  if valid_612139 != nil:
    section.add "X-Amz-Signature", valid_612139
  var valid_612140 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612140 = validateParameter(valid_612140, JString, required = false,
                                 default = nil)
  if valid_612140 != nil:
    section.add "X-Amz-Content-Sha256", valid_612140
  var valid_612141 = header.getOrDefault("X-Amz-Date")
  valid_612141 = validateParameter(valid_612141, JString, required = false,
                                 default = nil)
  if valid_612141 != nil:
    section.add "X-Amz-Date", valid_612141
  var valid_612142 = header.getOrDefault("X-Amz-Credential")
  valid_612142 = validateParameter(valid_612142, JString, required = false,
                                 default = nil)
  if valid_612142 != nil:
    section.add "X-Amz-Credential", valid_612142
  var valid_612143 = header.getOrDefault("X-Amz-Security-Token")
  valid_612143 = validateParameter(valid_612143, JString, required = false,
                                 default = nil)
  if valid_612143 != nil:
    section.add "X-Amz-Security-Token", valid_612143
  var valid_612144 = header.getOrDefault("X-Amz-Algorithm")
  valid_612144 = validateParameter(valid_612144, JString, required = false,
                                 default = nil)
  if valid_612144 != nil:
    section.add "X-Amz-Algorithm", valid_612144
  var valid_612145 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612145 = validateParameter(valid_612145, JString, required = false,
                                 default = nil)
  if valid_612145 != nil:
    section.add "X-Amz-SignedHeaders", valid_612145
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `PolicyInputList` field"
  var valid_612146 = formData.getOrDefault("PolicyInputList")
  valid_612146 = validateParameter(valid_612146, JArray, required = true, default = nil)
  if valid_612146 != nil:
    section.add "PolicyInputList", valid_612146
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612147: Call_PostGetContextKeysForCustomPolicy_612134;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  let valid = call_612147.validator(path, query, header, formData, body)
  let scheme = call_612147.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612147.url(scheme.get, call_612147.host, call_612147.base,
                         call_612147.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612147, url, valid)

proc call*(call_612148: Call_PostGetContextKeysForCustomPolicy_612134;
          PolicyInputList: JsonNode;
          Action: string = "GetContextKeysForCustomPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetContextKeysForCustomPolicy
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  var query_612149 = newJObject()
  var formData_612150 = newJObject()
  add(query_612149, "Action", newJString(Action))
  add(query_612149, "Version", newJString(Version))
  if PolicyInputList != nil:
    formData_612150.add "PolicyInputList", PolicyInputList
  result = call_612148.call(nil, query_612149, nil, formData_612150, nil)

var postGetContextKeysForCustomPolicy* = Call_PostGetContextKeysForCustomPolicy_612134(
    name: "postGetContextKeysForCustomPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForCustomPolicy",
    validator: validate_PostGetContextKeysForCustomPolicy_612135, base: "/",
    url: url_PostGetContextKeysForCustomPolicy_612136,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetContextKeysForCustomPolicy_612118 = ref object of OpenApiRestCall_609589
proc url_GetGetContextKeysForCustomPolicy_612120(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetContextKeysForCustomPolicy_612119(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyInputList` field"
  var valid_612121 = query.getOrDefault("PolicyInputList")
  valid_612121 = validateParameter(valid_612121, JArray, required = true, default = nil)
  if valid_612121 != nil:
    section.add "PolicyInputList", valid_612121
  var valid_612122 = query.getOrDefault("Action")
  valid_612122 = validateParameter(valid_612122, JString, required = true, default = newJString(
      "GetContextKeysForCustomPolicy"))
  if valid_612122 != nil:
    section.add "Action", valid_612122
  var valid_612123 = query.getOrDefault("Version")
  valid_612123 = validateParameter(valid_612123, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612123 != nil:
    section.add "Version", valid_612123
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612124 = header.getOrDefault("X-Amz-Signature")
  valid_612124 = validateParameter(valid_612124, JString, required = false,
                                 default = nil)
  if valid_612124 != nil:
    section.add "X-Amz-Signature", valid_612124
  var valid_612125 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612125 = validateParameter(valid_612125, JString, required = false,
                                 default = nil)
  if valid_612125 != nil:
    section.add "X-Amz-Content-Sha256", valid_612125
  var valid_612126 = header.getOrDefault("X-Amz-Date")
  valid_612126 = validateParameter(valid_612126, JString, required = false,
                                 default = nil)
  if valid_612126 != nil:
    section.add "X-Amz-Date", valid_612126
  var valid_612127 = header.getOrDefault("X-Amz-Credential")
  valid_612127 = validateParameter(valid_612127, JString, required = false,
                                 default = nil)
  if valid_612127 != nil:
    section.add "X-Amz-Credential", valid_612127
  var valid_612128 = header.getOrDefault("X-Amz-Security-Token")
  valid_612128 = validateParameter(valid_612128, JString, required = false,
                                 default = nil)
  if valid_612128 != nil:
    section.add "X-Amz-Security-Token", valid_612128
  var valid_612129 = header.getOrDefault("X-Amz-Algorithm")
  valid_612129 = validateParameter(valid_612129, JString, required = false,
                                 default = nil)
  if valid_612129 != nil:
    section.add "X-Amz-Algorithm", valid_612129
  var valid_612130 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612130 = validateParameter(valid_612130, JString, required = false,
                                 default = nil)
  if valid_612130 != nil:
    section.add "X-Amz-SignedHeaders", valid_612130
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612131: Call_GetGetContextKeysForCustomPolicy_612118;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  let valid = call_612131.validator(path, query, header, formData, body)
  let scheme = call_612131.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612131.url(scheme.get, call_612131.host, call_612131.base,
                         call_612131.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612131, url, valid)

proc call*(call_612132: Call_GetGetContextKeysForCustomPolicy_612118;
          PolicyInputList: JsonNode;
          Action: string = "GetContextKeysForCustomPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetContextKeysForCustomPolicy
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612133 = newJObject()
  if PolicyInputList != nil:
    query_612133.add "PolicyInputList", PolicyInputList
  add(query_612133, "Action", newJString(Action))
  add(query_612133, "Version", newJString(Version))
  result = call_612132.call(nil, query_612133, nil, nil, nil)

var getGetContextKeysForCustomPolicy* = Call_GetGetContextKeysForCustomPolicy_612118(
    name: "getGetContextKeysForCustomPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForCustomPolicy",
    validator: validate_GetGetContextKeysForCustomPolicy_612119, base: "/",
    url: url_GetGetContextKeysForCustomPolicy_612120,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetContextKeysForPrincipalPolicy_612168 = ref object of OpenApiRestCall_609589
proc url_PostGetContextKeysForPrincipalPolicy_612170(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetContextKeysForPrincipalPolicy_612169(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612171 = query.getOrDefault("Action")
  valid_612171 = validateParameter(valid_612171, JString, required = true, default = newJString(
      "GetContextKeysForPrincipalPolicy"))
  if valid_612171 != nil:
    section.add "Action", valid_612171
  var valid_612172 = query.getOrDefault("Version")
  valid_612172 = validateParameter(valid_612172, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612172 != nil:
    section.add "Version", valid_612172
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612173 = header.getOrDefault("X-Amz-Signature")
  valid_612173 = validateParameter(valid_612173, JString, required = false,
                                 default = nil)
  if valid_612173 != nil:
    section.add "X-Amz-Signature", valid_612173
  var valid_612174 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612174 = validateParameter(valid_612174, JString, required = false,
                                 default = nil)
  if valid_612174 != nil:
    section.add "X-Amz-Content-Sha256", valid_612174
  var valid_612175 = header.getOrDefault("X-Amz-Date")
  valid_612175 = validateParameter(valid_612175, JString, required = false,
                                 default = nil)
  if valid_612175 != nil:
    section.add "X-Amz-Date", valid_612175
  var valid_612176 = header.getOrDefault("X-Amz-Credential")
  valid_612176 = validateParameter(valid_612176, JString, required = false,
                                 default = nil)
  if valid_612176 != nil:
    section.add "X-Amz-Credential", valid_612176
  var valid_612177 = header.getOrDefault("X-Amz-Security-Token")
  valid_612177 = validateParameter(valid_612177, JString, required = false,
                                 default = nil)
  if valid_612177 != nil:
    section.add "X-Amz-Security-Token", valid_612177
  var valid_612178 = header.getOrDefault("X-Amz-Algorithm")
  valid_612178 = validateParameter(valid_612178, JString, required = false,
                                 default = nil)
  if valid_612178 != nil:
    section.add "X-Amz-Algorithm", valid_612178
  var valid_612179 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612179 = validateParameter(valid_612179, JString, required = false,
                                 default = nil)
  if valid_612179 != nil:
    section.add "X-Amz-SignedHeaders", valid_612179
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `PolicySourceArn` field"
  var valid_612180 = formData.getOrDefault("PolicySourceArn")
  valid_612180 = validateParameter(valid_612180, JString, required = true,
                                 default = nil)
  if valid_612180 != nil:
    section.add "PolicySourceArn", valid_612180
  var valid_612181 = formData.getOrDefault("PolicyInputList")
  valid_612181 = validateParameter(valid_612181, JArray, required = false,
                                 default = nil)
  if valid_612181 != nil:
    section.add "PolicyInputList", valid_612181
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612182: Call_PostGetContextKeysForPrincipalPolicy_612168;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  let valid = call_612182.validator(path, query, header, formData, body)
  let scheme = call_612182.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612182.url(scheme.get, call_612182.host, call_612182.base,
                         call_612182.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612182, url, valid)

proc call*(call_612183: Call_PostGetContextKeysForPrincipalPolicy_612168;
          PolicySourceArn: string;
          Action: string = "GetContextKeysForPrincipalPolicy";
          Version: string = "2010-05-08"; PolicyInputList: JsonNode = nil): Recallable =
  ## postGetContextKeysForPrincipalPolicy
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  var query_612184 = newJObject()
  var formData_612185 = newJObject()
  add(formData_612185, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_612184, "Action", newJString(Action))
  add(query_612184, "Version", newJString(Version))
  if PolicyInputList != nil:
    formData_612185.add "PolicyInputList", PolicyInputList
  result = call_612183.call(nil, query_612184, nil, formData_612185, nil)

var postGetContextKeysForPrincipalPolicy* = Call_PostGetContextKeysForPrincipalPolicy_612168(
    name: "postGetContextKeysForPrincipalPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForPrincipalPolicy",
    validator: validate_PostGetContextKeysForPrincipalPolicy_612169, base: "/",
    url: url_PostGetContextKeysForPrincipalPolicy_612170,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetContextKeysForPrincipalPolicy_612151 = ref object of OpenApiRestCall_609589
proc url_GetGetContextKeysForPrincipalPolicy_612153(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetContextKeysForPrincipalPolicy_612152(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicySourceArn` field"
  var valid_612154 = query.getOrDefault("PolicySourceArn")
  valid_612154 = validateParameter(valid_612154, JString, required = true,
                                 default = nil)
  if valid_612154 != nil:
    section.add "PolicySourceArn", valid_612154
  var valid_612155 = query.getOrDefault("PolicyInputList")
  valid_612155 = validateParameter(valid_612155, JArray, required = false,
                                 default = nil)
  if valid_612155 != nil:
    section.add "PolicyInputList", valid_612155
  var valid_612156 = query.getOrDefault("Action")
  valid_612156 = validateParameter(valid_612156, JString, required = true, default = newJString(
      "GetContextKeysForPrincipalPolicy"))
  if valid_612156 != nil:
    section.add "Action", valid_612156
  var valid_612157 = query.getOrDefault("Version")
  valid_612157 = validateParameter(valid_612157, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612157 != nil:
    section.add "Version", valid_612157
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612158 = header.getOrDefault("X-Amz-Signature")
  valid_612158 = validateParameter(valid_612158, JString, required = false,
                                 default = nil)
  if valid_612158 != nil:
    section.add "X-Amz-Signature", valid_612158
  var valid_612159 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612159 = validateParameter(valid_612159, JString, required = false,
                                 default = nil)
  if valid_612159 != nil:
    section.add "X-Amz-Content-Sha256", valid_612159
  var valid_612160 = header.getOrDefault("X-Amz-Date")
  valid_612160 = validateParameter(valid_612160, JString, required = false,
                                 default = nil)
  if valid_612160 != nil:
    section.add "X-Amz-Date", valid_612160
  var valid_612161 = header.getOrDefault("X-Amz-Credential")
  valid_612161 = validateParameter(valid_612161, JString, required = false,
                                 default = nil)
  if valid_612161 != nil:
    section.add "X-Amz-Credential", valid_612161
  var valid_612162 = header.getOrDefault("X-Amz-Security-Token")
  valid_612162 = validateParameter(valid_612162, JString, required = false,
                                 default = nil)
  if valid_612162 != nil:
    section.add "X-Amz-Security-Token", valid_612162
  var valid_612163 = header.getOrDefault("X-Amz-Algorithm")
  valid_612163 = validateParameter(valid_612163, JString, required = false,
                                 default = nil)
  if valid_612163 != nil:
    section.add "X-Amz-Algorithm", valid_612163
  var valid_612164 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612164 = validateParameter(valid_612164, JString, required = false,
                                 default = nil)
  if valid_612164 != nil:
    section.add "X-Amz-SignedHeaders", valid_612164
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612165: Call_GetGetContextKeysForPrincipalPolicy_612151;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  let valid = call_612165.validator(path, query, header, formData, body)
  let scheme = call_612165.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612165.url(scheme.get, call_612165.host, call_612165.base,
                         call_612165.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612165, url, valid)

proc call*(call_612166: Call_GetGetContextKeysForPrincipalPolicy_612151;
          PolicySourceArn: string; PolicyInputList: JsonNode = nil;
          Action: string = "GetContextKeysForPrincipalPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetContextKeysForPrincipalPolicy
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612167 = newJObject()
  add(query_612167, "PolicySourceArn", newJString(PolicySourceArn))
  if PolicyInputList != nil:
    query_612167.add "PolicyInputList", PolicyInputList
  add(query_612167, "Action", newJString(Action))
  add(query_612167, "Version", newJString(Version))
  result = call_612166.call(nil, query_612167, nil, nil, nil)

var getGetContextKeysForPrincipalPolicy* = Call_GetGetContextKeysForPrincipalPolicy_612151(
    name: "getGetContextKeysForPrincipalPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForPrincipalPolicy",
    validator: validate_GetGetContextKeysForPrincipalPolicy_612152, base: "/",
    url: url_GetGetContextKeysForPrincipalPolicy_612153,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetCredentialReport_612201 = ref object of OpenApiRestCall_609589
proc url_PostGetCredentialReport_612203(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetCredentialReport_612202(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612204 = query.getOrDefault("Action")
  valid_612204 = validateParameter(valid_612204, JString, required = true,
                                 default = newJString("GetCredentialReport"))
  if valid_612204 != nil:
    section.add "Action", valid_612204
  var valid_612205 = query.getOrDefault("Version")
  valid_612205 = validateParameter(valid_612205, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612205 != nil:
    section.add "Version", valid_612205
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612206 = header.getOrDefault("X-Amz-Signature")
  valid_612206 = validateParameter(valid_612206, JString, required = false,
                                 default = nil)
  if valid_612206 != nil:
    section.add "X-Amz-Signature", valid_612206
  var valid_612207 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612207 = validateParameter(valid_612207, JString, required = false,
                                 default = nil)
  if valid_612207 != nil:
    section.add "X-Amz-Content-Sha256", valid_612207
  var valid_612208 = header.getOrDefault("X-Amz-Date")
  valid_612208 = validateParameter(valid_612208, JString, required = false,
                                 default = nil)
  if valid_612208 != nil:
    section.add "X-Amz-Date", valid_612208
  var valid_612209 = header.getOrDefault("X-Amz-Credential")
  valid_612209 = validateParameter(valid_612209, JString, required = false,
                                 default = nil)
  if valid_612209 != nil:
    section.add "X-Amz-Credential", valid_612209
  var valid_612210 = header.getOrDefault("X-Amz-Security-Token")
  valid_612210 = validateParameter(valid_612210, JString, required = false,
                                 default = nil)
  if valid_612210 != nil:
    section.add "X-Amz-Security-Token", valid_612210
  var valid_612211 = header.getOrDefault("X-Amz-Algorithm")
  valid_612211 = validateParameter(valid_612211, JString, required = false,
                                 default = nil)
  if valid_612211 != nil:
    section.add "X-Amz-Algorithm", valid_612211
  var valid_612212 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612212 = validateParameter(valid_612212, JString, required = false,
                                 default = nil)
  if valid_612212 != nil:
    section.add "X-Amz-SignedHeaders", valid_612212
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612213: Call_PostGetCredentialReport_612201; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_612213.validator(path, query, header, formData, body)
  let scheme = call_612213.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612213.url(scheme.get, call_612213.host, call_612213.base,
                         call_612213.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612213, url, valid)

proc call*(call_612214: Call_PostGetCredentialReport_612201;
          Action: string = "GetCredentialReport"; Version: string = "2010-05-08"): Recallable =
  ## postGetCredentialReport
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612215 = newJObject()
  add(query_612215, "Action", newJString(Action))
  add(query_612215, "Version", newJString(Version))
  result = call_612214.call(nil, query_612215, nil, nil, nil)

var postGetCredentialReport* = Call_PostGetCredentialReport_612201(
    name: "postGetCredentialReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetCredentialReport",
    validator: validate_PostGetCredentialReport_612202, base: "/",
    url: url_PostGetCredentialReport_612203, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetCredentialReport_612186 = ref object of OpenApiRestCall_609589
proc url_GetGetCredentialReport_612188(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetCredentialReport_612187(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612189 = query.getOrDefault("Action")
  valid_612189 = validateParameter(valid_612189, JString, required = true,
                                 default = newJString("GetCredentialReport"))
  if valid_612189 != nil:
    section.add "Action", valid_612189
  var valid_612190 = query.getOrDefault("Version")
  valid_612190 = validateParameter(valid_612190, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612190 != nil:
    section.add "Version", valid_612190
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612191 = header.getOrDefault("X-Amz-Signature")
  valid_612191 = validateParameter(valid_612191, JString, required = false,
                                 default = nil)
  if valid_612191 != nil:
    section.add "X-Amz-Signature", valid_612191
  var valid_612192 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612192 = validateParameter(valid_612192, JString, required = false,
                                 default = nil)
  if valid_612192 != nil:
    section.add "X-Amz-Content-Sha256", valid_612192
  var valid_612193 = header.getOrDefault("X-Amz-Date")
  valid_612193 = validateParameter(valid_612193, JString, required = false,
                                 default = nil)
  if valid_612193 != nil:
    section.add "X-Amz-Date", valid_612193
  var valid_612194 = header.getOrDefault("X-Amz-Credential")
  valid_612194 = validateParameter(valid_612194, JString, required = false,
                                 default = nil)
  if valid_612194 != nil:
    section.add "X-Amz-Credential", valid_612194
  var valid_612195 = header.getOrDefault("X-Amz-Security-Token")
  valid_612195 = validateParameter(valid_612195, JString, required = false,
                                 default = nil)
  if valid_612195 != nil:
    section.add "X-Amz-Security-Token", valid_612195
  var valid_612196 = header.getOrDefault("X-Amz-Algorithm")
  valid_612196 = validateParameter(valid_612196, JString, required = false,
                                 default = nil)
  if valid_612196 != nil:
    section.add "X-Amz-Algorithm", valid_612196
  var valid_612197 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612197 = validateParameter(valid_612197, JString, required = false,
                                 default = nil)
  if valid_612197 != nil:
    section.add "X-Amz-SignedHeaders", valid_612197
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612198: Call_GetGetCredentialReport_612186; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_612198.validator(path, query, header, formData, body)
  let scheme = call_612198.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612198.url(scheme.get, call_612198.host, call_612198.base,
                         call_612198.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612198, url, valid)

proc call*(call_612199: Call_GetGetCredentialReport_612186;
          Action: string = "GetCredentialReport"; Version: string = "2010-05-08"): Recallable =
  ## getGetCredentialReport
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612200 = newJObject()
  add(query_612200, "Action", newJString(Action))
  add(query_612200, "Version", newJString(Version))
  result = call_612199.call(nil, query_612200, nil, nil, nil)

var getGetCredentialReport* = Call_GetGetCredentialReport_612186(
    name: "getGetCredentialReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetCredentialReport",
    validator: validate_GetGetCredentialReport_612187, base: "/",
    url: url_GetGetCredentialReport_612188, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetGroup_612234 = ref object of OpenApiRestCall_609589
proc url_PostGetGroup_612236(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetGroup_612235(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612237 = query.getOrDefault("Action")
  valid_612237 = validateParameter(valid_612237, JString, required = true,
                                 default = newJString("GetGroup"))
  if valid_612237 != nil:
    section.add "Action", valid_612237
  var valid_612238 = query.getOrDefault("Version")
  valid_612238 = validateParameter(valid_612238, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612238 != nil:
    section.add "Version", valid_612238
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612239 = header.getOrDefault("X-Amz-Signature")
  valid_612239 = validateParameter(valid_612239, JString, required = false,
                                 default = nil)
  if valid_612239 != nil:
    section.add "X-Amz-Signature", valid_612239
  var valid_612240 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612240 = validateParameter(valid_612240, JString, required = false,
                                 default = nil)
  if valid_612240 != nil:
    section.add "X-Amz-Content-Sha256", valid_612240
  var valid_612241 = header.getOrDefault("X-Amz-Date")
  valid_612241 = validateParameter(valid_612241, JString, required = false,
                                 default = nil)
  if valid_612241 != nil:
    section.add "X-Amz-Date", valid_612241
  var valid_612242 = header.getOrDefault("X-Amz-Credential")
  valid_612242 = validateParameter(valid_612242, JString, required = false,
                                 default = nil)
  if valid_612242 != nil:
    section.add "X-Amz-Credential", valid_612242
  var valid_612243 = header.getOrDefault("X-Amz-Security-Token")
  valid_612243 = validateParameter(valid_612243, JString, required = false,
                                 default = nil)
  if valid_612243 != nil:
    section.add "X-Amz-Security-Token", valid_612243
  var valid_612244 = header.getOrDefault("X-Amz-Algorithm")
  valid_612244 = validateParameter(valid_612244, JString, required = false,
                                 default = nil)
  if valid_612244 != nil:
    section.add "X-Amz-Algorithm", valid_612244
  var valid_612245 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612245 = validateParameter(valid_612245, JString, required = false,
                                 default = nil)
  if valid_612245 != nil:
    section.add "X-Amz-SignedHeaders", valid_612245
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_612246 = formData.getOrDefault("Marker")
  valid_612246 = validateParameter(valid_612246, JString, required = false,
                                 default = nil)
  if valid_612246 != nil:
    section.add "Marker", valid_612246
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_612247 = formData.getOrDefault("GroupName")
  valid_612247 = validateParameter(valid_612247, JString, required = true,
                                 default = nil)
  if valid_612247 != nil:
    section.add "GroupName", valid_612247
  var valid_612248 = formData.getOrDefault("MaxItems")
  valid_612248 = validateParameter(valid_612248, JInt, required = false, default = nil)
  if valid_612248 != nil:
    section.add "MaxItems", valid_612248
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612249: Call_PostGetGroup_612234; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  let valid = call_612249.validator(path, query, header, formData, body)
  let scheme = call_612249.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612249.url(scheme.get, call_612249.host, call_612249.base,
                         call_612249.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612249, url, valid)

proc call*(call_612250: Call_PostGetGroup_612234; GroupName: string;
          Marker: string = ""; Action: string = "GetGroup"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetGroup
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_612251 = newJObject()
  var formData_612252 = newJObject()
  add(formData_612252, "Marker", newJString(Marker))
  add(formData_612252, "GroupName", newJString(GroupName))
  add(query_612251, "Action", newJString(Action))
  add(formData_612252, "MaxItems", newJInt(MaxItems))
  add(query_612251, "Version", newJString(Version))
  result = call_612250.call(nil, query_612251, nil, formData_612252, nil)

var postGetGroup* = Call_PostGetGroup_612234(name: "postGetGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetGroup", validator: validate_PostGetGroup_612235, base: "/",
    url: url_PostGetGroup_612236, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetGroup_612216 = ref object of OpenApiRestCall_609589
proc url_GetGetGroup_612218(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetGroup_612217(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612219 = query.getOrDefault("Marker")
  valid_612219 = validateParameter(valid_612219, JString, required = false,
                                 default = nil)
  if valid_612219 != nil:
    section.add "Marker", valid_612219
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_612220 = query.getOrDefault("GroupName")
  valid_612220 = validateParameter(valid_612220, JString, required = true,
                                 default = nil)
  if valid_612220 != nil:
    section.add "GroupName", valid_612220
  var valid_612221 = query.getOrDefault("MaxItems")
  valid_612221 = validateParameter(valid_612221, JInt, required = false, default = nil)
  if valid_612221 != nil:
    section.add "MaxItems", valid_612221
  var valid_612222 = query.getOrDefault("Action")
  valid_612222 = validateParameter(valid_612222, JString, required = true,
                                 default = newJString("GetGroup"))
  if valid_612222 != nil:
    section.add "Action", valid_612222
  var valid_612223 = query.getOrDefault("Version")
  valid_612223 = validateParameter(valid_612223, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612223 != nil:
    section.add "Version", valid_612223
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612224 = header.getOrDefault("X-Amz-Signature")
  valid_612224 = validateParameter(valid_612224, JString, required = false,
                                 default = nil)
  if valid_612224 != nil:
    section.add "X-Amz-Signature", valid_612224
  var valid_612225 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612225 = validateParameter(valid_612225, JString, required = false,
                                 default = nil)
  if valid_612225 != nil:
    section.add "X-Amz-Content-Sha256", valid_612225
  var valid_612226 = header.getOrDefault("X-Amz-Date")
  valid_612226 = validateParameter(valid_612226, JString, required = false,
                                 default = nil)
  if valid_612226 != nil:
    section.add "X-Amz-Date", valid_612226
  var valid_612227 = header.getOrDefault("X-Amz-Credential")
  valid_612227 = validateParameter(valid_612227, JString, required = false,
                                 default = nil)
  if valid_612227 != nil:
    section.add "X-Amz-Credential", valid_612227
  var valid_612228 = header.getOrDefault("X-Amz-Security-Token")
  valid_612228 = validateParameter(valid_612228, JString, required = false,
                                 default = nil)
  if valid_612228 != nil:
    section.add "X-Amz-Security-Token", valid_612228
  var valid_612229 = header.getOrDefault("X-Amz-Algorithm")
  valid_612229 = validateParameter(valid_612229, JString, required = false,
                                 default = nil)
  if valid_612229 != nil:
    section.add "X-Amz-Algorithm", valid_612229
  var valid_612230 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612230 = validateParameter(valid_612230, JString, required = false,
                                 default = nil)
  if valid_612230 != nil:
    section.add "X-Amz-SignedHeaders", valid_612230
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612231: Call_GetGetGroup_612216; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  let valid = call_612231.validator(path, query, header, formData, body)
  let scheme = call_612231.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612231.url(scheme.get, call_612231.host, call_612231.base,
                         call_612231.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612231, url, valid)

proc call*(call_612232: Call_GetGetGroup_612216; GroupName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "GetGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getGetGroup
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612233 = newJObject()
  add(query_612233, "Marker", newJString(Marker))
  add(query_612233, "GroupName", newJString(GroupName))
  add(query_612233, "MaxItems", newJInt(MaxItems))
  add(query_612233, "Action", newJString(Action))
  add(query_612233, "Version", newJString(Version))
  result = call_612232.call(nil, query_612233, nil, nil, nil)

var getGetGroup* = Call_GetGetGroup_612216(name: "getGetGroup",
                                        meth: HttpMethod.HttpGet,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetGroup",
                                        validator: validate_GetGetGroup_612217,
                                        base: "/", url: url_GetGetGroup_612218,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetGroupPolicy_612270 = ref object of OpenApiRestCall_609589
proc url_PostGetGroupPolicy_612272(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetGroupPolicy_612271(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612273 = query.getOrDefault("Action")
  valid_612273 = validateParameter(valid_612273, JString, required = true,
                                 default = newJString("GetGroupPolicy"))
  if valid_612273 != nil:
    section.add "Action", valid_612273
  var valid_612274 = query.getOrDefault("Version")
  valid_612274 = validateParameter(valid_612274, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612274 != nil:
    section.add "Version", valid_612274
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612275 = header.getOrDefault("X-Amz-Signature")
  valid_612275 = validateParameter(valid_612275, JString, required = false,
                                 default = nil)
  if valid_612275 != nil:
    section.add "X-Amz-Signature", valid_612275
  var valid_612276 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612276 = validateParameter(valid_612276, JString, required = false,
                                 default = nil)
  if valid_612276 != nil:
    section.add "X-Amz-Content-Sha256", valid_612276
  var valid_612277 = header.getOrDefault("X-Amz-Date")
  valid_612277 = validateParameter(valid_612277, JString, required = false,
                                 default = nil)
  if valid_612277 != nil:
    section.add "X-Amz-Date", valid_612277
  var valid_612278 = header.getOrDefault("X-Amz-Credential")
  valid_612278 = validateParameter(valid_612278, JString, required = false,
                                 default = nil)
  if valid_612278 != nil:
    section.add "X-Amz-Credential", valid_612278
  var valid_612279 = header.getOrDefault("X-Amz-Security-Token")
  valid_612279 = validateParameter(valid_612279, JString, required = false,
                                 default = nil)
  if valid_612279 != nil:
    section.add "X-Amz-Security-Token", valid_612279
  var valid_612280 = header.getOrDefault("X-Amz-Algorithm")
  valid_612280 = validateParameter(valid_612280, JString, required = false,
                                 default = nil)
  if valid_612280 != nil:
    section.add "X-Amz-Algorithm", valid_612280
  var valid_612281 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612281 = validateParameter(valid_612281, JString, required = false,
                                 default = nil)
  if valid_612281 != nil:
    section.add "X-Amz-SignedHeaders", valid_612281
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_612282 = formData.getOrDefault("GroupName")
  valid_612282 = validateParameter(valid_612282, JString, required = true,
                                 default = nil)
  if valid_612282 != nil:
    section.add "GroupName", valid_612282
  var valid_612283 = formData.getOrDefault("PolicyName")
  valid_612283 = validateParameter(valid_612283, JString, required = true,
                                 default = nil)
  if valid_612283 != nil:
    section.add "PolicyName", valid_612283
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612284: Call_PostGetGroupPolicy_612270; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612284.validator(path, query, header, formData, body)
  let scheme = call_612284.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612284.url(scheme.get, call_612284.host, call_612284.base,
                         call_612284.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612284, url, valid)

proc call*(call_612285: Call_PostGetGroupPolicy_612270; GroupName: string;
          PolicyName: string; Action: string = "GetGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetGroupPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_612286 = newJObject()
  var formData_612287 = newJObject()
  add(formData_612287, "GroupName", newJString(GroupName))
  add(query_612286, "Action", newJString(Action))
  add(query_612286, "Version", newJString(Version))
  add(formData_612287, "PolicyName", newJString(PolicyName))
  result = call_612285.call(nil, query_612286, nil, formData_612287, nil)

var postGetGroupPolicy* = Call_PostGetGroupPolicy_612270(
    name: "postGetGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetGroupPolicy",
    validator: validate_PostGetGroupPolicy_612271, base: "/",
    url: url_PostGetGroupPolicy_612272, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetGroupPolicy_612253 = ref object of OpenApiRestCall_609589
proc url_GetGetGroupPolicy_612255(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetGroupPolicy_612254(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_612256 = query.getOrDefault("GroupName")
  valid_612256 = validateParameter(valid_612256, JString, required = true,
                                 default = nil)
  if valid_612256 != nil:
    section.add "GroupName", valid_612256
  var valid_612257 = query.getOrDefault("PolicyName")
  valid_612257 = validateParameter(valid_612257, JString, required = true,
                                 default = nil)
  if valid_612257 != nil:
    section.add "PolicyName", valid_612257
  var valid_612258 = query.getOrDefault("Action")
  valid_612258 = validateParameter(valid_612258, JString, required = true,
                                 default = newJString("GetGroupPolicy"))
  if valid_612258 != nil:
    section.add "Action", valid_612258
  var valid_612259 = query.getOrDefault("Version")
  valid_612259 = validateParameter(valid_612259, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612259 != nil:
    section.add "Version", valid_612259
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612260 = header.getOrDefault("X-Amz-Signature")
  valid_612260 = validateParameter(valid_612260, JString, required = false,
                                 default = nil)
  if valid_612260 != nil:
    section.add "X-Amz-Signature", valid_612260
  var valid_612261 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612261 = validateParameter(valid_612261, JString, required = false,
                                 default = nil)
  if valid_612261 != nil:
    section.add "X-Amz-Content-Sha256", valid_612261
  var valid_612262 = header.getOrDefault("X-Amz-Date")
  valid_612262 = validateParameter(valid_612262, JString, required = false,
                                 default = nil)
  if valid_612262 != nil:
    section.add "X-Amz-Date", valid_612262
  var valid_612263 = header.getOrDefault("X-Amz-Credential")
  valid_612263 = validateParameter(valid_612263, JString, required = false,
                                 default = nil)
  if valid_612263 != nil:
    section.add "X-Amz-Credential", valid_612263
  var valid_612264 = header.getOrDefault("X-Amz-Security-Token")
  valid_612264 = validateParameter(valid_612264, JString, required = false,
                                 default = nil)
  if valid_612264 != nil:
    section.add "X-Amz-Security-Token", valid_612264
  var valid_612265 = header.getOrDefault("X-Amz-Algorithm")
  valid_612265 = validateParameter(valid_612265, JString, required = false,
                                 default = nil)
  if valid_612265 != nil:
    section.add "X-Amz-Algorithm", valid_612265
  var valid_612266 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612266 = validateParameter(valid_612266, JString, required = false,
                                 default = nil)
  if valid_612266 != nil:
    section.add "X-Amz-SignedHeaders", valid_612266
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612267: Call_GetGetGroupPolicy_612253; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612267.validator(path, query, header, formData, body)
  let scheme = call_612267.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612267.url(scheme.get, call_612267.host, call_612267.base,
                         call_612267.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612267, url, valid)

proc call*(call_612268: Call_GetGetGroupPolicy_612253; GroupName: string;
          PolicyName: string; Action: string = "GetGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetGroupPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612269 = newJObject()
  add(query_612269, "GroupName", newJString(GroupName))
  add(query_612269, "PolicyName", newJString(PolicyName))
  add(query_612269, "Action", newJString(Action))
  add(query_612269, "Version", newJString(Version))
  result = call_612268.call(nil, query_612269, nil, nil, nil)

var getGetGroupPolicy* = Call_GetGetGroupPolicy_612253(name: "getGetGroupPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetGroupPolicy", validator: validate_GetGetGroupPolicy_612254,
    base: "/", url: url_GetGetGroupPolicy_612255,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetInstanceProfile_612304 = ref object of OpenApiRestCall_609589
proc url_PostGetInstanceProfile_612306(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetInstanceProfile_612305(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612307 = query.getOrDefault("Action")
  valid_612307 = validateParameter(valid_612307, JString, required = true,
                                 default = newJString("GetInstanceProfile"))
  if valid_612307 != nil:
    section.add "Action", valid_612307
  var valid_612308 = query.getOrDefault("Version")
  valid_612308 = validateParameter(valid_612308, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612308 != nil:
    section.add "Version", valid_612308
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612309 = header.getOrDefault("X-Amz-Signature")
  valid_612309 = validateParameter(valid_612309, JString, required = false,
                                 default = nil)
  if valid_612309 != nil:
    section.add "X-Amz-Signature", valid_612309
  var valid_612310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612310 = validateParameter(valid_612310, JString, required = false,
                                 default = nil)
  if valid_612310 != nil:
    section.add "X-Amz-Content-Sha256", valid_612310
  var valid_612311 = header.getOrDefault("X-Amz-Date")
  valid_612311 = validateParameter(valid_612311, JString, required = false,
                                 default = nil)
  if valid_612311 != nil:
    section.add "X-Amz-Date", valid_612311
  var valid_612312 = header.getOrDefault("X-Amz-Credential")
  valid_612312 = validateParameter(valid_612312, JString, required = false,
                                 default = nil)
  if valid_612312 != nil:
    section.add "X-Amz-Credential", valid_612312
  var valid_612313 = header.getOrDefault("X-Amz-Security-Token")
  valid_612313 = validateParameter(valid_612313, JString, required = false,
                                 default = nil)
  if valid_612313 != nil:
    section.add "X-Amz-Security-Token", valid_612313
  var valid_612314 = header.getOrDefault("X-Amz-Algorithm")
  valid_612314 = validateParameter(valid_612314, JString, required = false,
                                 default = nil)
  if valid_612314 != nil:
    section.add "X-Amz-Algorithm", valid_612314
  var valid_612315 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612315 = validateParameter(valid_612315, JString, required = false,
                                 default = nil)
  if valid_612315 != nil:
    section.add "X-Amz-SignedHeaders", valid_612315
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_612316 = formData.getOrDefault("InstanceProfileName")
  valid_612316 = validateParameter(valid_612316, JString, required = true,
                                 default = nil)
  if valid_612316 != nil:
    section.add "InstanceProfileName", valid_612316
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612317: Call_PostGetInstanceProfile_612304; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_612317.validator(path, query, header, formData, body)
  let scheme = call_612317.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612317.url(scheme.get, call_612317.host, call_612317.base,
                         call_612317.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612317, url, valid)

proc call*(call_612318: Call_PostGetInstanceProfile_612304;
          InstanceProfileName: string; Action: string = "GetInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postGetInstanceProfile
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_612319 = newJObject()
  var formData_612320 = newJObject()
  add(query_612319, "Action", newJString(Action))
  add(formData_612320, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_612319, "Version", newJString(Version))
  result = call_612318.call(nil, query_612319, nil, formData_612320, nil)

var postGetInstanceProfile* = Call_PostGetInstanceProfile_612304(
    name: "postGetInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetInstanceProfile",
    validator: validate_PostGetInstanceProfile_612305, base: "/",
    url: url_PostGetInstanceProfile_612306, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetInstanceProfile_612288 = ref object of OpenApiRestCall_609589
proc url_GetGetInstanceProfile_612290(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetInstanceProfile_612289(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_612291 = query.getOrDefault("Action")
  valid_612291 = validateParameter(valid_612291, JString, required = true,
                                 default = newJString("GetInstanceProfile"))
  if valid_612291 != nil:
    section.add "Action", valid_612291
  var valid_612292 = query.getOrDefault("InstanceProfileName")
  valid_612292 = validateParameter(valid_612292, JString, required = true,
                                 default = nil)
  if valid_612292 != nil:
    section.add "InstanceProfileName", valid_612292
  var valid_612293 = query.getOrDefault("Version")
  valid_612293 = validateParameter(valid_612293, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612293 != nil:
    section.add "Version", valid_612293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612294 = header.getOrDefault("X-Amz-Signature")
  valid_612294 = validateParameter(valid_612294, JString, required = false,
                                 default = nil)
  if valid_612294 != nil:
    section.add "X-Amz-Signature", valid_612294
  var valid_612295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612295 = validateParameter(valid_612295, JString, required = false,
                                 default = nil)
  if valid_612295 != nil:
    section.add "X-Amz-Content-Sha256", valid_612295
  var valid_612296 = header.getOrDefault("X-Amz-Date")
  valid_612296 = validateParameter(valid_612296, JString, required = false,
                                 default = nil)
  if valid_612296 != nil:
    section.add "X-Amz-Date", valid_612296
  var valid_612297 = header.getOrDefault("X-Amz-Credential")
  valid_612297 = validateParameter(valid_612297, JString, required = false,
                                 default = nil)
  if valid_612297 != nil:
    section.add "X-Amz-Credential", valid_612297
  var valid_612298 = header.getOrDefault("X-Amz-Security-Token")
  valid_612298 = validateParameter(valid_612298, JString, required = false,
                                 default = nil)
  if valid_612298 != nil:
    section.add "X-Amz-Security-Token", valid_612298
  var valid_612299 = header.getOrDefault("X-Amz-Algorithm")
  valid_612299 = validateParameter(valid_612299, JString, required = false,
                                 default = nil)
  if valid_612299 != nil:
    section.add "X-Amz-Algorithm", valid_612299
  var valid_612300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612300 = validateParameter(valid_612300, JString, required = false,
                                 default = nil)
  if valid_612300 != nil:
    section.add "X-Amz-SignedHeaders", valid_612300
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612301: Call_GetGetInstanceProfile_612288; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_612301.validator(path, query, header, formData, body)
  let scheme = call_612301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612301.url(scheme.get, call_612301.host, call_612301.base,
                         call_612301.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612301, url, valid)

proc call*(call_612302: Call_GetGetInstanceProfile_612288;
          InstanceProfileName: string; Action: string = "GetInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getGetInstanceProfile
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_612303 = newJObject()
  add(query_612303, "Action", newJString(Action))
  add(query_612303, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_612303, "Version", newJString(Version))
  result = call_612302.call(nil, query_612303, nil, nil, nil)

var getGetInstanceProfile* = Call_GetGetInstanceProfile_612288(
    name: "getGetInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetInstanceProfile",
    validator: validate_GetGetInstanceProfile_612289, base: "/",
    url: url_GetGetInstanceProfile_612290, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetLoginProfile_612337 = ref object of OpenApiRestCall_609589
proc url_PostGetLoginProfile_612339(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetLoginProfile_612338(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612340 = query.getOrDefault("Action")
  valid_612340 = validateParameter(valid_612340, JString, required = true,
                                 default = newJString("GetLoginProfile"))
  if valid_612340 != nil:
    section.add "Action", valid_612340
  var valid_612341 = query.getOrDefault("Version")
  valid_612341 = validateParameter(valid_612341, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612341 != nil:
    section.add "Version", valid_612341
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612342 = header.getOrDefault("X-Amz-Signature")
  valid_612342 = validateParameter(valid_612342, JString, required = false,
                                 default = nil)
  if valid_612342 != nil:
    section.add "X-Amz-Signature", valid_612342
  var valid_612343 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612343 = validateParameter(valid_612343, JString, required = false,
                                 default = nil)
  if valid_612343 != nil:
    section.add "X-Amz-Content-Sha256", valid_612343
  var valid_612344 = header.getOrDefault("X-Amz-Date")
  valid_612344 = validateParameter(valid_612344, JString, required = false,
                                 default = nil)
  if valid_612344 != nil:
    section.add "X-Amz-Date", valid_612344
  var valid_612345 = header.getOrDefault("X-Amz-Credential")
  valid_612345 = validateParameter(valid_612345, JString, required = false,
                                 default = nil)
  if valid_612345 != nil:
    section.add "X-Amz-Credential", valid_612345
  var valid_612346 = header.getOrDefault("X-Amz-Security-Token")
  valid_612346 = validateParameter(valid_612346, JString, required = false,
                                 default = nil)
  if valid_612346 != nil:
    section.add "X-Amz-Security-Token", valid_612346
  var valid_612347 = header.getOrDefault("X-Amz-Algorithm")
  valid_612347 = validateParameter(valid_612347, JString, required = false,
                                 default = nil)
  if valid_612347 != nil:
    section.add "X-Amz-Algorithm", valid_612347
  var valid_612348 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612348 = validateParameter(valid_612348, JString, required = false,
                                 default = nil)
  if valid_612348 != nil:
    section.add "X-Amz-SignedHeaders", valid_612348
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_612349 = formData.getOrDefault("UserName")
  valid_612349 = validateParameter(valid_612349, JString, required = true,
                                 default = nil)
  if valid_612349 != nil:
    section.add "UserName", valid_612349
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612350: Call_PostGetLoginProfile_612337; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  let valid = call_612350.validator(path, query, header, formData, body)
  let scheme = call_612350.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612350.url(scheme.get, call_612350.host, call_612350.base,
                         call_612350.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612350, url, valid)

proc call*(call_612351: Call_PostGetLoginProfile_612337; UserName: string;
          Action: string = "GetLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postGetLoginProfile
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ##   UserName: string (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612352 = newJObject()
  var formData_612353 = newJObject()
  add(formData_612353, "UserName", newJString(UserName))
  add(query_612352, "Action", newJString(Action))
  add(query_612352, "Version", newJString(Version))
  result = call_612351.call(nil, query_612352, nil, formData_612353, nil)

var postGetLoginProfile* = Call_PostGetLoginProfile_612337(
    name: "postGetLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetLoginProfile",
    validator: validate_PostGetLoginProfile_612338, base: "/",
    url: url_PostGetLoginProfile_612339, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetLoginProfile_612321 = ref object of OpenApiRestCall_609589
proc url_GetGetLoginProfile_612323(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetLoginProfile_612322(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_612324 = query.getOrDefault("UserName")
  valid_612324 = validateParameter(valid_612324, JString, required = true,
                                 default = nil)
  if valid_612324 != nil:
    section.add "UserName", valid_612324
  var valid_612325 = query.getOrDefault("Action")
  valid_612325 = validateParameter(valid_612325, JString, required = true,
                                 default = newJString("GetLoginProfile"))
  if valid_612325 != nil:
    section.add "Action", valid_612325
  var valid_612326 = query.getOrDefault("Version")
  valid_612326 = validateParameter(valid_612326, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612326 != nil:
    section.add "Version", valid_612326
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612327 = header.getOrDefault("X-Amz-Signature")
  valid_612327 = validateParameter(valid_612327, JString, required = false,
                                 default = nil)
  if valid_612327 != nil:
    section.add "X-Amz-Signature", valid_612327
  var valid_612328 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612328 = validateParameter(valid_612328, JString, required = false,
                                 default = nil)
  if valid_612328 != nil:
    section.add "X-Amz-Content-Sha256", valid_612328
  var valid_612329 = header.getOrDefault("X-Amz-Date")
  valid_612329 = validateParameter(valid_612329, JString, required = false,
                                 default = nil)
  if valid_612329 != nil:
    section.add "X-Amz-Date", valid_612329
  var valid_612330 = header.getOrDefault("X-Amz-Credential")
  valid_612330 = validateParameter(valid_612330, JString, required = false,
                                 default = nil)
  if valid_612330 != nil:
    section.add "X-Amz-Credential", valid_612330
  var valid_612331 = header.getOrDefault("X-Amz-Security-Token")
  valid_612331 = validateParameter(valid_612331, JString, required = false,
                                 default = nil)
  if valid_612331 != nil:
    section.add "X-Amz-Security-Token", valid_612331
  var valid_612332 = header.getOrDefault("X-Amz-Algorithm")
  valid_612332 = validateParameter(valid_612332, JString, required = false,
                                 default = nil)
  if valid_612332 != nil:
    section.add "X-Amz-Algorithm", valid_612332
  var valid_612333 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612333 = validateParameter(valid_612333, JString, required = false,
                                 default = nil)
  if valid_612333 != nil:
    section.add "X-Amz-SignedHeaders", valid_612333
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612334: Call_GetGetLoginProfile_612321; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  let valid = call_612334.validator(path, query, header, formData, body)
  let scheme = call_612334.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612334.url(scheme.get, call_612334.host, call_612334.base,
                         call_612334.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612334, url, valid)

proc call*(call_612335: Call_GetGetLoginProfile_612321; UserName: string;
          Action: string = "GetLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getGetLoginProfile
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ##   UserName: string (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612336 = newJObject()
  add(query_612336, "UserName", newJString(UserName))
  add(query_612336, "Action", newJString(Action))
  add(query_612336, "Version", newJString(Version))
  result = call_612335.call(nil, query_612336, nil, nil, nil)

var getGetLoginProfile* = Call_GetGetLoginProfile_612321(
    name: "getGetLoginProfile", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetLoginProfile", validator: validate_GetGetLoginProfile_612322,
    base: "/", url: url_GetGetLoginProfile_612323,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetOpenIDConnectProvider_612370 = ref object of OpenApiRestCall_609589
proc url_PostGetOpenIDConnectProvider_612372(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetOpenIDConnectProvider_612371(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612373 = query.getOrDefault("Action")
  valid_612373 = validateParameter(valid_612373, JString, required = true, default = newJString(
      "GetOpenIDConnectProvider"))
  if valid_612373 != nil:
    section.add "Action", valid_612373
  var valid_612374 = query.getOrDefault("Version")
  valid_612374 = validateParameter(valid_612374, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612374 != nil:
    section.add "Version", valid_612374
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612375 = header.getOrDefault("X-Amz-Signature")
  valid_612375 = validateParameter(valid_612375, JString, required = false,
                                 default = nil)
  if valid_612375 != nil:
    section.add "X-Amz-Signature", valid_612375
  var valid_612376 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612376 = validateParameter(valid_612376, JString, required = false,
                                 default = nil)
  if valid_612376 != nil:
    section.add "X-Amz-Content-Sha256", valid_612376
  var valid_612377 = header.getOrDefault("X-Amz-Date")
  valid_612377 = validateParameter(valid_612377, JString, required = false,
                                 default = nil)
  if valid_612377 != nil:
    section.add "X-Amz-Date", valid_612377
  var valid_612378 = header.getOrDefault("X-Amz-Credential")
  valid_612378 = validateParameter(valid_612378, JString, required = false,
                                 default = nil)
  if valid_612378 != nil:
    section.add "X-Amz-Credential", valid_612378
  var valid_612379 = header.getOrDefault("X-Amz-Security-Token")
  valid_612379 = validateParameter(valid_612379, JString, required = false,
                                 default = nil)
  if valid_612379 != nil:
    section.add "X-Amz-Security-Token", valid_612379
  var valid_612380 = header.getOrDefault("X-Amz-Algorithm")
  valid_612380 = validateParameter(valid_612380, JString, required = false,
                                 default = nil)
  if valid_612380 != nil:
    section.add "X-Amz-Algorithm", valid_612380
  var valid_612381 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612381 = validateParameter(valid_612381, JString, required = false,
                                 default = nil)
  if valid_612381 != nil:
    section.add "X-Amz-SignedHeaders", valid_612381
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_612382 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_612382 = validateParameter(valid_612382, JString, required = true,
                                 default = nil)
  if valid_612382 != nil:
    section.add "OpenIDConnectProviderArn", valid_612382
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612383: Call_PostGetOpenIDConnectProvider_612370; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  let valid = call_612383.validator(path, query, header, formData, body)
  let scheme = call_612383.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612383.url(scheme.get, call_612383.host, call_612383.base,
                         call_612383.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612383, url, valid)

proc call*(call_612384: Call_PostGetOpenIDConnectProvider_612370;
          OpenIDConnectProviderArn: string;
          Action: string = "GetOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postGetOpenIDConnectProvider
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_612385 = newJObject()
  var formData_612386 = newJObject()
  add(query_612385, "Action", newJString(Action))
  add(query_612385, "Version", newJString(Version))
  add(formData_612386, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_612384.call(nil, query_612385, nil, formData_612386, nil)

var postGetOpenIDConnectProvider* = Call_PostGetOpenIDConnectProvider_612370(
    name: "postGetOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetOpenIDConnectProvider",
    validator: validate_PostGetOpenIDConnectProvider_612371, base: "/",
    url: url_PostGetOpenIDConnectProvider_612372,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetOpenIDConnectProvider_612354 = ref object of OpenApiRestCall_609589
proc url_GetGetOpenIDConnectProvider_612356(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetOpenIDConnectProvider_612355(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_612357 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_612357 = validateParameter(valid_612357, JString, required = true,
                                 default = nil)
  if valid_612357 != nil:
    section.add "OpenIDConnectProviderArn", valid_612357
  var valid_612358 = query.getOrDefault("Action")
  valid_612358 = validateParameter(valid_612358, JString, required = true, default = newJString(
      "GetOpenIDConnectProvider"))
  if valid_612358 != nil:
    section.add "Action", valid_612358
  var valid_612359 = query.getOrDefault("Version")
  valid_612359 = validateParameter(valid_612359, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612359 != nil:
    section.add "Version", valid_612359
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612360 = header.getOrDefault("X-Amz-Signature")
  valid_612360 = validateParameter(valid_612360, JString, required = false,
                                 default = nil)
  if valid_612360 != nil:
    section.add "X-Amz-Signature", valid_612360
  var valid_612361 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612361 = validateParameter(valid_612361, JString, required = false,
                                 default = nil)
  if valid_612361 != nil:
    section.add "X-Amz-Content-Sha256", valid_612361
  var valid_612362 = header.getOrDefault("X-Amz-Date")
  valid_612362 = validateParameter(valid_612362, JString, required = false,
                                 default = nil)
  if valid_612362 != nil:
    section.add "X-Amz-Date", valid_612362
  var valid_612363 = header.getOrDefault("X-Amz-Credential")
  valid_612363 = validateParameter(valid_612363, JString, required = false,
                                 default = nil)
  if valid_612363 != nil:
    section.add "X-Amz-Credential", valid_612363
  var valid_612364 = header.getOrDefault("X-Amz-Security-Token")
  valid_612364 = validateParameter(valid_612364, JString, required = false,
                                 default = nil)
  if valid_612364 != nil:
    section.add "X-Amz-Security-Token", valid_612364
  var valid_612365 = header.getOrDefault("X-Amz-Algorithm")
  valid_612365 = validateParameter(valid_612365, JString, required = false,
                                 default = nil)
  if valid_612365 != nil:
    section.add "X-Amz-Algorithm", valid_612365
  var valid_612366 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612366 = validateParameter(valid_612366, JString, required = false,
                                 default = nil)
  if valid_612366 != nil:
    section.add "X-Amz-SignedHeaders", valid_612366
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612367: Call_GetGetOpenIDConnectProvider_612354; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  let valid = call_612367.validator(path, query, header, formData, body)
  let scheme = call_612367.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612367.url(scheme.get, call_612367.host, call_612367.base,
                         call_612367.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612367, url, valid)

proc call*(call_612368: Call_GetGetOpenIDConnectProvider_612354;
          OpenIDConnectProviderArn: string;
          Action: string = "GetOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getGetOpenIDConnectProvider
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612369 = newJObject()
  add(query_612369, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_612369, "Action", newJString(Action))
  add(query_612369, "Version", newJString(Version))
  result = call_612368.call(nil, query_612369, nil, nil, nil)

var getGetOpenIDConnectProvider* = Call_GetGetOpenIDConnectProvider_612354(
    name: "getGetOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetOpenIDConnectProvider",
    validator: validate_GetGetOpenIDConnectProvider_612355, base: "/",
    url: url_GetGetOpenIDConnectProvider_612356,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetOrganizationsAccessReport_612406 = ref object of OpenApiRestCall_609589
proc url_PostGetOrganizationsAccessReport_612408(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetOrganizationsAccessReport_612407(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612409 = query.getOrDefault("Action")
  valid_612409 = validateParameter(valid_612409, JString, required = true, default = newJString(
      "GetOrganizationsAccessReport"))
  if valid_612409 != nil:
    section.add "Action", valid_612409
  var valid_612410 = query.getOrDefault("Version")
  valid_612410 = validateParameter(valid_612410, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612410 != nil:
    section.add "Version", valid_612410
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612411 = header.getOrDefault("X-Amz-Signature")
  valid_612411 = validateParameter(valid_612411, JString, required = false,
                                 default = nil)
  if valid_612411 != nil:
    section.add "X-Amz-Signature", valid_612411
  var valid_612412 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612412 = validateParameter(valid_612412, JString, required = false,
                                 default = nil)
  if valid_612412 != nil:
    section.add "X-Amz-Content-Sha256", valid_612412
  var valid_612413 = header.getOrDefault("X-Amz-Date")
  valid_612413 = validateParameter(valid_612413, JString, required = false,
                                 default = nil)
  if valid_612413 != nil:
    section.add "X-Amz-Date", valid_612413
  var valid_612414 = header.getOrDefault("X-Amz-Credential")
  valid_612414 = validateParameter(valid_612414, JString, required = false,
                                 default = nil)
  if valid_612414 != nil:
    section.add "X-Amz-Credential", valid_612414
  var valid_612415 = header.getOrDefault("X-Amz-Security-Token")
  valid_612415 = validateParameter(valid_612415, JString, required = false,
                                 default = nil)
  if valid_612415 != nil:
    section.add "X-Amz-Security-Token", valid_612415
  var valid_612416 = header.getOrDefault("X-Amz-Algorithm")
  valid_612416 = validateParameter(valid_612416, JString, required = false,
                                 default = nil)
  if valid_612416 != nil:
    section.add "X-Amz-Algorithm", valid_612416
  var valid_612417 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612417 = validateParameter(valid_612417, JString, required = false,
                                 default = nil)
  if valid_612417 != nil:
    section.add "X-Amz-SignedHeaders", valid_612417
  result.add "header", section
  ## parameters in `formData` object:
  ##   SortKey: JString
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: JString (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  section = newJObject()
  var valid_612418 = formData.getOrDefault("SortKey")
  valid_612418 = validateParameter(valid_612418, JString, required = false, default = newJString(
      "SERVICE_NAMESPACE_ASCENDING"))
  if valid_612418 != nil:
    section.add "SortKey", valid_612418
  var valid_612419 = formData.getOrDefault("Marker")
  valid_612419 = validateParameter(valid_612419, JString, required = false,
                                 default = nil)
  if valid_612419 != nil:
    section.add "Marker", valid_612419
  var valid_612420 = formData.getOrDefault("MaxItems")
  valid_612420 = validateParameter(valid_612420, JInt, required = false, default = nil)
  if valid_612420 != nil:
    section.add "MaxItems", valid_612420
  assert formData != nil,
        "formData argument is necessary due to required `JobId` field"
  var valid_612421 = formData.getOrDefault("JobId")
  valid_612421 = validateParameter(valid_612421, JString, required = true,
                                 default = nil)
  if valid_612421 != nil:
    section.add "JobId", valid_612421
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612422: Call_PostGetOrganizationsAccessReport_612406;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_612422.validator(path, query, header, formData, body)
  let scheme = call_612422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612422.url(scheme.get, call_612422.host, call_612422.base,
                         call_612422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612422, url, valid)

proc call*(call_612423: Call_PostGetOrganizationsAccessReport_612406;
          JobId: string; SortKey: string = "SERVICE_NAMESPACE_ASCENDING";
          Marker: string = ""; Action: string = "GetOrganizationsAccessReport";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postGetOrganizationsAccessReport
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ##   SortKey: string
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: string (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   Version: string (required)
  var query_612424 = newJObject()
  var formData_612425 = newJObject()
  add(formData_612425, "SortKey", newJString(SortKey))
  add(formData_612425, "Marker", newJString(Marker))
  add(query_612424, "Action", newJString(Action))
  add(formData_612425, "MaxItems", newJInt(MaxItems))
  add(formData_612425, "JobId", newJString(JobId))
  add(query_612424, "Version", newJString(Version))
  result = call_612423.call(nil, query_612424, nil, formData_612425, nil)

var postGetOrganizationsAccessReport* = Call_PostGetOrganizationsAccessReport_612406(
    name: "postGetOrganizationsAccessReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetOrganizationsAccessReport",
    validator: validate_PostGetOrganizationsAccessReport_612407, base: "/",
    url: url_PostGetOrganizationsAccessReport_612408,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetOrganizationsAccessReport_612387 = ref object of OpenApiRestCall_609589
proc url_GetGetOrganizationsAccessReport_612389(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetOrganizationsAccessReport_612388(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   SortKey: JString
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   JobId: JString (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  section = newJObject()
  var valid_612390 = query.getOrDefault("Marker")
  valid_612390 = validateParameter(valid_612390, JString, required = false,
                                 default = nil)
  if valid_612390 != nil:
    section.add "Marker", valid_612390
  var valid_612391 = query.getOrDefault("SortKey")
  valid_612391 = validateParameter(valid_612391, JString, required = false, default = newJString(
      "SERVICE_NAMESPACE_ASCENDING"))
  if valid_612391 != nil:
    section.add "SortKey", valid_612391
  var valid_612392 = query.getOrDefault("MaxItems")
  valid_612392 = validateParameter(valid_612392, JInt, required = false, default = nil)
  if valid_612392 != nil:
    section.add "MaxItems", valid_612392
  var valid_612393 = query.getOrDefault("Action")
  valid_612393 = validateParameter(valid_612393, JString, required = true, default = newJString(
      "GetOrganizationsAccessReport"))
  if valid_612393 != nil:
    section.add "Action", valid_612393
  var valid_612394 = query.getOrDefault("Version")
  valid_612394 = validateParameter(valid_612394, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612394 != nil:
    section.add "Version", valid_612394
  var valid_612395 = query.getOrDefault("JobId")
  valid_612395 = validateParameter(valid_612395, JString, required = true,
                                 default = nil)
  if valid_612395 != nil:
    section.add "JobId", valid_612395
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612396 = header.getOrDefault("X-Amz-Signature")
  valid_612396 = validateParameter(valid_612396, JString, required = false,
                                 default = nil)
  if valid_612396 != nil:
    section.add "X-Amz-Signature", valid_612396
  var valid_612397 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612397 = validateParameter(valid_612397, JString, required = false,
                                 default = nil)
  if valid_612397 != nil:
    section.add "X-Amz-Content-Sha256", valid_612397
  var valid_612398 = header.getOrDefault("X-Amz-Date")
  valid_612398 = validateParameter(valid_612398, JString, required = false,
                                 default = nil)
  if valid_612398 != nil:
    section.add "X-Amz-Date", valid_612398
  var valid_612399 = header.getOrDefault("X-Amz-Credential")
  valid_612399 = validateParameter(valid_612399, JString, required = false,
                                 default = nil)
  if valid_612399 != nil:
    section.add "X-Amz-Credential", valid_612399
  var valid_612400 = header.getOrDefault("X-Amz-Security-Token")
  valid_612400 = validateParameter(valid_612400, JString, required = false,
                                 default = nil)
  if valid_612400 != nil:
    section.add "X-Amz-Security-Token", valid_612400
  var valid_612401 = header.getOrDefault("X-Amz-Algorithm")
  valid_612401 = validateParameter(valid_612401, JString, required = false,
                                 default = nil)
  if valid_612401 != nil:
    section.add "X-Amz-Algorithm", valid_612401
  var valid_612402 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612402 = validateParameter(valid_612402, JString, required = false,
                                 default = nil)
  if valid_612402 != nil:
    section.add "X-Amz-SignedHeaders", valid_612402
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612403: Call_GetGetOrganizationsAccessReport_612387;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_612403.validator(path, query, header, formData, body)
  let scheme = call_612403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612403.url(scheme.get, call_612403.host, call_612403.base,
                         call_612403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612403, url, valid)

proc call*(call_612404: Call_GetGetOrganizationsAccessReport_612387; JobId: string;
          Marker: string = ""; SortKey: string = "SERVICE_NAMESPACE_ASCENDING";
          MaxItems: int = 0; Action: string = "GetOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGetOrganizationsAccessReport
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   SortKey: string
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   JobId: string (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  var query_612405 = newJObject()
  add(query_612405, "Marker", newJString(Marker))
  add(query_612405, "SortKey", newJString(SortKey))
  add(query_612405, "MaxItems", newJInt(MaxItems))
  add(query_612405, "Action", newJString(Action))
  add(query_612405, "Version", newJString(Version))
  add(query_612405, "JobId", newJString(JobId))
  result = call_612404.call(nil, query_612405, nil, nil, nil)

var getGetOrganizationsAccessReport* = Call_GetGetOrganizationsAccessReport_612387(
    name: "getGetOrganizationsAccessReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetOrganizationsAccessReport",
    validator: validate_GetGetOrganizationsAccessReport_612388, base: "/",
    url: url_GetGetOrganizationsAccessReport_612389,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetPolicy_612442 = ref object of OpenApiRestCall_609589
proc url_PostGetPolicy_612444(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetPolicy_612443(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612445 = query.getOrDefault("Action")
  valid_612445 = validateParameter(valid_612445, JString, required = true,
                                 default = newJString("GetPolicy"))
  if valid_612445 != nil:
    section.add "Action", valid_612445
  var valid_612446 = query.getOrDefault("Version")
  valid_612446 = validateParameter(valid_612446, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612446 != nil:
    section.add "Version", valid_612446
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612447 = header.getOrDefault("X-Amz-Signature")
  valid_612447 = validateParameter(valid_612447, JString, required = false,
                                 default = nil)
  if valid_612447 != nil:
    section.add "X-Amz-Signature", valid_612447
  var valid_612448 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612448 = validateParameter(valid_612448, JString, required = false,
                                 default = nil)
  if valid_612448 != nil:
    section.add "X-Amz-Content-Sha256", valid_612448
  var valid_612449 = header.getOrDefault("X-Amz-Date")
  valid_612449 = validateParameter(valid_612449, JString, required = false,
                                 default = nil)
  if valid_612449 != nil:
    section.add "X-Amz-Date", valid_612449
  var valid_612450 = header.getOrDefault("X-Amz-Credential")
  valid_612450 = validateParameter(valid_612450, JString, required = false,
                                 default = nil)
  if valid_612450 != nil:
    section.add "X-Amz-Credential", valid_612450
  var valid_612451 = header.getOrDefault("X-Amz-Security-Token")
  valid_612451 = validateParameter(valid_612451, JString, required = false,
                                 default = nil)
  if valid_612451 != nil:
    section.add "X-Amz-Security-Token", valid_612451
  var valid_612452 = header.getOrDefault("X-Amz-Algorithm")
  valid_612452 = validateParameter(valid_612452, JString, required = false,
                                 default = nil)
  if valid_612452 != nil:
    section.add "X-Amz-Algorithm", valid_612452
  var valid_612453 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612453 = validateParameter(valid_612453, JString, required = false,
                                 default = nil)
  if valid_612453 != nil:
    section.add "X-Amz-SignedHeaders", valid_612453
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_612454 = formData.getOrDefault("PolicyArn")
  valid_612454 = validateParameter(valid_612454, JString, required = true,
                                 default = nil)
  if valid_612454 != nil:
    section.add "PolicyArn", valid_612454
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612455: Call_PostGetPolicy_612442; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612455.validator(path, query, header, formData, body)
  let scheme = call_612455.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612455.url(scheme.get, call_612455.host, call_612455.base,
                         call_612455.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612455, url, valid)

proc call*(call_612456: Call_PostGetPolicy_612442; PolicyArn: string;
          Action: string = "GetPolicy"; Version: string = "2010-05-08"): Recallable =
  ## postGetPolicy
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612457 = newJObject()
  var formData_612458 = newJObject()
  add(formData_612458, "PolicyArn", newJString(PolicyArn))
  add(query_612457, "Action", newJString(Action))
  add(query_612457, "Version", newJString(Version))
  result = call_612456.call(nil, query_612457, nil, formData_612458, nil)

var postGetPolicy* = Call_PostGetPolicy_612442(name: "postGetPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetPolicy", validator: validate_PostGetPolicy_612443,
    base: "/", url: url_PostGetPolicy_612444, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetPolicy_612426 = ref object of OpenApiRestCall_609589
proc url_GetGetPolicy_612428(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetPolicy_612427(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_612429 = query.getOrDefault("PolicyArn")
  valid_612429 = validateParameter(valid_612429, JString, required = true,
                                 default = nil)
  if valid_612429 != nil:
    section.add "PolicyArn", valid_612429
  var valid_612430 = query.getOrDefault("Action")
  valid_612430 = validateParameter(valid_612430, JString, required = true,
                                 default = newJString("GetPolicy"))
  if valid_612430 != nil:
    section.add "Action", valid_612430
  var valid_612431 = query.getOrDefault("Version")
  valid_612431 = validateParameter(valid_612431, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612431 != nil:
    section.add "Version", valid_612431
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612432 = header.getOrDefault("X-Amz-Signature")
  valid_612432 = validateParameter(valid_612432, JString, required = false,
                                 default = nil)
  if valid_612432 != nil:
    section.add "X-Amz-Signature", valid_612432
  var valid_612433 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612433 = validateParameter(valid_612433, JString, required = false,
                                 default = nil)
  if valid_612433 != nil:
    section.add "X-Amz-Content-Sha256", valid_612433
  var valid_612434 = header.getOrDefault("X-Amz-Date")
  valid_612434 = validateParameter(valid_612434, JString, required = false,
                                 default = nil)
  if valid_612434 != nil:
    section.add "X-Amz-Date", valid_612434
  var valid_612435 = header.getOrDefault("X-Amz-Credential")
  valid_612435 = validateParameter(valid_612435, JString, required = false,
                                 default = nil)
  if valid_612435 != nil:
    section.add "X-Amz-Credential", valid_612435
  var valid_612436 = header.getOrDefault("X-Amz-Security-Token")
  valid_612436 = validateParameter(valid_612436, JString, required = false,
                                 default = nil)
  if valid_612436 != nil:
    section.add "X-Amz-Security-Token", valid_612436
  var valid_612437 = header.getOrDefault("X-Amz-Algorithm")
  valid_612437 = validateParameter(valid_612437, JString, required = false,
                                 default = nil)
  if valid_612437 != nil:
    section.add "X-Amz-Algorithm", valid_612437
  var valid_612438 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612438 = validateParameter(valid_612438, JString, required = false,
                                 default = nil)
  if valid_612438 != nil:
    section.add "X-Amz-SignedHeaders", valid_612438
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612439: Call_GetGetPolicy_612426; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612439.validator(path, query, header, formData, body)
  let scheme = call_612439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612439.url(scheme.get, call_612439.host, call_612439.base,
                         call_612439.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612439, url, valid)

proc call*(call_612440: Call_GetGetPolicy_612426; PolicyArn: string;
          Action: string = "GetPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getGetPolicy
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612441 = newJObject()
  add(query_612441, "PolicyArn", newJString(PolicyArn))
  add(query_612441, "Action", newJString(Action))
  add(query_612441, "Version", newJString(Version))
  result = call_612440.call(nil, query_612441, nil, nil, nil)

var getGetPolicy* = Call_GetGetPolicy_612426(name: "getGetPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetPolicy", validator: validate_GetGetPolicy_612427, base: "/",
    url: url_GetGetPolicy_612428, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetPolicyVersion_612476 = ref object of OpenApiRestCall_609589
proc url_PostGetPolicyVersion_612478(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetPolicyVersion_612477(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612479 = query.getOrDefault("Action")
  valid_612479 = validateParameter(valid_612479, JString, required = true,
                                 default = newJString("GetPolicyVersion"))
  if valid_612479 != nil:
    section.add "Action", valid_612479
  var valid_612480 = query.getOrDefault("Version")
  valid_612480 = validateParameter(valid_612480, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612480 != nil:
    section.add "Version", valid_612480
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612481 = header.getOrDefault("X-Amz-Signature")
  valid_612481 = validateParameter(valid_612481, JString, required = false,
                                 default = nil)
  if valid_612481 != nil:
    section.add "X-Amz-Signature", valid_612481
  var valid_612482 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612482 = validateParameter(valid_612482, JString, required = false,
                                 default = nil)
  if valid_612482 != nil:
    section.add "X-Amz-Content-Sha256", valid_612482
  var valid_612483 = header.getOrDefault("X-Amz-Date")
  valid_612483 = validateParameter(valid_612483, JString, required = false,
                                 default = nil)
  if valid_612483 != nil:
    section.add "X-Amz-Date", valid_612483
  var valid_612484 = header.getOrDefault("X-Amz-Credential")
  valid_612484 = validateParameter(valid_612484, JString, required = false,
                                 default = nil)
  if valid_612484 != nil:
    section.add "X-Amz-Credential", valid_612484
  var valid_612485 = header.getOrDefault("X-Amz-Security-Token")
  valid_612485 = validateParameter(valid_612485, JString, required = false,
                                 default = nil)
  if valid_612485 != nil:
    section.add "X-Amz-Security-Token", valid_612485
  var valid_612486 = header.getOrDefault("X-Amz-Algorithm")
  valid_612486 = validateParameter(valid_612486, JString, required = false,
                                 default = nil)
  if valid_612486 != nil:
    section.add "X-Amz-Algorithm", valid_612486
  var valid_612487 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612487 = validateParameter(valid_612487, JString, required = false,
                                 default = nil)
  if valid_612487 != nil:
    section.add "X-Amz-SignedHeaders", valid_612487
  result.add "header", section
  ## parameters in `formData` object:
  ##   VersionId: JString (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `VersionId` field"
  var valid_612488 = formData.getOrDefault("VersionId")
  valid_612488 = validateParameter(valid_612488, JString, required = true,
                                 default = nil)
  if valid_612488 != nil:
    section.add "VersionId", valid_612488
  var valid_612489 = formData.getOrDefault("PolicyArn")
  valid_612489 = validateParameter(valid_612489, JString, required = true,
                                 default = nil)
  if valid_612489 != nil:
    section.add "PolicyArn", valid_612489
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612490: Call_PostGetPolicyVersion_612476; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612490.validator(path, query, header, formData, body)
  let scheme = call_612490.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612490.url(scheme.get, call_612490.host, call_612490.base,
                         call_612490.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612490, url, valid)

proc call*(call_612491: Call_PostGetPolicyVersion_612476; VersionId: string;
          PolicyArn: string; Action: string = "GetPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postGetPolicyVersion
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612492 = newJObject()
  var formData_612493 = newJObject()
  add(formData_612493, "VersionId", newJString(VersionId))
  add(formData_612493, "PolicyArn", newJString(PolicyArn))
  add(query_612492, "Action", newJString(Action))
  add(query_612492, "Version", newJString(Version))
  result = call_612491.call(nil, query_612492, nil, formData_612493, nil)

var postGetPolicyVersion* = Call_PostGetPolicyVersion_612476(
    name: "postGetPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetPolicyVersion",
    validator: validate_PostGetPolicyVersion_612477, base: "/",
    url: url_PostGetPolicyVersion_612478, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetPolicyVersion_612459 = ref object of OpenApiRestCall_609589
proc url_GetGetPolicyVersion_612461(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetPolicyVersion_612460(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VersionId: JString (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `VersionId` field"
  var valid_612462 = query.getOrDefault("VersionId")
  valid_612462 = validateParameter(valid_612462, JString, required = true,
                                 default = nil)
  if valid_612462 != nil:
    section.add "VersionId", valid_612462
  var valid_612463 = query.getOrDefault("PolicyArn")
  valid_612463 = validateParameter(valid_612463, JString, required = true,
                                 default = nil)
  if valid_612463 != nil:
    section.add "PolicyArn", valid_612463
  var valid_612464 = query.getOrDefault("Action")
  valid_612464 = validateParameter(valid_612464, JString, required = true,
                                 default = newJString("GetPolicyVersion"))
  if valid_612464 != nil:
    section.add "Action", valid_612464
  var valid_612465 = query.getOrDefault("Version")
  valid_612465 = validateParameter(valid_612465, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612465 != nil:
    section.add "Version", valid_612465
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612466 = header.getOrDefault("X-Amz-Signature")
  valid_612466 = validateParameter(valid_612466, JString, required = false,
                                 default = nil)
  if valid_612466 != nil:
    section.add "X-Amz-Signature", valid_612466
  var valid_612467 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612467 = validateParameter(valid_612467, JString, required = false,
                                 default = nil)
  if valid_612467 != nil:
    section.add "X-Amz-Content-Sha256", valid_612467
  var valid_612468 = header.getOrDefault("X-Amz-Date")
  valid_612468 = validateParameter(valid_612468, JString, required = false,
                                 default = nil)
  if valid_612468 != nil:
    section.add "X-Amz-Date", valid_612468
  var valid_612469 = header.getOrDefault("X-Amz-Credential")
  valid_612469 = validateParameter(valid_612469, JString, required = false,
                                 default = nil)
  if valid_612469 != nil:
    section.add "X-Amz-Credential", valid_612469
  var valid_612470 = header.getOrDefault("X-Amz-Security-Token")
  valid_612470 = validateParameter(valid_612470, JString, required = false,
                                 default = nil)
  if valid_612470 != nil:
    section.add "X-Amz-Security-Token", valid_612470
  var valid_612471 = header.getOrDefault("X-Amz-Algorithm")
  valid_612471 = validateParameter(valid_612471, JString, required = false,
                                 default = nil)
  if valid_612471 != nil:
    section.add "X-Amz-Algorithm", valid_612471
  var valid_612472 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612472 = validateParameter(valid_612472, JString, required = false,
                                 default = nil)
  if valid_612472 != nil:
    section.add "X-Amz-SignedHeaders", valid_612472
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612473: Call_GetGetPolicyVersion_612459; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612473.validator(path, query, header, formData, body)
  let scheme = call_612473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612473.url(scheme.get, call_612473.host, call_612473.base,
                         call_612473.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612473, url, valid)

proc call*(call_612474: Call_GetGetPolicyVersion_612459; VersionId: string;
          PolicyArn: string; Action: string = "GetPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getGetPolicyVersion
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612475 = newJObject()
  add(query_612475, "VersionId", newJString(VersionId))
  add(query_612475, "PolicyArn", newJString(PolicyArn))
  add(query_612475, "Action", newJString(Action))
  add(query_612475, "Version", newJString(Version))
  result = call_612474.call(nil, query_612475, nil, nil, nil)

var getGetPolicyVersion* = Call_GetGetPolicyVersion_612459(
    name: "getGetPolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetPolicyVersion",
    validator: validate_GetGetPolicyVersion_612460, base: "/",
    url: url_GetGetPolicyVersion_612461, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetRole_612510 = ref object of OpenApiRestCall_609589
proc url_PostGetRole_612512(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetRole_612511(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612513 = query.getOrDefault("Action")
  valid_612513 = validateParameter(valid_612513, JString, required = true,
                                 default = newJString("GetRole"))
  if valid_612513 != nil:
    section.add "Action", valid_612513
  var valid_612514 = query.getOrDefault("Version")
  valid_612514 = validateParameter(valid_612514, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612514 != nil:
    section.add "Version", valid_612514
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612515 = header.getOrDefault("X-Amz-Signature")
  valid_612515 = validateParameter(valid_612515, JString, required = false,
                                 default = nil)
  if valid_612515 != nil:
    section.add "X-Amz-Signature", valid_612515
  var valid_612516 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612516 = validateParameter(valid_612516, JString, required = false,
                                 default = nil)
  if valid_612516 != nil:
    section.add "X-Amz-Content-Sha256", valid_612516
  var valid_612517 = header.getOrDefault("X-Amz-Date")
  valid_612517 = validateParameter(valid_612517, JString, required = false,
                                 default = nil)
  if valid_612517 != nil:
    section.add "X-Amz-Date", valid_612517
  var valid_612518 = header.getOrDefault("X-Amz-Credential")
  valid_612518 = validateParameter(valid_612518, JString, required = false,
                                 default = nil)
  if valid_612518 != nil:
    section.add "X-Amz-Credential", valid_612518
  var valid_612519 = header.getOrDefault("X-Amz-Security-Token")
  valid_612519 = validateParameter(valid_612519, JString, required = false,
                                 default = nil)
  if valid_612519 != nil:
    section.add "X-Amz-Security-Token", valid_612519
  var valid_612520 = header.getOrDefault("X-Amz-Algorithm")
  valid_612520 = validateParameter(valid_612520, JString, required = false,
                                 default = nil)
  if valid_612520 != nil:
    section.add "X-Amz-Algorithm", valid_612520
  var valid_612521 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612521 = validateParameter(valid_612521, JString, required = false,
                                 default = nil)
  if valid_612521 != nil:
    section.add "X-Amz-SignedHeaders", valid_612521
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_612522 = formData.getOrDefault("RoleName")
  valid_612522 = validateParameter(valid_612522, JString, required = true,
                                 default = nil)
  if valid_612522 != nil:
    section.add "RoleName", valid_612522
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612523: Call_PostGetRole_612510; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  let valid = call_612523.validator(path, query, header, formData, body)
  let scheme = call_612523.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612523.url(scheme.get, call_612523.host, call_612523.base,
                         call_612523.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612523, url, valid)

proc call*(call_612524: Call_PostGetRole_612510; RoleName: string;
          Action: string = "GetRole"; Version: string = "2010-05-08"): Recallable =
  ## postGetRole
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612525 = newJObject()
  var formData_612526 = newJObject()
  add(formData_612526, "RoleName", newJString(RoleName))
  add(query_612525, "Action", newJString(Action))
  add(query_612525, "Version", newJString(Version))
  result = call_612524.call(nil, query_612525, nil, formData_612526, nil)

var postGetRole* = Call_PostGetRole_612510(name: "postGetRole",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetRole",
                                        validator: validate_PostGetRole_612511,
                                        base: "/", url: url_PostGetRole_612512,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetRole_612494 = ref object of OpenApiRestCall_609589
proc url_GetGetRole_612496(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetRole_612495(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_612497 = query.getOrDefault("RoleName")
  valid_612497 = validateParameter(valid_612497, JString, required = true,
                                 default = nil)
  if valid_612497 != nil:
    section.add "RoleName", valid_612497
  var valid_612498 = query.getOrDefault("Action")
  valid_612498 = validateParameter(valid_612498, JString, required = true,
                                 default = newJString("GetRole"))
  if valid_612498 != nil:
    section.add "Action", valid_612498
  var valid_612499 = query.getOrDefault("Version")
  valid_612499 = validateParameter(valid_612499, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612499 != nil:
    section.add "Version", valid_612499
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612500 = header.getOrDefault("X-Amz-Signature")
  valid_612500 = validateParameter(valid_612500, JString, required = false,
                                 default = nil)
  if valid_612500 != nil:
    section.add "X-Amz-Signature", valid_612500
  var valid_612501 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612501 = validateParameter(valid_612501, JString, required = false,
                                 default = nil)
  if valid_612501 != nil:
    section.add "X-Amz-Content-Sha256", valid_612501
  var valid_612502 = header.getOrDefault("X-Amz-Date")
  valid_612502 = validateParameter(valid_612502, JString, required = false,
                                 default = nil)
  if valid_612502 != nil:
    section.add "X-Amz-Date", valid_612502
  var valid_612503 = header.getOrDefault("X-Amz-Credential")
  valid_612503 = validateParameter(valid_612503, JString, required = false,
                                 default = nil)
  if valid_612503 != nil:
    section.add "X-Amz-Credential", valid_612503
  var valid_612504 = header.getOrDefault("X-Amz-Security-Token")
  valid_612504 = validateParameter(valid_612504, JString, required = false,
                                 default = nil)
  if valid_612504 != nil:
    section.add "X-Amz-Security-Token", valid_612504
  var valid_612505 = header.getOrDefault("X-Amz-Algorithm")
  valid_612505 = validateParameter(valid_612505, JString, required = false,
                                 default = nil)
  if valid_612505 != nil:
    section.add "X-Amz-Algorithm", valid_612505
  var valid_612506 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612506 = validateParameter(valid_612506, JString, required = false,
                                 default = nil)
  if valid_612506 != nil:
    section.add "X-Amz-SignedHeaders", valid_612506
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612507: Call_GetGetRole_612494; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  let valid = call_612507.validator(path, query, header, formData, body)
  let scheme = call_612507.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612507.url(scheme.get, call_612507.host, call_612507.base,
                         call_612507.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612507, url, valid)

proc call*(call_612508: Call_GetGetRole_612494; RoleName: string;
          Action: string = "GetRole"; Version: string = "2010-05-08"): Recallable =
  ## getGetRole
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612509 = newJObject()
  add(query_612509, "RoleName", newJString(RoleName))
  add(query_612509, "Action", newJString(Action))
  add(query_612509, "Version", newJString(Version))
  result = call_612508.call(nil, query_612509, nil, nil, nil)

var getGetRole* = Call_GetGetRole_612494(name: "getGetRole",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=GetRole",
                                      validator: validate_GetGetRole_612495,
                                      base: "/", url: url_GetGetRole_612496,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetRolePolicy_612544 = ref object of OpenApiRestCall_609589
proc url_PostGetRolePolicy_612546(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetRolePolicy_612545(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612547 = query.getOrDefault("Action")
  valid_612547 = validateParameter(valid_612547, JString, required = true,
                                 default = newJString("GetRolePolicy"))
  if valid_612547 != nil:
    section.add "Action", valid_612547
  var valid_612548 = query.getOrDefault("Version")
  valid_612548 = validateParameter(valid_612548, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612548 != nil:
    section.add "Version", valid_612548
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612549 = header.getOrDefault("X-Amz-Signature")
  valid_612549 = validateParameter(valid_612549, JString, required = false,
                                 default = nil)
  if valid_612549 != nil:
    section.add "X-Amz-Signature", valid_612549
  var valid_612550 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612550 = validateParameter(valid_612550, JString, required = false,
                                 default = nil)
  if valid_612550 != nil:
    section.add "X-Amz-Content-Sha256", valid_612550
  var valid_612551 = header.getOrDefault("X-Amz-Date")
  valid_612551 = validateParameter(valid_612551, JString, required = false,
                                 default = nil)
  if valid_612551 != nil:
    section.add "X-Amz-Date", valid_612551
  var valid_612552 = header.getOrDefault("X-Amz-Credential")
  valid_612552 = validateParameter(valid_612552, JString, required = false,
                                 default = nil)
  if valid_612552 != nil:
    section.add "X-Amz-Credential", valid_612552
  var valid_612553 = header.getOrDefault("X-Amz-Security-Token")
  valid_612553 = validateParameter(valid_612553, JString, required = false,
                                 default = nil)
  if valid_612553 != nil:
    section.add "X-Amz-Security-Token", valid_612553
  var valid_612554 = header.getOrDefault("X-Amz-Algorithm")
  valid_612554 = validateParameter(valid_612554, JString, required = false,
                                 default = nil)
  if valid_612554 != nil:
    section.add "X-Amz-Algorithm", valid_612554
  var valid_612555 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612555 = validateParameter(valid_612555, JString, required = false,
                                 default = nil)
  if valid_612555 != nil:
    section.add "X-Amz-SignedHeaders", valid_612555
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_612556 = formData.getOrDefault("RoleName")
  valid_612556 = validateParameter(valid_612556, JString, required = true,
                                 default = nil)
  if valid_612556 != nil:
    section.add "RoleName", valid_612556
  var valid_612557 = formData.getOrDefault("PolicyName")
  valid_612557 = validateParameter(valid_612557, JString, required = true,
                                 default = nil)
  if valid_612557 != nil:
    section.add "PolicyName", valid_612557
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612558: Call_PostGetRolePolicy_612544; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  let valid = call_612558.validator(path, query, header, formData, body)
  let scheme = call_612558.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612558.url(scheme.get, call_612558.host, call_612558.base,
                         call_612558.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612558, url, valid)

proc call*(call_612559: Call_PostGetRolePolicy_612544; RoleName: string;
          PolicyName: string; Action: string = "GetRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetRolePolicy
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_612560 = newJObject()
  var formData_612561 = newJObject()
  add(formData_612561, "RoleName", newJString(RoleName))
  add(query_612560, "Action", newJString(Action))
  add(query_612560, "Version", newJString(Version))
  add(formData_612561, "PolicyName", newJString(PolicyName))
  result = call_612559.call(nil, query_612560, nil, formData_612561, nil)

var postGetRolePolicy* = Call_PostGetRolePolicy_612544(name: "postGetRolePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetRolePolicy", validator: validate_PostGetRolePolicy_612545,
    base: "/", url: url_PostGetRolePolicy_612546,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetRolePolicy_612527 = ref object of OpenApiRestCall_609589
proc url_GetGetRolePolicy_612529(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetRolePolicy_612528(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_612530 = query.getOrDefault("PolicyName")
  valid_612530 = validateParameter(valid_612530, JString, required = true,
                                 default = nil)
  if valid_612530 != nil:
    section.add "PolicyName", valid_612530
  var valid_612531 = query.getOrDefault("RoleName")
  valid_612531 = validateParameter(valid_612531, JString, required = true,
                                 default = nil)
  if valid_612531 != nil:
    section.add "RoleName", valid_612531
  var valid_612532 = query.getOrDefault("Action")
  valid_612532 = validateParameter(valid_612532, JString, required = true,
                                 default = newJString("GetRolePolicy"))
  if valid_612532 != nil:
    section.add "Action", valid_612532
  var valid_612533 = query.getOrDefault("Version")
  valid_612533 = validateParameter(valid_612533, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612533 != nil:
    section.add "Version", valid_612533
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612534 = header.getOrDefault("X-Amz-Signature")
  valid_612534 = validateParameter(valid_612534, JString, required = false,
                                 default = nil)
  if valid_612534 != nil:
    section.add "X-Amz-Signature", valid_612534
  var valid_612535 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612535 = validateParameter(valid_612535, JString, required = false,
                                 default = nil)
  if valid_612535 != nil:
    section.add "X-Amz-Content-Sha256", valid_612535
  var valid_612536 = header.getOrDefault("X-Amz-Date")
  valid_612536 = validateParameter(valid_612536, JString, required = false,
                                 default = nil)
  if valid_612536 != nil:
    section.add "X-Amz-Date", valid_612536
  var valid_612537 = header.getOrDefault("X-Amz-Credential")
  valid_612537 = validateParameter(valid_612537, JString, required = false,
                                 default = nil)
  if valid_612537 != nil:
    section.add "X-Amz-Credential", valid_612537
  var valid_612538 = header.getOrDefault("X-Amz-Security-Token")
  valid_612538 = validateParameter(valid_612538, JString, required = false,
                                 default = nil)
  if valid_612538 != nil:
    section.add "X-Amz-Security-Token", valid_612538
  var valid_612539 = header.getOrDefault("X-Amz-Algorithm")
  valid_612539 = validateParameter(valid_612539, JString, required = false,
                                 default = nil)
  if valid_612539 != nil:
    section.add "X-Amz-Algorithm", valid_612539
  var valid_612540 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612540 = validateParameter(valid_612540, JString, required = false,
                                 default = nil)
  if valid_612540 != nil:
    section.add "X-Amz-SignedHeaders", valid_612540
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612541: Call_GetGetRolePolicy_612527; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  let valid = call_612541.validator(path, query, header, formData, body)
  let scheme = call_612541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612541.url(scheme.get, call_612541.host, call_612541.base,
                         call_612541.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612541, url, valid)

proc call*(call_612542: Call_GetGetRolePolicy_612527; PolicyName: string;
          RoleName: string; Action: string = "GetRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetRolePolicy
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612543 = newJObject()
  add(query_612543, "PolicyName", newJString(PolicyName))
  add(query_612543, "RoleName", newJString(RoleName))
  add(query_612543, "Action", newJString(Action))
  add(query_612543, "Version", newJString(Version))
  result = call_612542.call(nil, query_612543, nil, nil, nil)

var getGetRolePolicy* = Call_GetGetRolePolicy_612527(name: "getGetRolePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetRolePolicy", validator: validate_GetGetRolePolicy_612528,
    base: "/", url: url_GetGetRolePolicy_612529,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSAMLProvider_612578 = ref object of OpenApiRestCall_609589
proc url_PostGetSAMLProvider_612580(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetSAMLProvider_612579(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612581 = query.getOrDefault("Action")
  valid_612581 = validateParameter(valid_612581, JString, required = true,
                                 default = newJString("GetSAMLProvider"))
  if valid_612581 != nil:
    section.add "Action", valid_612581
  var valid_612582 = query.getOrDefault("Version")
  valid_612582 = validateParameter(valid_612582, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612582 != nil:
    section.add "Version", valid_612582
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612583 = header.getOrDefault("X-Amz-Signature")
  valid_612583 = validateParameter(valid_612583, JString, required = false,
                                 default = nil)
  if valid_612583 != nil:
    section.add "X-Amz-Signature", valid_612583
  var valid_612584 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612584 = validateParameter(valid_612584, JString, required = false,
                                 default = nil)
  if valid_612584 != nil:
    section.add "X-Amz-Content-Sha256", valid_612584
  var valid_612585 = header.getOrDefault("X-Amz-Date")
  valid_612585 = validateParameter(valid_612585, JString, required = false,
                                 default = nil)
  if valid_612585 != nil:
    section.add "X-Amz-Date", valid_612585
  var valid_612586 = header.getOrDefault("X-Amz-Credential")
  valid_612586 = validateParameter(valid_612586, JString, required = false,
                                 default = nil)
  if valid_612586 != nil:
    section.add "X-Amz-Credential", valid_612586
  var valid_612587 = header.getOrDefault("X-Amz-Security-Token")
  valid_612587 = validateParameter(valid_612587, JString, required = false,
                                 default = nil)
  if valid_612587 != nil:
    section.add "X-Amz-Security-Token", valid_612587
  var valid_612588 = header.getOrDefault("X-Amz-Algorithm")
  valid_612588 = validateParameter(valid_612588, JString, required = false,
                                 default = nil)
  if valid_612588 != nil:
    section.add "X-Amz-Algorithm", valid_612588
  var valid_612589 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612589 = validateParameter(valid_612589, JString, required = false,
                                 default = nil)
  if valid_612589 != nil:
    section.add "X-Amz-SignedHeaders", valid_612589
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_612590 = formData.getOrDefault("SAMLProviderArn")
  valid_612590 = validateParameter(valid_612590, JString, required = true,
                                 default = nil)
  if valid_612590 != nil:
    section.add "SAMLProviderArn", valid_612590
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612591: Call_PostGetSAMLProvider_612578; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_612591.validator(path, query, header, formData, body)
  let scheme = call_612591.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612591.url(scheme.get, call_612591.host, call_612591.base,
                         call_612591.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612591, url, valid)

proc call*(call_612592: Call_PostGetSAMLProvider_612578; SAMLProviderArn: string;
          Action: string = "GetSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postGetSAMLProvider
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612593 = newJObject()
  var formData_612594 = newJObject()
  add(formData_612594, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_612593, "Action", newJString(Action))
  add(query_612593, "Version", newJString(Version))
  result = call_612592.call(nil, query_612593, nil, formData_612594, nil)

var postGetSAMLProvider* = Call_PostGetSAMLProvider_612578(
    name: "postGetSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetSAMLProvider",
    validator: validate_PostGetSAMLProvider_612579, base: "/",
    url: url_PostGetSAMLProvider_612580, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSAMLProvider_612562 = ref object of OpenApiRestCall_609589
proc url_GetGetSAMLProvider_612564(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetSAMLProvider_612563(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_612565 = query.getOrDefault("Action")
  valid_612565 = validateParameter(valid_612565, JString, required = true,
                                 default = newJString("GetSAMLProvider"))
  if valid_612565 != nil:
    section.add "Action", valid_612565
  var valid_612566 = query.getOrDefault("SAMLProviderArn")
  valid_612566 = validateParameter(valid_612566, JString, required = true,
                                 default = nil)
  if valid_612566 != nil:
    section.add "SAMLProviderArn", valid_612566
  var valid_612567 = query.getOrDefault("Version")
  valid_612567 = validateParameter(valid_612567, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612567 != nil:
    section.add "Version", valid_612567
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612568 = header.getOrDefault("X-Amz-Signature")
  valid_612568 = validateParameter(valid_612568, JString, required = false,
                                 default = nil)
  if valid_612568 != nil:
    section.add "X-Amz-Signature", valid_612568
  var valid_612569 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612569 = validateParameter(valid_612569, JString, required = false,
                                 default = nil)
  if valid_612569 != nil:
    section.add "X-Amz-Content-Sha256", valid_612569
  var valid_612570 = header.getOrDefault("X-Amz-Date")
  valid_612570 = validateParameter(valid_612570, JString, required = false,
                                 default = nil)
  if valid_612570 != nil:
    section.add "X-Amz-Date", valid_612570
  var valid_612571 = header.getOrDefault("X-Amz-Credential")
  valid_612571 = validateParameter(valid_612571, JString, required = false,
                                 default = nil)
  if valid_612571 != nil:
    section.add "X-Amz-Credential", valid_612571
  var valid_612572 = header.getOrDefault("X-Amz-Security-Token")
  valid_612572 = validateParameter(valid_612572, JString, required = false,
                                 default = nil)
  if valid_612572 != nil:
    section.add "X-Amz-Security-Token", valid_612572
  var valid_612573 = header.getOrDefault("X-Amz-Algorithm")
  valid_612573 = validateParameter(valid_612573, JString, required = false,
                                 default = nil)
  if valid_612573 != nil:
    section.add "X-Amz-Algorithm", valid_612573
  var valid_612574 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612574 = validateParameter(valid_612574, JString, required = false,
                                 default = nil)
  if valid_612574 != nil:
    section.add "X-Amz-SignedHeaders", valid_612574
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612575: Call_GetGetSAMLProvider_612562; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_612575.validator(path, query, header, formData, body)
  let scheme = call_612575.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612575.url(scheme.get, call_612575.host, call_612575.base,
                         call_612575.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612575, url, valid)

proc call*(call_612576: Call_GetGetSAMLProvider_612562; SAMLProviderArn: string;
          Action: string = "GetSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getGetSAMLProvider
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_612577 = newJObject()
  add(query_612577, "Action", newJString(Action))
  add(query_612577, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_612577, "Version", newJString(Version))
  result = call_612576.call(nil, query_612577, nil, nil, nil)

var getGetSAMLProvider* = Call_GetGetSAMLProvider_612562(
    name: "getGetSAMLProvider", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetSAMLProvider", validator: validate_GetGetSAMLProvider_612563,
    base: "/", url: url_GetGetSAMLProvider_612564,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSSHPublicKey_612613 = ref object of OpenApiRestCall_609589
proc url_PostGetSSHPublicKey_612615(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetSSHPublicKey_612614(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612616 = query.getOrDefault("Action")
  valid_612616 = validateParameter(valid_612616, JString, required = true,
                                 default = newJString("GetSSHPublicKey"))
  if valid_612616 != nil:
    section.add "Action", valid_612616
  var valid_612617 = query.getOrDefault("Version")
  valid_612617 = validateParameter(valid_612617, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612617 != nil:
    section.add "Version", valid_612617
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612618 = header.getOrDefault("X-Amz-Signature")
  valid_612618 = validateParameter(valid_612618, JString, required = false,
                                 default = nil)
  if valid_612618 != nil:
    section.add "X-Amz-Signature", valid_612618
  var valid_612619 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612619 = validateParameter(valid_612619, JString, required = false,
                                 default = nil)
  if valid_612619 != nil:
    section.add "X-Amz-Content-Sha256", valid_612619
  var valid_612620 = header.getOrDefault("X-Amz-Date")
  valid_612620 = validateParameter(valid_612620, JString, required = false,
                                 default = nil)
  if valid_612620 != nil:
    section.add "X-Amz-Date", valid_612620
  var valid_612621 = header.getOrDefault("X-Amz-Credential")
  valid_612621 = validateParameter(valid_612621, JString, required = false,
                                 default = nil)
  if valid_612621 != nil:
    section.add "X-Amz-Credential", valid_612621
  var valid_612622 = header.getOrDefault("X-Amz-Security-Token")
  valid_612622 = validateParameter(valid_612622, JString, required = false,
                                 default = nil)
  if valid_612622 != nil:
    section.add "X-Amz-Security-Token", valid_612622
  var valid_612623 = header.getOrDefault("X-Amz-Algorithm")
  valid_612623 = validateParameter(valid_612623, JString, required = false,
                                 default = nil)
  if valid_612623 != nil:
    section.add "X-Amz-Algorithm", valid_612623
  var valid_612624 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612624 = validateParameter(valid_612624, JString, required = false,
                                 default = nil)
  if valid_612624 != nil:
    section.add "X-Amz-SignedHeaders", valid_612624
  result.add "header", section
  ## parameters in `formData` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Encoding: JString (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SSHPublicKeyId` field"
  var valid_612625 = formData.getOrDefault("SSHPublicKeyId")
  valid_612625 = validateParameter(valid_612625, JString, required = true,
                                 default = nil)
  if valid_612625 != nil:
    section.add "SSHPublicKeyId", valid_612625
  var valid_612626 = formData.getOrDefault("Encoding")
  valid_612626 = validateParameter(valid_612626, JString, required = true,
                                 default = newJString("SSH"))
  if valid_612626 != nil:
    section.add "Encoding", valid_612626
  var valid_612627 = formData.getOrDefault("UserName")
  valid_612627 = validateParameter(valid_612627, JString, required = true,
                                 default = nil)
  if valid_612627 != nil:
    section.add "UserName", valid_612627
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612628: Call_PostGetSSHPublicKey_612613; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_612628.validator(path, query, header, formData, body)
  let scheme = call_612628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612628.url(scheme.get, call_612628.host, call_612628.base,
                         call_612628.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612628, url, valid)

proc call*(call_612629: Call_PostGetSSHPublicKey_612613; SSHPublicKeyId: string;
          UserName: string; Encoding: string = "SSH";
          Action: string = "GetSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## postGetSSHPublicKey
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Encoding: string (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612630 = newJObject()
  var formData_612631 = newJObject()
  add(formData_612631, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(formData_612631, "Encoding", newJString(Encoding))
  add(formData_612631, "UserName", newJString(UserName))
  add(query_612630, "Action", newJString(Action))
  add(query_612630, "Version", newJString(Version))
  result = call_612629.call(nil, query_612630, nil, formData_612631, nil)

var postGetSSHPublicKey* = Call_PostGetSSHPublicKey_612613(
    name: "postGetSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetSSHPublicKey",
    validator: validate_PostGetSSHPublicKey_612614, base: "/",
    url: url_PostGetSSHPublicKey_612615, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSSHPublicKey_612595 = ref object of OpenApiRestCall_609589
proc url_GetGetSSHPublicKey_612597(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetSSHPublicKey_612596(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Encoding: JString (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_612598 = query.getOrDefault("SSHPublicKeyId")
  valid_612598 = validateParameter(valid_612598, JString, required = true,
                                 default = nil)
  if valid_612598 != nil:
    section.add "SSHPublicKeyId", valid_612598
  var valid_612599 = query.getOrDefault("UserName")
  valid_612599 = validateParameter(valid_612599, JString, required = true,
                                 default = nil)
  if valid_612599 != nil:
    section.add "UserName", valid_612599
  var valid_612600 = query.getOrDefault("Encoding")
  valid_612600 = validateParameter(valid_612600, JString, required = true,
                                 default = newJString("SSH"))
  if valid_612600 != nil:
    section.add "Encoding", valid_612600
  var valid_612601 = query.getOrDefault("Action")
  valid_612601 = validateParameter(valid_612601, JString, required = true,
                                 default = newJString("GetSSHPublicKey"))
  if valid_612601 != nil:
    section.add "Action", valid_612601
  var valid_612602 = query.getOrDefault("Version")
  valid_612602 = validateParameter(valid_612602, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612602 != nil:
    section.add "Version", valid_612602
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612603 = header.getOrDefault("X-Amz-Signature")
  valid_612603 = validateParameter(valid_612603, JString, required = false,
                                 default = nil)
  if valid_612603 != nil:
    section.add "X-Amz-Signature", valid_612603
  var valid_612604 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612604 = validateParameter(valid_612604, JString, required = false,
                                 default = nil)
  if valid_612604 != nil:
    section.add "X-Amz-Content-Sha256", valid_612604
  var valid_612605 = header.getOrDefault("X-Amz-Date")
  valid_612605 = validateParameter(valid_612605, JString, required = false,
                                 default = nil)
  if valid_612605 != nil:
    section.add "X-Amz-Date", valid_612605
  var valid_612606 = header.getOrDefault("X-Amz-Credential")
  valid_612606 = validateParameter(valid_612606, JString, required = false,
                                 default = nil)
  if valid_612606 != nil:
    section.add "X-Amz-Credential", valid_612606
  var valid_612607 = header.getOrDefault("X-Amz-Security-Token")
  valid_612607 = validateParameter(valid_612607, JString, required = false,
                                 default = nil)
  if valid_612607 != nil:
    section.add "X-Amz-Security-Token", valid_612607
  var valid_612608 = header.getOrDefault("X-Amz-Algorithm")
  valid_612608 = validateParameter(valid_612608, JString, required = false,
                                 default = nil)
  if valid_612608 != nil:
    section.add "X-Amz-Algorithm", valid_612608
  var valid_612609 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612609 = validateParameter(valid_612609, JString, required = false,
                                 default = nil)
  if valid_612609 != nil:
    section.add "X-Amz-SignedHeaders", valid_612609
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612610: Call_GetGetSSHPublicKey_612595; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_612610.validator(path, query, header, formData, body)
  let scheme = call_612610.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612610.url(scheme.get, call_612610.host, call_612610.base,
                         call_612610.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612610, url, valid)

proc call*(call_612611: Call_GetGetSSHPublicKey_612595; SSHPublicKeyId: string;
          UserName: string; Encoding: string = "SSH";
          Action: string = "GetSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getGetSSHPublicKey
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Encoding: string (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612612 = newJObject()
  add(query_612612, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_612612, "UserName", newJString(UserName))
  add(query_612612, "Encoding", newJString(Encoding))
  add(query_612612, "Action", newJString(Action))
  add(query_612612, "Version", newJString(Version))
  result = call_612611.call(nil, query_612612, nil, nil, nil)

var getGetSSHPublicKey* = Call_GetGetSSHPublicKey_612595(
    name: "getGetSSHPublicKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetSSHPublicKey", validator: validate_GetGetSSHPublicKey_612596,
    base: "/", url: url_GetGetSSHPublicKey_612597,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServerCertificate_612648 = ref object of OpenApiRestCall_609589
proc url_PostGetServerCertificate_612650(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServerCertificate_612649(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612651 = query.getOrDefault("Action")
  valid_612651 = validateParameter(valid_612651, JString, required = true,
                                 default = newJString("GetServerCertificate"))
  if valid_612651 != nil:
    section.add "Action", valid_612651
  var valid_612652 = query.getOrDefault("Version")
  valid_612652 = validateParameter(valid_612652, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612652 != nil:
    section.add "Version", valid_612652
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612653 = header.getOrDefault("X-Amz-Signature")
  valid_612653 = validateParameter(valid_612653, JString, required = false,
                                 default = nil)
  if valid_612653 != nil:
    section.add "X-Amz-Signature", valid_612653
  var valid_612654 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612654 = validateParameter(valid_612654, JString, required = false,
                                 default = nil)
  if valid_612654 != nil:
    section.add "X-Amz-Content-Sha256", valid_612654
  var valid_612655 = header.getOrDefault("X-Amz-Date")
  valid_612655 = validateParameter(valid_612655, JString, required = false,
                                 default = nil)
  if valid_612655 != nil:
    section.add "X-Amz-Date", valid_612655
  var valid_612656 = header.getOrDefault("X-Amz-Credential")
  valid_612656 = validateParameter(valid_612656, JString, required = false,
                                 default = nil)
  if valid_612656 != nil:
    section.add "X-Amz-Credential", valid_612656
  var valid_612657 = header.getOrDefault("X-Amz-Security-Token")
  valid_612657 = validateParameter(valid_612657, JString, required = false,
                                 default = nil)
  if valid_612657 != nil:
    section.add "X-Amz-Security-Token", valid_612657
  var valid_612658 = header.getOrDefault("X-Amz-Algorithm")
  valid_612658 = validateParameter(valid_612658, JString, required = false,
                                 default = nil)
  if valid_612658 != nil:
    section.add "X-Amz-Algorithm", valid_612658
  var valid_612659 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612659 = validateParameter(valid_612659, JString, required = false,
                                 default = nil)
  if valid_612659 != nil:
    section.add "X-Amz-SignedHeaders", valid_612659
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_612660 = formData.getOrDefault("ServerCertificateName")
  valid_612660 = validateParameter(valid_612660, JString, required = true,
                                 default = nil)
  if valid_612660 != nil:
    section.add "ServerCertificateName", valid_612660
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612661: Call_PostGetServerCertificate_612648; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_612661.validator(path, query, header, formData, body)
  let scheme = call_612661.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612661.url(scheme.get, call_612661.host, call_612661.base,
                         call_612661.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612661, url, valid)

proc call*(call_612662: Call_PostGetServerCertificate_612648;
          ServerCertificateName: string; Action: string = "GetServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postGetServerCertificate
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612663 = newJObject()
  var formData_612664 = newJObject()
  add(formData_612664, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_612663, "Action", newJString(Action))
  add(query_612663, "Version", newJString(Version))
  result = call_612662.call(nil, query_612663, nil, formData_612664, nil)

var postGetServerCertificate* = Call_PostGetServerCertificate_612648(
    name: "postGetServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetServerCertificate",
    validator: validate_PostGetServerCertificate_612649, base: "/",
    url: url_PostGetServerCertificate_612650, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServerCertificate_612632 = ref object of OpenApiRestCall_609589
proc url_GetGetServerCertificate_612634(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServerCertificate_612633(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_612635 = query.getOrDefault("ServerCertificateName")
  valid_612635 = validateParameter(valid_612635, JString, required = true,
                                 default = nil)
  if valid_612635 != nil:
    section.add "ServerCertificateName", valid_612635
  var valid_612636 = query.getOrDefault("Action")
  valid_612636 = validateParameter(valid_612636, JString, required = true,
                                 default = newJString("GetServerCertificate"))
  if valid_612636 != nil:
    section.add "Action", valid_612636
  var valid_612637 = query.getOrDefault("Version")
  valid_612637 = validateParameter(valid_612637, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612637 != nil:
    section.add "Version", valid_612637
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612638 = header.getOrDefault("X-Amz-Signature")
  valid_612638 = validateParameter(valid_612638, JString, required = false,
                                 default = nil)
  if valid_612638 != nil:
    section.add "X-Amz-Signature", valid_612638
  var valid_612639 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612639 = validateParameter(valid_612639, JString, required = false,
                                 default = nil)
  if valid_612639 != nil:
    section.add "X-Amz-Content-Sha256", valid_612639
  var valid_612640 = header.getOrDefault("X-Amz-Date")
  valid_612640 = validateParameter(valid_612640, JString, required = false,
                                 default = nil)
  if valid_612640 != nil:
    section.add "X-Amz-Date", valid_612640
  var valid_612641 = header.getOrDefault("X-Amz-Credential")
  valid_612641 = validateParameter(valid_612641, JString, required = false,
                                 default = nil)
  if valid_612641 != nil:
    section.add "X-Amz-Credential", valid_612641
  var valid_612642 = header.getOrDefault("X-Amz-Security-Token")
  valid_612642 = validateParameter(valid_612642, JString, required = false,
                                 default = nil)
  if valid_612642 != nil:
    section.add "X-Amz-Security-Token", valid_612642
  var valid_612643 = header.getOrDefault("X-Amz-Algorithm")
  valid_612643 = validateParameter(valid_612643, JString, required = false,
                                 default = nil)
  if valid_612643 != nil:
    section.add "X-Amz-Algorithm", valid_612643
  var valid_612644 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612644 = validateParameter(valid_612644, JString, required = false,
                                 default = nil)
  if valid_612644 != nil:
    section.add "X-Amz-SignedHeaders", valid_612644
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612645: Call_GetGetServerCertificate_612632; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_612645.validator(path, query, header, formData, body)
  let scheme = call_612645.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612645.url(scheme.get, call_612645.host, call_612645.base,
                         call_612645.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612645, url, valid)

proc call*(call_612646: Call_GetGetServerCertificate_612632;
          ServerCertificateName: string; Action: string = "GetServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServerCertificate
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612647 = newJObject()
  add(query_612647, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_612647, "Action", newJString(Action))
  add(query_612647, "Version", newJString(Version))
  result = call_612646.call(nil, query_612647, nil, nil, nil)

var getGetServerCertificate* = Call_GetGetServerCertificate_612632(
    name: "getGetServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetServerCertificate",
    validator: validate_GetGetServerCertificate_612633, base: "/",
    url: url_GetGetServerCertificate_612634, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLastAccessedDetails_612683 = ref object of OpenApiRestCall_609589
proc url_PostGetServiceLastAccessedDetails_612685(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServiceLastAccessedDetails_612684(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612686 = query.getOrDefault("Action")
  valid_612686 = validateParameter(valid_612686, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetails"))
  if valid_612686 != nil:
    section.add "Action", valid_612686
  var valid_612687 = query.getOrDefault("Version")
  valid_612687 = validateParameter(valid_612687, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612687 != nil:
    section.add "Version", valid_612687
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612688 = header.getOrDefault("X-Amz-Signature")
  valid_612688 = validateParameter(valid_612688, JString, required = false,
                                 default = nil)
  if valid_612688 != nil:
    section.add "X-Amz-Signature", valid_612688
  var valid_612689 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612689 = validateParameter(valid_612689, JString, required = false,
                                 default = nil)
  if valid_612689 != nil:
    section.add "X-Amz-Content-Sha256", valid_612689
  var valid_612690 = header.getOrDefault("X-Amz-Date")
  valid_612690 = validateParameter(valid_612690, JString, required = false,
                                 default = nil)
  if valid_612690 != nil:
    section.add "X-Amz-Date", valid_612690
  var valid_612691 = header.getOrDefault("X-Amz-Credential")
  valid_612691 = validateParameter(valid_612691, JString, required = false,
                                 default = nil)
  if valid_612691 != nil:
    section.add "X-Amz-Credential", valid_612691
  var valid_612692 = header.getOrDefault("X-Amz-Security-Token")
  valid_612692 = validateParameter(valid_612692, JString, required = false,
                                 default = nil)
  if valid_612692 != nil:
    section.add "X-Amz-Security-Token", valid_612692
  var valid_612693 = header.getOrDefault("X-Amz-Algorithm")
  valid_612693 = validateParameter(valid_612693, JString, required = false,
                                 default = nil)
  if valid_612693 != nil:
    section.add "X-Amz-Algorithm", valid_612693
  var valid_612694 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612694 = validateParameter(valid_612694, JString, required = false,
                                 default = nil)
  if valid_612694 != nil:
    section.add "X-Amz-SignedHeaders", valid_612694
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  section = newJObject()
  var valid_612695 = formData.getOrDefault("Marker")
  valid_612695 = validateParameter(valid_612695, JString, required = false,
                                 default = nil)
  if valid_612695 != nil:
    section.add "Marker", valid_612695
  var valid_612696 = formData.getOrDefault("MaxItems")
  valid_612696 = validateParameter(valid_612696, JInt, required = false, default = nil)
  if valid_612696 != nil:
    section.add "MaxItems", valid_612696
  assert formData != nil,
        "formData argument is necessary due to required `JobId` field"
  var valid_612697 = formData.getOrDefault("JobId")
  valid_612697 = validateParameter(valid_612697, JString, required = true,
                                 default = nil)
  if valid_612697 != nil:
    section.add "JobId", valid_612697
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612698: Call_PostGetServiceLastAccessedDetails_612683;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_612698.validator(path, query, header, formData, body)
  let scheme = call_612698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612698.url(scheme.get, call_612698.host, call_612698.base,
                         call_612698.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612698, url, valid)

proc call*(call_612699: Call_PostGetServiceLastAccessedDetails_612683;
          JobId: string; Marker: string = "";
          Action: string = "GetServiceLastAccessedDetails"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLastAccessedDetails
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   Version: string (required)
  var query_612700 = newJObject()
  var formData_612701 = newJObject()
  add(formData_612701, "Marker", newJString(Marker))
  add(query_612700, "Action", newJString(Action))
  add(formData_612701, "MaxItems", newJInt(MaxItems))
  add(formData_612701, "JobId", newJString(JobId))
  add(query_612700, "Version", newJString(Version))
  result = call_612699.call(nil, query_612700, nil, formData_612701, nil)

var postGetServiceLastAccessedDetails* = Call_PostGetServiceLastAccessedDetails_612683(
    name: "postGetServiceLastAccessedDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetServiceLastAccessedDetails",
    validator: validate_PostGetServiceLastAccessedDetails_612684, base: "/",
    url: url_PostGetServiceLastAccessedDetails_612685,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLastAccessedDetails_612665 = ref object of OpenApiRestCall_609589
proc url_GetGetServiceLastAccessedDetails_612667(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServiceLastAccessedDetails_612666(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  section = newJObject()
  var valid_612668 = query.getOrDefault("Marker")
  valid_612668 = validateParameter(valid_612668, JString, required = false,
                                 default = nil)
  if valid_612668 != nil:
    section.add "Marker", valid_612668
  var valid_612669 = query.getOrDefault("MaxItems")
  valid_612669 = validateParameter(valid_612669, JInt, required = false, default = nil)
  if valid_612669 != nil:
    section.add "MaxItems", valid_612669
  var valid_612670 = query.getOrDefault("Action")
  valid_612670 = validateParameter(valid_612670, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetails"))
  if valid_612670 != nil:
    section.add "Action", valid_612670
  var valid_612671 = query.getOrDefault("Version")
  valid_612671 = validateParameter(valid_612671, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612671 != nil:
    section.add "Version", valid_612671
  var valid_612672 = query.getOrDefault("JobId")
  valid_612672 = validateParameter(valid_612672, JString, required = true,
                                 default = nil)
  if valid_612672 != nil:
    section.add "JobId", valid_612672
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612673 = header.getOrDefault("X-Amz-Signature")
  valid_612673 = validateParameter(valid_612673, JString, required = false,
                                 default = nil)
  if valid_612673 != nil:
    section.add "X-Amz-Signature", valid_612673
  var valid_612674 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612674 = validateParameter(valid_612674, JString, required = false,
                                 default = nil)
  if valid_612674 != nil:
    section.add "X-Amz-Content-Sha256", valid_612674
  var valid_612675 = header.getOrDefault("X-Amz-Date")
  valid_612675 = validateParameter(valid_612675, JString, required = false,
                                 default = nil)
  if valid_612675 != nil:
    section.add "X-Amz-Date", valid_612675
  var valid_612676 = header.getOrDefault("X-Amz-Credential")
  valid_612676 = validateParameter(valid_612676, JString, required = false,
                                 default = nil)
  if valid_612676 != nil:
    section.add "X-Amz-Credential", valid_612676
  var valid_612677 = header.getOrDefault("X-Amz-Security-Token")
  valid_612677 = validateParameter(valid_612677, JString, required = false,
                                 default = nil)
  if valid_612677 != nil:
    section.add "X-Amz-Security-Token", valid_612677
  var valid_612678 = header.getOrDefault("X-Amz-Algorithm")
  valid_612678 = validateParameter(valid_612678, JString, required = false,
                                 default = nil)
  if valid_612678 != nil:
    section.add "X-Amz-Algorithm", valid_612678
  var valid_612679 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612679 = validateParameter(valid_612679, JString, required = false,
                                 default = nil)
  if valid_612679 != nil:
    section.add "X-Amz-SignedHeaders", valid_612679
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612680: Call_GetGetServiceLastAccessedDetails_612665;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_612680.validator(path, query, header, formData, body)
  let scheme = call_612680.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612680.url(scheme.get, call_612680.host, call_612680.base,
                         call_612680.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612680, url, valid)

proc call*(call_612681: Call_GetGetServiceLastAccessedDetails_612665;
          JobId: string; Marker: string = ""; MaxItems: int = 0;
          Action: string = "GetServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLastAccessedDetails
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  var query_612682 = newJObject()
  add(query_612682, "Marker", newJString(Marker))
  add(query_612682, "MaxItems", newJInt(MaxItems))
  add(query_612682, "Action", newJString(Action))
  add(query_612682, "Version", newJString(Version))
  add(query_612682, "JobId", newJString(JobId))
  result = call_612681.call(nil, query_612682, nil, nil, nil)

var getGetServiceLastAccessedDetails* = Call_GetGetServiceLastAccessedDetails_612665(
    name: "getGetServiceLastAccessedDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetServiceLastAccessedDetails",
    validator: validate_GetGetServiceLastAccessedDetails_612666, base: "/",
    url: url_GetGetServiceLastAccessedDetails_612667,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLastAccessedDetailsWithEntities_612721 = ref object of OpenApiRestCall_609589
proc url_PostGetServiceLastAccessedDetailsWithEntities_612723(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServiceLastAccessedDetailsWithEntities_612722(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612724 = query.getOrDefault("Action")
  valid_612724 = validateParameter(valid_612724, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetailsWithEntities"))
  if valid_612724 != nil:
    section.add "Action", valid_612724
  var valid_612725 = query.getOrDefault("Version")
  valid_612725 = validateParameter(valid_612725, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612725 != nil:
    section.add "Version", valid_612725
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612726 = header.getOrDefault("X-Amz-Signature")
  valid_612726 = validateParameter(valid_612726, JString, required = false,
                                 default = nil)
  if valid_612726 != nil:
    section.add "X-Amz-Signature", valid_612726
  var valid_612727 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612727 = validateParameter(valid_612727, JString, required = false,
                                 default = nil)
  if valid_612727 != nil:
    section.add "X-Amz-Content-Sha256", valid_612727
  var valid_612728 = header.getOrDefault("X-Amz-Date")
  valid_612728 = validateParameter(valid_612728, JString, required = false,
                                 default = nil)
  if valid_612728 != nil:
    section.add "X-Amz-Date", valid_612728
  var valid_612729 = header.getOrDefault("X-Amz-Credential")
  valid_612729 = validateParameter(valid_612729, JString, required = false,
                                 default = nil)
  if valid_612729 != nil:
    section.add "X-Amz-Credential", valid_612729
  var valid_612730 = header.getOrDefault("X-Amz-Security-Token")
  valid_612730 = validateParameter(valid_612730, JString, required = false,
                                 default = nil)
  if valid_612730 != nil:
    section.add "X-Amz-Security-Token", valid_612730
  var valid_612731 = header.getOrDefault("X-Amz-Algorithm")
  valid_612731 = validateParameter(valid_612731, JString, required = false,
                                 default = nil)
  if valid_612731 != nil:
    section.add "X-Amz-Algorithm", valid_612731
  var valid_612732 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612732 = validateParameter(valid_612732, JString, required = false,
                                 default = nil)
  if valid_612732 != nil:
    section.add "X-Amz-SignedHeaders", valid_612732
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespace: JString (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  section = newJObject()
  var valid_612733 = formData.getOrDefault("Marker")
  valid_612733 = validateParameter(valid_612733, JString, required = false,
                                 default = nil)
  if valid_612733 != nil:
    section.add "Marker", valid_612733
  assert formData != nil, "formData argument is necessary due to required `ServiceNamespace` field"
  var valid_612734 = formData.getOrDefault("ServiceNamespace")
  valid_612734 = validateParameter(valid_612734, JString, required = true,
                                 default = nil)
  if valid_612734 != nil:
    section.add "ServiceNamespace", valid_612734
  var valid_612735 = formData.getOrDefault("MaxItems")
  valid_612735 = validateParameter(valid_612735, JInt, required = false, default = nil)
  if valid_612735 != nil:
    section.add "MaxItems", valid_612735
  var valid_612736 = formData.getOrDefault("JobId")
  valid_612736 = validateParameter(valid_612736, JString, required = true,
                                 default = nil)
  if valid_612736 != nil:
    section.add "JobId", valid_612736
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612737: Call_PostGetServiceLastAccessedDetailsWithEntities_612721;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  let valid = call_612737.validator(path, query, header, formData, body)
  let scheme = call_612737.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612737.url(scheme.get, call_612737.host, call_612737.base,
                         call_612737.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612737, url, valid)

proc call*(call_612738: Call_PostGetServiceLastAccessedDetailsWithEntities_612721;
          ServiceNamespace: string; JobId: string; Marker: string = "";
          Action: string = "GetServiceLastAccessedDetailsWithEntities";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLastAccessedDetailsWithEntities
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespace: string (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   Version: string (required)
  var query_612739 = newJObject()
  var formData_612740 = newJObject()
  add(formData_612740, "Marker", newJString(Marker))
  add(formData_612740, "ServiceNamespace", newJString(ServiceNamespace))
  add(query_612739, "Action", newJString(Action))
  add(formData_612740, "MaxItems", newJInt(MaxItems))
  add(formData_612740, "JobId", newJString(JobId))
  add(query_612739, "Version", newJString(Version))
  result = call_612738.call(nil, query_612739, nil, formData_612740, nil)

var postGetServiceLastAccessedDetailsWithEntities* = Call_PostGetServiceLastAccessedDetailsWithEntities_612721(
    name: "postGetServiceLastAccessedDetailsWithEntities",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLastAccessedDetailsWithEntities",
    validator: validate_PostGetServiceLastAccessedDetailsWithEntities_612722,
    base: "/", url: url_PostGetServiceLastAccessedDetailsWithEntities_612723,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLastAccessedDetailsWithEntities_612702 = ref object of OpenApiRestCall_609589
proc url_GetGetServiceLastAccessedDetailsWithEntities_612704(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServiceLastAccessedDetailsWithEntities_612703(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ServiceNamespace: JString (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  section = newJObject()
  var valid_612705 = query.getOrDefault("Marker")
  valid_612705 = validateParameter(valid_612705, JString, required = false,
                                 default = nil)
  if valid_612705 != nil:
    section.add "Marker", valid_612705
  var valid_612706 = query.getOrDefault("MaxItems")
  valid_612706 = validateParameter(valid_612706, JInt, required = false, default = nil)
  if valid_612706 != nil:
    section.add "MaxItems", valid_612706
  assert query != nil,
        "query argument is necessary due to required `ServiceNamespace` field"
  var valid_612707 = query.getOrDefault("ServiceNamespace")
  valid_612707 = validateParameter(valid_612707, JString, required = true,
                                 default = nil)
  if valid_612707 != nil:
    section.add "ServiceNamespace", valid_612707
  var valid_612708 = query.getOrDefault("Action")
  valid_612708 = validateParameter(valid_612708, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetailsWithEntities"))
  if valid_612708 != nil:
    section.add "Action", valid_612708
  var valid_612709 = query.getOrDefault("Version")
  valid_612709 = validateParameter(valid_612709, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612709 != nil:
    section.add "Version", valid_612709
  var valid_612710 = query.getOrDefault("JobId")
  valid_612710 = validateParameter(valid_612710, JString, required = true,
                                 default = nil)
  if valid_612710 != nil:
    section.add "JobId", valid_612710
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612711 = header.getOrDefault("X-Amz-Signature")
  valid_612711 = validateParameter(valid_612711, JString, required = false,
                                 default = nil)
  if valid_612711 != nil:
    section.add "X-Amz-Signature", valid_612711
  var valid_612712 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612712 = validateParameter(valid_612712, JString, required = false,
                                 default = nil)
  if valid_612712 != nil:
    section.add "X-Amz-Content-Sha256", valid_612712
  var valid_612713 = header.getOrDefault("X-Amz-Date")
  valid_612713 = validateParameter(valid_612713, JString, required = false,
                                 default = nil)
  if valid_612713 != nil:
    section.add "X-Amz-Date", valid_612713
  var valid_612714 = header.getOrDefault("X-Amz-Credential")
  valid_612714 = validateParameter(valid_612714, JString, required = false,
                                 default = nil)
  if valid_612714 != nil:
    section.add "X-Amz-Credential", valid_612714
  var valid_612715 = header.getOrDefault("X-Amz-Security-Token")
  valid_612715 = validateParameter(valid_612715, JString, required = false,
                                 default = nil)
  if valid_612715 != nil:
    section.add "X-Amz-Security-Token", valid_612715
  var valid_612716 = header.getOrDefault("X-Amz-Algorithm")
  valid_612716 = validateParameter(valid_612716, JString, required = false,
                                 default = nil)
  if valid_612716 != nil:
    section.add "X-Amz-Algorithm", valid_612716
  var valid_612717 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612717 = validateParameter(valid_612717, JString, required = false,
                                 default = nil)
  if valid_612717 != nil:
    section.add "X-Amz-SignedHeaders", valid_612717
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612718: Call_GetGetServiceLastAccessedDetailsWithEntities_612702;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  let valid = call_612718.validator(path, query, header, formData, body)
  let scheme = call_612718.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612718.url(scheme.get, call_612718.host, call_612718.base,
                         call_612718.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612718, url, valid)

proc call*(call_612719: Call_GetGetServiceLastAccessedDetailsWithEntities_612702;
          ServiceNamespace: string; JobId: string; Marker: string = "";
          MaxItems: int = 0;
          Action: string = "GetServiceLastAccessedDetailsWithEntities";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLastAccessedDetailsWithEntities
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ServiceNamespace: string (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  var query_612720 = newJObject()
  add(query_612720, "Marker", newJString(Marker))
  add(query_612720, "MaxItems", newJInt(MaxItems))
  add(query_612720, "ServiceNamespace", newJString(ServiceNamespace))
  add(query_612720, "Action", newJString(Action))
  add(query_612720, "Version", newJString(Version))
  add(query_612720, "JobId", newJString(JobId))
  result = call_612719.call(nil, query_612720, nil, nil, nil)

var getGetServiceLastAccessedDetailsWithEntities* = Call_GetGetServiceLastAccessedDetailsWithEntities_612702(
    name: "getGetServiceLastAccessedDetailsWithEntities",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLastAccessedDetailsWithEntities",
    validator: validate_GetGetServiceLastAccessedDetailsWithEntities_612703,
    base: "/", url: url_GetGetServiceLastAccessedDetailsWithEntities_612704,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLinkedRoleDeletionStatus_612757 = ref object of OpenApiRestCall_609589
proc url_PostGetServiceLinkedRoleDeletionStatus_612759(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServiceLinkedRoleDeletionStatus_612758(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612760 = query.getOrDefault("Action")
  valid_612760 = validateParameter(valid_612760, JString, required = true, default = newJString(
      "GetServiceLinkedRoleDeletionStatus"))
  if valid_612760 != nil:
    section.add "Action", valid_612760
  var valid_612761 = query.getOrDefault("Version")
  valid_612761 = validateParameter(valid_612761, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612761 != nil:
    section.add "Version", valid_612761
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612762 = header.getOrDefault("X-Amz-Signature")
  valid_612762 = validateParameter(valid_612762, JString, required = false,
                                 default = nil)
  if valid_612762 != nil:
    section.add "X-Amz-Signature", valid_612762
  var valid_612763 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612763 = validateParameter(valid_612763, JString, required = false,
                                 default = nil)
  if valid_612763 != nil:
    section.add "X-Amz-Content-Sha256", valid_612763
  var valid_612764 = header.getOrDefault("X-Amz-Date")
  valid_612764 = validateParameter(valid_612764, JString, required = false,
                                 default = nil)
  if valid_612764 != nil:
    section.add "X-Amz-Date", valid_612764
  var valid_612765 = header.getOrDefault("X-Amz-Credential")
  valid_612765 = validateParameter(valid_612765, JString, required = false,
                                 default = nil)
  if valid_612765 != nil:
    section.add "X-Amz-Credential", valid_612765
  var valid_612766 = header.getOrDefault("X-Amz-Security-Token")
  valid_612766 = validateParameter(valid_612766, JString, required = false,
                                 default = nil)
  if valid_612766 != nil:
    section.add "X-Amz-Security-Token", valid_612766
  var valid_612767 = header.getOrDefault("X-Amz-Algorithm")
  valid_612767 = validateParameter(valid_612767, JString, required = false,
                                 default = nil)
  if valid_612767 != nil:
    section.add "X-Amz-Algorithm", valid_612767
  var valid_612768 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612768 = validateParameter(valid_612768, JString, required = false,
                                 default = nil)
  if valid_612768 != nil:
    section.add "X-Amz-SignedHeaders", valid_612768
  result.add "header", section
  ## parameters in `formData` object:
  ##   DeletionTaskId: JString (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DeletionTaskId` field"
  var valid_612769 = formData.getOrDefault("DeletionTaskId")
  valid_612769 = validateParameter(valid_612769, JString, required = true,
                                 default = nil)
  if valid_612769 != nil:
    section.add "DeletionTaskId", valid_612769
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612770: Call_PostGetServiceLinkedRoleDeletionStatus_612757;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  let valid = call_612770.validator(path, query, header, formData, body)
  let scheme = call_612770.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612770.url(scheme.get, call_612770.host, call_612770.base,
                         call_612770.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612770, url, valid)

proc call*(call_612771: Call_PostGetServiceLinkedRoleDeletionStatus_612757;
          DeletionTaskId: string;
          Action: string = "GetServiceLinkedRoleDeletionStatus";
          Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLinkedRoleDeletionStatus
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ##   DeletionTaskId: string (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612772 = newJObject()
  var formData_612773 = newJObject()
  add(formData_612773, "DeletionTaskId", newJString(DeletionTaskId))
  add(query_612772, "Action", newJString(Action))
  add(query_612772, "Version", newJString(Version))
  result = call_612771.call(nil, query_612772, nil, formData_612773, nil)

var postGetServiceLinkedRoleDeletionStatus* = Call_PostGetServiceLinkedRoleDeletionStatus_612757(
    name: "postGetServiceLinkedRoleDeletionStatus", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLinkedRoleDeletionStatus",
    validator: validate_PostGetServiceLinkedRoleDeletionStatus_612758, base: "/",
    url: url_PostGetServiceLinkedRoleDeletionStatus_612759,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLinkedRoleDeletionStatus_612741 = ref object of OpenApiRestCall_609589
proc url_GetGetServiceLinkedRoleDeletionStatus_612743(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServiceLinkedRoleDeletionStatus_612742(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionTaskId: JString (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DeletionTaskId` field"
  var valid_612744 = query.getOrDefault("DeletionTaskId")
  valid_612744 = validateParameter(valid_612744, JString, required = true,
                                 default = nil)
  if valid_612744 != nil:
    section.add "DeletionTaskId", valid_612744
  var valid_612745 = query.getOrDefault("Action")
  valid_612745 = validateParameter(valid_612745, JString, required = true, default = newJString(
      "GetServiceLinkedRoleDeletionStatus"))
  if valid_612745 != nil:
    section.add "Action", valid_612745
  var valid_612746 = query.getOrDefault("Version")
  valid_612746 = validateParameter(valid_612746, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612746 != nil:
    section.add "Version", valid_612746
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612747 = header.getOrDefault("X-Amz-Signature")
  valid_612747 = validateParameter(valid_612747, JString, required = false,
                                 default = nil)
  if valid_612747 != nil:
    section.add "X-Amz-Signature", valid_612747
  var valid_612748 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612748 = validateParameter(valid_612748, JString, required = false,
                                 default = nil)
  if valid_612748 != nil:
    section.add "X-Amz-Content-Sha256", valid_612748
  var valid_612749 = header.getOrDefault("X-Amz-Date")
  valid_612749 = validateParameter(valid_612749, JString, required = false,
                                 default = nil)
  if valid_612749 != nil:
    section.add "X-Amz-Date", valid_612749
  var valid_612750 = header.getOrDefault("X-Amz-Credential")
  valid_612750 = validateParameter(valid_612750, JString, required = false,
                                 default = nil)
  if valid_612750 != nil:
    section.add "X-Amz-Credential", valid_612750
  var valid_612751 = header.getOrDefault("X-Amz-Security-Token")
  valid_612751 = validateParameter(valid_612751, JString, required = false,
                                 default = nil)
  if valid_612751 != nil:
    section.add "X-Amz-Security-Token", valid_612751
  var valid_612752 = header.getOrDefault("X-Amz-Algorithm")
  valid_612752 = validateParameter(valid_612752, JString, required = false,
                                 default = nil)
  if valid_612752 != nil:
    section.add "X-Amz-Algorithm", valid_612752
  var valid_612753 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612753 = validateParameter(valid_612753, JString, required = false,
                                 default = nil)
  if valid_612753 != nil:
    section.add "X-Amz-SignedHeaders", valid_612753
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612754: Call_GetGetServiceLinkedRoleDeletionStatus_612741;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  let valid = call_612754.validator(path, query, header, formData, body)
  let scheme = call_612754.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612754.url(scheme.get, call_612754.host, call_612754.base,
                         call_612754.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612754, url, valid)

proc call*(call_612755: Call_GetGetServiceLinkedRoleDeletionStatus_612741;
          DeletionTaskId: string;
          Action: string = "GetServiceLinkedRoleDeletionStatus";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLinkedRoleDeletionStatus
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ##   DeletionTaskId: string (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612756 = newJObject()
  add(query_612756, "DeletionTaskId", newJString(DeletionTaskId))
  add(query_612756, "Action", newJString(Action))
  add(query_612756, "Version", newJString(Version))
  result = call_612755.call(nil, query_612756, nil, nil, nil)

var getGetServiceLinkedRoleDeletionStatus* = Call_GetGetServiceLinkedRoleDeletionStatus_612741(
    name: "getGetServiceLinkedRoleDeletionStatus", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLinkedRoleDeletionStatus",
    validator: validate_GetGetServiceLinkedRoleDeletionStatus_612742, base: "/",
    url: url_GetGetServiceLinkedRoleDeletionStatus_612743,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetUser_612790 = ref object of OpenApiRestCall_609589
proc url_PostGetUser_612792(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetUser_612791(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612793 = query.getOrDefault("Action")
  valid_612793 = validateParameter(valid_612793, JString, required = true,
                                 default = newJString("GetUser"))
  if valid_612793 != nil:
    section.add "Action", valid_612793
  var valid_612794 = query.getOrDefault("Version")
  valid_612794 = validateParameter(valid_612794, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612794 != nil:
    section.add "Version", valid_612794
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612795 = header.getOrDefault("X-Amz-Signature")
  valid_612795 = validateParameter(valid_612795, JString, required = false,
                                 default = nil)
  if valid_612795 != nil:
    section.add "X-Amz-Signature", valid_612795
  var valid_612796 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612796 = validateParameter(valid_612796, JString, required = false,
                                 default = nil)
  if valid_612796 != nil:
    section.add "X-Amz-Content-Sha256", valid_612796
  var valid_612797 = header.getOrDefault("X-Amz-Date")
  valid_612797 = validateParameter(valid_612797, JString, required = false,
                                 default = nil)
  if valid_612797 != nil:
    section.add "X-Amz-Date", valid_612797
  var valid_612798 = header.getOrDefault("X-Amz-Credential")
  valid_612798 = validateParameter(valid_612798, JString, required = false,
                                 default = nil)
  if valid_612798 != nil:
    section.add "X-Amz-Credential", valid_612798
  var valid_612799 = header.getOrDefault("X-Amz-Security-Token")
  valid_612799 = validateParameter(valid_612799, JString, required = false,
                                 default = nil)
  if valid_612799 != nil:
    section.add "X-Amz-Security-Token", valid_612799
  var valid_612800 = header.getOrDefault("X-Amz-Algorithm")
  valid_612800 = validateParameter(valid_612800, JString, required = false,
                                 default = nil)
  if valid_612800 != nil:
    section.add "X-Amz-Algorithm", valid_612800
  var valid_612801 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612801 = validateParameter(valid_612801, JString, required = false,
                                 default = nil)
  if valid_612801 != nil:
    section.add "X-Amz-SignedHeaders", valid_612801
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_612802 = formData.getOrDefault("UserName")
  valid_612802 = validateParameter(valid_612802, JString, required = false,
                                 default = nil)
  if valid_612802 != nil:
    section.add "UserName", valid_612802
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612803: Call_PostGetUser_612790; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  let valid = call_612803.validator(path, query, header, formData, body)
  let scheme = call_612803.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612803.url(scheme.get, call_612803.host, call_612803.base,
                         call_612803.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612803, url, valid)

proc call*(call_612804: Call_PostGetUser_612790; UserName: string = "";
          Action: string = "GetUser"; Version: string = "2010-05-08"): Recallable =
  ## postGetUser
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ##   UserName: string
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612805 = newJObject()
  var formData_612806 = newJObject()
  add(formData_612806, "UserName", newJString(UserName))
  add(query_612805, "Action", newJString(Action))
  add(query_612805, "Version", newJString(Version))
  result = call_612804.call(nil, query_612805, nil, formData_612806, nil)

var postGetUser* = Call_PostGetUser_612790(name: "postGetUser",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetUser",
                                        validator: validate_PostGetUser_612791,
                                        base: "/", url: url_PostGetUser_612792,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetUser_612774 = ref object of OpenApiRestCall_609589
proc url_GetGetUser_612776(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetUser_612775(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612777 = query.getOrDefault("UserName")
  valid_612777 = validateParameter(valid_612777, JString, required = false,
                                 default = nil)
  if valid_612777 != nil:
    section.add "UserName", valid_612777
  var valid_612778 = query.getOrDefault("Action")
  valid_612778 = validateParameter(valid_612778, JString, required = true,
                                 default = newJString("GetUser"))
  if valid_612778 != nil:
    section.add "Action", valid_612778
  var valid_612779 = query.getOrDefault("Version")
  valid_612779 = validateParameter(valid_612779, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612779 != nil:
    section.add "Version", valid_612779
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612780 = header.getOrDefault("X-Amz-Signature")
  valid_612780 = validateParameter(valid_612780, JString, required = false,
                                 default = nil)
  if valid_612780 != nil:
    section.add "X-Amz-Signature", valid_612780
  var valid_612781 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612781 = validateParameter(valid_612781, JString, required = false,
                                 default = nil)
  if valid_612781 != nil:
    section.add "X-Amz-Content-Sha256", valid_612781
  var valid_612782 = header.getOrDefault("X-Amz-Date")
  valid_612782 = validateParameter(valid_612782, JString, required = false,
                                 default = nil)
  if valid_612782 != nil:
    section.add "X-Amz-Date", valid_612782
  var valid_612783 = header.getOrDefault("X-Amz-Credential")
  valid_612783 = validateParameter(valid_612783, JString, required = false,
                                 default = nil)
  if valid_612783 != nil:
    section.add "X-Amz-Credential", valid_612783
  var valid_612784 = header.getOrDefault("X-Amz-Security-Token")
  valid_612784 = validateParameter(valid_612784, JString, required = false,
                                 default = nil)
  if valid_612784 != nil:
    section.add "X-Amz-Security-Token", valid_612784
  var valid_612785 = header.getOrDefault("X-Amz-Algorithm")
  valid_612785 = validateParameter(valid_612785, JString, required = false,
                                 default = nil)
  if valid_612785 != nil:
    section.add "X-Amz-Algorithm", valid_612785
  var valid_612786 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612786 = validateParameter(valid_612786, JString, required = false,
                                 default = nil)
  if valid_612786 != nil:
    section.add "X-Amz-SignedHeaders", valid_612786
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612787: Call_GetGetUser_612774; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  let valid = call_612787.validator(path, query, header, formData, body)
  let scheme = call_612787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612787.url(scheme.get, call_612787.host, call_612787.base,
                         call_612787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612787, url, valid)

proc call*(call_612788: Call_GetGetUser_612774; UserName: string = "";
          Action: string = "GetUser"; Version: string = "2010-05-08"): Recallable =
  ## getGetUser
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ##   UserName: string
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612789 = newJObject()
  add(query_612789, "UserName", newJString(UserName))
  add(query_612789, "Action", newJString(Action))
  add(query_612789, "Version", newJString(Version))
  result = call_612788.call(nil, query_612789, nil, nil, nil)

var getGetUser* = Call_GetGetUser_612774(name: "getGetUser",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=GetUser",
                                      validator: validate_GetGetUser_612775,
                                      base: "/", url: url_GetGetUser_612776,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetUserPolicy_612824 = ref object of OpenApiRestCall_609589
proc url_PostGetUserPolicy_612826(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetUserPolicy_612825(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612827 = query.getOrDefault("Action")
  valid_612827 = validateParameter(valid_612827, JString, required = true,
                                 default = newJString("GetUserPolicy"))
  if valid_612827 != nil:
    section.add "Action", valid_612827
  var valid_612828 = query.getOrDefault("Version")
  valid_612828 = validateParameter(valid_612828, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612828 != nil:
    section.add "Version", valid_612828
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612829 = header.getOrDefault("X-Amz-Signature")
  valid_612829 = validateParameter(valid_612829, JString, required = false,
                                 default = nil)
  if valid_612829 != nil:
    section.add "X-Amz-Signature", valid_612829
  var valid_612830 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612830 = validateParameter(valid_612830, JString, required = false,
                                 default = nil)
  if valid_612830 != nil:
    section.add "X-Amz-Content-Sha256", valid_612830
  var valid_612831 = header.getOrDefault("X-Amz-Date")
  valid_612831 = validateParameter(valid_612831, JString, required = false,
                                 default = nil)
  if valid_612831 != nil:
    section.add "X-Amz-Date", valid_612831
  var valid_612832 = header.getOrDefault("X-Amz-Credential")
  valid_612832 = validateParameter(valid_612832, JString, required = false,
                                 default = nil)
  if valid_612832 != nil:
    section.add "X-Amz-Credential", valid_612832
  var valid_612833 = header.getOrDefault("X-Amz-Security-Token")
  valid_612833 = validateParameter(valid_612833, JString, required = false,
                                 default = nil)
  if valid_612833 != nil:
    section.add "X-Amz-Security-Token", valid_612833
  var valid_612834 = header.getOrDefault("X-Amz-Algorithm")
  valid_612834 = validateParameter(valid_612834, JString, required = false,
                                 default = nil)
  if valid_612834 != nil:
    section.add "X-Amz-Algorithm", valid_612834
  var valid_612835 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612835 = validateParameter(valid_612835, JString, required = false,
                                 default = nil)
  if valid_612835 != nil:
    section.add "X-Amz-SignedHeaders", valid_612835
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_612836 = formData.getOrDefault("UserName")
  valid_612836 = validateParameter(valid_612836, JString, required = true,
                                 default = nil)
  if valid_612836 != nil:
    section.add "UserName", valid_612836
  var valid_612837 = formData.getOrDefault("PolicyName")
  valid_612837 = validateParameter(valid_612837, JString, required = true,
                                 default = nil)
  if valid_612837 != nil:
    section.add "PolicyName", valid_612837
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612838: Call_PostGetUserPolicy_612824; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612838.validator(path, query, header, formData, body)
  let scheme = call_612838.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612838.url(scheme.get, call_612838.host, call_612838.base,
                         call_612838.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612838, url, valid)

proc call*(call_612839: Call_PostGetUserPolicy_612824; UserName: string;
          PolicyName: string; Action: string = "GetUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetUserPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_612840 = newJObject()
  var formData_612841 = newJObject()
  add(formData_612841, "UserName", newJString(UserName))
  add(query_612840, "Action", newJString(Action))
  add(query_612840, "Version", newJString(Version))
  add(formData_612841, "PolicyName", newJString(PolicyName))
  result = call_612839.call(nil, query_612840, nil, formData_612841, nil)

var postGetUserPolicy* = Call_PostGetUserPolicy_612824(name: "postGetUserPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetUserPolicy", validator: validate_PostGetUserPolicy_612825,
    base: "/", url: url_PostGetUserPolicy_612826,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetUserPolicy_612807 = ref object of OpenApiRestCall_609589
proc url_GetGetUserPolicy_612809(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetUserPolicy_612808(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_612810 = query.getOrDefault("UserName")
  valid_612810 = validateParameter(valid_612810, JString, required = true,
                                 default = nil)
  if valid_612810 != nil:
    section.add "UserName", valid_612810
  var valid_612811 = query.getOrDefault("PolicyName")
  valid_612811 = validateParameter(valid_612811, JString, required = true,
                                 default = nil)
  if valid_612811 != nil:
    section.add "PolicyName", valid_612811
  var valid_612812 = query.getOrDefault("Action")
  valid_612812 = validateParameter(valid_612812, JString, required = true,
                                 default = newJString("GetUserPolicy"))
  if valid_612812 != nil:
    section.add "Action", valid_612812
  var valid_612813 = query.getOrDefault("Version")
  valid_612813 = validateParameter(valid_612813, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612813 != nil:
    section.add "Version", valid_612813
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612814 = header.getOrDefault("X-Amz-Signature")
  valid_612814 = validateParameter(valid_612814, JString, required = false,
                                 default = nil)
  if valid_612814 != nil:
    section.add "X-Amz-Signature", valid_612814
  var valid_612815 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612815 = validateParameter(valid_612815, JString, required = false,
                                 default = nil)
  if valid_612815 != nil:
    section.add "X-Amz-Content-Sha256", valid_612815
  var valid_612816 = header.getOrDefault("X-Amz-Date")
  valid_612816 = validateParameter(valid_612816, JString, required = false,
                                 default = nil)
  if valid_612816 != nil:
    section.add "X-Amz-Date", valid_612816
  var valid_612817 = header.getOrDefault("X-Amz-Credential")
  valid_612817 = validateParameter(valid_612817, JString, required = false,
                                 default = nil)
  if valid_612817 != nil:
    section.add "X-Amz-Credential", valid_612817
  var valid_612818 = header.getOrDefault("X-Amz-Security-Token")
  valid_612818 = validateParameter(valid_612818, JString, required = false,
                                 default = nil)
  if valid_612818 != nil:
    section.add "X-Amz-Security-Token", valid_612818
  var valid_612819 = header.getOrDefault("X-Amz-Algorithm")
  valid_612819 = validateParameter(valid_612819, JString, required = false,
                                 default = nil)
  if valid_612819 != nil:
    section.add "X-Amz-Algorithm", valid_612819
  var valid_612820 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612820 = validateParameter(valid_612820, JString, required = false,
                                 default = nil)
  if valid_612820 != nil:
    section.add "X-Amz-SignedHeaders", valid_612820
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612821: Call_GetGetUserPolicy_612807; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612821.validator(path, query, header, formData, body)
  let scheme = call_612821.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612821.url(scheme.get, call_612821.host, call_612821.base,
                         call_612821.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612821, url, valid)

proc call*(call_612822: Call_GetGetUserPolicy_612807; UserName: string;
          PolicyName: string; Action: string = "GetUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetUserPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612823 = newJObject()
  add(query_612823, "UserName", newJString(UserName))
  add(query_612823, "PolicyName", newJString(PolicyName))
  add(query_612823, "Action", newJString(Action))
  add(query_612823, "Version", newJString(Version))
  result = call_612822.call(nil, query_612823, nil, nil, nil)

var getGetUserPolicy* = Call_GetGetUserPolicy_612807(name: "getGetUserPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetUserPolicy", validator: validate_GetGetUserPolicy_612808,
    base: "/", url: url_GetGetUserPolicy_612809,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAccessKeys_612860 = ref object of OpenApiRestCall_609589
proc url_PostListAccessKeys_612862(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAccessKeys_612861(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612863 = query.getOrDefault("Action")
  valid_612863 = validateParameter(valid_612863, JString, required = true,
                                 default = newJString("ListAccessKeys"))
  if valid_612863 != nil:
    section.add "Action", valid_612863
  var valid_612864 = query.getOrDefault("Version")
  valid_612864 = validateParameter(valid_612864, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612864 != nil:
    section.add "Version", valid_612864
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612865 = header.getOrDefault("X-Amz-Signature")
  valid_612865 = validateParameter(valid_612865, JString, required = false,
                                 default = nil)
  if valid_612865 != nil:
    section.add "X-Amz-Signature", valid_612865
  var valid_612866 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612866 = validateParameter(valid_612866, JString, required = false,
                                 default = nil)
  if valid_612866 != nil:
    section.add "X-Amz-Content-Sha256", valid_612866
  var valid_612867 = header.getOrDefault("X-Amz-Date")
  valid_612867 = validateParameter(valid_612867, JString, required = false,
                                 default = nil)
  if valid_612867 != nil:
    section.add "X-Amz-Date", valid_612867
  var valid_612868 = header.getOrDefault("X-Amz-Credential")
  valid_612868 = validateParameter(valid_612868, JString, required = false,
                                 default = nil)
  if valid_612868 != nil:
    section.add "X-Amz-Credential", valid_612868
  var valid_612869 = header.getOrDefault("X-Amz-Security-Token")
  valid_612869 = validateParameter(valid_612869, JString, required = false,
                                 default = nil)
  if valid_612869 != nil:
    section.add "X-Amz-Security-Token", valid_612869
  var valid_612870 = header.getOrDefault("X-Amz-Algorithm")
  valid_612870 = validateParameter(valid_612870, JString, required = false,
                                 default = nil)
  if valid_612870 != nil:
    section.add "X-Amz-Algorithm", valid_612870
  var valid_612871 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612871 = validateParameter(valid_612871, JString, required = false,
                                 default = nil)
  if valid_612871 != nil:
    section.add "X-Amz-SignedHeaders", valid_612871
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_612872 = formData.getOrDefault("Marker")
  valid_612872 = validateParameter(valid_612872, JString, required = false,
                                 default = nil)
  if valid_612872 != nil:
    section.add "Marker", valid_612872
  var valid_612873 = formData.getOrDefault("UserName")
  valid_612873 = validateParameter(valid_612873, JString, required = false,
                                 default = nil)
  if valid_612873 != nil:
    section.add "UserName", valid_612873
  var valid_612874 = formData.getOrDefault("MaxItems")
  valid_612874 = validateParameter(valid_612874, JInt, required = false, default = nil)
  if valid_612874 != nil:
    section.add "MaxItems", valid_612874
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612875: Call_PostListAccessKeys_612860; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  let valid = call_612875.validator(path, query, header, formData, body)
  let scheme = call_612875.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612875.url(scheme.get, call_612875.host, call_612875.base,
                         call_612875.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612875, url, valid)

proc call*(call_612876: Call_PostListAccessKeys_612860; Marker: string = "";
          UserName: string = ""; Action: string = "ListAccessKeys"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAccessKeys
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_612877 = newJObject()
  var formData_612878 = newJObject()
  add(formData_612878, "Marker", newJString(Marker))
  add(formData_612878, "UserName", newJString(UserName))
  add(query_612877, "Action", newJString(Action))
  add(formData_612878, "MaxItems", newJInt(MaxItems))
  add(query_612877, "Version", newJString(Version))
  result = call_612876.call(nil, query_612877, nil, formData_612878, nil)

var postListAccessKeys* = Call_PostListAccessKeys_612860(
    name: "postListAccessKeys", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAccessKeys",
    validator: validate_PostListAccessKeys_612861, base: "/",
    url: url_PostListAccessKeys_612862, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAccessKeys_612842 = ref object of OpenApiRestCall_609589
proc url_GetListAccessKeys_612844(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAccessKeys_612843(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612845 = query.getOrDefault("Marker")
  valid_612845 = validateParameter(valid_612845, JString, required = false,
                                 default = nil)
  if valid_612845 != nil:
    section.add "Marker", valid_612845
  var valid_612846 = query.getOrDefault("UserName")
  valid_612846 = validateParameter(valid_612846, JString, required = false,
                                 default = nil)
  if valid_612846 != nil:
    section.add "UserName", valid_612846
  var valid_612847 = query.getOrDefault("MaxItems")
  valid_612847 = validateParameter(valid_612847, JInt, required = false, default = nil)
  if valid_612847 != nil:
    section.add "MaxItems", valid_612847
  var valid_612848 = query.getOrDefault("Action")
  valid_612848 = validateParameter(valid_612848, JString, required = true,
                                 default = newJString("ListAccessKeys"))
  if valid_612848 != nil:
    section.add "Action", valid_612848
  var valid_612849 = query.getOrDefault("Version")
  valid_612849 = validateParameter(valid_612849, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612849 != nil:
    section.add "Version", valid_612849
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612850 = header.getOrDefault("X-Amz-Signature")
  valid_612850 = validateParameter(valid_612850, JString, required = false,
                                 default = nil)
  if valid_612850 != nil:
    section.add "X-Amz-Signature", valid_612850
  var valid_612851 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612851 = validateParameter(valid_612851, JString, required = false,
                                 default = nil)
  if valid_612851 != nil:
    section.add "X-Amz-Content-Sha256", valid_612851
  var valid_612852 = header.getOrDefault("X-Amz-Date")
  valid_612852 = validateParameter(valid_612852, JString, required = false,
                                 default = nil)
  if valid_612852 != nil:
    section.add "X-Amz-Date", valid_612852
  var valid_612853 = header.getOrDefault("X-Amz-Credential")
  valid_612853 = validateParameter(valid_612853, JString, required = false,
                                 default = nil)
  if valid_612853 != nil:
    section.add "X-Amz-Credential", valid_612853
  var valid_612854 = header.getOrDefault("X-Amz-Security-Token")
  valid_612854 = validateParameter(valid_612854, JString, required = false,
                                 default = nil)
  if valid_612854 != nil:
    section.add "X-Amz-Security-Token", valid_612854
  var valid_612855 = header.getOrDefault("X-Amz-Algorithm")
  valid_612855 = validateParameter(valid_612855, JString, required = false,
                                 default = nil)
  if valid_612855 != nil:
    section.add "X-Amz-Algorithm", valid_612855
  var valid_612856 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612856 = validateParameter(valid_612856, JString, required = false,
                                 default = nil)
  if valid_612856 != nil:
    section.add "X-Amz-SignedHeaders", valid_612856
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612857: Call_GetListAccessKeys_612842; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  let valid = call_612857.validator(path, query, header, formData, body)
  let scheme = call_612857.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612857.url(scheme.get, call_612857.host, call_612857.base,
                         call_612857.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612857, url, valid)

proc call*(call_612858: Call_GetListAccessKeys_612842; Marker: string = "";
          UserName: string = ""; MaxItems: int = 0; Action: string = "ListAccessKeys";
          Version: string = "2010-05-08"): Recallable =
  ## getListAccessKeys
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612859 = newJObject()
  add(query_612859, "Marker", newJString(Marker))
  add(query_612859, "UserName", newJString(UserName))
  add(query_612859, "MaxItems", newJInt(MaxItems))
  add(query_612859, "Action", newJString(Action))
  add(query_612859, "Version", newJString(Version))
  result = call_612858.call(nil, query_612859, nil, nil, nil)

var getListAccessKeys* = Call_GetListAccessKeys_612842(name: "getListAccessKeys",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListAccessKeys", validator: validate_GetListAccessKeys_612843,
    base: "/", url: url_GetListAccessKeys_612844,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAccountAliases_612896 = ref object of OpenApiRestCall_609589
proc url_PostListAccountAliases_612898(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAccountAliases_612897(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612899 = query.getOrDefault("Action")
  valid_612899 = validateParameter(valid_612899, JString, required = true,
                                 default = newJString("ListAccountAliases"))
  if valid_612899 != nil:
    section.add "Action", valid_612899
  var valid_612900 = query.getOrDefault("Version")
  valid_612900 = validateParameter(valid_612900, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612900 != nil:
    section.add "Version", valid_612900
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612901 = header.getOrDefault("X-Amz-Signature")
  valid_612901 = validateParameter(valid_612901, JString, required = false,
                                 default = nil)
  if valid_612901 != nil:
    section.add "X-Amz-Signature", valid_612901
  var valid_612902 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612902 = validateParameter(valid_612902, JString, required = false,
                                 default = nil)
  if valid_612902 != nil:
    section.add "X-Amz-Content-Sha256", valid_612902
  var valid_612903 = header.getOrDefault("X-Amz-Date")
  valid_612903 = validateParameter(valid_612903, JString, required = false,
                                 default = nil)
  if valid_612903 != nil:
    section.add "X-Amz-Date", valid_612903
  var valid_612904 = header.getOrDefault("X-Amz-Credential")
  valid_612904 = validateParameter(valid_612904, JString, required = false,
                                 default = nil)
  if valid_612904 != nil:
    section.add "X-Amz-Credential", valid_612904
  var valid_612905 = header.getOrDefault("X-Amz-Security-Token")
  valid_612905 = validateParameter(valid_612905, JString, required = false,
                                 default = nil)
  if valid_612905 != nil:
    section.add "X-Amz-Security-Token", valid_612905
  var valid_612906 = header.getOrDefault("X-Amz-Algorithm")
  valid_612906 = validateParameter(valid_612906, JString, required = false,
                                 default = nil)
  if valid_612906 != nil:
    section.add "X-Amz-Algorithm", valid_612906
  var valid_612907 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612907 = validateParameter(valid_612907, JString, required = false,
                                 default = nil)
  if valid_612907 != nil:
    section.add "X-Amz-SignedHeaders", valid_612907
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_612908 = formData.getOrDefault("Marker")
  valid_612908 = validateParameter(valid_612908, JString, required = false,
                                 default = nil)
  if valid_612908 != nil:
    section.add "Marker", valid_612908
  var valid_612909 = formData.getOrDefault("MaxItems")
  valid_612909 = validateParameter(valid_612909, JInt, required = false, default = nil)
  if valid_612909 != nil:
    section.add "MaxItems", valid_612909
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612910: Call_PostListAccountAliases_612896; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_612910.validator(path, query, header, formData, body)
  let scheme = call_612910.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612910.url(scheme.get, call_612910.host, call_612910.base,
                         call_612910.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612910, url, valid)

proc call*(call_612911: Call_PostListAccountAliases_612896; Marker: string = "";
          Action: string = "ListAccountAliases"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAccountAliases
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_612912 = newJObject()
  var formData_612913 = newJObject()
  add(formData_612913, "Marker", newJString(Marker))
  add(query_612912, "Action", newJString(Action))
  add(formData_612913, "MaxItems", newJInt(MaxItems))
  add(query_612912, "Version", newJString(Version))
  result = call_612911.call(nil, query_612912, nil, formData_612913, nil)

var postListAccountAliases* = Call_PostListAccountAliases_612896(
    name: "postListAccountAliases", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAccountAliases",
    validator: validate_PostListAccountAliases_612897, base: "/",
    url: url_PostListAccountAliases_612898, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAccountAliases_612879 = ref object of OpenApiRestCall_609589
proc url_GetListAccountAliases_612881(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAccountAliases_612880(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612882 = query.getOrDefault("Marker")
  valid_612882 = validateParameter(valid_612882, JString, required = false,
                                 default = nil)
  if valid_612882 != nil:
    section.add "Marker", valid_612882
  var valid_612883 = query.getOrDefault("MaxItems")
  valid_612883 = validateParameter(valid_612883, JInt, required = false, default = nil)
  if valid_612883 != nil:
    section.add "MaxItems", valid_612883
  var valid_612884 = query.getOrDefault("Action")
  valid_612884 = validateParameter(valid_612884, JString, required = true,
                                 default = newJString("ListAccountAliases"))
  if valid_612884 != nil:
    section.add "Action", valid_612884
  var valid_612885 = query.getOrDefault("Version")
  valid_612885 = validateParameter(valid_612885, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612885 != nil:
    section.add "Version", valid_612885
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612886 = header.getOrDefault("X-Amz-Signature")
  valid_612886 = validateParameter(valid_612886, JString, required = false,
                                 default = nil)
  if valid_612886 != nil:
    section.add "X-Amz-Signature", valid_612886
  var valid_612887 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612887 = validateParameter(valid_612887, JString, required = false,
                                 default = nil)
  if valid_612887 != nil:
    section.add "X-Amz-Content-Sha256", valid_612887
  var valid_612888 = header.getOrDefault("X-Amz-Date")
  valid_612888 = validateParameter(valid_612888, JString, required = false,
                                 default = nil)
  if valid_612888 != nil:
    section.add "X-Amz-Date", valid_612888
  var valid_612889 = header.getOrDefault("X-Amz-Credential")
  valid_612889 = validateParameter(valid_612889, JString, required = false,
                                 default = nil)
  if valid_612889 != nil:
    section.add "X-Amz-Credential", valid_612889
  var valid_612890 = header.getOrDefault("X-Amz-Security-Token")
  valid_612890 = validateParameter(valid_612890, JString, required = false,
                                 default = nil)
  if valid_612890 != nil:
    section.add "X-Amz-Security-Token", valid_612890
  var valid_612891 = header.getOrDefault("X-Amz-Algorithm")
  valid_612891 = validateParameter(valid_612891, JString, required = false,
                                 default = nil)
  if valid_612891 != nil:
    section.add "X-Amz-Algorithm", valid_612891
  var valid_612892 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612892 = validateParameter(valid_612892, JString, required = false,
                                 default = nil)
  if valid_612892 != nil:
    section.add "X-Amz-SignedHeaders", valid_612892
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612893: Call_GetListAccountAliases_612879; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_612893.validator(path, query, header, formData, body)
  let scheme = call_612893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612893.url(scheme.get, call_612893.host, call_612893.base,
                         call_612893.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612893, url, valid)

proc call*(call_612894: Call_GetListAccountAliases_612879; Marker: string = "";
          MaxItems: int = 0; Action: string = "ListAccountAliases";
          Version: string = "2010-05-08"): Recallable =
  ## getListAccountAliases
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612895 = newJObject()
  add(query_612895, "Marker", newJString(Marker))
  add(query_612895, "MaxItems", newJInt(MaxItems))
  add(query_612895, "Action", newJString(Action))
  add(query_612895, "Version", newJString(Version))
  result = call_612894.call(nil, query_612895, nil, nil, nil)

var getListAccountAliases* = Call_GetListAccountAliases_612879(
    name: "getListAccountAliases", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAccountAliases",
    validator: validate_GetListAccountAliases_612880, base: "/",
    url: url_GetListAccountAliases_612881, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedGroupPolicies_612933 = ref object of OpenApiRestCall_609589
proc url_PostListAttachedGroupPolicies_612935(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAttachedGroupPolicies_612934(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612936 = query.getOrDefault("Action")
  valid_612936 = validateParameter(valid_612936, JString, required = true, default = newJString(
      "ListAttachedGroupPolicies"))
  if valid_612936 != nil:
    section.add "Action", valid_612936
  var valid_612937 = query.getOrDefault("Version")
  valid_612937 = validateParameter(valid_612937, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612937 != nil:
    section.add "Version", valid_612937
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612938 = header.getOrDefault("X-Amz-Signature")
  valid_612938 = validateParameter(valid_612938, JString, required = false,
                                 default = nil)
  if valid_612938 != nil:
    section.add "X-Amz-Signature", valid_612938
  var valid_612939 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612939 = validateParameter(valid_612939, JString, required = false,
                                 default = nil)
  if valid_612939 != nil:
    section.add "X-Amz-Content-Sha256", valid_612939
  var valid_612940 = header.getOrDefault("X-Amz-Date")
  valid_612940 = validateParameter(valid_612940, JString, required = false,
                                 default = nil)
  if valid_612940 != nil:
    section.add "X-Amz-Date", valid_612940
  var valid_612941 = header.getOrDefault("X-Amz-Credential")
  valid_612941 = validateParameter(valid_612941, JString, required = false,
                                 default = nil)
  if valid_612941 != nil:
    section.add "X-Amz-Credential", valid_612941
  var valid_612942 = header.getOrDefault("X-Amz-Security-Token")
  valid_612942 = validateParameter(valid_612942, JString, required = false,
                                 default = nil)
  if valid_612942 != nil:
    section.add "X-Amz-Security-Token", valid_612942
  var valid_612943 = header.getOrDefault("X-Amz-Algorithm")
  valid_612943 = validateParameter(valid_612943, JString, required = false,
                                 default = nil)
  if valid_612943 != nil:
    section.add "X-Amz-Algorithm", valid_612943
  var valid_612944 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612944 = validateParameter(valid_612944, JString, required = false,
                                 default = nil)
  if valid_612944 != nil:
    section.add "X-Amz-SignedHeaders", valid_612944
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_612945 = formData.getOrDefault("Marker")
  valid_612945 = validateParameter(valid_612945, JString, required = false,
                                 default = nil)
  if valid_612945 != nil:
    section.add "Marker", valid_612945
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_612946 = formData.getOrDefault("GroupName")
  valid_612946 = validateParameter(valid_612946, JString, required = true,
                                 default = nil)
  if valid_612946 != nil:
    section.add "GroupName", valid_612946
  var valid_612947 = formData.getOrDefault("PathPrefix")
  valid_612947 = validateParameter(valid_612947, JString, required = false,
                                 default = nil)
  if valid_612947 != nil:
    section.add "PathPrefix", valid_612947
  var valid_612948 = formData.getOrDefault("MaxItems")
  valid_612948 = validateParameter(valid_612948, JInt, required = false, default = nil)
  if valid_612948 != nil:
    section.add "MaxItems", valid_612948
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612949: Call_PostListAttachedGroupPolicies_612933; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_612949.validator(path, query, header, formData, body)
  let scheme = call_612949.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612949.url(scheme.get, call_612949.host, call_612949.base,
                         call_612949.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612949, url, valid)

proc call*(call_612950: Call_PostListAttachedGroupPolicies_612933;
          GroupName: string; Marker: string = ""; PathPrefix: string = "";
          MaxItems: int = 0; Action: string = "ListAttachedGroupPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedGroupPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612951 = newJObject()
  var formData_612952 = newJObject()
  add(formData_612952, "Marker", newJString(Marker))
  add(formData_612952, "GroupName", newJString(GroupName))
  add(formData_612952, "PathPrefix", newJString(PathPrefix))
  add(formData_612952, "MaxItems", newJInt(MaxItems))
  add(query_612951, "Action", newJString(Action))
  add(query_612951, "Version", newJString(Version))
  result = call_612950.call(nil, query_612951, nil, formData_612952, nil)

var postListAttachedGroupPolicies* = Call_PostListAttachedGroupPolicies_612933(
    name: "postListAttachedGroupPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedGroupPolicies",
    validator: validate_PostListAttachedGroupPolicies_612934, base: "/",
    url: url_PostListAttachedGroupPolicies_612935,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedGroupPolicies_612914 = ref object of OpenApiRestCall_609589
proc url_GetListAttachedGroupPolicies_612916(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAttachedGroupPolicies_612915(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612917 = query.getOrDefault("Marker")
  valid_612917 = validateParameter(valid_612917, JString, required = false,
                                 default = nil)
  if valid_612917 != nil:
    section.add "Marker", valid_612917
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_612918 = query.getOrDefault("GroupName")
  valid_612918 = validateParameter(valid_612918, JString, required = true,
                                 default = nil)
  if valid_612918 != nil:
    section.add "GroupName", valid_612918
  var valid_612919 = query.getOrDefault("MaxItems")
  valid_612919 = validateParameter(valid_612919, JInt, required = false, default = nil)
  if valid_612919 != nil:
    section.add "MaxItems", valid_612919
  var valid_612920 = query.getOrDefault("PathPrefix")
  valid_612920 = validateParameter(valid_612920, JString, required = false,
                                 default = nil)
  if valid_612920 != nil:
    section.add "PathPrefix", valid_612920
  var valid_612921 = query.getOrDefault("Action")
  valid_612921 = validateParameter(valid_612921, JString, required = true, default = newJString(
      "ListAttachedGroupPolicies"))
  if valid_612921 != nil:
    section.add "Action", valid_612921
  var valid_612922 = query.getOrDefault("Version")
  valid_612922 = validateParameter(valid_612922, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612922 != nil:
    section.add "Version", valid_612922
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612923 = header.getOrDefault("X-Amz-Signature")
  valid_612923 = validateParameter(valid_612923, JString, required = false,
                                 default = nil)
  if valid_612923 != nil:
    section.add "X-Amz-Signature", valid_612923
  var valid_612924 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612924 = validateParameter(valid_612924, JString, required = false,
                                 default = nil)
  if valid_612924 != nil:
    section.add "X-Amz-Content-Sha256", valid_612924
  var valid_612925 = header.getOrDefault("X-Amz-Date")
  valid_612925 = validateParameter(valid_612925, JString, required = false,
                                 default = nil)
  if valid_612925 != nil:
    section.add "X-Amz-Date", valid_612925
  var valid_612926 = header.getOrDefault("X-Amz-Credential")
  valid_612926 = validateParameter(valid_612926, JString, required = false,
                                 default = nil)
  if valid_612926 != nil:
    section.add "X-Amz-Credential", valid_612926
  var valid_612927 = header.getOrDefault("X-Amz-Security-Token")
  valid_612927 = validateParameter(valid_612927, JString, required = false,
                                 default = nil)
  if valid_612927 != nil:
    section.add "X-Amz-Security-Token", valid_612927
  var valid_612928 = header.getOrDefault("X-Amz-Algorithm")
  valid_612928 = validateParameter(valid_612928, JString, required = false,
                                 default = nil)
  if valid_612928 != nil:
    section.add "X-Amz-Algorithm", valid_612928
  var valid_612929 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612929 = validateParameter(valid_612929, JString, required = false,
                                 default = nil)
  if valid_612929 != nil:
    section.add "X-Amz-SignedHeaders", valid_612929
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612930: Call_GetListAttachedGroupPolicies_612914; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_612930.validator(path, query, header, formData, body)
  let scheme = call_612930.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612930.url(scheme.get, call_612930.host, call_612930.base,
                         call_612930.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612930, url, valid)

proc call*(call_612931: Call_GetListAttachedGroupPolicies_612914;
          GroupName: string; Marker: string = ""; MaxItems: int = 0;
          PathPrefix: string = ""; Action: string = "ListAttachedGroupPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListAttachedGroupPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612932 = newJObject()
  add(query_612932, "Marker", newJString(Marker))
  add(query_612932, "GroupName", newJString(GroupName))
  add(query_612932, "MaxItems", newJInt(MaxItems))
  add(query_612932, "PathPrefix", newJString(PathPrefix))
  add(query_612932, "Action", newJString(Action))
  add(query_612932, "Version", newJString(Version))
  result = call_612931.call(nil, query_612932, nil, nil, nil)

var getListAttachedGroupPolicies* = Call_GetListAttachedGroupPolicies_612914(
    name: "getListAttachedGroupPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedGroupPolicies",
    validator: validate_GetListAttachedGroupPolicies_612915, base: "/",
    url: url_GetListAttachedGroupPolicies_612916,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedRolePolicies_612972 = ref object of OpenApiRestCall_609589
proc url_PostListAttachedRolePolicies_612974(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAttachedRolePolicies_612973(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612975 = query.getOrDefault("Action")
  valid_612975 = validateParameter(valid_612975, JString, required = true, default = newJString(
      "ListAttachedRolePolicies"))
  if valid_612975 != nil:
    section.add "Action", valid_612975
  var valid_612976 = query.getOrDefault("Version")
  valid_612976 = validateParameter(valid_612976, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612976 != nil:
    section.add "Version", valid_612976
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612977 = header.getOrDefault("X-Amz-Signature")
  valid_612977 = validateParameter(valid_612977, JString, required = false,
                                 default = nil)
  if valid_612977 != nil:
    section.add "X-Amz-Signature", valid_612977
  var valid_612978 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612978 = validateParameter(valid_612978, JString, required = false,
                                 default = nil)
  if valid_612978 != nil:
    section.add "X-Amz-Content-Sha256", valid_612978
  var valid_612979 = header.getOrDefault("X-Amz-Date")
  valid_612979 = validateParameter(valid_612979, JString, required = false,
                                 default = nil)
  if valid_612979 != nil:
    section.add "X-Amz-Date", valid_612979
  var valid_612980 = header.getOrDefault("X-Amz-Credential")
  valid_612980 = validateParameter(valid_612980, JString, required = false,
                                 default = nil)
  if valid_612980 != nil:
    section.add "X-Amz-Credential", valid_612980
  var valid_612981 = header.getOrDefault("X-Amz-Security-Token")
  valid_612981 = validateParameter(valid_612981, JString, required = false,
                                 default = nil)
  if valid_612981 != nil:
    section.add "X-Amz-Security-Token", valid_612981
  var valid_612982 = header.getOrDefault("X-Amz-Algorithm")
  valid_612982 = validateParameter(valid_612982, JString, required = false,
                                 default = nil)
  if valid_612982 != nil:
    section.add "X-Amz-Algorithm", valid_612982
  var valid_612983 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612983 = validateParameter(valid_612983, JString, required = false,
                                 default = nil)
  if valid_612983 != nil:
    section.add "X-Amz-SignedHeaders", valid_612983
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_612984 = formData.getOrDefault("RoleName")
  valid_612984 = validateParameter(valid_612984, JString, required = true,
                                 default = nil)
  if valid_612984 != nil:
    section.add "RoleName", valid_612984
  var valid_612985 = formData.getOrDefault("Marker")
  valid_612985 = validateParameter(valid_612985, JString, required = false,
                                 default = nil)
  if valid_612985 != nil:
    section.add "Marker", valid_612985
  var valid_612986 = formData.getOrDefault("PathPrefix")
  valid_612986 = validateParameter(valid_612986, JString, required = false,
                                 default = nil)
  if valid_612986 != nil:
    section.add "PathPrefix", valid_612986
  var valid_612987 = formData.getOrDefault("MaxItems")
  valid_612987 = validateParameter(valid_612987, JInt, required = false, default = nil)
  if valid_612987 != nil:
    section.add "MaxItems", valid_612987
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612988: Call_PostListAttachedRolePolicies_612972; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_612988.validator(path, query, header, formData, body)
  let scheme = call_612988.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612988.url(scheme.get, call_612988.host, call_612988.base,
                         call_612988.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612988, url, valid)

proc call*(call_612989: Call_PostListAttachedRolePolicies_612972; RoleName: string;
          Marker: string = ""; PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListAttachedRolePolicies";
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedRolePolicies
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612990 = newJObject()
  var formData_612991 = newJObject()
  add(formData_612991, "RoleName", newJString(RoleName))
  add(formData_612991, "Marker", newJString(Marker))
  add(formData_612991, "PathPrefix", newJString(PathPrefix))
  add(formData_612991, "MaxItems", newJInt(MaxItems))
  add(query_612990, "Action", newJString(Action))
  add(query_612990, "Version", newJString(Version))
  result = call_612989.call(nil, query_612990, nil, formData_612991, nil)

var postListAttachedRolePolicies* = Call_PostListAttachedRolePolicies_612972(
    name: "postListAttachedRolePolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedRolePolicies",
    validator: validate_PostListAttachedRolePolicies_612973, base: "/",
    url: url_PostListAttachedRolePolicies_612974,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedRolePolicies_612953 = ref object of OpenApiRestCall_609589
proc url_GetListAttachedRolePolicies_612955(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAttachedRolePolicies_612954(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612956 = query.getOrDefault("Marker")
  valid_612956 = validateParameter(valid_612956, JString, required = false,
                                 default = nil)
  if valid_612956 != nil:
    section.add "Marker", valid_612956
  var valid_612957 = query.getOrDefault("MaxItems")
  valid_612957 = validateParameter(valid_612957, JInt, required = false, default = nil)
  if valid_612957 != nil:
    section.add "MaxItems", valid_612957
  var valid_612958 = query.getOrDefault("PathPrefix")
  valid_612958 = validateParameter(valid_612958, JString, required = false,
                                 default = nil)
  if valid_612958 != nil:
    section.add "PathPrefix", valid_612958
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_612959 = query.getOrDefault("RoleName")
  valid_612959 = validateParameter(valid_612959, JString, required = true,
                                 default = nil)
  if valid_612959 != nil:
    section.add "RoleName", valid_612959
  var valid_612960 = query.getOrDefault("Action")
  valid_612960 = validateParameter(valid_612960, JString, required = true, default = newJString(
      "ListAttachedRolePolicies"))
  if valid_612960 != nil:
    section.add "Action", valid_612960
  var valid_612961 = query.getOrDefault("Version")
  valid_612961 = validateParameter(valid_612961, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612961 != nil:
    section.add "Version", valid_612961
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612962 = header.getOrDefault("X-Amz-Signature")
  valid_612962 = validateParameter(valid_612962, JString, required = false,
                                 default = nil)
  if valid_612962 != nil:
    section.add "X-Amz-Signature", valid_612962
  var valid_612963 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612963 = validateParameter(valid_612963, JString, required = false,
                                 default = nil)
  if valid_612963 != nil:
    section.add "X-Amz-Content-Sha256", valid_612963
  var valid_612964 = header.getOrDefault("X-Amz-Date")
  valid_612964 = validateParameter(valid_612964, JString, required = false,
                                 default = nil)
  if valid_612964 != nil:
    section.add "X-Amz-Date", valid_612964
  var valid_612965 = header.getOrDefault("X-Amz-Credential")
  valid_612965 = validateParameter(valid_612965, JString, required = false,
                                 default = nil)
  if valid_612965 != nil:
    section.add "X-Amz-Credential", valid_612965
  var valid_612966 = header.getOrDefault("X-Amz-Security-Token")
  valid_612966 = validateParameter(valid_612966, JString, required = false,
                                 default = nil)
  if valid_612966 != nil:
    section.add "X-Amz-Security-Token", valid_612966
  var valid_612967 = header.getOrDefault("X-Amz-Algorithm")
  valid_612967 = validateParameter(valid_612967, JString, required = false,
                                 default = nil)
  if valid_612967 != nil:
    section.add "X-Amz-Algorithm", valid_612967
  var valid_612968 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612968 = validateParameter(valid_612968, JString, required = false,
                                 default = nil)
  if valid_612968 != nil:
    section.add "X-Amz-SignedHeaders", valid_612968
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612969: Call_GetListAttachedRolePolicies_612953; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_612969.validator(path, query, header, formData, body)
  let scheme = call_612969.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612969.url(scheme.get, call_612969.host, call_612969.base,
                         call_612969.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612969, url, valid)

proc call*(call_612970: Call_GetListAttachedRolePolicies_612953; RoleName: string;
          Marker: string = ""; MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListAttachedRolePolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListAttachedRolePolicies
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612971 = newJObject()
  add(query_612971, "Marker", newJString(Marker))
  add(query_612971, "MaxItems", newJInt(MaxItems))
  add(query_612971, "PathPrefix", newJString(PathPrefix))
  add(query_612971, "RoleName", newJString(RoleName))
  add(query_612971, "Action", newJString(Action))
  add(query_612971, "Version", newJString(Version))
  result = call_612970.call(nil, query_612971, nil, nil, nil)

var getListAttachedRolePolicies* = Call_GetListAttachedRolePolicies_612953(
    name: "getListAttachedRolePolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedRolePolicies",
    validator: validate_GetListAttachedRolePolicies_612954, base: "/",
    url: url_GetListAttachedRolePolicies_612955,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedUserPolicies_613011 = ref object of OpenApiRestCall_609589
proc url_PostListAttachedUserPolicies_613013(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAttachedUserPolicies_613012(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613014 = query.getOrDefault("Action")
  valid_613014 = validateParameter(valid_613014, JString, required = true, default = newJString(
      "ListAttachedUserPolicies"))
  if valid_613014 != nil:
    section.add "Action", valid_613014
  var valid_613015 = query.getOrDefault("Version")
  valid_613015 = validateParameter(valid_613015, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613015 != nil:
    section.add "Version", valid_613015
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613016 = header.getOrDefault("X-Amz-Signature")
  valid_613016 = validateParameter(valid_613016, JString, required = false,
                                 default = nil)
  if valid_613016 != nil:
    section.add "X-Amz-Signature", valid_613016
  var valid_613017 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613017 = validateParameter(valid_613017, JString, required = false,
                                 default = nil)
  if valid_613017 != nil:
    section.add "X-Amz-Content-Sha256", valid_613017
  var valid_613018 = header.getOrDefault("X-Amz-Date")
  valid_613018 = validateParameter(valid_613018, JString, required = false,
                                 default = nil)
  if valid_613018 != nil:
    section.add "X-Amz-Date", valid_613018
  var valid_613019 = header.getOrDefault("X-Amz-Credential")
  valid_613019 = validateParameter(valid_613019, JString, required = false,
                                 default = nil)
  if valid_613019 != nil:
    section.add "X-Amz-Credential", valid_613019
  var valid_613020 = header.getOrDefault("X-Amz-Security-Token")
  valid_613020 = validateParameter(valid_613020, JString, required = false,
                                 default = nil)
  if valid_613020 != nil:
    section.add "X-Amz-Security-Token", valid_613020
  var valid_613021 = header.getOrDefault("X-Amz-Algorithm")
  valid_613021 = validateParameter(valid_613021, JString, required = false,
                                 default = nil)
  if valid_613021 != nil:
    section.add "X-Amz-Algorithm", valid_613021
  var valid_613022 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613022 = validateParameter(valid_613022, JString, required = false,
                                 default = nil)
  if valid_613022 != nil:
    section.add "X-Amz-SignedHeaders", valid_613022
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_613023 = formData.getOrDefault("Marker")
  valid_613023 = validateParameter(valid_613023, JString, required = false,
                                 default = nil)
  if valid_613023 != nil:
    section.add "Marker", valid_613023
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_613024 = formData.getOrDefault("UserName")
  valid_613024 = validateParameter(valid_613024, JString, required = true,
                                 default = nil)
  if valid_613024 != nil:
    section.add "UserName", valid_613024
  var valid_613025 = formData.getOrDefault("PathPrefix")
  valid_613025 = validateParameter(valid_613025, JString, required = false,
                                 default = nil)
  if valid_613025 != nil:
    section.add "PathPrefix", valid_613025
  var valid_613026 = formData.getOrDefault("MaxItems")
  valid_613026 = validateParameter(valid_613026, JInt, required = false, default = nil)
  if valid_613026 != nil:
    section.add "MaxItems", valid_613026
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613027: Call_PostListAttachedUserPolicies_613011; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_613027.validator(path, query, header, formData, body)
  let scheme = call_613027.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613027.url(scheme.get, call_613027.host, call_613027.base,
                         call_613027.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613027, url, valid)

proc call*(call_613028: Call_PostListAttachedUserPolicies_613011; UserName: string;
          Marker: string = ""; PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListAttachedUserPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedUserPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613029 = newJObject()
  var formData_613030 = newJObject()
  add(formData_613030, "Marker", newJString(Marker))
  add(formData_613030, "UserName", newJString(UserName))
  add(formData_613030, "PathPrefix", newJString(PathPrefix))
  add(formData_613030, "MaxItems", newJInt(MaxItems))
  add(query_613029, "Action", newJString(Action))
  add(query_613029, "Version", newJString(Version))
  result = call_613028.call(nil, query_613029, nil, formData_613030, nil)

var postListAttachedUserPolicies* = Call_PostListAttachedUserPolicies_613011(
    name: "postListAttachedUserPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedUserPolicies",
    validator: validate_PostListAttachedUserPolicies_613012, base: "/",
    url: url_PostListAttachedUserPolicies_613013,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedUserPolicies_612992 = ref object of OpenApiRestCall_609589
proc url_GetListAttachedUserPolicies_612994(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAttachedUserPolicies_612993(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612995 = query.getOrDefault("Marker")
  valid_612995 = validateParameter(valid_612995, JString, required = false,
                                 default = nil)
  if valid_612995 != nil:
    section.add "Marker", valid_612995
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_612996 = query.getOrDefault("UserName")
  valid_612996 = validateParameter(valid_612996, JString, required = true,
                                 default = nil)
  if valid_612996 != nil:
    section.add "UserName", valid_612996
  var valid_612997 = query.getOrDefault("MaxItems")
  valid_612997 = validateParameter(valid_612997, JInt, required = false, default = nil)
  if valid_612997 != nil:
    section.add "MaxItems", valid_612997
  var valid_612998 = query.getOrDefault("PathPrefix")
  valid_612998 = validateParameter(valid_612998, JString, required = false,
                                 default = nil)
  if valid_612998 != nil:
    section.add "PathPrefix", valid_612998
  var valid_612999 = query.getOrDefault("Action")
  valid_612999 = validateParameter(valid_612999, JString, required = true, default = newJString(
      "ListAttachedUserPolicies"))
  if valid_612999 != nil:
    section.add "Action", valid_612999
  var valid_613000 = query.getOrDefault("Version")
  valid_613000 = validateParameter(valid_613000, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613000 != nil:
    section.add "Version", valid_613000
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613001 = header.getOrDefault("X-Amz-Signature")
  valid_613001 = validateParameter(valid_613001, JString, required = false,
                                 default = nil)
  if valid_613001 != nil:
    section.add "X-Amz-Signature", valid_613001
  var valid_613002 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613002 = validateParameter(valid_613002, JString, required = false,
                                 default = nil)
  if valid_613002 != nil:
    section.add "X-Amz-Content-Sha256", valid_613002
  var valid_613003 = header.getOrDefault("X-Amz-Date")
  valid_613003 = validateParameter(valid_613003, JString, required = false,
                                 default = nil)
  if valid_613003 != nil:
    section.add "X-Amz-Date", valid_613003
  var valid_613004 = header.getOrDefault("X-Amz-Credential")
  valid_613004 = validateParameter(valid_613004, JString, required = false,
                                 default = nil)
  if valid_613004 != nil:
    section.add "X-Amz-Credential", valid_613004
  var valid_613005 = header.getOrDefault("X-Amz-Security-Token")
  valid_613005 = validateParameter(valid_613005, JString, required = false,
                                 default = nil)
  if valid_613005 != nil:
    section.add "X-Amz-Security-Token", valid_613005
  var valid_613006 = header.getOrDefault("X-Amz-Algorithm")
  valid_613006 = validateParameter(valid_613006, JString, required = false,
                                 default = nil)
  if valid_613006 != nil:
    section.add "X-Amz-Algorithm", valid_613006
  var valid_613007 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613007 = validateParameter(valid_613007, JString, required = false,
                                 default = nil)
  if valid_613007 != nil:
    section.add "X-Amz-SignedHeaders", valid_613007
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613008: Call_GetListAttachedUserPolicies_612992; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_613008.validator(path, query, header, formData, body)
  let scheme = call_613008.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613008.url(scheme.get, call_613008.host, call_613008.base,
                         call_613008.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613008, url, valid)

proc call*(call_613009: Call_GetListAttachedUserPolicies_612992; UserName: string;
          Marker: string = ""; MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListAttachedUserPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListAttachedUserPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613010 = newJObject()
  add(query_613010, "Marker", newJString(Marker))
  add(query_613010, "UserName", newJString(UserName))
  add(query_613010, "MaxItems", newJInt(MaxItems))
  add(query_613010, "PathPrefix", newJString(PathPrefix))
  add(query_613010, "Action", newJString(Action))
  add(query_613010, "Version", newJString(Version))
  result = call_613009.call(nil, query_613010, nil, nil, nil)

var getListAttachedUserPolicies* = Call_GetListAttachedUserPolicies_612992(
    name: "getListAttachedUserPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedUserPolicies",
    validator: validate_GetListAttachedUserPolicies_612993, base: "/",
    url: url_GetListAttachedUserPolicies_612994,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListEntitiesForPolicy_613052 = ref object of OpenApiRestCall_609589
proc url_PostListEntitiesForPolicy_613054(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListEntitiesForPolicy_613053(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613055 = query.getOrDefault("Action")
  valid_613055 = validateParameter(valid_613055, JString, required = true,
                                 default = newJString("ListEntitiesForPolicy"))
  if valid_613055 != nil:
    section.add "Action", valid_613055
  var valid_613056 = query.getOrDefault("Version")
  valid_613056 = validateParameter(valid_613056, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613056 != nil:
    section.add "Version", valid_613056
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613057 = header.getOrDefault("X-Amz-Signature")
  valid_613057 = validateParameter(valid_613057, JString, required = false,
                                 default = nil)
  if valid_613057 != nil:
    section.add "X-Amz-Signature", valid_613057
  var valid_613058 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613058 = validateParameter(valid_613058, JString, required = false,
                                 default = nil)
  if valid_613058 != nil:
    section.add "X-Amz-Content-Sha256", valid_613058
  var valid_613059 = header.getOrDefault("X-Amz-Date")
  valid_613059 = validateParameter(valid_613059, JString, required = false,
                                 default = nil)
  if valid_613059 != nil:
    section.add "X-Amz-Date", valid_613059
  var valid_613060 = header.getOrDefault("X-Amz-Credential")
  valid_613060 = validateParameter(valid_613060, JString, required = false,
                                 default = nil)
  if valid_613060 != nil:
    section.add "X-Amz-Credential", valid_613060
  var valid_613061 = header.getOrDefault("X-Amz-Security-Token")
  valid_613061 = validateParameter(valid_613061, JString, required = false,
                                 default = nil)
  if valid_613061 != nil:
    section.add "X-Amz-Security-Token", valid_613061
  var valid_613062 = header.getOrDefault("X-Amz-Algorithm")
  valid_613062 = validateParameter(valid_613062, JString, required = false,
                                 default = nil)
  if valid_613062 != nil:
    section.add "X-Amz-Algorithm", valid_613062
  var valid_613063 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613063 = validateParameter(valid_613063, JString, required = false,
                                 default = nil)
  if valid_613063 != nil:
    section.add "X-Amz-SignedHeaders", valid_613063
  result.add "header", section
  ## parameters in `formData` object:
  ##   EntityFilter: JString
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  var valid_613064 = formData.getOrDefault("EntityFilter")
  valid_613064 = validateParameter(valid_613064, JString, required = false,
                                 default = newJString("User"))
  if valid_613064 != nil:
    section.add "EntityFilter", valid_613064
  var valid_613065 = formData.getOrDefault("Marker")
  valid_613065 = validateParameter(valid_613065, JString, required = false,
                                 default = nil)
  if valid_613065 != nil:
    section.add "Marker", valid_613065
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_613066 = formData.getOrDefault("PolicyArn")
  valid_613066 = validateParameter(valid_613066, JString, required = true,
                                 default = nil)
  if valid_613066 != nil:
    section.add "PolicyArn", valid_613066
  var valid_613067 = formData.getOrDefault("PathPrefix")
  valid_613067 = validateParameter(valid_613067, JString, required = false,
                                 default = nil)
  if valid_613067 != nil:
    section.add "PathPrefix", valid_613067
  var valid_613068 = formData.getOrDefault("MaxItems")
  valid_613068 = validateParameter(valid_613068, JInt, required = false, default = nil)
  if valid_613068 != nil:
    section.add "MaxItems", valid_613068
  var valid_613069 = formData.getOrDefault("PolicyUsageFilter")
  valid_613069 = validateParameter(valid_613069, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_613069 != nil:
    section.add "PolicyUsageFilter", valid_613069
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613070: Call_PostListEntitiesForPolicy_613052; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613070.validator(path, query, header, formData, body)
  let scheme = call_613070.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613070.url(scheme.get, call_613070.host, call_613070.base,
                         call_613070.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613070, url, valid)

proc call*(call_613071: Call_PostListEntitiesForPolicy_613052; PolicyArn: string;
          EntityFilter: string = "User"; Marker: string = ""; PathPrefix: string = "";
          MaxItems: int = 0; Action: string = "ListEntitiesForPolicy";
          Version: string = "2010-05-08";
          PolicyUsageFilter: string = "PermissionsPolicy"): Recallable =
  ## postListEntitiesForPolicy
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   EntityFilter: string
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  var query_613072 = newJObject()
  var formData_613073 = newJObject()
  add(formData_613073, "EntityFilter", newJString(EntityFilter))
  add(formData_613073, "Marker", newJString(Marker))
  add(formData_613073, "PolicyArn", newJString(PolicyArn))
  add(formData_613073, "PathPrefix", newJString(PathPrefix))
  add(formData_613073, "MaxItems", newJInt(MaxItems))
  add(query_613072, "Action", newJString(Action))
  add(query_613072, "Version", newJString(Version))
  add(formData_613073, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  result = call_613071.call(nil, query_613072, nil, formData_613073, nil)

var postListEntitiesForPolicy* = Call_PostListEntitiesForPolicy_613052(
    name: "postListEntitiesForPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListEntitiesForPolicy",
    validator: validate_PostListEntitiesForPolicy_613053, base: "/",
    url: url_PostListEntitiesForPolicy_613054,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListEntitiesForPolicy_613031 = ref object of OpenApiRestCall_609589
proc url_GetListEntitiesForPolicy_613033(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListEntitiesForPolicy_613032(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   EntityFilter: JString
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613034 = query.getOrDefault("Marker")
  valid_613034 = validateParameter(valid_613034, JString, required = false,
                                 default = nil)
  if valid_613034 != nil:
    section.add "Marker", valid_613034
  var valid_613035 = query.getOrDefault("PolicyUsageFilter")
  valid_613035 = validateParameter(valid_613035, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_613035 != nil:
    section.add "PolicyUsageFilter", valid_613035
  var valid_613036 = query.getOrDefault("EntityFilter")
  valid_613036 = validateParameter(valid_613036, JString, required = false,
                                 default = newJString("User"))
  if valid_613036 != nil:
    section.add "EntityFilter", valid_613036
  var valid_613037 = query.getOrDefault("MaxItems")
  valid_613037 = validateParameter(valid_613037, JInt, required = false, default = nil)
  if valid_613037 != nil:
    section.add "MaxItems", valid_613037
  var valid_613038 = query.getOrDefault("PathPrefix")
  valid_613038 = validateParameter(valid_613038, JString, required = false,
                                 default = nil)
  if valid_613038 != nil:
    section.add "PathPrefix", valid_613038
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_613039 = query.getOrDefault("PolicyArn")
  valid_613039 = validateParameter(valid_613039, JString, required = true,
                                 default = nil)
  if valid_613039 != nil:
    section.add "PolicyArn", valid_613039
  var valid_613040 = query.getOrDefault("Action")
  valid_613040 = validateParameter(valid_613040, JString, required = true,
                                 default = newJString("ListEntitiesForPolicy"))
  if valid_613040 != nil:
    section.add "Action", valid_613040
  var valid_613041 = query.getOrDefault("Version")
  valid_613041 = validateParameter(valid_613041, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613041 != nil:
    section.add "Version", valid_613041
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613042 = header.getOrDefault("X-Amz-Signature")
  valid_613042 = validateParameter(valid_613042, JString, required = false,
                                 default = nil)
  if valid_613042 != nil:
    section.add "X-Amz-Signature", valid_613042
  var valid_613043 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613043 = validateParameter(valid_613043, JString, required = false,
                                 default = nil)
  if valid_613043 != nil:
    section.add "X-Amz-Content-Sha256", valid_613043
  var valid_613044 = header.getOrDefault("X-Amz-Date")
  valid_613044 = validateParameter(valid_613044, JString, required = false,
                                 default = nil)
  if valid_613044 != nil:
    section.add "X-Amz-Date", valid_613044
  var valid_613045 = header.getOrDefault("X-Amz-Credential")
  valid_613045 = validateParameter(valid_613045, JString, required = false,
                                 default = nil)
  if valid_613045 != nil:
    section.add "X-Amz-Credential", valid_613045
  var valid_613046 = header.getOrDefault("X-Amz-Security-Token")
  valid_613046 = validateParameter(valid_613046, JString, required = false,
                                 default = nil)
  if valid_613046 != nil:
    section.add "X-Amz-Security-Token", valid_613046
  var valid_613047 = header.getOrDefault("X-Amz-Algorithm")
  valid_613047 = validateParameter(valid_613047, JString, required = false,
                                 default = nil)
  if valid_613047 != nil:
    section.add "X-Amz-Algorithm", valid_613047
  var valid_613048 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613048 = validateParameter(valid_613048, JString, required = false,
                                 default = nil)
  if valid_613048 != nil:
    section.add "X-Amz-SignedHeaders", valid_613048
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613049: Call_GetListEntitiesForPolicy_613031; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613049.validator(path, query, header, formData, body)
  let scheme = call_613049.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613049.url(scheme.get, call_613049.host, call_613049.base,
                         call_613049.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613049, url, valid)

proc call*(call_613050: Call_GetListEntitiesForPolicy_613031; PolicyArn: string;
          Marker: string = ""; PolicyUsageFilter: string = "PermissionsPolicy";
          EntityFilter: string = "User"; MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListEntitiesForPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getListEntitiesForPolicy
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   EntityFilter: string
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613051 = newJObject()
  add(query_613051, "Marker", newJString(Marker))
  add(query_613051, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_613051, "EntityFilter", newJString(EntityFilter))
  add(query_613051, "MaxItems", newJInt(MaxItems))
  add(query_613051, "PathPrefix", newJString(PathPrefix))
  add(query_613051, "PolicyArn", newJString(PolicyArn))
  add(query_613051, "Action", newJString(Action))
  add(query_613051, "Version", newJString(Version))
  result = call_613050.call(nil, query_613051, nil, nil, nil)

var getListEntitiesForPolicy* = Call_GetListEntitiesForPolicy_613031(
    name: "getListEntitiesForPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListEntitiesForPolicy",
    validator: validate_GetListEntitiesForPolicy_613032, base: "/",
    url: url_GetListEntitiesForPolicy_613033, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroupPolicies_613092 = ref object of OpenApiRestCall_609589
proc url_PostListGroupPolicies_613094(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListGroupPolicies_613093(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613095 = query.getOrDefault("Action")
  valid_613095 = validateParameter(valid_613095, JString, required = true,
                                 default = newJString("ListGroupPolicies"))
  if valid_613095 != nil:
    section.add "Action", valid_613095
  var valid_613096 = query.getOrDefault("Version")
  valid_613096 = validateParameter(valid_613096, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613096 != nil:
    section.add "Version", valid_613096
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613097 = header.getOrDefault("X-Amz-Signature")
  valid_613097 = validateParameter(valid_613097, JString, required = false,
                                 default = nil)
  if valid_613097 != nil:
    section.add "X-Amz-Signature", valid_613097
  var valid_613098 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613098 = validateParameter(valid_613098, JString, required = false,
                                 default = nil)
  if valid_613098 != nil:
    section.add "X-Amz-Content-Sha256", valid_613098
  var valid_613099 = header.getOrDefault("X-Amz-Date")
  valid_613099 = validateParameter(valid_613099, JString, required = false,
                                 default = nil)
  if valid_613099 != nil:
    section.add "X-Amz-Date", valid_613099
  var valid_613100 = header.getOrDefault("X-Amz-Credential")
  valid_613100 = validateParameter(valid_613100, JString, required = false,
                                 default = nil)
  if valid_613100 != nil:
    section.add "X-Amz-Credential", valid_613100
  var valid_613101 = header.getOrDefault("X-Amz-Security-Token")
  valid_613101 = validateParameter(valid_613101, JString, required = false,
                                 default = nil)
  if valid_613101 != nil:
    section.add "X-Amz-Security-Token", valid_613101
  var valid_613102 = header.getOrDefault("X-Amz-Algorithm")
  valid_613102 = validateParameter(valid_613102, JString, required = false,
                                 default = nil)
  if valid_613102 != nil:
    section.add "X-Amz-Algorithm", valid_613102
  var valid_613103 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613103 = validateParameter(valid_613103, JString, required = false,
                                 default = nil)
  if valid_613103 != nil:
    section.add "X-Amz-SignedHeaders", valid_613103
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_613104 = formData.getOrDefault("Marker")
  valid_613104 = validateParameter(valid_613104, JString, required = false,
                                 default = nil)
  if valid_613104 != nil:
    section.add "Marker", valid_613104
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_613105 = formData.getOrDefault("GroupName")
  valid_613105 = validateParameter(valid_613105, JString, required = true,
                                 default = nil)
  if valid_613105 != nil:
    section.add "GroupName", valid_613105
  var valid_613106 = formData.getOrDefault("MaxItems")
  valid_613106 = validateParameter(valid_613106, JInt, required = false, default = nil)
  if valid_613106 != nil:
    section.add "MaxItems", valid_613106
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613107: Call_PostListGroupPolicies_613092; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  let valid = call_613107.validator(path, query, header, formData, body)
  let scheme = call_613107.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613107.url(scheme.get, call_613107.host, call_613107.base,
                         call_613107.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613107, url, valid)

proc call*(call_613108: Call_PostListGroupPolicies_613092; GroupName: string;
          Marker: string = ""; Action: string = "ListGroupPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroupPolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_613109 = newJObject()
  var formData_613110 = newJObject()
  add(formData_613110, "Marker", newJString(Marker))
  add(formData_613110, "GroupName", newJString(GroupName))
  add(query_613109, "Action", newJString(Action))
  add(formData_613110, "MaxItems", newJInt(MaxItems))
  add(query_613109, "Version", newJString(Version))
  result = call_613108.call(nil, query_613109, nil, formData_613110, nil)

var postListGroupPolicies* = Call_PostListGroupPolicies_613092(
    name: "postListGroupPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupPolicies",
    validator: validate_PostListGroupPolicies_613093, base: "/",
    url: url_PostListGroupPolicies_613094, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroupPolicies_613074 = ref object of OpenApiRestCall_609589
proc url_GetListGroupPolicies_613076(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListGroupPolicies_613075(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613077 = query.getOrDefault("Marker")
  valid_613077 = validateParameter(valid_613077, JString, required = false,
                                 default = nil)
  if valid_613077 != nil:
    section.add "Marker", valid_613077
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_613078 = query.getOrDefault("GroupName")
  valid_613078 = validateParameter(valid_613078, JString, required = true,
                                 default = nil)
  if valid_613078 != nil:
    section.add "GroupName", valid_613078
  var valid_613079 = query.getOrDefault("MaxItems")
  valid_613079 = validateParameter(valid_613079, JInt, required = false, default = nil)
  if valid_613079 != nil:
    section.add "MaxItems", valid_613079
  var valid_613080 = query.getOrDefault("Action")
  valid_613080 = validateParameter(valid_613080, JString, required = true,
                                 default = newJString("ListGroupPolicies"))
  if valid_613080 != nil:
    section.add "Action", valid_613080
  var valid_613081 = query.getOrDefault("Version")
  valid_613081 = validateParameter(valid_613081, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613081 != nil:
    section.add "Version", valid_613081
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613082 = header.getOrDefault("X-Amz-Signature")
  valid_613082 = validateParameter(valid_613082, JString, required = false,
                                 default = nil)
  if valid_613082 != nil:
    section.add "X-Amz-Signature", valid_613082
  var valid_613083 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613083 = validateParameter(valid_613083, JString, required = false,
                                 default = nil)
  if valid_613083 != nil:
    section.add "X-Amz-Content-Sha256", valid_613083
  var valid_613084 = header.getOrDefault("X-Amz-Date")
  valid_613084 = validateParameter(valid_613084, JString, required = false,
                                 default = nil)
  if valid_613084 != nil:
    section.add "X-Amz-Date", valid_613084
  var valid_613085 = header.getOrDefault("X-Amz-Credential")
  valid_613085 = validateParameter(valid_613085, JString, required = false,
                                 default = nil)
  if valid_613085 != nil:
    section.add "X-Amz-Credential", valid_613085
  var valid_613086 = header.getOrDefault("X-Amz-Security-Token")
  valid_613086 = validateParameter(valid_613086, JString, required = false,
                                 default = nil)
  if valid_613086 != nil:
    section.add "X-Amz-Security-Token", valid_613086
  var valid_613087 = header.getOrDefault("X-Amz-Algorithm")
  valid_613087 = validateParameter(valid_613087, JString, required = false,
                                 default = nil)
  if valid_613087 != nil:
    section.add "X-Amz-Algorithm", valid_613087
  var valid_613088 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613088 = validateParameter(valid_613088, JString, required = false,
                                 default = nil)
  if valid_613088 != nil:
    section.add "X-Amz-SignedHeaders", valid_613088
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613089: Call_GetListGroupPolicies_613074; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  let valid = call_613089.validator(path, query, header, formData, body)
  let scheme = call_613089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613089.url(scheme.get, call_613089.host, call_613089.base,
                         call_613089.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613089, url, valid)

proc call*(call_613090: Call_GetListGroupPolicies_613074; GroupName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListGroupPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListGroupPolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613091 = newJObject()
  add(query_613091, "Marker", newJString(Marker))
  add(query_613091, "GroupName", newJString(GroupName))
  add(query_613091, "MaxItems", newJInt(MaxItems))
  add(query_613091, "Action", newJString(Action))
  add(query_613091, "Version", newJString(Version))
  result = call_613090.call(nil, query_613091, nil, nil, nil)

var getListGroupPolicies* = Call_GetListGroupPolicies_613074(
    name: "getListGroupPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupPolicies",
    validator: validate_GetListGroupPolicies_613075, base: "/",
    url: url_GetListGroupPolicies_613076, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroups_613129 = ref object of OpenApiRestCall_609589
proc url_PostListGroups_613131(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListGroups_613130(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613132 = query.getOrDefault("Action")
  valid_613132 = validateParameter(valid_613132, JString, required = true,
                                 default = newJString("ListGroups"))
  if valid_613132 != nil:
    section.add "Action", valid_613132
  var valid_613133 = query.getOrDefault("Version")
  valid_613133 = validateParameter(valid_613133, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613133 != nil:
    section.add "Version", valid_613133
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613134 = header.getOrDefault("X-Amz-Signature")
  valid_613134 = validateParameter(valid_613134, JString, required = false,
                                 default = nil)
  if valid_613134 != nil:
    section.add "X-Amz-Signature", valid_613134
  var valid_613135 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613135 = validateParameter(valid_613135, JString, required = false,
                                 default = nil)
  if valid_613135 != nil:
    section.add "X-Amz-Content-Sha256", valid_613135
  var valid_613136 = header.getOrDefault("X-Amz-Date")
  valid_613136 = validateParameter(valid_613136, JString, required = false,
                                 default = nil)
  if valid_613136 != nil:
    section.add "X-Amz-Date", valid_613136
  var valid_613137 = header.getOrDefault("X-Amz-Credential")
  valid_613137 = validateParameter(valid_613137, JString, required = false,
                                 default = nil)
  if valid_613137 != nil:
    section.add "X-Amz-Credential", valid_613137
  var valid_613138 = header.getOrDefault("X-Amz-Security-Token")
  valid_613138 = validateParameter(valid_613138, JString, required = false,
                                 default = nil)
  if valid_613138 != nil:
    section.add "X-Amz-Security-Token", valid_613138
  var valid_613139 = header.getOrDefault("X-Amz-Algorithm")
  valid_613139 = validateParameter(valid_613139, JString, required = false,
                                 default = nil)
  if valid_613139 != nil:
    section.add "X-Amz-Algorithm", valid_613139
  var valid_613140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613140 = validateParameter(valid_613140, JString, required = false,
                                 default = nil)
  if valid_613140 != nil:
    section.add "X-Amz-SignedHeaders", valid_613140
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_613141 = formData.getOrDefault("Marker")
  valid_613141 = validateParameter(valid_613141, JString, required = false,
                                 default = nil)
  if valid_613141 != nil:
    section.add "Marker", valid_613141
  var valid_613142 = formData.getOrDefault("PathPrefix")
  valid_613142 = validateParameter(valid_613142, JString, required = false,
                                 default = nil)
  if valid_613142 != nil:
    section.add "PathPrefix", valid_613142
  var valid_613143 = formData.getOrDefault("MaxItems")
  valid_613143 = validateParameter(valid_613143, JInt, required = false, default = nil)
  if valid_613143 != nil:
    section.add "MaxItems", valid_613143
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613144: Call_PostListGroups_613129; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613144.validator(path, query, header, formData, body)
  let scheme = call_613144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613144.url(scheme.get, call_613144.host, call_613144.base,
                         call_613144.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613144, url, valid)

proc call*(call_613145: Call_PostListGroups_613129; Marker: string = "";
          PathPrefix: string = ""; MaxItems: int = 0; Action: string = "ListGroups";
          Version: string = "2010-05-08"): Recallable =
  ## postListGroups
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613146 = newJObject()
  var formData_613147 = newJObject()
  add(formData_613147, "Marker", newJString(Marker))
  add(formData_613147, "PathPrefix", newJString(PathPrefix))
  add(formData_613147, "MaxItems", newJInt(MaxItems))
  add(query_613146, "Action", newJString(Action))
  add(query_613146, "Version", newJString(Version))
  result = call_613145.call(nil, query_613146, nil, formData_613147, nil)

var postListGroups* = Call_PostListGroups_613129(name: "postListGroups",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListGroups", validator: validate_PostListGroups_613130,
    base: "/", url: url_PostListGroups_613131, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroups_613111 = ref object of OpenApiRestCall_609589
proc url_GetListGroups_613113(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListGroups_613112(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613114 = query.getOrDefault("Marker")
  valid_613114 = validateParameter(valid_613114, JString, required = false,
                                 default = nil)
  if valid_613114 != nil:
    section.add "Marker", valid_613114
  var valid_613115 = query.getOrDefault("MaxItems")
  valid_613115 = validateParameter(valid_613115, JInt, required = false, default = nil)
  if valid_613115 != nil:
    section.add "MaxItems", valid_613115
  var valid_613116 = query.getOrDefault("PathPrefix")
  valid_613116 = validateParameter(valid_613116, JString, required = false,
                                 default = nil)
  if valid_613116 != nil:
    section.add "PathPrefix", valid_613116
  var valid_613117 = query.getOrDefault("Action")
  valid_613117 = validateParameter(valid_613117, JString, required = true,
                                 default = newJString("ListGroups"))
  if valid_613117 != nil:
    section.add "Action", valid_613117
  var valid_613118 = query.getOrDefault("Version")
  valid_613118 = validateParameter(valid_613118, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613118 != nil:
    section.add "Version", valid_613118
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613119 = header.getOrDefault("X-Amz-Signature")
  valid_613119 = validateParameter(valid_613119, JString, required = false,
                                 default = nil)
  if valid_613119 != nil:
    section.add "X-Amz-Signature", valid_613119
  var valid_613120 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613120 = validateParameter(valid_613120, JString, required = false,
                                 default = nil)
  if valid_613120 != nil:
    section.add "X-Amz-Content-Sha256", valid_613120
  var valid_613121 = header.getOrDefault("X-Amz-Date")
  valid_613121 = validateParameter(valid_613121, JString, required = false,
                                 default = nil)
  if valid_613121 != nil:
    section.add "X-Amz-Date", valid_613121
  var valid_613122 = header.getOrDefault("X-Amz-Credential")
  valid_613122 = validateParameter(valid_613122, JString, required = false,
                                 default = nil)
  if valid_613122 != nil:
    section.add "X-Amz-Credential", valid_613122
  var valid_613123 = header.getOrDefault("X-Amz-Security-Token")
  valid_613123 = validateParameter(valid_613123, JString, required = false,
                                 default = nil)
  if valid_613123 != nil:
    section.add "X-Amz-Security-Token", valid_613123
  var valid_613124 = header.getOrDefault("X-Amz-Algorithm")
  valid_613124 = validateParameter(valid_613124, JString, required = false,
                                 default = nil)
  if valid_613124 != nil:
    section.add "X-Amz-Algorithm", valid_613124
  var valid_613125 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613125 = validateParameter(valid_613125, JString, required = false,
                                 default = nil)
  if valid_613125 != nil:
    section.add "X-Amz-SignedHeaders", valid_613125
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613126: Call_GetListGroups_613111; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613126.validator(path, query, header, formData, body)
  let scheme = call_613126.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613126.url(scheme.get, call_613126.host, call_613126.base,
                         call_613126.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613126, url, valid)

proc call*(call_613127: Call_GetListGroups_613111; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = ""; Action: string = "ListGroups";
          Version: string = "2010-05-08"): Recallable =
  ## getListGroups
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613128 = newJObject()
  add(query_613128, "Marker", newJString(Marker))
  add(query_613128, "MaxItems", newJInt(MaxItems))
  add(query_613128, "PathPrefix", newJString(PathPrefix))
  add(query_613128, "Action", newJString(Action))
  add(query_613128, "Version", newJString(Version))
  result = call_613127.call(nil, query_613128, nil, nil, nil)

var getListGroups* = Call_GetListGroups_613111(name: "getListGroups",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListGroups", validator: validate_GetListGroups_613112,
    base: "/", url: url_GetListGroups_613113, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroupsForUser_613166 = ref object of OpenApiRestCall_609589
proc url_PostListGroupsForUser_613168(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListGroupsForUser_613167(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613169 = query.getOrDefault("Action")
  valid_613169 = validateParameter(valid_613169, JString, required = true,
                                 default = newJString("ListGroupsForUser"))
  if valid_613169 != nil:
    section.add "Action", valid_613169
  var valid_613170 = query.getOrDefault("Version")
  valid_613170 = validateParameter(valid_613170, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613170 != nil:
    section.add "Version", valid_613170
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613171 = header.getOrDefault("X-Amz-Signature")
  valid_613171 = validateParameter(valid_613171, JString, required = false,
                                 default = nil)
  if valid_613171 != nil:
    section.add "X-Amz-Signature", valid_613171
  var valid_613172 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613172 = validateParameter(valid_613172, JString, required = false,
                                 default = nil)
  if valid_613172 != nil:
    section.add "X-Amz-Content-Sha256", valid_613172
  var valid_613173 = header.getOrDefault("X-Amz-Date")
  valid_613173 = validateParameter(valid_613173, JString, required = false,
                                 default = nil)
  if valid_613173 != nil:
    section.add "X-Amz-Date", valid_613173
  var valid_613174 = header.getOrDefault("X-Amz-Credential")
  valid_613174 = validateParameter(valid_613174, JString, required = false,
                                 default = nil)
  if valid_613174 != nil:
    section.add "X-Amz-Credential", valid_613174
  var valid_613175 = header.getOrDefault("X-Amz-Security-Token")
  valid_613175 = validateParameter(valid_613175, JString, required = false,
                                 default = nil)
  if valid_613175 != nil:
    section.add "X-Amz-Security-Token", valid_613175
  var valid_613176 = header.getOrDefault("X-Amz-Algorithm")
  valid_613176 = validateParameter(valid_613176, JString, required = false,
                                 default = nil)
  if valid_613176 != nil:
    section.add "X-Amz-Algorithm", valid_613176
  var valid_613177 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613177 = validateParameter(valid_613177, JString, required = false,
                                 default = nil)
  if valid_613177 != nil:
    section.add "X-Amz-SignedHeaders", valid_613177
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_613178 = formData.getOrDefault("Marker")
  valid_613178 = validateParameter(valid_613178, JString, required = false,
                                 default = nil)
  if valid_613178 != nil:
    section.add "Marker", valid_613178
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_613179 = formData.getOrDefault("UserName")
  valid_613179 = validateParameter(valid_613179, JString, required = true,
                                 default = nil)
  if valid_613179 != nil:
    section.add "UserName", valid_613179
  var valid_613180 = formData.getOrDefault("MaxItems")
  valid_613180 = validateParameter(valid_613180, JInt, required = false, default = nil)
  if valid_613180 != nil:
    section.add "MaxItems", valid_613180
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613181: Call_PostListGroupsForUser_613166; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613181.validator(path, query, header, formData, body)
  let scheme = call_613181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613181.url(scheme.get, call_613181.host, call_613181.base,
                         call_613181.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613181, url, valid)

proc call*(call_613182: Call_PostListGroupsForUser_613166; UserName: string;
          Marker: string = ""; Action: string = "ListGroupsForUser"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroupsForUser
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_613183 = newJObject()
  var formData_613184 = newJObject()
  add(formData_613184, "Marker", newJString(Marker))
  add(formData_613184, "UserName", newJString(UserName))
  add(query_613183, "Action", newJString(Action))
  add(formData_613184, "MaxItems", newJInt(MaxItems))
  add(query_613183, "Version", newJString(Version))
  result = call_613182.call(nil, query_613183, nil, formData_613184, nil)

var postListGroupsForUser* = Call_PostListGroupsForUser_613166(
    name: "postListGroupsForUser", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupsForUser",
    validator: validate_PostListGroupsForUser_613167, base: "/",
    url: url_PostListGroupsForUser_613168, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroupsForUser_613148 = ref object of OpenApiRestCall_609589
proc url_GetListGroupsForUser_613150(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListGroupsForUser_613149(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613151 = query.getOrDefault("Marker")
  valid_613151 = validateParameter(valid_613151, JString, required = false,
                                 default = nil)
  if valid_613151 != nil:
    section.add "Marker", valid_613151
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_613152 = query.getOrDefault("UserName")
  valid_613152 = validateParameter(valid_613152, JString, required = true,
                                 default = nil)
  if valid_613152 != nil:
    section.add "UserName", valid_613152
  var valid_613153 = query.getOrDefault("MaxItems")
  valid_613153 = validateParameter(valid_613153, JInt, required = false, default = nil)
  if valid_613153 != nil:
    section.add "MaxItems", valid_613153
  var valid_613154 = query.getOrDefault("Action")
  valid_613154 = validateParameter(valid_613154, JString, required = true,
                                 default = newJString("ListGroupsForUser"))
  if valid_613154 != nil:
    section.add "Action", valid_613154
  var valid_613155 = query.getOrDefault("Version")
  valid_613155 = validateParameter(valid_613155, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613155 != nil:
    section.add "Version", valid_613155
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613156 = header.getOrDefault("X-Amz-Signature")
  valid_613156 = validateParameter(valid_613156, JString, required = false,
                                 default = nil)
  if valid_613156 != nil:
    section.add "X-Amz-Signature", valid_613156
  var valid_613157 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613157 = validateParameter(valid_613157, JString, required = false,
                                 default = nil)
  if valid_613157 != nil:
    section.add "X-Amz-Content-Sha256", valid_613157
  var valid_613158 = header.getOrDefault("X-Amz-Date")
  valid_613158 = validateParameter(valid_613158, JString, required = false,
                                 default = nil)
  if valid_613158 != nil:
    section.add "X-Amz-Date", valid_613158
  var valid_613159 = header.getOrDefault("X-Amz-Credential")
  valid_613159 = validateParameter(valid_613159, JString, required = false,
                                 default = nil)
  if valid_613159 != nil:
    section.add "X-Amz-Credential", valid_613159
  var valid_613160 = header.getOrDefault("X-Amz-Security-Token")
  valid_613160 = validateParameter(valid_613160, JString, required = false,
                                 default = nil)
  if valid_613160 != nil:
    section.add "X-Amz-Security-Token", valid_613160
  var valid_613161 = header.getOrDefault("X-Amz-Algorithm")
  valid_613161 = validateParameter(valid_613161, JString, required = false,
                                 default = nil)
  if valid_613161 != nil:
    section.add "X-Amz-Algorithm", valid_613161
  var valid_613162 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613162 = validateParameter(valid_613162, JString, required = false,
                                 default = nil)
  if valid_613162 != nil:
    section.add "X-Amz-SignedHeaders", valid_613162
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613163: Call_GetListGroupsForUser_613148; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613163.validator(path, query, header, formData, body)
  let scheme = call_613163.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613163.url(scheme.get, call_613163.host, call_613163.base,
                         call_613163.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613163, url, valid)

proc call*(call_613164: Call_GetListGroupsForUser_613148; UserName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListGroupsForUser";
          Version: string = "2010-05-08"): Recallable =
  ## getListGroupsForUser
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613165 = newJObject()
  add(query_613165, "Marker", newJString(Marker))
  add(query_613165, "UserName", newJString(UserName))
  add(query_613165, "MaxItems", newJInt(MaxItems))
  add(query_613165, "Action", newJString(Action))
  add(query_613165, "Version", newJString(Version))
  result = call_613164.call(nil, query_613165, nil, nil, nil)

var getListGroupsForUser* = Call_GetListGroupsForUser_613148(
    name: "getListGroupsForUser", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupsForUser",
    validator: validate_GetListGroupsForUser_613149, base: "/",
    url: url_GetListGroupsForUser_613150, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListInstanceProfiles_613203 = ref object of OpenApiRestCall_609589
proc url_PostListInstanceProfiles_613205(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListInstanceProfiles_613204(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613206 = query.getOrDefault("Action")
  valid_613206 = validateParameter(valid_613206, JString, required = true,
                                 default = newJString("ListInstanceProfiles"))
  if valid_613206 != nil:
    section.add "Action", valid_613206
  var valid_613207 = query.getOrDefault("Version")
  valid_613207 = validateParameter(valid_613207, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613207 != nil:
    section.add "Version", valid_613207
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613208 = header.getOrDefault("X-Amz-Signature")
  valid_613208 = validateParameter(valid_613208, JString, required = false,
                                 default = nil)
  if valid_613208 != nil:
    section.add "X-Amz-Signature", valid_613208
  var valid_613209 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613209 = validateParameter(valid_613209, JString, required = false,
                                 default = nil)
  if valid_613209 != nil:
    section.add "X-Amz-Content-Sha256", valid_613209
  var valid_613210 = header.getOrDefault("X-Amz-Date")
  valid_613210 = validateParameter(valid_613210, JString, required = false,
                                 default = nil)
  if valid_613210 != nil:
    section.add "X-Amz-Date", valid_613210
  var valid_613211 = header.getOrDefault("X-Amz-Credential")
  valid_613211 = validateParameter(valid_613211, JString, required = false,
                                 default = nil)
  if valid_613211 != nil:
    section.add "X-Amz-Credential", valid_613211
  var valid_613212 = header.getOrDefault("X-Amz-Security-Token")
  valid_613212 = validateParameter(valid_613212, JString, required = false,
                                 default = nil)
  if valid_613212 != nil:
    section.add "X-Amz-Security-Token", valid_613212
  var valid_613213 = header.getOrDefault("X-Amz-Algorithm")
  valid_613213 = validateParameter(valid_613213, JString, required = false,
                                 default = nil)
  if valid_613213 != nil:
    section.add "X-Amz-Algorithm", valid_613213
  var valid_613214 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613214 = validateParameter(valid_613214, JString, required = false,
                                 default = nil)
  if valid_613214 != nil:
    section.add "X-Amz-SignedHeaders", valid_613214
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_613215 = formData.getOrDefault("Marker")
  valid_613215 = validateParameter(valid_613215, JString, required = false,
                                 default = nil)
  if valid_613215 != nil:
    section.add "Marker", valid_613215
  var valid_613216 = formData.getOrDefault("PathPrefix")
  valid_613216 = validateParameter(valid_613216, JString, required = false,
                                 default = nil)
  if valid_613216 != nil:
    section.add "PathPrefix", valid_613216
  var valid_613217 = formData.getOrDefault("MaxItems")
  valid_613217 = validateParameter(valid_613217, JInt, required = false, default = nil)
  if valid_613217 != nil:
    section.add "MaxItems", valid_613217
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613218: Call_PostListInstanceProfiles_613203; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613218.validator(path, query, header, formData, body)
  let scheme = call_613218.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613218.url(scheme.get, call_613218.host, call_613218.base,
                         call_613218.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613218, url, valid)

proc call*(call_613219: Call_PostListInstanceProfiles_613203; Marker: string = "";
          PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListInstanceProfiles"; Version: string = "2010-05-08"): Recallable =
  ## postListInstanceProfiles
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613220 = newJObject()
  var formData_613221 = newJObject()
  add(formData_613221, "Marker", newJString(Marker))
  add(formData_613221, "PathPrefix", newJString(PathPrefix))
  add(formData_613221, "MaxItems", newJInt(MaxItems))
  add(query_613220, "Action", newJString(Action))
  add(query_613220, "Version", newJString(Version))
  result = call_613219.call(nil, query_613220, nil, formData_613221, nil)

var postListInstanceProfiles* = Call_PostListInstanceProfiles_613203(
    name: "postListInstanceProfiles", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfiles",
    validator: validate_PostListInstanceProfiles_613204, base: "/",
    url: url_PostListInstanceProfiles_613205, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListInstanceProfiles_613185 = ref object of OpenApiRestCall_609589
proc url_GetListInstanceProfiles_613187(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListInstanceProfiles_613186(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613188 = query.getOrDefault("Marker")
  valid_613188 = validateParameter(valid_613188, JString, required = false,
                                 default = nil)
  if valid_613188 != nil:
    section.add "Marker", valid_613188
  var valid_613189 = query.getOrDefault("MaxItems")
  valid_613189 = validateParameter(valid_613189, JInt, required = false, default = nil)
  if valid_613189 != nil:
    section.add "MaxItems", valid_613189
  var valid_613190 = query.getOrDefault("PathPrefix")
  valid_613190 = validateParameter(valid_613190, JString, required = false,
                                 default = nil)
  if valid_613190 != nil:
    section.add "PathPrefix", valid_613190
  var valid_613191 = query.getOrDefault("Action")
  valid_613191 = validateParameter(valid_613191, JString, required = true,
                                 default = newJString("ListInstanceProfiles"))
  if valid_613191 != nil:
    section.add "Action", valid_613191
  var valid_613192 = query.getOrDefault("Version")
  valid_613192 = validateParameter(valid_613192, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613192 != nil:
    section.add "Version", valid_613192
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613193 = header.getOrDefault("X-Amz-Signature")
  valid_613193 = validateParameter(valid_613193, JString, required = false,
                                 default = nil)
  if valid_613193 != nil:
    section.add "X-Amz-Signature", valid_613193
  var valid_613194 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613194 = validateParameter(valid_613194, JString, required = false,
                                 default = nil)
  if valid_613194 != nil:
    section.add "X-Amz-Content-Sha256", valid_613194
  var valid_613195 = header.getOrDefault("X-Amz-Date")
  valid_613195 = validateParameter(valid_613195, JString, required = false,
                                 default = nil)
  if valid_613195 != nil:
    section.add "X-Amz-Date", valid_613195
  var valid_613196 = header.getOrDefault("X-Amz-Credential")
  valid_613196 = validateParameter(valid_613196, JString, required = false,
                                 default = nil)
  if valid_613196 != nil:
    section.add "X-Amz-Credential", valid_613196
  var valid_613197 = header.getOrDefault("X-Amz-Security-Token")
  valid_613197 = validateParameter(valid_613197, JString, required = false,
                                 default = nil)
  if valid_613197 != nil:
    section.add "X-Amz-Security-Token", valid_613197
  var valid_613198 = header.getOrDefault("X-Amz-Algorithm")
  valid_613198 = validateParameter(valid_613198, JString, required = false,
                                 default = nil)
  if valid_613198 != nil:
    section.add "X-Amz-Algorithm", valid_613198
  var valid_613199 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613199 = validateParameter(valid_613199, JString, required = false,
                                 default = nil)
  if valid_613199 != nil:
    section.add "X-Amz-SignedHeaders", valid_613199
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613200: Call_GetListInstanceProfiles_613185; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613200.validator(path, query, header, formData, body)
  let scheme = call_613200.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613200.url(scheme.get, call_613200.host, call_613200.base,
                         call_613200.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613200, url, valid)

proc call*(call_613201: Call_GetListInstanceProfiles_613185; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListInstanceProfiles"; Version: string = "2010-05-08"): Recallable =
  ## getListInstanceProfiles
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613202 = newJObject()
  add(query_613202, "Marker", newJString(Marker))
  add(query_613202, "MaxItems", newJInt(MaxItems))
  add(query_613202, "PathPrefix", newJString(PathPrefix))
  add(query_613202, "Action", newJString(Action))
  add(query_613202, "Version", newJString(Version))
  result = call_613201.call(nil, query_613202, nil, nil, nil)

var getListInstanceProfiles* = Call_GetListInstanceProfiles_613185(
    name: "getListInstanceProfiles", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfiles",
    validator: validate_GetListInstanceProfiles_613186, base: "/",
    url: url_GetListInstanceProfiles_613187, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListInstanceProfilesForRole_613240 = ref object of OpenApiRestCall_609589
proc url_PostListInstanceProfilesForRole_613242(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListInstanceProfilesForRole_613241(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613243 = query.getOrDefault("Action")
  valid_613243 = validateParameter(valid_613243, JString, required = true, default = newJString(
      "ListInstanceProfilesForRole"))
  if valid_613243 != nil:
    section.add "Action", valid_613243
  var valid_613244 = query.getOrDefault("Version")
  valid_613244 = validateParameter(valid_613244, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613244 != nil:
    section.add "Version", valid_613244
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613245 = header.getOrDefault("X-Amz-Signature")
  valid_613245 = validateParameter(valid_613245, JString, required = false,
                                 default = nil)
  if valid_613245 != nil:
    section.add "X-Amz-Signature", valid_613245
  var valid_613246 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613246 = validateParameter(valid_613246, JString, required = false,
                                 default = nil)
  if valid_613246 != nil:
    section.add "X-Amz-Content-Sha256", valid_613246
  var valid_613247 = header.getOrDefault("X-Amz-Date")
  valid_613247 = validateParameter(valid_613247, JString, required = false,
                                 default = nil)
  if valid_613247 != nil:
    section.add "X-Amz-Date", valid_613247
  var valid_613248 = header.getOrDefault("X-Amz-Credential")
  valid_613248 = validateParameter(valid_613248, JString, required = false,
                                 default = nil)
  if valid_613248 != nil:
    section.add "X-Amz-Credential", valid_613248
  var valid_613249 = header.getOrDefault("X-Amz-Security-Token")
  valid_613249 = validateParameter(valid_613249, JString, required = false,
                                 default = nil)
  if valid_613249 != nil:
    section.add "X-Amz-Security-Token", valid_613249
  var valid_613250 = header.getOrDefault("X-Amz-Algorithm")
  valid_613250 = validateParameter(valid_613250, JString, required = false,
                                 default = nil)
  if valid_613250 != nil:
    section.add "X-Amz-Algorithm", valid_613250
  var valid_613251 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613251 = validateParameter(valid_613251, JString, required = false,
                                 default = nil)
  if valid_613251 != nil:
    section.add "X-Amz-SignedHeaders", valid_613251
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_613252 = formData.getOrDefault("RoleName")
  valid_613252 = validateParameter(valid_613252, JString, required = true,
                                 default = nil)
  if valid_613252 != nil:
    section.add "RoleName", valid_613252
  var valid_613253 = formData.getOrDefault("Marker")
  valid_613253 = validateParameter(valid_613253, JString, required = false,
                                 default = nil)
  if valid_613253 != nil:
    section.add "Marker", valid_613253
  var valid_613254 = formData.getOrDefault("MaxItems")
  valid_613254 = validateParameter(valid_613254, JInt, required = false, default = nil)
  if valid_613254 != nil:
    section.add "MaxItems", valid_613254
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613255: Call_PostListInstanceProfilesForRole_613240;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613255.validator(path, query, header, formData, body)
  let scheme = call_613255.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613255.url(scheme.get, call_613255.host, call_613255.base,
                         call_613255.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613255, url, valid)

proc call*(call_613256: Call_PostListInstanceProfilesForRole_613240;
          RoleName: string; Marker: string = "";
          Action: string = "ListInstanceProfilesForRole"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListInstanceProfilesForRole
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_613257 = newJObject()
  var formData_613258 = newJObject()
  add(formData_613258, "RoleName", newJString(RoleName))
  add(formData_613258, "Marker", newJString(Marker))
  add(query_613257, "Action", newJString(Action))
  add(formData_613258, "MaxItems", newJInt(MaxItems))
  add(query_613257, "Version", newJString(Version))
  result = call_613256.call(nil, query_613257, nil, formData_613258, nil)

var postListInstanceProfilesForRole* = Call_PostListInstanceProfilesForRole_613240(
    name: "postListInstanceProfilesForRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfilesForRole",
    validator: validate_PostListInstanceProfilesForRole_613241, base: "/",
    url: url_PostListInstanceProfilesForRole_613242,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListInstanceProfilesForRole_613222 = ref object of OpenApiRestCall_609589
proc url_GetListInstanceProfilesForRole_613224(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListInstanceProfilesForRole_613223(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613225 = query.getOrDefault("Marker")
  valid_613225 = validateParameter(valid_613225, JString, required = false,
                                 default = nil)
  if valid_613225 != nil:
    section.add "Marker", valid_613225
  var valid_613226 = query.getOrDefault("MaxItems")
  valid_613226 = validateParameter(valid_613226, JInt, required = false, default = nil)
  if valid_613226 != nil:
    section.add "MaxItems", valid_613226
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_613227 = query.getOrDefault("RoleName")
  valid_613227 = validateParameter(valid_613227, JString, required = true,
                                 default = nil)
  if valid_613227 != nil:
    section.add "RoleName", valid_613227
  var valid_613228 = query.getOrDefault("Action")
  valid_613228 = validateParameter(valid_613228, JString, required = true, default = newJString(
      "ListInstanceProfilesForRole"))
  if valid_613228 != nil:
    section.add "Action", valid_613228
  var valid_613229 = query.getOrDefault("Version")
  valid_613229 = validateParameter(valid_613229, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613229 != nil:
    section.add "Version", valid_613229
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613230 = header.getOrDefault("X-Amz-Signature")
  valid_613230 = validateParameter(valid_613230, JString, required = false,
                                 default = nil)
  if valid_613230 != nil:
    section.add "X-Amz-Signature", valid_613230
  var valid_613231 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613231 = validateParameter(valid_613231, JString, required = false,
                                 default = nil)
  if valid_613231 != nil:
    section.add "X-Amz-Content-Sha256", valid_613231
  var valid_613232 = header.getOrDefault("X-Amz-Date")
  valid_613232 = validateParameter(valid_613232, JString, required = false,
                                 default = nil)
  if valid_613232 != nil:
    section.add "X-Amz-Date", valid_613232
  var valid_613233 = header.getOrDefault("X-Amz-Credential")
  valid_613233 = validateParameter(valid_613233, JString, required = false,
                                 default = nil)
  if valid_613233 != nil:
    section.add "X-Amz-Credential", valid_613233
  var valid_613234 = header.getOrDefault("X-Amz-Security-Token")
  valid_613234 = validateParameter(valid_613234, JString, required = false,
                                 default = nil)
  if valid_613234 != nil:
    section.add "X-Amz-Security-Token", valid_613234
  var valid_613235 = header.getOrDefault("X-Amz-Algorithm")
  valid_613235 = validateParameter(valid_613235, JString, required = false,
                                 default = nil)
  if valid_613235 != nil:
    section.add "X-Amz-Algorithm", valid_613235
  var valid_613236 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613236 = validateParameter(valid_613236, JString, required = false,
                                 default = nil)
  if valid_613236 != nil:
    section.add "X-Amz-SignedHeaders", valid_613236
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613237: Call_GetListInstanceProfilesForRole_613222; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613237.validator(path, query, header, formData, body)
  let scheme = call_613237.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613237.url(scheme.get, call_613237.host, call_613237.base,
                         call_613237.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613237, url, valid)

proc call*(call_613238: Call_GetListInstanceProfilesForRole_613222;
          RoleName: string; Marker: string = ""; MaxItems: int = 0;
          Action: string = "ListInstanceProfilesForRole";
          Version: string = "2010-05-08"): Recallable =
  ## getListInstanceProfilesForRole
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613239 = newJObject()
  add(query_613239, "Marker", newJString(Marker))
  add(query_613239, "MaxItems", newJInt(MaxItems))
  add(query_613239, "RoleName", newJString(RoleName))
  add(query_613239, "Action", newJString(Action))
  add(query_613239, "Version", newJString(Version))
  result = call_613238.call(nil, query_613239, nil, nil, nil)

var getListInstanceProfilesForRole* = Call_GetListInstanceProfilesForRole_613222(
    name: "getListInstanceProfilesForRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfilesForRole",
    validator: validate_GetListInstanceProfilesForRole_613223, base: "/",
    url: url_GetListInstanceProfilesForRole_613224,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListMFADevices_613277 = ref object of OpenApiRestCall_609589
proc url_PostListMFADevices_613279(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListMFADevices_613278(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613280 = query.getOrDefault("Action")
  valid_613280 = validateParameter(valid_613280, JString, required = true,
                                 default = newJString("ListMFADevices"))
  if valid_613280 != nil:
    section.add "Action", valid_613280
  var valid_613281 = query.getOrDefault("Version")
  valid_613281 = validateParameter(valid_613281, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613281 != nil:
    section.add "Version", valid_613281
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613282 = header.getOrDefault("X-Amz-Signature")
  valid_613282 = validateParameter(valid_613282, JString, required = false,
                                 default = nil)
  if valid_613282 != nil:
    section.add "X-Amz-Signature", valid_613282
  var valid_613283 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613283 = validateParameter(valid_613283, JString, required = false,
                                 default = nil)
  if valid_613283 != nil:
    section.add "X-Amz-Content-Sha256", valid_613283
  var valid_613284 = header.getOrDefault("X-Amz-Date")
  valid_613284 = validateParameter(valid_613284, JString, required = false,
                                 default = nil)
  if valid_613284 != nil:
    section.add "X-Amz-Date", valid_613284
  var valid_613285 = header.getOrDefault("X-Amz-Credential")
  valid_613285 = validateParameter(valid_613285, JString, required = false,
                                 default = nil)
  if valid_613285 != nil:
    section.add "X-Amz-Credential", valid_613285
  var valid_613286 = header.getOrDefault("X-Amz-Security-Token")
  valid_613286 = validateParameter(valid_613286, JString, required = false,
                                 default = nil)
  if valid_613286 != nil:
    section.add "X-Amz-Security-Token", valid_613286
  var valid_613287 = header.getOrDefault("X-Amz-Algorithm")
  valid_613287 = validateParameter(valid_613287, JString, required = false,
                                 default = nil)
  if valid_613287 != nil:
    section.add "X-Amz-Algorithm", valid_613287
  var valid_613288 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613288 = validateParameter(valid_613288, JString, required = false,
                                 default = nil)
  if valid_613288 != nil:
    section.add "X-Amz-SignedHeaders", valid_613288
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_613289 = formData.getOrDefault("Marker")
  valid_613289 = validateParameter(valid_613289, JString, required = false,
                                 default = nil)
  if valid_613289 != nil:
    section.add "Marker", valid_613289
  var valid_613290 = formData.getOrDefault("UserName")
  valid_613290 = validateParameter(valid_613290, JString, required = false,
                                 default = nil)
  if valid_613290 != nil:
    section.add "UserName", valid_613290
  var valid_613291 = formData.getOrDefault("MaxItems")
  valid_613291 = validateParameter(valid_613291, JInt, required = false, default = nil)
  if valid_613291 != nil:
    section.add "MaxItems", valid_613291
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613292: Call_PostListMFADevices_613277; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613292.validator(path, query, header, formData, body)
  let scheme = call_613292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613292.url(scheme.get, call_613292.host, call_613292.base,
                         call_613292.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613292, url, valid)

proc call*(call_613293: Call_PostListMFADevices_613277; Marker: string = "";
          UserName: string = ""; Action: string = "ListMFADevices"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListMFADevices
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_613294 = newJObject()
  var formData_613295 = newJObject()
  add(formData_613295, "Marker", newJString(Marker))
  add(formData_613295, "UserName", newJString(UserName))
  add(query_613294, "Action", newJString(Action))
  add(formData_613295, "MaxItems", newJInt(MaxItems))
  add(query_613294, "Version", newJString(Version))
  result = call_613293.call(nil, query_613294, nil, formData_613295, nil)

var postListMFADevices* = Call_PostListMFADevices_613277(
    name: "postListMFADevices", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListMFADevices",
    validator: validate_PostListMFADevices_613278, base: "/",
    url: url_PostListMFADevices_613279, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListMFADevices_613259 = ref object of OpenApiRestCall_609589
proc url_GetListMFADevices_613261(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListMFADevices_613260(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613262 = query.getOrDefault("Marker")
  valid_613262 = validateParameter(valid_613262, JString, required = false,
                                 default = nil)
  if valid_613262 != nil:
    section.add "Marker", valid_613262
  var valid_613263 = query.getOrDefault("UserName")
  valid_613263 = validateParameter(valid_613263, JString, required = false,
                                 default = nil)
  if valid_613263 != nil:
    section.add "UserName", valid_613263
  var valid_613264 = query.getOrDefault("MaxItems")
  valid_613264 = validateParameter(valid_613264, JInt, required = false, default = nil)
  if valid_613264 != nil:
    section.add "MaxItems", valid_613264
  var valid_613265 = query.getOrDefault("Action")
  valid_613265 = validateParameter(valid_613265, JString, required = true,
                                 default = newJString("ListMFADevices"))
  if valid_613265 != nil:
    section.add "Action", valid_613265
  var valid_613266 = query.getOrDefault("Version")
  valid_613266 = validateParameter(valid_613266, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613266 != nil:
    section.add "Version", valid_613266
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613267 = header.getOrDefault("X-Amz-Signature")
  valid_613267 = validateParameter(valid_613267, JString, required = false,
                                 default = nil)
  if valid_613267 != nil:
    section.add "X-Amz-Signature", valid_613267
  var valid_613268 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613268 = validateParameter(valid_613268, JString, required = false,
                                 default = nil)
  if valid_613268 != nil:
    section.add "X-Amz-Content-Sha256", valid_613268
  var valid_613269 = header.getOrDefault("X-Amz-Date")
  valid_613269 = validateParameter(valid_613269, JString, required = false,
                                 default = nil)
  if valid_613269 != nil:
    section.add "X-Amz-Date", valid_613269
  var valid_613270 = header.getOrDefault("X-Amz-Credential")
  valid_613270 = validateParameter(valid_613270, JString, required = false,
                                 default = nil)
  if valid_613270 != nil:
    section.add "X-Amz-Credential", valid_613270
  var valid_613271 = header.getOrDefault("X-Amz-Security-Token")
  valid_613271 = validateParameter(valid_613271, JString, required = false,
                                 default = nil)
  if valid_613271 != nil:
    section.add "X-Amz-Security-Token", valid_613271
  var valid_613272 = header.getOrDefault("X-Amz-Algorithm")
  valid_613272 = validateParameter(valid_613272, JString, required = false,
                                 default = nil)
  if valid_613272 != nil:
    section.add "X-Amz-Algorithm", valid_613272
  var valid_613273 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613273 = validateParameter(valid_613273, JString, required = false,
                                 default = nil)
  if valid_613273 != nil:
    section.add "X-Amz-SignedHeaders", valid_613273
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613274: Call_GetListMFADevices_613259; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613274.validator(path, query, header, formData, body)
  let scheme = call_613274.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613274.url(scheme.get, call_613274.host, call_613274.base,
                         call_613274.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613274, url, valid)

proc call*(call_613275: Call_GetListMFADevices_613259; Marker: string = "";
          UserName: string = ""; MaxItems: int = 0; Action: string = "ListMFADevices";
          Version: string = "2010-05-08"): Recallable =
  ## getListMFADevices
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613276 = newJObject()
  add(query_613276, "Marker", newJString(Marker))
  add(query_613276, "UserName", newJString(UserName))
  add(query_613276, "MaxItems", newJInt(MaxItems))
  add(query_613276, "Action", newJString(Action))
  add(query_613276, "Version", newJString(Version))
  result = call_613275.call(nil, query_613276, nil, nil, nil)

var getListMFADevices* = Call_GetListMFADevices_613259(name: "getListMFADevices",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListMFADevices", validator: validate_GetListMFADevices_613260,
    base: "/", url: url_GetListMFADevices_613261,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListOpenIDConnectProviders_613311 = ref object of OpenApiRestCall_609589
proc url_PostListOpenIDConnectProviders_613313(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListOpenIDConnectProviders_613312(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613314 = query.getOrDefault("Action")
  valid_613314 = validateParameter(valid_613314, JString, required = true, default = newJString(
      "ListOpenIDConnectProviders"))
  if valid_613314 != nil:
    section.add "Action", valid_613314
  var valid_613315 = query.getOrDefault("Version")
  valid_613315 = validateParameter(valid_613315, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613315 != nil:
    section.add "Version", valid_613315
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613316 = header.getOrDefault("X-Amz-Signature")
  valid_613316 = validateParameter(valid_613316, JString, required = false,
                                 default = nil)
  if valid_613316 != nil:
    section.add "X-Amz-Signature", valid_613316
  var valid_613317 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613317 = validateParameter(valid_613317, JString, required = false,
                                 default = nil)
  if valid_613317 != nil:
    section.add "X-Amz-Content-Sha256", valid_613317
  var valid_613318 = header.getOrDefault("X-Amz-Date")
  valid_613318 = validateParameter(valid_613318, JString, required = false,
                                 default = nil)
  if valid_613318 != nil:
    section.add "X-Amz-Date", valid_613318
  var valid_613319 = header.getOrDefault("X-Amz-Credential")
  valid_613319 = validateParameter(valid_613319, JString, required = false,
                                 default = nil)
  if valid_613319 != nil:
    section.add "X-Amz-Credential", valid_613319
  var valid_613320 = header.getOrDefault("X-Amz-Security-Token")
  valid_613320 = validateParameter(valid_613320, JString, required = false,
                                 default = nil)
  if valid_613320 != nil:
    section.add "X-Amz-Security-Token", valid_613320
  var valid_613321 = header.getOrDefault("X-Amz-Algorithm")
  valid_613321 = validateParameter(valid_613321, JString, required = false,
                                 default = nil)
  if valid_613321 != nil:
    section.add "X-Amz-Algorithm", valid_613321
  var valid_613322 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613322 = validateParameter(valid_613322, JString, required = false,
                                 default = nil)
  if valid_613322 != nil:
    section.add "X-Amz-SignedHeaders", valid_613322
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613323: Call_PostListOpenIDConnectProviders_613311; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  let valid = call_613323.validator(path, query, header, formData, body)
  let scheme = call_613323.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613323.url(scheme.get, call_613323.host, call_613323.base,
                         call_613323.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613323, url, valid)

proc call*(call_613324: Call_PostListOpenIDConnectProviders_613311;
          Action: string = "ListOpenIDConnectProviders";
          Version: string = "2010-05-08"): Recallable =
  ## postListOpenIDConnectProviders
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613325 = newJObject()
  add(query_613325, "Action", newJString(Action))
  add(query_613325, "Version", newJString(Version))
  result = call_613324.call(nil, query_613325, nil, nil, nil)

var postListOpenIDConnectProviders* = Call_PostListOpenIDConnectProviders_613311(
    name: "postListOpenIDConnectProviders", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListOpenIDConnectProviders",
    validator: validate_PostListOpenIDConnectProviders_613312, base: "/",
    url: url_PostListOpenIDConnectProviders_613313,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListOpenIDConnectProviders_613296 = ref object of OpenApiRestCall_609589
proc url_GetListOpenIDConnectProviders_613298(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListOpenIDConnectProviders_613297(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613299 = query.getOrDefault("Action")
  valid_613299 = validateParameter(valid_613299, JString, required = true, default = newJString(
      "ListOpenIDConnectProviders"))
  if valid_613299 != nil:
    section.add "Action", valid_613299
  var valid_613300 = query.getOrDefault("Version")
  valid_613300 = validateParameter(valid_613300, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613300 != nil:
    section.add "Version", valid_613300
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613301 = header.getOrDefault("X-Amz-Signature")
  valid_613301 = validateParameter(valid_613301, JString, required = false,
                                 default = nil)
  if valid_613301 != nil:
    section.add "X-Amz-Signature", valid_613301
  var valid_613302 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613302 = validateParameter(valid_613302, JString, required = false,
                                 default = nil)
  if valid_613302 != nil:
    section.add "X-Amz-Content-Sha256", valid_613302
  var valid_613303 = header.getOrDefault("X-Amz-Date")
  valid_613303 = validateParameter(valid_613303, JString, required = false,
                                 default = nil)
  if valid_613303 != nil:
    section.add "X-Amz-Date", valid_613303
  var valid_613304 = header.getOrDefault("X-Amz-Credential")
  valid_613304 = validateParameter(valid_613304, JString, required = false,
                                 default = nil)
  if valid_613304 != nil:
    section.add "X-Amz-Credential", valid_613304
  var valid_613305 = header.getOrDefault("X-Amz-Security-Token")
  valid_613305 = validateParameter(valid_613305, JString, required = false,
                                 default = nil)
  if valid_613305 != nil:
    section.add "X-Amz-Security-Token", valid_613305
  var valid_613306 = header.getOrDefault("X-Amz-Algorithm")
  valid_613306 = validateParameter(valid_613306, JString, required = false,
                                 default = nil)
  if valid_613306 != nil:
    section.add "X-Amz-Algorithm", valid_613306
  var valid_613307 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613307 = validateParameter(valid_613307, JString, required = false,
                                 default = nil)
  if valid_613307 != nil:
    section.add "X-Amz-SignedHeaders", valid_613307
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613308: Call_GetListOpenIDConnectProviders_613296; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  let valid = call_613308.validator(path, query, header, formData, body)
  let scheme = call_613308.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613308.url(scheme.get, call_613308.host, call_613308.base,
                         call_613308.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613308, url, valid)

proc call*(call_613309: Call_GetListOpenIDConnectProviders_613296;
          Action: string = "ListOpenIDConnectProviders";
          Version: string = "2010-05-08"): Recallable =
  ## getListOpenIDConnectProviders
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613310 = newJObject()
  add(query_613310, "Action", newJString(Action))
  add(query_613310, "Version", newJString(Version))
  result = call_613309.call(nil, query_613310, nil, nil, nil)

var getListOpenIDConnectProviders* = Call_GetListOpenIDConnectProviders_613296(
    name: "getListOpenIDConnectProviders", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListOpenIDConnectProviders",
    validator: validate_GetListOpenIDConnectProviders_613297, base: "/",
    url: url_GetListOpenIDConnectProviders_613298,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPolicies_613347 = ref object of OpenApiRestCall_609589
proc url_PostListPolicies_613349(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListPolicies_613348(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613350 = query.getOrDefault("Action")
  valid_613350 = validateParameter(valid_613350, JString, required = true,
                                 default = newJString("ListPolicies"))
  if valid_613350 != nil:
    section.add "Action", valid_613350
  var valid_613351 = query.getOrDefault("Version")
  valid_613351 = validateParameter(valid_613351, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613351 != nil:
    section.add "Version", valid_613351
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613352 = header.getOrDefault("X-Amz-Signature")
  valid_613352 = validateParameter(valid_613352, JString, required = false,
                                 default = nil)
  if valid_613352 != nil:
    section.add "X-Amz-Signature", valid_613352
  var valid_613353 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613353 = validateParameter(valid_613353, JString, required = false,
                                 default = nil)
  if valid_613353 != nil:
    section.add "X-Amz-Content-Sha256", valid_613353
  var valid_613354 = header.getOrDefault("X-Amz-Date")
  valid_613354 = validateParameter(valid_613354, JString, required = false,
                                 default = nil)
  if valid_613354 != nil:
    section.add "X-Amz-Date", valid_613354
  var valid_613355 = header.getOrDefault("X-Amz-Credential")
  valid_613355 = validateParameter(valid_613355, JString, required = false,
                                 default = nil)
  if valid_613355 != nil:
    section.add "X-Amz-Credential", valid_613355
  var valid_613356 = header.getOrDefault("X-Amz-Security-Token")
  valid_613356 = validateParameter(valid_613356, JString, required = false,
                                 default = nil)
  if valid_613356 != nil:
    section.add "X-Amz-Security-Token", valid_613356
  var valid_613357 = header.getOrDefault("X-Amz-Algorithm")
  valid_613357 = validateParameter(valid_613357, JString, required = false,
                                 default = nil)
  if valid_613357 != nil:
    section.add "X-Amz-Algorithm", valid_613357
  var valid_613358 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613358 = validateParameter(valid_613358, JString, required = false,
                                 default = nil)
  if valid_613358 != nil:
    section.add "X-Amz-SignedHeaders", valid_613358
  result.add "header", section
  ## parameters in `formData` object:
  ##   Scope: JString
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   OnlyAttached: JBool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  var valid_613359 = formData.getOrDefault("Scope")
  valid_613359 = validateParameter(valid_613359, JString, required = false,
                                 default = newJString("All"))
  if valid_613359 != nil:
    section.add "Scope", valid_613359
  var valid_613360 = formData.getOrDefault("Marker")
  valid_613360 = validateParameter(valid_613360, JString, required = false,
                                 default = nil)
  if valid_613360 != nil:
    section.add "Marker", valid_613360
  var valid_613361 = formData.getOrDefault("PathPrefix")
  valid_613361 = validateParameter(valid_613361, JString, required = false,
                                 default = nil)
  if valid_613361 != nil:
    section.add "PathPrefix", valid_613361
  var valid_613362 = formData.getOrDefault("MaxItems")
  valid_613362 = validateParameter(valid_613362, JInt, required = false, default = nil)
  if valid_613362 != nil:
    section.add "MaxItems", valid_613362
  var valid_613363 = formData.getOrDefault("OnlyAttached")
  valid_613363 = validateParameter(valid_613363, JBool, required = false, default = nil)
  if valid_613363 != nil:
    section.add "OnlyAttached", valid_613363
  var valid_613364 = formData.getOrDefault("PolicyUsageFilter")
  valid_613364 = validateParameter(valid_613364, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_613364 != nil:
    section.add "PolicyUsageFilter", valid_613364
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613365: Call_PostListPolicies_613347; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613365.validator(path, query, header, formData, body)
  let scheme = call_613365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613365.url(scheme.get, call_613365.host, call_613365.base,
                         call_613365.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613365, url, valid)

proc call*(call_613366: Call_PostListPolicies_613347; Scope: string = "All";
          Marker: string = ""; PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListPolicies"; OnlyAttached: bool = false;
          Version: string = "2010-05-08";
          PolicyUsageFilter: string = "PermissionsPolicy"): Recallable =
  ## postListPolicies
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Scope: string
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   OnlyAttached: bool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   Version: string (required)
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  var query_613367 = newJObject()
  var formData_613368 = newJObject()
  add(formData_613368, "Scope", newJString(Scope))
  add(formData_613368, "Marker", newJString(Marker))
  add(formData_613368, "PathPrefix", newJString(PathPrefix))
  add(formData_613368, "MaxItems", newJInt(MaxItems))
  add(query_613367, "Action", newJString(Action))
  add(formData_613368, "OnlyAttached", newJBool(OnlyAttached))
  add(query_613367, "Version", newJString(Version))
  add(formData_613368, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  result = call_613366.call(nil, query_613367, nil, formData_613368, nil)

var postListPolicies* = Call_PostListPolicies_613347(name: "postListPolicies",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListPolicies", validator: validate_PostListPolicies_613348,
    base: "/", url: url_PostListPolicies_613349,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPolicies_613326 = ref object of OpenApiRestCall_609589
proc url_GetListPolicies_613328(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListPolicies_613327(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   OnlyAttached: JBool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Scope: JString
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   PathPrefix: JString
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613329 = query.getOrDefault("Marker")
  valid_613329 = validateParameter(valid_613329, JString, required = false,
                                 default = nil)
  if valid_613329 != nil:
    section.add "Marker", valid_613329
  var valid_613330 = query.getOrDefault("PolicyUsageFilter")
  valid_613330 = validateParameter(valid_613330, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_613330 != nil:
    section.add "PolicyUsageFilter", valid_613330
  var valid_613331 = query.getOrDefault("OnlyAttached")
  valid_613331 = validateParameter(valid_613331, JBool, required = false, default = nil)
  if valid_613331 != nil:
    section.add "OnlyAttached", valid_613331
  var valid_613332 = query.getOrDefault("MaxItems")
  valid_613332 = validateParameter(valid_613332, JInt, required = false, default = nil)
  if valid_613332 != nil:
    section.add "MaxItems", valid_613332
  var valid_613333 = query.getOrDefault("Scope")
  valid_613333 = validateParameter(valid_613333, JString, required = false,
                                 default = newJString("All"))
  if valid_613333 != nil:
    section.add "Scope", valid_613333
  var valid_613334 = query.getOrDefault("PathPrefix")
  valid_613334 = validateParameter(valid_613334, JString, required = false,
                                 default = nil)
  if valid_613334 != nil:
    section.add "PathPrefix", valid_613334
  var valid_613335 = query.getOrDefault("Action")
  valid_613335 = validateParameter(valid_613335, JString, required = true,
                                 default = newJString("ListPolicies"))
  if valid_613335 != nil:
    section.add "Action", valid_613335
  var valid_613336 = query.getOrDefault("Version")
  valid_613336 = validateParameter(valid_613336, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613336 != nil:
    section.add "Version", valid_613336
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613337 = header.getOrDefault("X-Amz-Signature")
  valid_613337 = validateParameter(valid_613337, JString, required = false,
                                 default = nil)
  if valid_613337 != nil:
    section.add "X-Amz-Signature", valid_613337
  var valid_613338 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613338 = validateParameter(valid_613338, JString, required = false,
                                 default = nil)
  if valid_613338 != nil:
    section.add "X-Amz-Content-Sha256", valid_613338
  var valid_613339 = header.getOrDefault("X-Amz-Date")
  valid_613339 = validateParameter(valid_613339, JString, required = false,
                                 default = nil)
  if valid_613339 != nil:
    section.add "X-Amz-Date", valid_613339
  var valid_613340 = header.getOrDefault("X-Amz-Credential")
  valid_613340 = validateParameter(valid_613340, JString, required = false,
                                 default = nil)
  if valid_613340 != nil:
    section.add "X-Amz-Credential", valid_613340
  var valid_613341 = header.getOrDefault("X-Amz-Security-Token")
  valid_613341 = validateParameter(valid_613341, JString, required = false,
                                 default = nil)
  if valid_613341 != nil:
    section.add "X-Amz-Security-Token", valid_613341
  var valid_613342 = header.getOrDefault("X-Amz-Algorithm")
  valid_613342 = validateParameter(valid_613342, JString, required = false,
                                 default = nil)
  if valid_613342 != nil:
    section.add "X-Amz-Algorithm", valid_613342
  var valid_613343 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613343 = validateParameter(valid_613343, JString, required = false,
                                 default = nil)
  if valid_613343 != nil:
    section.add "X-Amz-SignedHeaders", valid_613343
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613344: Call_GetListPolicies_613326; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613344.validator(path, query, header, formData, body)
  let scheme = call_613344.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613344.url(scheme.get, call_613344.host, call_613344.base,
                         call_613344.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613344, url, valid)

proc call*(call_613345: Call_GetListPolicies_613326; Marker: string = "";
          PolicyUsageFilter: string = "PermissionsPolicy";
          OnlyAttached: bool = false; MaxItems: int = 0; Scope: string = "All";
          PathPrefix: string = ""; Action: string = "ListPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListPolicies
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   OnlyAttached: bool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Scope: string
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   PathPrefix: string
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613346 = newJObject()
  add(query_613346, "Marker", newJString(Marker))
  add(query_613346, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_613346, "OnlyAttached", newJBool(OnlyAttached))
  add(query_613346, "MaxItems", newJInt(MaxItems))
  add(query_613346, "Scope", newJString(Scope))
  add(query_613346, "PathPrefix", newJString(PathPrefix))
  add(query_613346, "Action", newJString(Action))
  add(query_613346, "Version", newJString(Version))
  result = call_613345.call(nil, query_613346, nil, nil, nil)

var getListPolicies* = Call_GetListPolicies_613326(name: "getListPolicies",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListPolicies", validator: validate_GetListPolicies_613327,
    base: "/", url: url_GetListPolicies_613328, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPoliciesGrantingServiceAccess_613387 = ref object of OpenApiRestCall_609589
proc url_PostListPoliciesGrantingServiceAccess_613389(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListPoliciesGrantingServiceAccess_613388(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613390 = query.getOrDefault("Action")
  valid_613390 = validateParameter(valid_613390, JString, required = true, default = newJString(
      "ListPoliciesGrantingServiceAccess"))
  if valid_613390 != nil:
    section.add "Action", valid_613390
  var valid_613391 = query.getOrDefault("Version")
  valid_613391 = validateParameter(valid_613391, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613391 != nil:
    section.add "Version", valid_613391
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613392 = header.getOrDefault("X-Amz-Signature")
  valid_613392 = validateParameter(valid_613392, JString, required = false,
                                 default = nil)
  if valid_613392 != nil:
    section.add "X-Amz-Signature", valid_613392
  var valid_613393 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613393 = validateParameter(valid_613393, JString, required = false,
                                 default = nil)
  if valid_613393 != nil:
    section.add "X-Amz-Content-Sha256", valid_613393
  var valid_613394 = header.getOrDefault("X-Amz-Date")
  valid_613394 = validateParameter(valid_613394, JString, required = false,
                                 default = nil)
  if valid_613394 != nil:
    section.add "X-Amz-Date", valid_613394
  var valid_613395 = header.getOrDefault("X-Amz-Credential")
  valid_613395 = validateParameter(valid_613395, JString, required = false,
                                 default = nil)
  if valid_613395 != nil:
    section.add "X-Amz-Credential", valid_613395
  var valid_613396 = header.getOrDefault("X-Amz-Security-Token")
  valid_613396 = validateParameter(valid_613396, JString, required = false,
                                 default = nil)
  if valid_613396 != nil:
    section.add "X-Amz-Security-Token", valid_613396
  var valid_613397 = header.getOrDefault("X-Amz-Algorithm")
  valid_613397 = validateParameter(valid_613397, JString, required = false,
                                 default = nil)
  if valid_613397 != nil:
    section.add "X-Amz-Algorithm", valid_613397
  var valid_613398 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613398 = validateParameter(valid_613398, JString, required = false,
                                 default = nil)
  if valid_613398 != nil:
    section.add "X-Amz-SignedHeaders", valid_613398
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceNamespaces` field"
  var valid_613399 = formData.getOrDefault("ServiceNamespaces")
  valid_613399 = validateParameter(valid_613399, JArray, required = true, default = nil)
  if valid_613399 != nil:
    section.add "ServiceNamespaces", valid_613399
  var valid_613400 = formData.getOrDefault("Arn")
  valid_613400 = validateParameter(valid_613400, JString, required = true,
                                 default = nil)
  if valid_613400 != nil:
    section.add "Arn", valid_613400
  var valid_613401 = formData.getOrDefault("Marker")
  valid_613401 = validateParameter(valid_613401, JString, required = false,
                                 default = nil)
  if valid_613401 != nil:
    section.add "Marker", valid_613401
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613402: Call_PostListPoliciesGrantingServiceAccess_613387;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  let valid = call_613402.validator(path, query, header, formData, body)
  let scheme = call_613402.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613402.url(scheme.get, call_613402.host, call_613402.base,
                         call_613402.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613402, url, valid)

proc call*(call_613403: Call_PostListPoliciesGrantingServiceAccess_613387;
          ServiceNamespaces: JsonNode; Arn: string; Marker: string = "";
          Action: string = "ListPoliciesGrantingServiceAccess";
          Version: string = "2010-05-08"): Recallable =
  ## postListPoliciesGrantingServiceAccess
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613404 = newJObject()
  var formData_613405 = newJObject()
  if ServiceNamespaces != nil:
    formData_613405.add "ServiceNamespaces", ServiceNamespaces
  add(formData_613405, "Arn", newJString(Arn))
  add(formData_613405, "Marker", newJString(Marker))
  add(query_613404, "Action", newJString(Action))
  add(query_613404, "Version", newJString(Version))
  result = call_613403.call(nil, query_613404, nil, formData_613405, nil)

var postListPoliciesGrantingServiceAccess* = Call_PostListPoliciesGrantingServiceAccess_613387(
    name: "postListPoliciesGrantingServiceAccess", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=ListPoliciesGrantingServiceAccess",
    validator: validate_PostListPoliciesGrantingServiceAccess_613388, base: "/",
    url: url_PostListPoliciesGrantingServiceAccess_613389,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPoliciesGrantingServiceAccess_613369 = ref object of OpenApiRestCall_609589
proc url_GetListPoliciesGrantingServiceAccess_613371(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListPoliciesGrantingServiceAccess_613370(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  var valid_613372 = query.getOrDefault("Marker")
  valid_613372 = validateParameter(valid_613372, JString, required = false,
                                 default = nil)
  if valid_613372 != nil:
    section.add "Marker", valid_613372
  assert query != nil,
        "query argument is necessary due to required `ServiceNamespaces` field"
  var valid_613373 = query.getOrDefault("ServiceNamespaces")
  valid_613373 = validateParameter(valid_613373, JArray, required = true, default = nil)
  if valid_613373 != nil:
    section.add "ServiceNamespaces", valid_613373
  var valid_613374 = query.getOrDefault("Action")
  valid_613374 = validateParameter(valid_613374, JString, required = true, default = newJString(
      "ListPoliciesGrantingServiceAccess"))
  if valid_613374 != nil:
    section.add "Action", valid_613374
  var valid_613375 = query.getOrDefault("Version")
  valid_613375 = validateParameter(valid_613375, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613375 != nil:
    section.add "Version", valid_613375
  var valid_613376 = query.getOrDefault("Arn")
  valid_613376 = validateParameter(valid_613376, JString, required = true,
                                 default = nil)
  if valid_613376 != nil:
    section.add "Arn", valid_613376
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613377 = header.getOrDefault("X-Amz-Signature")
  valid_613377 = validateParameter(valid_613377, JString, required = false,
                                 default = nil)
  if valid_613377 != nil:
    section.add "X-Amz-Signature", valid_613377
  var valid_613378 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613378 = validateParameter(valid_613378, JString, required = false,
                                 default = nil)
  if valid_613378 != nil:
    section.add "X-Amz-Content-Sha256", valid_613378
  var valid_613379 = header.getOrDefault("X-Amz-Date")
  valid_613379 = validateParameter(valid_613379, JString, required = false,
                                 default = nil)
  if valid_613379 != nil:
    section.add "X-Amz-Date", valid_613379
  var valid_613380 = header.getOrDefault("X-Amz-Credential")
  valid_613380 = validateParameter(valid_613380, JString, required = false,
                                 default = nil)
  if valid_613380 != nil:
    section.add "X-Amz-Credential", valid_613380
  var valid_613381 = header.getOrDefault("X-Amz-Security-Token")
  valid_613381 = validateParameter(valid_613381, JString, required = false,
                                 default = nil)
  if valid_613381 != nil:
    section.add "X-Amz-Security-Token", valid_613381
  var valid_613382 = header.getOrDefault("X-Amz-Algorithm")
  valid_613382 = validateParameter(valid_613382, JString, required = false,
                                 default = nil)
  if valid_613382 != nil:
    section.add "X-Amz-Algorithm", valid_613382
  var valid_613383 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613383 = validateParameter(valid_613383, JString, required = false,
                                 default = nil)
  if valid_613383 != nil:
    section.add "X-Amz-SignedHeaders", valid_613383
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613384: Call_GetListPoliciesGrantingServiceAccess_613369;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  let valid = call_613384.validator(path, query, header, formData, body)
  let scheme = call_613384.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613384.url(scheme.get, call_613384.host, call_613384.base,
                         call_613384.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613384, url, valid)

proc call*(call_613385: Call_GetListPoliciesGrantingServiceAccess_613369;
          ServiceNamespaces: JsonNode; Arn: string; Marker: string = "";
          Action: string = "ListPoliciesGrantingServiceAccess";
          Version: string = "2010-05-08"): Recallable =
  ## getListPoliciesGrantingServiceAccess
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_613386 = newJObject()
  add(query_613386, "Marker", newJString(Marker))
  if ServiceNamespaces != nil:
    query_613386.add "ServiceNamespaces", ServiceNamespaces
  add(query_613386, "Action", newJString(Action))
  add(query_613386, "Version", newJString(Version))
  add(query_613386, "Arn", newJString(Arn))
  result = call_613385.call(nil, query_613386, nil, nil, nil)

var getListPoliciesGrantingServiceAccess* = Call_GetListPoliciesGrantingServiceAccess_613369(
    name: "getListPoliciesGrantingServiceAccess", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=ListPoliciesGrantingServiceAccess",
    validator: validate_GetListPoliciesGrantingServiceAccess_613370, base: "/",
    url: url_GetListPoliciesGrantingServiceAccess_613371,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPolicyVersions_613424 = ref object of OpenApiRestCall_609589
proc url_PostListPolicyVersions_613426(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListPolicyVersions_613425(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613427 = query.getOrDefault("Action")
  valid_613427 = validateParameter(valid_613427, JString, required = true,
                                 default = newJString("ListPolicyVersions"))
  if valid_613427 != nil:
    section.add "Action", valid_613427
  var valid_613428 = query.getOrDefault("Version")
  valid_613428 = validateParameter(valid_613428, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613428 != nil:
    section.add "Version", valid_613428
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613429 = header.getOrDefault("X-Amz-Signature")
  valid_613429 = validateParameter(valid_613429, JString, required = false,
                                 default = nil)
  if valid_613429 != nil:
    section.add "X-Amz-Signature", valid_613429
  var valid_613430 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613430 = validateParameter(valid_613430, JString, required = false,
                                 default = nil)
  if valid_613430 != nil:
    section.add "X-Amz-Content-Sha256", valid_613430
  var valid_613431 = header.getOrDefault("X-Amz-Date")
  valid_613431 = validateParameter(valid_613431, JString, required = false,
                                 default = nil)
  if valid_613431 != nil:
    section.add "X-Amz-Date", valid_613431
  var valid_613432 = header.getOrDefault("X-Amz-Credential")
  valid_613432 = validateParameter(valid_613432, JString, required = false,
                                 default = nil)
  if valid_613432 != nil:
    section.add "X-Amz-Credential", valid_613432
  var valid_613433 = header.getOrDefault("X-Amz-Security-Token")
  valid_613433 = validateParameter(valid_613433, JString, required = false,
                                 default = nil)
  if valid_613433 != nil:
    section.add "X-Amz-Security-Token", valid_613433
  var valid_613434 = header.getOrDefault("X-Amz-Algorithm")
  valid_613434 = validateParameter(valid_613434, JString, required = false,
                                 default = nil)
  if valid_613434 != nil:
    section.add "X-Amz-Algorithm", valid_613434
  var valid_613435 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613435 = validateParameter(valid_613435, JString, required = false,
                                 default = nil)
  if valid_613435 != nil:
    section.add "X-Amz-SignedHeaders", valid_613435
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_613436 = formData.getOrDefault("Marker")
  valid_613436 = validateParameter(valid_613436, JString, required = false,
                                 default = nil)
  if valid_613436 != nil:
    section.add "Marker", valid_613436
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_613437 = formData.getOrDefault("PolicyArn")
  valid_613437 = validateParameter(valid_613437, JString, required = true,
                                 default = nil)
  if valid_613437 != nil:
    section.add "PolicyArn", valid_613437
  var valid_613438 = formData.getOrDefault("MaxItems")
  valid_613438 = validateParameter(valid_613438, JInt, required = false, default = nil)
  if valid_613438 != nil:
    section.add "MaxItems", valid_613438
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613439: Call_PostListPolicyVersions_613424; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613439.validator(path, query, header, formData, body)
  let scheme = call_613439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613439.url(scheme.get, call_613439.host, call_613439.base,
                         call_613439.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613439, url, valid)

proc call*(call_613440: Call_PostListPolicyVersions_613424; PolicyArn: string;
          Marker: string = ""; Action: string = "ListPolicyVersions"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListPolicyVersions
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_613441 = newJObject()
  var formData_613442 = newJObject()
  add(formData_613442, "Marker", newJString(Marker))
  add(formData_613442, "PolicyArn", newJString(PolicyArn))
  add(query_613441, "Action", newJString(Action))
  add(formData_613442, "MaxItems", newJInt(MaxItems))
  add(query_613441, "Version", newJString(Version))
  result = call_613440.call(nil, query_613441, nil, formData_613442, nil)

var postListPolicyVersions* = Call_PostListPolicyVersions_613424(
    name: "postListPolicyVersions", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListPolicyVersions",
    validator: validate_PostListPolicyVersions_613425, base: "/",
    url: url_PostListPolicyVersions_613426, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPolicyVersions_613406 = ref object of OpenApiRestCall_609589
proc url_GetListPolicyVersions_613408(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListPolicyVersions_613407(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613409 = query.getOrDefault("Marker")
  valid_613409 = validateParameter(valid_613409, JString, required = false,
                                 default = nil)
  if valid_613409 != nil:
    section.add "Marker", valid_613409
  var valid_613410 = query.getOrDefault("MaxItems")
  valid_613410 = validateParameter(valid_613410, JInt, required = false, default = nil)
  if valid_613410 != nil:
    section.add "MaxItems", valid_613410
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_613411 = query.getOrDefault("PolicyArn")
  valid_613411 = validateParameter(valid_613411, JString, required = true,
                                 default = nil)
  if valid_613411 != nil:
    section.add "PolicyArn", valid_613411
  var valid_613412 = query.getOrDefault("Action")
  valid_613412 = validateParameter(valid_613412, JString, required = true,
                                 default = newJString("ListPolicyVersions"))
  if valid_613412 != nil:
    section.add "Action", valid_613412
  var valid_613413 = query.getOrDefault("Version")
  valid_613413 = validateParameter(valid_613413, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613413 != nil:
    section.add "Version", valid_613413
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613414 = header.getOrDefault("X-Amz-Signature")
  valid_613414 = validateParameter(valid_613414, JString, required = false,
                                 default = nil)
  if valid_613414 != nil:
    section.add "X-Amz-Signature", valid_613414
  var valid_613415 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613415 = validateParameter(valid_613415, JString, required = false,
                                 default = nil)
  if valid_613415 != nil:
    section.add "X-Amz-Content-Sha256", valid_613415
  var valid_613416 = header.getOrDefault("X-Amz-Date")
  valid_613416 = validateParameter(valid_613416, JString, required = false,
                                 default = nil)
  if valid_613416 != nil:
    section.add "X-Amz-Date", valid_613416
  var valid_613417 = header.getOrDefault("X-Amz-Credential")
  valid_613417 = validateParameter(valid_613417, JString, required = false,
                                 default = nil)
  if valid_613417 != nil:
    section.add "X-Amz-Credential", valid_613417
  var valid_613418 = header.getOrDefault("X-Amz-Security-Token")
  valid_613418 = validateParameter(valid_613418, JString, required = false,
                                 default = nil)
  if valid_613418 != nil:
    section.add "X-Amz-Security-Token", valid_613418
  var valid_613419 = header.getOrDefault("X-Amz-Algorithm")
  valid_613419 = validateParameter(valid_613419, JString, required = false,
                                 default = nil)
  if valid_613419 != nil:
    section.add "X-Amz-Algorithm", valid_613419
  var valid_613420 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613420 = validateParameter(valid_613420, JString, required = false,
                                 default = nil)
  if valid_613420 != nil:
    section.add "X-Amz-SignedHeaders", valid_613420
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613421: Call_GetListPolicyVersions_613406; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613421.validator(path, query, header, formData, body)
  let scheme = call_613421.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613421.url(scheme.get, call_613421.host, call_613421.base,
                         call_613421.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613421, url, valid)

proc call*(call_613422: Call_GetListPolicyVersions_613406; PolicyArn: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListPolicyVersions";
          Version: string = "2010-05-08"): Recallable =
  ## getListPolicyVersions
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613423 = newJObject()
  add(query_613423, "Marker", newJString(Marker))
  add(query_613423, "MaxItems", newJInt(MaxItems))
  add(query_613423, "PolicyArn", newJString(PolicyArn))
  add(query_613423, "Action", newJString(Action))
  add(query_613423, "Version", newJString(Version))
  result = call_613422.call(nil, query_613423, nil, nil, nil)

var getListPolicyVersions* = Call_GetListPolicyVersions_613406(
    name: "getListPolicyVersions", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListPolicyVersions",
    validator: validate_GetListPolicyVersions_613407, base: "/",
    url: url_GetListPolicyVersions_613408, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRolePolicies_613461 = ref object of OpenApiRestCall_609589
proc url_PostListRolePolicies_613463(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListRolePolicies_613462(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613464 = query.getOrDefault("Action")
  valid_613464 = validateParameter(valid_613464, JString, required = true,
                                 default = newJString("ListRolePolicies"))
  if valid_613464 != nil:
    section.add "Action", valid_613464
  var valid_613465 = query.getOrDefault("Version")
  valid_613465 = validateParameter(valid_613465, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613465 != nil:
    section.add "Version", valid_613465
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613466 = header.getOrDefault("X-Amz-Signature")
  valid_613466 = validateParameter(valid_613466, JString, required = false,
                                 default = nil)
  if valid_613466 != nil:
    section.add "X-Amz-Signature", valid_613466
  var valid_613467 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613467 = validateParameter(valid_613467, JString, required = false,
                                 default = nil)
  if valid_613467 != nil:
    section.add "X-Amz-Content-Sha256", valid_613467
  var valid_613468 = header.getOrDefault("X-Amz-Date")
  valid_613468 = validateParameter(valid_613468, JString, required = false,
                                 default = nil)
  if valid_613468 != nil:
    section.add "X-Amz-Date", valid_613468
  var valid_613469 = header.getOrDefault("X-Amz-Credential")
  valid_613469 = validateParameter(valid_613469, JString, required = false,
                                 default = nil)
  if valid_613469 != nil:
    section.add "X-Amz-Credential", valid_613469
  var valid_613470 = header.getOrDefault("X-Amz-Security-Token")
  valid_613470 = validateParameter(valid_613470, JString, required = false,
                                 default = nil)
  if valid_613470 != nil:
    section.add "X-Amz-Security-Token", valid_613470
  var valid_613471 = header.getOrDefault("X-Amz-Algorithm")
  valid_613471 = validateParameter(valid_613471, JString, required = false,
                                 default = nil)
  if valid_613471 != nil:
    section.add "X-Amz-Algorithm", valid_613471
  var valid_613472 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613472 = validateParameter(valid_613472, JString, required = false,
                                 default = nil)
  if valid_613472 != nil:
    section.add "X-Amz-SignedHeaders", valid_613472
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_613473 = formData.getOrDefault("RoleName")
  valid_613473 = validateParameter(valid_613473, JString, required = true,
                                 default = nil)
  if valid_613473 != nil:
    section.add "RoleName", valid_613473
  var valid_613474 = formData.getOrDefault("Marker")
  valid_613474 = validateParameter(valid_613474, JString, required = false,
                                 default = nil)
  if valid_613474 != nil:
    section.add "Marker", valid_613474
  var valid_613475 = formData.getOrDefault("MaxItems")
  valid_613475 = validateParameter(valid_613475, JInt, required = false, default = nil)
  if valid_613475 != nil:
    section.add "MaxItems", valid_613475
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613476: Call_PostListRolePolicies_613461; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  let valid = call_613476.validator(path, query, header, formData, body)
  let scheme = call_613476.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613476.url(scheme.get, call_613476.host, call_613476.base,
                         call_613476.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613476, url, valid)

proc call*(call_613477: Call_PostListRolePolicies_613461; RoleName: string;
          Marker: string = ""; Action: string = "ListRolePolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRolePolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_613478 = newJObject()
  var formData_613479 = newJObject()
  add(formData_613479, "RoleName", newJString(RoleName))
  add(formData_613479, "Marker", newJString(Marker))
  add(query_613478, "Action", newJString(Action))
  add(formData_613479, "MaxItems", newJInt(MaxItems))
  add(query_613478, "Version", newJString(Version))
  result = call_613477.call(nil, query_613478, nil, formData_613479, nil)

var postListRolePolicies* = Call_PostListRolePolicies_613461(
    name: "postListRolePolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListRolePolicies",
    validator: validate_PostListRolePolicies_613462, base: "/",
    url: url_PostListRolePolicies_613463, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRolePolicies_613443 = ref object of OpenApiRestCall_609589
proc url_GetListRolePolicies_613445(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListRolePolicies_613444(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613446 = query.getOrDefault("Marker")
  valid_613446 = validateParameter(valid_613446, JString, required = false,
                                 default = nil)
  if valid_613446 != nil:
    section.add "Marker", valid_613446
  var valid_613447 = query.getOrDefault("MaxItems")
  valid_613447 = validateParameter(valid_613447, JInt, required = false, default = nil)
  if valid_613447 != nil:
    section.add "MaxItems", valid_613447
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_613448 = query.getOrDefault("RoleName")
  valid_613448 = validateParameter(valid_613448, JString, required = true,
                                 default = nil)
  if valid_613448 != nil:
    section.add "RoleName", valid_613448
  var valid_613449 = query.getOrDefault("Action")
  valid_613449 = validateParameter(valid_613449, JString, required = true,
                                 default = newJString("ListRolePolicies"))
  if valid_613449 != nil:
    section.add "Action", valid_613449
  var valid_613450 = query.getOrDefault("Version")
  valid_613450 = validateParameter(valid_613450, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613450 != nil:
    section.add "Version", valid_613450
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613451 = header.getOrDefault("X-Amz-Signature")
  valid_613451 = validateParameter(valid_613451, JString, required = false,
                                 default = nil)
  if valid_613451 != nil:
    section.add "X-Amz-Signature", valid_613451
  var valid_613452 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613452 = validateParameter(valid_613452, JString, required = false,
                                 default = nil)
  if valid_613452 != nil:
    section.add "X-Amz-Content-Sha256", valid_613452
  var valid_613453 = header.getOrDefault("X-Amz-Date")
  valid_613453 = validateParameter(valid_613453, JString, required = false,
                                 default = nil)
  if valid_613453 != nil:
    section.add "X-Amz-Date", valid_613453
  var valid_613454 = header.getOrDefault("X-Amz-Credential")
  valid_613454 = validateParameter(valid_613454, JString, required = false,
                                 default = nil)
  if valid_613454 != nil:
    section.add "X-Amz-Credential", valid_613454
  var valid_613455 = header.getOrDefault("X-Amz-Security-Token")
  valid_613455 = validateParameter(valid_613455, JString, required = false,
                                 default = nil)
  if valid_613455 != nil:
    section.add "X-Amz-Security-Token", valid_613455
  var valid_613456 = header.getOrDefault("X-Amz-Algorithm")
  valid_613456 = validateParameter(valid_613456, JString, required = false,
                                 default = nil)
  if valid_613456 != nil:
    section.add "X-Amz-Algorithm", valid_613456
  var valid_613457 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613457 = validateParameter(valid_613457, JString, required = false,
                                 default = nil)
  if valid_613457 != nil:
    section.add "X-Amz-SignedHeaders", valid_613457
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613458: Call_GetListRolePolicies_613443; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  let valid = call_613458.validator(path, query, header, formData, body)
  let scheme = call_613458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613458.url(scheme.get, call_613458.host, call_613458.base,
                         call_613458.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613458, url, valid)

proc call*(call_613459: Call_GetListRolePolicies_613443; RoleName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListRolePolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListRolePolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613460 = newJObject()
  add(query_613460, "Marker", newJString(Marker))
  add(query_613460, "MaxItems", newJInt(MaxItems))
  add(query_613460, "RoleName", newJString(RoleName))
  add(query_613460, "Action", newJString(Action))
  add(query_613460, "Version", newJString(Version))
  result = call_613459.call(nil, query_613460, nil, nil, nil)

var getListRolePolicies* = Call_GetListRolePolicies_613443(
    name: "getListRolePolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListRolePolicies",
    validator: validate_GetListRolePolicies_613444, base: "/",
    url: url_GetListRolePolicies_613445, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRoleTags_613498 = ref object of OpenApiRestCall_609589
proc url_PostListRoleTags_613500(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListRoleTags_613499(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613501 = query.getOrDefault("Action")
  valid_613501 = validateParameter(valid_613501, JString, required = true,
                                 default = newJString("ListRoleTags"))
  if valid_613501 != nil:
    section.add "Action", valid_613501
  var valid_613502 = query.getOrDefault("Version")
  valid_613502 = validateParameter(valid_613502, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613502 != nil:
    section.add "Version", valid_613502
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613503 = header.getOrDefault("X-Amz-Signature")
  valid_613503 = validateParameter(valid_613503, JString, required = false,
                                 default = nil)
  if valid_613503 != nil:
    section.add "X-Amz-Signature", valid_613503
  var valid_613504 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613504 = validateParameter(valid_613504, JString, required = false,
                                 default = nil)
  if valid_613504 != nil:
    section.add "X-Amz-Content-Sha256", valid_613504
  var valid_613505 = header.getOrDefault("X-Amz-Date")
  valid_613505 = validateParameter(valid_613505, JString, required = false,
                                 default = nil)
  if valid_613505 != nil:
    section.add "X-Amz-Date", valid_613505
  var valid_613506 = header.getOrDefault("X-Amz-Credential")
  valid_613506 = validateParameter(valid_613506, JString, required = false,
                                 default = nil)
  if valid_613506 != nil:
    section.add "X-Amz-Credential", valid_613506
  var valid_613507 = header.getOrDefault("X-Amz-Security-Token")
  valid_613507 = validateParameter(valid_613507, JString, required = false,
                                 default = nil)
  if valid_613507 != nil:
    section.add "X-Amz-Security-Token", valid_613507
  var valid_613508 = header.getOrDefault("X-Amz-Algorithm")
  valid_613508 = validateParameter(valid_613508, JString, required = false,
                                 default = nil)
  if valid_613508 != nil:
    section.add "X-Amz-Algorithm", valid_613508
  var valid_613509 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613509 = validateParameter(valid_613509, JString, required = false,
                                 default = nil)
  if valid_613509 != nil:
    section.add "X-Amz-SignedHeaders", valid_613509
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_613510 = formData.getOrDefault("RoleName")
  valid_613510 = validateParameter(valid_613510, JString, required = true,
                                 default = nil)
  if valid_613510 != nil:
    section.add "RoleName", valid_613510
  var valid_613511 = formData.getOrDefault("Marker")
  valid_613511 = validateParameter(valid_613511, JString, required = false,
                                 default = nil)
  if valid_613511 != nil:
    section.add "Marker", valid_613511
  var valid_613512 = formData.getOrDefault("MaxItems")
  valid_613512 = validateParameter(valid_613512, JInt, required = false, default = nil)
  if valid_613512 != nil:
    section.add "MaxItems", valid_613512
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613513: Call_PostListRoleTags_613498; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_613513.validator(path, query, header, formData, body)
  let scheme = call_613513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613513.url(scheme.get, call_613513.host, call_613513.base,
                         call_613513.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613513, url, valid)

proc call*(call_613514: Call_PostListRoleTags_613498; RoleName: string;
          Marker: string = ""; Action: string = "ListRoleTags"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRoleTags
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_613515 = newJObject()
  var formData_613516 = newJObject()
  add(formData_613516, "RoleName", newJString(RoleName))
  add(formData_613516, "Marker", newJString(Marker))
  add(query_613515, "Action", newJString(Action))
  add(formData_613516, "MaxItems", newJInt(MaxItems))
  add(query_613515, "Version", newJString(Version))
  result = call_613514.call(nil, query_613515, nil, formData_613516, nil)

var postListRoleTags* = Call_PostListRoleTags_613498(name: "postListRoleTags",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListRoleTags", validator: validate_PostListRoleTags_613499,
    base: "/", url: url_PostListRoleTags_613500,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRoleTags_613480 = ref object of OpenApiRestCall_609589
proc url_GetListRoleTags_613482(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListRoleTags_613481(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613483 = query.getOrDefault("Marker")
  valid_613483 = validateParameter(valid_613483, JString, required = false,
                                 default = nil)
  if valid_613483 != nil:
    section.add "Marker", valid_613483
  var valid_613484 = query.getOrDefault("MaxItems")
  valid_613484 = validateParameter(valid_613484, JInt, required = false, default = nil)
  if valid_613484 != nil:
    section.add "MaxItems", valid_613484
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_613485 = query.getOrDefault("RoleName")
  valid_613485 = validateParameter(valid_613485, JString, required = true,
                                 default = nil)
  if valid_613485 != nil:
    section.add "RoleName", valid_613485
  var valid_613486 = query.getOrDefault("Action")
  valid_613486 = validateParameter(valid_613486, JString, required = true,
                                 default = newJString("ListRoleTags"))
  if valid_613486 != nil:
    section.add "Action", valid_613486
  var valid_613487 = query.getOrDefault("Version")
  valid_613487 = validateParameter(valid_613487, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613487 != nil:
    section.add "Version", valid_613487
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613488 = header.getOrDefault("X-Amz-Signature")
  valid_613488 = validateParameter(valid_613488, JString, required = false,
                                 default = nil)
  if valid_613488 != nil:
    section.add "X-Amz-Signature", valid_613488
  var valid_613489 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613489 = validateParameter(valid_613489, JString, required = false,
                                 default = nil)
  if valid_613489 != nil:
    section.add "X-Amz-Content-Sha256", valid_613489
  var valid_613490 = header.getOrDefault("X-Amz-Date")
  valid_613490 = validateParameter(valid_613490, JString, required = false,
                                 default = nil)
  if valid_613490 != nil:
    section.add "X-Amz-Date", valid_613490
  var valid_613491 = header.getOrDefault("X-Amz-Credential")
  valid_613491 = validateParameter(valid_613491, JString, required = false,
                                 default = nil)
  if valid_613491 != nil:
    section.add "X-Amz-Credential", valid_613491
  var valid_613492 = header.getOrDefault("X-Amz-Security-Token")
  valid_613492 = validateParameter(valid_613492, JString, required = false,
                                 default = nil)
  if valid_613492 != nil:
    section.add "X-Amz-Security-Token", valid_613492
  var valid_613493 = header.getOrDefault("X-Amz-Algorithm")
  valid_613493 = validateParameter(valid_613493, JString, required = false,
                                 default = nil)
  if valid_613493 != nil:
    section.add "X-Amz-Algorithm", valid_613493
  var valid_613494 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613494 = validateParameter(valid_613494, JString, required = false,
                                 default = nil)
  if valid_613494 != nil:
    section.add "X-Amz-SignedHeaders", valid_613494
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613495: Call_GetListRoleTags_613480; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_613495.validator(path, query, header, formData, body)
  let scheme = call_613495.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613495.url(scheme.get, call_613495.host, call_613495.base,
                         call_613495.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613495, url, valid)

proc call*(call_613496: Call_GetListRoleTags_613480; RoleName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListRoleTags";
          Version: string = "2010-05-08"): Recallable =
  ## getListRoleTags
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613497 = newJObject()
  add(query_613497, "Marker", newJString(Marker))
  add(query_613497, "MaxItems", newJInt(MaxItems))
  add(query_613497, "RoleName", newJString(RoleName))
  add(query_613497, "Action", newJString(Action))
  add(query_613497, "Version", newJString(Version))
  result = call_613496.call(nil, query_613497, nil, nil, nil)

var getListRoleTags* = Call_GetListRoleTags_613480(name: "getListRoleTags",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListRoleTags", validator: validate_GetListRoleTags_613481,
    base: "/", url: url_GetListRoleTags_613482, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRoles_613535 = ref object of OpenApiRestCall_609589
proc url_PostListRoles_613537(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListRoles_613536(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613538 = query.getOrDefault("Action")
  valid_613538 = validateParameter(valid_613538, JString, required = true,
                                 default = newJString("ListRoles"))
  if valid_613538 != nil:
    section.add "Action", valid_613538
  var valid_613539 = query.getOrDefault("Version")
  valid_613539 = validateParameter(valid_613539, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613539 != nil:
    section.add "Version", valid_613539
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613540 = header.getOrDefault("X-Amz-Signature")
  valid_613540 = validateParameter(valid_613540, JString, required = false,
                                 default = nil)
  if valid_613540 != nil:
    section.add "X-Amz-Signature", valid_613540
  var valid_613541 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613541 = validateParameter(valid_613541, JString, required = false,
                                 default = nil)
  if valid_613541 != nil:
    section.add "X-Amz-Content-Sha256", valid_613541
  var valid_613542 = header.getOrDefault("X-Amz-Date")
  valid_613542 = validateParameter(valid_613542, JString, required = false,
                                 default = nil)
  if valid_613542 != nil:
    section.add "X-Amz-Date", valid_613542
  var valid_613543 = header.getOrDefault("X-Amz-Credential")
  valid_613543 = validateParameter(valid_613543, JString, required = false,
                                 default = nil)
  if valid_613543 != nil:
    section.add "X-Amz-Credential", valid_613543
  var valid_613544 = header.getOrDefault("X-Amz-Security-Token")
  valid_613544 = validateParameter(valid_613544, JString, required = false,
                                 default = nil)
  if valid_613544 != nil:
    section.add "X-Amz-Security-Token", valid_613544
  var valid_613545 = header.getOrDefault("X-Amz-Algorithm")
  valid_613545 = validateParameter(valid_613545, JString, required = false,
                                 default = nil)
  if valid_613545 != nil:
    section.add "X-Amz-Algorithm", valid_613545
  var valid_613546 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613546 = validateParameter(valid_613546, JString, required = false,
                                 default = nil)
  if valid_613546 != nil:
    section.add "X-Amz-SignedHeaders", valid_613546
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_613547 = formData.getOrDefault("Marker")
  valid_613547 = validateParameter(valid_613547, JString, required = false,
                                 default = nil)
  if valid_613547 != nil:
    section.add "Marker", valid_613547
  var valid_613548 = formData.getOrDefault("PathPrefix")
  valid_613548 = validateParameter(valid_613548, JString, required = false,
                                 default = nil)
  if valid_613548 != nil:
    section.add "PathPrefix", valid_613548
  var valid_613549 = formData.getOrDefault("MaxItems")
  valid_613549 = validateParameter(valid_613549, JInt, required = false, default = nil)
  if valid_613549 != nil:
    section.add "MaxItems", valid_613549
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613550: Call_PostListRoles_613535; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613550.validator(path, query, header, formData, body)
  let scheme = call_613550.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613550.url(scheme.get, call_613550.host, call_613550.base,
                         call_613550.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613550, url, valid)

proc call*(call_613551: Call_PostListRoles_613535; Marker: string = "";
          PathPrefix: string = ""; MaxItems: int = 0; Action: string = "ListRoles";
          Version: string = "2010-05-08"): Recallable =
  ## postListRoles
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613552 = newJObject()
  var formData_613553 = newJObject()
  add(formData_613553, "Marker", newJString(Marker))
  add(formData_613553, "PathPrefix", newJString(PathPrefix))
  add(formData_613553, "MaxItems", newJInt(MaxItems))
  add(query_613552, "Action", newJString(Action))
  add(query_613552, "Version", newJString(Version))
  result = call_613551.call(nil, query_613552, nil, formData_613553, nil)

var postListRoles* = Call_PostListRoles_613535(name: "postListRoles",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListRoles", validator: validate_PostListRoles_613536,
    base: "/", url: url_PostListRoles_613537, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRoles_613517 = ref object of OpenApiRestCall_609589
proc url_GetListRoles_613519(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListRoles_613518(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613520 = query.getOrDefault("Marker")
  valid_613520 = validateParameter(valid_613520, JString, required = false,
                                 default = nil)
  if valid_613520 != nil:
    section.add "Marker", valid_613520
  var valid_613521 = query.getOrDefault("MaxItems")
  valid_613521 = validateParameter(valid_613521, JInt, required = false, default = nil)
  if valid_613521 != nil:
    section.add "MaxItems", valid_613521
  var valid_613522 = query.getOrDefault("PathPrefix")
  valid_613522 = validateParameter(valid_613522, JString, required = false,
                                 default = nil)
  if valid_613522 != nil:
    section.add "PathPrefix", valid_613522
  var valid_613523 = query.getOrDefault("Action")
  valid_613523 = validateParameter(valid_613523, JString, required = true,
                                 default = newJString("ListRoles"))
  if valid_613523 != nil:
    section.add "Action", valid_613523
  var valid_613524 = query.getOrDefault("Version")
  valid_613524 = validateParameter(valid_613524, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613524 != nil:
    section.add "Version", valid_613524
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613525 = header.getOrDefault("X-Amz-Signature")
  valid_613525 = validateParameter(valid_613525, JString, required = false,
                                 default = nil)
  if valid_613525 != nil:
    section.add "X-Amz-Signature", valid_613525
  var valid_613526 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613526 = validateParameter(valid_613526, JString, required = false,
                                 default = nil)
  if valid_613526 != nil:
    section.add "X-Amz-Content-Sha256", valid_613526
  var valid_613527 = header.getOrDefault("X-Amz-Date")
  valid_613527 = validateParameter(valid_613527, JString, required = false,
                                 default = nil)
  if valid_613527 != nil:
    section.add "X-Amz-Date", valid_613527
  var valid_613528 = header.getOrDefault("X-Amz-Credential")
  valid_613528 = validateParameter(valid_613528, JString, required = false,
                                 default = nil)
  if valid_613528 != nil:
    section.add "X-Amz-Credential", valid_613528
  var valid_613529 = header.getOrDefault("X-Amz-Security-Token")
  valid_613529 = validateParameter(valid_613529, JString, required = false,
                                 default = nil)
  if valid_613529 != nil:
    section.add "X-Amz-Security-Token", valid_613529
  var valid_613530 = header.getOrDefault("X-Amz-Algorithm")
  valid_613530 = validateParameter(valid_613530, JString, required = false,
                                 default = nil)
  if valid_613530 != nil:
    section.add "X-Amz-Algorithm", valid_613530
  var valid_613531 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613531 = validateParameter(valid_613531, JString, required = false,
                                 default = nil)
  if valid_613531 != nil:
    section.add "X-Amz-SignedHeaders", valid_613531
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613532: Call_GetListRoles_613517; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613532.validator(path, query, header, formData, body)
  let scheme = call_613532.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613532.url(scheme.get, call_613532.host, call_613532.base,
                         call_613532.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613532, url, valid)

proc call*(call_613533: Call_GetListRoles_613517; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = ""; Action: string = "ListRoles";
          Version: string = "2010-05-08"): Recallable =
  ## getListRoles
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613534 = newJObject()
  add(query_613534, "Marker", newJString(Marker))
  add(query_613534, "MaxItems", newJInt(MaxItems))
  add(query_613534, "PathPrefix", newJString(PathPrefix))
  add(query_613534, "Action", newJString(Action))
  add(query_613534, "Version", newJString(Version))
  result = call_613533.call(nil, query_613534, nil, nil, nil)

var getListRoles* = Call_GetListRoles_613517(name: "getListRoles",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListRoles", validator: validate_GetListRoles_613518, base: "/",
    url: url_GetListRoles_613519, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSAMLProviders_613569 = ref object of OpenApiRestCall_609589
proc url_PostListSAMLProviders_613571(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListSAMLProviders_613570(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613572 = query.getOrDefault("Action")
  valid_613572 = validateParameter(valid_613572, JString, required = true,
                                 default = newJString("ListSAMLProviders"))
  if valid_613572 != nil:
    section.add "Action", valid_613572
  var valid_613573 = query.getOrDefault("Version")
  valid_613573 = validateParameter(valid_613573, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613573 != nil:
    section.add "Version", valid_613573
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613574 = header.getOrDefault("X-Amz-Signature")
  valid_613574 = validateParameter(valid_613574, JString, required = false,
                                 default = nil)
  if valid_613574 != nil:
    section.add "X-Amz-Signature", valid_613574
  var valid_613575 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613575 = validateParameter(valid_613575, JString, required = false,
                                 default = nil)
  if valid_613575 != nil:
    section.add "X-Amz-Content-Sha256", valid_613575
  var valid_613576 = header.getOrDefault("X-Amz-Date")
  valid_613576 = validateParameter(valid_613576, JString, required = false,
                                 default = nil)
  if valid_613576 != nil:
    section.add "X-Amz-Date", valid_613576
  var valid_613577 = header.getOrDefault("X-Amz-Credential")
  valid_613577 = validateParameter(valid_613577, JString, required = false,
                                 default = nil)
  if valid_613577 != nil:
    section.add "X-Amz-Credential", valid_613577
  var valid_613578 = header.getOrDefault("X-Amz-Security-Token")
  valid_613578 = validateParameter(valid_613578, JString, required = false,
                                 default = nil)
  if valid_613578 != nil:
    section.add "X-Amz-Security-Token", valid_613578
  var valid_613579 = header.getOrDefault("X-Amz-Algorithm")
  valid_613579 = validateParameter(valid_613579, JString, required = false,
                                 default = nil)
  if valid_613579 != nil:
    section.add "X-Amz-Algorithm", valid_613579
  var valid_613580 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613580 = validateParameter(valid_613580, JString, required = false,
                                 default = nil)
  if valid_613580 != nil:
    section.add "X-Amz-SignedHeaders", valid_613580
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613581: Call_PostListSAMLProviders_613569; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_613581.validator(path, query, header, formData, body)
  let scheme = call_613581.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613581.url(scheme.get, call_613581.host, call_613581.base,
                         call_613581.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613581, url, valid)

proc call*(call_613582: Call_PostListSAMLProviders_613569;
          Action: string = "ListSAMLProviders"; Version: string = "2010-05-08"): Recallable =
  ## postListSAMLProviders
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613583 = newJObject()
  add(query_613583, "Action", newJString(Action))
  add(query_613583, "Version", newJString(Version))
  result = call_613582.call(nil, query_613583, nil, nil, nil)

var postListSAMLProviders* = Call_PostListSAMLProviders_613569(
    name: "postListSAMLProviders", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSAMLProviders",
    validator: validate_PostListSAMLProviders_613570, base: "/",
    url: url_PostListSAMLProviders_613571, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSAMLProviders_613554 = ref object of OpenApiRestCall_609589
proc url_GetListSAMLProviders_613556(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListSAMLProviders_613555(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613557 = query.getOrDefault("Action")
  valid_613557 = validateParameter(valid_613557, JString, required = true,
                                 default = newJString("ListSAMLProviders"))
  if valid_613557 != nil:
    section.add "Action", valid_613557
  var valid_613558 = query.getOrDefault("Version")
  valid_613558 = validateParameter(valid_613558, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613558 != nil:
    section.add "Version", valid_613558
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613559 = header.getOrDefault("X-Amz-Signature")
  valid_613559 = validateParameter(valid_613559, JString, required = false,
                                 default = nil)
  if valid_613559 != nil:
    section.add "X-Amz-Signature", valid_613559
  var valid_613560 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613560 = validateParameter(valid_613560, JString, required = false,
                                 default = nil)
  if valid_613560 != nil:
    section.add "X-Amz-Content-Sha256", valid_613560
  var valid_613561 = header.getOrDefault("X-Amz-Date")
  valid_613561 = validateParameter(valid_613561, JString, required = false,
                                 default = nil)
  if valid_613561 != nil:
    section.add "X-Amz-Date", valid_613561
  var valid_613562 = header.getOrDefault("X-Amz-Credential")
  valid_613562 = validateParameter(valid_613562, JString, required = false,
                                 default = nil)
  if valid_613562 != nil:
    section.add "X-Amz-Credential", valid_613562
  var valid_613563 = header.getOrDefault("X-Amz-Security-Token")
  valid_613563 = validateParameter(valid_613563, JString, required = false,
                                 default = nil)
  if valid_613563 != nil:
    section.add "X-Amz-Security-Token", valid_613563
  var valid_613564 = header.getOrDefault("X-Amz-Algorithm")
  valid_613564 = validateParameter(valid_613564, JString, required = false,
                                 default = nil)
  if valid_613564 != nil:
    section.add "X-Amz-Algorithm", valid_613564
  var valid_613565 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613565 = validateParameter(valid_613565, JString, required = false,
                                 default = nil)
  if valid_613565 != nil:
    section.add "X-Amz-SignedHeaders", valid_613565
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613566: Call_GetListSAMLProviders_613554; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_613566.validator(path, query, header, formData, body)
  let scheme = call_613566.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613566.url(scheme.get, call_613566.host, call_613566.base,
                         call_613566.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613566, url, valid)

proc call*(call_613567: Call_GetListSAMLProviders_613554;
          Action: string = "ListSAMLProviders"; Version: string = "2010-05-08"): Recallable =
  ## getListSAMLProviders
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613568 = newJObject()
  add(query_613568, "Action", newJString(Action))
  add(query_613568, "Version", newJString(Version))
  result = call_613567.call(nil, query_613568, nil, nil, nil)

var getListSAMLProviders* = Call_GetListSAMLProviders_613554(
    name: "getListSAMLProviders", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSAMLProviders",
    validator: validate_GetListSAMLProviders_613555, base: "/",
    url: url_GetListSAMLProviders_613556, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSSHPublicKeys_613602 = ref object of OpenApiRestCall_609589
proc url_PostListSSHPublicKeys_613604(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListSSHPublicKeys_613603(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613605 = query.getOrDefault("Action")
  valid_613605 = validateParameter(valid_613605, JString, required = true,
                                 default = newJString("ListSSHPublicKeys"))
  if valid_613605 != nil:
    section.add "Action", valid_613605
  var valid_613606 = query.getOrDefault("Version")
  valid_613606 = validateParameter(valid_613606, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613606 != nil:
    section.add "Version", valid_613606
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613607 = header.getOrDefault("X-Amz-Signature")
  valid_613607 = validateParameter(valid_613607, JString, required = false,
                                 default = nil)
  if valid_613607 != nil:
    section.add "X-Amz-Signature", valid_613607
  var valid_613608 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613608 = validateParameter(valid_613608, JString, required = false,
                                 default = nil)
  if valid_613608 != nil:
    section.add "X-Amz-Content-Sha256", valid_613608
  var valid_613609 = header.getOrDefault("X-Amz-Date")
  valid_613609 = validateParameter(valid_613609, JString, required = false,
                                 default = nil)
  if valid_613609 != nil:
    section.add "X-Amz-Date", valid_613609
  var valid_613610 = header.getOrDefault("X-Amz-Credential")
  valid_613610 = validateParameter(valid_613610, JString, required = false,
                                 default = nil)
  if valid_613610 != nil:
    section.add "X-Amz-Credential", valid_613610
  var valid_613611 = header.getOrDefault("X-Amz-Security-Token")
  valid_613611 = validateParameter(valid_613611, JString, required = false,
                                 default = nil)
  if valid_613611 != nil:
    section.add "X-Amz-Security-Token", valid_613611
  var valid_613612 = header.getOrDefault("X-Amz-Algorithm")
  valid_613612 = validateParameter(valid_613612, JString, required = false,
                                 default = nil)
  if valid_613612 != nil:
    section.add "X-Amz-Algorithm", valid_613612
  var valid_613613 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613613 = validateParameter(valid_613613, JString, required = false,
                                 default = nil)
  if valid_613613 != nil:
    section.add "X-Amz-SignedHeaders", valid_613613
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_613614 = formData.getOrDefault("Marker")
  valid_613614 = validateParameter(valid_613614, JString, required = false,
                                 default = nil)
  if valid_613614 != nil:
    section.add "Marker", valid_613614
  var valid_613615 = formData.getOrDefault("UserName")
  valid_613615 = validateParameter(valid_613615, JString, required = false,
                                 default = nil)
  if valid_613615 != nil:
    section.add "UserName", valid_613615
  var valid_613616 = formData.getOrDefault("MaxItems")
  valid_613616 = validateParameter(valid_613616, JInt, required = false, default = nil)
  if valid_613616 != nil:
    section.add "MaxItems", valid_613616
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613617: Call_PostListSSHPublicKeys_613602; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613617.validator(path, query, header, formData, body)
  let scheme = call_613617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613617.url(scheme.get, call_613617.host, call_613617.base,
                         call_613617.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613617, url, valid)

proc call*(call_613618: Call_PostListSSHPublicKeys_613602; Marker: string = "";
          UserName: string = ""; Action: string = "ListSSHPublicKeys";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postListSSHPublicKeys
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_613619 = newJObject()
  var formData_613620 = newJObject()
  add(formData_613620, "Marker", newJString(Marker))
  add(formData_613620, "UserName", newJString(UserName))
  add(query_613619, "Action", newJString(Action))
  add(formData_613620, "MaxItems", newJInt(MaxItems))
  add(query_613619, "Version", newJString(Version))
  result = call_613618.call(nil, query_613619, nil, formData_613620, nil)

var postListSSHPublicKeys* = Call_PostListSSHPublicKeys_613602(
    name: "postListSSHPublicKeys", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSSHPublicKeys",
    validator: validate_PostListSSHPublicKeys_613603, base: "/",
    url: url_PostListSSHPublicKeys_613604, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSSHPublicKeys_613584 = ref object of OpenApiRestCall_609589
proc url_GetListSSHPublicKeys_613586(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListSSHPublicKeys_613585(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613587 = query.getOrDefault("Marker")
  valid_613587 = validateParameter(valid_613587, JString, required = false,
                                 default = nil)
  if valid_613587 != nil:
    section.add "Marker", valid_613587
  var valid_613588 = query.getOrDefault("UserName")
  valid_613588 = validateParameter(valid_613588, JString, required = false,
                                 default = nil)
  if valid_613588 != nil:
    section.add "UserName", valid_613588
  var valid_613589 = query.getOrDefault("MaxItems")
  valid_613589 = validateParameter(valid_613589, JInt, required = false, default = nil)
  if valid_613589 != nil:
    section.add "MaxItems", valid_613589
  var valid_613590 = query.getOrDefault("Action")
  valid_613590 = validateParameter(valid_613590, JString, required = true,
                                 default = newJString("ListSSHPublicKeys"))
  if valid_613590 != nil:
    section.add "Action", valid_613590
  var valid_613591 = query.getOrDefault("Version")
  valid_613591 = validateParameter(valid_613591, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613591 != nil:
    section.add "Version", valid_613591
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613592 = header.getOrDefault("X-Amz-Signature")
  valid_613592 = validateParameter(valid_613592, JString, required = false,
                                 default = nil)
  if valid_613592 != nil:
    section.add "X-Amz-Signature", valid_613592
  var valid_613593 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613593 = validateParameter(valid_613593, JString, required = false,
                                 default = nil)
  if valid_613593 != nil:
    section.add "X-Amz-Content-Sha256", valid_613593
  var valid_613594 = header.getOrDefault("X-Amz-Date")
  valid_613594 = validateParameter(valid_613594, JString, required = false,
                                 default = nil)
  if valid_613594 != nil:
    section.add "X-Amz-Date", valid_613594
  var valid_613595 = header.getOrDefault("X-Amz-Credential")
  valid_613595 = validateParameter(valid_613595, JString, required = false,
                                 default = nil)
  if valid_613595 != nil:
    section.add "X-Amz-Credential", valid_613595
  var valid_613596 = header.getOrDefault("X-Amz-Security-Token")
  valid_613596 = validateParameter(valid_613596, JString, required = false,
                                 default = nil)
  if valid_613596 != nil:
    section.add "X-Amz-Security-Token", valid_613596
  var valid_613597 = header.getOrDefault("X-Amz-Algorithm")
  valid_613597 = validateParameter(valid_613597, JString, required = false,
                                 default = nil)
  if valid_613597 != nil:
    section.add "X-Amz-Algorithm", valid_613597
  var valid_613598 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613598 = validateParameter(valid_613598, JString, required = false,
                                 default = nil)
  if valid_613598 != nil:
    section.add "X-Amz-SignedHeaders", valid_613598
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613599: Call_GetListSSHPublicKeys_613584; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613599.validator(path, query, header, formData, body)
  let scheme = call_613599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613599.url(scheme.get, call_613599.host, call_613599.base,
                         call_613599.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613599, url, valid)

proc call*(call_613600: Call_GetListSSHPublicKeys_613584; Marker: string = "";
          UserName: string = ""; MaxItems: int = 0;
          Action: string = "ListSSHPublicKeys"; Version: string = "2010-05-08"): Recallable =
  ## getListSSHPublicKeys
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613601 = newJObject()
  add(query_613601, "Marker", newJString(Marker))
  add(query_613601, "UserName", newJString(UserName))
  add(query_613601, "MaxItems", newJInt(MaxItems))
  add(query_613601, "Action", newJString(Action))
  add(query_613601, "Version", newJString(Version))
  result = call_613600.call(nil, query_613601, nil, nil, nil)

var getListSSHPublicKeys* = Call_GetListSSHPublicKeys_613584(
    name: "getListSSHPublicKeys", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSSHPublicKeys",
    validator: validate_GetListSSHPublicKeys_613585, base: "/",
    url: url_GetListSSHPublicKeys_613586, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListServerCertificates_613639 = ref object of OpenApiRestCall_609589
proc url_PostListServerCertificates_613641(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListServerCertificates_613640(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613642 = query.getOrDefault("Action")
  valid_613642 = validateParameter(valid_613642, JString, required = true,
                                 default = newJString("ListServerCertificates"))
  if valid_613642 != nil:
    section.add "Action", valid_613642
  var valid_613643 = query.getOrDefault("Version")
  valid_613643 = validateParameter(valid_613643, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613643 != nil:
    section.add "Version", valid_613643
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613644 = header.getOrDefault("X-Amz-Signature")
  valid_613644 = validateParameter(valid_613644, JString, required = false,
                                 default = nil)
  if valid_613644 != nil:
    section.add "X-Amz-Signature", valid_613644
  var valid_613645 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613645 = validateParameter(valid_613645, JString, required = false,
                                 default = nil)
  if valid_613645 != nil:
    section.add "X-Amz-Content-Sha256", valid_613645
  var valid_613646 = header.getOrDefault("X-Amz-Date")
  valid_613646 = validateParameter(valid_613646, JString, required = false,
                                 default = nil)
  if valid_613646 != nil:
    section.add "X-Amz-Date", valid_613646
  var valid_613647 = header.getOrDefault("X-Amz-Credential")
  valid_613647 = validateParameter(valid_613647, JString, required = false,
                                 default = nil)
  if valid_613647 != nil:
    section.add "X-Amz-Credential", valid_613647
  var valid_613648 = header.getOrDefault("X-Amz-Security-Token")
  valid_613648 = validateParameter(valid_613648, JString, required = false,
                                 default = nil)
  if valid_613648 != nil:
    section.add "X-Amz-Security-Token", valid_613648
  var valid_613649 = header.getOrDefault("X-Amz-Algorithm")
  valid_613649 = validateParameter(valid_613649, JString, required = false,
                                 default = nil)
  if valid_613649 != nil:
    section.add "X-Amz-Algorithm", valid_613649
  var valid_613650 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613650 = validateParameter(valid_613650, JString, required = false,
                                 default = nil)
  if valid_613650 != nil:
    section.add "X-Amz-SignedHeaders", valid_613650
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_613651 = formData.getOrDefault("Marker")
  valid_613651 = validateParameter(valid_613651, JString, required = false,
                                 default = nil)
  if valid_613651 != nil:
    section.add "Marker", valid_613651
  var valid_613652 = formData.getOrDefault("PathPrefix")
  valid_613652 = validateParameter(valid_613652, JString, required = false,
                                 default = nil)
  if valid_613652 != nil:
    section.add "PathPrefix", valid_613652
  var valid_613653 = formData.getOrDefault("MaxItems")
  valid_613653 = validateParameter(valid_613653, JInt, required = false, default = nil)
  if valid_613653 != nil:
    section.add "MaxItems", valid_613653
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613654: Call_PostListServerCertificates_613639; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_613654.validator(path, query, header, formData, body)
  let scheme = call_613654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613654.url(scheme.get, call_613654.host, call_613654.base,
                         call_613654.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613654, url, valid)

proc call*(call_613655: Call_PostListServerCertificates_613639;
          Marker: string = ""; PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListServerCertificates"; Version: string = "2010-05-08"): Recallable =
  ## postListServerCertificates
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613656 = newJObject()
  var formData_613657 = newJObject()
  add(formData_613657, "Marker", newJString(Marker))
  add(formData_613657, "PathPrefix", newJString(PathPrefix))
  add(formData_613657, "MaxItems", newJInt(MaxItems))
  add(query_613656, "Action", newJString(Action))
  add(query_613656, "Version", newJString(Version))
  result = call_613655.call(nil, query_613656, nil, formData_613657, nil)

var postListServerCertificates* = Call_PostListServerCertificates_613639(
    name: "postListServerCertificates", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListServerCertificates",
    validator: validate_PostListServerCertificates_613640, base: "/",
    url: url_PostListServerCertificates_613641,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListServerCertificates_613621 = ref object of OpenApiRestCall_609589
proc url_GetListServerCertificates_613623(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListServerCertificates_613622(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613624 = query.getOrDefault("Marker")
  valid_613624 = validateParameter(valid_613624, JString, required = false,
                                 default = nil)
  if valid_613624 != nil:
    section.add "Marker", valid_613624
  var valid_613625 = query.getOrDefault("MaxItems")
  valid_613625 = validateParameter(valid_613625, JInt, required = false, default = nil)
  if valid_613625 != nil:
    section.add "MaxItems", valid_613625
  var valid_613626 = query.getOrDefault("PathPrefix")
  valid_613626 = validateParameter(valid_613626, JString, required = false,
                                 default = nil)
  if valid_613626 != nil:
    section.add "PathPrefix", valid_613626
  var valid_613627 = query.getOrDefault("Action")
  valid_613627 = validateParameter(valid_613627, JString, required = true,
                                 default = newJString("ListServerCertificates"))
  if valid_613627 != nil:
    section.add "Action", valid_613627
  var valid_613628 = query.getOrDefault("Version")
  valid_613628 = validateParameter(valid_613628, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613628 != nil:
    section.add "Version", valid_613628
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613629 = header.getOrDefault("X-Amz-Signature")
  valid_613629 = validateParameter(valid_613629, JString, required = false,
                                 default = nil)
  if valid_613629 != nil:
    section.add "X-Amz-Signature", valid_613629
  var valid_613630 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613630 = validateParameter(valid_613630, JString, required = false,
                                 default = nil)
  if valid_613630 != nil:
    section.add "X-Amz-Content-Sha256", valid_613630
  var valid_613631 = header.getOrDefault("X-Amz-Date")
  valid_613631 = validateParameter(valid_613631, JString, required = false,
                                 default = nil)
  if valid_613631 != nil:
    section.add "X-Amz-Date", valid_613631
  var valid_613632 = header.getOrDefault("X-Amz-Credential")
  valid_613632 = validateParameter(valid_613632, JString, required = false,
                                 default = nil)
  if valid_613632 != nil:
    section.add "X-Amz-Credential", valid_613632
  var valid_613633 = header.getOrDefault("X-Amz-Security-Token")
  valid_613633 = validateParameter(valid_613633, JString, required = false,
                                 default = nil)
  if valid_613633 != nil:
    section.add "X-Amz-Security-Token", valid_613633
  var valid_613634 = header.getOrDefault("X-Amz-Algorithm")
  valid_613634 = validateParameter(valid_613634, JString, required = false,
                                 default = nil)
  if valid_613634 != nil:
    section.add "X-Amz-Algorithm", valid_613634
  var valid_613635 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613635 = validateParameter(valid_613635, JString, required = false,
                                 default = nil)
  if valid_613635 != nil:
    section.add "X-Amz-SignedHeaders", valid_613635
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613636: Call_GetListServerCertificates_613621; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_613636.validator(path, query, header, formData, body)
  let scheme = call_613636.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613636.url(scheme.get, call_613636.host, call_613636.base,
                         call_613636.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613636, url, valid)

proc call*(call_613637: Call_GetListServerCertificates_613621; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListServerCertificates"; Version: string = "2010-05-08"): Recallable =
  ## getListServerCertificates
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613638 = newJObject()
  add(query_613638, "Marker", newJString(Marker))
  add(query_613638, "MaxItems", newJInt(MaxItems))
  add(query_613638, "PathPrefix", newJString(PathPrefix))
  add(query_613638, "Action", newJString(Action))
  add(query_613638, "Version", newJString(Version))
  result = call_613637.call(nil, query_613638, nil, nil, nil)

var getListServerCertificates* = Call_GetListServerCertificates_613621(
    name: "getListServerCertificates", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListServerCertificates",
    validator: validate_GetListServerCertificates_613622, base: "/",
    url: url_GetListServerCertificates_613623,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListServiceSpecificCredentials_613675 = ref object of OpenApiRestCall_609589
proc url_PostListServiceSpecificCredentials_613677(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListServiceSpecificCredentials_613676(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613678 = query.getOrDefault("Action")
  valid_613678 = validateParameter(valid_613678, JString, required = true, default = newJString(
      "ListServiceSpecificCredentials"))
  if valid_613678 != nil:
    section.add "Action", valid_613678
  var valid_613679 = query.getOrDefault("Version")
  valid_613679 = validateParameter(valid_613679, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613679 != nil:
    section.add "Version", valid_613679
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613680 = header.getOrDefault("X-Amz-Signature")
  valid_613680 = validateParameter(valid_613680, JString, required = false,
                                 default = nil)
  if valid_613680 != nil:
    section.add "X-Amz-Signature", valid_613680
  var valid_613681 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613681 = validateParameter(valid_613681, JString, required = false,
                                 default = nil)
  if valid_613681 != nil:
    section.add "X-Amz-Content-Sha256", valid_613681
  var valid_613682 = header.getOrDefault("X-Amz-Date")
  valid_613682 = validateParameter(valid_613682, JString, required = false,
                                 default = nil)
  if valid_613682 != nil:
    section.add "X-Amz-Date", valid_613682
  var valid_613683 = header.getOrDefault("X-Amz-Credential")
  valid_613683 = validateParameter(valid_613683, JString, required = false,
                                 default = nil)
  if valid_613683 != nil:
    section.add "X-Amz-Credential", valid_613683
  var valid_613684 = header.getOrDefault("X-Amz-Security-Token")
  valid_613684 = validateParameter(valid_613684, JString, required = false,
                                 default = nil)
  if valid_613684 != nil:
    section.add "X-Amz-Security-Token", valid_613684
  var valid_613685 = header.getOrDefault("X-Amz-Algorithm")
  valid_613685 = validateParameter(valid_613685, JString, required = false,
                                 default = nil)
  if valid_613685 != nil:
    section.add "X-Amz-Algorithm", valid_613685
  var valid_613686 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613686 = validateParameter(valid_613686, JString, required = false,
                                 default = nil)
  if valid_613686 != nil:
    section.add "X-Amz-SignedHeaders", valid_613686
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceName: JString
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   UserName: JString
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_613687 = formData.getOrDefault("ServiceName")
  valid_613687 = validateParameter(valid_613687, JString, required = false,
                                 default = nil)
  if valid_613687 != nil:
    section.add "ServiceName", valid_613687
  var valid_613688 = formData.getOrDefault("UserName")
  valid_613688 = validateParameter(valid_613688, JString, required = false,
                                 default = nil)
  if valid_613688 != nil:
    section.add "UserName", valid_613688
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613689: Call_PostListServiceSpecificCredentials_613675;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  let valid = call_613689.validator(path, query, header, formData, body)
  let scheme = call_613689.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613689.url(scheme.get, call_613689.host, call_613689.base,
                         call_613689.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613689, url, valid)

proc call*(call_613690: Call_PostListServiceSpecificCredentials_613675;
          ServiceName: string = ""; UserName: string = "";
          Action: string = "ListServiceSpecificCredentials";
          Version: string = "2010-05-08"): Recallable =
  ## postListServiceSpecificCredentials
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ##   ServiceName: string
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   UserName: string
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613691 = newJObject()
  var formData_613692 = newJObject()
  add(formData_613692, "ServiceName", newJString(ServiceName))
  add(formData_613692, "UserName", newJString(UserName))
  add(query_613691, "Action", newJString(Action))
  add(query_613691, "Version", newJString(Version))
  result = call_613690.call(nil, query_613691, nil, formData_613692, nil)

var postListServiceSpecificCredentials* = Call_PostListServiceSpecificCredentials_613675(
    name: "postListServiceSpecificCredentials", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListServiceSpecificCredentials",
    validator: validate_PostListServiceSpecificCredentials_613676, base: "/",
    url: url_PostListServiceSpecificCredentials_613677,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListServiceSpecificCredentials_613658 = ref object of OpenApiRestCall_609589
proc url_GetListServiceSpecificCredentials_613660(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListServiceSpecificCredentials_613659(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: JString
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613661 = query.getOrDefault("UserName")
  valid_613661 = validateParameter(valid_613661, JString, required = false,
                                 default = nil)
  if valid_613661 != nil:
    section.add "UserName", valid_613661
  var valid_613662 = query.getOrDefault("ServiceName")
  valid_613662 = validateParameter(valid_613662, JString, required = false,
                                 default = nil)
  if valid_613662 != nil:
    section.add "ServiceName", valid_613662
  var valid_613663 = query.getOrDefault("Action")
  valid_613663 = validateParameter(valid_613663, JString, required = true, default = newJString(
      "ListServiceSpecificCredentials"))
  if valid_613663 != nil:
    section.add "Action", valid_613663
  var valid_613664 = query.getOrDefault("Version")
  valid_613664 = validateParameter(valid_613664, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613664 != nil:
    section.add "Version", valid_613664
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613665 = header.getOrDefault("X-Amz-Signature")
  valid_613665 = validateParameter(valid_613665, JString, required = false,
                                 default = nil)
  if valid_613665 != nil:
    section.add "X-Amz-Signature", valid_613665
  var valid_613666 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613666 = validateParameter(valid_613666, JString, required = false,
                                 default = nil)
  if valid_613666 != nil:
    section.add "X-Amz-Content-Sha256", valid_613666
  var valid_613667 = header.getOrDefault("X-Amz-Date")
  valid_613667 = validateParameter(valid_613667, JString, required = false,
                                 default = nil)
  if valid_613667 != nil:
    section.add "X-Amz-Date", valid_613667
  var valid_613668 = header.getOrDefault("X-Amz-Credential")
  valid_613668 = validateParameter(valid_613668, JString, required = false,
                                 default = nil)
  if valid_613668 != nil:
    section.add "X-Amz-Credential", valid_613668
  var valid_613669 = header.getOrDefault("X-Amz-Security-Token")
  valid_613669 = validateParameter(valid_613669, JString, required = false,
                                 default = nil)
  if valid_613669 != nil:
    section.add "X-Amz-Security-Token", valid_613669
  var valid_613670 = header.getOrDefault("X-Amz-Algorithm")
  valid_613670 = validateParameter(valid_613670, JString, required = false,
                                 default = nil)
  if valid_613670 != nil:
    section.add "X-Amz-Algorithm", valid_613670
  var valid_613671 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613671 = validateParameter(valid_613671, JString, required = false,
                                 default = nil)
  if valid_613671 != nil:
    section.add "X-Amz-SignedHeaders", valid_613671
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613672: Call_GetListServiceSpecificCredentials_613658;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  let valid = call_613672.validator(path, query, header, formData, body)
  let scheme = call_613672.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613672.url(scheme.get, call_613672.host, call_613672.base,
                         call_613672.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613672, url, valid)

proc call*(call_613673: Call_GetListServiceSpecificCredentials_613658;
          UserName: string = ""; ServiceName: string = "";
          Action: string = "ListServiceSpecificCredentials";
          Version: string = "2010-05-08"): Recallable =
  ## getListServiceSpecificCredentials
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ##   UserName: string
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: string
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613674 = newJObject()
  add(query_613674, "UserName", newJString(UserName))
  add(query_613674, "ServiceName", newJString(ServiceName))
  add(query_613674, "Action", newJString(Action))
  add(query_613674, "Version", newJString(Version))
  result = call_613673.call(nil, query_613674, nil, nil, nil)

var getListServiceSpecificCredentials* = Call_GetListServiceSpecificCredentials_613658(
    name: "getListServiceSpecificCredentials", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListServiceSpecificCredentials",
    validator: validate_GetListServiceSpecificCredentials_613659, base: "/",
    url: url_GetListServiceSpecificCredentials_613660,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSigningCertificates_613711 = ref object of OpenApiRestCall_609589
proc url_PostListSigningCertificates_613713(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListSigningCertificates_613712(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613714 = query.getOrDefault("Action")
  valid_613714 = validateParameter(valid_613714, JString, required = true, default = newJString(
      "ListSigningCertificates"))
  if valid_613714 != nil:
    section.add "Action", valid_613714
  var valid_613715 = query.getOrDefault("Version")
  valid_613715 = validateParameter(valid_613715, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613715 != nil:
    section.add "Version", valid_613715
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613716 = header.getOrDefault("X-Amz-Signature")
  valid_613716 = validateParameter(valid_613716, JString, required = false,
                                 default = nil)
  if valid_613716 != nil:
    section.add "X-Amz-Signature", valid_613716
  var valid_613717 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613717 = validateParameter(valid_613717, JString, required = false,
                                 default = nil)
  if valid_613717 != nil:
    section.add "X-Amz-Content-Sha256", valid_613717
  var valid_613718 = header.getOrDefault("X-Amz-Date")
  valid_613718 = validateParameter(valid_613718, JString, required = false,
                                 default = nil)
  if valid_613718 != nil:
    section.add "X-Amz-Date", valid_613718
  var valid_613719 = header.getOrDefault("X-Amz-Credential")
  valid_613719 = validateParameter(valid_613719, JString, required = false,
                                 default = nil)
  if valid_613719 != nil:
    section.add "X-Amz-Credential", valid_613719
  var valid_613720 = header.getOrDefault("X-Amz-Security-Token")
  valid_613720 = validateParameter(valid_613720, JString, required = false,
                                 default = nil)
  if valid_613720 != nil:
    section.add "X-Amz-Security-Token", valid_613720
  var valid_613721 = header.getOrDefault("X-Amz-Algorithm")
  valid_613721 = validateParameter(valid_613721, JString, required = false,
                                 default = nil)
  if valid_613721 != nil:
    section.add "X-Amz-Algorithm", valid_613721
  var valid_613722 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613722 = validateParameter(valid_613722, JString, required = false,
                                 default = nil)
  if valid_613722 != nil:
    section.add "X-Amz-SignedHeaders", valid_613722
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_613723 = formData.getOrDefault("Marker")
  valid_613723 = validateParameter(valid_613723, JString, required = false,
                                 default = nil)
  if valid_613723 != nil:
    section.add "Marker", valid_613723
  var valid_613724 = formData.getOrDefault("UserName")
  valid_613724 = validateParameter(valid_613724, JString, required = false,
                                 default = nil)
  if valid_613724 != nil:
    section.add "UserName", valid_613724
  var valid_613725 = formData.getOrDefault("MaxItems")
  valid_613725 = validateParameter(valid_613725, JInt, required = false, default = nil)
  if valid_613725 != nil:
    section.add "MaxItems", valid_613725
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613726: Call_PostListSigningCertificates_613711; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_613726.validator(path, query, header, formData, body)
  let scheme = call_613726.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613726.url(scheme.get, call_613726.host, call_613726.base,
                         call_613726.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613726, url, valid)

proc call*(call_613727: Call_PostListSigningCertificates_613711;
          Marker: string = ""; UserName: string = "";
          Action: string = "ListSigningCertificates"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListSigningCertificates
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_613728 = newJObject()
  var formData_613729 = newJObject()
  add(formData_613729, "Marker", newJString(Marker))
  add(formData_613729, "UserName", newJString(UserName))
  add(query_613728, "Action", newJString(Action))
  add(formData_613729, "MaxItems", newJInt(MaxItems))
  add(query_613728, "Version", newJString(Version))
  result = call_613727.call(nil, query_613728, nil, formData_613729, nil)

var postListSigningCertificates* = Call_PostListSigningCertificates_613711(
    name: "postListSigningCertificates", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSigningCertificates",
    validator: validate_PostListSigningCertificates_613712, base: "/",
    url: url_PostListSigningCertificates_613713,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSigningCertificates_613693 = ref object of OpenApiRestCall_609589
proc url_GetListSigningCertificates_613695(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListSigningCertificates_613694(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613696 = query.getOrDefault("Marker")
  valid_613696 = validateParameter(valid_613696, JString, required = false,
                                 default = nil)
  if valid_613696 != nil:
    section.add "Marker", valid_613696
  var valid_613697 = query.getOrDefault("UserName")
  valid_613697 = validateParameter(valid_613697, JString, required = false,
                                 default = nil)
  if valid_613697 != nil:
    section.add "UserName", valid_613697
  var valid_613698 = query.getOrDefault("MaxItems")
  valid_613698 = validateParameter(valid_613698, JInt, required = false, default = nil)
  if valid_613698 != nil:
    section.add "MaxItems", valid_613698
  var valid_613699 = query.getOrDefault("Action")
  valid_613699 = validateParameter(valid_613699, JString, required = true, default = newJString(
      "ListSigningCertificates"))
  if valid_613699 != nil:
    section.add "Action", valid_613699
  var valid_613700 = query.getOrDefault("Version")
  valid_613700 = validateParameter(valid_613700, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613700 != nil:
    section.add "Version", valid_613700
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613701 = header.getOrDefault("X-Amz-Signature")
  valid_613701 = validateParameter(valid_613701, JString, required = false,
                                 default = nil)
  if valid_613701 != nil:
    section.add "X-Amz-Signature", valid_613701
  var valid_613702 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613702 = validateParameter(valid_613702, JString, required = false,
                                 default = nil)
  if valid_613702 != nil:
    section.add "X-Amz-Content-Sha256", valid_613702
  var valid_613703 = header.getOrDefault("X-Amz-Date")
  valid_613703 = validateParameter(valid_613703, JString, required = false,
                                 default = nil)
  if valid_613703 != nil:
    section.add "X-Amz-Date", valid_613703
  var valid_613704 = header.getOrDefault("X-Amz-Credential")
  valid_613704 = validateParameter(valid_613704, JString, required = false,
                                 default = nil)
  if valid_613704 != nil:
    section.add "X-Amz-Credential", valid_613704
  var valid_613705 = header.getOrDefault("X-Amz-Security-Token")
  valid_613705 = validateParameter(valid_613705, JString, required = false,
                                 default = nil)
  if valid_613705 != nil:
    section.add "X-Amz-Security-Token", valid_613705
  var valid_613706 = header.getOrDefault("X-Amz-Algorithm")
  valid_613706 = validateParameter(valid_613706, JString, required = false,
                                 default = nil)
  if valid_613706 != nil:
    section.add "X-Amz-Algorithm", valid_613706
  var valid_613707 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613707 = validateParameter(valid_613707, JString, required = false,
                                 default = nil)
  if valid_613707 != nil:
    section.add "X-Amz-SignedHeaders", valid_613707
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613708: Call_GetListSigningCertificates_613693; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_613708.validator(path, query, header, formData, body)
  let scheme = call_613708.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613708.url(scheme.get, call_613708.host, call_613708.base,
                         call_613708.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613708, url, valid)

proc call*(call_613709: Call_GetListSigningCertificates_613693;
          Marker: string = ""; UserName: string = ""; MaxItems: int = 0;
          Action: string = "ListSigningCertificates"; Version: string = "2010-05-08"): Recallable =
  ## getListSigningCertificates
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613710 = newJObject()
  add(query_613710, "Marker", newJString(Marker))
  add(query_613710, "UserName", newJString(UserName))
  add(query_613710, "MaxItems", newJInt(MaxItems))
  add(query_613710, "Action", newJString(Action))
  add(query_613710, "Version", newJString(Version))
  result = call_613709.call(nil, query_613710, nil, nil, nil)

var getListSigningCertificates* = Call_GetListSigningCertificates_613693(
    name: "getListSigningCertificates", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSigningCertificates",
    validator: validate_GetListSigningCertificates_613694, base: "/",
    url: url_GetListSigningCertificates_613695,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUserPolicies_613748 = ref object of OpenApiRestCall_609589
proc url_PostListUserPolicies_613750(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListUserPolicies_613749(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613751 = query.getOrDefault("Action")
  valid_613751 = validateParameter(valid_613751, JString, required = true,
                                 default = newJString("ListUserPolicies"))
  if valid_613751 != nil:
    section.add "Action", valid_613751
  var valid_613752 = query.getOrDefault("Version")
  valid_613752 = validateParameter(valid_613752, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613752 != nil:
    section.add "Version", valid_613752
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613753 = header.getOrDefault("X-Amz-Signature")
  valid_613753 = validateParameter(valid_613753, JString, required = false,
                                 default = nil)
  if valid_613753 != nil:
    section.add "X-Amz-Signature", valid_613753
  var valid_613754 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613754 = validateParameter(valid_613754, JString, required = false,
                                 default = nil)
  if valid_613754 != nil:
    section.add "X-Amz-Content-Sha256", valid_613754
  var valid_613755 = header.getOrDefault("X-Amz-Date")
  valid_613755 = validateParameter(valid_613755, JString, required = false,
                                 default = nil)
  if valid_613755 != nil:
    section.add "X-Amz-Date", valid_613755
  var valid_613756 = header.getOrDefault("X-Amz-Credential")
  valid_613756 = validateParameter(valid_613756, JString, required = false,
                                 default = nil)
  if valid_613756 != nil:
    section.add "X-Amz-Credential", valid_613756
  var valid_613757 = header.getOrDefault("X-Amz-Security-Token")
  valid_613757 = validateParameter(valid_613757, JString, required = false,
                                 default = nil)
  if valid_613757 != nil:
    section.add "X-Amz-Security-Token", valid_613757
  var valid_613758 = header.getOrDefault("X-Amz-Algorithm")
  valid_613758 = validateParameter(valid_613758, JString, required = false,
                                 default = nil)
  if valid_613758 != nil:
    section.add "X-Amz-Algorithm", valid_613758
  var valid_613759 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613759 = validateParameter(valid_613759, JString, required = false,
                                 default = nil)
  if valid_613759 != nil:
    section.add "X-Amz-SignedHeaders", valid_613759
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_613760 = formData.getOrDefault("Marker")
  valid_613760 = validateParameter(valid_613760, JString, required = false,
                                 default = nil)
  if valid_613760 != nil:
    section.add "Marker", valid_613760
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_613761 = formData.getOrDefault("UserName")
  valid_613761 = validateParameter(valid_613761, JString, required = true,
                                 default = nil)
  if valid_613761 != nil:
    section.add "UserName", valid_613761
  var valid_613762 = formData.getOrDefault("MaxItems")
  valid_613762 = validateParameter(valid_613762, JInt, required = false, default = nil)
  if valid_613762 != nil:
    section.add "MaxItems", valid_613762
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613763: Call_PostListUserPolicies_613748; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  let valid = call_613763.validator(path, query, header, formData, body)
  let scheme = call_613763.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613763.url(scheme.get, call_613763.host, call_613763.base,
                         call_613763.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613763, url, valid)

proc call*(call_613764: Call_PostListUserPolicies_613748; UserName: string;
          Marker: string = ""; Action: string = "ListUserPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUserPolicies
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_613765 = newJObject()
  var formData_613766 = newJObject()
  add(formData_613766, "Marker", newJString(Marker))
  add(formData_613766, "UserName", newJString(UserName))
  add(query_613765, "Action", newJString(Action))
  add(formData_613766, "MaxItems", newJInt(MaxItems))
  add(query_613765, "Version", newJString(Version))
  result = call_613764.call(nil, query_613765, nil, formData_613766, nil)

var postListUserPolicies* = Call_PostListUserPolicies_613748(
    name: "postListUserPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListUserPolicies",
    validator: validate_PostListUserPolicies_613749, base: "/",
    url: url_PostListUserPolicies_613750, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUserPolicies_613730 = ref object of OpenApiRestCall_609589
proc url_GetListUserPolicies_613732(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListUserPolicies_613731(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613733 = query.getOrDefault("Marker")
  valid_613733 = validateParameter(valid_613733, JString, required = false,
                                 default = nil)
  if valid_613733 != nil:
    section.add "Marker", valid_613733
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_613734 = query.getOrDefault("UserName")
  valid_613734 = validateParameter(valid_613734, JString, required = true,
                                 default = nil)
  if valid_613734 != nil:
    section.add "UserName", valid_613734
  var valid_613735 = query.getOrDefault("MaxItems")
  valid_613735 = validateParameter(valid_613735, JInt, required = false, default = nil)
  if valid_613735 != nil:
    section.add "MaxItems", valid_613735
  var valid_613736 = query.getOrDefault("Action")
  valid_613736 = validateParameter(valid_613736, JString, required = true,
                                 default = newJString("ListUserPolicies"))
  if valid_613736 != nil:
    section.add "Action", valid_613736
  var valid_613737 = query.getOrDefault("Version")
  valid_613737 = validateParameter(valid_613737, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613737 != nil:
    section.add "Version", valid_613737
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613738 = header.getOrDefault("X-Amz-Signature")
  valid_613738 = validateParameter(valid_613738, JString, required = false,
                                 default = nil)
  if valid_613738 != nil:
    section.add "X-Amz-Signature", valid_613738
  var valid_613739 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613739 = validateParameter(valid_613739, JString, required = false,
                                 default = nil)
  if valid_613739 != nil:
    section.add "X-Amz-Content-Sha256", valid_613739
  var valid_613740 = header.getOrDefault("X-Amz-Date")
  valid_613740 = validateParameter(valid_613740, JString, required = false,
                                 default = nil)
  if valid_613740 != nil:
    section.add "X-Amz-Date", valid_613740
  var valid_613741 = header.getOrDefault("X-Amz-Credential")
  valid_613741 = validateParameter(valid_613741, JString, required = false,
                                 default = nil)
  if valid_613741 != nil:
    section.add "X-Amz-Credential", valid_613741
  var valid_613742 = header.getOrDefault("X-Amz-Security-Token")
  valid_613742 = validateParameter(valid_613742, JString, required = false,
                                 default = nil)
  if valid_613742 != nil:
    section.add "X-Amz-Security-Token", valid_613742
  var valid_613743 = header.getOrDefault("X-Amz-Algorithm")
  valid_613743 = validateParameter(valid_613743, JString, required = false,
                                 default = nil)
  if valid_613743 != nil:
    section.add "X-Amz-Algorithm", valid_613743
  var valid_613744 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613744 = validateParameter(valid_613744, JString, required = false,
                                 default = nil)
  if valid_613744 != nil:
    section.add "X-Amz-SignedHeaders", valid_613744
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613745: Call_GetListUserPolicies_613730; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  let valid = call_613745.validator(path, query, header, formData, body)
  let scheme = call_613745.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613745.url(scheme.get, call_613745.host, call_613745.base,
                         call_613745.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613745, url, valid)

proc call*(call_613746: Call_GetListUserPolicies_613730; UserName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListUserPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListUserPolicies
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613747 = newJObject()
  add(query_613747, "Marker", newJString(Marker))
  add(query_613747, "UserName", newJString(UserName))
  add(query_613747, "MaxItems", newJInt(MaxItems))
  add(query_613747, "Action", newJString(Action))
  add(query_613747, "Version", newJString(Version))
  result = call_613746.call(nil, query_613747, nil, nil, nil)

var getListUserPolicies* = Call_GetListUserPolicies_613730(
    name: "getListUserPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListUserPolicies",
    validator: validate_GetListUserPolicies_613731, base: "/",
    url: url_GetListUserPolicies_613732, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUserTags_613785 = ref object of OpenApiRestCall_609589
proc url_PostListUserTags_613787(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListUserTags_613786(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613788 = query.getOrDefault("Action")
  valid_613788 = validateParameter(valid_613788, JString, required = true,
                                 default = newJString("ListUserTags"))
  if valid_613788 != nil:
    section.add "Action", valid_613788
  var valid_613789 = query.getOrDefault("Version")
  valid_613789 = validateParameter(valid_613789, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613789 != nil:
    section.add "Version", valid_613789
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613790 = header.getOrDefault("X-Amz-Signature")
  valid_613790 = validateParameter(valid_613790, JString, required = false,
                                 default = nil)
  if valid_613790 != nil:
    section.add "X-Amz-Signature", valid_613790
  var valid_613791 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613791 = validateParameter(valid_613791, JString, required = false,
                                 default = nil)
  if valid_613791 != nil:
    section.add "X-Amz-Content-Sha256", valid_613791
  var valid_613792 = header.getOrDefault("X-Amz-Date")
  valid_613792 = validateParameter(valid_613792, JString, required = false,
                                 default = nil)
  if valid_613792 != nil:
    section.add "X-Amz-Date", valid_613792
  var valid_613793 = header.getOrDefault("X-Amz-Credential")
  valid_613793 = validateParameter(valid_613793, JString, required = false,
                                 default = nil)
  if valid_613793 != nil:
    section.add "X-Amz-Credential", valid_613793
  var valid_613794 = header.getOrDefault("X-Amz-Security-Token")
  valid_613794 = validateParameter(valid_613794, JString, required = false,
                                 default = nil)
  if valid_613794 != nil:
    section.add "X-Amz-Security-Token", valid_613794
  var valid_613795 = header.getOrDefault("X-Amz-Algorithm")
  valid_613795 = validateParameter(valid_613795, JString, required = false,
                                 default = nil)
  if valid_613795 != nil:
    section.add "X-Amz-Algorithm", valid_613795
  var valid_613796 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613796 = validateParameter(valid_613796, JString, required = false,
                                 default = nil)
  if valid_613796 != nil:
    section.add "X-Amz-SignedHeaders", valid_613796
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_613797 = formData.getOrDefault("Marker")
  valid_613797 = validateParameter(valid_613797, JString, required = false,
                                 default = nil)
  if valid_613797 != nil:
    section.add "Marker", valid_613797
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_613798 = formData.getOrDefault("UserName")
  valid_613798 = validateParameter(valid_613798, JString, required = true,
                                 default = nil)
  if valid_613798 != nil:
    section.add "UserName", valid_613798
  var valid_613799 = formData.getOrDefault("MaxItems")
  valid_613799 = validateParameter(valid_613799, JInt, required = false, default = nil)
  if valid_613799 != nil:
    section.add "MaxItems", valid_613799
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613800: Call_PostListUserTags_613785; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_613800.validator(path, query, header, formData, body)
  let scheme = call_613800.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613800.url(scheme.get, call_613800.host, call_613800.base,
                         call_613800.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613800, url, valid)

proc call*(call_613801: Call_PostListUserTags_613785; UserName: string;
          Marker: string = ""; Action: string = "ListUserTags"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUserTags
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_613802 = newJObject()
  var formData_613803 = newJObject()
  add(formData_613803, "Marker", newJString(Marker))
  add(formData_613803, "UserName", newJString(UserName))
  add(query_613802, "Action", newJString(Action))
  add(formData_613803, "MaxItems", newJInt(MaxItems))
  add(query_613802, "Version", newJString(Version))
  result = call_613801.call(nil, query_613802, nil, formData_613803, nil)

var postListUserTags* = Call_PostListUserTags_613785(name: "postListUserTags",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListUserTags", validator: validate_PostListUserTags_613786,
    base: "/", url: url_PostListUserTags_613787,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUserTags_613767 = ref object of OpenApiRestCall_609589
proc url_GetListUserTags_613769(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListUserTags_613768(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613770 = query.getOrDefault("Marker")
  valid_613770 = validateParameter(valid_613770, JString, required = false,
                                 default = nil)
  if valid_613770 != nil:
    section.add "Marker", valid_613770
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_613771 = query.getOrDefault("UserName")
  valid_613771 = validateParameter(valid_613771, JString, required = true,
                                 default = nil)
  if valid_613771 != nil:
    section.add "UserName", valid_613771
  var valid_613772 = query.getOrDefault("MaxItems")
  valid_613772 = validateParameter(valid_613772, JInt, required = false, default = nil)
  if valid_613772 != nil:
    section.add "MaxItems", valid_613772
  var valid_613773 = query.getOrDefault("Action")
  valid_613773 = validateParameter(valid_613773, JString, required = true,
                                 default = newJString("ListUserTags"))
  if valid_613773 != nil:
    section.add "Action", valid_613773
  var valid_613774 = query.getOrDefault("Version")
  valid_613774 = validateParameter(valid_613774, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613774 != nil:
    section.add "Version", valid_613774
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613775 = header.getOrDefault("X-Amz-Signature")
  valid_613775 = validateParameter(valid_613775, JString, required = false,
                                 default = nil)
  if valid_613775 != nil:
    section.add "X-Amz-Signature", valid_613775
  var valid_613776 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613776 = validateParameter(valid_613776, JString, required = false,
                                 default = nil)
  if valid_613776 != nil:
    section.add "X-Amz-Content-Sha256", valid_613776
  var valid_613777 = header.getOrDefault("X-Amz-Date")
  valid_613777 = validateParameter(valid_613777, JString, required = false,
                                 default = nil)
  if valid_613777 != nil:
    section.add "X-Amz-Date", valid_613777
  var valid_613778 = header.getOrDefault("X-Amz-Credential")
  valid_613778 = validateParameter(valid_613778, JString, required = false,
                                 default = nil)
  if valid_613778 != nil:
    section.add "X-Amz-Credential", valid_613778
  var valid_613779 = header.getOrDefault("X-Amz-Security-Token")
  valid_613779 = validateParameter(valid_613779, JString, required = false,
                                 default = nil)
  if valid_613779 != nil:
    section.add "X-Amz-Security-Token", valid_613779
  var valid_613780 = header.getOrDefault("X-Amz-Algorithm")
  valid_613780 = validateParameter(valid_613780, JString, required = false,
                                 default = nil)
  if valid_613780 != nil:
    section.add "X-Amz-Algorithm", valid_613780
  var valid_613781 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613781 = validateParameter(valid_613781, JString, required = false,
                                 default = nil)
  if valid_613781 != nil:
    section.add "X-Amz-SignedHeaders", valid_613781
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613782: Call_GetListUserTags_613767; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_613782.validator(path, query, header, formData, body)
  let scheme = call_613782.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613782.url(scheme.get, call_613782.host, call_613782.base,
                         call_613782.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613782, url, valid)

proc call*(call_613783: Call_GetListUserTags_613767; UserName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListUserTags";
          Version: string = "2010-05-08"): Recallable =
  ## getListUserTags
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613784 = newJObject()
  add(query_613784, "Marker", newJString(Marker))
  add(query_613784, "UserName", newJString(UserName))
  add(query_613784, "MaxItems", newJInt(MaxItems))
  add(query_613784, "Action", newJString(Action))
  add(query_613784, "Version", newJString(Version))
  result = call_613783.call(nil, query_613784, nil, nil, nil)

var getListUserTags* = Call_GetListUserTags_613767(name: "getListUserTags",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListUserTags", validator: validate_GetListUserTags_613768,
    base: "/", url: url_GetListUserTags_613769, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUsers_613822 = ref object of OpenApiRestCall_609589
proc url_PostListUsers_613824(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListUsers_613823(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613825 = query.getOrDefault("Action")
  valid_613825 = validateParameter(valid_613825, JString, required = true,
                                 default = newJString("ListUsers"))
  if valid_613825 != nil:
    section.add "Action", valid_613825
  var valid_613826 = query.getOrDefault("Version")
  valid_613826 = validateParameter(valid_613826, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613826 != nil:
    section.add "Version", valid_613826
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613827 = header.getOrDefault("X-Amz-Signature")
  valid_613827 = validateParameter(valid_613827, JString, required = false,
                                 default = nil)
  if valid_613827 != nil:
    section.add "X-Amz-Signature", valid_613827
  var valid_613828 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613828 = validateParameter(valid_613828, JString, required = false,
                                 default = nil)
  if valid_613828 != nil:
    section.add "X-Amz-Content-Sha256", valid_613828
  var valid_613829 = header.getOrDefault("X-Amz-Date")
  valid_613829 = validateParameter(valid_613829, JString, required = false,
                                 default = nil)
  if valid_613829 != nil:
    section.add "X-Amz-Date", valid_613829
  var valid_613830 = header.getOrDefault("X-Amz-Credential")
  valid_613830 = validateParameter(valid_613830, JString, required = false,
                                 default = nil)
  if valid_613830 != nil:
    section.add "X-Amz-Credential", valid_613830
  var valid_613831 = header.getOrDefault("X-Amz-Security-Token")
  valid_613831 = validateParameter(valid_613831, JString, required = false,
                                 default = nil)
  if valid_613831 != nil:
    section.add "X-Amz-Security-Token", valid_613831
  var valid_613832 = header.getOrDefault("X-Amz-Algorithm")
  valid_613832 = validateParameter(valid_613832, JString, required = false,
                                 default = nil)
  if valid_613832 != nil:
    section.add "X-Amz-Algorithm", valid_613832
  var valid_613833 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613833 = validateParameter(valid_613833, JString, required = false,
                                 default = nil)
  if valid_613833 != nil:
    section.add "X-Amz-SignedHeaders", valid_613833
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_613834 = formData.getOrDefault("Marker")
  valid_613834 = validateParameter(valid_613834, JString, required = false,
                                 default = nil)
  if valid_613834 != nil:
    section.add "Marker", valid_613834
  var valid_613835 = formData.getOrDefault("PathPrefix")
  valid_613835 = validateParameter(valid_613835, JString, required = false,
                                 default = nil)
  if valid_613835 != nil:
    section.add "PathPrefix", valid_613835
  var valid_613836 = formData.getOrDefault("MaxItems")
  valid_613836 = validateParameter(valid_613836, JInt, required = false, default = nil)
  if valid_613836 != nil:
    section.add "MaxItems", valid_613836
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613837: Call_PostListUsers_613822; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613837.validator(path, query, header, formData, body)
  let scheme = call_613837.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613837.url(scheme.get, call_613837.host, call_613837.base,
                         call_613837.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613837, url, valid)

proc call*(call_613838: Call_PostListUsers_613822; Marker: string = "";
          PathPrefix: string = ""; MaxItems: int = 0; Action: string = "ListUsers";
          Version: string = "2010-05-08"): Recallable =
  ## postListUsers
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613839 = newJObject()
  var formData_613840 = newJObject()
  add(formData_613840, "Marker", newJString(Marker))
  add(formData_613840, "PathPrefix", newJString(PathPrefix))
  add(formData_613840, "MaxItems", newJInt(MaxItems))
  add(query_613839, "Action", newJString(Action))
  add(query_613839, "Version", newJString(Version))
  result = call_613838.call(nil, query_613839, nil, formData_613840, nil)

var postListUsers* = Call_PostListUsers_613822(name: "postListUsers",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListUsers", validator: validate_PostListUsers_613823,
    base: "/", url: url_PostListUsers_613824, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUsers_613804 = ref object of OpenApiRestCall_609589
proc url_GetListUsers_613806(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListUsers_613805(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613807 = query.getOrDefault("Marker")
  valid_613807 = validateParameter(valid_613807, JString, required = false,
                                 default = nil)
  if valid_613807 != nil:
    section.add "Marker", valid_613807
  var valid_613808 = query.getOrDefault("MaxItems")
  valid_613808 = validateParameter(valid_613808, JInt, required = false, default = nil)
  if valid_613808 != nil:
    section.add "MaxItems", valid_613808
  var valid_613809 = query.getOrDefault("PathPrefix")
  valid_613809 = validateParameter(valid_613809, JString, required = false,
                                 default = nil)
  if valid_613809 != nil:
    section.add "PathPrefix", valid_613809
  var valid_613810 = query.getOrDefault("Action")
  valid_613810 = validateParameter(valid_613810, JString, required = true,
                                 default = newJString("ListUsers"))
  if valid_613810 != nil:
    section.add "Action", valid_613810
  var valid_613811 = query.getOrDefault("Version")
  valid_613811 = validateParameter(valid_613811, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613811 != nil:
    section.add "Version", valid_613811
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613812 = header.getOrDefault("X-Amz-Signature")
  valid_613812 = validateParameter(valid_613812, JString, required = false,
                                 default = nil)
  if valid_613812 != nil:
    section.add "X-Amz-Signature", valid_613812
  var valid_613813 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613813 = validateParameter(valid_613813, JString, required = false,
                                 default = nil)
  if valid_613813 != nil:
    section.add "X-Amz-Content-Sha256", valid_613813
  var valid_613814 = header.getOrDefault("X-Amz-Date")
  valid_613814 = validateParameter(valid_613814, JString, required = false,
                                 default = nil)
  if valid_613814 != nil:
    section.add "X-Amz-Date", valid_613814
  var valid_613815 = header.getOrDefault("X-Amz-Credential")
  valid_613815 = validateParameter(valid_613815, JString, required = false,
                                 default = nil)
  if valid_613815 != nil:
    section.add "X-Amz-Credential", valid_613815
  var valid_613816 = header.getOrDefault("X-Amz-Security-Token")
  valid_613816 = validateParameter(valid_613816, JString, required = false,
                                 default = nil)
  if valid_613816 != nil:
    section.add "X-Amz-Security-Token", valid_613816
  var valid_613817 = header.getOrDefault("X-Amz-Algorithm")
  valid_613817 = validateParameter(valid_613817, JString, required = false,
                                 default = nil)
  if valid_613817 != nil:
    section.add "X-Amz-Algorithm", valid_613817
  var valid_613818 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613818 = validateParameter(valid_613818, JString, required = false,
                                 default = nil)
  if valid_613818 != nil:
    section.add "X-Amz-SignedHeaders", valid_613818
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613819: Call_GetListUsers_613804; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613819.validator(path, query, header, formData, body)
  let scheme = call_613819.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613819.url(scheme.get, call_613819.host, call_613819.base,
                         call_613819.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613819, url, valid)

proc call*(call_613820: Call_GetListUsers_613804; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = ""; Action: string = "ListUsers";
          Version: string = "2010-05-08"): Recallable =
  ## getListUsers
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613821 = newJObject()
  add(query_613821, "Marker", newJString(Marker))
  add(query_613821, "MaxItems", newJInt(MaxItems))
  add(query_613821, "PathPrefix", newJString(PathPrefix))
  add(query_613821, "Action", newJString(Action))
  add(query_613821, "Version", newJString(Version))
  result = call_613820.call(nil, query_613821, nil, nil, nil)

var getListUsers* = Call_GetListUsers_613804(name: "getListUsers",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListUsers", validator: validate_GetListUsers_613805, base: "/",
    url: url_GetListUsers_613806, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListVirtualMFADevices_613859 = ref object of OpenApiRestCall_609589
proc url_PostListVirtualMFADevices_613861(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListVirtualMFADevices_613860(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613862 = query.getOrDefault("Action")
  valid_613862 = validateParameter(valid_613862, JString, required = true,
                                 default = newJString("ListVirtualMFADevices"))
  if valid_613862 != nil:
    section.add "Action", valid_613862
  var valid_613863 = query.getOrDefault("Version")
  valid_613863 = validateParameter(valid_613863, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613863 != nil:
    section.add "Version", valid_613863
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613864 = header.getOrDefault("X-Amz-Signature")
  valid_613864 = validateParameter(valid_613864, JString, required = false,
                                 default = nil)
  if valid_613864 != nil:
    section.add "X-Amz-Signature", valid_613864
  var valid_613865 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613865 = validateParameter(valid_613865, JString, required = false,
                                 default = nil)
  if valid_613865 != nil:
    section.add "X-Amz-Content-Sha256", valid_613865
  var valid_613866 = header.getOrDefault("X-Amz-Date")
  valid_613866 = validateParameter(valid_613866, JString, required = false,
                                 default = nil)
  if valid_613866 != nil:
    section.add "X-Amz-Date", valid_613866
  var valid_613867 = header.getOrDefault("X-Amz-Credential")
  valid_613867 = validateParameter(valid_613867, JString, required = false,
                                 default = nil)
  if valid_613867 != nil:
    section.add "X-Amz-Credential", valid_613867
  var valid_613868 = header.getOrDefault("X-Amz-Security-Token")
  valid_613868 = validateParameter(valid_613868, JString, required = false,
                                 default = nil)
  if valid_613868 != nil:
    section.add "X-Amz-Security-Token", valid_613868
  var valid_613869 = header.getOrDefault("X-Amz-Algorithm")
  valid_613869 = validateParameter(valid_613869, JString, required = false,
                                 default = nil)
  if valid_613869 != nil:
    section.add "X-Amz-Algorithm", valid_613869
  var valid_613870 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613870 = validateParameter(valid_613870, JString, required = false,
                                 default = nil)
  if valid_613870 != nil:
    section.add "X-Amz-SignedHeaders", valid_613870
  result.add "header", section
  ## parameters in `formData` object:
  ##   AssignmentStatus: JString
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_613871 = formData.getOrDefault("AssignmentStatus")
  valid_613871 = validateParameter(valid_613871, JString, required = false,
                                 default = newJString("Assigned"))
  if valid_613871 != nil:
    section.add "AssignmentStatus", valid_613871
  var valid_613872 = formData.getOrDefault("Marker")
  valid_613872 = validateParameter(valid_613872, JString, required = false,
                                 default = nil)
  if valid_613872 != nil:
    section.add "Marker", valid_613872
  var valid_613873 = formData.getOrDefault("MaxItems")
  valid_613873 = validateParameter(valid_613873, JInt, required = false, default = nil)
  if valid_613873 != nil:
    section.add "MaxItems", valid_613873
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613874: Call_PostListVirtualMFADevices_613859; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613874.validator(path, query, header, formData, body)
  let scheme = call_613874.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613874.url(scheme.get, call_613874.host, call_613874.base,
                         call_613874.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613874, url, valid)

proc call*(call_613875: Call_PostListVirtualMFADevices_613859;
          AssignmentStatus: string = "Assigned"; Marker: string = "";
          Action: string = "ListVirtualMFADevices"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListVirtualMFADevices
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   AssignmentStatus: string
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_613876 = newJObject()
  var formData_613877 = newJObject()
  add(formData_613877, "AssignmentStatus", newJString(AssignmentStatus))
  add(formData_613877, "Marker", newJString(Marker))
  add(query_613876, "Action", newJString(Action))
  add(formData_613877, "MaxItems", newJInt(MaxItems))
  add(query_613876, "Version", newJString(Version))
  result = call_613875.call(nil, query_613876, nil, formData_613877, nil)

var postListVirtualMFADevices* = Call_PostListVirtualMFADevices_613859(
    name: "postListVirtualMFADevices", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListVirtualMFADevices",
    validator: validate_PostListVirtualMFADevices_613860, base: "/",
    url: url_PostListVirtualMFADevices_613861,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListVirtualMFADevices_613841 = ref object of OpenApiRestCall_609589
proc url_GetListVirtualMFADevices_613843(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListVirtualMFADevices_613842(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   AssignmentStatus: JString
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613844 = query.getOrDefault("Marker")
  valid_613844 = validateParameter(valid_613844, JString, required = false,
                                 default = nil)
  if valid_613844 != nil:
    section.add "Marker", valid_613844
  var valid_613845 = query.getOrDefault("MaxItems")
  valid_613845 = validateParameter(valid_613845, JInt, required = false, default = nil)
  if valid_613845 != nil:
    section.add "MaxItems", valid_613845
  var valid_613846 = query.getOrDefault("AssignmentStatus")
  valid_613846 = validateParameter(valid_613846, JString, required = false,
                                 default = newJString("Assigned"))
  if valid_613846 != nil:
    section.add "AssignmentStatus", valid_613846
  var valid_613847 = query.getOrDefault("Action")
  valid_613847 = validateParameter(valid_613847, JString, required = true,
                                 default = newJString("ListVirtualMFADevices"))
  if valid_613847 != nil:
    section.add "Action", valid_613847
  var valid_613848 = query.getOrDefault("Version")
  valid_613848 = validateParameter(valid_613848, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613848 != nil:
    section.add "Version", valid_613848
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613849 = header.getOrDefault("X-Amz-Signature")
  valid_613849 = validateParameter(valid_613849, JString, required = false,
                                 default = nil)
  if valid_613849 != nil:
    section.add "X-Amz-Signature", valid_613849
  var valid_613850 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613850 = validateParameter(valid_613850, JString, required = false,
                                 default = nil)
  if valid_613850 != nil:
    section.add "X-Amz-Content-Sha256", valid_613850
  var valid_613851 = header.getOrDefault("X-Amz-Date")
  valid_613851 = validateParameter(valid_613851, JString, required = false,
                                 default = nil)
  if valid_613851 != nil:
    section.add "X-Amz-Date", valid_613851
  var valid_613852 = header.getOrDefault("X-Amz-Credential")
  valid_613852 = validateParameter(valid_613852, JString, required = false,
                                 default = nil)
  if valid_613852 != nil:
    section.add "X-Amz-Credential", valid_613852
  var valid_613853 = header.getOrDefault("X-Amz-Security-Token")
  valid_613853 = validateParameter(valid_613853, JString, required = false,
                                 default = nil)
  if valid_613853 != nil:
    section.add "X-Amz-Security-Token", valid_613853
  var valid_613854 = header.getOrDefault("X-Amz-Algorithm")
  valid_613854 = validateParameter(valid_613854, JString, required = false,
                                 default = nil)
  if valid_613854 != nil:
    section.add "X-Amz-Algorithm", valid_613854
  var valid_613855 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613855 = validateParameter(valid_613855, JString, required = false,
                                 default = nil)
  if valid_613855 != nil:
    section.add "X-Amz-SignedHeaders", valid_613855
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613856: Call_GetListVirtualMFADevices_613841; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613856.validator(path, query, header, formData, body)
  let scheme = call_613856.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613856.url(scheme.get, call_613856.host, call_613856.base,
                         call_613856.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613856, url, valid)

proc call*(call_613857: Call_GetListVirtualMFADevices_613841; Marker: string = "";
          MaxItems: int = 0; AssignmentStatus: string = "Assigned";
          Action: string = "ListVirtualMFADevices"; Version: string = "2010-05-08"): Recallable =
  ## getListVirtualMFADevices
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   AssignmentStatus: string
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613858 = newJObject()
  add(query_613858, "Marker", newJString(Marker))
  add(query_613858, "MaxItems", newJInt(MaxItems))
  add(query_613858, "AssignmentStatus", newJString(AssignmentStatus))
  add(query_613858, "Action", newJString(Action))
  add(query_613858, "Version", newJString(Version))
  result = call_613857.call(nil, query_613858, nil, nil, nil)

var getListVirtualMFADevices* = Call_GetListVirtualMFADevices_613841(
    name: "getListVirtualMFADevices", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListVirtualMFADevices",
    validator: validate_GetListVirtualMFADevices_613842, base: "/",
    url: url_GetListVirtualMFADevices_613843, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutGroupPolicy_613896 = ref object of OpenApiRestCall_609589
proc url_PostPutGroupPolicy_613898(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutGroupPolicy_613897(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613899 = query.getOrDefault("Action")
  valid_613899 = validateParameter(valid_613899, JString, required = true,
                                 default = newJString("PutGroupPolicy"))
  if valid_613899 != nil:
    section.add "Action", valid_613899
  var valid_613900 = query.getOrDefault("Version")
  valid_613900 = validateParameter(valid_613900, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613900 != nil:
    section.add "Version", valid_613900
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613901 = header.getOrDefault("X-Amz-Signature")
  valid_613901 = validateParameter(valid_613901, JString, required = false,
                                 default = nil)
  if valid_613901 != nil:
    section.add "X-Amz-Signature", valid_613901
  var valid_613902 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613902 = validateParameter(valid_613902, JString, required = false,
                                 default = nil)
  if valid_613902 != nil:
    section.add "X-Amz-Content-Sha256", valid_613902
  var valid_613903 = header.getOrDefault("X-Amz-Date")
  valid_613903 = validateParameter(valid_613903, JString, required = false,
                                 default = nil)
  if valid_613903 != nil:
    section.add "X-Amz-Date", valid_613903
  var valid_613904 = header.getOrDefault("X-Amz-Credential")
  valid_613904 = validateParameter(valid_613904, JString, required = false,
                                 default = nil)
  if valid_613904 != nil:
    section.add "X-Amz-Credential", valid_613904
  var valid_613905 = header.getOrDefault("X-Amz-Security-Token")
  valid_613905 = validateParameter(valid_613905, JString, required = false,
                                 default = nil)
  if valid_613905 != nil:
    section.add "X-Amz-Security-Token", valid_613905
  var valid_613906 = header.getOrDefault("X-Amz-Algorithm")
  valid_613906 = validateParameter(valid_613906, JString, required = false,
                                 default = nil)
  if valid_613906 != nil:
    section.add "X-Amz-Algorithm", valid_613906
  var valid_613907 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613907 = validateParameter(valid_613907, JString, required = false,
                                 default = nil)
  if valid_613907 != nil:
    section.add "X-Amz-SignedHeaders", valid_613907
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_613908 = formData.getOrDefault("PolicyDocument")
  valid_613908 = validateParameter(valid_613908, JString, required = true,
                                 default = nil)
  if valid_613908 != nil:
    section.add "PolicyDocument", valid_613908
  var valid_613909 = formData.getOrDefault("GroupName")
  valid_613909 = validateParameter(valid_613909, JString, required = true,
                                 default = nil)
  if valid_613909 != nil:
    section.add "GroupName", valid_613909
  var valid_613910 = formData.getOrDefault("PolicyName")
  valid_613910 = validateParameter(valid_613910, JString, required = true,
                                 default = nil)
  if valid_613910 != nil:
    section.add "PolicyName", valid_613910
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613911: Call_PostPutGroupPolicy_613896; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_613911.validator(path, query, header, formData, body)
  let scheme = call_613911.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613911.url(scheme.get, call_613911.host, call_613911.base,
                         call_613911.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613911, url, valid)

proc call*(call_613912: Call_PostPutGroupPolicy_613896; PolicyDocument: string;
          GroupName: string; PolicyName: string; Action: string = "PutGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postPutGroupPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_613913 = newJObject()
  var formData_613914 = newJObject()
  add(formData_613914, "PolicyDocument", newJString(PolicyDocument))
  add(formData_613914, "GroupName", newJString(GroupName))
  add(query_613913, "Action", newJString(Action))
  add(query_613913, "Version", newJString(Version))
  add(formData_613914, "PolicyName", newJString(PolicyName))
  result = call_613912.call(nil, query_613913, nil, formData_613914, nil)

var postPutGroupPolicy* = Call_PostPutGroupPolicy_613896(
    name: "postPutGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutGroupPolicy",
    validator: validate_PostPutGroupPolicy_613897, base: "/",
    url: url_PostPutGroupPolicy_613898, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutGroupPolicy_613878 = ref object of OpenApiRestCall_609589
proc url_GetPutGroupPolicy_613880(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutGroupPolicy_613879(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_613881 = query.getOrDefault("GroupName")
  valid_613881 = validateParameter(valid_613881, JString, required = true,
                                 default = nil)
  if valid_613881 != nil:
    section.add "GroupName", valid_613881
  var valid_613882 = query.getOrDefault("PolicyName")
  valid_613882 = validateParameter(valid_613882, JString, required = true,
                                 default = nil)
  if valid_613882 != nil:
    section.add "PolicyName", valid_613882
  var valid_613883 = query.getOrDefault("PolicyDocument")
  valid_613883 = validateParameter(valid_613883, JString, required = true,
                                 default = nil)
  if valid_613883 != nil:
    section.add "PolicyDocument", valid_613883
  var valid_613884 = query.getOrDefault("Action")
  valid_613884 = validateParameter(valid_613884, JString, required = true,
                                 default = newJString("PutGroupPolicy"))
  if valid_613884 != nil:
    section.add "Action", valid_613884
  var valid_613885 = query.getOrDefault("Version")
  valid_613885 = validateParameter(valid_613885, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613885 != nil:
    section.add "Version", valid_613885
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613886 = header.getOrDefault("X-Amz-Signature")
  valid_613886 = validateParameter(valid_613886, JString, required = false,
                                 default = nil)
  if valid_613886 != nil:
    section.add "X-Amz-Signature", valid_613886
  var valid_613887 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613887 = validateParameter(valid_613887, JString, required = false,
                                 default = nil)
  if valid_613887 != nil:
    section.add "X-Amz-Content-Sha256", valid_613887
  var valid_613888 = header.getOrDefault("X-Amz-Date")
  valid_613888 = validateParameter(valid_613888, JString, required = false,
                                 default = nil)
  if valid_613888 != nil:
    section.add "X-Amz-Date", valid_613888
  var valid_613889 = header.getOrDefault("X-Amz-Credential")
  valid_613889 = validateParameter(valid_613889, JString, required = false,
                                 default = nil)
  if valid_613889 != nil:
    section.add "X-Amz-Credential", valid_613889
  var valid_613890 = header.getOrDefault("X-Amz-Security-Token")
  valid_613890 = validateParameter(valid_613890, JString, required = false,
                                 default = nil)
  if valid_613890 != nil:
    section.add "X-Amz-Security-Token", valid_613890
  var valid_613891 = header.getOrDefault("X-Amz-Algorithm")
  valid_613891 = validateParameter(valid_613891, JString, required = false,
                                 default = nil)
  if valid_613891 != nil:
    section.add "X-Amz-Algorithm", valid_613891
  var valid_613892 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613892 = validateParameter(valid_613892, JString, required = false,
                                 default = nil)
  if valid_613892 != nil:
    section.add "X-Amz-SignedHeaders", valid_613892
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613893: Call_GetPutGroupPolicy_613878; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_613893.validator(path, query, header, formData, body)
  let scheme = call_613893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613893.url(scheme.get, call_613893.host, call_613893.base,
                         call_613893.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613893, url, valid)

proc call*(call_613894: Call_GetPutGroupPolicy_613878; GroupName: string;
          PolicyName: string; PolicyDocument: string;
          Action: string = "PutGroupPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getPutGroupPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613895 = newJObject()
  add(query_613895, "GroupName", newJString(GroupName))
  add(query_613895, "PolicyName", newJString(PolicyName))
  add(query_613895, "PolicyDocument", newJString(PolicyDocument))
  add(query_613895, "Action", newJString(Action))
  add(query_613895, "Version", newJString(Version))
  result = call_613894.call(nil, query_613895, nil, nil, nil)

var getPutGroupPolicy* = Call_GetPutGroupPolicy_613878(name: "getPutGroupPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutGroupPolicy", validator: validate_GetPutGroupPolicy_613879,
    base: "/", url: url_GetPutGroupPolicy_613880,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutRolePermissionsBoundary_613932 = ref object of OpenApiRestCall_609589
proc url_PostPutRolePermissionsBoundary_613934(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutRolePermissionsBoundary_613933(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613935 = query.getOrDefault("Action")
  valid_613935 = validateParameter(valid_613935, JString, required = true, default = newJString(
      "PutRolePermissionsBoundary"))
  if valid_613935 != nil:
    section.add "Action", valid_613935
  var valid_613936 = query.getOrDefault("Version")
  valid_613936 = validateParameter(valid_613936, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613936 != nil:
    section.add "Version", valid_613936
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613937 = header.getOrDefault("X-Amz-Signature")
  valid_613937 = validateParameter(valid_613937, JString, required = false,
                                 default = nil)
  if valid_613937 != nil:
    section.add "X-Amz-Signature", valid_613937
  var valid_613938 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613938 = validateParameter(valid_613938, JString, required = false,
                                 default = nil)
  if valid_613938 != nil:
    section.add "X-Amz-Content-Sha256", valid_613938
  var valid_613939 = header.getOrDefault("X-Amz-Date")
  valid_613939 = validateParameter(valid_613939, JString, required = false,
                                 default = nil)
  if valid_613939 != nil:
    section.add "X-Amz-Date", valid_613939
  var valid_613940 = header.getOrDefault("X-Amz-Credential")
  valid_613940 = validateParameter(valid_613940, JString, required = false,
                                 default = nil)
  if valid_613940 != nil:
    section.add "X-Amz-Credential", valid_613940
  var valid_613941 = header.getOrDefault("X-Amz-Security-Token")
  valid_613941 = validateParameter(valid_613941, JString, required = false,
                                 default = nil)
  if valid_613941 != nil:
    section.add "X-Amz-Security-Token", valid_613941
  var valid_613942 = header.getOrDefault("X-Amz-Algorithm")
  valid_613942 = validateParameter(valid_613942, JString, required = false,
                                 default = nil)
  if valid_613942 != nil:
    section.add "X-Amz-Algorithm", valid_613942
  var valid_613943 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613943 = validateParameter(valid_613943, JString, required = false,
                                 default = nil)
  if valid_613943 != nil:
    section.add "X-Amz-SignedHeaders", valid_613943
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_613944 = formData.getOrDefault("RoleName")
  valid_613944 = validateParameter(valid_613944, JString, required = true,
                                 default = nil)
  if valid_613944 != nil:
    section.add "RoleName", valid_613944
  var valid_613945 = formData.getOrDefault("PermissionsBoundary")
  valid_613945 = validateParameter(valid_613945, JString, required = true,
                                 default = nil)
  if valid_613945 != nil:
    section.add "PermissionsBoundary", valid_613945
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613946: Call_PostPutRolePermissionsBoundary_613932; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_613946.validator(path, query, header, formData, body)
  let scheme = call_613946.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613946.url(scheme.get, call_613946.host, call_613946.base,
                         call_613946.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613946, url, valid)

proc call*(call_613947: Call_PostPutRolePermissionsBoundary_613932;
          RoleName: string; PermissionsBoundary: string;
          Action: string = "PutRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postPutRolePermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Action: string (required)
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_613948 = newJObject()
  var formData_613949 = newJObject()
  add(formData_613949, "RoleName", newJString(RoleName))
  add(query_613948, "Action", newJString(Action))
  add(formData_613949, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_613948, "Version", newJString(Version))
  result = call_613947.call(nil, query_613948, nil, formData_613949, nil)

var postPutRolePermissionsBoundary* = Call_PostPutRolePermissionsBoundary_613932(
    name: "postPutRolePermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutRolePermissionsBoundary",
    validator: validate_PostPutRolePermissionsBoundary_613933, base: "/",
    url: url_PostPutRolePermissionsBoundary_613934,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutRolePermissionsBoundary_613915 = ref object of OpenApiRestCall_609589
proc url_GetPutRolePermissionsBoundary_613917(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutRolePermissionsBoundary_613916(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `PermissionsBoundary` field"
  var valid_613918 = query.getOrDefault("PermissionsBoundary")
  valid_613918 = validateParameter(valid_613918, JString, required = true,
                                 default = nil)
  if valid_613918 != nil:
    section.add "PermissionsBoundary", valid_613918
  var valid_613919 = query.getOrDefault("RoleName")
  valid_613919 = validateParameter(valid_613919, JString, required = true,
                                 default = nil)
  if valid_613919 != nil:
    section.add "RoleName", valid_613919
  var valid_613920 = query.getOrDefault("Action")
  valid_613920 = validateParameter(valid_613920, JString, required = true, default = newJString(
      "PutRolePermissionsBoundary"))
  if valid_613920 != nil:
    section.add "Action", valid_613920
  var valid_613921 = query.getOrDefault("Version")
  valid_613921 = validateParameter(valid_613921, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613921 != nil:
    section.add "Version", valid_613921
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613922 = header.getOrDefault("X-Amz-Signature")
  valid_613922 = validateParameter(valid_613922, JString, required = false,
                                 default = nil)
  if valid_613922 != nil:
    section.add "X-Amz-Signature", valid_613922
  var valid_613923 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613923 = validateParameter(valid_613923, JString, required = false,
                                 default = nil)
  if valid_613923 != nil:
    section.add "X-Amz-Content-Sha256", valid_613923
  var valid_613924 = header.getOrDefault("X-Amz-Date")
  valid_613924 = validateParameter(valid_613924, JString, required = false,
                                 default = nil)
  if valid_613924 != nil:
    section.add "X-Amz-Date", valid_613924
  var valid_613925 = header.getOrDefault("X-Amz-Credential")
  valid_613925 = validateParameter(valid_613925, JString, required = false,
                                 default = nil)
  if valid_613925 != nil:
    section.add "X-Amz-Credential", valid_613925
  var valid_613926 = header.getOrDefault("X-Amz-Security-Token")
  valid_613926 = validateParameter(valid_613926, JString, required = false,
                                 default = nil)
  if valid_613926 != nil:
    section.add "X-Amz-Security-Token", valid_613926
  var valid_613927 = header.getOrDefault("X-Amz-Algorithm")
  valid_613927 = validateParameter(valid_613927, JString, required = false,
                                 default = nil)
  if valid_613927 != nil:
    section.add "X-Amz-Algorithm", valid_613927
  var valid_613928 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613928 = validateParameter(valid_613928, JString, required = false,
                                 default = nil)
  if valid_613928 != nil:
    section.add "X-Amz-SignedHeaders", valid_613928
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613929: Call_GetPutRolePermissionsBoundary_613915; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_613929.validator(path, query, header, formData, body)
  let scheme = call_613929.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613929.url(scheme.get, call_613929.host, call_613929.base,
                         call_613929.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613929, url, valid)

proc call*(call_613930: Call_GetPutRolePermissionsBoundary_613915;
          PermissionsBoundary: string; RoleName: string;
          Action: string = "PutRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getPutRolePermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613931 = newJObject()
  add(query_613931, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_613931, "RoleName", newJString(RoleName))
  add(query_613931, "Action", newJString(Action))
  add(query_613931, "Version", newJString(Version))
  result = call_613930.call(nil, query_613931, nil, nil, nil)

var getPutRolePermissionsBoundary* = Call_GetPutRolePermissionsBoundary_613915(
    name: "getPutRolePermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=PutRolePermissionsBoundary",
    validator: validate_GetPutRolePermissionsBoundary_613916, base: "/",
    url: url_GetPutRolePermissionsBoundary_613917,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutRolePolicy_613968 = ref object of OpenApiRestCall_609589
proc url_PostPutRolePolicy_613970(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutRolePolicy_613969(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613971 = query.getOrDefault("Action")
  valid_613971 = validateParameter(valid_613971, JString, required = true,
                                 default = newJString("PutRolePolicy"))
  if valid_613971 != nil:
    section.add "Action", valid_613971
  var valid_613972 = query.getOrDefault("Version")
  valid_613972 = validateParameter(valid_613972, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613972 != nil:
    section.add "Version", valid_613972
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613973 = header.getOrDefault("X-Amz-Signature")
  valid_613973 = validateParameter(valid_613973, JString, required = false,
                                 default = nil)
  if valid_613973 != nil:
    section.add "X-Amz-Signature", valid_613973
  var valid_613974 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613974 = validateParameter(valid_613974, JString, required = false,
                                 default = nil)
  if valid_613974 != nil:
    section.add "X-Amz-Content-Sha256", valid_613974
  var valid_613975 = header.getOrDefault("X-Amz-Date")
  valid_613975 = validateParameter(valid_613975, JString, required = false,
                                 default = nil)
  if valid_613975 != nil:
    section.add "X-Amz-Date", valid_613975
  var valid_613976 = header.getOrDefault("X-Amz-Credential")
  valid_613976 = validateParameter(valid_613976, JString, required = false,
                                 default = nil)
  if valid_613976 != nil:
    section.add "X-Amz-Credential", valid_613976
  var valid_613977 = header.getOrDefault("X-Amz-Security-Token")
  valid_613977 = validateParameter(valid_613977, JString, required = false,
                                 default = nil)
  if valid_613977 != nil:
    section.add "X-Amz-Security-Token", valid_613977
  var valid_613978 = header.getOrDefault("X-Amz-Algorithm")
  valid_613978 = validateParameter(valid_613978, JString, required = false,
                                 default = nil)
  if valid_613978 != nil:
    section.add "X-Amz-Algorithm", valid_613978
  var valid_613979 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613979 = validateParameter(valid_613979, JString, required = false,
                                 default = nil)
  if valid_613979 != nil:
    section.add "X-Amz-SignedHeaders", valid_613979
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_613980 = formData.getOrDefault("PolicyDocument")
  valid_613980 = validateParameter(valid_613980, JString, required = true,
                                 default = nil)
  if valid_613980 != nil:
    section.add "PolicyDocument", valid_613980
  var valid_613981 = formData.getOrDefault("RoleName")
  valid_613981 = validateParameter(valid_613981, JString, required = true,
                                 default = nil)
  if valid_613981 != nil:
    section.add "RoleName", valid_613981
  var valid_613982 = formData.getOrDefault("PolicyName")
  valid_613982 = validateParameter(valid_613982, JString, required = true,
                                 default = nil)
  if valid_613982 != nil:
    section.add "PolicyName", valid_613982
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613983: Call_PostPutRolePolicy_613968; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_613983.validator(path, query, header, formData, body)
  let scheme = call_613983.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613983.url(scheme.get, call_613983.host, call_613983.base,
                         call_613983.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613983, url, valid)

proc call*(call_613984: Call_PostPutRolePolicy_613968; PolicyDocument: string;
          RoleName: string; PolicyName: string; Action: string = "PutRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postPutRolePolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_613985 = newJObject()
  var formData_613986 = newJObject()
  add(formData_613986, "PolicyDocument", newJString(PolicyDocument))
  add(formData_613986, "RoleName", newJString(RoleName))
  add(query_613985, "Action", newJString(Action))
  add(query_613985, "Version", newJString(Version))
  add(formData_613986, "PolicyName", newJString(PolicyName))
  result = call_613984.call(nil, query_613985, nil, formData_613986, nil)

var postPutRolePolicy* = Call_PostPutRolePolicy_613968(name: "postPutRolePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=PutRolePolicy", validator: validate_PostPutRolePolicy_613969,
    base: "/", url: url_PostPutRolePolicy_613970,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutRolePolicy_613950 = ref object of OpenApiRestCall_609589
proc url_GetPutRolePolicy_613952(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutRolePolicy_613951(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_613953 = query.getOrDefault("PolicyName")
  valid_613953 = validateParameter(valid_613953, JString, required = true,
                                 default = nil)
  if valid_613953 != nil:
    section.add "PolicyName", valid_613953
  var valid_613954 = query.getOrDefault("RoleName")
  valid_613954 = validateParameter(valid_613954, JString, required = true,
                                 default = nil)
  if valid_613954 != nil:
    section.add "RoleName", valid_613954
  var valid_613955 = query.getOrDefault("PolicyDocument")
  valid_613955 = validateParameter(valid_613955, JString, required = true,
                                 default = nil)
  if valid_613955 != nil:
    section.add "PolicyDocument", valid_613955
  var valid_613956 = query.getOrDefault("Action")
  valid_613956 = validateParameter(valid_613956, JString, required = true,
                                 default = newJString("PutRolePolicy"))
  if valid_613956 != nil:
    section.add "Action", valid_613956
  var valid_613957 = query.getOrDefault("Version")
  valid_613957 = validateParameter(valid_613957, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613957 != nil:
    section.add "Version", valid_613957
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613958 = header.getOrDefault("X-Amz-Signature")
  valid_613958 = validateParameter(valid_613958, JString, required = false,
                                 default = nil)
  if valid_613958 != nil:
    section.add "X-Amz-Signature", valid_613958
  var valid_613959 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613959 = validateParameter(valid_613959, JString, required = false,
                                 default = nil)
  if valid_613959 != nil:
    section.add "X-Amz-Content-Sha256", valid_613959
  var valid_613960 = header.getOrDefault("X-Amz-Date")
  valid_613960 = validateParameter(valid_613960, JString, required = false,
                                 default = nil)
  if valid_613960 != nil:
    section.add "X-Amz-Date", valid_613960
  var valid_613961 = header.getOrDefault("X-Amz-Credential")
  valid_613961 = validateParameter(valid_613961, JString, required = false,
                                 default = nil)
  if valid_613961 != nil:
    section.add "X-Amz-Credential", valid_613961
  var valid_613962 = header.getOrDefault("X-Amz-Security-Token")
  valid_613962 = validateParameter(valid_613962, JString, required = false,
                                 default = nil)
  if valid_613962 != nil:
    section.add "X-Amz-Security-Token", valid_613962
  var valid_613963 = header.getOrDefault("X-Amz-Algorithm")
  valid_613963 = validateParameter(valid_613963, JString, required = false,
                                 default = nil)
  if valid_613963 != nil:
    section.add "X-Amz-Algorithm", valid_613963
  var valid_613964 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613964 = validateParameter(valid_613964, JString, required = false,
                                 default = nil)
  if valid_613964 != nil:
    section.add "X-Amz-SignedHeaders", valid_613964
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613965: Call_GetPutRolePolicy_613950; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_613965.validator(path, query, header, formData, body)
  let scheme = call_613965.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613965.url(scheme.get, call_613965.host, call_613965.base,
                         call_613965.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613965, url, valid)

proc call*(call_613966: Call_GetPutRolePolicy_613950; PolicyName: string;
          RoleName: string; PolicyDocument: string;
          Action: string = "PutRolePolicy"; Version: string = "2010-05-08"): Recallable =
  ## getPutRolePolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613967 = newJObject()
  add(query_613967, "PolicyName", newJString(PolicyName))
  add(query_613967, "RoleName", newJString(RoleName))
  add(query_613967, "PolicyDocument", newJString(PolicyDocument))
  add(query_613967, "Action", newJString(Action))
  add(query_613967, "Version", newJString(Version))
  result = call_613966.call(nil, query_613967, nil, nil, nil)

var getPutRolePolicy* = Call_GetPutRolePolicy_613950(name: "getPutRolePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutRolePolicy", validator: validate_GetPutRolePolicy_613951,
    base: "/", url: url_GetPutRolePolicy_613952,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutUserPermissionsBoundary_614004 = ref object of OpenApiRestCall_609589
proc url_PostPutUserPermissionsBoundary_614006(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutUserPermissionsBoundary_614005(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614007 = query.getOrDefault("Action")
  valid_614007 = validateParameter(valid_614007, JString, required = true, default = newJString(
      "PutUserPermissionsBoundary"))
  if valid_614007 != nil:
    section.add "Action", valid_614007
  var valid_614008 = query.getOrDefault("Version")
  valid_614008 = validateParameter(valid_614008, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614008 != nil:
    section.add "Version", valid_614008
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614009 = header.getOrDefault("X-Amz-Signature")
  valid_614009 = validateParameter(valid_614009, JString, required = false,
                                 default = nil)
  if valid_614009 != nil:
    section.add "X-Amz-Signature", valid_614009
  var valid_614010 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614010 = validateParameter(valid_614010, JString, required = false,
                                 default = nil)
  if valid_614010 != nil:
    section.add "X-Amz-Content-Sha256", valid_614010
  var valid_614011 = header.getOrDefault("X-Amz-Date")
  valid_614011 = validateParameter(valid_614011, JString, required = false,
                                 default = nil)
  if valid_614011 != nil:
    section.add "X-Amz-Date", valid_614011
  var valid_614012 = header.getOrDefault("X-Amz-Credential")
  valid_614012 = validateParameter(valid_614012, JString, required = false,
                                 default = nil)
  if valid_614012 != nil:
    section.add "X-Amz-Credential", valid_614012
  var valid_614013 = header.getOrDefault("X-Amz-Security-Token")
  valid_614013 = validateParameter(valid_614013, JString, required = false,
                                 default = nil)
  if valid_614013 != nil:
    section.add "X-Amz-Security-Token", valid_614013
  var valid_614014 = header.getOrDefault("X-Amz-Algorithm")
  valid_614014 = validateParameter(valid_614014, JString, required = false,
                                 default = nil)
  if valid_614014 != nil:
    section.add "X-Amz-Algorithm", valid_614014
  var valid_614015 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614015 = validateParameter(valid_614015, JString, required = false,
                                 default = nil)
  if valid_614015 != nil:
    section.add "X-Amz-SignedHeaders", valid_614015
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_614016 = formData.getOrDefault("UserName")
  valid_614016 = validateParameter(valid_614016, JString, required = true,
                                 default = nil)
  if valid_614016 != nil:
    section.add "UserName", valid_614016
  var valid_614017 = formData.getOrDefault("PermissionsBoundary")
  valid_614017 = validateParameter(valid_614017, JString, required = true,
                                 default = nil)
  if valid_614017 != nil:
    section.add "PermissionsBoundary", valid_614017
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614018: Call_PostPutUserPermissionsBoundary_614004; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_614018.validator(path, query, header, formData, body)
  let scheme = call_614018.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614018.url(scheme.get, call_614018.host, call_614018.base,
                         call_614018.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614018, url, valid)

proc call*(call_614019: Call_PostPutUserPermissionsBoundary_614004;
          UserName: string; PermissionsBoundary: string;
          Action: string = "PutUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postPutUserPermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   Action: string (required)
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_614020 = newJObject()
  var formData_614021 = newJObject()
  add(formData_614021, "UserName", newJString(UserName))
  add(query_614020, "Action", newJString(Action))
  add(formData_614021, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_614020, "Version", newJString(Version))
  result = call_614019.call(nil, query_614020, nil, formData_614021, nil)

var postPutUserPermissionsBoundary* = Call_PostPutUserPermissionsBoundary_614004(
    name: "postPutUserPermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutUserPermissionsBoundary",
    validator: validate_PostPutUserPermissionsBoundary_614005, base: "/",
    url: url_PostPutUserPermissionsBoundary_614006,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutUserPermissionsBoundary_613987 = ref object of OpenApiRestCall_609589
proc url_GetPutUserPermissionsBoundary_613989(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutUserPermissionsBoundary_613988(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_613990 = query.getOrDefault("UserName")
  valid_613990 = validateParameter(valid_613990, JString, required = true,
                                 default = nil)
  if valid_613990 != nil:
    section.add "UserName", valid_613990
  var valid_613991 = query.getOrDefault("PermissionsBoundary")
  valid_613991 = validateParameter(valid_613991, JString, required = true,
                                 default = nil)
  if valid_613991 != nil:
    section.add "PermissionsBoundary", valid_613991
  var valid_613992 = query.getOrDefault("Action")
  valid_613992 = validateParameter(valid_613992, JString, required = true, default = newJString(
      "PutUserPermissionsBoundary"))
  if valid_613992 != nil:
    section.add "Action", valid_613992
  var valid_613993 = query.getOrDefault("Version")
  valid_613993 = validateParameter(valid_613993, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613993 != nil:
    section.add "Version", valid_613993
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613994 = header.getOrDefault("X-Amz-Signature")
  valid_613994 = validateParameter(valid_613994, JString, required = false,
                                 default = nil)
  if valid_613994 != nil:
    section.add "X-Amz-Signature", valid_613994
  var valid_613995 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613995 = validateParameter(valid_613995, JString, required = false,
                                 default = nil)
  if valid_613995 != nil:
    section.add "X-Amz-Content-Sha256", valid_613995
  var valid_613996 = header.getOrDefault("X-Amz-Date")
  valid_613996 = validateParameter(valid_613996, JString, required = false,
                                 default = nil)
  if valid_613996 != nil:
    section.add "X-Amz-Date", valid_613996
  var valid_613997 = header.getOrDefault("X-Amz-Credential")
  valid_613997 = validateParameter(valid_613997, JString, required = false,
                                 default = nil)
  if valid_613997 != nil:
    section.add "X-Amz-Credential", valid_613997
  var valid_613998 = header.getOrDefault("X-Amz-Security-Token")
  valid_613998 = validateParameter(valid_613998, JString, required = false,
                                 default = nil)
  if valid_613998 != nil:
    section.add "X-Amz-Security-Token", valid_613998
  var valid_613999 = header.getOrDefault("X-Amz-Algorithm")
  valid_613999 = validateParameter(valid_613999, JString, required = false,
                                 default = nil)
  if valid_613999 != nil:
    section.add "X-Amz-Algorithm", valid_613999
  var valid_614000 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614000 = validateParameter(valid_614000, JString, required = false,
                                 default = nil)
  if valid_614000 != nil:
    section.add "X-Amz-SignedHeaders", valid_614000
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614001: Call_GetPutUserPermissionsBoundary_613987; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_614001.validator(path, query, header, formData, body)
  let scheme = call_614001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614001.url(scheme.get, call_614001.host, call_614001.base,
                         call_614001.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614001, url, valid)

proc call*(call_614002: Call_GetPutUserPermissionsBoundary_613987;
          UserName: string; PermissionsBoundary: string;
          Action: string = "PutUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getPutUserPermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614003 = newJObject()
  add(query_614003, "UserName", newJString(UserName))
  add(query_614003, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_614003, "Action", newJString(Action))
  add(query_614003, "Version", newJString(Version))
  result = call_614002.call(nil, query_614003, nil, nil, nil)

var getPutUserPermissionsBoundary* = Call_GetPutUserPermissionsBoundary_613987(
    name: "getPutUserPermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=PutUserPermissionsBoundary",
    validator: validate_GetPutUserPermissionsBoundary_613988, base: "/",
    url: url_GetPutUserPermissionsBoundary_613989,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutUserPolicy_614040 = ref object of OpenApiRestCall_609589
proc url_PostPutUserPolicy_614042(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutUserPolicy_614041(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614043 = query.getOrDefault("Action")
  valid_614043 = validateParameter(valid_614043, JString, required = true,
                                 default = newJString("PutUserPolicy"))
  if valid_614043 != nil:
    section.add "Action", valid_614043
  var valid_614044 = query.getOrDefault("Version")
  valid_614044 = validateParameter(valid_614044, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614044 != nil:
    section.add "Version", valid_614044
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614045 = header.getOrDefault("X-Amz-Signature")
  valid_614045 = validateParameter(valid_614045, JString, required = false,
                                 default = nil)
  if valid_614045 != nil:
    section.add "X-Amz-Signature", valid_614045
  var valid_614046 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614046 = validateParameter(valid_614046, JString, required = false,
                                 default = nil)
  if valid_614046 != nil:
    section.add "X-Amz-Content-Sha256", valid_614046
  var valid_614047 = header.getOrDefault("X-Amz-Date")
  valid_614047 = validateParameter(valid_614047, JString, required = false,
                                 default = nil)
  if valid_614047 != nil:
    section.add "X-Amz-Date", valid_614047
  var valid_614048 = header.getOrDefault("X-Amz-Credential")
  valid_614048 = validateParameter(valid_614048, JString, required = false,
                                 default = nil)
  if valid_614048 != nil:
    section.add "X-Amz-Credential", valid_614048
  var valid_614049 = header.getOrDefault("X-Amz-Security-Token")
  valid_614049 = validateParameter(valid_614049, JString, required = false,
                                 default = nil)
  if valid_614049 != nil:
    section.add "X-Amz-Security-Token", valid_614049
  var valid_614050 = header.getOrDefault("X-Amz-Algorithm")
  valid_614050 = validateParameter(valid_614050, JString, required = false,
                                 default = nil)
  if valid_614050 != nil:
    section.add "X-Amz-Algorithm", valid_614050
  var valid_614051 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614051 = validateParameter(valid_614051, JString, required = false,
                                 default = nil)
  if valid_614051 != nil:
    section.add "X-Amz-SignedHeaders", valid_614051
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_614052 = formData.getOrDefault("PolicyDocument")
  valid_614052 = validateParameter(valid_614052, JString, required = true,
                                 default = nil)
  if valid_614052 != nil:
    section.add "PolicyDocument", valid_614052
  var valid_614053 = formData.getOrDefault("UserName")
  valid_614053 = validateParameter(valid_614053, JString, required = true,
                                 default = nil)
  if valid_614053 != nil:
    section.add "UserName", valid_614053
  var valid_614054 = formData.getOrDefault("PolicyName")
  valid_614054 = validateParameter(valid_614054, JString, required = true,
                                 default = nil)
  if valid_614054 != nil:
    section.add "PolicyName", valid_614054
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614055: Call_PostPutUserPolicy_614040; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_614055.validator(path, query, header, formData, body)
  let scheme = call_614055.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614055.url(scheme.get, call_614055.host, call_614055.base,
                         call_614055.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614055, url, valid)

proc call*(call_614056: Call_PostPutUserPolicy_614040; PolicyDocument: string;
          UserName: string; PolicyName: string; Action: string = "PutUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postPutUserPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_614057 = newJObject()
  var formData_614058 = newJObject()
  add(formData_614058, "PolicyDocument", newJString(PolicyDocument))
  add(formData_614058, "UserName", newJString(UserName))
  add(query_614057, "Action", newJString(Action))
  add(query_614057, "Version", newJString(Version))
  add(formData_614058, "PolicyName", newJString(PolicyName))
  result = call_614056.call(nil, query_614057, nil, formData_614058, nil)

var postPutUserPolicy* = Call_PostPutUserPolicy_614040(name: "postPutUserPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=PutUserPolicy", validator: validate_PostPutUserPolicy_614041,
    base: "/", url: url_PostPutUserPolicy_614042,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutUserPolicy_614022 = ref object of OpenApiRestCall_609589
proc url_GetPutUserPolicy_614024(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutUserPolicy_614023(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_614025 = query.getOrDefault("UserName")
  valid_614025 = validateParameter(valid_614025, JString, required = true,
                                 default = nil)
  if valid_614025 != nil:
    section.add "UserName", valid_614025
  var valid_614026 = query.getOrDefault("PolicyName")
  valid_614026 = validateParameter(valid_614026, JString, required = true,
                                 default = nil)
  if valid_614026 != nil:
    section.add "PolicyName", valid_614026
  var valid_614027 = query.getOrDefault("PolicyDocument")
  valid_614027 = validateParameter(valid_614027, JString, required = true,
                                 default = nil)
  if valid_614027 != nil:
    section.add "PolicyDocument", valid_614027
  var valid_614028 = query.getOrDefault("Action")
  valid_614028 = validateParameter(valid_614028, JString, required = true,
                                 default = newJString("PutUserPolicy"))
  if valid_614028 != nil:
    section.add "Action", valid_614028
  var valid_614029 = query.getOrDefault("Version")
  valid_614029 = validateParameter(valid_614029, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614029 != nil:
    section.add "Version", valid_614029
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614030 = header.getOrDefault("X-Amz-Signature")
  valid_614030 = validateParameter(valid_614030, JString, required = false,
                                 default = nil)
  if valid_614030 != nil:
    section.add "X-Amz-Signature", valid_614030
  var valid_614031 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614031 = validateParameter(valid_614031, JString, required = false,
                                 default = nil)
  if valid_614031 != nil:
    section.add "X-Amz-Content-Sha256", valid_614031
  var valid_614032 = header.getOrDefault("X-Amz-Date")
  valid_614032 = validateParameter(valid_614032, JString, required = false,
                                 default = nil)
  if valid_614032 != nil:
    section.add "X-Amz-Date", valid_614032
  var valid_614033 = header.getOrDefault("X-Amz-Credential")
  valid_614033 = validateParameter(valid_614033, JString, required = false,
                                 default = nil)
  if valid_614033 != nil:
    section.add "X-Amz-Credential", valid_614033
  var valid_614034 = header.getOrDefault("X-Amz-Security-Token")
  valid_614034 = validateParameter(valid_614034, JString, required = false,
                                 default = nil)
  if valid_614034 != nil:
    section.add "X-Amz-Security-Token", valid_614034
  var valid_614035 = header.getOrDefault("X-Amz-Algorithm")
  valid_614035 = validateParameter(valid_614035, JString, required = false,
                                 default = nil)
  if valid_614035 != nil:
    section.add "X-Amz-Algorithm", valid_614035
  var valid_614036 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614036 = validateParameter(valid_614036, JString, required = false,
                                 default = nil)
  if valid_614036 != nil:
    section.add "X-Amz-SignedHeaders", valid_614036
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614037: Call_GetPutUserPolicy_614022; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_614037.validator(path, query, header, formData, body)
  let scheme = call_614037.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614037.url(scheme.get, call_614037.host, call_614037.base,
                         call_614037.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614037, url, valid)

proc call*(call_614038: Call_GetPutUserPolicy_614022; UserName: string;
          PolicyName: string; PolicyDocument: string;
          Action: string = "PutUserPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getPutUserPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   UserName: string (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614039 = newJObject()
  add(query_614039, "UserName", newJString(UserName))
  add(query_614039, "PolicyName", newJString(PolicyName))
  add(query_614039, "PolicyDocument", newJString(PolicyDocument))
  add(query_614039, "Action", newJString(Action))
  add(query_614039, "Version", newJString(Version))
  result = call_614038.call(nil, query_614039, nil, nil, nil)

var getPutUserPolicy* = Call_GetPutUserPolicy_614022(name: "getPutUserPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutUserPolicy", validator: validate_GetPutUserPolicy_614023,
    base: "/", url: url_GetPutUserPolicy_614024,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveClientIDFromOpenIDConnectProvider_614076 = ref object of OpenApiRestCall_609589
proc url_PostRemoveClientIDFromOpenIDConnectProvider_614078(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveClientIDFromOpenIDConnectProvider_614077(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614079 = query.getOrDefault("Action")
  valid_614079 = validateParameter(valid_614079, JString, required = true, default = newJString(
      "RemoveClientIDFromOpenIDConnectProvider"))
  if valid_614079 != nil:
    section.add "Action", valid_614079
  var valid_614080 = query.getOrDefault("Version")
  valid_614080 = validateParameter(valid_614080, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614080 != nil:
    section.add "Version", valid_614080
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614081 = header.getOrDefault("X-Amz-Signature")
  valid_614081 = validateParameter(valid_614081, JString, required = false,
                                 default = nil)
  if valid_614081 != nil:
    section.add "X-Amz-Signature", valid_614081
  var valid_614082 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614082 = validateParameter(valid_614082, JString, required = false,
                                 default = nil)
  if valid_614082 != nil:
    section.add "X-Amz-Content-Sha256", valid_614082
  var valid_614083 = header.getOrDefault("X-Amz-Date")
  valid_614083 = validateParameter(valid_614083, JString, required = false,
                                 default = nil)
  if valid_614083 != nil:
    section.add "X-Amz-Date", valid_614083
  var valid_614084 = header.getOrDefault("X-Amz-Credential")
  valid_614084 = validateParameter(valid_614084, JString, required = false,
                                 default = nil)
  if valid_614084 != nil:
    section.add "X-Amz-Credential", valid_614084
  var valid_614085 = header.getOrDefault("X-Amz-Security-Token")
  valid_614085 = validateParameter(valid_614085, JString, required = false,
                                 default = nil)
  if valid_614085 != nil:
    section.add "X-Amz-Security-Token", valid_614085
  var valid_614086 = header.getOrDefault("X-Amz-Algorithm")
  valid_614086 = validateParameter(valid_614086, JString, required = false,
                                 default = nil)
  if valid_614086 != nil:
    section.add "X-Amz-Algorithm", valid_614086
  var valid_614087 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614087 = validateParameter(valid_614087, JString, required = false,
                                 default = nil)
  if valid_614087 != nil:
    section.add "X-Amz-SignedHeaders", valid_614087
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ClientID` field"
  var valid_614088 = formData.getOrDefault("ClientID")
  valid_614088 = validateParameter(valid_614088, JString, required = true,
                                 default = nil)
  if valid_614088 != nil:
    section.add "ClientID", valid_614088
  var valid_614089 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_614089 = validateParameter(valid_614089, JString, required = true,
                                 default = nil)
  if valid_614089 != nil:
    section.add "OpenIDConnectProviderArn", valid_614089
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614090: Call_PostRemoveClientIDFromOpenIDConnectProvider_614076;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  let valid = call_614090.validator(path, query, header, formData, body)
  let scheme = call_614090.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614090.url(scheme.get, call_614090.host, call_614090.base,
                         call_614090.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614090, url, valid)

proc call*(call_614091: Call_PostRemoveClientIDFromOpenIDConnectProvider_614076;
          ClientID: string; OpenIDConnectProviderArn: string;
          Action: string = "RemoveClientIDFromOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveClientIDFromOpenIDConnectProvider
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_614092 = newJObject()
  var formData_614093 = newJObject()
  add(formData_614093, "ClientID", newJString(ClientID))
  add(query_614092, "Action", newJString(Action))
  add(query_614092, "Version", newJString(Version))
  add(formData_614093, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_614091.call(nil, query_614092, nil, formData_614093, nil)

var postRemoveClientIDFromOpenIDConnectProvider* = Call_PostRemoveClientIDFromOpenIDConnectProvider_614076(
    name: "postRemoveClientIDFromOpenIDConnectProvider",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=RemoveClientIDFromOpenIDConnectProvider",
    validator: validate_PostRemoveClientIDFromOpenIDConnectProvider_614077,
    base: "/", url: url_PostRemoveClientIDFromOpenIDConnectProvider_614078,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveClientIDFromOpenIDConnectProvider_614059 = ref object of OpenApiRestCall_609589
proc url_GetRemoveClientIDFromOpenIDConnectProvider_614061(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveClientIDFromOpenIDConnectProvider_614060(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ClientID` field"
  var valid_614062 = query.getOrDefault("ClientID")
  valid_614062 = validateParameter(valid_614062, JString, required = true,
                                 default = nil)
  if valid_614062 != nil:
    section.add "ClientID", valid_614062
  var valid_614063 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_614063 = validateParameter(valid_614063, JString, required = true,
                                 default = nil)
  if valid_614063 != nil:
    section.add "OpenIDConnectProviderArn", valid_614063
  var valid_614064 = query.getOrDefault("Action")
  valid_614064 = validateParameter(valid_614064, JString, required = true, default = newJString(
      "RemoveClientIDFromOpenIDConnectProvider"))
  if valid_614064 != nil:
    section.add "Action", valid_614064
  var valid_614065 = query.getOrDefault("Version")
  valid_614065 = validateParameter(valid_614065, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614065 != nil:
    section.add "Version", valid_614065
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614066 = header.getOrDefault("X-Amz-Signature")
  valid_614066 = validateParameter(valid_614066, JString, required = false,
                                 default = nil)
  if valid_614066 != nil:
    section.add "X-Amz-Signature", valid_614066
  var valid_614067 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614067 = validateParameter(valid_614067, JString, required = false,
                                 default = nil)
  if valid_614067 != nil:
    section.add "X-Amz-Content-Sha256", valid_614067
  var valid_614068 = header.getOrDefault("X-Amz-Date")
  valid_614068 = validateParameter(valid_614068, JString, required = false,
                                 default = nil)
  if valid_614068 != nil:
    section.add "X-Amz-Date", valid_614068
  var valid_614069 = header.getOrDefault("X-Amz-Credential")
  valid_614069 = validateParameter(valid_614069, JString, required = false,
                                 default = nil)
  if valid_614069 != nil:
    section.add "X-Amz-Credential", valid_614069
  var valid_614070 = header.getOrDefault("X-Amz-Security-Token")
  valid_614070 = validateParameter(valid_614070, JString, required = false,
                                 default = nil)
  if valid_614070 != nil:
    section.add "X-Amz-Security-Token", valid_614070
  var valid_614071 = header.getOrDefault("X-Amz-Algorithm")
  valid_614071 = validateParameter(valid_614071, JString, required = false,
                                 default = nil)
  if valid_614071 != nil:
    section.add "X-Amz-Algorithm", valid_614071
  var valid_614072 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614072 = validateParameter(valid_614072, JString, required = false,
                                 default = nil)
  if valid_614072 != nil:
    section.add "X-Amz-SignedHeaders", valid_614072
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614073: Call_GetRemoveClientIDFromOpenIDConnectProvider_614059;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  let valid = call_614073.validator(path, query, header, formData, body)
  let scheme = call_614073.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614073.url(scheme.get, call_614073.host, call_614073.base,
                         call_614073.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614073, url, valid)

proc call*(call_614074: Call_GetRemoveClientIDFromOpenIDConnectProvider_614059;
          ClientID: string; OpenIDConnectProviderArn: string;
          Action: string = "RemoveClientIDFromOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveClientIDFromOpenIDConnectProvider
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614075 = newJObject()
  add(query_614075, "ClientID", newJString(ClientID))
  add(query_614075, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_614075, "Action", newJString(Action))
  add(query_614075, "Version", newJString(Version))
  result = call_614074.call(nil, query_614075, nil, nil, nil)

var getRemoveClientIDFromOpenIDConnectProvider* = Call_GetRemoveClientIDFromOpenIDConnectProvider_614059(
    name: "getRemoveClientIDFromOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=RemoveClientIDFromOpenIDConnectProvider",
    validator: validate_GetRemoveClientIDFromOpenIDConnectProvider_614060,
    base: "/", url: url_GetRemoveClientIDFromOpenIDConnectProvider_614061,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromInstanceProfile_614111 = ref object of OpenApiRestCall_609589
proc url_PostRemoveRoleFromInstanceProfile_614113(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromInstanceProfile_614112(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614114 = query.getOrDefault("Action")
  valid_614114 = validateParameter(valid_614114, JString, required = true, default = newJString(
      "RemoveRoleFromInstanceProfile"))
  if valid_614114 != nil:
    section.add "Action", valid_614114
  var valid_614115 = query.getOrDefault("Version")
  valid_614115 = validateParameter(valid_614115, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614115 != nil:
    section.add "Version", valid_614115
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614116 = header.getOrDefault("X-Amz-Signature")
  valid_614116 = validateParameter(valid_614116, JString, required = false,
                                 default = nil)
  if valid_614116 != nil:
    section.add "X-Amz-Signature", valid_614116
  var valid_614117 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614117 = validateParameter(valid_614117, JString, required = false,
                                 default = nil)
  if valid_614117 != nil:
    section.add "X-Amz-Content-Sha256", valid_614117
  var valid_614118 = header.getOrDefault("X-Amz-Date")
  valid_614118 = validateParameter(valid_614118, JString, required = false,
                                 default = nil)
  if valid_614118 != nil:
    section.add "X-Amz-Date", valid_614118
  var valid_614119 = header.getOrDefault("X-Amz-Credential")
  valid_614119 = validateParameter(valid_614119, JString, required = false,
                                 default = nil)
  if valid_614119 != nil:
    section.add "X-Amz-Credential", valid_614119
  var valid_614120 = header.getOrDefault("X-Amz-Security-Token")
  valid_614120 = validateParameter(valid_614120, JString, required = false,
                                 default = nil)
  if valid_614120 != nil:
    section.add "X-Amz-Security-Token", valid_614120
  var valid_614121 = header.getOrDefault("X-Amz-Algorithm")
  valid_614121 = validateParameter(valid_614121, JString, required = false,
                                 default = nil)
  if valid_614121 != nil:
    section.add "X-Amz-Algorithm", valid_614121
  var valid_614122 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614122 = validateParameter(valid_614122, JString, required = false,
                                 default = nil)
  if valid_614122 != nil:
    section.add "X-Amz-SignedHeaders", valid_614122
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_614123 = formData.getOrDefault("RoleName")
  valid_614123 = validateParameter(valid_614123, JString, required = true,
                                 default = nil)
  if valid_614123 != nil:
    section.add "RoleName", valid_614123
  var valid_614124 = formData.getOrDefault("InstanceProfileName")
  valid_614124 = validateParameter(valid_614124, JString, required = true,
                                 default = nil)
  if valid_614124 != nil:
    section.add "InstanceProfileName", valid_614124
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614125: Call_PostRemoveRoleFromInstanceProfile_614111;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_614125.validator(path, query, header, formData, body)
  let scheme = call_614125.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614125.url(scheme.get, call_614125.host, call_614125.base,
                         call_614125.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614125, url, valid)

proc call*(call_614126: Call_PostRemoveRoleFromInstanceProfile_614111;
          RoleName: string; InstanceProfileName: string;
          Action: string = "RemoveRoleFromInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveRoleFromInstanceProfile
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_614127 = newJObject()
  var formData_614128 = newJObject()
  add(formData_614128, "RoleName", newJString(RoleName))
  add(query_614127, "Action", newJString(Action))
  add(formData_614128, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_614127, "Version", newJString(Version))
  result = call_614126.call(nil, query_614127, nil, formData_614128, nil)

var postRemoveRoleFromInstanceProfile* = Call_PostRemoveRoleFromInstanceProfile_614111(
    name: "postRemoveRoleFromInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=RemoveRoleFromInstanceProfile",
    validator: validate_PostRemoveRoleFromInstanceProfile_614112, base: "/",
    url: url_PostRemoveRoleFromInstanceProfile_614113,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromInstanceProfile_614094 = ref object of OpenApiRestCall_609589
proc url_GetRemoveRoleFromInstanceProfile_614096(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromInstanceProfile_614095(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_614097 = query.getOrDefault("RoleName")
  valid_614097 = validateParameter(valid_614097, JString, required = true,
                                 default = nil)
  if valid_614097 != nil:
    section.add "RoleName", valid_614097
  var valid_614098 = query.getOrDefault("Action")
  valid_614098 = validateParameter(valid_614098, JString, required = true, default = newJString(
      "RemoveRoleFromInstanceProfile"))
  if valid_614098 != nil:
    section.add "Action", valid_614098
  var valid_614099 = query.getOrDefault("InstanceProfileName")
  valid_614099 = validateParameter(valid_614099, JString, required = true,
                                 default = nil)
  if valid_614099 != nil:
    section.add "InstanceProfileName", valid_614099
  var valid_614100 = query.getOrDefault("Version")
  valid_614100 = validateParameter(valid_614100, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614100 != nil:
    section.add "Version", valid_614100
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614101 = header.getOrDefault("X-Amz-Signature")
  valid_614101 = validateParameter(valid_614101, JString, required = false,
                                 default = nil)
  if valid_614101 != nil:
    section.add "X-Amz-Signature", valid_614101
  var valid_614102 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614102 = validateParameter(valid_614102, JString, required = false,
                                 default = nil)
  if valid_614102 != nil:
    section.add "X-Amz-Content-Sha256", valid_614102
  var valid_614103 = header.getOrDefault("X-Amz-Date")
  valid_614103 = validateParameter(valid_614103, JString, required = false,
                                 default = nil)
  if valid_614103 != nil:
    section.add "X-Amz-Date", valid_614103
  var valid_614104 = header.getOrDefault("X-Amz-Credential")
  valid_614104 = validateParameter(valid_614104, JString, required = false,
                                 default = nil)
  if valid_614104 != nil:
    section.add "X-Amz-Credential", valid_614104
  var valid_614105 = header.getOrDefault("X-Amz-Security-Token")
  valid_614105 = validateParameter(valid_614105, JString, required = false,
                                 default = nil)
  if valid_614105 != nil:
    section.add "X-Amz-Security-Token", valid_614105
  var valid_614106 = header.getOrDefault("X-Amz-Algorithm")
  valid_614106 = validateParameter(valid_614106, JString, required = false,
                                 default = nil)
  if valid_614106 != nil:
    section.add "X-Amz-Algorithm", valid_614106
  var valid_614107 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614107 = validateParameter(valid_614107, JString, required = false,
                                 default = nil)
  if valid_614107 != nil:
    section.add "X-Amz-SignedHeaders", valid_614107
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614108: Call_GetRemoveRoleFromInstanceProfile_614094;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_614108.validator(path, query, header, formData, body)
  let scheme = call_614108.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614108.url(scheme.get, call_614108.host, call_614108.base,
                         call_614108.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614108, url, valid)

proc call*(call_614109: Call_GetRemoveRoleFromInstanceProfile_614094;
          RoleName: string; InstanceProfileName: string;
          Action: string = "RemoveRoleFromInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveRoleFromInstanceProfile
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_614110 = newJObject()
  add(query_614110, "RoleName", newJString(RoleName))
  add(query_614110, "Action", newJString(Action))
  add(query_614110, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_614110, "Version", newJString(Version))
  result = call_614109.call(nil, query_614110, nil, nil, nil)

var getRemoveRoleFromInstanceProfile* = Call_GetRemoveRoleFromInstanceProfile_614094(
    name: "getRemoveRoleFromInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=RemoveRoleFromInstanceProfile",
    validator: validate_GetRemoveRoleFromInstanceProfile_614095, base: "/",
    url: url_GetRemoveRoleFromInstanceProfile_614096,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveUserFromGroup_614146 = ref object of OpenApiRestCall_609589
proc url_PostRemoveUserFromGroup_614148(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveUserFromGroup_614147(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified user from the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614149 = query.getOrDefault("Action")
  valid_614149 = validateParameter(valid_614149, JString, required = true,
                                 default = newJString("RemoveUserFromGroup"))
  if valid_614149 != nil:
    section.add "Action", valid_614149
  var valid_614150 = query.getOrDefault("Version")
  valid_614150 = validateParameter(valid_614150, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614150 != nil:
    section.add "Version", valid_614150
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614151 = header.getOrDefault("X-Amz-Signature")
  valid_614151 = validateParameter(valid_614151, JString, required = false,
                                 default = nil)
  if valid_614151 != nil:
    section.add "X-Amz-Signature", valid_614151
  var valid_614152 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614152 = validateParameter(valid_614152, JString, required = false,
                                 default = nil)
  if valid_614152 != nil:
    section.add "X-Amz-Content-Sha256", valid_614152
  var valid_614153 = header.getOrDefault("X-Amz-Date")
  valid_614153 = validateParameter(valid_614153, JString, required = false,
                                 default = nil)
  if valid_614153 != nil:
    section.add "X-Amz-Date", valid_614153
  var valid_614154 = header.getOrDefault("X-Amz-Credential")
  valid_614154 = validateParameter(valid_614154, JString, required = false,
                                 default = nil)
  if valid_614154 != nil:
    section.add "X-Amz-Credential", valid_614154
  var valid_614155 = header.getOrDefault("X-Amz-Security-Token")
  valid_614155 = validateParameter(valid_614155, JString, required = false,
                                 default = nil)
  if valid_614155 != nil:
    section.add "X-Amz-Security-Token", valid_614155
  var valid_614156 = header.getOrDefault("X-Amz-Algorithm")
  valid_614156 = validateParameter(valid_614156, JString, required = false,
                                 default = nil)
  if valid_614156 != nil:
    section.add "X-Amz-Algorithm", valid_614156
  var valid_614157 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614157 = validateParameter(valid_614157, JString, required = false,
                                 default = nil)
  if valid_614157 != nil:
    section.add "X-Amz-SignedHeaders", valid_614157
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_614158 = formData.getOrDefault("GroupName")
  valid_614158 = validateParameter(valid_614158, JString, required = true,
                                 default = nil)
  if valid_614158 != nil:
    section.add "GroupName", valid_614158
  var valid_614159 = formData.getOrDefault("UserName")
  valid_614159 = validateParameter(valid_614159, JString, required = true,
                                 default = nil)
  if valid_614159 != nil:
    section.add "UserName", valid_614159
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614160: Call_PostRemoveUserFromGroup_614146; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified user from the specified group.
  ## 
  let valid = call_614160.validator(path, query, header, formData, body)
  let scheme = call_614160.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614160.url(scheme.get, call_614160.host, call_614160.base,
                         call_614160.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614160, url, valid)

proc call*(call_614161: Call_PostRemoveUserFromGroup_614146; GroupName: string;
          UserName: string; Action: string = "RemoveUserFromGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveUserFromGroup
  ## Removes the specified user from the specified group.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614162 = newJObject()
  var formData_614163 = newJObject()
  add(formData_614163, "GroupName", newJString(GroupName))
  add(formData_614163, "UserName", newJString(UserName))
  add(query_614162, "Action", newJString(Action))
  add(query_614162, "Version", newJString(Version))
  result = call_614161.call(nil, query_614162, nil, formData_614163, nil)

var postRemoveUserFromGroup* = Call_PostRemoveUserFromGroup_614146(
    name: "postRemoveUserFromGroup", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=RemoveUserFromGroup",
    validator: validate_PostRemoveUserFromGroup_614147, base: "/",
    url: url_PostRemoveUserFromGroup_614148, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveUserFromGroup_614129 = ref object of OpenApiRestCall_609589
proc url_GetRemoveUserFromGroup_614131(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveUserFromGroup_614130(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified user from the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_614132 = query.getOrDefault("UserName")
  valid_614132 = validateParameter(valid_614132, JString, required = true,
                                 default = nil)
  if valid_614132 != nil:
    section.add "UserName", valid_614132
  var valid_614133 = query.getOrDefault("GroupName")
  valid_614133 = validateParameter(valid_614133, JString, required = true,
                                 default = nil)
  if valid_614133 != nil:
    section.add "GroupName", valid_614133
  var valid_614134 = query.getOrDefault("Action")
  valid_614134 = validateParameter(valid_614134, JString, required = true,
                                 default = newJString("RemoveUserFromGroup"))
  if valid_614134 != nil:
    section.add "Action", valid_614134
  var valid_614135 = query.getOrDefault("Version")
  valid_614135 = validateParameter(valid_614135, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614135 != nil:
    section.add "Version", valid_614135
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614136 = header.getOrDefault("X-Amz-Signature")
  valid_614136 = validateParameter(valid_614136, JString, required = false,
                                 default = nil)
  if valid_614136 != nil:
    section.add "X-Amz-Signature", valid_614136
  var valid_614137 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614137 = validateParameter(valid_614137, JString, required = false,
                                 default = nil)
  if valid_614137 != nil:
    section.add "X-Amz-Content-Sha256", valid_614137
  var valid_614138 = header.getOrDefault("X-Amz-Date")
  valid_614138 = validateParameter(valid_614138, JString, required = false,
                                 default = nil)
  if valid_614138 != nil:
    section.add "X-Amz-Date", valid_614138
  var valid_614139 = header.getOrDefault("X-Amz-Credential")
  valid_614139 = validateParameter(valid_614139, JString, required = false,
                                 default = nil)
  if valid_614139 != nil:
    section.add "X-Amz-Credential", valid_614139
  var valid_614140 = header.getOrDefault("X-Amz-Security-Token")
  valid_614140 = validateParameter(valid_614140, JString, required = false,
                                 default = nil)
  if valid_614140 != nil:
    section.add "X-Amz-Security-Token", valid_614140
  var valid_614141 = header.getOrDefault("X-Amz-Algorithm")
  valid_614141 = validateParameter(valid_614141, JString, required = false,
                                 default = nil)
  if valid_614141 != nil:
    section.add "X-Amz-Algorithm", valid_614141
  var valid_614142 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614142 = validateParameter(valid_614142, JString, required = false,
                                 default = nil)
  if valid_614142 != nil:
    section.add "X-Amz-SignedHeaders", valid_614142
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614143: Call_GetRemoveUserFromGroup_614129; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified user from the specified group.
  ## 
  let valid = call_614143.validator(path, query, header, formData, body)
  let scheme = call_614143.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614143.url(scheme.get, call_614143.host, call_614143.base,
                         call_614143.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614143, url, valid)

proc call*(call_614144: Call_GetRemoveUserFromGroup_614129; UserName: string;
          GroupName: string; Action: string = "RemoveUserFromGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveUserFromGroup
  ## Removes the specified user from the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614145 = newJObject()
  add(query_614145, "UserName", newJString(UserName))
  add(query_614145, "GroupName", newJString(GroupName))
  add(query_614145, "Action", newJString(Action))
  add(query_614145, "Version", newJString(Version))
  result = call_614144.call(nil, query_614145, nil, nil, nil)

var getRemoveUserFromGroup* = Call_GetRemoveUserFromGroup_614129(
    name: "getRemoveUserFromGroup", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=RemoveUserFromGroup",
    validator: validate_GetRemoveUserFromGroup_614130, base: "/",
    url: url_GetRemoveUserFromGroup_614131, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetServiceSpecificCredential_614181 = ref object of OpenApiRestCall_609589
proc url_PostResetServiceSpecificCredential_614183(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetServiceSpecificCredential_614182(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614184 = query.getOrDefault("Action")
  valid_614184 = validateParameter(valid_614184, JString, required = true, default = newJString(
      "ResetServiceSpecificCredential"))
  if valid_614184 != nil:
    section.add "Action", valid_614184
  var valid_614185 = query.getOrDefault("Version")
  valid_614185 = validateParameter(valid_614185, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614185 != nil:
    section.add "Version", valid_614185
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614186 = header.getOrDefault("X-Amz-Signature")
  valid_614186 = validateParameter(valid_614186, JString, required = false,
                                 default = nil)
  if valid_614186 != nil:
    section.add "X-Amz-Signature", valid_614186
  var valid_614187 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614187 = validateParameter(valid_614187, JString, required = false,
                                 default = nil)
  if valid_614187 != nil:
    section.add "X-Amz-Content-Sha256", valid_614187
  var valid_614188 = header.getOrDefault("X-Amz-Date")
  valid_614188 = validateParameter(valid_614188, JString, required = false,
                                 default = nil)
  if valid_614188 != nil:
    section.add "X-Amz-Date", valid_614188
  var valid_614189 = header.getOrDefault("X-Amz-Credential")
  valid_614189 = validateParameter(valid_614189, JString, required = false,
                                 default = nil)
  if valid_614189 != nil:
    section.add "X-Amz-Credential", valid_614189
  var valid_614190 = header.getOrDefault("X-Amz-Security-Token")
  valid_614190 = validateParameter(valid_614190, JString, required = false,
                                 default = nil)
  if valid_614190 != nil:
    section.add "X-Amz-Security-Token", valid_614190
  var valid_614191 = header.getOrDefault("X-Amz-Algorithm")
  valid_614191 = validateParameter(valid_614191, JString, required = false,
                                 default = nil)
  if valid_614191 != nil:
    section.add "X-Amz-Algorithm", valid_614191
  var valid_614192 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614192 = validateParameter(valid_614192, JString, required = false,
                                 default = nil)
  if valid_614192 != nil:
    section.add "X-Amz-SignedHeaders", valid_614192
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_614193 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_614193 = validateParameter(valid_614193, JString, required = true,
                                 default = nil)
  if valid_614193 != nil:
    section.add "ServiceSpecificCredentialId", valid_614193
  var valid_614194 = formData.getOrDefault("UserName")
  valid_614194 = validateParameter(valid_614194, JString, required = false,
                                 default = nil)
  if valid_614194 != nil:
    section.add "UserName", valid_614194
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614195: Call_PostResetServiceSpecificCredential_614181;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  let valid = call_614195.validator(path, query, header, formData, body)
  let scheme = call_614195.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614195.url(scheme.get, call_614195.host, call_614195.base,
                         call_614195.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614195, url, valid)

proc call*(call_614196: Call_PostResetServiceSpecificCredential_614181;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "ResetServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postResetServiceSpecificCredential
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614197 = newJObject()
  var formData_614198 = newJObject()
  add(formData_614198, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(formData_614198, "UserName", newJString(UserName))
  add(query_614197, "Action", newJString(Action))
  add(query_614197, "Version", newJString(Version))
  result = call_614196.call(nil, query_614197, nil, formData_614198, nil)

var postResetServiceSpecificCredential* = Call_PostResetServiceSpecificCredential_614181(
    name: "postResetServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ResetServiceSpecificCredential",
    validator: validate_PostResetServiceSpecificCredential_614182, base: "/",
    url: url_PostResetServiceSpecificCredential_614183,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetServiceSpecificCredential_614164 = ref object of OpenApiRestCall_609589
proc url_GetResetServiceSpecificCredential_614166(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetServiceSpecificCredential_614165(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614167 = query.getOrDefault("UserName")
  valid_614167 = validateParameter(valid_614167, JString, required = false,
                                 default = nil)
  if valid_614167 != nil:
    section.add "UserName", valid_614167
  assert query != nil, "query argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_614168 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_614168 = validateParameter(valid_614168, JString, required = true,
                                 default = nil)
  if valid_614168 != nil:
    section.add "ServiceSpecificCredentialId", valid_614168
  var valid_614169 = query.getOrDefault("Action")
  valid_614169 = validateParameter(valid_614169, JString, required = true, default = newJString(
      "ResetServiceSpecificCredential"))
  if valid_614169 != nil:
    section.add "Action", valid_614169
  var valid_614170 = query.getOrDefault("Version")
  valid_614170 = validateParameter(valid_614170, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614170 != nil:
    section.add "Version", valid_614170
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614171 = header.getOrDefault("X-Amz-Signature")
  valid_614171 = validateParameter(valid_614171, JString, required = false,
                                 default = nil)
  if valid_614171 != nil:
    section.add "X-Amz-Signature", valid_614171
  var valid_614172 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614172 = validateParameter(valid_614172, JString, required = false,
                                 default = nil)
  if valid_614172 != nil:
    section.add "X-Amz-Content-Sha256", valid_614172
  var valid_614173 = header.getOrDefault("X-Amz-Date")
  valid_614173 = validateParameter(valid_614173, JString, required = false,
                                 default = nil)
  if valid_614173 != nil:
    section.add "X-Amz-Date", valid_614173
  var valid_614174 = header.getOrDefault("X-Amz-Credential")
  valid_614174 = validateParameter(valid_614174, JString, required = false,
                                 default = nil)
  if valid_614174 != nil:
    section.add "X-Amz-Credential", valid_614174
  var valid_614175 = header.getOrDefault("X-Amz-Security-Token")
  valid_614175 = validateParameter(valid_614175, JString, required = false,
                                 default = nil)
  if valid_614175 != nil:
    section.add "X-Amz-Security-Token", valid_614175
  var valid_614176 = header.getOrDefault("X-Amz-Algorithm")
  valid_614176 = validateParameter(valid_614176, JString, required = false,
                                 default = nil)
  if valid_614176 != nil:
    section.add "X-Amz-Algorithm", valid_614176
  var valid_614177 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614177 = validateParameter(valid_614177, JString, required = false,
                                 default = nil)
  if valid_614177 != nil:
    section.add "X-Amz-SignedHeaders", valid_614177
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614178: Call_GetResetServiceSpecificCredential_614164;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  let valid = call_614178.validator(path, query, header, formData, body)
  let scheme = call_614178.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614178.url(scheme.get, call_614178.host, call_614178.base,
                         call_614178.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614178, url, valid)

proc call*(call_614179: Call_GetResetServiceSpecificCredential_614164;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "ResetServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getResetServiceSpecificCredential
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614180 = newJObject()
  add(query_614180, "UserName", newJString(UserName))
  add(query_614180, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_614180, "Action", newJString(Action))
  add(query_614180, "Version", newJString(Version))
  result = call_614179.call(nil, query_614180, nil, nil, nil)

var getResetServiceSpecificCredential* = Call_GetResetServiceSpecificCredential_614164(
    name: "getResetServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ResetServiceSpecificCredential",
    validator: validate_GetResetServiceSpecificCredential_614165, base: "/",
    url: url_GetResetServiceSpecificCredential_614166,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResyncMFADevice_614218 = ref object of OpenApiRestCall_609589
proc url_PostResyncMFADevice_614220(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResyncMFADevice_614219(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614221 = query.getOrDefault("Action")
  valid_614221 = validateParameter(valid_614221, JString, required = true,
                                 default = newJString("ResyncMFADevice"))
  if valid_614221 != nil:
    section.add "Action", valid_614221
  var valid_614222 = query.getOrDefault("Version")
  valid_614222 = validateParameter(valid_614222, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614222 != nil:
    section.add "Version", valid_614222
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614223 = header.getOrDefault("X-Amz-Signature")
  valid_614223 = validateParameter(valid_614223, JString, required = false,
                                 default = nil)
  if valid_614223 != nil:
    section.add "X-Amz-Signature", valid_614223
  var valid_614224 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614224 = validateParameter(valid_614224, JString, required = false,
                                 default = nil)
  if valid_614224 != nil:
    section.add "X-Amz-Content-Sha256", valid_614224
  var valid_614225 = header.getOrDefault("X-Amz-Date")
  valid_614225 = validateParameter(valid_614225, JString, required = false,
                                 default = nil)
  if valid_614225 != nil:
    section.add "X-Amz-Date", valid_614225
  var valid_614226 = header.getOrDefault("X-Amz-Credential")
  valid_614226 = validateParameter(valid_614226, JString, required = false,
                                 default = nil)
  if valid_614226 != nil:
    section.add "X-Amz-Credential", valid_614226
  var valid_614227 = header.getOrDefault("X-Amz-Security-Token")
  valid_614227 = validateParameter(valid_614227, JString, required = false,
                                 default = nil)
  if valid_614227 != nil:
    section.add "X-Amz-Security-Token", valid_614227
  var valid_614228 = header.getOrDefault("X-Amz-Algorithm")
  valid_614228 = validateParameter(valid_614228, JString, required = false,
                                 default = nil)
  if valid_614228 != nil:
    section.add "X-Amz-Algorithm", valid_614228
  var valid_614229 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614229 = validateParameter(valid_614229, JString, required = false,
                                 default = nil)
  if valid_614229 != nil:
    section.add "X-Amz-SignedHeaders", valid_614229
  result.add "header", section
  ## parameters in `formData` object:
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   SerialNumber: JString (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AuthenticationCode2` field"
  var valid_614230 = formData.getOrDefault("AuthenticationCode2")
  valid_614230 = validateParameter(valid_614230, JString, required = true,
                                 default = nil)
  if valid_614230 != nil:
    section.add "AuthenticationCode2", valid_614230
  var valid_614231 = formData.getOrDefault("SerialNumber")
  valid_614231 = validateParameter(valid_614231, JString, required = true,
                                 default = nil)
  if valid_614231 != nil:
    section.add "SerialNumber", valid_614231
  var valid_614232 = formData.getOrDefault("UserName")
  valid_614232 = validateParameter(valid_614232, JString, required = true,
                                 default = nil)
  if valid_614232 != nil:
    section.add "UserName", valid_614232
  var valid_614233 = formData.getOrDefault("AuthenticationCode1")
  valid_614233 = validateParameter(valid_614233, JString, required = true,
                                 default = nil)
  if valid_614233 != nil:
    section.add "AuthenticationCode1", valid_614233
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614234: Call_PostResyncMFADevice_614218; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614234.validator(path, query, header, formData, body)
  let scheme = call_614234.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614234.url(scheme.get, call_614234.host, call_614234.base,
                         call_614234.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614234, url, valid)

proc call*(call_614235: Call_PostResyncMFADevice_614218;
          AuthenticationCode2: string; SerialNumber: string; UserName: string;
          AuthenticationCode1: string; Action: string = "ResyncMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postResyncMFADevice
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   SerialNumber: string (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   Version: string (required)
  var query_614236 = newJObject()
  var formData_614237 = newJObject()
  add(formData_614237, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(formData_614237, "SerialNumber", newJString(SerialNumber))
  add(formData_614237, "UserName", newJString(UserName))
  add(query_614236, "Action", newJString(Action))
  add(formData_614237, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_614236, "Version", newJString(Version))
  result = call_614235.call(nil, query_614236, nil, formData_614237, nil)

var postResyncMFADevice* = Call_PostResyncMFADevice_614218(
    name: "postResyncMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ResyncMFADevice",
    validator: validate_PostResyncMFADevice_614219, base: "/",
    url: url_PostResyncMFADevice_614220, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResyncMFADevice_614199 = ref object of OpenApiRestCall_609589
proc url_GetResyncMFADevice_614201(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResyncMFADevice_614200(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   SerialNumber: JString (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_614202 = query.getOrDefault("UserName")
  valid_614202 = validateParameter(valid_614202, JString, required = true,
                                 default = nil)
  if valid_614202 != nil:
    section.add "UserName", valid_614202
  var valid_614203 = query.getOrDefault("AuthenticationCode1")
  valid_614203 = validateParameter(valid_614203, JString, required = true,
                                 default = nil)
  if valid_614203 != nil:
    section.add "AuthenticationCode1", valid_614203
  var valid_614204 = query.getOrDefault("AuthenticationCode2")
  valid_614204 = validateParameter(valid_614204, JString, required = true,
                                 default = nil)
  if valid_614204 != nil:
    section.add "AuthenticationCode2", valid_614204
  var valid_614205 = query.getOrDefault("SerialNumber")
  valid_614205 = validateParameter(valid_614205, JString, required = true,
                                 default = nil)
  if valid_614205 != nil:
    section.add "SerialNumber", valid_614205
  var valid_614206 = query.getOrDefault("Action")
  valid_614206 = validateParameter(valid_614206, JString, required = true,
                                 default = newJString("ResyncMFADevice"))
  if valid_614206 != nil:
    section.add "Action", valid_614206
  var valid_614207 = query.getOrDefault("Version")
  valid_614207 = validateParameter(valid_614207, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614207 != nil:
    section.add "Version", valid_614207
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614208 = header.getOrDefault("X-Amz-Signature")
  valid_614208 = validateParameter(valid_614208, JString, required = false,
                                 default = nil)
  if valid_614208 != nil:
    section.add "X-Amz-Signature", valid_614208
  var valid_614209 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614209 = validateParameter(valid_614209, JString, required = false,
                                 default = nil)
  if valid_614209 != nil:
    section.add "X-Amz-Content-Sha256", valid_614209
  var valid_614210 = header.getOrDefault("X-Amz-Date")
  valid_614210 = validateParameter(valid_614210, JString, required = false,
                                 default = nil)
  if valid_614210 != nil:
    section.add "X-Amz-Date", valid_614210
  var valid_614211 = header.getOrDefault("X-Amz-Credential")
  valid_614211 = validateParameter(valid_614211, JString, required = false,
                                 default = nil)
  if valid_614211 != nil:
    section.add "X-Amz-Credential", valid_614211
  var valid_614212 = header.getOrDefault("X-Amz-Security-Token")
  valid_614212 = validateParameter(valid_614212, JString, required = false,
                                 default = nil)
  if valid_614212 != nil:
    section.add "X-Amz-Security-Token", valid_614212
  var valid_614213 = header.getOrDefault("X-Amz-Algorithm")
  valid_614213 = validateParameter(valid_614213, JString, required = false,
                                 default = nil)
  if valid_614213 != nil:
    section.add "X-Amz-Algorithm", valid_614213
  var valid_614214 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614214 = validateParameter(valid_614214, JString, required = false,
                                 default = nil)
  if valid_614214 != nil:
    section.add "X-Amz-SignedHeaders", valid_614214
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614215: Call_GetResyncMFADevice_614199; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614215.validator(path, query, header, formData, body)
  let scheme = call_614215.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614215.url(scheme.get, call_614215.host, call_614215.base,
                         call_614215.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614215, url, valid)

proc call*(call_614216: Call_GetResyncMFADevice_614199; UserName: string;
          AuthenticationCode1: string; AuthenticationCode2: string;
          SerialNumber: string; Action: string = "ResyncMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getResyncMFADevice
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   SerialNumber: string (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614217 = newJObject()
  add(query_614217, "UserName", newJString(UserName))
  add(query_614217, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_614217, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_614217, "SerialNumber", newJString(SerialNumber))
  add(query_614217, "Action", newJString(Action))
  add(query_614217, "Version", newJString(Version))
  result = call_614216.call(nil, query_614217, nil, nil, nil)

var getResyncMFADevice* = Call_GetResyncMFADevice_614199(
    name: "getResyncMFADevice", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ResyncMFADevice", validator: validate_GetResyncMFADevice_614200,
    base: "/", url: url_GetResyncMFADevice_614201,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetDefaultPolicyVersion_614255 = ref object of OpenApiRestCall_609589
proc url_PostSetDefaultPolicyVersion_614257(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetDefaultPolicyVersion_614256(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614258 = query.getOrDefault("Action")
  valid_614258 = validateParameter(valid_614258, JString, required = true, default = newJString(
      "SetDefaultPolicyVersion"))
  if valid_614258 != nil:
    section.add "Action", valid_614258
  var valid_614259 = query.getOrDefault("Version")
  valid_614259 = validateParameter(valid_614259, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614259 != nil:
    section.add "Version", valid_614259
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614260 = header.getOrDefault("X-Amz-Signature")
  valid_614260 = validateParameter(valid_614260, JString, required = false,
                                 default = nil)
  if valid_614260 != nil:
    section.add "X-Amz-Signature", valid_614260
  var valid_614261 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614261 = validateParameter(valid_614261, JString, required = false,
                                 default = nil)
  if valid_614261 != nil:
    section.add "X-Amz-Content-Sha256", valid_614261
  var valid_614262 = header.getOrDefault("X-Amz-Date")
  valid_614262 = validateParameter(valid_614262, JString, required = false,
                                 default = nil)
  if valid_614262 != nil:
    section.add "X-Amz-Date", valid_614262
  var valid_614263 = header.getOrDefault("X-Amz-Credential")
  valid_614263 = validateParameter(valid_614263, JString, required = false,
                                 default = nil)
  if valid_614263 != nil:
    section.add "X-Amz-Credential", valid_614263
  var valid_614264 = header.getOrDefault("X-Amz-Security-Token")
  valid_614264 = validateParameter(valid_614264, JString, required = false,
                                 default = nil)
  if valid_614264 != nil:
    section.add "X-Amz-Security-Token", valid_614264
  var valid_614265 = header.getOrDefault("X-Amz-Algorithm")
  valid_614265 = validateParameter(valid_614265, JString, required = false,
                                 default = nil)
  if valid_614265 != nil:
    section.add "X-Amz-Algorithm", valid_614265
  var valid_614266 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614266 = validateParameter(valid_614266, JString, required = false,
                                 default = nil)
  if valid_614266 != nil:
    section.add "X-Amz-SignedHeaders", valid_614266
  result.add "header", section
  ## parameters in `formData` object:
  ##   VersionId: JString (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `VersionId` field"
  var valid_614267 = formData.getOrDefault("VersionId")
  valid_614267 = validateParameter(valid_614267, JString, required = true,
                                 default = nil)
  if valid_614267 != nil:
    section.add "VersionId", valid_614267
  var valid_614268 = formData.getOrDefault("PolicyArn")
  valid_614268 = validateParameter(valid_614268, JString, required = true,
                                 default = nil)
  if valid_614268 != nil:
    section.add "PolicyArn", valid_614268
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614269: Call_PostSetDefaultPolicyVersion_614255; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614269.validator(path, query, header, formData, body)
  let scheme = call_614269.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614269.url(scheme.get, call_614269.host, call_614269.base,
                         call_614269.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614269, url, valid)

proc call*(call_614270: Call_PostSetDefaultPolicyVersion_614255; VersionId: string;
          PolicyArn: string; Action: string = "SetDefaultPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postSetDefaultPolicyVersion
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614271 = newJObject()
  var formData_614272 = newJObject()
  add(formData_614272, "VersionId", newJString(VersionId))
  add(formData_614272, "PolicyArn", newJString(PolicyArn))
  add(query_614271, "Action", newJString(Action))
  add(query_614271, "Version", newJString(Version))
  result = call_614270.call(nil, query_614271, nil, formData_614272, nil)

var postSetDefaultPolicyVersion* = Call_PostSetDefaultPolicyVersion_614255(
    name: "postSetDefaultPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SetDefaultPolicyVersion",
    validator: validate_PostSetDefaultPolicyVersion_614256, base: "/",
    url: url_PostSetDefaultPolicyVersion_614257,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetDefaultPolicyVersion_614238 = ref object of OpenApiRestCall_609589
proc url_GetSetDefaultPolicyVersion_614240(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetDefaultPolicyVersion_614239(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VersionId: JString (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `VersionId` field"
  var valid_614241 = query.getOrDefault("VersionId")
  valid_614241 = validateParameter(valid_614241, JString, required = true,
                                 default = nil)
  if valid_614241 != nil:
    section.add "VersionId", valid_614241
  var valid_614242 = query.getOrDefault("PolicyArn")
  valid_614242 = validateParameter(valid_614242, JString, required = true,
                                 default = nil)
  if valid_614242 != nil:
    section.add "PolicyArn", valid_614242
  var valid_614243 = query.getOrDefault("Action")
  valid_614243 = validateParameter(valid_614243, JString, required = true, default = newJString(
      "SetDefaultPolicyVersion"))
  if valid_614243 != nil:
    section.add "Action", valid_614243
  var valid_614244 = query.getOrDefault("Version")
  valid_614244 = validateParameter(valid_614244, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614244 != nil:
    section.add "Version", valid_614244
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614245 = header.getOrDefault("X-Amz-Signature")
  valid_614245 = validateParameter(valid_614245, JString, required = false,
                                 default = nil)
  if valid_614245 != nil:
    section.add "X-Amz-Signature", valid_614245
  var valid_614246 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614246 = validateParameter(valid_614246, JString, required = false,
                                 default = nil)
  if valid_614246 != nil:
    section.add "X-Amz-Content-Sha256", valid_614246
  var valid_614247 = header.getOrDefault("X-Amz-Date")
  valid_614247 = validateParameter(valid_614247, JString, required = false,
                                 default = nil)
  if valid_614247 != nil:
    section.add "X-Amz-Date", valid_614247
  var valid_614248 = header.getOrDefault("X-Amz-Credential")
  valid_614248 = validateParameter(valid_614248, JString, required = false,
                                 default = nil)
  if valid_614248 != nil:
    section.add "X-Amz-Credential", valid_614248
  var valid_614249 = header.getOrDefault("X-Amz-Security-Token")
  valid_614249 = validateParameter(valid_614249, JString, required = false,
                                 default = nil)
  if valid_614249 != nil:
    section.add "X-Amz-Security-Token", valid_614249
  var valid_614250 = header.getOrDefault("X-Amz-Algorithm")
  valid_614250 = validateParameter(valid_614250, JString, required = false,
                                 default = nil)
  if valid_614250 != nil:
    section.add "X-Amz-Algorithm", valid_614250
  var valid_614251 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614251 = validateParameter(valid_614251, JString, required = false,
                                 default = nil)
  if valid_614251 != nil:
    section.add "X-Amz-SignedHeaders", valid_614251
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614252: Call_GetSetDefaultPolicyVersion_614238; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614252.validator(path, query, header, formData, body)
  let scheme = call_614252.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614252.url(scheme.get, call_614252.host, call_614252.base,
                         call_614252.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614252, url, valid)

proc call*(call_614253: Call_GetSetDefaultPolicyVersion_614238; VersionId: string;
          PolicyArn: string; Action: string = "SetDefaultPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getSetDefaultPolicyVersion
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614254 = newJObject()
  add(query_614254, "VersionId", newJString(VersionId))
  add(query_614254, "PolicyArn", newJString(PolicyArn))
  add(query_614254, "Action", newJString(Action))
  add(query_614254, "Version", newJString(Version))
  result = call_614253.call(nil, query_614254, nil, nil, nil)

var getSetDefaultPolicyVersion* = Call_GetSetDefaultPolicyVersion_614238(
    name: "getSetDefaultPolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SetDefaultPolicyVersion",
    validator: validate_GetSetDefaultPolicyVersion_614239, base: "/",
    url: url_GetSetDefaultPolicyVersion_614240,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetSecurityTokenServicePreferences_614289 = ref object of OpenApiRestCall_609589
proc url_PostSetSecurityTokenServicePreferences_614291(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetSecurityTokenServicePreferences_614290(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614292 = query.getOrDefault("Action")
  valid_614292 = validateParameter(valid_614292, JString, required = true, default = newJString(
      "SetSecurityTokenServicePreferences"))
  if valid_614292 != nil:
    section.add "Action", valid_614292
  var valid_614293 = query.getOrDefault("Version")
  valid_614293 = validateParameter(valid_614293, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614293 != nil:
    section.add "Version", valid_614293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614294 = header.getOrDefault("X-Amz-Signature")
  valid_614294 = validateParameter(valid_614294, JString, required = false,
                                 default = nil)
  if valid_614294 != nil:
    section.add "X-Amz-Signature", valid_614294
  var valid_614295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614295 = validateParameter(valid_614295, JString, required = false,
                                 default = nil)
  if valid_614295 != nil:
    section.add "X-Amz-Content-Sha256", valid_614295
  var valid_614296 = header.getOrDefault("X-Amz-Date")
  valid_614296 = validateParameter(valid_614296, JString, required = false,
                                 default = nil)
  if valid_614296 != nil:
    section.add "X-Amz-Date", valid_614296
  var valid_614297 = header.getOrDefault("X-Amz-Credential")
  valid_614297 = validateParameter(valid_614297, JString, required = false,
                                 default = nil)
  if valid_614297 != nil:
    section.add "X-Amz-Credential", valid_614297
  var valid_614298 = header.getOrDefault("X-Amz-Security-Token")
  valid_614298 = validateParameter(valid_614298, JString, required = false,
                                 default = nil)
  if valid_614298 != nil:
    section.add "X-Amz-Security-Token", valid_614298
  var valid_614299 = header.getOrDefault("X-Amz-Algorithm")
  valid_614299 = validateParameter(valid_614299, JString, required = false,
                                 default = nil)
  if valid_614299 != nil:
    section.add "X-Amz-Algorithm", valid_614299
  var valid_614300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614300 = validateParameter(valid_614300, JString, required = false,
                                 default = nil)
  if valid_614300 != nil:
    section.add "X-Amz-SignedHeaders", valid_614300
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalEndpointTokenVersion: JString (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  var valid_614301 = formData.getOrDefault("GlobalEndpointTokenVersion")
  valid_614301 = validateParameter(valid_614301, JString, required = true,
                                 default = newJString("v1Token"))
  if valid_614301 != nil:
    section.add "GlobalEndpointTokenVersion", valid_614301
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614302: Call_PostSetSecurityTokenServicePreferences_614289;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  let valid = call_614302.validator(path, query, header, formData, body)
  let scheme = call_614302.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614302.url(scheme.get, call_614302.host, call_614302.base,
                         call_614302.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614302, url, valid)

proc call*(call_614303: Call_PostSetSecurityTokenServicePreferences_614289;
          GlobalEndpointTokenVersion: string = "v1Token";
          Action: string = "SetSecurityTokenServicePreferences";
          Version: string = "2010-05-08"): Recallable =
  ## postSetSecurityTokenServicePreferences
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ##   GlobalEndpointTokenVersion: string (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614304 = newJObject()
  var formData_614305 = newJObject()
  add(formData_614305, "GlobalEndpointTokenVersion",
      newJString(GlobalEndpointTokenVersion))
  add(query_614304, "Action", newJString(Action))
  add(query_614304, "Version", newJString(Version))
  result = call_614303.call(nil, query_614304, nil, formData_614305, nil)

var postSetSecurityTokenServicePreferences* = Call_PostSetSecurityTokenServicePreferences_614289(
    name: "postSetSecurityTokenServicePreferences", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=SetSecurityTokenServicePreferences",
    validator: validate_PostSetSecurityTokenServicePreferences_614290, base: "/",
    url: url_PostSetSecurityTokenServicePreferences_614291,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetSecurityTokenServicePreferences_614273 = ref object of OpenApiRestCall_609589
proc url_GetSetSecurityTokenServicePreferences_614275(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetSecurityTokenServicePreferences_614274(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalEndpointTokenVersion: JString (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614276 = query.getOrDefault("GlobalEndpointTokenVersion")
  valid_614276 = validateParameter(valid_614276, JString, required = true,
                                 default = newJString("v1Token"))
  if valid_614276 != nil:
    section.add "GlobalEndpointTokenVersion", valid_614276
  var valid_614277 = query.getOrDefault("Action")
  valid_614277 = validateParameter(valid_614277, JString, required = true, default = newJString(
      "SetSecurityTokenServicePreferences"))
  if valid_614277 != nil:
    section.add "Action", valid_614277
  var valid_614278 = query.getOrDefault("Version")
  valid_614278 = validateParameter(valid_614278, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614278 != nil:
    section.add "Version", valid_614278
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614279 = header.getOrDefault("X-Amz-Signature")
  valid_614279 = validateParameter(valid_614279, JString, required = false,
                                 default = nil)
  if valid_614279 != nil:
    section.add "X-Amz-Signature", valid_614279
  var valid_614280 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614280 = validateParameter(valid_614280, JString, required = false,
                                 default = nil)
  if valid_614280 != nil:
    section.add "X-Amz-Content-Sha256", valid_614280
  var valid_614281 = header.getOrDefault("X-Amz-Date")
  valid_614281 = validateParameter(valid_614281, JString, required = false,
                                 default = nil)
  if valid_614281 != nil:
    section.add "X-Amz-Date", valid_614281
  var valid_614282 = header.getOrDefault("X-Amz-Credential")
  valid_614282 = validateParameter(valid_614282, JString, required = false,
                                 default = nil)
  if valid_614282 != nil:
    section.add "X-Amz-Credential", valid_614282
  var valid_614283 = header.getOrDefault("X-Amz-Security-Token")
  valid_614283 = validateParameter(valid_614283, JString, required = false,
                                 default = nil)
  if valid_614283 != nil:
    section.add "X-Amz-Security-Token", valid_614283
  var valid_614284 = header.getOrDefault("X-Amz-Algorithm")
  valid_614284 = validateParameter(valid_614284, JString, required = false,
                                 default = nil)
  if valid_614284 != nil:
    section.add "X-Amz-Algorithm", valid_614284
  var valid_614285 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614285 = validateParameter(valid_614285, JString, required = false,
                                 default = nil)
  if valid_614285 != nil:
    section.add "X-Amz-SignedHeaders", valid_614285
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614286: Call_GetSetSecurityTokenServicePreferences_614273;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  let valid = call_614286.validator(path, query, header, formData, body)
  let scheme = call_614286.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614286.url(scheme.get, call_614286.host, call_614286.base,
                         call_614286.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614286, url, valid)

proc call*(call_614287: Call_GetSetSecurityTokenServicePreferences_614273;
          GlobalEndpointTokenVersion: string = "v1Token";
          Action: string = "SetSecurityTokenServicePreferences";
          Version: string = "2010-05-08"): Recallable =
  ## getSetSecurityTokenServicePreferences
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ##   GlobalEndpointTokenVersion: string (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614288 = newJObject()
  add(query_614288, "GlobalEndpointTokenVersion",
      newJString(GlobalEndpointTokenVersion))
  add(query_614288, "Action", newJString(Action))
  add(query_614288, "Version", newJString(Version))
  result = call_614287.call(nil, query_614288, nil, nil, nil)

var getSetSecurityTokenServicePreferences* = Call_GetSetSecurityTokenServicePreferences_614273(
    name: "getSetSecurityTokenServicePreferences", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=SetSecurityTokenServicePreferences",
    validator: validate_GetSetSecurityTokenServicePreferences_614274, base: "/",
    url: url_GetSetSecurityTokenServicePreferences_614275,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSimulateCustomPolicy_614332 = ref object of OpenApiRestCall_609589
proc url_PostSimulateCustomPolicy_614334(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSimulateCustomPolicy_614333(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614335 = query.getOrDefault("Action")
  valid_614335 = validateParameter(valid_614335, JString, required = true,
                                 default = newJString("SimulateCustomPolicy"))
  if valid_614335 != nil:
    section.add "Action", valid_614335
  var valid_614336 = query.getOrDefault("Version")
  valid_614336 = validateParameter(valid_614336, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614336 != nil:
    section.add "Version", valid_614336
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614337 = header.getOrDefault("X-Amz-Signature")
  valid_614337 = validateParameter(valid_614337, JString, required = false,
                                 default = nil)
  if valid_614337 != nil:
    section.add "X-Amz-Signature", valid_614337
  var valid_614338 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614338 = validateParameter(valid_614338, JString, required = false,
                                 default = nil)
  if valid_614338 != nil:
    section.add "X-Amz-Content-Sha256", valid_614338
  var valid_614339 = header.getOrDefault("X-Amz-Date")
  valid_614339 = validateParameter(valid_614339, JString, required = false,
                                 default = nil)
  if valid_614339 != nil:
    section.add "X-Amz-Date", valid_614339
  var valid_614340 = header.getOrDefault("X-Amz-Credential")
  valid_614340 = validateParameter(valid_614340, JString, required = false,
                                 default = nil)
  if valid_614340 != nil:
    section.add "X-Amz-Credential", valid_614340
  var valid_614341 = header.getOrDefault("X-Amz-Security-Token")
  valid_614341 = validateParameter(valid_614341, JString, required = false,
                                 default = nil)
  if valid_614341 != nil:
    section.add "X-Amz-Security-Token", valid_614341
  var valid_614342 = header.getOrDefault("X-Amz-Algorithm")
  valid_614342 = validateParameter(valid_614342, JString, required = false,
                                 default = nil)
  if valid_614342 != nil:
    section.add "X-Amz-Algorithm", valid_614342
  var valid_614343 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614343 = validateParameter(valid_614343, JString, required = false,
                                 default = nil)
  if valid_614343 != nil:
    section.add "X-Amz-SignedHeaders", valid_614343
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that an IAM entity can have. You can input only one permissions boundary when you pass a policy to this operation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string that contains the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceOwner: JString
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  section = newJObject()
  var valid_614344 = formData.getOrDefault("ResourceArns")
  valid_614344 = validateParameter(valid_614344, JArray, required = false,
                                 default = nil)
  if valid_614344 != nil:
    section.add "ResourceArns", valid_614344
  var valid_614345 = formData.getOrDefault("ContextEntries")
  valid_614345 = validateParameter(valid_614345, JArray, required = false,
                                 default = nil)
  if valid_614345 != nil:
    section.add "ContextEntries", valid_614345
  var valid_614346 = formData.getOrDefault("CallerArn")
  valid_614346 = validateParameter(valid_614346, JString, required = false,
                                 default = nil)
  if valid_614346 != nil:
    section.add "CallerArn", valid_614346
  var valid_614347 = formData.getOrDefault("ResourceHandlingOption")
  valid_614347 = validateParameter(valid_614347, JString, required = false,
                                 default = nil)
  if valid_614347 != nil:
    section.add "ResourceHandlingOption", valid_614347
  var valid_614348 = formData.getOrDefault("PermissionsBoundaryPolicyInputList")
  valid_614348 = validateParameter(valid_614348, JArray, required = false,
                                 default = nil)
  if valid_614348 != nil:
    section.add "PermissionsBoundaryPolicyInputList", valid_614348
  var valid_614349 = formData.getOrDefault("Marker")
  valid_614349 = validateParameter(valid_614349, JString, required = false,
                                 default = nil)
  if valid_614349 != nil:
    section.add "Marker", valid_614349
  assert formData != nil,
        "formData argument is necessary due to required `ActionNames` field"
  var valid_614350 = formData.getOrDefault("ActionNames")
  valid_614350 = validateParameter(valid_614350, JArray, required = true, default = nil)
  if valid_614350 != nil:
    section.add "ActionNames", valid_614350
  var valid_614351 = formData.getOrDefault("MaxItems")
  valid_614351 = validateParameter(valid_614351, JInt, required = false, default = nil)
  if valid_614351 != nil:
    section.add "MaxItems", valid_614351
  var valid_614352 = formData.getOrDefault("ResourcePolicy")
  valid_614352 = validateParameter(valid_614352, JString, required = false,
                                 default = nil)
  if valid_614352 != nil:
    section.add "ResourcePolicy", valid_614352
  var valid_614353 = formData.getOrDefault("PolicyInputList")
  valid_614353 = validateParameter(valid_614353, JArray, required = true, default = nil)
  if valid_614353 != nil:
    section.add "PolicyInputList", valid_614353
  var valid_614354 = formData.getOrDefault("ResourceOwner")
  valid_614354 = validateParameter(valid_614354, JString, required = false,
                                 default = nil)
  if valid_614354 != nil:
    section.add "ResourceOwner", valid_614354
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614355: Call_PostSimulateCustomPolicy_614332; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_614355.validator(path, query, header, formData, body)
  let scheme = call_614355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614355.url(scheme.get, call_614355.host, call_614355.base,
                         call_614355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614355, url, valid)

proc call*(call_614356: Call_PostSimulateCustomPolicy_614332;
          ActionNames: JsonNode; PolicyInputList: JsonNode;
          ResourceArns: JsonNode = nil; ContextEntries: JsonNode = nil;
          CallerArn: string = ""; ResourceHandlingOption: string = "";
          PermissionsBoundaryPolicyInputList: JsonNode = nil; Marker: string = "";
          Action: string = "SimulateCustomPolicy"; MaxItems: int = 0;
          ResourcePolicy: string = ""; Version: string = "2010-05-08";
          ResourceOwner: string = ""): Recallable =
  ## postSimulateCustomPolicy
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that an IAM entity can have. You can input only one permissions boundary when you pass a policy to this operation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string that contains the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Version: string (required)
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceOwner: string
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  var query_614357 = newJObject()
  var formData_614358 = newJObject()
  if ResourceArns != nil:
    formData_614358.add "ResourceArns", ResourceArns
  if ContextEntries != nil:
    formData_614358.add "ContextEntries", ContextEntries
  add(formData_614358, "CallerArn", newJString(CallerArn))
  add(formData_614358, "ResourceHandlingOption",
      newJString(ResourceHandlingOption))
  if PermissionsBoundaryPolicyInputList != nil:
    formData_614358.add "PermissionsBoundaryPolicyInputList",
                       PermissionsBoundaryPolicyInputList
  add(formData_614358, "Marker", newJString(Marker))
  if ActionNames != nil:
    formData_614358.add "ActionNames", ActionNames
  add(query_614357, "Action", newJString(Action))
  add(formData_614358, "MaxItems", newJInt(MaxItems))
  add(formData_614358, "ResourcePolicy", newJString(ResourcePolicy))
  add(query_614357, "Version", newJString(Version))
  if PolicyInputList != nil:
    formData_614358.add "PolicyInputList", PolicyInputList
  add(formData_614358, "ResourceOwner", newJString(ResourceOwner))
  result = call_614356.call(nil, query_614357, nil, formData_614358, nil)

var postSimulateCustomPolicy* = Call_PostSimulateCustomPolicy_614332(
    name: "postSimulateCustomPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SimulateCustomPolicy",
    validator: validate_PostSimulateCustomPolicy_614333, base: "/",
    url: url_PostSimulateCustomPolicy_614334, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSimulateCustomPolicy_614306 = ref object of OpenApiRestCall_609589
proc url_GetSimulateCustomPolicy_614308(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSimulateCustomPolicy_614307(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: JString
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that an IAM entity can have. You can input only one permissions boundary when you pass a policy to this operation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string that contains the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  section = newJObject()
  var valid_614309 = query.getOrDefault("Marker")
  valid_614309 = validateParameter(valid_614309, JString, required = false,
                                 default = nil)
  if valid_614309 != nil:
    section.add "Marker", valid_614309
  var valid_614310 = query.getOrDefault("ResourceOwner")
  valid_614310 = validateParameter(valid_614310, JString, required = false,
                                 default = nil)
  if valid_614310 != nil:
    section.add "ResourceOwner", valid_614310
  var valid_614311 = query.getOrDefault("MaxItems")
  valid_614311 = validateParameter(valid_614311, JInt, required = false, default = nil)
  if valid_614311 != nil:
    section.add "MaxItems", valid_614311
  var valid_614312 = query.getOrDefault("ResourceArns")
  valid_614312 = validateParameter(valid_614312, JArray, required = false,
                                 default = nil)
  if valid_614312 != nil:
    section.add "ResourceArns", valid_614312
  var valid_614313 = query.getOrDefault("ResourcePolicy")
  valid_614313 = validateParameter(valid_614313, JString, required = false,
                                 default = nil)
  if valid_614313 != nil:
    section.add "ResourcePolicy", valid_614313
  assert query != nil,
        "query argument is necessary due to required `PolicyInputList` field"
  var valid_614314 = query.getOrDefault("PolicyInputList")
  valid_614314 = validateParameter(valid_614314, JArray, required = true, default = nil)
  if valid_614314 != nil:
    section.add "PolicyInputList", valid_614314
  var valid_614315 = query.getOrDefault("CallerArn")
  valid_614315 = validateParameter(valid_614315, JString, required = false,
                                 default = nil)
  if valid_614315 != nil:
    section.add "CallerArn", valid_614315
  var valid_614316 = query.getOrDefault("PermissionsBoundaryPolicyInputList")
  valid_614316 = validateParameter(valid_614316, JArray, required = false,
                                 default = nil)
  if valid_614316 != nil:
    section.add "PermissionsBoundaryPolicyInputList", valid_614316
  var valid_614317 = query.getOrDefault("ResourceHandlingOption")
  valid_614317 = validateParameter(valid_614317, JString, required = false,
                                 default = nil)
  if valid_614317 != nil:
    section.add "ResourceHandlingOption", valid_614317
  var valid_614318 = query.getOrDefault("Action")
  valid_614318 = validateParameter(valid_614318, JString, required = true,
                                 default = newJString("SimulateCustomPolicy"))
  if valid_614318 != nil:
    section.add "Action", valid_614318
  var valid_614319 = query.getOrDefault("Version")
  valid_614319 = validateParameter(valid_614319, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614319 != nil:
    section.add "Version", valid_614319
  var valid_614320 = query.getOrDefault("ActionNames")
  valid_614320 = validateParameter(valid_614320, JArray, required = true, default = nil)
  if valid_614320 != nil:
    section.add "ActionNames", valid_614320
  var valid_614321 = query.getOrDefault("ContextEntries")
  valid_614321 = validateParameter(valid_614321, JArray, required = false,
                                 default = nil)
  if valid_614321 != nil:
    section.add "ContextEntries", valid_614321
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614322 = header.getOrDefault("X-Amz-Signature")
  valid_614322 = validateParameter(valid_614322, JString, required = false,
                                 default = nil)
  if valid_614322 != nil:
    section.add "X-Amz-Signature", valid_614322
  var valid_614323 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614323 = validateParameter(valid_614323, JString, required = false,
                                 default = nil)
  if valid_614323 != nil:
    section.add "X-Amz-Content-Sha256", valid_614323
  var valid_614324 = header.getOrDefault("X-Amz-Date")
  valid_614324 = validateParameter(valid_614324, JString, required = false,
                                 default = nil)
  if valid_614324 != nil:
    section.add "X-Amz-Date", valid_614324
  var valid_614325 = header.getOrDefault("X-Amz-Credential")
  valid_614325 = validateParameter(valid_614325, JString, required = false,
                                 default = nil)
  if valid_614325 != nil:
    section.add "X-Amz-Credential", valid_614325
  var valid_614326 = header.getOrDefault("X-Amz-Security-Token")
  valid_614326 = validateParameter(valid_614326, JString, required = false,
                                 default = nil)
  if valid_614326 != nil:
    section.add "X-Amz-Security-Token", valid_614326
  var valid_614327 = header.getOrDefault("X-Amz-Algorithm")
  valid_614327 = validateParameter(valid_614327, JString, required = false,
                                 default = nil)
  if valid_614327 != nil:
    section.add "X-Amz-Algorithm", valid_614327
  var valid_614328 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614328 = validateParameter(valid_614328, JString, required = false,
                                 default = nil)
  if valid_614328 != nil:
    section.add "X-Amz-SignedHeaders", valid_614328
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614329: Call_GetSimulateCustomPolicy_614306; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_614329.validator(path, query, header, formData, body)
  let scheme = call_614329.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614329.url(scheme.get, call_614329.host, call_614329.base,
                         call_614329.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614329, url, valid)

proc call*(call_614330: Call_GetSimulateCustomPolicy_614306;
          PolicyInputList: JsonNode; ActionNames: JsonNode; Marker: string = "";
          ResourceOwner: string = ""; MaxItems: int = 0; ResourceArns: JsonNode = nil;
          ResourcePolicy: string = ""; CallerArn: string = "";
          PermissionsBoundaryPolicyInputList: JsonNode = nil;
          ResourceHandlingOption: string = "";
          Action: string = "SimulateCustomPolicy"; Version: string = "2010-05-08";
          ContextEntries: JsonNode = nil): Recallable =
  ## getSimulateCustomPolicy
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: string
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that an IAM entity can have. You can input only one permissions boundary when you pass a policy to this operation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string that contains the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  var query_614331 = newJObject()
  add(query_614331, "Marker", newJString(Marker))
  add(query_614331, "ResourceOwner", newJString(ResourceOwner))
  add(query_614331, "MaxItems", newJInt(MaxItems))
  if ResourceArns != nil:
    query_614331.add "ResourceArns", ResourceArns
  add(query_614331, "ResourcePolicy", newJString(ResourcePolicy))
  if PolicyInputList != nil:
    query_614331.add "PolicyInputList", PolicyInputList
  add(query_614331, "CallerArn", newJString(CallerArn))
  if PermissionsBoundaryPolicyInputList != nil:
    query_614331.add "PermissionsBoundaryPolicyInputList",
                    PermissionsBoundaryPolicyInputList
  add(query_614331, "ResourceHandlingOption", newJString(ResourceHandlingOption))
  add(query_614331, "Action", newJString(Action))
  add(query_614331, "Version", newJString(Version))
  if ActionNames != nil:
    query_614331.add "ActionNames", ActionNames
  if ContextEntries != nil:
    query_614331.add "ContextEntries", ContextEntries
  result = call_614330.call(nil, query_614331, nil, nil, nil)

var getSimulateCustomPolicy* = Call_GetSimulateCustomPolicy_614306(
    name: "getSimulateCustomPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SimulateCustomPolicy",
    validator: validate_GetSimulateCustomPolicy_614307, base: "/",
    url: url_GetSimulateCustomPolicy_614308, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSimulatePrincipalPolicy_614386 = ref object of OpenApiRestCall_609589
proc url_PostSimulatePrincipalPolicy_614388(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSimulatePrincipalPolicy_614387(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614389 = query.getOrDefault("Action")
  valid_614389 = validateParameter(valid_614389, JString, required = true, default = newJString(
      "SimulatePrincipalPolicy"))
  if valid_614389 != nil:
    section.add "Action", valid_614389
  var valid_614390 = query.getOrDefault("Version")
  valid_614390 = validateParameter(valid_614390, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614390 != nil:
    section.add "Version", valid_614390
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614391 = header.getOrDefault("X-Amz-Signature")
  valid_614391 = validateParameter(valid_614391, JString, required = false,
                                 default = nil)
  if valid_614391 != nil:
    section.add "X-Amz-Signature", valid_614391
  var valid_614392 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614392 = validateParameter(valid_614392, JString, required = false,
                                 default = nil)
  if valid_614392 != nil:
    section.add "X-Amz-Content-Sha256", valid_614392
  var valid_614393 = header.getOrDefault("X-Amz-Date")
  valid_614393 = validateParameter(valid_614393, JString, required = false,
                                 default = nil)
  if valid_614393 != nil:
    section.add "X-Amz-Date", valid_614393
  var valid_614394 = header.getOrDefault("X-Amz-Credential")
  valid_614394 = validateParameter(valid_614394, JString, required = false,
                                 default = nil)
  if valid_614394 != nil:
    section.add "X-Amz-Credential", valid_614394
  var valid_614395 = header.getOrDefault("X-Amz-Security-Token")
  valid_614395 = validateParameter(valid_614395, JString, required = false,
                                 default = nil)
  if valid_614395 != nil:
    section.add "X-Amz-Security-Token", valid_614395
  var valid_614396 = header.getOrDefault("X-Amz-Algorithm")
  valid_614396 = validateParameter(valid_614396, JString, required = false,
                                 default = nil)
  if valid_614396 != nil:
    section.add "X-Amz-Algorithm", valid_614396
  var valid_614397 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614397 = validateParameter(valid_614397, JString, required = false,
                                 default = nil)
  if valid_614397 != nil:
    section.add "X-Amz-SignedHeaders", valid_614397
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permission boundary policy is used for the simulation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceOwner: JString
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  section = newJObject()
  var valid_614398 = formData.getOrDefault("ResourceArns")
  valid_614398 = validateParameter(valid_614398, JArray, required = false,
                                 default = nil)
  if valid_614398 != nil:
    section.add "ResourceArns", valid_614398
  var valid_614399 = formData.getOrDefault("ContextEntries")
  valid_614399 = validateParameter(valid_614399, JArray, required = false,
                                 default = nil)
  if valid_614399 != nil:
    section.add "ContextEntries", valid_614399
  var valid_614400 = formData.getOrDefault("CallerArn")
  valid_614400 = validateParameter(valid_614400, JString, required = false,
                                 default = nil)
  if valid_614400 != nil:
    section.add "CallerArn", valid_614400
  var valid_614401 = formData.getOrDefault("ResourceHandlingOption")
  valid_614401 = validateParameter(valid_614401, JString, required = false,
                                 default = nil)
  if valid_614401 != nil:
    section.add "ResourceHandlingOption", valid_614401
  var valid_614402 = formData.getOrDefault("PermissionsBoundaryPolicyInputList")
  valid_614402 = validateParameter(valid_614402, JArray, required = false,
                                 default = nil)
  if valid_614402 != nil:
    section.add "PermissionsBoundaryPolicyInputList", valid_614402
  var valid_614403 = formData.getOrDefault("Marker")
  valid_614403 = validateParameter(valid_614403, JString, required = false,
                                 default = nil)
  if valid_614403 != nil:
    section.add "Marker", valid_614403
  assert formData != nil, "formData argument is necessary due to required `PolicySourceArn` field"
  var valid_614404 = formData.getOrDefault("PolicySourceArn")
  valid_614404 = validateParameter(valid_614404, JString, required = true,
                                 default = nil)
  if valid_614404 != nil:
    section.add "PolicySourceArn", valid_614404
  var valid_614405 = formData.getOrDefault("ActionNames")
  valid_614405 = validateParameter(valid_614405, JArray, required = true, default = nil)
  if valid_614405 != nil:
    section.add "ActionNames", valid_614405
  var valid_614406 = formData.getOrDefault("MaxItems")
  valid_614406 = validateParameter(valid_614406, JInt, required = false, default = nil)
  if valid_614406 != nil:
    section.add "MaxItems", valid_614406
  var valid_614407 = formData.getOrDefault("ResourcePolicy")
  valid_614407 = validateParameter(valid_614407, JString, required = false,
                                 default = nil)
  if valid_614407 != nil:
    section.add "ResourcePolicy", valid_614407
  var valid_614408 = formData.getOrDefault("PolicyInputList")
  valid_614408 = validateParameter(valid_614408, JArray, required = false,
                                 default = nil)
  if valid_614408 != nil:
    section.add "PolicyInputList", valid_614408
  var valid_614409 = formData.getOrDefault("ResourceOwner")
  valid_614409 = validateParameter(valid_614409, JString, required = false,
                                 default = nil)
  if valid_614409 != nil:
    section.add "ResourceOwner", valid_614409
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614410: Call_PostSimulatePrincipalPolicy_614386; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_614410.validator(path, query, header, formData, body)
  let scheme = call_614410.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614410.url(scheme.get, call_614410.host, call_614410.base,
                         call_614410.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614410, url, valid)

proc call*(call_614411: Call_PostSimulatePrincipalPolicy_614386;
          PolicySourceArn: string; ActionNames: JsonNode;
          ResourceArns: JsonNode = nil; ContextEntries: JsonNode = nil;
          CallerArn: string = ""; ResourceHandlingOption: string = "";
          PermissionsBoundaryPolicyInputList: JsonNode = nil; Marker: string = "";
          Action: string = "SimulatePrincipalPolicy"; MaxItems: int = 0;
          ResourcePolicy: string = ""; Version: string = "2010-05-08";
          PolicyInputList: JsonNode = nil; ResourceOwner: string = ""): Recallable =
  ## postSimulatePrincipalPolicy
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permission boundary policy is used for the simulation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Version: string (required)
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceOwner: string
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  var query_614412 = newJObject()
  var formData_614413 = newJObject()
  if ResourceArns != nil:
    formData_614413.add "ResourceArns", ResourceArns
  if ContextEntries != nil:
    formData_614413.add "ContextEntries", ContextEntries
  add(formData_614413, "CallerArn", newJString(CallerArn))
  add(formData_614413, "ResourceHandlingOption",
      newJString(ResourceHandlingOption))
  if PermissionsBoundaryPolicyInputList != nil:
    formData_614413.add "PermissionsBoundaryPolicyInputList",
                       PermissionsBoundaryPolicyInputList
  add(formData_614413, "Marker", newJString(Marker))
  add(formData_614413, "PolicySourceArn", newJString(PolicySourceArn))
  if ActionNames != nil:
    formData_614413.add "ActionNames", ActionNames
  add(query_614412, "Action", newJString(Action))
  add(formData_614413, "MaxItems", newJInt(MaxItems))
  add(formData_614413, "ResourcePolicy", newJString(ResourcePolicy))
  add(query_614412, "Version", newJString(Version))
  if PolicyInputList != nil:
    formData_614413.add "PolicyInputList", PolicyInputList
  add(formData_614413, "ResourceOwner", newJString(ResourceOwner))
  result = call_614411.call(nil, query_614412, nil, formData_614413, nil)

var postSimulatePrincipalPolicy* = Call_PostSimulatePrincipalPolicy_614386(
    name: "postSimulatePrincipalPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SimulatePrincipalPolicy",
    validator: validate_PostSimulatePrincipalPolicy_614387, base: "/",
    url: url_PostSimulatePrincipalPolicy_614388,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSimulatePrincipalPolicy_614359 = ref object of OpenApiRestCall_609589
proc url_GetSimulatePrincipalPolicy_614361(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSimulatePrincipalPolicy_614360(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: JString
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permission boundary policy is used for the simulation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  section = newJObject()
  var valid_614362 = query.getOrDefault("Marker")
  valid_614362 = validateParameter(valid_614362, JString, required = false,
                                 default = nil)
  if valid_614362 != nil:
    section.add "Marker", valid_614362
  var valid_614363 = query.getOrDefault("ResourceOwner")
  valid_614363 = validateParameter(valid_614363, JString, required = false,
                                 default = nil)
  if valid_614363 != nil:
    section.add "ResourceOwner", valid_614363
  assert query != nil,
        "query argument is necessary due to required `PolicySourceArn` field"
  var valid_614364 = query.getOrDefault("PolicySourceArn")
  valid_614364 = validateParameter(valid_614364, JString, required = true,
                                 default = nil)
  if valid_614364 != nil:
    section.add "PolicySourceArn", valid_614364
  var valid_614365 = query.getOrDefault("MaxItems")
  valid_614365 = validateParameter(valid_614365, JInt, required = false, default = nil)
  if valid_614365 != nil:
    section.add "MaxItems", valid_614365
  var valid_614366 = query.getOrDefault("ResourceArns")
  valid_614366 = validateParameter(valid_614366, JArray, required = false,
                                 default = nil)
  if valid_614366 != nil:
    section.add "ResourceArns", valid_614366
  var valid_614367 = query.getOrDefault("ResourcePolicy")
  valid_614367 = validateParameter(valid_614367, JString, required = false,
                                 default = nil)
  if valid_614367 != nil:
    section.add "ResourcePolicy", valid_614367
  var valid_614368 = query.getOrDefault("PolicyInputList")
  valid_614368 = validateParameter(valid_614368, JArray, required = false,
                                 default = nil)
  if valid_614368 != nil:
    section.add "PolicyInputList", valid_614368
  var valid_614369 = query.getOrDefault("CallerArn")
  valid_614369 = validateParameter(valid_614369, JString, required = false,
                                 default = nil)
  if valid_614369 != nil:
    section.add "CallerArn", valid_614369
  var valid_614370 = query.getOrDefault("PermissionsBoundaryPolicyInputList")
  valid_614370 = validateParameter(valid_614370, JArray, required = false,
                                 default = nil)
  if valid_614370 != nil:
    section.add "PermissionsBoundaryPolicyInputList", valid_614370
  var valid_614371 = query.getOrDefault("ResourceHandlingOption")
  valid_614371 = validateParameter(valid_614371, JString, required = false,
                                 default = nil)
  if valid_614371 != nil:
    section.add "ResourceHandlingOption", valid_614371
  var valid_614372 = query.getOrDefault("Action")
  valid_614372 = validateParameter(valid_614372, JString, required = true, default = newJString(
      "SimulatePrincipalPolicy"))
  if valid_614372 != nil:
    section.add "Action", valid_614372
  var valid_614373 = query.getOrDefault("Version")
  valid_614373 = validateParameter(valid_614373, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614373 != nil:
    section.add "Version", valid_614373
  var valid_614374 = query.getOrDefault("ActionNames")
  valid_614374 = validateParameter(valid_614374, JArray, required = true, default = nil)
  if valid_614374 != nil:
    section.add "ActionNames", valid_614374
  var valid_614375 = query.getOrDefault("ContextEntries")
  valid_614375 = validateParameter(valid_614375, JArray, required = false,
                                 default = nil)
  if valid_614375 != nil:
    section.add "ContextEntries", valid_614375
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614376 = header.getOrDefault("X-Amz-Signature")
  valid_614376 = validateParameter(valid_614376, JString, required = false,
                                 default = nil)
  if valid_614376 != nil:
    section.add "X-Amz-Signature", valid_614376
  var valid_614377 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614377 = validateParameter(valid_614377, JString, required = false,
                                 default = nil)
  if valid_614377 != nil:
    section.add "X-Amz-Content-Sha256", valid_614377
  var valid_614378 = header.getOrDefault("X-Amz-Date")
  valid_614378 = validateParameter(valid_614378, JString, required = false,
                                 default = nil)
  if valid_614378 != nil:
    section.add "X-Amz-Date", valid_614378
  var valid_614379 = header.getOrDefault("X-Amz-Credential")
  valid_614379 = validateParameter(valid_614379, JString, required = false,
                                 default = nil)
  if valid_614379 != nil:
    section.add "X-Amz-Credential", valid_614379
  var valid_614380 = header.getOrDefault("X-Amz-Security-Token")
  valid_614380 = validateParameter(valid_614380, JString, required = false,
                                 default = nil)
  if valid_614380 != nil:
    section.add "X-Amz-Security-Token", valid_614380
  var valid_614381 = header.getOrDefault("X-Amz-Algorithm")
  valid_614381 = validateParameter(valid_614381, JString, required = false,
                                 default = nil)
  if valid_614381 != nil:
    section.add "X-Amz-Algorithm", valid_614381
  var valid_614382 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614382 = validateParameter(valid_614382, JString, required = false,
                                 default = nil)
  if valid_614382 != nil:
    section.add "X-Amz-SignedHeaders", valid_614382
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614383: Call_GetSimulatePrincipalPolicy_614359; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_614383.validator(path, query, header, formData, body)
  let scheme = call_614383.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614383.url(scheme.get, call_614383.host, call_614383.base,
                         call_614383.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614383, url, valid)

proc call*(call_614384: Call_GetSimulatePrincipalPolicy_614359;
          PolicySourceArn: string; ActionNames: JsonNode; Marker: string = "";
          ResourceOwner: string = ""; MaxItems: int = 0; ResourceArns: JsonNode = nil;
          ResourcePolicy: string = ""; PolicyInputList: JsonNode = nil;
          CallerArn: string = "";
          PermissionsBoundaryPolicyInputList: JsonNode = nil;
          ResourceHandlingOption: string = "";
          Action: string = "SimulatePrincipalPolicy";
          Version: string = "2010-05-08"; ContextEntries: JsonNode = nil): Recallable =
  ## getSimulatePrincipalPolicy
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: string
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permission boundary policy is used for the simulation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  var query_614385 = newJObject()
  add(query_614385, "Marker", newJString(Marker))
  add(query_614385, "ResourceOwner", newJString(ResourceOwner))
  add(query_614385, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_614385, "MaxItems", newJInt(MaxItems))
  if ResourceArns != nil:
    query_614385.add "ResourceArns", ResourceArns
  add(query_614385, "ResourcePolicy", newJString(ResourcePolicy))
  if PolicyInputList != nil:
    query_614385.add "PolicyInputList", PolicyInputList
  add(query_614385, "CallerArn", newJString(CallerArn))
  if PermissionsBoundaryPolicyInputList != nil:
    query_614385.add "PermissionsBoundaryPolicyInputList",
                    PermissionsBoundaryPolicyInputList
  add(query_614385, "ResourceHandlingOption", newJString(ResourceHandlingOption))
  add(query_614385, "Action", newJString(Action))
  add(query_614385, "Version", newJString(Version))
  if ActionNames != nil:
    query_614385.add "ActionNames", ActionNames
  if ContextEntries != nil:
    query_614385.add "ContextEntries", ContextEntries
  result = call_614384.call(nil, query_614385, nil, nil, nil)

var getSimulatePrincipalPolicy* = Call_GetSimulatePrincipalPolicy_614359(
    name: "getSimulatePrincipalPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SimulatePrincipalPolicy",
    validator: validate_GetSimulatePrincipalPolicy_614360, base: "/",
    url: url_GetSimulatePrincipalPolicy_614361,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTagRole_614431 = ref object of OpenApiRestCall_609589
proc url_PostTagRole_614433(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTagRole_614432(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614434 = query.getOrDefault("Action")
  valid_614434 = validateParameter(valid_614434, JString, required = true,
                                 default = newJString("TagRole"))
  if valid_614434 != nil:
    section.add "Action", valid_614434
  var valid_614435 = query.getOrDefault("Version")
  valid_614435 = validateParameter(valid_614435, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614435 != nil:
    section.add "Version", valid_614435
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614436 = header.getOrDefault("X-Amz-Signature")
  valid_614436 = validateParameter(valid_614436, JString, required = false,
                                 default = nil)
  if valid_614436 != nil:
    section.add "X-Amz-Signature", valid_614436
  var valid_614437 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614437 = validateParameter(valid_614437, JString, required = false,
                                 default = nil)
  if valid_614437 != nil:
    section.add "X-Amz-Content-Sha256", valid_614437
  var valid_614438 = header.getOrDefault("X-Amz-Date")
  valid_614438 = validateParameter(valid_614438, JString, required = false,
                                 default = nil)
  if valid_614438 != nil:
    section.add "X-Amz-Date", valid_614438
  var valid_614439 = header.getOrDefault("X-Amz-Credential")
  valid_614439 = validateParameter(valid_614439, JString, required = false,
                                 default = nil)
  if valid_614439 != nil:
    section.add "X-Amz-Credential", valid_614439
  var valid_614440 = header.getOrDefault("X-Amz-Security-Token")
  valid_614440 = validateParameter(valid_614440, JString, required = false,
                                 default = nil)
  if valid_614440 != nil:
    section.add "X-Amz-Security-Token", valid_614440
  var valid_614441 = header.getOrDefault("X-Amz-Algorithm")
  valid_614441 = validateParameter(valid_614441, JString, required = false,
                                 default = nil)
  if valid_614441 != nil:
    section.add "X-Amz-Algorithm", valid_614441
  var valid_614442 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614442 = validateParameter(valid_614442, JString, required = false,
                                 default = nil)
  if valid_614442 != nil:
    section.add "X-Amz-SignedHeaders", valid_614442
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_614443 = formData.getOrDefault("RoleName")
  valid_614443 = validateParameter(valid_614443, JString, required = true,
                                 default = nil)
  if valid_614443 != nil:
    section.add "RoleName", valid_614443
  var valid_614444 = formData.getOrDefault("Tags")
  valid_614444 = validateParameter(valid_614444, JArray, required = true, default = nil)
  if valid_614444 != nil:
    section.add "Tags", valid_614444
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614445: Call_PostTagRole_614431; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614445.validator(path, query, header, formData, body)
  let scheme = call_614445.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614445.url(scheme.get, call_614445.host, call_614445.base,
                         call_614445.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614445, url, valid)

proc call*(call_614446: Call_PostTagRole_614431; RoleName: string; Tags: JsonNode;
          Action: string = "TagRole"; Version: string = "2010-05-08"): Recallable =
  ## postTagRole
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   Version: string (required)
  var query_614447 = newJObject()
  var formData_614448 = newJObject()
  add(formData_614448, "RoleName", newJString(RoleName))
  add(query_614447, "Action", newJString(Action))
  if Tags != nil:
    formData_614448.add "Tags", Tags
  add(query_614447, "Version", newJString(Version))
  result = call_614446.call(nil, query_614447, nil, formData_614448, nil)

var postTagRole* = Call_PostTagRole_614431(name: "postTagRole",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=TagRole",
                                        validator: validate_PostTagRole_614432,
                                        base: "/", url: url_PostTagRole_614433,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTagRole_614414 = ref object of OpenApiRestCall_609589
proc url_GetTagRole_614416(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTagRole_614415(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   RoleName: JString (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_614417 = query.getOrDefault("Tags")
  valid_614417 = validateParameter(valid_614417, JArray, required = true, default = nil)
  if valid_614417 != nil:
    section.add "Tags", valid_614417
  var valid_614418 = query.getOrDefault("RoleName")
  valid_614418 = validateParameter(valid_614418, JString, required = true,
                                 default = nil)
  if valid_614418 != nil:
    section.add "RoleName", valid_614418
  var valid_614419 = query.getOrDefault("Action")
  valid_614419 = validateParameter(valid_614419, JString, required = true,
                                 default = newJString("TagRole"))
  if valid_614419 != nil:
    section.add "Action", valid_614419
  var valid_614420 = query.getOrDefault("Version")
  valid_614420 = validateParameter(valid_614420, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614420 != nil:
    section.add "Version", valid_614420
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614421 = header.getOrDefault("X-Amz-Signature")
  valid_614421 = validateParameter(valid_614421, JString, required = false,
                                 default = nil)
  if valid_614421 != nil:
    section.add "X-Amz-Signature", valid_614421
  var valid_614422 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614422 = validateParameter(valid_614422, JString, required = false,
                                 default = nil)
  if valid_614422 != nil:
    section.add "X-Amz-Content-Sha256", valid_614422
  var valid_614423 = header.getOrDefault("X-Amz-Date")
  valid_614423 = validateParameter(valid_614423, JString, required = false,
                                 default = nil)
  if valid_614423 != nil:
    section.add "X-Amz-Date", valid_614423
  var valid_614424 = header.getOrDefault("X-Amz-Credential")
  valid_614424 = validateParameter(valid_614424, JString, required = false,
                                 default = nil)
  if valid_614424 != nil:
    section.add "X-Amz-Credential", valid_614424
  var valid_614425 = header.getOrDefault("X-Amz-Security-Token")
  valid_614425 = validateParameter(valid_614425, JString, required = false,
                                 default = nil)
  if valid_614425 != nil:
    section.add "X-Amz-Security-Token", valid_614425
  var valid_614426 = header.getOrDefault("X-Amz-Algorithm")
  valid_614426 = validateParameter(valid_614426, JString, required = false,
                                 default = nil)
  if valid_614426 != nil:
    section.add "X-Amz-Algorithm", valid_614426
  var valid_614427 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614427 = validateParameter(valid_614427, JString, required = false,
                                 default = nil)
  if valid_614427 != nil:
    section.add "X-Amz-SignedHeaders", valid_614427
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614428: Call_GetTagRole_614414; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614428.validator(path, query, header, formData, body)
  let scheme = call_614428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614428.url(scheme.get, call_614428.host, call_614428.base,
                         call_614428.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614428, url, valid)

proc call*(call_614429: Call_GetTagRole_614414; Tags: JsonNode; RoleName: string;
          Action: string = "TagRole"; Version: string = "2010-05-08"): Recallable =
  ## getTagRole
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   RoleName: string (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614430 = newJObject()
  if Tags != nil:
    query_614430.add "Tags", Tags
  add(query_614430, "RoleName", newJString(RoleName))
  add(query_614430, "Action", newJString(Action))
  add(query_614430, "Version", newJString(Version))
  result = call_614429.call(nil, query_614430, nil, nil, nil)

var getTagRole* = Call_GetTagRole_614414(name: "getTagRole",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=TagRole",
                                      validator: validate_GetTagRole_614415,
                                      base: "/", url: url_GetTagRole_614416,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTagUser_614466 = ref object of OpenApiRestCall_609589
proc url_PostTagUser_614468(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTagUser_614467(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614469 = query.getOrDefault("Action")
  valid_614469 = validateParameter(valid_614469, JString, required = true,
                                 default = newJString("TagUser"))
  if valid_614469 != nil:
    section.add "Action", valid_614469
  var valid_614470 = query.getOrDefault("Version")
  valid_614470 = validateParameter(valid_614470, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614470 != nil:
    section.add "Version", valid_614470
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614471 = header.getOrDefault("X-Amz-Signature")
  valid_614471 = validateParameter(valid_614471, JString, required = false,
                                 default = nil)
  if valid_614471 != nil:
    section.add "X-Amz-Signature", valid_614471
  var valid_614472 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614472 = validateParameter(valid_614472, JString, required = false,
                                 default = nil)
  if valid_614472 != nil:
    section.add "X-Amz-Content-Sha256", valid_614472
  var valid_614473 = header.getOrDefault("X-Amz-Date")
  valid_614473 = validateParameter(valid_614473, JString, required = false,
                                 default = nil)
  if valid_614473 != nil:
    section.add "X-Amz-Date", valid_614473
  var valid_614474 = header.getOrDefault("X-Amz-Credential")
  valid_614474 = validateParameter(valid_614474, JString, required = false,
                                 default = nil)
  if valid_614474 != nil:
    section.add "X-Amz-Credential", valid_614474
  var valid_614475 = header.getOrDefault("X-Amz-Security-Token")
  valid_614475 = validateParameter(valid_614475, JString, required = false,
                                 default = nil)
  if valid_614475 != nil:
    section.add "X-Amz-Security-Token", valid_614475
  var valid_614476 = header.getOrDefault("X-Amz-Algorithm")
  valid_614476 = validateParameter(valid_614476, JString, required = false,
                                 default = nil)
  if valid_614476 != nil:
    section.add "X-Amz-Algorithm", valid_614476
  var valid_614477 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614477 = validateParameter(valid_614477, JString, required = false,
                                 default = nil)
  if valid_614477 != nil:
    section.add "X-Amz-SignedHeaders", valid_614477
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_614478 = formData.getOrDefault("UserName")
  valid_614478 = validateParameter(valid_614478, JString, required = true,
                                 default = nil)
  if valid_614478 != nil:
    section.add "UserName", valid_614478
  var valid_614479 = formData.getOrDefault("Tags")
  valid_614479 = validateParameter(valid_614479, JArray, required = true, default = nil)
  if valid_614479 != nil:
    section.add "Tags", valid_614479
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614480: Call_PostTagUser_614466; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614480.validator(path, query, header, formData, body)
  let scheme = call_614480.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614480.url(scheme.get, call_614480.host, call_614480.base,
                         call_614480.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614480, url, valid)

proc call*(call_614481: Call_PostTagUser_614466; UserName: string; Tags: JsonNode;
          Action: string = "TagUser"; Version: string = "2010-05-08"): Recallable =
  ## postTagUser
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   Version: string (required)
  var query_614482 = newJObject()
  var formData_614483 = newJObject()
  add(formData_614483, "UserName", newJString(UserName))
  add(query_614482, "Action", newJString(Action))
  if Tags != nil:
    formData_614483.add "Tags", Tags
  add(query_614482, "Version", newJString(Version))
  result = call_614481.call(nil, query_614482, nil, formData_614483, nil)

var postTagUser* = Call_PostTagUser_614466(name: "postTagUser",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=TagUser",
                                        validator: validate_PostTagUser_614467,
                                        base: "/", url: url_PostTagUser_614468,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTagUser_614449 = ref object of OpenApiRestCall_609589
proc url_GetTagUser_614451(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTagUser_614450(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_614452 = query.getOrDefault("UserName")
  valid_614452 = validateParameter(valid_614452, JString, required = true,
                                 default = nil)
  if valid_614452 != nil:
    section.add "UserName", valid_614452
  var valid_614453 = query.getOrDefault("Tags")
  valid_614453 = validateParameter(valid_614453, JArray, required = true, default = nil)
  if valid_614453 != nil:
    section.add "Tags", valid_614453
  var valid_614454 = query.getOrDefault("Action")
  valid_614454 = validateParameter(valid_614454, JString, required = true,
                                 default = newJString("TagUser"))
  if valid_614454 != nil:
    section.add "Action", valid_614454
  var valid_614455 = query.getOrDefault("Version")
  valid_614455 = validateParameter(valid_614455, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614455 != nil:
    section.add "Version", valid_614455
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614456 = header.getOrDefault("X-Amz-Signature")
  valid_614456 = validateParameter(valid_614456, JString, required = false,
                                 default = nil)
  if valid_614456 != nil:
    section.add "X-Amz-Signature", valid_614456
  var valid_614457 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614457 = validateParameter(valid_614457, JString, required = false,
                                 default = nil)
  if valid_614457 != nil:
    section.add "X-Amz-Content-Sha256", valid_614457
  var valid_614458 = header.getOrDefault("X-Amz-Date")
  valid_614458 = validateParameter(valid_614458, JString, required = false,
                                 default = nil)
  if valid_614458 != nil:
    section.add "X-Amz-Date", valid_614458
  var valid_614459 = header.getOrDefault("X-Amz-Credential")
  valid_614459 = validateParameter(valid_614459, JString, required = false,
                                 default = nil)
  if valid_614459 != nil:
    section.add "X-Amz-Credential", valid_614459
  var valid_614460 = header.getOrDefault("X-Amz-Security-Token")
  valid_614460 = validateParameter(valid_614460, JString, required = false,
                                 default = nil)
  if valid_614460 != nil:
    section.add "X-Amz-Security-Token", valid_614460
  var valid_614461 = header.getOrDefault("X-Amz-Algorithm")
  valid_614461 = validateParameter(valid_614461, JString, required = false,
                                 default = nil)
  if valid_614461 != nil:
    section.add "X-Amz-Algorithm", valid_614461
  var valid_614462 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614462 = validateParameter(valid_614462, JString, required = false,
                                 default = nil)
  if valid_614462 != nil:
    section.add "X-Amz-SignedHeaders", valid_614462
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614463: Call_GetTagUser_614449; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614463.validator(path, query, header, formData, body)
  let scheme = call_614463.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614463.url(scheme.get, call_614463.host, call_614463.base,
                         call_614463.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614463, url, valid)

proc call*(call_614464: Call_GetTagUser_614449; UserName: string; Tags: JsonNode;
          Action: string = "TagUser"; Version: string = "2010-05-08"): Recallable =
  ## getTagUser
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614465 = newJObject()
  add(query_614465, "UserName", newJString(UserName))
  if Tags != nil:
    query_614465.add "Tags", Tags
  add(query_614465, "Action", newJString(Action))
  add(query_614465, "Version", newJString(Version))
  result = call_614464.call(nil, query_614465, nil, nil, nil)

var getTagUser* = Call_GetTagUser_614449(name: "getTagUser",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=TagUser",
                                      validator: validate_GetTagUser_614450,
                                      base: "/", url: url_GetTagUser_614451,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUntagRole_614501 = ref object of OpenApiRestCall_609589
proc url_PostUntagRole_614503(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUntagRole_614502(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614504 = query.getOrDefault("Action")
  valid_614504 = validateParameter(valid_614504, JString, required = true,
                                 default = newJString("UntagRole"))
  if valid_614504 != nil:
    section.add "Action", valid_614504
  var valid_614505 = query.getOrDefault("Version")
  valid_614505 = validateParameter(valid_614505, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614505 != nil:
    section.add "Version", valid_614505
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614506 = header.getOrDefault("X-Amz-Signature")
  valid_614506 = validateParameter(valid_614506, JString, required = false,
                                 default = nil)
  if valid_614506 != nil:
    section.add "X-Amz-Signature", valid_614506
  var valid_614507 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614507 = validateParameter(valid_614507, JString, required = false,
                                 default = nil)
  if valid_614507 != nil:
    section.add "X-Amz-Content-Sha256", valid_614507
  var valid_614508 = header.getOrDefault("X-Amz-Date")
  valid_614508 = validateParameter(valid_614508, JString, required = false,
                                 default = nil)
  if valid_614508 != nil:
    section.add "X-Amz-Date", valid_614508
  var valid_614509 = header.getOrDefault("X-Amz-Credential")
  valid_614509 = validateParameter(valid_614509, JString, required = false,
                                 default = nil)
  if valid_614509 != nil:
    section.add "X-Amz-Credential", valid_614509
  var valid_614510 = header.getOrDefault("X-Amz-Security-Token")
  valid_614510 = validateParameter(valid_614510, JString, required = false,
                                 default = nil)
  if valid_614510 != nil:
    section.add "X-Amz-Security-Token", valid_614510
  var valid_614511 = header.getOrDefault("X-Amz-Algorithm")
  valid_614511 = validateParameter(valid_614511, JString, required = false,
                                 default = nil)
  if valid_614511 != nil:
    section.add "X-Amz-Algorithm", valid_614511
  var valid_614512 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614512 = validateParameter(valid_614512, JString, required = false,
                                 default = nil)
  if valid_614512 != nil:
    section.add "X-Amz-SignedHeaders", valid_614512
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_614513 = formData.getOrDefault("TagKeys")
  valid_614513 = validateParameter(valid_614513, JArray, required = true, default = nil)
  if valid_614513 != nil:
    section.add "TagKeys", valid_614513
  var valid_614514 = formData.getOrDefault("RoleName")
  valid_614514 = validateParameter(valid_614514, JString, required = true,
                                 default = nil)
  if valid_614514 != nil:
    section.add "RoleName", valid_614514
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614515: Call_PostUntagRole_614501; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_614515.validator(path, query, header, formData, body)
  let scheme = call_614515.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614515.url(scheme.get, call_614515.host, call_614515.base,
                         call_614515.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614515, url, valid)

proc call*(call_614516: Call_PostUntagRole_614501; TagKeys: JsonNode;
          RoleName: string; Action: string = "UntagRole";
          Version: string = "2010-05-08"): Recallable =
  ## postUntagRole
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614517 = newJObject()
  var formData_614518 = newJObject()
  if TagKeys != nil:
    formData_614518.add "TagKeys", TagKeys
  add(formData_614518, "RoleName", newJString(RoleName))
  add(query_614517, "Action", newJString(Action))
  add(query_614517, "Version", newJString(Version))
  result = call_614516.call(nil, query_614517, nil, formData_614518, nil)

var postUntagRole* = Call_PostUntagRole_614501(name: "postUntagRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UntagRole", validator: validate_PostUntagRole_614502,
    base: "/", url: url_PostUntagRole_614503, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUntagRole_614484 = ref object of OpenApiRestCall_609589
proc url_GetUntagRole_614486(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUntagRole_614485(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `TagKeys` field"
  var valid_614487 = query.getOrDefault("TagKeys")
  valid_614487 = validateParameter(valid_614487, JArray, required = true, default = nil)
  if valid_614487 != nil:
    section.add "TagKeys", valid_614487
  var valid_614488 = query.getOrDefault("RoleName")
  valid_614488 = validateParameter(valid_614488, JString, required = true,
                                 default = nil)
  if valid_614488 != nil:
    section.add "RoleName", valid_614488
  var valid_614489 = query.getOrDefault("Action")
  valid_614489 = validateParameter(valid_614489, JString, required = true,
                                 default = newJString("UntagRole"))
  if valid_614489 != nil:
    section.add "Action", valid_614489
  var valid_614490 = query.getOrDefault("Version")
  valid_614490 = validateParameter(valid_614490, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614490 != nil:
    section.add "Version", valid_614490
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614491 = header.getOrDefault("X-Amz-Signature")
  valid_614491 = validateParameter(valid_614491, JString, required = false,
                                 default = nil)
  if valid_614491 != nil:
    section.add "X-Amz-Signature", valid_614491
  var valid_614492 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614492 = validateParameter(valid_614492, JString, required = false,
                                 default = nil)
  if valid_614492 != nil:
    section.add "X-Amz-Content-Sha256", valid_614492
  var valid_614493 = header.getOrDefault("X-Amz-Date")
  valid_614493 = validateParameter(valid_614493, JString, required = false,
                                 default = nil)
  if valid_614493 != nil:
    section.add "X-Amz-Date", valid_614493
  var valid_614494 = header.getOrDefault("X-Amz-Credential")
  valid_614494 = validateParameter(valid_614494, JString, required = false,
                                 default = nil)
  if valid_614494 != nil:
    section.add "X-Amz-Credential", valid_614494
  var valid_614495 = header.getOrDefault("X-Amz-Security-Token")
  valid_614495 = validateParameter(valid_614495, JString, required = false,
                                 default = nil)
  if valid_614495 != nil:
    section.add "X-Amz-Security-Token", valid_614495
  var valid_614496 = header.getOrDefault("X-Amz-Algorithm")
  valid_614496 = validateParameter(valid_614496, JString, required = false,
                                 default = nil)
  if valid_614496 != nil:
    section.add "X-Amz-Algorithm", valid_614496
  var valid_614497 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614497 = validateParameter(valid_614497, JString, required = false,
                                 default = nil)
  if valid_614497 != nil:
    section.add "X-Amz-SignedHeaders", valid_614497
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614498: Call_GetUntagRole_614484; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_614498.validator(path, query, header, formData, body)
  let scheme = call_614498.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614498.url(scheme.get, call_614498.host, call_614498.base,
                         call_614498.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614498, url, valid)

proc call*(call_614499: Call_GetUntagRole_614484; TagKeys: JsonNode;
          RoleName: string; Action: string = "UntagRole";
          Version: string = "2010-05-08"): Recallable =
  ## getUntagRole
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614500 = newJObject()
  if TagKeys != nil:
    query_614500.add "TagKeys", TagKeys
  add(query_614500, "RoleName", newJString(RoleName))
  add(query_614500, "Action", newJString(Action))
  add(query_614500, "Version", newJString(Version))
  result = call_614499.call(nil, query_614500, nil, nil, nil)

var getUntagRole* = Call_GetUntagRole_614484(name: "getUntagRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UntagRole", validator: validate_GetUntagRole_614485, base: "/",
    url: url_GetUntagRole_614486, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUntagUser_614536 = ref object of OpenApiRestCall_609589
proc url_PostUntagUser_614538(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUntagUser_614537(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614539 = query.getOrDefault("Action")
  valid_614539 = validateParameter(valid_614539, JString, required = true,
                                 default = newJString("UntagUser"))
  if valid_614539 != nil:
    section.add "Action", valid_614539
  var valid_614540 = query.getOrDefault("Version")
  valid_614540 = validateParameter(valid_614540, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614540 != nil:
    section.add "Version", valid_614540
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614541 = header.getOrDefault("X-Amz-Signature")
  valid_614541 = validateParameter(valid_614541, JString, required = false,
                                 default = nil)
  if valid_614541 != nil:
    section.add "X-Amz-Signature", valid_614541
  var valid_614542 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614542 = validateParameter(valid_614542, JString, required = false,
                                 default = nil)
  if valid_614542 != nil:
    section.add "X-Amz-Content-Sha256", valid_614542
  var valid_614543 = header.getOrDefault("X-Amz-Date")
  valid_614543 = validateParameter(valid_614543, JString, required = false,
                                 default = nil)
  if valid_614543 != nil:
    section.add "X-Amz-Date", valid_614543
  var valid_614544 = header.getOrDefault("X-Amz-Credential")
  valid_614544 = validateParameter(valid_614544, JString, required = false,
                                 default = nil)
  if valid_614544 != nil:
    section.add "X-Amz-Credential", valid_614544
  var valid_614545 = header.getOrDefault("X-Amz-Security-Token")
  valid_614545 = validateParameter(valid_614545, JString, required = false,
                                 default = nil)
  if valid_614545 != nil:
    section.add "X-Amz-Security-Token", valid_614545
  var valid_614546 = header.getOrDefault("X-Amz-Algorithm")
  valid_614546 = validateParameter(valid_614546, JString, required = false,
                                 default = nil)
  if valid_614546 != nil:
    section.add "X-Amz-Algorithm", valid_614546
  var valid_614547 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614547 = validateParameter(valid_614547, JString, required = false,
                                 default = nil)
  if valid_614547 != nil:
    section.add "X-Amz-SignedHeaders", valid_614547
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_614548 = formData.getOrDefault("TagKeys")
  valid_614548 = validateParameter(valid_614548, JArray, required = true, default = nil)
  if valid_614548 != nil:
    section.add "TagKeys", valid_614548
  var valid_614549 = formData.getOrDefault("UserName")
  valid_614549 = validateParameter(valid_614549, JString, required = true,
                                 default = nil)
  if valid_614549 != nil:
    section.add "UserName", valid_614549
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614550: Call_PostUntagUser_614536; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_614550.validator(path, query, header, formData, body)
  let scheme = call_614550.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614550.url(scheme.get, call_614550.host, call_614550.base,
                         call_614550.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614550, url, valid)

proc call*(call_614551: Call_PostUntagUser_614536; TagKeys: JsonNode;
          UserName: string; Action: string = "UntagUser";
          Version: string = "2010-05-08"): Recallable =
  ## postUntagUser
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614552 = newJObject()
  var formData_614553 = newJObject()
  if TagKeys != nil:
    formData_614553.add "TagKeys", TagKeys
  add(formData_614553, "UserName", newJString(UserName))
  add(query_614552, "Action", newJString(Action))
  add(query_614552, "Version", newJString(Version))
  result = call_614551.call(nil, query_614552, nil, formData_614553, nil)

var postUntagUser* = Call_PostUntagUser_614536(name: "postUntagUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UntagUser", validator: validate_PostUntagUser_614537,
    base: "/", url: url_PostUntagUser_614538, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUntagUser_614519 = ref object of OpenApiRestCall_609589
proc url_GetUntagUser_614521(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUntagUser_614520(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_614522 = query.getOrDefault("UserName")
  valid_614522 = validateParameter(valid_614522, JString, required = true,
                                 default = nil)
  if valid_614522 != nil:
    section.add "UserName", valid_614522
  var valid_614523 = query.getOrDefault("TagKeys")
  valid_614523 = validateParameter(valid_614523, JArray, required = true, default = nil)
  if valid_614523 != nil:
    section.add "TagKeys", valid_614523
  var valid_614524 = query.getOrDefault("Action")
  valid_614524 = validateParameter(valid_614524, JString, required = true,
                                 default = newJString("UntagUser"))
  if valid_614524 != nil:
    section.add "Action", valid_614524
  var valid_614525 = query.getOrDefault("Version")
  valid_614525 = validateParameter(valid_614525, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614525 != nil:
    section.add "Version", valid_614525
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614526 = header.getOrDefault("X-Amz-Signature")
  valid_614526 = validateParameter(valid_614526, JString, required = false,
                                 default = nil)
  if valid_614526 != nil:
    section.add "X-Amz-Signature", valid_614526
  var valid_614527 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614527 = validateParameter(valid_614527, JString, required = false,
                                 default = nil)
  if valid_614527 != nil:
    section.add "X-Amz-Content-Sha256", valid_614527
  var valid_614528 = header.getOrDefault("X-Amz-Date")
  valid_614528 = validateParameter(valid_614528, JString, required = false,
                                 default = nil)
  if valid_614528 != nil:
    section.add "X-Amz-Date", valid_614528
  var valid_614529 = header.getOrDefault("X-Amz-Credential")
  valid_614529 = validateParameter(valid_614529, JString, required = false,
                                 default = nil)
  if valid_614529 != nil:
    section.add "X-Amz-Credential", valid_614529
  var valid_614530 = header.getOrDefault("X-Amz-Security-Token")
  valid_614530 = validateParameter(valid_614530, JString, required = false,
                                 default = nil)
  if valid_614530 != nil:
    section.add "X-Amz-Security-Token", valid_614530
  var valid_614531 = header.getOrDefault("X-Amz-Algorithm")
  valid_614531 = validateParameter(valid_614531, JString, required = false,
                                 default = nil)
  if valid_614531 != nil:
    section.add "X-Amz-Algorithm", valid_614531
  var valid_614532 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614532 = validateParameter(valid_614532, JString, required = false,
                                 default = nil)
  if valid_614532 != nil:
    section.add "X-Amz-SignedHeaders", valid_614532
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614533: Call_GetUntagUser_614519; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_614533.validator(path, query, header, formData, body)
  let scheme = call_614533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614533.url(scheme.get, call_614533.host, call_614533.base,
                         call_614533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614533, url, valid)

proc call*(call_614534: Call_GetUntagUser_614519; UserName: string;
          TagKeys: JsonNode; Action: string = "UntagUser";
          Version: string = "2010-05-08"): Recallable =
  ## getUntagUser
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614535 = newJObject()
  add(query_614535, "UserName", newJString(UserName))
  if TagKeys != nil:
    query_614535.add "TagKeys", TagKeys
  add(query_614535, "Action", newJString(Action))
  add(query_614535, "Version", newJString(Version))
  result = call_614534.call(nil, query_614535, nil, nil, nil)

var getUntagUser* = Call_GetUntagUser_614519(name: "getUntagUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UntagUser", validator: validate_GetUntagUser_614520, base: "/",
    url: url_GetUntagUser_614521, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccessKey_614572 = ref object of OpenApiRestCall_609589
proc url_PostUpdateAccessKey_614574(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAccessKey_614573(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614575 = query.getOrDefault("Action")
  valid_614575 = validateParameter(valid_614575, JString, required = true,
                                 default = newJString("UpdateAccessKey"))
  if valid_614575 != nil:
    section.add "Action", valid_614575
  var valid_614576 = query.getOrDefault("Version")
  valid_614576 = validateParameter(valid_614576, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614576 != nil:
    section.add "Version", valid_614576
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614577 = header.getOrDefault("X-Amz-Signature")
  valid_614577 = validateParameter(valid_614577, JString, required = false,
                                 default = nil)
  if valid_614577 != nil:
    section.add "X-Amz-Signature", valid_614577
  var valid_614578 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614578 = validateParameter(valid_614578, JString, required = false,
                                 default = nil)
  if valid_614578 != nil:
    section.add "X-Amz-Content-Sha256", valid_614578
  var valid_614579 = header.getOrDefault("X-Amz-Date")
  valid_614579 = validateParameter(valid_614579, JString, required = false,
                                 default = nil)
  if valid_614579 != nil:
    section.add "X-Amz-Date", valid_614579
  var valid_614580 = header.getOrDefault("X-Amz-Credential")
  valid_614580 = validateParameter(valid_614580, JString, required = false,
                                 default = nil)
  if valid_614580 != nil:
    section.add "X-Amz-Credential", valid_614580
  var valid_614581 = header.getOrDefault("X-Amz-Security-Token")
  valid_614581 = validateParameter(valid_614581, JString, required = false,
                                 default = nil)
  if valid_614581 != nil:
    section.add "X-Amz-Security-Token", valid_614581
  var valid_614582 = header.getOrDefault("X-Amz-Algorithm")
  valid_614582 = validateParameter(valid_614582, JString, required = false,
                                 default = nil)
  if valid_614582 != nil:
    section.add "X-Amz-Algorithm", valid_614582
  var valid_614583 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614583 = validateParameter(valid_614583, JString, required = false,
                                 default = nil)
  if valid_614583 != nil:
    section.add "X-Amz-SignedHeaders", valid_614583
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_614584 = formData.getOrDefault("AccessKeyId")
  valid_614584 = validateParameter(valid_614584, JString, required = true,
                                 default = nil)
  if valid_614584 != nil:
    section.add "AccessKeyId", valid_614584
  var valid_614585 = formData.getOrDefault("UserName")
  valid_614585 = validateParameter(valid_614585, JString, required = false,
                                 default = nil)
  if valid_614585 != nil:
    section.add "UserName", valid_614585
  var valid_614586 = formData.getOrDefault("Status")
  valid_614586 = validateParameter(valid_614586, JString, required = true,
                                 default = newJString("Active"))
  if valid_614586 != nil:
    section.add "Status", valid_614586
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614587: Call_PostUpdateAccessKey_614572; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614587.validator(path, query, header, formData, body)
  let scheme = call_614587.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614587.url(scheme.get, call_614587.host, call_614587.base,
                         call_614587.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614587, url, valid)

proc call*(call_614588: Call_PostUpdateAccessKey_614572; AccessKeyId: string;
          UserName: string = ""; Action: string = "UpdateAccessKey";
          Status: string = "Active"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateAccessKey
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Status: string (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   Version: string (required)
  var query_614589 = newJObject()
  var formData_614590 = newJObject()
  add(formData_614590, "AccessKeyId", newJString(AccessKeyId))
  add(formData_614590, "UserName", newJString(UserName))
  add(query_614589, "Action", newJString(Action))
  add(formData_614590, "Status", newJString(Status))
  add(query_614589, "Version", newJString(Version))
  result = call_614588.call(nil, query_614589, nil, formData_614590, nil)

var postUpdateAccessKey* = Call_PostUpdateAccessKey_614572(
    name: "postUpdateAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccessKey",
    validator: validate_PostUpdateAccessKey_614573, base: "/",
    url: url_PostUpdateAccessKey_614574, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccessKey_614554 = ref object of OpenApiRestCall_609589
proc url_GetUpdateAccessKey_614556(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAccessKey_614555(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   Action: JString (required)
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_614557 = query.getOrDefault("UserName")
  valid_614557 = validateParameter(valid_614557, JString, required = false,
                                 default = nil)
  if valid_614557 != nil:
    section.add "UserName", valid_614557
  var valid_614558 = query.getOrDefault("Status")
  valid_614558 = validateParameter(valid_614558, JString, required = true,
                                 default = newJString("Active"))
  if valid_614558 != nil:
    section.add "Status", valid_614558
  var valid_614559 = query.getOrDefault("Action")
  valid_614559 = validateParameter(valid_614559, JString, required = true,
                                 default = newJString("UpdateAccessKey"))
  if valid_614559 != nil:
    section.add "Action", valid_614559
  var valid_614560 = query.getOrDefault("AccessKeyId")
  valid_614560 = validateParameter(valid_614560, JString, required = true,
                                 default = nil)
  if valid_614560 != nil:
    section.add "AccessKeyId", valid_614560
  var valid_614561 = query.getOrDefault("Version")
  valid_614561 = validateParameter(valid_614561, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614561 != nil:
    section.add "Version", valid_614561
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614562 = header.getOrDefault("X-Amz-Signature")
  valid_614562 = validateParameter(valid_614562, JString, required = false,
                                 default = nil)
  if valid_614562 != nil:
    section.add "X-Amz-Signature", valid_614562
  var valid_614563 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614563 = validateParameter(valid_614563, JString, required = false,
                                 default = nil)
  if valid_614563 != nil:
    section.add "X-Amz-Content-Sha256", valid_614563
  var valid_614564 = header.getOrDefault("X-Amz-Date")
  valid_614564 = validateParameter(valid_614564, JString, required = false,
                                 default = nil)
  if valid_614564 != nil:
    section.add "X-Amz-Date", valid_614564
  var valid_614565 = header.getOrDefault("X-Amz-Credential")
  valid_614565 = validateParameter(valid_614565, JString, required = false,
                                 default = nil)
  if valid_614565 != nil:
    section.add "X-Amz-Credential", valid_614565
  var valid_614566 = header.getOrDefault("X-Amz-Security-Token")
  valid_614566 = validateParameter(valid_614566, JString, required = false,
                                 default = nil)
  if valid_614566 != nil:
    section.add "X-Amz-Security-Token", valid_614566
  var valid_614567 = header.getOrDefault("X-Amz-Algorithm")
  valid_614567 = validateParameter(valid_614567, JString, required = false,
                                 default = nil)
  if valid_614567 != nil:
    section.add "X-Amz-Algorithm", valid_614567
  var valid_614568 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614568 = validateParameter(valid_614568, JString, required = false,
                                 default = nil)
  if valid_614568 != nil:
    section.add "X-Amz-SignedHeaders", valid_614568
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614569: Call_GetUpdateAccessKey_614554; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614569.validator(path, query, header, formData, body)
  let scheme = call_614569.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614569.url(scheme.get, call_614569.host, call_614569.base,
                         call_614569.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614569, url, valid)

proc call*(call_614570: Call_GetUpdateAccessKey_614554; AccessKeyId: string;
          UserName: string = ""; Status: string = "Active";
          Action: string = "UpdateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateAccessKey
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   Action: string (required)
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_614571 = newJObject()
  add(query_614571, "UserName", newJString(UserName))
  add(query_614571, "Status", newJString(Status))
  add(query_614571, "Action", newJString(Action))
  add(query_614571, "AccessKeyId", newJString(AccessKeyId))
  add(query_614571, "Version", newJString(Version))
  result = call_614570.call(nil, query_614571, nil, nil, nil)

var getUpdateAccessKey* = Call_GetUpdateAccessKey_614554(
    name: "getUpdateAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateAccessKey", validator: validate_GetUpdateAccessKey_614555,
    base: "/", url: url_GetUpdateAccessKey_614556,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccountPasswordPolicy_614615 = ref object of OpenApiRestCall_609589
proc url_PostUpdateAccountPasswordPolicy_614617(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAccountPasswordPolicy_614616(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614618 = query.getOrDefault("Action")
  valid_614618 = validateParameter(valid_614618, JString, required = true, default = newJString(
      "UpdateAccountPasswordPolicy"))
  if valid_614618 != nil:
    section.add "Action", valid_614618
  var valid_614619 = query.getOrDefault("Version")
  valid_614619 = validateParameter(valid_614619, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614619 != nil:
    section.add "Version", valid_614619
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614620 = header.getOrDefault("X-Amz-Signature")
  valid_614620 = validateParameter(valid_614620, JString, required = false,
                                 default = nil)
  if valid_614620 != nil:
    section.add "X-Amz-Signature", valid_614620
  var valid_614621 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614621 = validateParameter(valid_614621, JString, required = false,
                                 default = nil)
  if valid_614621 != nil:
    section.add "X-Amz-Content-Sha256", valid_614621
  var valid_614622 = header.getOrDefault("X-Amz-Date")
  valid_614622 = validateParameter(valid_614622, JString, required = false,
                                 default = nil)
  if valid_614622 != nil:
    section.add "X-Amz-Date", valid_614622
  var valid_614623 = header.getOrDefault("X-Amz-Credential")
  valid_614623 = validateParameter(valid_614623, JString, required = false,
                                 default = nil)
  if valid_614623 != nil:
    section.add "X-Amz-Credential", valid_614623
  var valid_614624 = header.getOrDefault("X-Amz-Security-Token")
  valid_614624 = validateParameter(valid_614624, JString, required = false,
                                 default = nil)
  if valid_614624 != nil:
    section.add "X-Amz-Security-Token", valid_614624
  var valid_614625 = header.getOrDefault("X-Amz-Algorithm")
  valid_614625 = validateParameter(valid_614625, JString, required = false,
                                 default = nil)
  if valid_614625 != nil:
    section.add "X-Amz-Algorithm", valid_614625
  var valid_614626 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614626 = validateParameter(valid_614626, JString, required = false,
                                 default = nil)
  if valid_614626 != nil:
    section.add "X-Amz-SignedHeaders", valid_614626
  result.add "header", section
  ## parameters in `formData` object:
  ##   HardExpiry: JBool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   AllowUsersToChangePassword: JBool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   RequireLowercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   RequireNumbers: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   RequireUppercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MaxPasswordAge: JInt
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   PasswordReusePrevention: JInt
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireSymbols: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   MinimumPasswordLength: JInt
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  section = newJObject()
  var valid_614627 = formData.getOrDefault("HardExpiry")
  valid_614627 = validateParameter(valid_614627, JBool, required = false, default = nil)
  if valid_614627 != nil:
    section.add "HardExpiry", valid_614627
  var valid_614628 = formData.getOrDefault("AllowUsersToChangePassword")
  valid_614628 = validateParameter(valid_614628, JBool, required = false, default = nil)
  if valid_614628 != nil:
    section.add "AllowUsersToChangePassword", valid_614628
  var valid_614629 = formData.getOrDefault("RequireLowercaseCharacters")
  valid_614629 = validateParameter(valid_614629, JBool, required = false, default = nil)
  if valid_614629 != nil:
    section.add "RequireLowercaseCharacters", valid_614629
  var valid_614630 = formData.getOrDefault("RequireNumbers")
  valid_614630 = validateParameter(valid_614630, JBool, required = false, default = nil)
  if valid_614630 != nil:
    section.add "RequireNumbers", valid_614630
  var valid_614631 = formData.getOrDefault("RequireUppercaseCharacters")
  valid_614631 = validateParameter(valid_614631, JBool, required = false, default = nil)
  if valid_614631 != nil:
    section.add "RequireUppercaseCharacters", valid_614631
  var valid_614632 = formData.getOrDefault("MaxPasswordAge")
  valid_614632 = validateParameter(valid_614632, JInt, required = false, default = nil)
  if valid_614632 != nil:
    section.add "MaxPasswordAge", valid_614632
  var valid_614633 = formData.getOrDefault("PasswordReusePrevention")
  valid_614633 = validateParameter(valid_614633, JInt, required = false, default = nil)
  if valid_614633 != nil:
    section.add "PasswordReusePrevention", valid_614633
  var valid_614634 = formData.getOrDefault("RequireSymbols")
  valid_614634 = validateParameter(valid_614634, JBool, required = false, default = nil)
  if valid_614634 != nil:
    section.add "RequireSymbols", valid_614634
  var valid_614635 = formData.getOrDefault("MinimumPasswordLength")
  valid_614635 = validateParameter(valid_614635, JInt, required = false, default = nil)
  if valid_614635 != nil:
    section.add "MinimumPasswordLength", valid_614635
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614636: Call_PostUpdateAccountPasswordPolicy_614615;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614636.validator(path, query, header, formData, body)
  let scheme = call_614636.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614636.url(scheme.get, call_614636.host, call_614636.base,
                         call_614636.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614636, url, valid)

proc call*(call_614637: Call_PostUpdateAccountPasswordPolicy_614615;
          HardExpiry: bool = false; AllowUsersToChangePassword: bool = false;
          RequireLowercaseCharacters: bool = false; RequireNumbers: bool = false;
          RequireUppercaseCharacters: bool = false; MaxPasswordAge: int = 0;
          Action: string = "UpdateAccountPasswordPolicy";
          PasswordReusePrevention: int = 0; Version: string = "2010-05-08";
          RequireSymbols: bool = false; MinimumPasswordLength: int = 0): Recallable =
  ## postUpdateAccountPasswordPolicy
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ##   HardExpiry: bool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   AllowUsersToChangePassword: bool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   RequireLowercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   RequireNumbers: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   RequireUppercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MaxPasswordAge: int
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   Action: string (required)
  ##   PasswordReusePrevention: int
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   Version: string (required)
  ##   RequireSymbols: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   MinimumPasswordLength: int
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  var query_614638 = newJObject()
  var formData_614639 = newJObject()
  add(formData_614639, "HardExpiry", newJBool(HardExpiry))
  add(formData_614639, "AllowUsersToChangePassword",
      newJBool(AllowUsersToChangePassword))
  add(formData_614639, "RequireLowercaseCharacters",
      newJBool(RequireLowercaseCharacters))
  add(formData_614639, "RequireNumbers", newJBool(RequireNumbers))
  add(formData_614639, "RequireUppercaseCharacters",
      newJBool(RequireUppercaseCharacters))
  add(formData_614639, "MaxPasswordAge", newJInt(MaxPasswordAge))
  add(query_614638, "Action", newJString(Action))
  add(formData_614639, "PasswordReusePrevention", newJInt(PasswordReusePrevention))
  add(query_614638, "Version", newJString(Version))
  add(formData_614639, "RequireSymbols", newJBool(RequireSymbols))
  add(formData_614639, "MinimumPasswordLength", newJInt(MinimumPasswordLength))
  result = call_614637.call(nil, query_614638, nil, formData_614639, nil)

var postUpdateAccountPasswordPolicy* = Call_PostUpdateAccountPasswordPolicy_614615(
    name: "postUpdateAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccountPasswordPolicy",
    validator: validate_PostUpdateAccountPasswordPolicy_614616, base: "/",
    url: url_PostUpdateAccountPasswordPolicy_614617,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccountPasswordPolicy_614591 = ref object of OpenApiRestCall_609589
proc url_GetUpdateAccountPasswordPolicy_614593(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAccountPasswordPolicy_614592(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RequireUppercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MinimumPasswordLength: JInt
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  ##   RequireNumbers: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   AllowUsersToChangePassword: JBool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: JInt
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   RequireSymbols: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   Action: JString (required)
  ##   PasswordReusePrevention: JInt
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireLowercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   HardExpiry: JBool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_614594 = query.getOrDefault("RequireUppercaseCharacters")
  valid_614594 = validateParameter(valid_614594, JBool, required = false, default = nil)
  if valid_614594 != nil:
    section.add "RequireUppercaseCharacters", valid_614594
  var valid_614595 = query.getOrDefault("MinimumPasswordLength")
  valid_614595 = validateParameter(valid_614595, JInt, required = false, default = nil)
  if valid_614595 != nil:
    section.add "MinimumPasswordLength", valid_614595
  var valid_614596 = query.getOrDefault("RequireNumbers")
  valid_614596 = validateParameter(valid_614596, JBool, required = false, default = nil)
  if valid_614596 != nil:
    section.add "RequireNumbers", valid_614596
  var valid_614597 = query.getOrDefault("AllowUsersToChangePassword")
  valid_614597 = validateParameter(valid_614597, JBool, required = false, default = nil)
  if valid_614597 != nil:
    section.add "AllowUsersToChangePassword", valid_614597
  var valid_614598 = query.getOrDefault("MaxPasswordAge")
  valid_614598 = validateParameter(valid_614598, JInt, required = false, default = nil)
  if valid_614598 != nil:
    section.add "MaxPasswordAge", valid_614598
  var valid_614599 = query.getOrDefault("RequireSymbols")
  valid_614599 = validateParameter(valid_614599, JBool, required = false, default = nil)
  if valid_614599 != nil:
    section.add "RequireSymbols", valid_614599
  var valid_614600 = query.getOrDefault("Action")
  valid_614600 = validateParameter(valid_614600, JString, required = true, default = newJString(
      "UpdateAccountPasswordPolicy"))
  if valid_614600 != nil:
    section.add "Action", valid_614600
  var valid_614601 = query.getOrDefault("PasswordReusePrevention")
  valid_614601 = validateParameter(valid_614601, JInt, required = false, default = nil)
  if valid_614601 != nil:
    section.add "PasswordReusePrevention", valid_614601
  var valid_614602 = query.getOrDefault("RequireLowercaseCharacters")
  valid_614602 = validateParameter(valid_614602, JBool, required = false, default = nil)
  if valid_614602 != nil:
    section.add "RequireLowercaseCharacters", valid_614602
  var valid_614603 = query.getOrDefault("HardExpiry")
  valid_614603 = validateParameter(valid_614603, JBool, required = false, default = nil)
  if valid_614603 != nil:
    section.add "HardExpiry", valid_614603
  var valid_614604 = query.getOrDefault("Version")
  valid_614604 = validateParameter(valid_614604, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614604 != nil:
    section.add "Version", valid_614604
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614605 = header.getOrDefault("X-Amz-Signature")
  valid_614605 = validateParameter(valid_614605, JString, required = false,
                                 default = nil)
  if valid_614605 != nil:
    section.add "X-Amz-Signature", valid_614605
  var valid_614606 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614606 = validateParameter(valid_614606, JString, required = false,
                                 default = nil)
  if valid_614606 != nil:
    section.add "X-Amz-Content-Sha256", valid_614606
  var valid_614607 = header.getOrDefault("X-Amz-Date")
  valid_614607 = validateParameter(valid_614607, JString, required = false,
                                 default = nil)
  if valid_614607 != nil:
    section.add "X-Amz-Date", valid_614607
  var valid_614608 = header.getOrDefault("X-Amz-Credential")
  valid_614608 = validateParameter(valid_614608, JString, required = false,
                                 default = nil)
  if valid_614608 != nil:
    section.add "X-Amz-Credential", valid_614608
  var valid_614609 = header.getOrDefault("X-Amz-Security-Token")
  valid_614609 = validateParameter(valid_614609, JString, required = false,
                                 default = nil)
  if valid_614609 != nil:
    section.add "X-Amz-Security-Token", valid_614609
  var valid_614610 = header.getOrDefault("X-Amz-Algorithm")
  valid_614610 = validateParameter(valid_614610, JString, required = false,
                                 default = nil)
  if valid_614610 != nil:
    section.add "X-Amz-Algorithm", valid_614610
  var valid_614611 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614611 = validateParameter(valid_614611, JString, required = false,
                                 default = nil)
  if valid_614611 != nil:
    section.add "X-Amz-SignedHeaders", valid_614611
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614612: Call_GetUpdateAccountPasswordPolicy_614591; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614612.validator(path, query, header, formData, body)
  let scheme = call_614612.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614612.url(scheme.get, call_614612.host, call_614612.base,
                         call_614612.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614612, url, valid)

proc call*(call_614613: Call_GetUpdateAccountPasswordPolicy_614591;
          RequireUppercaseCharacters: bool = false; MinimumPasswordLength: int = 0;
          RequireNumbers: bool = false; AllowUsersToChangePassword: bool = false;
          MaxPasswordAge: int = 0; RequireSymbols: bool = false;
          Action: string = "UpdateAccountPasswordPolicy";
          PasswordReusePrevention: int = 0;
          RequireLowercaseCharacters: bool = false; HardExpiry: bool = false;
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateAccountPasswordPolicy
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ##   RequireUppercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MinimumPasswordLength: int
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  ##   RequireNumbers: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   AllowUsersToChangePassword: bool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: int
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   RequireSymbols: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   Action: string (required)
  ##   PasswordReusePrevention: int
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireLowercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   HardExpiry: bool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   Version: string (required)
  var query_614614 = newJObject()
  add(query_614614, "RequireUppercaseCharacters",
      newJBool(RequireUppercaseCharacters))
  add(query_614614, "MinimumPasswordLength", newJInt(MinimumPasswordLength))
  add(query_614614, "RequireNumbers", newJBool(RequireNumbers))
  add(query_614614, "AllowUsersToChangePassword",
      newJBool(AllowUsersToChangePassword))
  add(query_614614, "MaxPasswordAge", newJInt(MaxPasswordAge))
  add(query_614614, "RequireSymbols", newJBool(RequireSymbols))
  add(query_614614, "Action", newJString(Action))
  add(query_614614, "PasswordReusePrevention", newJInt(PasswordReusePrevention))
  add(query_614614, "RequireLowercaseCharacters",
      newJBool(RequireLowercaseCharacters))
  add(query_614614, "HardExpiry", newJBool(HardExpiry))
  add(query_614614, "Version", newJString(Version))
  result = call_614613.call(nil, query_614614, nil, nil, nil)

var getUpdateAccountPasswordPolicy* = Call_GetUpdateAccountPasswordPolicy_614591(
    name: "getUpdateAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccountPasswordPolicy",
    validator: validate_GetUpdateAccountPasswordPolicy_614592, base: "/",
    url: url_GetUpdateAccountPasswordPolicy_614593,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAssumeRolePolicy_614657 = ref object of OpenApiRestCall_609589
proc url_PostUpdateAssumeRolePolicy_614659(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAssumeRolePolicy_614658(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614660 = query.getOrDefault("Action")
  valid_614660 = validateParameter(valid_614660, JString, required = true,
                                 default = newJString("UpdateAssumeRolePolicy"))
  if valid_614660 != nil:
    section.add "Action", valid_614660
  var valid_614661 = query.getOrDefault("Version")
  valid_614661 = validateParameter(valid_614661, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614661 != nil:
    section.add "Version", valid_614661
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614662 = header.getOrDefault("X-Amz-Signature")
  valid_614662 = validateParameter(valid_614662, JString, required = false,
                                 default = nil)
  if valid_614662 != nil:
    section.add "X-Amz-Signature", valid_614662
  var valid_614663 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614663 = validateParameter(valid_614663, JString, required = false,
                                 default = nil)
  if valid_614663 != nil:
    section.add "X-Amz-Content-Sha256", valid_614663
  var valid_614664 = header.getOrDefault("X-Amz-Date")
  valid_614664 = validateParameter(valid_614664, JString, required = false,
                                 default = nil)
  if valid_614664 != nil:
    section.add "X-Amz-Date", valid_614664
  var valid_614665 = header.getOrDefault("X-Amz-Credential")
  valid_614665 = validateParameter(valid_614665, JString, required = false,
                                 default = nil)
  if valid_614665 != nil:
    section.add "X-Amz-Credential", valid_614665
  var valid_614666 = header.getOrDefault("X-Amz-Security-Token")
  valid_614666 = validateParameter(valid_614666, JString, required = false,
                                 default = nil)
  if valid_614666 != nil:
    section.add "X-Amz-Security-Token", valid_614666
  var valid_614667 = header.getOrDefault("X-Amz-Algorithm")
  valid_614667 = validateParameter(valid_614667, JString, required = false,
                                 default = nil)
  if valid_614667 != nil:
    section.add "X-Amz-Algorithm", valid_614667
  var valid_614668 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614668 = validateParameter(valid_614668, JString, required = false,
                                 default = nil)
  if valid_614668 != nil:
    section.add "X-Amz-SignedHeaders", valid_614668
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_614669 = formData.getOrDefault("PolicyDocument")
  valid_614669 = validateParameter(valid_614669, JString, required = true,
                                 default = nil)
  if valid_614669 != nil:
    section.add "PolicyDocument", valid_614669
  var valid_614670 = formData.getOrDefault("RoleName")
  valid_614670 = validateParameter(valid_614670, JString, required = true,
                                 default = nil)
  if valid_614670 != nil:
    section.add "RoleName", valid_614670
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614671: Call_PostUpdateAssumeRolePolicy_614657; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  let valid = call_614671.validator(path, query, header, formData, body)
  let scheme = call_614671.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614671.url(scheme.get, call_614671.host, call_614671.base,
                         call_614671.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614671, url, valid)

proc call*(call_614672: Call_PostUpdateAssumeRolePolicy_614657;
          PolicyDocument: string; RoleName: string;
          Action: string = "UpdateAssumeRolePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateAssumeRolePolicy
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614673 = newJObject()
  var formData_614674 = newJObject()
  add(formData_614674, "PolicyDocument", newJString(PolicyDocument))
  add(formData_614674, "RoleName", newJString(RoleName))
  add(query_614673, "Action", newJString(Action))
  add(query_614673, "Version", newJString(Version))
  result = call_614672.call(nil, query_614673, nil, formData_614674, nil)

var postUpdateAssumeRolePolicy* = Call_PostUpdateAssumeRolePolicy_614657(
    name: "postUpdateAssumeRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAssumeRolePolicy",
    validator: validate_PostUpdateAssumeRolePolicy_614658, base: "/",
    url: url_PostUpdateAssumeRolePolicy_614659,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAssumeRolePolicy_614640 = ref object of OpenApiRestCall_609589
proc url_GetUpdateAssumeRolePolicy_614642(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAssumeRolePolicy_614641(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_614643 = query.getOrDefault("RoleName")
  valid_614643 = validateParameter(valid_614643, JString, required = true,
                                 default = nil)
  if valid_614643 != nil:
    section.add "RoleName", valid_614643
  var valid_614644 = query.getOrDefault("PolicyDocument")
  valid_614644 = validateParameter(valid_614644, JString, required = true,
                                 default = nil)
  if valid_614644 != nil:
    section.add "PolicyDocument", valid_614644
  var valid_614645 = query.getOrDefault("Action")
  valid_614645 = validateParameter(valid_614645, JString, required = true,
                                 default = newJString("UpdateAssumeRolePolicy"))
  if valid_614645 != nil:
    section.add "Action", valid_614645
  var valid_614646 = query.getOrDefault("Version")
  valid_614646 = validateParameter(valid_614646, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614646 != nil:
    section.add "Version", valid_614646
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614647 = header.getOrDefault("X-Amz-Signature")
  valid_614647 = validateParameter(valid_614647, JString, required = false,
                                 default = nil)
  if valid_614647 != nil:
    section.add "X-Amz-Signature", valid_614647
  var valid_614648 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614648 = validateParameter(valid_614648, JString, required = false,
                                 default = nil)
  if valid_614648 != nil:
    section.add "X-Amz-Content-Sha256", valid_614648
  var valid_614649 = header.getOrDefault("X-Amz-Date")
  valid_614649 = validateParameter(valid_614649, JString, required = false,
                                 default = nil)
  if valid_614649 != nil:
    section.add "X-Amz-Date", valid_614649
  var valid_614650 = header.getOrDefault("X-Amz-Credential")
  valid_614650 = validateParameter(valid_614650, JString, required = false,
                                 default = nil)
  if valid_614650 != nil:
    section.add "X-Amz-Credential", valid_614650
  var valid_614651 = header.getOrDefault("X-Amz-Security-Token")
  valid_614651 = validateParameter(valid_614651, JString, required = false,
                                 default = nil)
  if valid_614651 != nil:
    section.add "X-Amz-Security-Token", valid_614651
  var valid_614652 = header.getOrDefault("X-Amz-Algorithm")
  valid_614652 = validateParameter(valid_614652, JString, required = false,
                                 default = nil)
  if valid_614652 != nil:
    section.add "X-Amz-Algorithm", valid_614652
  var valid_614653 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614653 = validateParameter(valid_614653, JString, required = false,
                                 default = nil)
  if valid_614653 != nil:
    section.add "X-Amz-SignedHeaders", valid_614653
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614654: Call_GetUpdateAssumeRolePolicy_614640; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  let valid = call_614654.validator(path, query, header, formData, body)
  let scheme = call_614654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614654.url(scheme.get, call_614654.host, call_614654.base,
                         call_614654.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614654, url, valid)

proc call*(call_614655: Call_GetUpdateAssumeRolePolicy_614640; RoleName: string;
          PolicyDocument: string; Action: string = "UpdateAssumeRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateAssumeRolePolicy
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ##   RoleName: string (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614656 = newJObject()
  add(query_614656, "RoleName", newJString(RoleName))
  add(query_614656, "PolicyDocument", newJString(PolicyDocument))
  add(query_614656, "Action", newJString(Action))
  add(query_614656, "Version", newJString(Version))
  result = call_614655.call(nil, query_614656, nil, nil, nil)

var getUpdateAssumeRolePolicy* = Call_GetUpdateAssumeRolePolicy_614640(
    name: "getUpdateAssumeRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAssumeRolePolicy",
    validator: validate_GetUpdateAssumeRolePolicy_614641, base: "/",
    url: url_GetUpdateAssumeRolePolicy_614642,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateGroup_614693 = ref object of OpenApiRestCall_609589
proc url_PostUpdateGroup_614695(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateGroup_614694(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614696 = query.getOrDefault("Action")
  valid_614696 = validateParameter(valid_614696, JString, required = true,
                                 default = newJString("UpdateGroup"))
  if valid_614696 != nil:
    section.add "Action", valid_614696
  var valid_614697 = query.getOrDefault("Version")
  valid_614697 = validateParameter(valid_614697, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614697 != nil:
    section.add "Version", valid_614697
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614698 = header.getOrDefault("X-Amz-Signature")
  valid_614698 = validateParameter(valid_614698, JString, required = false,
                                 default = nil)
  if valid_614698 != nil:
    section.add "X-Amz-Signature", valid_614698
  var valid_614699 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614699 = validateParameter(valid_614699, JString, required = false,
                                 default = nil)
  if valid_614699 != nil:
    section.add "X-Amz-Content-Sha256", valid_614699
  var valid_614700 = header.getOrDefault("X-Amz-Date")
  valid_614700 = validateParameter(valid_614700, JString, required = false,
                                 default = nil)
  if valid_614700 != nil:
    section.add "X-Amz-Date", valid_614700
  var valid_614701 = header.getOrDefault("X-Amz-Credential")
  valid_614701 = validateParameter(valid_614701, JString, required = false,
                                 default = nil)
  if valid_614701 != nil:
    section.add "X-Amz-Credential", valid_614701
  var valid_614702 = header.getOrDefault("X-Amz-Security-Token")
  valid_614702 = validateParameter(valid_614702, JString, required = false,
                                 default = nil)
  if valid_614702 != nil:
    section.add "X-Amz-Security-Token", valid_614702
  var valid_614703 = header.getOrDefault("X-Amz-Algorithm")
  valid_614703 = validateParameter(valid_614703, JString, required = false,
                                 default = nil)
  if valid_614703 != nil:
    section.add "X-Amz-Algorithm", valid_614703
  var valid_614704 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614704 = validateParameter(valid_614704, JString, required = false,
                                 default = nil)
  if valid_614704 != nil:
    section.add "X-Amz-SignedHeaders", valid_614704
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewGroupName: JString
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   GroupName: JString (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  var valid_614705 = formData.getOrDefault("NewGroupName")
  valid_614705 = validateParameter(valid_614705, JString, required = false,
                                 default = nil)
  if valid_614705 != nil:
    section.add "NewGroupName", valid_614705
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_614706 = formData.getOrDefault("GroupName")
  valid_614706 = validateParameter(valid_614706, JString, required = true,
                                 default = nil)
  if valid_614706 != nil:
    section.add "GroupName", valid_614706
  var valid_614707 = formData.getOrDefault("NewPath")
  valid_614707 = validateParameter(valid_614707, JString, required = false,
                                 default = nil)
  if valid_614707 != nil:
    section.add "NewPath", valid_614707
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614708: Call_PostUpdateGroup_614693; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  let valid = call_614708.validator(path, query, header, formData, body)
  let scheme = call_614708.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614708.url(scheme.get, call_614708.host, call_614708.base,
                         call_614708.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614708, url, valid)

proc call*(call_614709: Call_PostUpdateGroup_614693; GroupName: string;
          NewGroupName: string = ""; NewPath: string = "";
          Action: string = "UpdateGroup"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateGroup
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ##   NewGroupName: string
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   GroupName: string (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614710 = newJObject()
  var formData_614711 = newJObject()
  add(formData_614711, "NewGroupName", newJString(NewGroupName))
  add(formData_614711, "GroupName", newJString(GroupName))
  add(formData_614711, "NewPath", newJString(NewPath))
  add(query_614710, "Action", newJString(Action))
  add(query_614710, "Version", newJString(Version))
  result = call_614709.call(nil, query_614710, nil, formData_614711, nil)

var postUpdateGroup* = Call_PostUpdateGroup_614693(name: "postUpdateGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateGroup", validator: validate_PostUpdateGroup_614694,
    base: "/", url: url_PostUpdateGroup_614695, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateGroup_614675 = ref object of OpenApiRestCall_609589
proc url_GetUpdateGroup_614677(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateGroup_614676(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   NewGroupName: JString
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_614678 = query.getOrDefault("GroupName")
  valid_614678 = validateParameter(valid_614678, JString, required = true,
                                 default = nil)
  if valid_614678 != nil:
    section.add "GroupName", valid_614678
  var valid_614679 = query.getOrDefault("NewPath")
  valid_614679 = validateParameter(valid_614679, JString, required = false,
                                 default = nil)
  if valid_614679 != nil:
    section.add "NewPath", valid_614679
  var valid_614680 = query.getOrDefault("Action")
  valid_614680 = validateParameter(valid_614680, JString, required = true,
                                 default = newJString("UpdateGroup"))
  if valid_614680 != nil:
    section.add "Action", valid_614680
  var valid_614681 = query.getOrDefault("NewGroupName")
  valid_614681 = validateParameter(valid_614681, JString, required = false,
                                 default = nil)
  if valid_614681 != nil:
    section.add "NewGroupName", valid_614681
  var valid_614682 = query.getOrDefault("Version")
  valid_614682 = validateParameter(valid_614682, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614682 != nil:
    section.add "Version", valid_614682
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614683 = header.getOrDefault("X-Amz-Signature")
  valid_614683 = validateParameter(valid_614683, JString, required = false,
                                 default = nil)
  if valid_614683 != nil:
    section.add "X-Amz-Signature", valid_614683
  var valid_614684 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614684 = validateParameter(valid_614684, JString, required = false,
                                 default = nil)
  if valid_614684 != nil:
    section.add "X-Amz-Content-Sha256", valid_614684
  var valid_614685 = header.getOrDefault("X-Amz-Date")
  valid_614685 = validateParameter(valid_614685, JString, required = false,
                                 default = nil)
  if valid_614685 != nil:
    section.add "X-Amz-Date", valid_614685
  var valid_614686 = header.getOrDefault("X-Amz-Credential")
  valid_614686 = validateParameter(valid_614686, JString, required = false,
                                 default = nil)
  if valid_614686 != nil:
    section.add "X-Amz-Credential", valid_614686
  var valid_614687 = header.getOrDefault("X-Amz-Security-Token")
  valid_614687 = validateParameter(valid_614687, JString, required = false,
                                 default = nil)
  if valid_614687 != nil:
    section.add "X-Amz-Security-Token", valid_614687
  var valid_614688 = header.getOrDefault("X-Amz-Algorithm")
  valid_614688 = validateParameter(valid_614688, JString, required = false,
                                 default = nil)
  if valid_614688 != nil:
    section.add "X-Amz-Algorithm", valid_614688
  var valid_614689 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614689 = validateParameter(valid_614689, JString, required = false,
                                 default = nil)
  if valid_614689 != nil:
    section.add "X-Amz-SignedHeaders", valid_614689
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614690: Call_GetUpdateGroup_614675; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  let valid = call_614690.validator(path, query, header, formData, body)
  let scheme = call_614690.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614690.url(scheme.get, call_614690.host, call_614690.base,
                         call_614690.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614690, url, valid)

proc call*(call_614691: Call_GetUpdateGroup_614675; GroupName: string;
          NewPath: string = ""; Action: string = "UpdateGroup";
          NewGroupName: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getUpdateGroup
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ##   GroupName: string (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   NewGroupName: string
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: string (required)
  var query_614692 = newJObject()
  add(query_614692, "GroupName", newJString(GroupName))
  add(query_614692, "NewPath", newJString(NewPath))
  add(query_614692, "Action", newJString(Action))
  add(query_614692, "NewGroupName", newJString(NewGroupName))
  add(query_614692, "Version", newJString(Version))
  result = call_614691.call(nil, query_614692, nil, nil, nil)

var getUpdateGroup* = Call_GetUpdateGroup_614675(name: "getUpdateGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateGroup", validator: validate_GetUpdateGroup_614676,
    base: "/", url: url_GetUpdateGroup_614677, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateLoginProfile_614730 = ref object of OpenApiRestCall_609589
proc url_PostUpdateLoginProfile_614732(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateLoginProfile_614731(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614733 = query.getOrDefault("Action")
  valid_614733 = validateParameter(valid_614733, JString, required = true,
                                 default = newJString("UpdateLoginProfile"))
  if valid_614733 != nil:
    section.add "Action", valid_614733
  var valid_614734 = query.getOrDefault("Version")
  valid_614734 = validateParameter(valid_614734, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614734 != nil:
    section.add "Version", valid_614734
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614735 = header.getOrDefault("X-Amz-Signature")
  valid_614735 = validateParameter(valid_614735, JString, required = false,
                                 default = nil)
  if valid_614735 != nil:
    section.add "X-Amz-Signature", valid_614735
  var valid_614736 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614736 = validateParameter(valid_614736, JString, required = false,
                                 default = nil)
  if valid_614736 != nil:
    section.add "X-Amz-Content-Sha256", valid_614736
  var valid_614737 = header.getOrDefault("X-Amz-Date")
  valid_614737 = validateParameter(valid_614737, JString, required = false,
                                 default = nil)
  if valid_614737 != nil:
    section.add "X-Amz-Date", valid_614737
  var valid_614738 = header.getOrDefault("X-Amz-Credential")
  valid_614738 = validateParameter(valid_614738, JString, required = false,
                                 default = nil)
  if valid_614738 != nil:
    section.add "X-Amz-Credential", valid_614738
  var valid_614739 = header.getOrDefault("X-Amz-Security-Token")
  valid_614739 = validateParameter(valid_614739, JString, required = false,
                                 default = nil)
  if valid_614739 != nil:
    section.add "X-Amz-Security-Token", valid_614739
  var valid_614740 = header.getOrDefault("X-Amz-Algorithm")
  valid_614740 = validateParameter(valid_614740, JString, required = false,
                                 default = nil)
  if valid_614740 != nil:
    section.add "X-Amz-Algorithm", valid_614740
  var valid_614741 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614741 = validateParameter(valid_614741, JString, required = false,
                                 default = nil)
  if valid_614741 != nil:
    section.add "X-Amz-SignedHeaders", valid_614741
  result.add "header", section
  ## parameters in `formData` object:
  ##   Password: JString
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  section = newJObject()
  var valid_614742 = formData.getOrDefault("Password")
  valid_614742 = validateParameter(valid_614742, JString, required = false,
                                 default = nil)
  if valid_614742 != nil:
    section.add "Password", valid_614742
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_614743 = formData.getOrDefault("UserName")
  valid_614743 = validateParameter(valid_614743, JString, required = true,
                                 default = nil)
  if valid_614743 != nil:
    section.add "UserName", valid_614743
  var valid_614744 = formData.getOrDefault("PasswordResetRequired")
  valid_614744 = validateParameter(valid_614744, JBool, required = false, default = nil)
  if valid_614744 != nil:
    section.add "PasswordResetRequired", valid_614744
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614745: Call_PostUpdateLoginProfile_614730; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614745.validator(path, query, header, formData, body)
  let scheme = call_614745.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614745.url(scheme.get, call_614745.host, call_614745.base,
                         call_614745.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614745, url, valid)

proc call*(call_614746: Call_PostUpdateLoginProfile_614730; UserName: string;
          Password: string = ""; Action: string = "UpdateLoginProfile";
          PasswordResetRequired: bool = false; Version: string = "2010-05-08"): Recallable =
  ## postUpdateLoginProfile
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   Password: string
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   PasswordResetRequired: bool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Version: string (required)
  var query_614747 = newJObject()
  var formData_614748 = newJObject()
  add(formData_614748, "Password", newJString(Password))
  add(formData_614748, "UserName", newJString(UserName))
  add(query_614747, "Action", newJString(Action))
  add(formData_614748, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_614747, "Version", newJString(Version))
  result = call_614746.call(nil, query_614747, nil, formData_614748, nil)

var postUpdateLoginProfile* = Call_PostUpdateLoginProfile_614730(
    name: "postUpdateLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateLoginProfile",
    validator: validate_PostUpdateLoginProfile_614731, base: "/",
    url: url_PostUpdateLoginProfile_614732, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateLoginProfile_614712 = ref object of OpenApiRestCall_609589
proc url_GetUpdateLoginProfile_614714(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateLoginProfile_614713(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Password: JString
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614715 = query.getOrDefault("Password")
  valid_614715 = validateParameter(valid_614715, JString, required = false,
                                 default = nil)
  if valid_614715 != nil:
    section.add "Password", valid_614715
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_614716 = query.getOrDefault("UserName")
  valid_614716 = validateParameter(valid_614716, JString, required = true,
                                 default = nil)
  if valid_614716 != nil:
    section.add "UserName", valid_614716
  var valid_614717 = query.getOrDefault("PasswordResetRequired")
  valid_614717 = validateParameter(valid_614717, JBool, required = false, default = nil)
  if valid_614717 != nil:
    section.add "PasswordResetRequired", valid_614717
  var valid_614718 = query.getOrDefault("Action")
  valid_614718 = validateParameter(valid_614718, JString, required = true,
                                 default = newJString("UpdateLoginProfile"))
  if valid_614718 != nil:
    section.add "Action", valid_614718
  var valid_614719 = query.getOrDefault("Version")
  valid_614719 = validateParameter(valid_614719, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614719 != nil:
    section.add "Version", valid_614719
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614720 = header.getOrDefault("X-Amz-Signature")
  valid_614720 = validateParameter(valid_614720, JString, required = false,
                                 default = nil)
  if valid_614720 != nil:
    section.add "X-Amz-Signature", valid_614720
  var valid_614721 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614721 = validateParameter(valid_614721, JString, required = false,
                                 default = nil)
  if valid_614721 != nil:
    section.add "X-Amz-Content-Sha256", valid_614721
  var valid_614722 = header.getOrDefault("X-Amz-Date")
  valid_614722 = validateParameter(valid_614722, JString, required = false,
                                 default = nil)
  if valid_614722 != nil:
    section.add "X-Amz-Date", valid_614722
  var valid_614723 = header.getOrDefault("X-Amz-Credential")
  valid_614723 = validateParameter(valid_614723, JString, required = false,
                                 default = nil)
  if valid_614723 != nil:
    section.add "X-Amz-Credential", valid_614723
  var valid_614724 = header.getOrDefault("X-Amz-Security-Token")
  valid_614724 = validateParameter(valid_614724, JString, required = false,
                                 default = nil)
  if valid_614724 != nil:
    section.add "X-Amz-Security-Token", valid_614724
  var valid_614725 = header.getOrDefault("X-Amz-Algorithm")
  valid_614725 = validateParameter(valid_614725, JString, required = false,
                                 default = nil)
  if valid_614725 != nil:
    section.add "X-Amz-Algorithm", valid_614725
  var valid_614726 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614726 = validateParameter(valid_614726, JString, required = false,
                                 default = nil)
  if valid_614726 != nil:
    section.add "X-Amz-SignedHeaders", valid_614726
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614727: Call_GetUpdateLoginProfile_614712; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614727.validator(path, query, header, formData, body)
  let scheme = call_614727.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614727.url(scheme.get, call_614727.host, call_614727.base,
                         call_614727.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614727, url, valid)

proc call*(call_614728: Call_GetUpdateLoginProfile_614712; UserName: string;
          Password: string = ""; PasswordResetRequired: bool = false;
          Action: string = "UpdateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateLoginProfile
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   Password: string
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: bool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614729 = newJObject()
  add(query_614729, "Password", newJString(Password))
  add(query_614729, "UserName", newJString(UserName))
  add(query_614729, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_614729, "Action", newJString(Action))
  add(query_614729, "Version", newJString(Version))
  result = call_614728.call(nil, query_614729, nil, nil, nil)

var getUpdateLoginProfile* = Call_GetUpdateLoginProfile_614712(
    name: "getUpdateLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateLoginProfile",
    validator: validate_GetUpdateLoginProfile_614713, base: "/",
    url: url_GetUpdateLoginProfile_614714, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateOpenIDConnectProviderThumbprint_614766 = ref object of OpenApiRestCall_609589
proc url_PostUpdateOpenIDConnectProviderThumbprint_614768(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateOpenIDConnectProviderThumbprint_614767(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614769 = query.getOrDefault("Action")
  valid_614769 = validateParameter(valid_614769, JString, required = true, default = newJString(
      "UpdateOpenIDConnectProviderThumbprint"))
  if valid_614769 != nil:
    section.add "Action", valid_614769
  var valid_614770 = query.getOrDefault("Version")
  valid_614770 = validateParameter(valid_614770, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614770 != nil:
    section.add "Version", valid_614770
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614771 = header.getOrDefault("X-Amz-Signature")
  valid_614771 = validateParameter(valid_614771, JString, required = false,
                                 default = nil)
  if valid_614771 != nil:
    section.add "X-Amz-Signature", valid_614771
  var valid_614772 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614772 = validateParameter(valid_614772, JString, required = false,
                                 default = nil)
  if valid_614772 != nil:
    section.add "X-Amz-Content-Sha256", valid_614772
  var valid_614773 = header.getOrDefault("X-Amz-Date")
  valid_614773 = validateParameter(valid_614773, JString, required = false,
                                 default = nil)
  if valid_614773 != nil:
    section.add "X-Amz-Date", valid_614773
  var valid_614774 = header.getOrDefault("X-Amz-Credential")
  valid_614774 = validateParameter(valid_614774, JString, required = false,
                                 default = nil)
  if valid_614774 != nil:
    section.add "X-Amz-Credential", valid_614774
  var valid_614775 = header.getOrDefault("X-Amz-Security-Token")
  valid_614775 = validateParameter(valid_614775, JString, required = false,
                                 default = nil)
  if valid_614775 != nil:
    section.add "X-Amz-Security-Token", valid_614775
  var valid_614776 = header.getOrDefault("X-Amz-Algorithm")
  valid_614776 = validateParameter(valid_614776, JString, required = false,
                                 default = nil)
  if valid_614776 != nil:
    section.add "X-Amz-Algorithm", valid_614776
  var valid_614777 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614777 = validateParameter(valid_614777, JString, required = false,
                                 default = nil)
  if valid_614777 != nil:
    section.add "X-Amz-SignedHeaders", valid_614777
  result.add "header", section
  ## parameters in `formData` object:
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ThumbprintList` field"
  var valid_614778 = formData.getOrDefault("ThumbprintList")
  valid_614778 = validateParameter(valid_614778, JArray, required = true, default = nil)
  if valid_614778 != nil:
    section.add "ThumbprintList", valid_614778
  var valid_614779 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_614779 = validateParameter(valid_614779, JString, required = true,
                                 default = nil)
  if valid_614779 != nil:
    section.add "OpenIDConnectProviderArn", valid_614779
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614780: Call_PostUpdateOpenIDConnectProviderThumbprint_614766;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_614780.validator(path, query, header, formData, body)
  let scheme = call_614780.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614780.url(scheme.get, call_614780.host, call_614780.base,
                         call_614780.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614780, url, valid)

proc call*(call_614781: Call_PostUpdateOpenIDConnectProviderThumbprint_614766;
          ThumbprintList: JsonNode; OpenIDConnectProviderArn: string;
          Action: string = "UpdateOpenIDConnectProviderThumbprint";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateOpenIDConnectProviderThumbprint
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_614782 = newJObject()
  var formData_614783 = newJObject()
  if ThumbprintList != nil:
    formData_614783.add "ThumbprintList", ThumbprintList
  add(query_614782, "Action", newJString(Action))
  add(query_614782, "Version", newJString(Version))
  add(formData_614783, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_614781.call(nil, query_614782, nil, formData_614783, nil)

var postUpdateOpenIDConnectProviderThumbprint* = Call_PostUpdateOpenIDConnectProviderThumbprint_614766(
    name: "postUpdateOpenIDConnectProviderThumbprint", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=UpdateOpenIDConnectProviderThumbprint",
    validator: validate_PostUpdateOpenIDConnectProviderThumbprint_614767,
    base: "/", url: url_PostUpdateOpenIDConnectProviderThumbprint_614768,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateOpenIDConnectProviderThumbprint_614749 = ref object of OpenApiRestCall_609589
proc url_GetUpdateOpenIDConnectProviderThumbprint_614751(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateOpenIDConnectProviderThumbprint_614750(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ThumbprintList` field"
  var valid_614752 = query.getOrDefault("ThumbprintList")
  valid_614752 = validateParameter(valid_614752, JArray, required = true, default = nil)
  if valid_614752 != nil:
    section.add "ThumbprintList", valid_614752
  var valid_614753 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_614753 = validateParameter(valid_614753, JString, required = true,
                                 default = nil)
  if valid_614753 != nil:
    section.add "OpenIDConnectProviderArn", valid_614753
  var valid_614754 = query.getOrDefault("Action")
  valid_614754 = validateParameter(valid_614754, JString, required = true, default = newJString(
      "UpdateOpenIDConnectProviderThumbprint"))
  if valid_614754 != nil:
    section.add "Action", valid_614754
  var valid_614755 = query.getOrDefault("Version")
  valid_614755 = validateParameter(valid_614755, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614755 != nil:
    section.add "Version", valid_614755
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614756 = header.getOrDefault("X-Amz-Signature")
  valid_614756 = validateParameter(valid_614756, JString, required = false,
                                 default = nil)
  if valid_614756 != nil:
    section.add "X-Amz-Signature", valid_614756
  var valid_614757 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614757 = validateParameter(valid_614757, JString, required = false,
                                 default = nil)
  if valid_614757 != nil:
    section.add "X-Amz-Content-Sha256", valid_614757
  var valid_614758 = header.getOrDefault("X-Amz-Date")
  valid_614758 = validateParameter(valid_614758, JString, required = false,
                                 default = nil)
  if valid_614758 != nil:
    section.add "X-Amz-Date", valid_614758
  var valid_614759 = header.getOrDefault("X-Amz-Credential")
  valid_614759 = validateParameter(valid_614759, JString, required = false,
                                 default = nil)
  if valid_614759 != nil:
    section.add "X-Amz-Credential", valid_614759
  var valid_614760 = header.getOrDefault("X-Amz-Security-Token")
  valid_614760 = validateParameter(valid_614760, JString, required = false,
                                 default = nil)
  if valid_614760 != nil:
    section.add "X-Amz-Security-Token", valid_614760
  var valid_614761 = header.getOrDefault("X-Amz-Algorithm")
  valid_614761 = validateParameter(valid_614761, JString, required = false,
                                 default = nil)
  if valid_614761 != nil:
    section.add "X-Amz-Algorithm", valid_614761
  var valid_614762 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614762 = validateParameter(valid_614762, JString, required = false,
                                 default = nil)
  if valid_614762 != nil:
    section.add "X-Amz-SignedHeaders", valid_614762
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614763: Call_GetUpdateOpenIDConnectProviderThumbprint_614749;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_614763.validator(path, query, header, formData, body)
  let scheme = call_614763.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614763.url(scheme.get, call_614763.host, call_614763.base,
                         call_614763.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614763, url, valid)

proc call*(call_614764: Call_GetUpdateOpenIDConnectProviderThumbprint_614749;
          ThumbprintList: JsonNode; OpenIDConnectProviderArn: string;
          Action: string = "UpdateOpenIDConnectProviderThumbprint";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateOpenIDConnectProviderThumbprint
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614765 = newJObject()
  if ThumbprintList != nil:
    query_614765.add "ThumbprintList", ThumbprintList
  add(query_614765, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_614765, "Action", newJString(Action))
  add(query_614765, "Version", newJString(Version))
  result = call_614764.call(nil, query_614765, nil, nil, nil)

var getUpdateOpenIDConnectProviderThumbprint* = Call_GetUpdateOpenIDConnectProviderThumbprint_614749(
    name: "getUpdateOpenIDConnectProviderThumbprint", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=UpdateOpenIDConnectProviderThumbprint",
    validator: validate_GetUpdateOpenIDConnectProviderThumbprint_614750,
    base: "/", url: url_GetUpdateOpenIDConnectProviderThumbprint_614751,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateRole_614802 = ref object of OpenApiRestCall_609589
proc url_PostUpdateRole_614804(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateRole_614803(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614805 = query.getOrDefault("Action")
  valid_614805 = validateParameter(valid_614805, JString, required = true,
                                 default = newJString("UpdateRole"))
  if valid_614805 != nil:
    section.add "Action", valid_614805
  var valid_614806 = query.getOrDefault("Version")
  valid_614806 = validateParameter(valid_614806, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614806 != nil:
    section.add "Version", valid_614806
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614807 = header.getOrDefault("X-Amz-Signature")
  valid_614807 = validateParameter(valid_614807, JString, required = false,
                                 default = nil)
  if valid_614807 != nil:
    section.add "X-Amz-Signature", valid_614807
  var valid_614808 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614808 = validateParameter(valid_614808, JString, required = false,
                                 default = nil)
  if valid_614808 != nil:
    section.add "X-Amz-Content-Sha256", valid_614808
  var valid_614809 = header.getOrDefault("X-Amz-Date")
  valid_614809 = validateParameter(valid_614809, JString, required = false,
                                 default = nil)
  if valid_614809 != nil:
    section.add "X-Amz-Date", valid_614809
  var valid_614810 = header.getOrDefault("X-Amz-Credential")
  valid_614810 = validateParameter(valid_614810, JString, required = false,
                                 default = nil)
  if valid_614810 != nil:
    section.add "X-Amz-Credential", valid_614810
  var valid_614811 = header.getOrDefault("X-Amz-Security-Token")
  valid_614811 = validateParameter(valid_614811, JString, required = false,
                                 default = nil)
  if valid_614811 != nil:
    section.add "X-Amz-Security-Token", valid_614811
  var valid_614812 = header.getOrDefault("X-Amz-Algorithm")
  valid_614812 = validateParameter(valid_614812, JString, required = false,
                                 default = nil)
  if valid_614812 != nil:
    section.add "X-Amz-Algorithm", valid_614812
  var valid_614813 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614813 = validateParameter(valid_614813, JString, required = false,
                                 default = nil)
  if valid_614813 != nil:
    section.add "X-Amz-SignedHeaders", valid_614813
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString
  ##              : The new description that you want to apply to the specified role.
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  var valid_614814 = formData.getOrDefault("Description")
  valid_614814 = validateParameter(valid_614814, JString, required = false,
                                 default = nil)
  if valid_614814 != nil:
    section.add "Description", valid_614814
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_614815 = formData.getOrDefault("RoleName")
  valid_614815 = validateParameter(valid_614815, JString, required = true,
                                 default = nil)
  if valid_614815 != nil:
    section.add "RoleName", valid_614815
  var valid_614816 = formData.getOrDefault("MaxSessionDuration")
  valid_614816 = validateParameter(valid_614816, JInt, required = false, default = nil)
  if valid_614816 != nil:
    section.add "MaxSessionDuration", valid_614816
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614817: Call_PostUpdateRole_614802; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  let valid = call_614817.validator(path, query, header, formData, body)
  let scheme = call_614817.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614817.url(scheme.get, call_614817.host, call_614817.base,
                         call_614817.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614817, url, valid)

proc call*(call_614818: Call_PostUpdateRole_614802; RoleName: string;
          Description: string = ""; Action: string = "UpdateRole";
          MaxSessionDuration: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postUpdateRole
  ## Updates the description or maximum session duration setting of a role.
  ##   Description: string
  ##              : The new description that you want to apply to the specified role.
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  var query_614819 = newJObject()
  var formData_614820 = newJObject()
  add(formData_614820, "Description", newJString(Description))
  add(formData_614820, "RoleName", newJString(RoleName))
  add(query_614819, "Action", newJString(Action))
  add(formData_614820, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_614819, "Version", newJString(Version))
  result = call_614818.call(nil, query_614819, nil, formData_614820, nil)

var postUpdateRole* = Call_PostUpdateRole_614802(name: "postUpdateRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateRole", validator: validate_PostUpdateRole_614803,
    base: "/", url: url_PostUpdateRole_614804, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateRole_614784 = ref object of OpenApiRestCall_609589
proc url_GetUpdateRole_614786(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateRole_614785(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Description: JString
  ##              : The new description that you want to apply to the specified role.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_614787 = query.getOrDefault("RoleName")
  valid_614787 = validateParameter(valid_614787, JString, required = true,
                                 default = nil)
  if valid_614787 != nil:
    section.add "RoleName", valid_614787
  var valid_614788 = query.getOrDefault("MaxSessionDuration")
  valid_614788 = validateParameter(valid_614788, JInt, required = false, default = nil)
  if valid_614788 != nil:
    section.add "MaxSessionDuration", valid_614788
  var valid_614789 = query.getOrDefault("Action")
  valid_614789 = validateParameter(valid_614789, JString, required = true,
                                 default = newJString("UpdateRole"))
  if valid_614789 != nil:
    section.add "Action", valid_614789
  var valid_614790 = query.getOrDefault("Description")
  valid_614790 = validateParameter(valid_614790, JString, required = false,
                                 default = nil)
  if valid_614790 != nil:
    section.add "Description", valid_614790
  var valid_614791 = query.getOrDefault("Version")
  valid_614791 = validateParameter(valid_614791, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614791 != nil:
    section.add "Version", valid_614791
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614792 = header.getOrDefault("X-Amz-Signature")
  valid_614792 = validateParameter(valid_614792, JString, required = false,
                                 default = nil)
  if valid_614792 != nil:
    section.add "X-Amz-Signature", valid_614792
  var valid_614793 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614793 = validateParameter(valid_614793, JString, required = false,
                                 default = nil)
  if valid_614793 != nil:
    section.add "X-Amz-Content-Sha256", valid_614793
  var valid_614794 = header.getOrDefault("X-Amz-Date")
  valid_614794 = validateParameter(valid_614794, JString, required = false,
                                 default = nil)
  if valid_614794 != nil:
    section.add "X-Amz-Date", valid_614794
  var valid_614795 = header.getOrDefault("X-Amz-Credential")
  valid_614795 = validateParameter(valid_614795, JString, required = false,
                                 default = nil)
  if valid_614795 != nil:
    section.add "X-Amz-Credential", valid_614795
  var valid_614796 = header.getOrDefault("X-Amz-Security-Token")
  valid_614796 = validateParameter(valid_614796, JString, required = false,
                                 default = nil)
  if valid_614796 != nil:
    section.add "X-Amz-Security-Token", valid_614796
  var valid_614797 = header.getOrDefault("X-Amz-Algorithm")
  valid_614797 = validateParameter(valid_614797, JString, required = false,
                                 default = nil)
  if valid_614797 != nil:
    section.add "X-Amz-Algorithm", valid_614797
  var valid_614798 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614798 = validateParameter(valid_614798, JString, required = false,
                                 default = nil)
  if valid_614798 != nil:
    section.add "X-Amz-SignedHeaders", valid_614798
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614799: Call_GetUpdateRole_614784; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  let valid = call_614799.validator(path, query, header, formData, body)
  let scheme = call_614799.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614799.url(scheme.get, call_614799.host, call_614799.base,
                         call_614799.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614799, url, valid)

proc call*(call_614800: Call_GetUpdateRole_614784; RoleName: string;
          MaxSessionDuration: int = 0; Action: string = "UpdateRole";
          Description: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getUpdateRole
  ## Updates the description or maximum session duration setting of a role.
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Description: string
  ##              : The new description that you want to apply to the specified role.
  ##   Version: string (required)
  var query_614801 = newJObject()
  add(query_614801, "RoleName", newJString(RoleName))
  add(query_614801, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_614801, "Action", newJString(Action))
  add(query_614801, "Description", newJString(Description))
  add(query_614801, "Version", newJString(Version))
  result = call_614800.call(nil, query_614801, nil, nil, nil)

var getUpdateRole* = Call_GetUpdateRole_614784(name: "getUpdateRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateRole", validator: validate_GetUpdateRole_614785,
    base: "/", url: url_GetUpdateRole_614786, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateRoleDescription_614838 = ref object of OpenApiRestCall_609589
proc url_PostUpdateRoleDescription_614840(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateRoleDescription_614839(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614841 = query.getOrDefault("Action")
  valid_614841 = validateParameter(valid_614841, JString, required = true,
                                 default = newJString("UpdateRoleDescription"))
  if valid_614841 != nil:
    section.add "Action", valid_614841
  var valid_614842 = query.getOrDefault("Version")
  valid_614842 = validateParameter(valid_614842, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614842 != nil:
    section.add "Version", valid_614842
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614843 = header.getOrDefault("X-Amz-Signature")
  valid_614843 = validateParameter(valid_614843, JString, required = false,
                                 default = nil)
  if valid_614843 != nil:
    section.add "X-Amz-Signature", valid_614843
  var valid_614844 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614844 = validateParameter(valid_614844, JString, required = false,
                                 default = nil)
  if valid_614844 != nil:
    section.add "X-Amz-Content-Sha256", valid_614844
  var valid_614845 = header.getOrDefault("X-Amz-Date")
  valid_614845 = validateParameter(valid_614845, JString, required = false,
                                 default = nil)
  if valid_614845 != nil:
    section.add "X-Amz-Date", valid_614845
  var valid_614846 = header.getOrDefault("X-Amz-Credential")
  valid_614846 = validateParameter(valid_614846, JString, required = false,
                                 default = nil)
  if valid_614846 != nil:
    section.add "X-Amz-Credential", valid_614846
  var valid_614847 = header.getOrDefault("X-Amz-Security-Token")
  valid_614847 = validateParameter(valid_614847, JString, required = false,
                                 default = nil)
  if valid_614847 != nil:
    section.add "X-Amz-Security-Token", valid_614847
  var valid_614848 = header.getOrDefault("X-Amz-Algorithm")
  valid_614848 = validateParameter(valid_614848, JString, required = false,
                                 default = nil)
  if valid_614848 != nil:
    section.add "X-Amz-Algorithm", valid_614848
  var valid_614849 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614849 = validateParameter(valid_614849, JString, required = false,
                                 default = nil)
  if valid_614849 != nil:
    section.add "X-Amz-SignedHeaders", valid_614849
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The new description that you want to apply to the specified role.
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_614850 = formData.getOrDefault("Description")
  valid_614850 = validateParameter(valid_614850, JString, required = true,
                                 default = nil)
  if valid_614850 != nil:
    section.add "Description", valid_614850
  var valid_614851 = formData.getOrDefault("RoleName")
  valid_614851 = validateParameter(valid_614851, JString, required = true,
                                 default = nil)
  if valid_614851 != nil:
    section.add "RoleName", valid_614851
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614852: Call_PostUpdateRoleDescription_614838; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  let valid = call_614852.validator(path, query, header, formData, body)
  let scheme = call_614852.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614852.url(scheme.get, call_614852.host, call_614852.base,
                         call_614852.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614852, url, valid)

proc call*(call_614853: Call_PostUpdateRoleDescription_614838; Description: string;
          RoleName: string; Action: string = "UpdateRoleDescription";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateRoleDescription
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ##   Description: string (required)
  ##              : The new description that you want to apply to the specified role.
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614854 = newJObject()
  var formData_614855 = newJObject()
  add(formData_614855, "Description", newJString(Description))
  add(formData_614855, "RoleName", newJString(RoleName))
  add(query_614854, "Action", newJString(Action))
  add(query_614854, "Version", newJString(Version))
  result = call_614853.call(nil, query_614854, nil, formData_614855, nil)

var postUpdateRoleDescription* = Call_PostUpdateRoleDescription_614838(
    name: "postUpdateRoleDescription", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateRoleDescription",
    validator: validate_PostUpdateRoleDescription_614839, base: "/",
    url: url_PostUpdateRoleDescription_614840,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateRoleDescription_614821 = ref object of OpenApiRestCall_609589
proc url_GetUpdateRoleDescription_614823(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateRoleDescription_614822(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The new description that you want to apply to the specified role.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_614824 = query.getOrDefault("RoleName")
  valid_614824 = validateParameter(valid_614824, JString, required = true,
                                 default = nil)
  if valid_614824 != nil:
    section.add "RoleName", valid_614824
  var valid_614825 = query.getOrDefault("Action")
  valid_614825 = validateParameter(valid_614825, JString, required = true,
                                 default = newJString("UpdateRoleDescription"))
  if valid_614825 != nil:
    section.add "Action", valid_614825
  var valid_614826 = query.getOrDefault("Description")
  valid_614826 = validateParameter(valid_614826, JString, required = true,
                                 default = nil)
  if valid_614826 != nil:
    section.add "Description", valid_614826
  var valid_614827 = query.getOrDefault("Version")
  valid_614827 = validateParameter(valid_614827, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614827 != nil:
    section.add "Version", valid_614827
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614828 = header.getOrDefault("X-Amz-Signature")
  valid_614828 = validateParameter(valid_614828, JString, required = false,
                                 default = nil)
  if valid_614828 != nil:
    section.add "X-Amz-Signature", valid_614828
  var valid_614829 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614829 = validateParameter(valid_614829, JString, required = false,
                                 default = nil)
  if valid_614829 != nil:
    section.add "X-Amz-Content-Sha256", valid_614829
  var valid_614830 = header.getOrDefault("X-Amz-Date")
  valid_614830 = validateParameter(valid_614830, JString, required = false,
                                 default = nil)
  if valid_614830 != nil:
    section.add "X-Amz-Date", valid_614830
  var valid_614831 = header.getOrDefault("X-Amz-Credential")
  valid_614831 = validateParameter(valid_614831, JString, required = false,
                                 default = nil)
  if valid_614831 != nil:
    section.add "X-Amz-Credential", valid_614831
  var valid_614832 = header.getOrDefault("X-Amz-Security-Token")
  valid_614832 = validateParameter(valid_614832, JString, required = false,
                                 default = nil)
  if valid_614832 != nil:
    section.add "X-Amz-Security-Token", valid_614832
  var valid_614833 = header.getOrDefault("X-Amz-Algorithm")
  valid_614833 = validateParameter(valid_614833, JString, required = false,
                                 default = nil)
  if valid_614833 != nil:
    section.add "X-Amz-Algorithm", valid_614833
  var valid_614834 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614834 = validateParameter(valid_614834, JString, required = false,
                                 default = nil)
  if valid_614834 != nil:
    section.add "X-Amz-SignedHeaders", valid_614834
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614835: Call_GetUpdateRoleDescription_614821; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  let valid = call_614835.validator(path, query, header, formData, body)
  let scheme = call_614835.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614835.url(scheme.get, call_614835.host, call_614835.base,
                         call_614835.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614835, url, valid)

proc call*(call_614836: Call_GetUpdateRoleDescription_614821; RoleName: string;
          Description: string; Action: string = "UpdateRoleDescription";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateRoleDescription
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The new description that you want to apply to the specified role.
  ##   Version: string (required)
  var query_614837 = newJObject()
  add(query_614837, "RoleName", newJString(RoleName))
  add(query_614837, "Action", newJString(Action))
  add(query_614837, "Description", newJString(Description))
  add(query_614837, "Version", newJString(Version))
  result = call_614836.call(nil, query_614837, nil, nil, nil)

var getUpdateRoleDescription* = Call_GetUpdateRoleDescription_614821(
    name: "getUpdateRoleDescription", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateRoleDescription",
    validator: validate_GetUpdateRoleDescription_614822, base: "/",
    url: url_GetUpdateRoleDescription_614823, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSAMLProvider_614873 = ref object of OpenApiRestCall_609589
proc url_PostUpdateSAMLProvider_614875(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateSAMLProvider_614874(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614876 = query.getOrDefault("Action")
  valid_614876 = validateParameter(valid_614876, JString, required = true,
                                 default = newJString("UpdateSAMLProvider"))
  if valid_614876 != nil:
    section.add "Action", valid_614876
  var valid_614877 = query.getOrDefault("Version")
  valid_614877 = validateParameter(valid_614877, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614877 != nil:
    section.add "Version", valid_614877
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614878 = header.getOrDefault("X-Amz-Signature")
  valid_614878 = validateParameter(valid_614878, JString, required = false,
                                 default = nil)
  if valid_614878 != nil:
    section.add "X-Amz-Signature", valid_614878
  var valid_614879 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614879 = validateParameter(valid_614879, JString, required = false,
                                 default = nil)
  if valid_614879 != nil:
    section.add "X-Amz-Content-Sha256", valid_614879
  var valid_614880 = header.getOrDefault("X-Amz-Date")
  valid_614880 = validateParameter(valid_614880, JString, required = false,
                                 default = nil)
  if valid_614880 != nil:
    section.add "X-Amz-Date", valid_614880
  var valid_614881 = header.getOrDefault("X-Amz-Credential")
  valid_614881 = validateParameter(valid_614881, JString, required = false,
                                 default = nil)
  if valid_614881 != nil:
    section.add "X-Amz-Credential", valid_614881
  var valid_614882 = header.getOrDefault("X-Amz-Security-Token")
  valid_614882 = validateParameter(valid_614882, JString, required = false,
                                 default = nil)
  if valid_614882 != nil:
    section.add "X-Amz-Security-Token", valid_614882
  var valid_614883 = header.getOrDefault("X-Amz-Algorithm")
  valid_614883 = validateParameter(valid_614883, JString, required = false,
                                 default = nil)
  if valid_614883 != nil:
    section.add "X-Amz-Algorithm", valid_614883
  var valid_614884 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614884 = validateParameter(valid_614884, JString, required = false,
                                 default = nil)
  if valid_614884 != nil:
    section.add "X-Amz-SignedHeaders", valid_614884
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SAMLMetadataDocument: JString (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_614885 = formData.getOrDefault("SAMLProviderArn")
  valid_614885 = validateParameter(valid_614885, JString, required = true,
                                 default = nil)
  if valid_614885 != nil:
    section.add "SAMLProviderArn", valid_614885
  var valid_614886 = formData.getOrDefault("SAMLMetadataDocument")
  valid_614886 = validateParameter(valid_614886, JString, required = true,
                                 default = nil)
  if valid_614886 != nil:
    section.add "SAMLMetadataDocument", valid_614886
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614887: Call_PostUpdateSAMLProvider_614873; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_614887.validator(path, query, header, formData, body)
  let scheme = call_614887.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614887.url(scheme.get, call_614887.host, call_614887.base,
                         call_614887.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614887, url, valid)

proc call*(call_614888: Call_PostUpdateSAMLProvider_614873;
          SAMLProviderArn: string; SAMLMetadataDocument: string;
          Action: string = "UpdateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateSAMLProvider
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SAMLMetadataDocument: string (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614889 = newJObject()
  var formData_614890 = newJObject()
  add(formData_614890, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(formData_614890, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_614889, "Action", newJString(Action))
  add(query_614889, "Version", newJString(Version))
  result = call_614888.call(nil, query_614889, nil, formData_614890, nil)

var postUpdateSAMLProvider* = Call_PostUpdateSAMLProvider_614873(
    name: "postUpdateSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSAMLProvider",
    validator: validate_PostUpdateSAMLProvider_614874, base: "/",
    url: url_PostUpdateSAMLProvider_614875, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSAMLProvider_614856 = ref object of OpenApiRestCall_609589
proc url_GetUpdateSAMLProvider_614858(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateSAMLProvider_614857(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLMetadataDocument: JString (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_614859 = query.getOrDefault("Action")
  valid_614859 = validateParameter(valid_614859, JString, required = true,
                                 default = newJString("UpdateSAMLProvider"))
  if valid_614859 != nil:
    section.add "Action", valid_614859
  var valid_614860 = query.getOrDefault("SAMLMetadataDocument")
  valid_614860 = validateParameter(valid_614860, JString, required = true,
                                 default = nil)
  if valid_614860 != nil:
    section.add "SAMLMetadataDocument", valid_614860
  var valid_614861 = query.getOrDefault("SAMLProviderArn")
  valid_614861 = validateParameter(valid_614861, JString, required = true,
                                 default = nil)
  if valid_614861 != nil:
    section.add "SAMLProviderArn", valid_614861
  var valid_614862 = query.getOrDefault("Version")
  valid_614862 = validateParameter(valid_614862, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614862 != nil:
    section.add "Version", valid_614862
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614863 = header.getOrDefault("X-Amz-Signature")
  valid_614863 = validateParameter(valid_614863, JString, required = false,
                                 default = nil)
  if valid_614863 != nil:
    section.add "X-Amz-Signature", valid_614863
  var valid_614864 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614864 = validateParameter(valid_614864, JString, required = false,
                                 default = nil)
  if valid_614864 != nil:
    section.add "X-Amz-Content-Sha256", valid_614864
  var valid_614865 = header.getOrDefault("X-Amz-Date")
  valid_614865 = validateParameter(valid_614865, JString, required = false,
                                 default = nil)
  if valid_614865 != nil:
    section.add "X-Amz-Date", valid_614865
  var valid_614866 = header.getOrDefault("X-Amz-Credential")
  valid_614866 = validateParameter(valid_614866, JString, required = false,
                                 default = nil)
  if valid_614866 != nil:
    section.add "X-Amz-Credential", valid_614866
  var valid_614867 = header.getOrDefault("X-Amz-Security-Token")
  valid_614867 = validateParameter(valid_614867, JString, required = false,
                                 default = nil)
  if valid_614867 != nil:
    section.add "X-Amz-Security-Token", valid_614867
  var valid_614868 = header.getOrDefault("X-Amz-Algorithm")
  valid_614868 = validateParameter(valid_614868, JString, required = false,
                                 default = nil)
  if valid_614868 != nil:
    section.add "X-Amz-Algorithm", valid_614868
  var valid_614869 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614869 = validateParameter(valid_614869, JString, required = false,
                                 default = nil)
  if valid_614869 != nil:
    section.add "X-Amz-SignedHeaders", valid_614869
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614870: Call_GetUpdateSAMLProvider_614856; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_614870.validator(path, query, header, formData, body)
  let scheme = call_614870.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614870.url(scheme.get, call_614870.host, call_614870.base,
                         call_614870.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614870, url, valid)

proc call*(call_614871: Call_GetUpdateSAMLProvider_614856;
          SAMLMetadataDocument: string; SAMLProviderArn: string;
          Action: string = "UpdateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateSAMLProvider
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLMetadataDocument: string (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_614872 = newJObject()
  add(query_614872, "Action", newJString(Action))
  add(query_614872, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_614872, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_614872, "Version", newJString(Version))
  result = call_614871.call(nil, query_614872, nil, nil, nil)

var getUpdateSAMLProvider* = Call_GetUpdateSAMLProvider_614856(
    name: "getUpdateSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSAMLProvider",
    validator: validate_GetUpdateSAMLProvider_614857, base: "/",
    url: url_GetUpdateSAMLProvider_614858, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSSHPublicKey_614909 = ref object of OpenApiRestCall_609589
proc url_PostUpdateSSHPublicKey_614911(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateSSHPublicKey_614910(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614912 = query.getOrDefault("Action")
  valid_614912 = validateParameter(valid_614912, JString, required = true,
                                 default = newJString("UpdateSSHPublicKey"))
  if valid_614912 != nil:
    section.add "Action", valid_614912
  var valid_614913 = query.getOrDefault("Version")
  valid_614913 = validateParameter(valid_614913, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614913 != nil:
    section.add "Version", valid_614913
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614914 = header.getOrDefault("X-Amz-Signature")
  valid_614914 = validateParameter(valid_614914, JString, required = false,
                                 default = nil)
  if valid_614914 != nil:
    section.add "X-Amz-Signature", valid_614914
  var valid_614915 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614915 = validateParameter(valid_614915, JString, required = false,
                                 default = nil)
  if valid_614915 != nil:
    section.add "X-Amz-Content-Sha256", valid_614915
  var valid_614916 = header.getOrDefault("X-Amz-Date")
  valid_614916 = validateParameter(valid_614916, JString, required = false,
                                 default = nil)
  if valid_614916 != nil:
    section.add "X-Amz-Date", valid_614916
  var valid_614917 = header.getOrDefault("X-Amz-Credential")
  valid_614917 = validateParameter(valid_614917, JString, required = false,
                                 default = nil)
  if valid_614917 != nil:
    section.add "X-Amz-Credential", valid_614917
  var valid_614918 = header.getOrDefault("X-Amz-Security-Token")
  valid_614918 = validateParameter(valid_614918, JString, required = false,
                                 default = nil)
  if valid_614918 != nil:
    section.add "X-Amz-Security-Token", valid_614918
  var valid_614919 = header.getOrDefault("X-Amz-Algorithm")
  valid_614919 = validateParameter(valid_614919, JString, required = false,
                                 default = nil)
  if valid_614919 != nil:
    section.add "X-Amz-Algorithm", valid_614919
  var valid_614920 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614920 = validateParameter(valid_614920, JString, required = false,
                                 default = nil)
  if valid_614920 != nil:
    section.add "X-Amz-SignedHeaders", valid_614920
  result.add "header", section
  ## parameters in `formData` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SSHPublicKeyId` field"
  var valid_614921 = formData.getOrDefault("SSHPublicKeyId")
  valid_614921 = validateParameter(valid_614921, JString, required = true,
                                 default = nil)
  if valid_614921 != nil:
    section.add "SSHPublicKeyId", valid_614921
  var valid_614922 = formData.getOrDefault("UserName")
  valid_614922 = validateParameter(valid_614922, JString, required = true,
                                 default = nil)
  if valid_614922 != nil:
    section.add "UserName", valid_614922
  var valid_614923 = formData.getOrDefault("Status")
  valid_614923 = validateParameter(valid_614923, JString, required = true,
                                 default = newJString("Active"))
  if valid_614923 != nil:
    section.add "Status", valid_614923
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614924: Call_PostUpdateSSHPublicKey_614909; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_614924.validator(path, query, header, formData, body)
  let scheme = call_614924.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614924.url(scheme.get, call_614924.host, call_614924.base,
                         call_614924.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614924, url, valid)

proc call*(call_614925: Call_PostUpdateSSHPublicKey_614909; SSHPublicKeyId: string;
          UserName: string; Action: string = "UpdateSSHPublicKey";
          Status: string = "Active"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateSSHPublicKey
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Status: string (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   Version: string (required)
  var query_614926 = newJObject()
  var formData_614927 = newJObject()
  add(formData_614927, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(formData_614927, "UserName", newJString(UserName))
  add(query_614926, "Action", newJString(Action))
  add(formData_614927, "Status", newJString(Status))
  add(query_614926, "Version", newJString(Version))
  result = call_614925.call(nil, query_614926, nil, formData_614927, nil)

var postUpdateSSHPublicKey* = Call_PostUpdateSSHPublicKey_614909(
    name: "postUpdateSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSSHPublicKey",
    validator: validate_PostUpdateSSHPublicKey_614910, base: "/",
    url: url_PostUpdateSSHPublicKey_614911, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSSHPublicKey_614891 = ref object of OpenApiRestCall_609589
proc url_GetUpdateSSHPublicKey_614893(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateSSHPublicKey_614892(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_614894 = query.getOrDefault("SSHPublicKeyId")
  valid_614894 = validateParameter(valid_614894, JString, required = true,
                                 default = nil)
  if valid_614894 != nil:
    section.add "SSHPublicKeyId", valid_614894
  var valid_614895 = query.getOrDefault("UserName")
  valid_614895 = validateParameter(valid_614895, JString, required = true,
                                 default = nil)
  if valid_614895 != nil:
    section.add "UserName", valid_614895
  var valid_614896 = query.getOrDefault("Status")
  valid_614896 = validateParameter(valid_614896, JString, required = true,
                                 default = newJString("Active"))
  if valid_614896 != nil:
    section.add "Status", valid_614896
  var valid_614897 = query.getOrDefault("Action")
  valid_614897 = validateParameter(valid_614897, JString, required = true,
                                 default = newJString("UpdateSSHPublicKey"))
  if valid_614897 != nil:
    section.add "Action", valid_614897
  var valid_614898 = query.getOrDefault("Version")
  valid_614898 = validateParameter(valid_614898, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614898 != nil:
    section.add "Version", valid_614898
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614899 = header.getOrDefault("X-Amz-Signature")
  valid_614899 = validateParameter(valid_614899, JString, required = false,
                                 default = nil)
  if valid_614899 != nil:
    section.add "X-Amz-Signature", valid_614899
  var valid_614900 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614900 = validateParameter(valid_614900, JString, required = false,
                                 default = nil)
  if valid_614900 != nil:
    section.add "X-Amz-Content-Sha256", valid_614900
  var valid_614901 = header.getOrDefault("X-Amz-Date")
  valid_614901 = validateParameter(valid_614901, JString, required = false,
                                 default = nil)
  if valid_614901 != nil:
    section.add "X-Amz-Date", valid_614901
  var valid_614902 = header.getOrDefault("X-Amz-Credential")
  valid_614902 = validateParameter(valid_614902, JString, required = false,
                                 default = nil)
  if valid_614902 != nil:
    section.add "X-Amz-Credential", valid_614902
  var valid_614903 = header.getOrDefault("X-Amz-Security-Token")
  valid_614903 = validateParameter(valid_614903, JString, required = false,
                                 default = nil)
  if valid_614903 != nil:
    section.add "X-Amz-Security-Token", valid_614903
  var valid_614904 = header.getOrDefault("X-Amz-Algorithm")
  valid_614904 = validateParameter(valid_614904, JString, required = false,
                                 default = nil)
  if valid_614904 != nil:
    section.add "X-Amz-Algorithm", valid_614904
  var valid_614905 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614905 = validateParameter(valid_614905, JString, required = false,
                                 default = nil)
  if valid_614905 != nil:
    section.add "X-Amz-SignedHeaders", valid_614905
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614906: Call_GetUpdateSSHPublicKey_614891; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_614906.validator(path, query, header, formData, body)
  let scheme = call_614906.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614906.url(scheme.get, call_614906.host, call_614906.base,
                         call_614906.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614906, url, valid)

proc call*(call_614907: Call_GetUpdateSSHPublicKey_614891; SSHPublicKeyId: string;
          UserName: string; Status: string = "Active";
          Action: string = "UpdateSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateSSHPublicKey
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614908 = newJObject()
  add(query_614908, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_614908, "UserName", newJString(UserName))
  add(query_614908, "Status", newJString(Status))
  add(query_614908, "Action", newJString(Action))
  add(query_614908, "Version", newJString(Version))
  result = call_614907.call(nil, query_614908, nil, nil, nil)

var getUpdateSSHPublicKey* = Call_GetUpdateSSHPublicKey_614891(
    name: "getUpdateSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSSHPublicKey",
    validator: validate_GetUpdateSSHPublicKey_614892, base: "/",
    url: url_GetUpdateSSHPublicKey_614893, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateServerCertificate_614946 = ref object of OpenApiRestCall_609589
proc url_PostUpdateServerCertificate_614948(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateServerCertificate_614947(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614949 = query.getOrDefault("Action")
  valid_614949 = validateParameter(valid_614949, JString, required = true, default = newJString(
      "UpdateServerCertificate"))
  if valid_614949 != nil:
    section.add "Action", valid_614949
  var valid_614950 = query.getOrDefault("Version")
  valid_614950 = validateParameter(valid_614950, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614950 != nil:
    section.add "Version", valid_614950
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614951 = header.getOrDefault("X-Amz-Signature")
  valid_614951 = validateParameter(valid_614951, JString, required = false,
                                 default = nil)
  if valid_614951 != nil:
    section.add "X-Amz-Signature", valid_614951
  var valid_614952 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614952 = validateParameter(valid_614952, JString, required = false,
                                 default = nil)
  if valid_614952 != nil:
    section.add "X-Amz-Content-Sha256", valid_614952
  var valid_614953 = header.getOrDefault("X-Amz-Date")
  valid_614953 = validateParameter(valid_614953, JString, required = false,
                                 default = nil)
  if valid_614953 != nil:
    section.add "X-Amz-Date", valid_614953
  var valid_614954 = header.getOrDefault("X-Amz-Credential")
  valid_614954 = validateParameter(valid_614954, JString, required = false,
                                 default = nil)
  if valid_614954 != nil:
    section.add "X-Amz-Credential", valid_614954
  var valid_614955 = header.getOrDefault("X-Amz-Security-Token")
  valid_614955 = validateParameter(valid_614955, JString, required = false,
                                 default = nil)
  if valid_614955 != nil:
    section.add "X-Amz-Security-Token", valid_614955
  var valid_614956 = header.getOrDefault("X-Amz-Algorithm")
  valid_614956 = validateParameter(valid_614956, JString, required = false,
                                 default = nil)
  if valid_614956 != nil:
    section.add "X-Amz-Algorithm", valid_614956
  var valid_614957 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614957 = validateParameter(valid_614957, JString, required = false,
                                 default = nil)
  if valid_614957 != nil:
    section.add "X-Amz-SignedHeaders", valid_614957
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   NewServerCertificateName: JString
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_614958 = formData.getOrDefault("ServerCertificateName")
  valid_614958 = validateParameter(valid_614958, JString, required = true,
                                 default = nil)
  if valid_614958 != nil:
    section.add "ServerCertificateName", valid_614958
  var valid_614959 = formData.getOrDefault("NewPath")
  valid_614959 = validateParameter(valid_614959, JString, required = false,
                                 default = nil)
  if valid_614959 != nil:
    section.add "NewPath", valid_614959
  var valid_614960 = formData.getOrDefault("NewServerCertificateName")
  valid_614960 = validateParameter(valid_614960, JString, required = false,
                                 default = nil)
  if valid_614960 != nil:
    section.add "NewServerCertificateName", valid_614960
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614961: Call_PostUpdateServerCertificate_614946; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_614961.validator(path, query, header, formData, body)
  let scheme = call_614961.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614961.url(scheme.get, call_614961.host, call_614961.base,
                         call_614961.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614961, url, valid)

proc call*(call_614962: Call_PostUpdateServerCertificate_614946;
          ServerCertificateName: string; NewPath: string = "";
          NewServerCertificateName: string = "";
          Action: string = "UpdateServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateServerCertificate
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: string
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   NewServerCertificateName: string
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614963 = newJObject()
  var formData_614964 = newJObject()
  add(formData_614964, "ServerCertificateName", newJString(ServerCertificateName))
  add(formData_614964, "NewPath", newJString(NewPath))
  add(formData_614964, "NewServerCertificateName",
      newJString(NewServerCertificateName))
  add(query_614963, "Action", newJString(Action))
  add(query_614963, "Version", newJString(Version))
  result = call_614962.call(nil, query_614963, nil, formData_614964, nil)

var postUpdateServerCertificate* = Call_PostUpdateServerCertificate_614946(
    name: "postUpdateServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServerCertificate",
    validator: validate_PostUpdateServerCertificate_614947, base: "/",
    url: url_PostUpdateServerCertificate_614948,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateServerCertificate_614928 = ref object of OpenApiRestCall_609589
proc url_GetUpdateServerCertificate_614930(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateServerCertificate_614929(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewPath: JString
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   NewServerCertificateName: JString
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_614931 = query.getOrDefault("NewPath")
  valid_614931 = validateParameter(valid_614931, JString, required = false,
                                 default = nil)
  if valid_614931 != nil:
    section.add "NewPath", valid_614931
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_614932 = query.getOrDefault("ServerCertificateName")
  valid_614932 = validateParameter(valid_614932, JString, required = true,
                                 default = nil)
  if valid_614932 != nil:
    section.add "ServerCertificateName", valid_614932
  var valid_614933 = query.getOrDefault("Action")
  valid_614933 = validateParameter(valid_614933, JString, required = true, default = newJString(
      "UpdateServerCertificate"))
  if valid_614933 != nil:
    section.add "Action", valid_614933
  var valid_614934 = query.getOrDefault("Version")
  valid_614934 = validateParameter(valid_614934, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614934 != nil:
    section.add "Version", valid_614934
  var valid_614935 = query.getOrDefault("NewServerCertificateName")
  valid_614935 = validateParameter(valid_614935, JString, required = false,
                                 default = nil)
  if valid_614935 != nil:
    section.add "NewServerCertificateName", valid_614935
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614936 = header.getOrDefault("X-Amz-Signature")
  valid_614936 = validateParameter(valid_614936, JString, required = false,
                                 default = nil)
  if valid_614936 != nil:
    section.add "X-Amz-Signature", valid_614936
  var valid_614937 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614937 = validateParameter(valid_614937, JString, required = false,
                                 default = nil)
  if valid_614937 != nil:
    section.add "X-Amz-Content-Sha256", valid_614937
  var valid_614938 = header.getOrDefault("X-Amz-Date")
  valid_614938 = validateParameter(valid_614938, JString, required = false,
                                 default = nil)
  if valid_614938 != nil:
    section.add "X-Amz-Date", valid_614938
  var valid_614939 = header.getOrDefault("X-Amz-Credential")
  valid_614939 = validateParameter(valid_614939, JString, required = false,
                                 default = nil)
  if valid_614939 != nil:
    section.add "X-Amz-Credential", valid_614939
  var valid_614940 = header.getOrDefault("X-Amz-Security-Token")
  valid_614940 = validateParameter(valid_614940, JString, required = false,
                                 default = nil)
  if valid_614940 != nil:
    section.add "X-Amz-Security-Token", valid_614940
  var valid_614941 = header.getOrDefault("X-Amz-Algorithm")
  valid_614941 = validateParameter(valid_614941, JString, required = false,
                                 default = nil)
  if valid_614941 != nil:
    section.add "X-Amz-Algorithm", valid_614941
  var valid_614942 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614942 = validateParameter(valid_614942, JString, required = false,
                                 default = nil)
  if valid_614942 != nil:
    section.add "X-Amz-SignedHeaders", valid_614942
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614943: Call_GetUpdateServerCertificate_614928; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_614943.validator(path, query, header, formData, body)
  let scheme = call_614943.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614943.url(scheme.get, call_614943.host, call_614943.base,
                         call_614943.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614943, url, valid)

proc call*(call_614944: Call_GetUpdateServerCertificate_614928;
          ServerCertificateName: string; NewPath: string = "";
          Action: string = "UpdateServerCertificate";
          Version: string = "2010-05-08"; NewServerCertificateName: string = ""): Recallable =
  ## getUpdateServerCertificate
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   NewPath: string
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   NewServerCertificateName: string
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_614945 = newJObject()
  add(query_614945, "NewPath", newJString(NewPath))
  add(query_614945, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_614945, "Action", newJString(Action))
  add(query_614945, "Version", newJString(Version))
  add(query_614945, "NewServerCertificateName",
      newJString(NewServerCertificateName))
  result = call_614944.call(nil, query_614945, nil, nil, nil)

var getUpdateServerCertificate* = Call_GetUpdateServerCertificate_614928(
    name: "getUpdateServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServerCertificate",
    validator: validate_GetUpdateServerCertificate_614929, base: "/",
    url: url_GetUpdateServerCertificate_614930,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateServiceSpecificCredential_614983 = ref object of OpenApiRestCall_609589
proc url_PostUpdateServiceSpecificCredential_614985(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateServiceSpecificCredential_614984(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614986 = query.getOrDefault("Action")
  valid_614986 = validateParameter(valid_614986, JString, required = true, default = newJString(
      "UpdateServiceSpecificCredential"))
  if valid_614986 != nil:
    section.add "Action", valid_614986
  var valid_614987 = query.getOrDefault("Version")
  valid_614987 = validateParameter(valid_614987, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614987 != nil:
    section.add "Version", valid_614987
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614988 = header.getOrDefault("X-Amz-Signature")
  valid_614988 = validateParameter(valid_614988, JString, required = false,
                                 default = nil)
  if valid_614988 != nil:
    section.add "X-Amz-Signature", valid_614988
  var valid_614989 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614989 = validateParameter(valid_614989, JString, required = false,
                                 default = nil)
  if valid_614989 != nil:
    section.add "X-Amz-Content-Sha256", valid_614989
  var valid_614990 = header.getOrDefault("X-Amz-Date")
  valid_614990 = validateParameter(valid_614990, JString, required = false,
                                 default = nil)
  if valid_614990 != nil:
    section.add "X-Amz-Date", valid_614990
  var valid_614991 = header.getOrDefault("X-Amz-Credential")
  valid_614991 = validateParameter(valid_614991, JString, required = false,
                                 default = nil)
  if valid_614991 != nil:
    section.add "X-Amz-Credential", valid_614991
  var valid_614992 = header.getOrDefault("X-Amz-Security-Token")
  valid_614992 = validateParameter(valid_614992, JString, required = false,
                                 default = nil)
  if valid_614992 != nil:
    section.add "X-Amz-Security-Token", valid_614992
  var valid_614993 = header.getOrDefault("X-Amz-Algorithm")
  valid_614993 = validateParameter(valid_614993, JString, required = false,
                                 default = nil)
  if valid_614993 != nil:
    section.add "X-Amz-Algorithm", valid_614993
  var valid_614994 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614994 = validateParameter(valid_614994, JString, required = false,
                                 default = nil)
  if valid_614994 != nil:
    section.add "X-Amz-SignedHeaders", valid_614994
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         : The status to be assigned to the service-specific credential.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_614995 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_614995 = validateParameter(valid_614995, JString, required = true,
                                 default = nil)
  if valid_614995 != nil:
    section.add "ServiceSpecificCredentialId", valid_614995
  var valid_614996 = formData.getOrDefault("UserName")
  valid_614996 = validateParameter(valid_614996, JString, required = false,
                                 default = nil)
  if valid_614996 != nil:
    section.add "UserName", valid_614996
  var valid_614997 = formData.getOrDefault("Status")
  valid_614997 = validateParameter(valid_614997, JString, required = true,
                                 default = newJString("Active"))
  if valid_614997 != nil:
    section.add "Status", valid_614997
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614998: Call_PostUpdateServiceSpecificCredential_614983;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  let valid = call_614998.validator(path, query, header, formData, body)
  let scheme = call_614998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614998.url(scheme.get, call_614998.host, call_614998.base,
                         call_614998.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614998, url, valid)

proc call*(call_614999: Call_PostUpdateServiceSpecificCredential_614983;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "UpdateServiceSpecificCredential";
          Status: string = "Active"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateServiceSpecificCredential
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Status: string (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   Version: string (required)
  var query_615000 = newJObject()
  var formData_615001 = newJObject()
  add(formData_615001, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(formData_615001, "UserName", newJString(UserName))
  add(query_615000, "Action", newJString(Action))
  add(formData_615001, "Status", newJString(Status))
  add(query_615000, "Version", newJString(Version))
  result = call_614999.call(nil, query_615000, nil, formData_615001, nil)

var postUpdateServiceSpecificCredential* = Call_PostUpdateServiceSpecificCredential_614983(
    name: "postUpdateServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServiceSpecificCredential",
    validator: validate_PostUpdateServiceSpecificCredential_614984, base: "/",
    url: url_PostUpdateServiceSpecificCredential_614985,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateServiceSpecificCredential_614965 = ref object of OpenApiRestCall_609589
proc url_GetUpdateServiceSpecificCredential_614967(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateServiceSpecificCredential_614966(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614968 = query.getOrDefault("UserName")
  valid_614968 = validateParameter(valid_614968, JString, required = false,
                                 default = nil)
  if valid_614968 != nil:
    section.add "UserName", valid_614968
  var valid_614969 = query.getOrDefault("Status")
  valid_614969 = validateParameter(valid_614969, JString, required = true,
                                 default = newJString("Active"))
  if valid_614969 != nil:
    section.add "Status", valid_614969
  var valid_614970 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_614970 = validateParameter(valid_614970, JString, required = true,
                                 default = nil)
  if valid_614970 != nil:
    section.add "ServiceSpecificCredentialId", valid_614970
  var valid_614971 = query.getOrDefault("Action")
  valid_614971 = validateParameter(valid_614971, JString, required = true, default = newJString(
      "UpdateServiceSpecificCredential"))
  if valid_614971 != nil:
    section.add "Action", valid_614971
  var valid_614972 = query.getOrDefault("Version")
  valid_614972 = validateParameter(valid_614972, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614972 != nil:
    section.add "Version", valid_614972
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614973 = header.getOrDefault("X-Amz-Signature")
  valid_614973 = validateParameter(valid_614973, JString, required = false,
                                 default = nil)
  if valid_614973 != nil:
    section.add "X-Amz-Signature", valid_614973
  var valid_614974 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614974 = validateParameter(valid_614974, JString, required = false,
                                 default = nil)
  if valid_614974 != nil:
    section.add "X-Amz-Content-Sha256", valid_614974
  var valid_614975 = header.getOrDefault("X-Amz-Date")
  valid_614975 = validateParameter(valid_614975, JString, required = false,
                                 default = nil)
  if valid_614975 != nil:
    section.add "X-Amz-Date", valid_614975
  var valid_614976 = header.getOrDefault("X-Amz-Credential")
  valid_614976 = validateParameter(valid_614976, JString, required = false,
                                 default = nil)
  if valid_614976 != nil:
    section.add "X-Amz-Credential", valid_614976
  var valid_614977 = header.getOrDefault("X-Amz-Security-Token")
  valid_614977 = validateParameter(valid_614977, JString, required = false,
                                 default = nil)
  if valid_614977 != nil:
    section.add "X-Amz-Security-Token", valid_614977
  var valid_614978 = header.getOrDefault("X-Amz-Algorithm")
  valid_614978 = validateParameter(valid_614978, JString, required = false,
                                 default = nil)
  if valid_614978 != nil:
    section.add "X-Amz-Algorithm", valid_614978
  var valid_614979 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614979 = validateParameter(valid_614979, JString, required = false,
                                 default = nil)
  if valid_614979 != nil:
    section.add "X-Amz-SignedHeaders", valid_614979
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614980: Call_GetUpdateServiceSpecificCredential_614965;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  let valid = call_614980.validator(path, query, header, formData, body)
  let scheme = call_614980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614980.url(scheme.get, call_614980.host, call_614980.base,
                         call_614980.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614980, url, valid)

proc call*(call_614981: Call_GetUpdateServiceSpecificCredential_614965;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Status: string = "Active";
          Action: string = "UpdateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateServiceSpecificCredential
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614982 = newJObject()
  add(query_614982, "UserName", newJString(UserName))
  add(query_614982, "Status", newJString(Status))
  add(query_614982, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_614982, "Action", newJString(Action))
  add(query_614982, "Version", newJString(Version))
  result = call_614981.call(nil, query_614982, nil, nil, nil)

var getUpdateServiceSpecificCredential* = Call_GetUpdateServiceSpecificCredential_614965(
    name: "getUpdateServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServiceSpecificCredential",
    validator: validate_GetUpdateServiceSpecificCredential_614966, base: "/",
    url: url_GetUpdateServiceSpecificCredential_614967,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSigningCertificate_615020 = ref object of OpenApiRestCall_609589
proc url_PostUpdateSigningCertificate_615022(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateSigningCertificate_615021(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615023 = query.getOrDefault("Action")
  valid_615023 = validateParameter(valid_615023, JString, required = true, default = newJString(
      "UpdateSigningCertificate"))
  if valid_615023 != nil:
    section.add "Action", valid_615023
  var valid_615024 = query.getOrDefault("Version")
  valid_615024 = validateParameter(valid_615024, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615024 != nil:
    section.add "Version", valid_615024
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615025 = header.getOrDefault("X-Amz-Signature")
  valid_615025 = validateParameter(valid_615025, JString, required = false,
                                 default = nil)
  if valid_615025 != nil:
    section.add "X-Amz-Signature", valid_615025
  var valid_615026 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615026 = validateParameter(valid_615026, JString, required = false,
                                 default = nil)
  if valid_615026 != nil:
    section.add "X-Amz-Content-Sha256", valid_615026
  var valid_615027 = header.getOrDefault("X-Amz-Date")
  valid_615027 = validateParameter(valid_615027, JString, required = false,
                                 default = nil)
  if valid_615027 != nil:
    section.add "X-Amz-Date", valid_615027
  var valid_615028 = header.getOrDefault("X-Amz-Credential")
  valid_615028 = validateParameter(valid_615028, JString, required = false,
                                 default = nil)
  if valid_615028 != nil:
    section.add "X-Amz-Credential", valid_615028
  var valid_615029 = header.getOrDefault("X-Amz-Security-Token")
  valid_615029 = validateParameter(valid_615029, JString, required = false,
                                 default = nil)
  if valid_615029 != nil:
    section.add "X-Amz-Security-Token", valid_615029
  var valid_615030 = header.getOrDefault("X-Amz-Algorithm")
  valid_615030 = validateParameter(valid_615030, JString, required = false,
                                 default = nil)
  if valid_615030 != nil:
    section.add "X-Amz-Algorithm", valid_615030
  var valid_615031 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615031 = validateParameter(valid_615031, JString, required = false,
                                 default = nil)
  if valid_615031 != nil:
    section.add "X-Amz-SignedHeaders", valid_615031
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CertificateId` field"
  var valid_615032 = formData.getOrDefault("CertificateId")
  valid_615032 = validateParameter(valid_615032, JString, required = true,
                                 default = nil)
  if valid_615032 != nil:
    section.add "CertificateId", valid_615032
  var valid_615033 = formData.getOrDefault("UserName")
  valid_615033 = validateParameter(valid_615033, JString, required = false,
                                 default = nil)
  if valid_615033 != nil:
    section.add "UserName", valid_615033
  var valid_615034 = formData.getOrDefault("Status")
  valid_615034 = validateParameter(valid_615034, JString, required = true,
                                 default = newJString("Active"))
  if valid_615034 != nil:
    section.add "Status", valid_615034
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615035: Call_PostUpdateSigningCertificate_615020; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_615035.validator(path, query, header, formData, body)
  let scheme = call_615035.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615035.url(scheme.get, call_615035.host, call_615035.base,
                         call_615035.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615035, url, valid)

proc call*(call_615036: Call_PostUpdateSigningCertificate_615020;
          CertificateId: string; UserName: string = "";
          Action: string = "UpdateSigningCertificate"; Status: string = "Active";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateSigningCertificate
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Status: string (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   Version: string (required)
  var query_615037 = newJObject()
  var formData_615038 = newJObject()
  add(formData_615038, "CertificateId", newJString(CertificateId))
  add(formData_615038, "UserName", newJString(UserName))
  add(query_615037, "Action", newJString(Action))
  add(formData_615038, "Status", newJString(Status))
  add(query_615037, "Version", newJString(Version))
  result = call_615036.call(nil, query_615037, nil, formData_615038, nil)

var postUpdateSigningCertificate* = Call_PostUpdateSigningCertificate_615020(
    name: "postUpdateSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSigningCertificate",
    validator: validate_PostUpdateSigningCertificate_615021, base: "/",
    url: url_PostUpdateSigningCertificate_615022,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSigningCertificate_615002 = ref object of OpenApiRestCall_609589
proc url_GetUpdateSigningCertificate_615004(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateSigningCertificate_615003(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_615005 = query.getOrDefault("UserName")
  valid_615005 = validateParameter(valid_615005, JString, required = false,
                                 default = nil)
  if valid_615005 != nil:
    section.add "UserName", valid_615005
  var valid_615006 = query.getOrDefault("Status")
  valid_615006 = validateParameter(valid_615006, JString, required = true,
                                 default = newJString("Active"))
  if valid_615006 != nil:
    section.add "Status", valid_615006
  var valid_615007 = query.getOrDefault("Action")
  valid_615007 = validateParameter(valid_615007, JString, required = true, default = newJString(
      "UpdateSigningCertificate"))
  if valid_615007 != nil:
    section.add "Action", valid_615007
  var valid_615008 = query.getOrDefault("Version")
  valid_615008 = validateParameter(valid_615008, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615008 != nil:
    section.add "Version", valid_615008
  var valid_615009 = query.getOrDefault("CertificateId")
  valid_615009 = validateParameter(valid_615009, JString, required = true,
                                 default = nil)
  if valid_615009 != nil:
    section.add "CertificateId", valid_615009
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615010 = header.getOrDefault("X-Amz-Signature")
  valid_615010 = validateParameter(valid_615010, JString, required = false,
                                 default = nil)
  if valid_615010 != nil:
    section.add "X-Amz-Signature", valid_615010
  var valid_615011 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615011 = validateParameter(valid_615011, JString, required = false,
                                 default = nil)
  if valid_615011 != nil:
    section.add "X-Amz-Content-Sha256", valid_615011
  var valid_615012 = header.getOrDefault("X-Amz-Date")
  valid_615012 = validateParameter(valid_615012, JString, required = false,
                                 default = nil)
  if valid_615012 != nil:
    section.add "X-Amz-Date", valid_615012
  var valid_615013 = header.getOrDefault("X-Amz-Credential")
  valid_615013 = validateParameter(valid_615013, JString, required = false,
                                 default = nil)
  if valid_615013 != nil:
    section.add "X-Amz-Credential", valid_615013
  var valid_615014 = header.getOrDefault("X-Amz-Security-Token")
  valid_615014 = validateParameter(valid_615014, JString, required = false,
                                 default = nil)
  if valid_615014 != nil:
    section.add "X-Amz-Security-Token", valid_615014
  var valid_615015 = header.getOrDefault("X-Amz-Algorithm")
  valid_615015 = validateParameter(valid_615015, JString, required = false,
                                 default = nil)
  if valid_615015 != nil:
    section.add "X-Amz-Algorithm", valid_615015
  var valid_615016 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615016 = validateParameter(valid_615016, JString, required = false,
                                 default = nil)
  if valid_615016 != nil:
    section.add "X-Amz-SignedHeaders", valid_615016
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615017: Call_GetUpdateSigningCertificate_615002; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_615017.validator(path, query, header, formData, body)
  let scheme = call_615017.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615017.url(scheme.get, call_615017.host, call_615017.base,
                         call_615017.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615017, url, valid)

proc call*(call_615018: Call_GetUpdateSigningCertificate_615002;
          CertificateId: string; UserName: string = ""; Status: string = "Active";
          Action: string = "UpdateSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateSigningCertificate
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  var query_615019 = newJObject()
  add(query_615019, "UserName", newJString(UserName))
  add(query_615019, "Status", newJString(Status))
  add(query_615019, "Action", newJString(Action))
  add(query_615019, "Version", newJString(Version))
  add(query_615019, "CertificateId", newJString(CertificateId))
  result = call_615018.call(nil, query_615019, nil, nil, nil)

var getUpdateSigningCertificate* = Call_GetUpdateSigningCertificate_615002(
    name: "getUpdateSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSigningCertificate",
    validator: validate_GetUpdateSigningCertificate_615003, base: "/",
    url: url_GetUpdateSigningCertificate_615004,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateUser_615057 = ref object of OpenApiRestCall_609589
proc url_PostUpdateUser_615059(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateUser_615058(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615060 = query.getOrDefault("Action")
  valid_615060 = validateParameter(valid_615060, JString, required = true,
                                 default = newJString("UpdateUser"))
  if valid_615060 != nil:
    section.add "Action", valid_615060
  var valid_615061 = query.getOrDefault("Version")
  valid_615061 = validateParameter(valid_615061, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615061 != nil:
    section.add "Version", valid_615061
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615062 = header.getOrDefault("X-Amz-Signature")
  valid_615062 = validateParameter(valid_615062, JString, required = false,
                                 default = nil)
  if valid_615062 != nil:
    section.add "X-Amz-Signature", valid_615062
  var valid_615063 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615063 = validateParameter(valid_615063, JString, required = false,
                                 default = nil)
  if valid_615063 != nil:
    section.add "X-Amz-Content-Sha256", valid_615063
  var valid_615064 = header.getOrDefault("X-Amz-Date")
  valid_615064 = validateParameter(valid_615064, JString, required = false,
                                 default = nil)
  if valid_615064 != nil:
    section.add "X-Amz-Date", valid_615064
  var valid_615065 = header.getOrDefault("X-Amz-Credential")
  valid_615065 = validateParameter(valid_615065, JString, required = false,
                                 default = nil)
  if valid_615065 != nil:
    section.add "X-Amz-Credential", valid_615065
  var valid_615066 = header.getOrDefault("X-Amz-Security-Token")
  valid_615066 = validateParameter(valid_615066, JString, required = false,
                                 default = nil)
  if valid_615066 != nil:
    section.add "X-Amz-Security-Token", valid_615066
  var valid_615067 = header.getOrDefault("X-Amz-Algorithm")
  valid_615067 = validateParameter(valid_615067, JString, required = false,
                                 default = nil)
  if valid_615067 != nil:
    section.add "X-Amz-Algorithm", valid_615067
  var valid_615068 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615068 = validateParameter(valid_615068, JString, required = false,
                                 default = nil)
  if valid_615068 != nil:
    section.add "X-Amz-SignedHeaders", valid_615068
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewPath: JString
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: JString (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: JString
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  section = newJObject()
  var valid_615069 = formData.getOrDefault("NewPath")
  valid_615069 = validateParameter(valid_615069, JString, required = false,
                                 default = nil)
  if valid_615069 != nil:
    section.add "NewPath", valid_615069
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_615070 = formData.getOrDefault("UserName")
  valid_615070 = validateParameter(valid_615070, JString, required = true,
                                 default = nil)
  if valid_615070 != nil:
    section.add "UserName", valid_615070
  var valid_615071 = formData.getOrDefault("NewUserName")
  valid_615071 = validateParameter(valid_615071, JString, required = false,
                                 default = nil)
  if valid_615071 != nil:
    section.add "NewUserName", valid_615071
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615072: Call_PostUpdateUser_615057; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  let valid = call_615072.validator(path, query, header, formData, body)
  let scheme = call_615072.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615072.url(scheme.get, call_615072.host, call_615072.base,
                         call_615072.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615072, url, valid)

proc call*(call_615073: Call_PostUpdateUser_615057; UserName: string;
          NewPath: string = ""; Action: string = "UpdateUser"; NewUserName: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateUser
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ##   NewPath: string
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: string (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   NewUserName: string
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: string (required)
  var query_615074 = newJObject()
  var formData_615075 = newJObject()
  add(formData_615075, "NewPath", newJString(NewPath))
  add(formData_615075, "UserName", newJString(UserName))
  add(query_615074, "Action", newJString(Action))
  add(formData_615075, "NewUserName", newJString(NewUserName))
  add(query_615074, "Version", newJString(Version))
  result = call_615073.call(nil, query_615074, nil, formData_615075, nil)

var postUpdateUser* = Call_PostUpdateUser_615057(name: "postUpdateUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateUser", validator: validate_PostUpdateUser_615058,
    base: "/", url: url_PostUpdateUser_615059, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateUser_615039 = ref object of OpenApiRestCall_609589
proc url_GetUpdateUser_615041(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateUser_615040(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: JString
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_615042 = query.getOrDefault("UserName")
  valid_615042 = validateParameter(valid_615042, JString, required = true,
                                 default = nil)
  if valid_615042 != nil:
    section.add "UserName", valid_615042
  var valid_615043 = query.getOrDefault("NewUserName")
  valid_615043 = validateParameter(valid_615043, JString, required = false,
                                 default = nil)
  if valid_615043 != nil:
    section.add "NewUserName", valid_615043
  var valid_615044 = query.getOrDefault("NewPath")
  valid_615044 = validateParameter(valid_615044, JString, required = false,
                                 default = nil)
  if valid_615044 != nil:
    section.add "NewPath", valid_615044
  var valid_615045 = query.getOrDefault("Action")
  valid_615045 = validateParameter(valid_615045, JString, required = true,
                                 default = newJString("UpdateUser"))
  if valid_615045 != nil:
    section.add "Action", valid_615045
  var valid_615046 = query.getOrDefault("Version")
  valid_615046 = validateParameter(valid_615046, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615046 != nil:
    section.add "Version", valid_615046
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615047 = header.getOrDefault("X-Amz-Signature")
  valid_615047 = validateParameter(valid_615047, JString, required = false,
                                 default = nil)
  if valid_615047 != nil:
    section.add "X-Amz-Signature", valid_615047
  var valid_615048 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615048 = validateParameter(valid_615048, JString, required = false,
                                 default = nil)
  if valid_615048 != nil:
    section.add "X-Amz-Content-Sha256", valid_615048
  var valid_615049 = header.getOrDefault("X-Amz-Date")
  valid_615049 = validateParameter(valid_615049, JString, required = false,
                                 default = nil)
  if valid_615049 != nil:
    section.add "X-Amz-Date", valid_615049
  var valid_615050 = header.getOrDefault("X-Amz-Credential")
  valid_615050 = validateParameter(valid_615050, JString, required = false,
                                 default = nil)
  if valid_615050 != nil:
    section.add "X-Amz-Credential", valid_615050
  var valid_615051 = header.getOrDefault("X-Amz-Security-Token")
  valid_615051 = validateParameter(valid_615051, JString, required = false,
                                 default = nil)
  if valid_615051 != nil:
    section.add "X-Amz-Security-Token", valid_615051
  var valid_615052 = header.getOrDefault("X-Amz-Algorithm")
  valid_615052 = validateParameter(valid_615052, JString, required = false,
                                 default = nil)
  if valid_615052 != nil:
    section.add "X-Amz-Algorithm", valid_615052
  var valid_615053 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615053 = validateParameter(valid_615053, JString, required = false,
                                 default = nil)
  if valid_615053 != nil:
    section.add "X-Amz-SignedHeaders", valid_615053
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615054: Call_GetUpdateUser_615039; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  let valid = call_615054.validator(path, query, header, formData, body)
  let scheme = call_615054.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615054.url(scheme.get, call_615054.host, call_615054.base,
                         call_615054.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615054, url, valid)

proc call*(call_615055: Call_GetUpdateUser_615039; UserName: string;
          NewUserName: string = ""; NewPath: string = ""; Action: string = "UpdateUser";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateUser
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ##   UserName: string (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: string
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615056 = newJObject()
  add(query_615056, "UserName", newJString(UserName))
  add(query_615056, "NewUserName", newJString(NewUserName))
  add(query_615056, "NewPath", newJString(NewPath))
  add(query_615056, "Action", newJString(Action))
  add(query_615056, "Version", newJString(Version))
  result = call_615055.call(nil, query_615056, nil, nil, nil)

var getUpdateUser* = Call_GetUpdateUser_615039(name: "getUpdateUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateUser", validator: validate_GetUpdateUser_615040,
    base: "/", url: url_GetUpdateUser_615041, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadSSHPublicKey_615093 = ref object of OpenApiRestCall_609589
proc url_PostUploadSSHPublicKey_615095(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUploadSSHPublicKey_615094(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615096 = query.getOrDefault("Action")
  valid_615096 = validateParameter(valid_615096, JString, required = true,
                                 default = newJString("UploadSSHPublicKey"))
  if valid_615096 != nil:
    section.add "Action", valid_615096
  var valid_615097 = query.getOrDefault("Version")
  valid_615097 = validateParameter(valid_615097, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615097 != nil:
    section.add "Version", valid_615097
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615098 = header.getOrDefault("X-Amz-Signature")
  valid_615098 = validateParameter(valid_615098, JString, required = false,
                                 default = nil)
  if valid_615098 != nil:
    section.add "X-Amz-Signature", valid_615098
  var valid_615099 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615099 = validateParameter(valid_615099, JString, required = false,
                                 default = nil)
  if valid_615099 != nil:
    section.add "X-Amz-Content-Sha256", valid_615099
  var valid_615100 = header.getOrDefault("X-Amz-Date")
  valid_615100 = validateParameter(valid_615100, JString, required = false,
                                 default = nil)
  if valid_615100 != nil:
    section.add "X-Amz-Date", valid_615100
  var valid_615101 = header.getOrDefault("X-Amz-Credential")
  valid_615101 = validateParameter(valid_615101, JString, required = false,
                                 default = nil)
  if valid_615101 != nil:
    section.add "X-Amz-Credential", valid_615101
  var valid_615102 = header.getOrDefault("X-Amz-Security-Token")
  valid_615102 = validateParameter(valid_615102, JString, required = false,
                                 default = nil)
  if valid_615102 != nil:
    section.add "X-Amz-Security-Token", valid_615102
  var valid_615103 = header.getOrDefault("X-Amz-Algorithm")
  valid_615103 = validateParameter(valid_615103, JString, required = false,
                                 default = nil)
  if valid_615103 != nil:
    section.add "X-Amz-Algorithm", valid_615103
  var valid_615104 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615104 = validateParameter(valid_615104, JString, required = false,
                                 default = nil)
  if valid_615104 != nil:
    section.add "X-Amz-SignedHeaders", valid_615104
  result.add "header", section
  ## parameters in `formData` object:
  ##   SSHPublicKeyBody: JString (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SSHPublicKeyBody` field"
  var valid_615105 = formData.getOrDefault("SSHPublicKeyBody")
  valid_615105 = validateParameter(valid_615105, JString, required = true,
                                 default = nil)
  if valid_615105 != nil:
    section.add "SSHPublicKeyBody", valid_615105
  var valid_615106 = formData.getOrDefault("UserName")
  valid_615106 = validateParameter(valid_615106, JString, required = true,
                                 default = nil)
  if valid_615106 != nil:
    section.add "UserName", valid_615106
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615107: Call_PostUploadSSHPublicKey_615093; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_615107.validator(path, query, header, formData, body)
  let scheme = call_615107.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615107.url(scheme.get, call_615107.host, call_615107.base,
                         call_615107.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615107, url, valid)

proc call*(call_615108: Call_PostUploadSSHPublicKey_615093;
          SSHPublicKeyBody: string; UserName: string;
          Action: string = "UploadSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## postUploadSSHPublicKey
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyBody: string (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615109 = newJObject()
  var formData_615110 = newJObject()
  add(formData_615110, "SSHPublicKeyBody", newJString(SSHPublicKeyBody))
  add(formData_615110, "UserName", newJString(UserName))
  add(query_615109, "Action", newJString(Action))
  add(query_615109, "Version", newJString(Version))
  result = call_615108.call(nil, query_615109, nil, formData_615110, nil)

var postUploadSSHPublicKey* = Call_PostUploadSSHPublicKey_615093(
    name: "postUploadSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadSSHPublicKey",
    validator: validate_PostUploadSSHPublicKey_615094, base: "/",
    url: url_PostUploadSSHPublicKey_615095, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadSSHPublicKey_615076 = ref object of OpenApiRestCall_609589
proc url_GetUploadSSHPublicKey_615078(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUploadSSHPublicKey_615077(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyBody: JString (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyBody` field"
  var valid_615079 = query.getOrDefault("SSHPublicKeyBody")
  valid_615079 = validateParameter(valid_615079, JString, required = true,
                                 default = nil)
  if valid_615079 != nil:
    section.add "SSHPublicKeyBody", valid_615079
  var valid_615080 = query.getOrDefault("UserName")
  valid_615080 = validateParameter(valid_615080, JString, required = true,
                                 default = nil)
  if valid_615080 != nil:
    section.add "UserName", valid_615080
  var valid_615081 = query.getOrDefault("Action")
  valid_615081 = validateParameter(valid_615081, JString, required = true,
                                 default = newJString("UploadSSHPublicKey"))
  if valid_615081 != nil:
    section.add "Action", valid_615081
  var valid_615082 = query.getOrDefault("Version")
  valid_615082 = validateParameter(valid_615082, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615082 != nil:
    section.add "Version", valid_615082
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615083 = header.getOrDefault("X-Amz-Signature")
  valid_615083 = validateParameter(valid_615083, JString, required = false,
                                 default = nil)
  if valid_615083 != nil:
    section.add "X-Amz-Signature", valid_615083
  var valid_615084 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615084 = validateParameter(valid_615084, JString, required = false,
                                 default = nil)
  if valid_615084 != nil:
    section.add "X-Amz-Content-Sha256", valid_615084
  var valid_615085 = header.getOrDefault("X-Amz-Date")
  valid_615085 = validateParameter(valid_615085, JString, required = false,
                                 default = nil)
  if valid_615085 != nil:
    section.add "X-Amz-Date", valid_615085
  var valid_615086 = header.getOrDefault("X-Amz-Credential")
  valid_615086 = validateParameter(valid_615086, JString, required = false,
                                 default = nil)
  if valid_615086 != nil:
    section.add "X-Amz-Credential", valid_615086
  var valid_615087 = header.getOrDefault("X-Amz-Security-Token")
  valid_615087 = validateParameter(valid_615087, JString, required = false,
                                 default = nil)
  if valid_615087 != nil:
    section.add "X-Amz-Security-Token", valid_615087
  var valid_615088 = header.getOrDefault("X-Amz-Algorithm")
  valid_615088 = validateParameter(valid_615088, JString, required = false,
                                 default = nil)
  if valid_615088 != nil:
    section.add "X-Amz-Algorithm", valid_615088
  var valid_615089 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615089 = validateParameter(valid_615089, JString, required = false,
                                 default = nil)
  if valid_615089 != nil:
    section.add "X-Amz-SignedHeaders", valid_615089
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615090: Call_GetUploadSSHPublicKey_615076; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_615090.validator(path, query, header, formData, body)
  let scheme = call_615090.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615090.url(scheme.get, call_615090.host, call_615090.base,
                         call_615090.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615090, url, valid)

proc call*(call_615091: Call_GetUploadSSHPublicKey_615076;
          SSHPublicKeyBody: string; UserName: string;
          Action: string = "UploadSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getUploadSSHPublicKey
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyBody: string (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615092 = newJObject()
  add(query_615092, "SSHPublicKeyBody", newJString(SSHPublicKeyBody))
  add(query_615092, "UserName", newJString(UserName))
  add(query_615092, "Action", newJString(Action))
  add(query_615092, "Version", newJString(Version))
  result = call_615091.call(nil, query_615092, nil, nil, nil)

var getUploadSSHPublicKey* = Call_GetUploadSSHPublicKey_615076(
    name: "getUploadSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadSSHPublicKey",
    validator: validate_GetUploadSSHPublicKey_615077, base: "/",
    url: url_GetUploadSSHPublicKey_615078, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadServerCertificate_615131 = ref object of OpenApiRestCall_609589
proc url_PostUploadServerCertificate_615133(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUploadServerCertificate_615132(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615134 = query.getOrDefault("Action")
  valid_615134 = validateParameter(valid_615134, JString, required = true, default = newJString(
      "UploadServerCertificate"))
  if valid_615134 != nil:
    section.add "Action", valid_615134
  var valid_615135 = query.getOrDefault("Version")
  valid_615135 = validateParameter(valid_615135, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615135 != nil:
    section.add "Version", valid_615135
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615136 = header.getOrDefault("X-Amz-Signature")
  valid_615136 = validateParameter(valid_615136, JString, required = false,
                                 default = nil)
  if valid_615136 != nil:
    section.add "X-Amz-Signature", valid_615136
  var valid_615137 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615137 = validateParameter(valid_615137, JString, required = false,
                                 default = nil)
  if valid_615137 != nil:
    section.add "X-Amz-Content-Sha256", valid_615137
  var valid_615138 = header.getOrDefault("X-Amz-Date")
  valid_615138 = validateParameter(valid_615138, JString, required = false,
                                 default = nil)
  if valid_615138 != nil:
    section.add "X-Amz-Date", valid_615138
  var valid_615139 = header.getOrDefault("X-Amz-Credential")
  valid_615139 = validateParameter(valid_615139, JString, required = false,
                                 default = nil)
  if valid_615139 != nil:
    section.add "X-Amz-Credential", valid_615139
  var valid_615140 = header.getOrDefault("X-Amz-Security-Token")
  valid_615140 = validateParameter(valid_615140, JString, required = false,
                                 default = nil)
  if valid_615140 != nil:
    section.add "X-Amz-Security-Token", valid_615140
  var valid_615141 = header.getOrDefault("X-Amz-Algorithm")
  valid_615141 = validateParameter(valid_615141, JString, required = false,
                                 default = nil)
  if valid_615141 != nil:
    section.add "X-Amz-Algorithm", valid_615141
  var valid_615142 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615142 = validateParameter(valid_615142, JString, required = false,
                                 default = nil)
  if valid_615142 != nil:
    section.add "X-Amz-SignedHeaders", valid_615142
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PrivateKey: JString (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CertificateChain: JString
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: JString
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CertificateBody` field"
  var valid_615143 = formData.getOrDefault("CertificateBody")
  valid_615143 = validateParameter(valid_615143, JString, required = true,
                                 default = nil)
  if valid_615143 != nil:
    section.add "CertificateBody", valid_615143
  var valid_615144 = formData.getOrDefault("PrivateKey")
  valid_615144 = validateParameter(valid_615144, JString, required = true,
                                 default = nil)
  if valid_615144 != nil:
    section.add "PrivateKey", valid_615144
  var valid_615145 = formData.getOrDefault("CertificateChain")
  valid_615145 = validateParameter(valid_615145, JString, required = false,
                                 default = nil)
  if valid_615145 != nil:
    section.add "CertificateChain", valid_615145
  var valid_615146 = formData.getOrDefault("ServerCertificateName")
  valid_615146 = validateParameter(valid_615146, JString, required = true,
                                 default = nil)
  if valid_615146 != nil:
    section.add "ServerCertificateName", valid_615146
  var valid_615147 = formData.getOrDefault("Path")
  valid_615147 = validateParameter(valid_615147, JString, required = false,
                                 default = nil)
  if valid_615147 != nil:
    section.add "Path", valid_615147
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615148: Call_PostUploadServerCertificate_615131; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_615148.validator(path, query, header, formData, body)
  let scheme = call_615148.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615148.url(scheme.get, call_615148.host, call_615148.base,
                         call_615148.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615148, url, valid)

proc call*(call_615149: Call_PostUploadServerCertificate_615131;
          CertificateBody: string; PrivateKey: string;
          ServerCertificateName: string; CertificateChain: string = "";
          Path: string = ""; Action: string = "UploadServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postUploadServerCertificate
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PrivateKey: string (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CertificateChain: string
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: string
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615150 = newJObject()
  var formData_615151 = newJObject()
  add(formData_615151, "CertificateBody", newJString(CertificateBody))
  add(formData_615151, "PrivateKey", newJString(PrivateKey))
  add(formData_615151, "CertificateChain", newJString(CertificateChain))
  add(formData_615151, "ServerCertificateName", newJString(ServerCertificateName))
  add(formData_615151, "Path", newJString(Path))
  add(query_615150, "Action", newJString(Action))
  add(query_615150, "Version", newJString(Version))
  result = call_615149.call(nil, query_615150, nil, formData_615151, nil)

var postUploadServerCertificate* = Call_PostUploadServerCertificate_615131(
    name: "postUploadServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadServerCertificate",
    validator: validate_PostUploadServerCertificate_615132, base: "/",
    url: url_PostUploadServerCertificate_615133,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadServerCertificate_615111 = ref object of OpenApiRestCall_609589
proc url_GetUploadServerCertificate_615113(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUploadServerCertificate_615112(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CertificateChain: JString
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PrivateKey: JString (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Path: JString
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615114 = query.getOrDefault("CertificateChain")
  valid_615114 = validateParameter(valid_615114, JString, required = false,
                                 default = nil)
  if valid_615114 != nil:
    section.add "CertificateChain", valid_615114
  assert query != nil,
        "query argument is necessary due to required `CertificateBody` field"
  var valid_615115 = query.getOrDefault("CertificateBody")
  valid_615115 = validateParameter(valid_615115, JString, required = true,
                                 default = nil)
  if valid_615115 != nil:
    section.add "CertificateBody", valid_615115
  var valid_615116 = query.getOrDefault("PrivateKey")
  valid_615116 = validateParameter(valid_615116, JString, required = true,
                                 default = nil)
  if valid_615116 != nil:
    section.add "PrivateKey", valid_615116
  var valid_615117 = query.getOrDefault("Path")
  valid_615117 = validateParameter(valid_615117, JString, required = false,
                                 default = nil)
  if valid_615117 != nil:
    section.add "Path", valid_615117
  var valid_615118 = query.getOrDefault("ServerCertificateName")
  valid_615118 = validateParameter(valid_615118, JString, required = true,
                                 default = nil)
  if valid_615118 != nil:
    section.add "ServerCertificateName", valid_615118
  var valid_615119 = query.getOrDefault("Action")
  valid_615119 = validateParameter(valid_615119, JString, required = true, default = newJString(
      "UploadServerCertificate"))
  if valid_615119 != nil:
    section.add "Action", valid_615119
  var valid_615120 = query.getOrDefault("Version")
  valid_615120 = validateParameter(valid_615120, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615120 != nil:
    section.add "Version", valid_615120
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615121 = header.getOrDefault("X-Amz-Signature")
  valid_615121 = validateParameter(valid_615121, JString, required = false,
                                 default = nil)
  if valid_615121 != nil:
    section.add "X-Amz-Signature", valid_615121
  var valid_615122 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615122 = validateParameter(valid_615122, JString, required = false,
                                 default = nil)
  if valid_615122 != nil:
    section.add "X-Amz-Content-Sha256", valid_615122
  var valid_615123 = header.getOrDefault("X-Amz-Date")
  valid_615123 = validateParameter(valid_615123, JString, required = false,
                                 default = nil)
  if valid_615123 != nil:
    section.add "X-Amz-Date", valid_615123
  var valid_615124 = header.getOrDefault("X-Amz-Credential")
  valid_615124 = validateParameter(valid_615124, JString, required = false,
                                 default = nil)
  if valid_615124 != nil:
    section.add "X-Amz-Credential", valid_615124
  var valid_615125 = header.getOrDefault("X-Amz-Security-Token")
  valid_615125 = validateParameter(valid_615125, JString, required = false,
                                 default = nil)
  if valid_615125 != nil:
    section.add "X-Amz-Security-Token", valid_615125
  var valid_615126 = header.getOrDefault("X-Amz-Algorithm")
  valid_615126 = validateParameter(valid_615126, JString, required = false,
                                 default = nil)
  if valid_615126 != nil:
    section.add "X-Amz-Algorithm", valid_615126
  var valid_615127 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615127 = validateParameter(valid_615127, JString, required = false,
                                 default = nil)
  if valid_615127 != nil:
    section.add "X-Amz-SignedHeaders", valid_615127
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615128: Call_GetUploadServerCertificate_615111; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_615128.validator(path, query, header, formData, body)
  let scheme = call_615128.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615128.url(scheme.get, call_615128.host, call_615128.base,
                         call_615128.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615128, url, valid)

proc call*(call_615129: Call_GetUploadServerCertificate_615111;
          CertificateBody: string; PrivateKey: string;
          ServerCertificateName: string; CertificateChain: string = "";
          Path: string = ""; Action: string = "UploadServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUploadServerCertificate
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateChain: string
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PrivateKey: string (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Path: string
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615130 = newJObject()
  add(query_615130, "CertificateChain", newJString(CertificateChain))
  add(query_615130, "CertificateBody", newJString(CertificateBody))
  add(query_615130, "PrivateKey", newJString(PrivateKey))
  add(query_615130, "Path", newJString(Path))
  add(query_615130, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_615130, "Action", newJString(Action))
  add(query_615130, "Version", newJString(Version))
  result = call_615129.call(nil, query_615130, nil, nil, nil)

var getUploadServerCertificate* = Call_GetUploadServerCertificate_615111(
    name: "getUploadServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadServerCertificate",
    validator: validate_GetUploadServerCertificate_615112, base: "/",
    url: url_GetUploadServerCertificate_615113,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadSigningCertificate_615169 = ref object of OpenApiRestCall_609589
proc url_PostUploadSigningCertificate_615171(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUploadSigningCertificate_615170(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615172 = query.getOrDefault("Action")
  valid_615172 = validateParameter(valid_615172, JString, required = true, default = newJString(
      "UploadSigningCertificate"))
  if valid_615172 != nil:
    section.add "Action", valid_615172
  var valid_615173 = query.getOrDefault("Version")
  valid_615173 = validateParameter(valid_615173, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615173 != nil:
    section.add "Version", valid_615173
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615174 = header.getOrDefault("X-Amz-Signature")
  valid_615174 = validateParameter(valid_615174, JString, required = false,
                                 default = nil)
  if valid_615174 != nil:
    section.add "X-Amz-Signature", valid_615174
  var valid_615175 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615175 = validateParameter(valid_615175, JString, required = false,
                                 default = nil)
  if valid_615175 != nil:
    section.add "X-Amz-Content-Sha256", valid_615175
  var valid_615176 = header.getOrDefault("X-Amz-Date")
  valid_615176 = validateParameter(valid_615176, JString, required = false,
                                 default = nil)
  if valid_615176 != nil:
    section.add "X-Amz-Date", valid_615176
  var valid_615177 = header.getOrDefault("X-Amz-Credential")
  valid_615177 = validateParameter(valid_615177, JString, required = false,
                                 default = nil)
  if valid_615177 != nil:
    section.add "X-Amz-Credential", valid_615177
  var valid_615178 = header.getOrDefault("X-Amz-Security-Token")
  valid_615178 = validateParameter(valid_615178, JString, required = false,
                                 default = nil)
  if valid_615178 != nil:
    section.add "X-Amz-Security-Token", valid_615178
  var valid_615179 = header.getOrDefault("X-Amz-Algorithm")
  valid_615179 = validateParameter(valid_615179, JString, required = false,
                                 default = nil)
  if valid_615179 != nil:
    section.add "X-Amz-Algorithm", valid_615179
  var valid_615180 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615180 = validateParameter(valid_615180, JString, required = false,
                                 default = nil)
  if valid_615180 != nil:
    section.add "X-Amz-SignedHeaders", valid_615180
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CertificateBody` field"
  var valid_615181 = formData.getOrDefault("CertificateBody")
  valid_615181 = validateParameter(valid_615181, JString, required = true,
                                 default = nil)
  if valid_615181 != nil:
    section.add "CertificateBody", valid_615181
  var valid_615182 = formData.getOrDefault("UserName")
  valid_615182 = validateParameter(valid_615182, JString, required = false,
                                 default = nil)
  if valid_615182 != nil:
    section.add "UserName", valid_615182
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615183: Call_PostUploadSigningCertificate_615169; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_615183.validator(path, query, header, formData, body)
  let scheme = call_615183.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615183.url(scheme.get, call_615183.host, call_615183.base,
                         call_615183.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615183, url, valid)

proc call*(call_615184: Call_PostUploadSigningCertificate_615169;
          CertificateBody: string; UserName: string = "";
          Action: string = "UploadSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postUploadSigningCertificate
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615185 = newJObject()
  var formData_615186 = newJObject()
  add(formData_615186, "CertificateBody", newJString(CertificateBody))
  add(formData_615186, "UserName", newJString(UserName))
  add(query_615185, "Action", newJString(Action))
  add(query_615185, "Version", newJString(Version))
  result = call_615184.call(nil, query_615185, nil, formData_615186, nil)

var postUploadSigningCertificate* = Call_PostUploadSigningCertificate_615169(
    name: "postUploadSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadSigningCertificate",
    validator: validate_PostUploadSigningCertificate_615170, base: "/",
    url: url_PostUploadSigningCertificate_615171,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadSigningCertificate_615152 = ref object of OpenApiRestCall_609589
proc url_GetUploadSigningCertificate_615154(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUploadSigningCertificate_615153(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615155 = query.getOrDefault("UserName")
  valid_615155 = validateParameter(valid_615155, JString, required = false,
                                 default = nil)
  if valid_615155 != nil:
    section.add "UserName", valid_615155
  assert query != nil,
        "query argument is necessary due to required `CertificateBody` field"
  var valid_615156 = query.getOrDefault("CertificateBody")
  valid_615156 = validateParameter(valid_615156, JString, required = true,
                                 default = nil)
  if valid_615156 != nil:
    section.add "CertificateBody", valid_615156
  var valid_615157 = query.getOrDefault("Action")
  valid_615157 = validateParameter(valid_615157, JString, required = true, default = newJString(
      "UploadSigningCertificate"))
  if valid_615157 != nil:
    section.add "Action", valid_615157
  var valid_615158 = query.getOrDefault("Version")
  valid_615158 = validateParameter(valid_615158, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615158 != nil:
    section.add "Version", valid_615158
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615159 = header.getOrDefault("X-Amz-Signature")
  valid_615159 = validateParameter(valid_615159, JString, required = false,
                                 default = nil)
  if valid_615159 != nil:
    section.add "X-Amz-Signature", valid_615159
  var valid_615160 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615160 = validateParameter(valid_615160, JString, required = false,
                                 default = nil)
  if valid_615160 != nil:
    section.add "X-Amz-Content-Sha256", valid_615160
  var valid_615161 = header.getOrDefault("X-Amz-Date")
  valid_615161 = validateParameter(valid_615161, JString, required = false,
                                 default = nil)
  if valid_615161 != nil:
    section.add "X-Amz-Date", valid_615161
  var valid_615162 = header.getOrDefault("X-Amz-Credential")
  valid_615162 = validateParameter(valid_615162, JString, required = false,
                                 default = nil)
  if valid_615162 != nil:
    section.add "X-Amz-Credential", valid_615162
  var valid_615163 = header.getOrDefault("X-Amz-Security-Token")
  valid_615163 = validateParameter(valid_615163, JString, required = false,
                                 default = nil)
  if valid_615163 != nil:
    section.add "X-Amz-Security-Token", valid_615163
  var valid_615164 = header.getOrDefault("X-Amz-Algorithm")
  valid_615164 = validateParameter(valid_615164, JString, required = false,
                                 default = nil)
  if valid_615164 != nil:
    section.add "X-Amz-Algorithm", valid_615164
  var valid_615165 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615165 = validateParameter(valid_615165, JString, required = false,
                                 default = nil)
  if valid_615165 != nil:
    section.add "X-Amz-SignedHeaders", valid_615165
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615166: Call_GetUploadSigningCertificate_615152; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_615166.validator(path, query, header, formData, body)
  let scheme = call_615166.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615166.url(scheme.get, call_615166.host, call_615166.base,
                         call_615166.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615166, url, valid)

proc call*(call_615167: Call_GetUploadSigningCertificate_615152;
          CertificateBody: string; UserName: string = "";
          Action: string = "UploadSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUploadSigningCertificate
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615168 = newJObject()
  add(query_615168, "UserName", newJString(UserName))
  add(query_615168, "CertificateBody", newJString(CertificateBody))
  add(query_615168, "Action", newJString(Action))
  add(query_615168, "Version", newJString(Version))
  result = call_615167.call(nil, query_615168, nil, nil, nil)

var getUploadSigningCertificate* = Call_GetUploadSigningCertificate_615152(
    name: "getUploadSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadSigningCertificate",
    validator: validate_GetUploadSigningCertificate_615153, base: "/",
    url: url_GetUploadSigningCertificate_615154,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  ## the hook is a terrible earworm
  var headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
  let
    body = input.getOrDefault("body")
    text = if body == nil:
      "" elif body.kind == JString:
      body.getStr else:
      $body
  if body != nil and body.kind != JString:
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  const
    XAmzSecurityToken = "X-Amz-Security-Token"
  if not headers.hasKey(XAmzSecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[XAmzSecurityToken] = session
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)
